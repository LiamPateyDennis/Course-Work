
/home/elec4740/Documents/particle/ble-uart-peripheral/target/5.2.0/p2/ble-uart-peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb3b8  085fb088  0000b3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004c3c  023fb3c0  085fb090  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad78  085ffccc  0001ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f8  1007adf0  1007adf0  0002adf0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd44  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000270  085ffd48  085ffd48  0001fd48  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd48  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0010ce8b  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010478  00000000  00000000  0012ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b08  00000000  00000000  0013d303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e393  00000000  00000000  0013fe0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000352c8  00000000  00000000  0015e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5df3  00000000  00000000  00193466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0003b2f6  00000000  00000000  00259259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000b068  00000000  00000000  0029454f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007dd0  00000000  00000000  0029f5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	480e      	ldr	r0, [pc, #56]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb01a:	490f      	ldr	r1, [pc, #60]	; (85fb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a0e      	ldr	r2, [pc, #56]	; (85fb05c <module_user_pre_init+0x44>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b0d      	ldr	r3, [pc, #52]	; (85fb060 <module_user_pre_init+0x48>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	480d      	ldr	r0, [pc, #52]	; (85fb064 <module_user_pre_init+0x4c>)
 85fb030:	4a0d      	ldr	r2, [pc, #52]	; (85fb068 <module_user_pre_init+0x50>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b0d      	ldr	r3, [pc, #52]	; (85fb06c <module_user_pre_init+0x54>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb03a:	480d      	ldr	r0, [pc, #52]	; (85fb070 <module_user_pre_init+0x58>)
 85fb03c:	490d      	ldr	r1, [pc, #52]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a0d      	ldr	r2, [pc, #52]	; (85fb078 <module_user_pre_init+0x60>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb048:	4b05      	ldr	r3, [pc, #20]	; (85fb060 <module_user_pre_init+0x48>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb04e:	4801      	ldr	r0, [pc, #4]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb050:	bd08      	pop	{r3, pc}
 85fb052:	bf00      	nop
 85fb054:	1007ad78 	.word	0x1007ad78
 85fb058:	085ffccc 	.word	0x085ffccc
 85fb05c:	1007adf0 	.word	0x1007adf0
 85fb060:	10110d2d 	.word	0x10110d2d
 85fb064:	1007adf0 	.word	0x1007adf0
 85fb068:	1007afe8 	.word	0x1007afe8
 85fb06c:	10110ea1 	.word	0x10110ea1
 85fb070:	023fb3b8 	.word	0x023fb3b8
 85fb074:	085fb088 	.word	0x085fb088
 85fb078:	023ffffc 	.word	0x023ffffc

085fb07c <dynalib_preinit>:
 85fb07c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb3c0 <strcmp>:
 23fb3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb3c8:	2a01      	cmp	r2, #1
 23fb3ca:	bf28      	it	cs
 23fb3cc:	429a      	cmpcs	r2, r3
 23fb3ce:	d0f7      	beq.n	23fb3c0 <strcmp>
 23fb3d0:	1ad0      	subs	r0, r2, r3
 23fb3d2:	4770      	bx	lr

023fb3d4 <strlen>:
 23fb3d4:	4603      	mov	r3, r0
 23fb3d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb3da:	2a00      	cmp	r2, #0
 23fb3dc:	d1fb      	bne.n	23fb3d6 <strlen+0x2>
 23fb3de:	1a18      	subs	r0, r3, r0
 23fb3e0:	3801      	subs	r0, #1
 23fb3e2:	4770      	bx	lr

023fb3e4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb3e4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb3e6:	f001 faa1 	bl	23fc92c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb3ea:	2500      	movs	r5, #0
 23fb3ec:	4e05      	ldr	r6, [pc, #20]	; (23fb404 <module_user_init+0x20>)
 23fb3ee:	4c06      	ldr	r4, [pc, #24]	; (23fb408 <module_user_init+0x24>)
 23fb3f0:	1ba4      	subs	r4, r4, r6
 23fb3f2:	08a4      	lsrs	r4, r4, #2
 23fb3f4:	42ac      	cmp	r4, r5
 23fb3f6:	d100      	bne.n	23fb3fa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb3f8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb3fa:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb3fe:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb400:	3501      	adds	r5, #1
 23fb402:	e7f7      	b.n	23fb3f4 <module_user_init+0x10>
 23fb404:	023fffd8 	.word	0x023fffd8
 23fb408:	023ffffc 	.word	0x023ffffc

023fb40c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb40c:	f000 b870 	b.w	23fb4f0 <setup>

023fb410 <module_user_loop>:
}

void module_user_loop() {
 23fb410:	b508      	push	{r3, lr}
    loop();
 23fb412:	f000 f8cd 	bl	23fb5b0 <loop>
    _post_loop();
}
 23fb416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb41a:	f001 ba3f 	b.w	23fc89c <_post_loop>

023fb41e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb41e:	f000 bda1 	b.w	23fbf64 <malloc>

023fb422 <_Znaj>:
 23fb422:	f000 bd9f 	b.w	23fbf64 <malloc>

023fb426 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb426:	f000 bdab 	b.w	23fbf80 <free>
	...

023fb42c <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb42c:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb42e:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb430:	4a02      	ldr	r2, [pc, #8]	; (23fb43c <__cxa_pure_virtual+0x10>)
 23fb432:	4903      	ldr	r1, [pc, #12]	; (23fb440 <__cxa_pure_virtual+0x14>)
 23fb434:	f000 fc70 	bl	23fbd18 <panic_>
  while (1);
 23fb438:	e7fe      	b.n	23fb438 <__cxa_pure_virtual+0xc>
 23fb43a:	bf00      	nop
 23fb43c:	023fbca9 	.word	0x023fbca9
 23fb440:	023ff8a4 	.word	0x023ff8a4

023fb444 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb444:	7800      	ldrb	r0, [r0, #0]
 23fb446:	fab0 f080 	clz	r0, r0
 23fb44a:	0940      	lsrs	r0, r0, #5
 23fb44c:	4770      	bx	lr

023fb44e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb44e:	2301      	movs	r3, #1
 23fb450:	7003      	strb	r3, [r0, #0]
 23fb452:	4770      	bx	lr

023fb454 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb454:	4770      	bx	lr
	...

023fb458 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb458:	b510      	push	{r4, lr}
 23fb45a:	4604      	mov	r4, r0
 23fb45c:	4b09      	ldr	r3, [pc, #36]	; (23fb484 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb45e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb460:	f001 fc2e 	bl	23fccc0 <_ZN5spark10LogManager8instanceEv>
 23fb464:	4621      	mov	r1, r4
 23fb466:	f001 fe77 	bl	23fd158 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb46a:	f001 f931 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb46e:	f001 f923 	bl	23fc6b8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb472:	4620      	mov	r0, r4
 23fb474:	4b04      	ldr	r3, [pc, #16]	; (23fb488 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb476:	f840 3b04 	str.w	r3, [r0], #4
 23fb47a:	f001 fd09 	bl	23fce90 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb47e:	4620      	mov	r0, r4
 23fb480:	bd10      	pop	{r4, pc}
 23fb482:	bf00      	nop
 23fb484:	023ff954 	.word	0x023ff954
 23fb488:	023ff93c 	.word	0x023ff93c

023fb48c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb48c:	b510      	push	{r4, lr}
 23fb48e:	4604      	mov	r4, r0
    }
 23fb490:	f7ff ffe2 	bl	23fb458 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb494:	4620      	mov	r0, r4
 23fb496:	2124      	movs	r1, #36	; 0x24
 23fb498:	f7ff ffc5 	bl	23fb426 <_ZdlPvj>
 23fb49c:	4620      	mov	r0, r4
 23fb49e:	bd10      	pop	{r4, pc}

023fb4a0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb4a0:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb4a2:	f04f 0c20 	mov.w	ip, #32
 23fb4a6:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb4a8:	b500      	push	{lr}
 23fb4aa:	b08c      	sub	sp, #48	; 0x30
 23fb4ac:	aa0d      	add	r2, sp, #52	; 0x34
 23fb4ae:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb4b2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb4b6:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb4ba:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb4bc:	6801      	ldr	r1, [r0, #0]
 23fb4be:	aa04      	add	r2, sp, #16
 23fb4c0:	201e      	movs	r0, #30
 23fb4c2:	f000 fc45 	bl	23fbd50 <log_message_v>
}
 23fb4c6:	b00c      	add	sp, #48	; 0x30
 23fb4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb4cc:	b003      	add	sp, #12
 23fb4ce:	4770      	bx	lr

023fb4d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

uint16_t counting;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
 23fb4d0:	b508      	push	{r3, lr}
    // Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);

    // for (size_t ii = 0; ii < len; ii++) {
    //     Serial.write(data[ii]);
    // }
    memcpy(&counting,&data[0],2);
 23fb4d2:	4b04      	ldr	r3, [pc, #16]	; (23fb4e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
 23fb4d4:	8802      	ldrh	r2, [r0, #0]
    Log.info("%d",counting);
 23fb4d6:	4904      	ldr	r1, [pc, #16]	; (23fb4e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
 23fb4d8:	4804      	ldr	r0, [pc, #16]	; (23fb4ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
    memcpy(&counting,&data[0],2);
 23fb4da:	801a      	strh	r2, [r3, #0]
    Log.info("%d",counting);
 23fb4dc:	f7ff ffe0 	bl	23fb4a0 <_ZNK5spark6Logger4infoEPKcz>
}
 23fb4e0:	bd08      	pop	{r3, pc}
 23fb4e2:	bf00      	nop
 23fb4e4:	1007ae50 	.word	0x1007ae50
 23fb4e8:	023ff8b9 	.word	0x023ff8b9
 23fb4ec:	1007aeb4 	.word	0x1007aeb4

023fb4f0 <setup>:

void setup() {
 23fb4f0:	b570      	push	{r4, r5, r6, lr}
 23fb4f2:	b090      	sub	sp, #64	; 0x40
    Serial.begin(9600);
 23fb4f4:	f001 f8ec 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb4f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb4fc:	f001 f8d8 	bl	23fc6b0 <_ZN9USBSerial5beginEl>

	BLE.on();
 23fb500:	f002 fe36 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb504:	f002 fe7e 	bl	23fe204 <_ZNK8particle14BleLocalDevice2onEv>

    BLE.addCharacteristic(txCharacteristic);
 23fb508:	f002 fe32 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb50c:	4a24      	ldr	r2, [pc, #144]	; (23fb5a0 <setup+0xb0>)
 23fb50e:	4601      	mov	r1, r0
 23fb510:	a80b      	add	r0, sp, #44	; 0x2c
 23fb512:	f003 fba3 	bl	23fec5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
 23fb516:	a80b      	add	r0, sp, #44	; 0x2c
 23fb518:	f002 ff19 	bl	23fe34e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
 23fb51c:	f002 fe28 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb520:	4a20      	ldr	r2, [pc, #128]	; (23fb5a4 <setup+0xb4>)
 23fb522:	4601      	mov	r1, r0
 23fb524:	a80b      	add	r0, sp, #44	; 0x2c
 23fb526:	f003 fb99 	bl	23fec5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
 23fb52a:	4c1f      	ldr	r4, [pc, #124]	; (23fb5a8 <setup+0xb8>)
 23fb52c:	a80b      	add	r0, sp, #44	; 0x2c
 23fb52e:	f002 ff0e 	bl	23fe34e <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData data;
 23fb532:	ad06      	add	r5, sp, #24
 23fb534:	a803      	add	r0, sp, #12
 23fb536:	f003 f80e 	bl	23fe556 <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
 23fb53a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fb53c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fb53e:	6826      	ldr	r6, [r4, #0]
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
 23fb540:	ad06      	add	r5, sp, #24
 23fb542:	ac0b      	add	r4, sp, #44	; 0x2c
 23fb544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fb546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
 23fb548:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
 23fb54a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
 23fb54c:	f002 fc1c 	bl	23fdd88 <_ZNK8particle7BleUuid4typeEv>
 23fb550:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
 23fb552:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
 23fb554:	b9dc      	cbnz	r4, 23fb58e <setup+0x9e>
            uint16_t uuid16 = tempUUID.shorted();
 23fb556:	f002 fc33 	bl	23fddc0 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
 23fb55a:	2302      	movs	r3, #2
 23fb55c:	2103      	movs	r1, #3
            uint16_t uuid16 = tempUUID.shorted();
 23fb55e:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
 23fb562:	9400      	str	r4, [sp, #0]
 23fb564:	f10d 020a 	add.w	r2, sp, #10
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
 23fb568:	a803      	add	r0, sp, #12
 23fb56a:	f002 ffe9 	bl	23fe540 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
 23fb56e:	f002 fdff 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb572:	a903      	add	r1, sp, #12
 23fb574:	2200      	movs	r2, #0
 23fb576:	f002 fe96 	bl	23fe2a6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    rxCharacteristic.onDataReceived(onDataReceived, NULL);
 23fb57a:	2200      	movs	r2, #0
 23fb57c:	490b      	ldr	r1, [pc, #44]	; (23fb5ac <setup+0xbc>)
 23fb57e:	4809      	ldr	r0, [pc, #36]	; (23fb5a4 <setup+0xb4>)
 23fb580:	f003 f9f6 	bl	23fe970 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fb584:	9803      	ldr	r0, [sp, #12]
 23fb586:	f000 fcfb 	bl	23fbf80 <free>

}
 23fb58a:	b010      	add	sp, #64	; 0x40
 23fb58c:	bd70      	pop	{r4, r5, r6, pc}
 23fb58e:	f002 fc19 	bl	23fddc4 <_ZNK8particle7BleUuid8rawBytesEv>
 23fb592:	2300      	movs	r3, #0
 23fb594:	4602      	mov	r2, r0
 23fb596:	9300      	str	r3, [sp, #0]
 23fb598:	2107      	movs	r1, #7
 23fb59a:	2310      	movs	r3, #16
 23fb59c:	e7e4      	b.n	23fb568 <setup+0x78>
 23fb59e:	bf00      	nop
 23fb5a0:	1007ae5c 	.word	0x1007ae5c
 23fb5a4:	1007ae54 	.word	0x1007ae54
 23fb5a8:	1007ae14 	.word	0x1007ae14
 23fb5ac:	023fb4d1 	.word	0x023fb4d1

023fb5b0 <loop>:

void loop() {
 23fb5b0:	b530      	push	{r4, r5, lr}
 23fb5b2:	b087      	sub	sp, #28
    if (BLE.connected()) {
 23fb5b4:	f002 fddc 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb5b8:	f002 fe34 	bl	23fe224 <_ZNK8particle14BleLocalDevice9connectedEv>
 23fb5bc:	b330      	cbz	r0, 23fb60c <loop+0x5c>
    	uint8_t txBuf[UART_TX_BUF_SIZE];
    	size_t txLen = 0;
        counting++;
        memcpy(&txBuf,&counting,2);
        txLen+=2;
 23fb5be:	2402      	movs	r4, #2
        counting++;
 23fb5c0:	4a13      	ldr	r2, [pc, #76]	; (23fb610 <loop+0x60>)
 23fb5c2:	f10d 0506 	add.w	r5, sp, #6
 23fb5c6:	8813      	ldrh	r3, [r2, #0]
 23fb5c8:	3301      	adds	r3, #1
 23fb5ca:	b29b      	uxth	r3, r3
 23fb5cc:	8013      	strh	r3, [r2, #0]
        memcpy(&txBuf,&counting,2);
 23fb5ce:	f8ad 3004 	strh.w	r3, [sp, #4]
    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
 23fb5d2:	f001 f87d 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb5d6:	6803      	ldr	r3, [r0, #0]
 23fb5d8:	691b      	ldr	r3, [r3, #16]
 23fb5da:	4798      	blx	r3
 23fb5dc:	b180      	cbz	r0, 23fb600 <loop+0x50>
 23fb5de:	2c14      	cmp	r4, #20
 23fb5e0:	d00e      	beq.n	23fb600 <loop+0x50>
            txBuf[txLen++] = Serial.read();
 23fb5e2:	f001 f875 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb5e6:	6803      	ldr	r3, [r0, #0]
 23fb5e8:	3401      	adds	r4, #1
 23fb5ea:	695b      	ldr	r3, [r3, #20]
 23fb5ec:	4798      	blx	r3
 23fb5ee:	7028      	strb	r0, [r5, #0]
            Serial.write(txBuf[txLen - 1]);
 23fb5f0:	f001 f86e 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb5f4:	6803      	ldr	r3, [r0, #0]
 23fb5f6:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fb5fa:	689b      	ldr	r3, [r3, #8]
 23fb5fc:	4798      	blx	r3
    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
 23fb5fe:	e7e8      	b.n	23fb5d2 <loop+0x22>
        }
        if (txLen > 0) {
            // memcpy(&count,)
            txCharacteristic.setValue(txBuf, txLen);
 23fb600:	2300      	movs	r3, #0
 23fb602:	4622      	mov	r2, r4
 23fb604:	4803      	ldr	r0, [pc, #12]	; (23fb614 <loop+0x64>)
 23fb606:	a901      	add	r1, sp, #4
 23fb608:	f002 fc98 	bl	23fdf3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        }
        // Log.info("Connection");

    }
}
 23fb60c:	b007      	add	sp, #28
 23fb60e:	bd30      	pop	{r4, r5, pc}
 23fb610:	1007ae50 	.word	0x1007ae50
 23fb614:	1007ae5c 	.word	0x1007ae5c

023fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb618:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb61a:	2614      	movs	r6, #20
 23fb61c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb620:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb622:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb626:	42ae      	cmp	r6, r5
 23fb628:	d004      	beq.n	23fb634 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb62a:	4628      	mov	r0, r5
 23fb62c:	f003 fcd6 	bl	23fefdc <_ZN6StringD1Ev>
 23fb630:	3514      	adds	r5, #20
 23fb632:	e7f8      	b.n	23fb626 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb634:	6820      	ldr	r0, [r4, #0]
 23fb636:	f000 fca3 	bl	23fbf80 <free>
    AllocatorT::free(data_);
}
 23fb63a:	4620      	mov	r0, r4
 23fb63c:	bd70      	pop	{r4, r5, r6, pc}

023fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb63e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb642:	4604      	mov	r4, r0
 23fb644:	460d      	mov	r5, r1
 23fb646:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb648:	d916      	bls.n	23fb678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb64a:	4290      	cmp	r0, r2
 23fb64c:	d215      	bcs.n	23fb67a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb64e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb652:	1a75      	subs	r5, r6, r1
 23fb654:	f1a1 0714 	sub.w	r7, r1, #20
 23fb658:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb65a:	42b7      	cmp	r7, r6
 23fb65c:	d01c      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb65e:	b12c      	cbz	r4, 23fb66c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb660:	4631      	mov	r1, r6
 23fb662:	4620      	mov	r0, r4
 23fb664:	f003 fd36 	bl	23ff0d4 <_ZN6StringC1EOS_>
 23fb668:	7c33      	ldrb	r3, [r6, #16]
 23fb66a:	7423      	strb	r3, [r4, #16]
 23fb66c:	4630      	mov	r0, r6
 23fb66e:	f003 fcb5 	bl	23fefdc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb672:	3e14      	subs	r6, #20
 23fb674:	3c14      	subs	r4, #20
 23fb676:	e7f0      	b.n	23fb65a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb678:	d00e      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb67a:	42b5      	cmp	r5, r6
 23fb67c:	d00c      	beq.n	23fb698 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb67e:	b12c      	cbz	r4, 23fb68c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb680:	4629      	mov	r1, r5
 23fb682:	4620      	mov	r0, r4
 23fb684:	f003 fd26 	bl	23ff0d4 <_ZN6StringC1EOS_>
 23fb688:	7c2b      	ldrb	r3, [r5, #16]
 23fb68a:	7423      	strb	r3, [r4, #16]
 23fb68c:	4628      	mov	r0, r5
 23fb68e:	f003 fca5 	bl	23fefdc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb692:	3514      	adds	r5, #20
 23fb694:	3414      	adds	r4, #20
 23fb696:	e7f0      	b.n	23fb67a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb69a:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb6a0:	e9c0 3300 	strd	r3, r3, [r0]
 23fb6a4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6a6:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb6a8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6aa:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb6ac:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb6ae:	dd24      	ble.n	23fb6fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb6b0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb6b4:	fb08 f007 	mul.w	r0, r8, r7
 23fb6b8:	f000 fc54 	bl	23fbf64 <malloc>
            if (!d) {
 23fb6bc:	4605      	mov	r5, r0
 23fb6be:	b1e0      	cbz	r0, 23fb6fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb6c0:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb6c4:	fb08 1202 	mla	r2, r8, r2, r1
 23fb6c8:	f7ff ffb9 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb6cc:	6820      	ldr	r0, [r4, #0]
 23fb6ce:	f000 fc57 	bl	23fbf80 <free>
        data_ = d;
 23fb6d2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb6d4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb6d6:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb6da:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb6de:	45b8      	cmp	r8, r7
 23fb6e0:	d009      	beq.n	23fb6f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb6e2:	4639      	mov	r1, r7
 23fb6e4:	4628      	mov	r0, r5
 23fb6e6:	f003 fd0f 	bl	23ff108 <_ZN6StringC1ERKS_>
 23fb6ea:	7c3b      	ldrb	r3, [r7, #16]
 23fb6ec:	3514      	adds	r5, #20
 23fb6ee:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb6f2:	3714      	adds	r7, #20
 23fb6f4:	e7f3      	b.n	23fb6de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb6f6:	6873      	ldr	r3, [r6, #4]
 23fb6f8:	6063      	str	r3, [r4, #4]
}
 23fb6fa:	4620      	mov	r0, r4
 23fb6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb700 <_GLOBAL__sub_I_LogHandler>:
 23fb700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fb704:	2500      	movs	r5, #0
 23fb706:	b098      	sub	sp, #96	; 0x60
 23fb708:	e9cd 5504 	strd	r5, r5, [sp, #16]
 23fb70c:	9506      	str	r5, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
 23fb70e:	f000 ffdf 	bl	23fc6d0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fb712:	4c53      	ldr	r4, [pc, #332]	; (23fb860 <_GLOBAL__sub_I_LogHandler+0x160>)
 23fb714:	4606      	mov	r6, r0
 23fb716:	4627      	mov	r7, r4
 23fb718:	a904      	add	r1, sp, #16
 23fb71a:	a809      	add	r0, sp, #36	; 0x24
 23fb71c:	f7ff ffbd 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fb720:	a909      	add	r1, sp, #36	; 0x24
 23fb722:	a80e      	add	r0, sp, #56	; 0x38
 23fb724:	f7ff ffb9 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb728:	4b4e      	ldr	r3, [pc, #312]	; (23fb864 <_GLOBAL__sub_I_LogHandler+0x164>)
 23fb72a:	a90e      	add	r1, sp, #56	; 0x38
 23fb72c:	f847 3b04 	str.w	r3, [r7], #4
 23fb730:	a813      	add	r0, sp, #76	; 0x4c
 23fb732:	f7ff ffb2 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb736:	aa13      	add	r2, sp, #76	; 0x4c
 23fb738:	211e      	movs	r1, #30
 23fb73a:	4638      	mov	r0, r7
 23fb73c:	f001 fdee 	bl	23fd31c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb740:	a813      	add	r0, sp, #76	; 0x4c
 23fb742:	f7ff ff69 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb746:	a80e      	add	r0, sp, #56	; 0x38
 23fb748:	f7ff ff66 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb74c:	4b46      	ldr	r3, [pc, #280]	; (23fb868 <_GLOBAL__sub_I_LogHandler+0x168>)
 23fb74e:	6226      	str	r6, [r4, #32]
 23fb750:	6023      	str	r3, [r4, #0]
 23fb752:	a809      	add	r0, sp, #36	; 0x24
 23fb754:	f7ff ff60 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb758:	4b44      	ldr	r3, [pc, #272]	; (23fb86c <_GLOBAL__sub_I_LogHandler+0x16c>)
const BleUuid rxUuid("75c14d44-1b11-4514-b221-df15fc88050f");
 23fb75a:	4e45      	ldr	r6, [pc, #276]	; (23fb870 <_GLOBAL__sub_I_LogHandler+0x170>)
 23fb75c:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb75e:	f000 ffb7 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fb762:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb766:	f000 ffa3 	bl	23fc6b0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb76a:	f001 faa9 	bl	23fccc0 <_ZN5spark10LogManager8instanceEv>
 23fb76e:	4621      	mov	r1, r4
const BleUuid serviceUuid("7828f55d-c04c-49e8-86e9-8f1362755dc7");
 23fb770:	4c40      	ldr	r4, [pc, #256]	; (23fb874 <_GLOBAL__sub_I_LogHandler+0x174>)
 23fb772:	f001 fcab 	bl	23fd0cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
 23fb776:	a804      	add	r0, sp, #16
 23fb778:	f7ff ff4e 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
 23fb77c:	4f3e      	ldr	r7, [pc, #248]	; (23fb878 <_GLOBAL__sub_I_LogHandler+0x178>)
const BleUuid serviceUuid("7828f55d-c04c-49e8-86e9-8f1362755dc7");
 23fb77e:	4620      	mov	r0, r4
 23fb780:	493e      	ldr	r1, [pc, #248]	; (23fb87c <_GLOBAL__sub_I_LogHandler+0x17c>)
 23fb782:	f002 fb9f 	bl	23fdec4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("75c14d44-1b11-4514-b221-df15fc88050f");
 23fb786:	4630      	mov	r0, r6
 23fb788:	493d      	ldr	r1, [pc, #244]	; (23fb880 <_GLOBAL__sub_I_LogHandler+0x180>)
 23fb78a:	f002 fb9b 	bl	23fdec4 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
 23fb78e:	4638      	mov	r0, r7
 23fb790:	493c      	ldr	r1, [pc, #240]	; (23fb884 <_GLOBAL__sub_I_LogHandler+0x184>)
 23fb792:	f002 fb97 	bl	23fdec4 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
 23fb796:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23fb798:	f8d7 e000 	ldr.w	lr, [r7]
 23fb79c:	4627      	mov	r7, r4
 23fb79e:	f10d 0c10 	add.w	ip, sp, #16
 23fb7a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fb7a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 23fb7a8:	f8cc e000 	str.w	lr, [ip]
 23fb7ac:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 23fb7b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fb7b4:	f8d7 9000 	ldr.w	r9, [r7]
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
 23fb7b8:	f10d 0a10 	add.w	sl, sp, #16
 23fb7bc:	f8cc 9000 	str.w	r9, [ip]
 23fb7c0:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 23fb7c4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 23fb7c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 23fb7cc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 23fb898 <_GLOBAL__sub_I_LogHandler+0x198>
 23fb7d0:	f8cc e000 	str.w	lr, [ip]
        BleUuid sUuid(svcUuid);
 23fb7d4:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 23fb7d8:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
 23fb7dc:	e9c8 5500 	strd	r5, r5, [r8]
 23fb7e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fb7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
 23fb7e8:	ab13      	add	r3, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
 23fb7ea:	f8cc 9000 	str.w	r9, [ip]
        construct(desc, properties, cUuid, sUuid, callback, context);
 23fb7ee:	4640      	mov	r0, r8
 23fb7f0:	9300      	str	r3, [sp, #0]
 23fb7f2:	f04f 0210 	mov.w	r2, #16
 23fb7f6:	ab0e      	add	r3, sp, #56	; 0x38
 23fb7f8:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23fb7fc:	4922      	ldr	r1, [pc, #136]	; (23fb888 <_GLOBAL__sub_I_LogHandler+0x188>)
 23fb7fe:	f003 f903 	bl	23fea08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
 23fb802:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fb804:	f10d 0c10 	add.w	ip, sp, #16
 23fb808:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fb80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fb80e:	f8d6 e000 	ldr.w	lr, [r6]
 23fb812:	ae09      	add	r6, sp, #36	; 0x24
 23fb814:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23fb816:	f8cc e000 	str.w	lr, [ip]
 23fb81a:	f8d7 c000 	ldr.w	ip, [r7]
        BleUuid cUuid(charUuid);
 23fb81e:	ac04      	add	r4, sp, #16
 23fb820:	f8c6 c000 	str.w	ip, [r6]
 23fb824:	ae0e      	add	r6, sp, #56	; 0x38
 23fb826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fb828:	c60f      	stmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
 23fb82a:	4f18      	ldr	r7, [pc, #96]	; (23fb88c <_GLOBAL__sub_I_LogHandler+0x18c>)
 23fb82c:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
 23fb830:	ac09      	add	r4, sp, #36	; 0x24
 23fb832:	ae13      	add	r6, sp, #76	; 0x4c
      constexpr __shared_count() noexcept : _M_pi(0)
 23fb834:	e9c7 5500 	strd	r5, r5, [r7]
 23fb838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fb83a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
 23fb83c:	4b14      	ldr	r3, [pc, #80]	; (23fb890 <_GLOBAL__sub_I_LogHandler+0x190>)
        BleUuid sUuid(svcUuid);
 23fb83e:	f8c6 c000 	str.w	ip, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
 23fb842:	9301      	str	r3, [sp, #4]
 23fb844:	ab13      	add	r3, sp, #76	; 0x4c
 23fb846:	9300      	str	r3, [sp, #0]
 23fb848:	f04f 0204 	mov.w	r2, #4
 23fb84c:	4638      	mov	r0, r7
 23fb84e:	4911      	ldr	r1, [pc, #68]	; (23fb894 <_GLOBAL__sub_I_LogHandler+0x194>)
 23fb850:	9502      	str	r5, [sp, #8]
 23fb852:	ab0e      	add	r3, sp, #56	; 0x38
 23fb854:	f003 f8d8 	bl	23fea08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
}
 23fb858:	b018      	add	sp, #96	; 0x60
 23fb85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fb85e:	bf00      	nop
 23fb860:	1007adf0 	.word	0x1007adf0
 23fb864:	023ff93c 	.word	0x023ff93c
 23fb868:	023ffae4 	.word	0x023ffae4
 23fb86c:	023ff954 	.word	0x023ff954
 23fb870:	1007ae28 	.word	0x1007ae28
 23fb874:	1007ae14 	.word	0x1007ae14
 23fb878:	1007ae3c 	.word	0x1007ae3c
 23fb87c:	023ff8bc 	.word	0x023ff8bc
 23fb880:	023ff8e1 	.word	0x023ff8e1
 23fb884:	023ff906 	.word	0x023ff906
 23fb888:	023ff92b 	.word	0x023ff92b
 23fb88c:	1007ae54 	.word	0x1007ae54
 23fb890:	023fb4d1 	.word	0x023fb4d1
 23fb894:	023ff92e 	.word	0x023ff92e
 23fb898:	1007ae5c 	.word	0x1007ae5c

023fb89c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb89c:	b509      	push	{r0, r3, lr}
 23fb89e:	4804      	ldr	r0, [pc, #16]	; (23fb8b0 <HAL_USB_USART_Init+0x14>)
 23fb8a0:	6800      	ldr	r0, [r0, #0]
 23fb8a2:	4b04      	ldr	r3, [pc, #16]	; (23fb8b4 <HAL_USB_USART_Init+0x18>)
 23fb8a4:	4403      	add	r3, r0
 23fb8a6:	681b      	ldr	r3, [r3, #0]
 23fb8a8:	681b      	ldr	r3, [r3, #0]
 23fb8aa:	9302      	str	r3, [sp, #8]
 23fb8ac:	bd09      	pop	{r0, r3, pc}
 23fb8ae:	0000      	.short	0x0000
 23fb8b0:	1007ad78 	.word	0x1007ad78
 23fb8b4:	00000034 	.word	0x00000034

023fb8b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb8b8:	b509      	push	{r0, r3, lr}
 23fb8ba:	4804      	ldr	r0, [pc, #16]	; (23fb8cc <HAL_USB_USART_Begin+0x14>)
 23fb8bc:	6800      	ldr	r0, [r0, #0]
 23fb8be:	4b04      	ldr	r3, [pc, #16]	; (23fb8d0 <HAL_USB_USART_Begin+0x18>)
 23fb8c0:	4403      	add	r3, r0
 23fb8c2:	681b      	ldr	r3, [r3, #0]
 23fb8c4:	685b      	ldr	r3, [r3, #4]
 23fb8c6:	9302      	str	r3, [sp, #8]
 23fb8c8:	bd09      	pop	{r0, r3, pc}
 23fb8ca:	0000      	.short	0x0000
 23fb8cc:	1007ad78 	.word	0x1007ad78
 23fb8d0:	00000034 	.word	0x00000034

023fb8d4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fb8d4:	b509      	push	{r0, r3, lr}
 23fb8d6:	4804      	ldr	r0, [pc, #16]	; (23fb8e8 <HAL_USB_USART_End+0x14>)
 23fb8d8:	6800      	ldr	r0, [r0, #0]
 23fb8da:	4b04      	ldr	r3, [pc, #16]	; (23fb8ec <HAL_USB_USART_End+0x18>)
 23fb8dc:	4403      	add	r3, r0
 23fb8de:	681b      	ldr	r3, [r3, #0]
 23fb8e0:	689b      	ldr	r3, [r3, #8]
 23fb8e2:	9302      	str	r3, [sp, #8]
 23fb8e4:	bd09      	pop	{r0, r3, pc}
 23fb8e6:	0000      	.short	0x0000
 23fb8e8:	1007ad78 	.word	0x1007ad78
 23fb8ec:	00000034 	.word	0x00000034

023fb8f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb8f0:	b509      	push	{r0, r3, lr}
 23fb8f2:	4804      	ldr	r0, [pc, #16]	; (23fb904 <HAL_USB_USART_Available_Data+0x14>)
 23fb8f4:	6800      	ldr	r0, [r0, #0]
 23fb8f6:	4b04      	ldr	r3, [pc, #16]	; (23fb908 <HAL_USB_USART_Available_Data+0x18>)
 23fb8f8:	4403      	add	r3, r0
 23fb8fa:	681b      	ldr	r3, [r3, #0]
 23fb8fc:	691b      	ldr	r3, [r3, #16]
 23fb8fe:	9302      	str	r3, [sp, #8]
 23fb900:	bd09      	pop	{r0, r3, pc}
 23fb902:	0000      	.short	0x0000
 23fb904:	1007ad78 	.word	0x1007ad78
 23fb908:	00000034 	.word	0x00000034

023fb90c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb90c:	b509      	push	{r0, r3, lr}
 23fb90e:	4804      	ldr	r0, [pc, #16]	; (23fb920 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb910:	6800      	ldr	r0, [r0, #0]
 23fb912:	4b04      	ldr	r3, [pc, #16]	; (23fb924 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb914:	4403      	add	r3, r0
 23fb916:	681b      	ldr	r3, [r3, #0]
 23fb918:	695b      	ldr	r3, [r3, #20]
 23fb91a:	9302      	str	r3, [sp, #8]
 23fb91c:	bd09      	pop	{r0, r3, pc}
 23fb91e:	0000      	.short	0x0000
 23fb920:	1007ad78 	.word	0x1007ad78
 23fb924:	00000034 	.word	0x00000034

023fb928 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb928:	b509      	push	{r0, r3, lr}
 23fb92a:	4804      	ldr	r0, [pc, #16]	; (23fb93c <HAL_USB_USART_Receive_Data+0x14>)
 23fb92c:	6800      	ldr	r0, [r0, #0]
 23fb92e:	4b04      	ldr	r3, [pc, #16]	; (23fb940 <HAL_USB_USART_Receive_Data+0x18>)
 23fb930:	4403      	add	r3, r0
 23fb932:	681b      	ldr	r3, [r3, #0]
 23fb934:	699b      	ldr	r3, [r3, #24]
 23fb936:	9302      	str	r3, [sp, #8]
 23fb938:	bd09      	pop	{r0, r3, pc}
 23fb93a:	0000      	.short	0x0000
 23fb93c:	1007ad78 	.word	0x1007ad78
 23fb940:	00000034 	.word	0x00000034

023fb944 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb944:	b509      	push	{r0, r3, lr}
 23fb946:	4804      	ldr	r0, [pc, #16]	; (23fb958 <HAL_USB_USART_Send_Data+0x14>)
 23fb948:	6800      	ldr	r0, [r0, #0]
 23fb94a:	4b04      	ldr	r3, [pc, #16]	; (23fb95c <HAL_USB_USART_Send_Data+0x18>)
 23fb94c:	4403      	add	r3, r0
 23fb94e:	681b      	ldr	r3, [r3, #0]
 23fb950:	69db      	ldr	r3, [r3, #28]
 23fb952:	9302      	str	r3, [sp, #8]
 23fb954:	bd09      	pop	{r0, r3, pc}
 23fb956:	0000      	.short	0x0000
 23fb958:	1007ad78 	.word	0x1007ad78
 23fb95c:	00000034 	.word	0x00000034

023fb960 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb960:	b509      	push	{r0, r3, lr}
 23fb962:	4804      	ldr	r0, [pc, #16]	; (23fb974 <HAL_USB_USART_Flush_Data+0x14>)
 23fb964:	6800      	ldr	r0, [r0, #0]
 23fb966:	4b04      	ldr	r3, [pc, #16]	; (23fb978 <HAL_USB_USART_Flush_Data+0x18>)
 23fb968:	4403      	add	r3, r0
 23fb96a:	681b      	ldr	r3, [r3, #0]
 23fb96c:	6a1b      	ldr	r3, [r3, #32]
 23fb96e:	9302      	str	r3, [sp, #8]
 23fb970:	bd09      	pop	{r0, r3, pc}
 23fb972:	0000      	.short	0x0000
 23fb974:	1007ad78 	.word	0x1007ad78
 23fb978:	00000034 	.word	0x00000034

023fb97c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fb97c:	b509      	push	{r0, r3, lr}
 23fb97e:	4804      	ldr	r0, [pc, #16]	; (23fb990 <hal_usart_end+0x14>)
 23fb980:	6800      	ldr	r0, [r0, #0]
 23fb982:	4b04      	ldr	r3, [pc, #16]	; (23fb994 <hal_usart_end+0x18>)
 23fb984:	4403      	add	r3, r0
 23fb986:	681b      	ldr	r3, [r3, #0]
 23fb988:	689b      	ldr	r3, [r3, #8]
 23fb98a:	9302      	str	r3, [sp, #8]
 23fb98c:	bd09      	pop	{r0, r3, pc}
 23fb98e:	0000      	.short	0x0000
 23fb990:	1007ad78 	.word	0x1007ad78
 23fb994:	00000024 	.word	0x00000024

023fb998 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fb998:	b509      	push	{r0, r3, lr}
 23fb99a:	4804      	ldr	r0, [pc, #16]	; (23fb9ac <hal_usart_write+0x14>)
 23fb99c:	6800      	ldr	r0, [r0, #0]
 23fb99e:	4b04      	ldr	r3, [pc, #16]	; (23fb9b0 <hal_usart_write+0x18>)
 23fb9a0:	4403      	add	r3, r0
 23fb9a2:	681b      	ldr	r3, [r3, #0]
 23fb9a4:	68db      	ldr	r3, [r3, #12]
 23fb9a6:	9302      	str	r3, [sp, #8]
 23fb9a8:	bd09      	pop	{r0, r3, pc}
 23fb9aa:	0000      	.short	0x0000
 23fb9ac:	1007ad78 	.word	0x1007ad78
 23fb9b0:	00000024 	.word	0x00000024

023fb9b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fb9b4:	b509      	push	{r0, r3, lr}
 23fb9b6:	4804      	ldr	r0, [pc, #16]	; (23fb9c8 <hal_usart_available+0x14>)
 23fb9b8:	6800      	ldr	r0, [r0, #0]
 23fb9ba:	4b04      	ldr	r3, [pc, #16]	; (23fb9cc <hal_usart_available+0x18>)
 23fb9bc:	4403      	add	r3, r0
 23fb9be:	681b      	ldr	r3, [r3, #0]
 23fb9c0:	691b      	ldr	r3, [r3, #16]
 23fb9c2:	9302      	str	r3, [sp, #8]
 23fb9c4:	bd09      	pop	{r0, r3, pc}
 23fb9c6:	0000      	.short	0x0000
 23fb9c8:	1007ad78 	.word	0x1007ad78
 23fb9cc:	00000024 	.word	0x00000024

023fb9d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fb9d0:	b509      	push	{r0, r3, lr}
 23fb9d2:	4804      	ldr	r0, [pc, #16]	; (23fb9e4 <hal_usart_read+0x14>)
 23fb9d4:	6800      	ldr	r0, [r0, #0]
 23fb9d6:	4b04      	ldr	r3, [pc, #16]	; (23fb9e8 <hal_usart_read+0x18>)
 23fb9d8:	4403      	add	r3, r0
 23fb9da:	681b      	ldr	r3, [r3, #0]
 23fb9dc:	695b      	ldr	r3, [r3, #20]
 23fb9de:	9302      	str	r3, [sp, #8]
 23fb9e0:	bd09      	pop	{r0, r3, pc}
 23fb9e2:	0000      	.short	0x0000
 23fb9e4:	1007ad78 	.word	0x1007ad78
 23fb9e8:	00000024 	.word	0x00000024

023fb9ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fb9ec:	b509      	push	{r0, r3, lr}
 23fb9ee:	4804      	ldr	r0, [pc, #16]	; (23fba00 <hal_usart_peek+0x14>)
 23fb9f0:	6800      	ldr	r0, [r0, #0]
 23fb9f2:	4b04      	ldr	r3, [pc, #16]	; (23fba04 <hal_usart_peek+0x18>)
 23fb9f4:	4403      	add	r3, r0
 23fb9f6:	681b      	ldr	r3, [r3, #0]
 23fb9f8:	699b      	ldr	r3, [r3, #24]
 23fb9fa:	9302      	str	r3, [sp, #8]
 23fb9fc:	bd09      	pop	{r0, r3, pc}
 23fb9fe:	0000      	.short	0x0000
 23fba00:	1007ad78 	.word	0x1007ad78
 23fba04:	00000024 	.word	0x00000024

023fba08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fba08:	b509      	push	{r0, r3, lr}
 23fba0a:	4804      	ldr	r0, [pc, #16]	; (23fba1c <hal_usart_flush+0x14>)
 23fba0c:	6800      	ldr	r0, [r0, #0]
 23fba0e:	4b04      	ldr	r3, [pc, #16]	; (23fba20 <hal_usart_flush+0x18>)
 23fba10:	4403      	add	r3, r0
 23fba12:	681b      	ldr	r3, [r3, #0]
 23fba14:	69db      	ldr	r3, [r3, #28]
 23fba16:	9302      	str	r3, [sp, #8]
 23fba18:	bd09      	pop	{r0, r3, pc}
 23fba1a:	0000      	.short	0x0000
 23fba1c:	1007ad78 	.word	0x1007ad78
 23fba20:	00000024 	.word	0x00000024

023fba24 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fba24:	b509      	push	{r0, r3, lr}
 23fba26:	4804      	ldr	r0, [pc, #16]	; (23fba38 <hal_usart_is_enabled+0x14>)
 23fba28:	6800      	ldr	r0, [r0, #0]
 23fba2a:	4b04      	ldr	r3, [pc, #16]	; (23fba3c <hal_usart_is_enabled+0x18>)
 23fba2c:	4403      	add	r3, r0
 23fba2e:	681b      	ldr	r3, [r3, #0]
 23fba30:	6a1b      	ldr	r3, [r3, #32]
 23fba32:	9302      	str	r3, [sp, #8]
 23fba34:	bd09      	pop	{r0, r3, pc}
 23fba36:	0000      	.short	0x0000
 23fba38:	1007ad78 	.word	0x1007ad78
 23fba3c:	00000024 	.word	0x00000024

023fba40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fba40:	b509      	push	{r0, r3, lr}
 23fba42:	4804      	ldr	r0, [pc, #16]	; (23fba54 <hal_usart_available_data_for_write+0x14>)
 23fba44:	6800      	ldr	r0, [r0, #0]
 23fba46:	4b04      	ldr	r3, [pc, #16]	; (23fba58 <hal_usart_available_data_for_write+0x18>)
 23fba48:	4403      	add	r3, r0
 23fba4a:	681b      	ldr	r3, [r3, #0]
 23fba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fba4e:	9302      	str	r3, [sp, #8]
 23fba50:	bd09      	pop	{r0, r3, pc}
 23fba52:	0000      	.short	0x0000
 23fba54:	1007ad78 	.word	0x1007ad78
 23fba58:	00000024 	.word	0x00000024

023fba5c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fba5c:	b509      	push	{r0, r3, lr}
 23fba5e:	4804      	ldr	r0, [pc, #16]	; (23fba70 <hal_usart_begin_config+0x14>)
 23fba60:	6800      	ldr	r0, [r0, #0]
 23fba62:	4b04      	ldr	r3, [pc, #16]	; (23fba74 <hal_usart_begin_config+0x18>)
 23fba64:	4403      	add	r3, r0
 23fba66:	681b      	ldr	r3, [r3, #0]
 23fba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fba6a:	9302      	str	r3, [sp, #8]
 23fba6c:	bd09      	pop	{r0, r3, pc}
 23fba6e:	0000      	.short	0x0000
 23fba70:	1007ad78 	.word	0x1007ad78
 23fba74:	00000024 	.word	0x00000024

023fba78 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fba78:	b509      	push	{r0, r3, lr}
 23fba7a:	4804      	ldr	r0, [pc, #16]	; (23fba8c <hal_usart_init_ex+0x14>)
 23fba7c:	6800      	ldr	r0, [r0, #0]
 23fba7e:	4b04      	ldr	r3, [pc, #16]	; (23fba90 <hal_usart_init_ex+0x18>)
 23fba80:	4403      	add	r3, r0
 23fba82:	681b      	ldr	r3, [r3, #0]
 23fba84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fba86:	9302      	str	r3, [sp, #8]
 23fba88:	bd09      	pop	{r0, r3, pc}
 23fba8a:	0000      	.short	0x0000
 23fba8c:	1007ad78 	.word	0x1007ad78
 23fba90:	00000024 	.word	0x00000024

023fba94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fba94:	b509      	push	{r0, r3, lr}
 23fba96:	4804      	ldr	r0, [pc, #16]	; (23fbaa8 <inet_inet_ntop+0x14>)
 23fba98:	6800      	ldr	r0, [r0, #0]
 23fba9a:	4b04      	ldr	r3, [pc, #16]	; (23fbaac <inet_inet_ntop+0x18>)
 23fba9c:	4403      	add	r3, r0
 23fba9e:	681b      	ldr	r3, [r3, #0]
 23fbaa0:	695b      	ldr	r3, [r3, #20]
 23fbaa2:	9302      	str	r3, [sp, #8]
 23fbaa4:	bd09      	pop	{r0, r3, pc}
 23fbaa6:	0000      	.short	0x0000
 23fbaa8:	1007ad78 	.word	0x1007ad78
 23fbaac:	0000004c 	.word	0x0000004c

023fbab0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fbab0:	b509      	push	{r0, r3, lr}
 23fbab2:	4804      	ldr	r0, [pc, #16]	; (23fbac4 <os_mutex_recursive_create+0x14>)
 23fbab4:	6800      	ldr	r0, [r0, #0]
 23fbab6:	4b04      	ldr	r3, [pc, #16]	; (23fbac8 <os_mutex_recursive_create+0x18>)
 23fbab8:	4403      	add	r3, r0
 23fbaba:	681b      	ldr	r3, [r3, #0]
 23fbabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbabe:	9302      	str	r3, [sp, #8]
 23fbac0:	bd09      	pop	{r0, r3, pc}
 23fbac2:	0000      	.short	0x0000
 23fbac4:	1007ad78 	.word	0x1007ad78
 23fbac8:	00000030 	.word	0x00000030

023fbacc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fbacc:	b509      	push	{r0, r3, lr}
 23fbace:	4804      	ldr	r0, [pc, #16]	; (23fbae0 <os_mutex_recursive_destroy+0x14>)
 23fbad0:	6800      	ldr	r0, [r0, #0]
 23fbad2:	4b04      	ldr	r3, [pc, #16]	; (23fbae4 <os_mutex_recursive_destroy+0x18>)
 23fbad4:	4403      	add	r3, r0
 23fbad6:	681b      	ldr	r3, [r3, #0]
 23fbad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fbada:	9302      	str	r3, [sp, #8]
 23fbadc:	bd09      	pop	{r0, r3, pc}
 23fbade:	0000      	.short	0x0000
 23fbae0:	1007ad78 	.word	0x1007ad78
 23fbae4:	00000030 	.word	0x00000030

023fbae8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fbae8:	b509      	push	{r0, r3, lr}
 23fbaea:	4804      	ldr	r0, [pc, #16]	; (23fbafc <os_mutex_recursive_lock+0x14>)
 23fbaec:	6800      	ldr	r0, [r0, #0]
 23fbaee:	4b04      	ldr	r3, [pc, #16]	; (23fbb00 <os_mutex_recursive_lock+0x18>)
 23fbaf0:	4403      	add	r3, r0
 23fbaf2:	681b      	ldr	r3, [r3, #0]
 23fbaf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fbaf6:	9302      	str	r3, [sp, #8]
 23fbaf8:	bd09      	pop	{r0, r3, pc}
 23fbafa:	0000      	.short	0x0000
 23fbafc:	1007ad78 	.word	0x1007ad78
 23fbb00:	00000030 	.word	0x00000030

023fbb04 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fbb04:	b509      	push	{r0, r3, lr}
 23fbb06:	4804      	ldr	r0, [pc, #16]	; (23fbb18 <os_mutex_recursive_unlock+0x14>)
 23fbb08:	6800      	ldr	r0, [r0, #0]
 23fbb0a:	4b04      	ldr	r3, [pc, #16]	; (23fbb1c <os_mutex_recursive_unlock+0x18>)
 23fbb0c:	4403      	add	r3, r0
 23fbb0e:	681b      	ldr	r3, [r3, #0]
 23fbb10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbb12:	9302      	str	r3, [sp, #8]
 23fbb14:	bd09      	pop	{r0, r3, pc}
 23fbb16:	0000      	.short	0x0000
 23fbb18:	1007ad78 	.word	0x1007ad78
 23fbb1c:	00000030 	.word	0x00000030

023fbb20 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23fbb20:	b509      	push	{r0, r3, lr}
 23fbb22:	4804      	ldr	r0, [pc, #16]	; (23fbb34 <hal_ble_stack_init+0x14>)
 23fbb24:	6800      	ldr	r0, [r0, #0]
 23fbb26:	4b04      	ldr	r3, [pc, #16]	; (23fbb38 <hal_ble_stack_init+0x18>)
 23fbb28:	4403      	add	r3, r0
 23fbb2a:	681b      	ldr	r3, [r3, #0]
 23fbb2c:	689b      	ldr	r3, [r3, #8]
 23fbb2e:	9302      	str	r3, [sp, #8]
 23fbb30:	bd09      	pop	{r0, r3, pc}
 23fbb32:	0000      	.short	0x0000
 23fbb34:	1007ad78 	.word	0x1007ad78
 23fbb38:	00000060 	.word	0x00000060

023fbb3c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
 23fbb3c:	b509      	push	{r0, r3, lr}
 23fbb3e:	4804      	ldr	r0, [pc, #16]	; (23fbb50 <hal_ble_gap_set_advertising_data+0x14>)
 23fbb40:	6800      	ldr	r0, [r0, #0]
 23fbb42:	4b04      	ldr	r3, [pc, #16]	; (23fbb54 <hal_ble_gap_set_advertising_data+0x18>)
 23fbb44:	4403      	add	r3, r0
 23fbb46:	681b      	ldr	r3, [r3, #0]
 23fbb48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fbb4a:	9302      	str	r3, [sp, #8]
 23fbb4c:	bd09      	pop	{r0, r3, pc}
 23fbb4e:	0000      	.short	0x0000
 23fbb50:	1007ad78 	.word	0x1007ad78
 23fbb54:	00000060 	.word	0x00000060

023fbb58 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
 23fbb58:	b509      	push	{r0, r3, lr}
 23fbb5a:	4804      	ldr	r0, [pc, #16]	; (23fbb6c <hal_ble_gap_set_scan_response_data+0x14>)
 23fbb5c:	6800      	ldr	r0, [r0, #0]
 23fbb5e:	4b04      	ldr	r3, [pc, #16]	; (23fbb70 <hal_ble_gap_set_scan_response_data+0x18>)
 23fbb60:	4403      	add	r3, r0
 23fbb62:	681b      	ldr	r3, [r3, #0]
 23fbb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fbb66:	9302      	str	r3, [sp, #8]
 23fbb68:	bd09      	pop	{r0, r3, pc}
 23fbb6a:	0000      	.short	0x0000
 23fbb6c:	1007ad78 	.word	0x1007ad78
 23fbb70:	00000060 	.word	0x00000060

023fbb74 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
 23fbb74:	b509      	push	{r0, r3, lr}
 23fbb76:	4804      	ldr	r0, [pc, #16]	; (23fbb88 <hal_ble_gap_start_advertising+0x14>)
 23fbb78:	6800      	ldr	r0, [r0, #0]
 23fbb7a:	4b04      	ldr	r3, [pc, #16]	; (23fbb8c <hal_ble_gap_start_advertising+0x18>)
 23fbb7c:	4403      	add	r3, r0
 23fbb7e:	681b      	ldr	r3, [r3, #0]
 23fbb80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 23fbb82:	9302      	str	r3, [sp, #8]
 23fbb84:	bd09      	pop	{r0, r3, pc}
 23fbb86:	0000      	.short	0x0000
 23fbb88:	1007ad78 	.word	0x1007ad78
 23fbb8c:	00000060 	.word	0x00000060

023fbb90 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23fbb90:	b509      	push	{r0, r3, lr}
 23fbb92:	4804      	ldr	r0, [pc, #16]	; (23fbba4 <hal_ble_gap_disconnect+0x14>)
 23fbb94:	6800      	ldr	r0, [r0, #0]
 23fbb96:	4b04      	ldr	r3, [pc, #16]	; (23fbba8 <hal_ble_gap_disconnect+0x18>)
 23fbb98:	4403      	add	r3, r0
 23fbb9a:	681b      	ldr	r3, [r3, #0]
 23fbb9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fbba0:	9302      	str	r3, [sp, #8]
 23fbba2:	bd09      	pop	{r0, r3, pc}
 23fbba4:	1007ad78 	.word	0x1007ad78
 23fbba8:	00000060 	.word	0x00000060

023fbbac <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
 23fbbac:	b509      	push	{r0, r3, lr}
 23fbbae:	4804      	ldr	r0, [pc, #16]	; (23fbbc0 <hal_ble_gatt_server_add_service+0x14>)
 23fbbb0:	6800      	ldr	r0, [r0, #0]
 23fbbb2:	4b04      	ldr	r3, [pc, #16]	; (23fbbc4 <hal_ble_gatt_server_add_service+0x18>)
 23fbbb4:	4403      	add	r3, r0
 23fbbb6:	681b      	ldr	r3, [r3, #0]
 23fbbb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23fbbbc:	9302      	str	r3, [sp, #8]
 23fbbbe:	bd09      	pop	{r0, r3, pc}
 23fbbc0:	1007ad78 	.word	0x1007ad78
 23fbbc4:	00000060 	.word	0x00000060

023fbbc8 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbbc8:	b509      	push	{r0, r3, lr}
 23fbbca:	4804      	ldr	r0, [pc, #16]	; (23fbbdc <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23fbbcc:	6800      	ldr	r0, [r0, #0]
 23fbbce:	4b04      	ldr	r3, [pc, #16]	; (23fbbe0 <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23fbbd0:	4403      	add	r3, r0
 23fbbd2:	681b      	ldr	r3, [r3, #0]
 23fbbd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23fbbd8:	9302      	str	r3, [sp, #8]
 23fbbda:	bd09      	pop	{r0, r3, pc}
 23fbbdc:	1007ad78 	.word	0x1007ad78
 23fbbe0:	00000060 	.word	0x00000060

023fbbe4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbbe4:	b509      	push	{r0, r3, lr}
 23fbbe6:	4804      	ldr	r0, [pc, #16]	; (23fbbf8 <hal_ble_gatt_client_write_with_response+0x14>)
 23fbbe8:	6800      	ldr	r0, [r0, #0]
 23fbbea:	4b04      	ldr	r3, [pc, #16]	; (23fbbfc <hal_ble_gatt_client_write_with_response+0x18>)
 23fbbec:	4403      	add	r3, r0
 23fbbee:	681b      	ldr	r3, [r3, #0]
 23fbbf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23fbbf4:	9302      	str	r3, [sp, #8]
 23fbbf6:	bd09      	pop	{r0, r3, pc}
 23fbbf8:	1007ad78 	.word	0x1007ad78
 23fbbfc:	00000060 	.word	0x00000060

023fbc00 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbc00:	b509      	push	{r0, r3, lr}
 23fbc02:	4804      	ldr	r0, [pc, #16]	; (23fbc14 <hal_ble_gatt_client_write_without_response+0x14>)
 23fbc04:	6800      	ldr	r0, [r0, #0]
 23fbc06:	4b04      	ldr	r3, [pc, #16]	; (23fbc18 <hal_ble_gatt_client_write_without_response+0x18>)
 23fbc08:	4403      	add	r3, r0
 23fbc0a:	681b      	ldr	r3, [r3, #0]
 23fbc0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23fbc10:	9302      	str	r3, [sp, #8]
 23fbc12:	bd09      	pop	{r0, r3, pc}
 23fbc14:	1007ad78 	.word	0x1007ad78
 23fbc18:	00000060 	.word	0x00000060

023fbc1c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
 23fbc1c:	b509      	push	{r0, r3, lr}
 23fbc1e:	4804      	ldr	r0, [pc, #16]	; (23fbc30 <hal_ble_gatt_server_add_characteristic+0x14>)
 23fbc20:	6800      	ldr	r0, [r0, #0]
 23fbc22:	4b04      	ldr	r3, [pc, #16]	; (23fbc34 <hal_ble_gatt_server_add_characteristic+0x18>)
 23fbc24:	4403      	add	r3, r0
 23fbc26:	681b      	ldr	r3, [r3, #0]
 23fbc28:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 23fbc2c:	9302      	str	r3, [sp, #8]
 23fbc2e:	bd09      	pop	{r0, r3, pc}
 23fbc30:	1007ad78 	.word	0x1007ad78
 23fbc34:	00000060 	.word	0x00000060

023fbc38 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23fbc38:	b509      	push	{r0, r3, lr}
 23fbc3a:	4804      	ldr	r0, [pc, #16]	; (23fbc4c <hal_ble_set_callback_on_periph_link_events+0x14>)
 23fbc3c:	6800      	ldr	r0, [r0, #0]
 23fbc3e:	4b04      	ldr	r3, [pc, #16]	; (23fbc50 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23fbc40:	4403      	add	r3, r0
 23fbc42:	681b      	ldr	r3, [r3, #0]
 23fbc44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23fbc48:	9302      	str	r3, [sp, #8]
 23fbc4a:	bd09      	pop	{r0, r3, pc}
 23fbc4c:	1007ad78 	.word	0x1007ad78
 23fbc50:	00000060 	.word	0x00000060

023fbc54 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbc54:	b509      	push	{r0, r3, lr}
 23fbc56:	4804      	ldr	r0, [pc, #16]	; (23fbc68 <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23fbc58:	6800      	ldr	r0, [r0, #0]
 23fbc5a:	4b04      	ldr	r3, [pc, #16]	; (23fbc6c <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23fbc5c:	4403      	add	r3, r0
 23fbc5e:	681b      	ldr	r3, [r3, #0]
 23fbc60:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23fbc64:	9302      	str	r3, [sp, #8]
 23fbc66:	bd09      	pop	{r0, r3, pc}
 23fbc68:	1007ad78 	.word	0x1007ad78
 23fbc6c:	00000060 	.word	0x00000060

023fbc70 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbc70:	b509      	push	{r0, r3, lr}
 23fbc72:	4804      	ldr	r0, [pc, #16]	; (23fbc84 <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23fbc74:	6800      	ldr	r0, [r0, #0]
 23fbc76:	4b04      	ldr	r3, [pc, #16]	; (23fbc88 <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23fbc78:	4403      	add	r3, r0
 23fbc7a:	681b      	ldr	r3, [r3, #0]
 23fbc7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23fbc80:	9302      	str	r3, [sp, #8]
 23fbc82:	bd09      	pop	{r0, r3, pc}
 23fbc84:	1007ad78 	.word	0x1007ad78
 23fbc88:	00000060 	.word	0x00000060

023fbc8c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fbc8c:	b509      	push	{r0, r3, lr}
 23fbc8e:	4804      	ldr	r0, [pc, #16]	; (23fbca0 <HAL_RNG_GetRandomNumber+0x14>)
 23fbc90:	6800      	ldr	r0, [r0, #0]
 23fbc92:	4b04      	ldr	r3, [pc, #16]	; (23fbca4 <HAL_RNG_GetRandomNumber+0x18>)
 23fbc94:	4403      	add	r3, r0
 23fbc96:	681b      	ldr	r3, [r3, #0]
 23fbc98:	685b      	ldr	r3, [r3, #4]
 23fbc9a:	9302      	str	r3, [sp, #8]
 23fbc9c:	bd09      	pop	{r0, r3, pc}
 23fbc9e:	0000      	.short	0x0000
 23fbca0:	1007ad78 	.word	0x1007ad78
 23fbca4:	00000000 	.word	0x00000000

023fbca8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fbca8:	b509      	push	{r0, r3, lr}
 23fbcaa:	4804      	ldr	r0, [pc, #16]	; (23fbcbc <HAL_Delay_Microseconds+0x14>)
 23fbcac:	6800      	ldr	r0, [r0, #0]
 23fbcae:	4b04      	ldr	r3, [pc, #16]	; (23fbcc0 <HAL_Delay_Microseconds+0x18>)
 23fbcb0:	4403      	add	r3, r0
 23fbcb2:	681b      	ldr	r3, [r3, #0]
 23fbcb4:	68db      	ldr	r3, [r3, #12]
 23fbcb6:	9302      	str	r3, [sp, #8]
 23fbcb8:	bd09      	pop	{r0, r3, pc}
 23fbcba:	0000      	.short	0x0000
 23fbcbc:	1007ad78 	.word	0x1007ad78
 23fbcc0:	00000000 	.word	0x00000000

023fbcc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fbcc4:	b509      	push	{r0, r3, lr}
 23fbcc6:	4804      	ldr	r0, [pc, #16]	; (23fbcd8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fbcc8:	6800      	ldr	r0, [r0, #0]
 23fbcca:	4b04      	ldr	r3, [pc, #16]	; (23fbcdc <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fbccc:	4403      	add	r3, r0
 23fbcce:	681b      	ldr	r3, [r3, #0]
 23fbcd0:	695b      	ldr	r3, [r3, #20]
 23fbcd2:	9302      	str	r3, [sp, #8]
 23fbcd4:	bd09      	pop	{r0, r3, pc}
 23fbcd6:	0000      	.short	0x0000
 23fbcd8:	1007ad78 	.word	0x1007ad78
 23fbcdc:	00000000 	.word	0x00000000

023fbce0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fbce0:	b509      	push	{r0, r3, lr}
 23fbce2:	4804      	ldr	r0, [pc, #16]	; (23fbcf4 <netdb_freeaddrinfo+0x14>)
 23fbce4:	6800      	ldr	r0, [r0, #0]
 23fbce6:	4b04      	ldr	r3, [pc, #16]	; (23fbcf8 <netdb_freeaddrinfo+0x18>)
 23fbce8:	4403      	add	r3, r0
 23fbcea:	681b      	ldr	r3, [r3, #0]
 23fbcec:	689b      	ldr	r3, [r3, #8]
 23fbcee:	9302      	str	r3, [sp, #8]
 23fbcf0:	bd09      	pop	{r0, r3, pc}
 23fbcf2:	0000      	.short	0x0000
 23fbcf4:	1007ad78 	.word	0x1007ad78
 23fbcf8:	00000050 	.word	0x00000050

023fbcfc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fbcfc:	b509      	push	{r0, r3, lr}
 23fbcfe:	4804      	ldr	r0, [pc, #16]	; (23fbd10 <netdb_getaddrinfo+0x14>)
 23fbd00:	6800      	ldr	r0, [r0, #0]
 23fbd02:	4b04      	ldr	r3, [pc, #16]	; (23fbd14 <netdb_getaddrinfo+0x18>)
 23fbd04:	4403      	add	r3, r0
 23fbd06:	681b      	ldr	r3, [r3, #0]
 23fbd08:	68db      	ldr	r3, [r3, #12]
 23fbd0a:	9302      	str	r3, [sp, #8]
 23fbd0c:	bd09      	pop	{r0, r3, pc}
 23fbd0e:	0000      	.short	0x0000
 23fbd10:	1007ad78 	.word	0x1007ad78
 23fbd14:	00000050 	.word	0x00000050

023fbd18 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbd18:	b509      	push	{r0, r3, lr}
 23fbd1a:	4804      	ldr	r0, [pc, #16]	; (23fbd2c <panic_+0x14>)
 23fbd1c:	6800      	ldr	r0, [r0, #0]
 23fbd1e:	4b04      	ldr	r3, [pc, #16]	; (23fbd30 <panic_+0x18>)
 23fbd20:	4403      	add	r3, r0
 23fbd22:	681b      	ldr	r3, [r3, #0]
 23fbd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbd26:	9302      	str	r3, [sp, #8]
 23fbd28:	bd09      	pop	{r0, r3, pc}
 23fbd2a:	0000      	.short	0x0000
 23fbd2c:	1007ad78 	.word	0x1007ad78
 23fbd30:	00000048 	.word	0x00000048

023fbd34 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fbd34:	b509      	push	{r0, r3, lr}
 23fbd36:	4804      	ldr	r0, [pc, #16]	; (23fbd48 <log_message+0x14>)
 23fbd38:	6800      	ldr	r0, [r0, #0]
 23fbd3a:	4b04      	ldr	r3, [pc, #16]	; (23fbd4c <log_message+0x18>)
 23fbd3c:	4403      	add	r3, r0
 23fbd3e:	681b      	ldr	r3, [r3, #0]
 23fbd40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fbd42:	9302      	str	r3, [sp, #8]
 23fbd44:	bd09      	pop	{r0, r3, pc}
 23fbd46:	0000      	.short	0x0000
 23fbd48:	1007ad78 	.word	0x1007ad78
 23fbd4c:	00000048 	.word	0x00000048

023fbd50 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fbd50:	b509      	push	{r0, r3, lr}
 23fbd52:	4804      	ldr	r0, [pc, #16]	; (23fbd64 <log_message_v+0x14>)
 23fbd54:	6800      	ldr	r0, [r0, #0]
 23fbd56:	4b04      	ldr	r3, [pc, #16]	; (23fbd68 <log_message_v+0x18>)
 23fbd58:	4403      	add	r3, r0
 23fbd5a:	681b      	ldr	r3, [r3, #0]
 23fbd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbd5e:	9302      	str	r3, [sp, #8]
 23fbd60:	bd09      	pop	{r0, r3, pc}
 23fbd62:	0000      	.short	0x0000
 23fbd64:	1007ad78 	.word	0x1007ad78
 23fbd68:	00000048 	.word	0x00000048

023fbd6c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbd6c:	b509      	push	{r0, r3, lr}
 23fbd6e:	4804      	ldr	r0, [pc, #16]	; (23fbd80 <log_level_name+0x14>)
 23fbd70:	6800      	ldr	r0, [r0, #0]
 23fbd72:	4b04      	ldr	r3, [pc, #16]	; (23fbd84 <log_level_name+0x18>)
 23fbd74:	4403      	add	r3, r0
 23fbd76:	681b      	ldr	r3, [r3, #0]
 23fbd78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbd7a:	9302      	str	r3, [sp, #8]
 23fbd7c:	bd09      	pop	{r0, r3, pc}
 23fbd7e:	0000      	.short	0x0000
 23fbd80:	1007ad78 	.word	0x1007ad78
 23fbd84:	00000048 	.word	0x00000048

023fbd88 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbd88:	b509      	push	{r0, r3, lr}
 23fbd8a:	4804      	ldr	r0, [pc, #16]	; (23fbd9c <log_set_callbacks+0x14>)
 23fbd8c:	6800      	ldr	r0, [r0, #0]
 23fbd8e:	4b04      	ldr	r3, [pc, #16]	; (23fbda0 <log_set_callbacks+0x18>)
 23fbd90:	4403      	add	r3, r0
 23fbd92:	681b      	ldr	r3, [r3, #0]
 23fbd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbd96:	9302      	str	r3, [sp, #8]
 23fbd98:	bd09      	pop	{r0, r3, pc}
 23fbd9a:	0000      	.short	0x0000
 23fbd9c:	1007ad78 	.word	0x1007ad78
 23fbda0:	00000048 	.word	0x00000048

023fbda4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbda4:	b509      	push	{r0, r3, lr}
 23fbda6:	4804      	ldr	r0, [pc, #16]	; (23fbdb8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbda8:	6800      	ldr	r0, [r0, #0]
 23fbdaa:	4b04      	ldr	r3, [pc, #16]	; (23fbdbc <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbdac:	4403      	add	r3, r0
 23fbdae:	681b      	ldr	r3, [r3, #0]
 23fbdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbdb2:	9302      	str	r3, [sp, #8]
 23fbdb4:	bd09      	pop	{r0, r3, pc}
 23fbdb6:	0000      	.short	0x0000
 23fbdb8:	1007ad78 	.word	0x1007ad78
 23fbdbc:	0000002c 	.word	0x0000002c

023fbdc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbdc0:	b509      	push	{r0, r3, lr}
 23fbdc2:	4804      	ldr	r0, [pc, #16]	; (23fbdd4 <network_connect+0x14>)
 23fbdc4:	6800      	ldr	r0, [r0, #0]
 23fbdc6:	4b04      	ldr	r3, [pc, #16]	; (23fbdd8 <network_connect+0x18>)
 23fbdc8:	4403      	add	r3, r0
 23fbdca:	681b      	ldr	r3, [r3, #0]
 23fbdcc:	685b      	ldr	r3, [r3, #4]
 23fbdce:	9302      	str	r3, [sp, #8]
 23fbdd0:	bd09      	pop	{r0, r3, pc}
 23fbdd2:	0000      	.short	0x0000
 23fbdd4:	1007ad78 	.word	0x1007ad78
 23fbdd8:	00000028 	.word	0x00000028

023fbddc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbddc:	b509      	push	{r0, r3, lr}
 23fbdde:	4804      	ldr	r0, [pc, #16]	; (23fbdf0 <network_connecting+0x14>)
 23fbde0:	6800      	ldr	r0, [r0, #0]
 23fbde2:	4b04      	ldr	r3, [pc, #16]	; (23fbdf4 <network_connecting+0x18>)
 23fbde4:	4403      	add	r3, r0
 23fbde6:	681b      	ldr	r3, [r3, #0]
 23fbde8:	689b      	ldr	r3, [r3, #8]
 23fbdea:	9302      	str	r3, [sp, #8]
 23fbdec:	bd09      	pop	{r0, r3, pc}
 23fbdee:	0000      	.short	0x0000
 23fbdf0:	1007ad78 	.word	0x1007ad78
 23fbdf4:	00000028 	.word	0x00000028

023fbdf8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbdf8:	b509      	push	{r0, r3, lr}
 23fbdfa:	4804      	ldr	r0, [pc, #16]	; (23fbe0c <network_disconnect+0x14>)
 23fbdfc:	6800      	ldr	r0, [r0, #0]
 23fbdfe:	4b04      	ldr	r3, [pc, #16]	; (23fbe10 <network_disconnect+0x18>)
 23fbe00:	4403      	add	r3, r0
 23fbe02:	681b      	ldr	r3, [r3, #0]
 23fbe04:	68db      	ldr	r3, [r3, #12]
 23fbe06:	9302      	str	r3, [sp, #8]
 23fbe08:	bd09      	pop	{r0, r3, pc}
 23fbe0a:	0000      	.short	0x0000
 23fbe0c:	1007ad78 	.word	0x1007ad78
 23fbe10:	00000028 	.word	0x00000028

023fbe14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbe14:	b509      	push	{r0, r3, lr}
 23fbe16:	4804      	ldr	r0, [pc, #16]	; (23fbe28 <network_ready+0x14>)
 23fbe18:	6800      	ldr	r0, [r0, #0]
 23fbe1a:	4b04      	ldr	r3, [pc, #16]	; (23fbe2c <network_ready+0x18>)
 23fbe1c:	4403      	add	r3, r0
 23fbe1e:	681b      	ldr	r3, [r3, #0]
 23fbe20:	691b      	ldr	r3, [r3, #16]
 23fbe22:	9302      	str	r3, [sp, #8]
 23fbe24:	bd09      	pop	{r0, r3, pc}
 23fbe26:	0000      	.short	0x0000
 23fbe28:	1007ad78 	.word	0x1007ad78
 23fbe2c:	00000028 	.word	0x00000028

023fbe30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbe30:	b509      	push	{r0, r3, lr}
 23fbe32:	4804      	ldr	r0, [pc, #16]	; (23fbe44 <network_on+0x14>)
 23fbe34:	6800      	ldr	r0, [r0, #0]
 23fbe36:	4b04      	ldr	r3, [pc, #16]	; (23fbe48 <network_on+0x18>)
 23fbe38:	4403      	add	r3, r0
 23fbe3a:	681b      	ldr	r3, [r3, #0]
 23fbe3c:	695b      	ldr	r3, [r3, #20]
 23fbe3e:	9302      	str	r3, [sp, #8]
 23fbe40:	bd09      	pop	{r0, r3, pc}
 23fbe42:	0000      	.short	0x0000
 23fbe44:	1007ad78 	.word	0x1007ad78
 23fbe48:	00000028 	.word	0x00000028

023fbe4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbe4c:	b509      	push	{r0, r3, lr}
 23fbe4e:	4804      	ldr	r0, [pc, #16]	; (23fbe60 <network_off+0x14>)
 23fbe50:	6800      	ldr	r0, [r0, #0]
 23fbe52:	4b04      	ldr	r3, [pc, #16]	; (23fbe64 <network_off+0x18>)
 23fbe54:	4403      	add	r3, r0
 23fbe56:	681b      	ldr	r3, [r3, #0]
 23fbe58:	699b      	ldr	r3, [r3, #24]
 23fbe5a:	9302      	str	r3, [sp, #8]
 23fbe5c:	bd09      	pop	{r0, r3, pc}
 23fbe5e:	0000      	.short	0x0000
 23fbe60:	1007ad78 	.word	0x1007ad78
 23fbe64:	00000028 	.word	0x00000028

023fbe68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbe68:	b509      	push	{r0, r3, lr}
 23fbe6a:	4804      	ldr	r0, [pc, #16]	; (23fbe7c <network_listen+0x14>)
 23fbe6c:	6800      	ldr	r0, [r0, #0]
 23fbe6e:	4b04      	ldr	r3, [pc, #16]	; (23fbe80 <network_listen+0x18>)
 23fbe70:	4403      	add	r3, r0
 23fbe72:	681b      	ldr	r3, [r3, #0]
 23fbe74:	69db      	ldr	r3, [r3, #28]
 23fbe76:	9302      	str	r3, [sp, #8]
 23fbe78:	bd09      	pop	{r0, r3, pc}
 23fbe7a:	0000      	.short	0x0000
 23fbe7c:	1007ad78 	.word	0x1007ad78
 23fbe80:	00000028 	.word	0x00000028

023fbe84 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fbe84:	b509      	push	{r0, r3, lr}
 23fbe86:	4804      	ldr	r0, [pc, #16]	; (23fbe98 <network_listening+0x14>)
 23fbe88:	6800      	ldr	r0, [r0, #0]
 23fbe8a:	4b04      	ldr	r3, [pc, #16]	; (23fbe9c <network_listening+0x18>)
 23fbe8c:	4403      	add	r3, r0
 23fbe8e:	681b      	ldr	r3, [r3, #0]
 23fbe90:	6a1b      	ldr	r3, [r3, #32]
 23fbe92:	9302      	str	r3, [sp, #8]
 23fbe94:	bd09      	pop	{r0, r3, pc}
 23fbe96:	0000      	.short	0x0000
 23fbe98:	1007ad78 	.word	0x1007ad78
 23fbe9c:	00000028 	.word	0x00000028

023fbea0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fbea0:	b509      	push	{r0, r3, lr}
 23fbea2:	4804      	ldr	r0, [pc, #16]	; (23fbeb4 <network_set_listen_timeout+0x14>)
 23fbea4:	6800      	ldr	r0, [r0, #0]
 23fbea6:	4b04      	ldr	r3, [pc, #16]	; (23fbeb8 <network_set_listen_timeout+0x18>)
 23fbea8:	4403      	add	r3, r0
 23fbeaa:	681b      	ldr	r3, [r3, #0]
 23fbeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbeae:	9302      	str	r3, [sp, #8]
 23fbeb0:	bd09      	pop	{r0, r3, pc}
 23fbeb2:	0000      	.short	0x0000
 23fbeb4:	1007ad78 	.word	0x1007ad78
 23fbeb8:	00000028 	.word	0x00000028

023fbebc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fbebc:	b509      	push	{r0, r3, lr}
 23fbebe:	4804      	ldr	r0, [pc, #16]	; (23fbed0 <network_get_listen_timeout+0x14>)
 23fbec0:	6800      	ldr	r0, [r0, #0]
 23fbec2:	4b04      	ldr	r3, [pc, #16]	; (23fbed4 <network_get_listen_timeout+0x18>)
 23fbec4:	4403      	add	r3, r0
 23fbec6:	681b      	ldr	r3, [r3, #0]
 23fbec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbeca:	9302      	str	r3, [sp, #8]
 23fbecc:	bd09      	pop	{r0, r3, pc}
 23fbece:	0000      	.short	0x0000
 23fbed0:	1007ad78 	.word	0x1007ad78
 23fbed4:	00000028 	.word	0x00000028

023fbed8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fbed8:	b509      	push	{r0, r3, lr}
 23fbeda:	4804      	ldr	r0, [pc, #16]	; (23fbeec <network_is_on+0x14>)
 23fbedc:	6800      	ldr	r0, [r0, #0]
 23fbede:	4b04      	ldr	r3, [pc, #16]	; (23fbef0 <network_is_on+0x18>)
 23fbee0:	4403      	add	r3, r0
 23fbee2:	681b      	ldr	r3, [r3, #0]
 23fbee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbee6:	9302      	str	r3, [sp, #8]
 23fbee8:	bd09      	pop	{r0, r3, pc}
 23fbeea:	0000      	.short	0x0000
 23fbeec:	1007ad78 	.word	0x1007ad78
 23fbef0:	00000028 	.word	0x00000028

023fbef4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fbef4:	b509      	push	{r0, r3, lr}
 23fbef6:	4804      	ldr	r0, [pc, #16]	; (23fbf08 <network_is_off+0x14>)
 23fbef8:	6800      	ldr	r0, [r0, #0]
 23fbefa:	4b04      	ldr	r3, [pc, #16]	; (23fbf0c <network_is_off+0x18>)
 23fbefc:	4403      	add	r3, r0
 23fbefe:	681b      	ldr	r3, [r3, #0]
 23fbf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbf02:	9302      	str	r3, [sp, #8]
 23fbf04:	bd09      	pop	{r0, r3, pc}
 23fbf06:	0000      	.short	0x0000
 23fbf08:	1007ad78 	.word	0x1007ad78
 23fbf0c:	00000028 	.word	0x00000028

023fbf10 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbf10:	b509      	push	{r0, r3, lr}
 23fbf12:	4804      	ldr	r0, [pc, #16]	; (23fbf24 <set_system_mode+0x14>)
 23fbf14:	6800      	ldr	r0, [r0, #0]
 23fbf16:	4b04      	ldr	r3, [pc, #16]	; (23fbf28 <set_system_mode+0x18>)
 23fbf18:	4403      	add	r3, r0
 23fbf1a:	681b      	ldr	r3, [r3, #0]
 23fbf1c:	685b      	ldr	r3, [r3, #4]
 23fbf1e:	9302      	str	r3, [sp, #8]
 23fbf20:	bd09      	pop	{r0, r3, pc}
 23fbf22:	0000      	.short	0x0000
 23fbf24:	1007ad78 	.word	0x1007ad78
 23fbf28:	00000008 	.word	0x00000008

023fbf2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbf2c:	b509      	push	{r0, r3, lr}
 23fbf2e:	4804      	ldr	r0, [pc, #16]	; (23fbf40 <system_ctrl_set_app_request_handler+0x14>)
 23fbf30:	6800      	ldr	r0, [r0, #0]
 23fbf32:	4b04      	ldr	r3, [pc, #16]	; (23fbf44 <system_ctrl_set_app_request_handler+0x18>)
 23fbf34:	4403      	add	r3, r0
 23fbf36:	681b      	ldr	r3, [r3, #0]
 23fbf38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbf3c:	9302      	str	r3, [sp, #8]
 23fbf3e:	bd09      	pop	{r0, r3, pc}
 23fbf40:	1007ad78 	.word	0x1007ad78
 23fbf44:	00000008 	.word	0x00000008

023fbf48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbf48:	b509      	push	{r0, r3, lr}
 23fbf4a:	4804      	ldr	r0, [pc, #16]	; (23fbf5c <system_ctrl_set_result+0x14>)
 23fbf4c:	6800      	ldr	r0, [r0, #0]
 23fbf4e:	4b04      	ldr	r3, [pc, #16]	; (23fbf60 <system_ctrl_set_result+0x18>)
 23fbf50:	4403      	add	r3, r0
 23fbf52:	681b      	ldr	r3, [r3, #0]
 23fbf54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbf58:	9302      	str	r3, [sp, #8]
 23fbf5a:	bd09      	pop	{r0, r3, pc}
 23fbf5c:	1007ad78 	.word	0x1007ad78
 23fbf60:	00000008 	.word	0x00000008

023fbf64 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fbf64:	b509      	push	{r0, r3, lr}
 23fbf66:	4804      	ldr	r0, [pc, #16]	; (23fbf78 <malloc+0x14>)
 23fbf68:	6800      	ldr	r0, [r0, #0]
 23fbf6a:	4b04      	ldr	r3, [pc, #16]	; (23fbf7c <malloc+0x18>)
 23fbf6c:	4403      	add	r3, r0
 23fbf6e:	681b      	ldr	r3, [r3, #0]
 23fbf70:	681b      	ldr	r3, [r3, #0]
 23fbf72:	9302      	str	r3, [sp, #8]
 23fbf74:	bd09      	pop	{r0, r3, pc}
 23fbf76:	0000      	.short	0x0000
 23fbf78:	1007ad78 	.word	0x1007ad78
 23fbf7c:	00000004 	.word	0x00000004

023fbf80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fbf80:	b509      	push	{r0, r3, lr}
 23fbf82:	4804      	ldr	r0, [pc, #16]	; (23fbf94 <free+0x14>)
 23fbf84:	6800      	ldr	r0, [r0, #0]
 23fbf86:	4b04      	ldr	r3, [pc, #16]	; (23fbf98 <free+0x18>)
 23fbf88:	4403      	add	r3, r0
 23fbf8a:	681b      	ldr	r3, [r3, #0]
 23fbf8c:	685b      	ldr	r3, [r3, #4]
 23fbf8e:	9302      	str	r3, [sp, #8]
 23fbf90:	bd09      	pop	{r0, r3, pc}
 23fbf92:	0000      	.short	0x0000
 23fbf94:	1007ad78 	.word	0x1007ad78
 23fbf98:	00000004 	.word	0x00000004

023fbf9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fbf9c:	b509      	push	{r0, r3, lr}
 23fbf9e:	4804      	ldr	r0, [pc, #16]	; (23fbfb0 <realloc+0x14>)
 23fbfa0:	6800      	ldr	r0, [r0, #0]
 23fbfa2:	4b04      	ldr	r3, [pc, #16]	; (23fbfb4 <realloc+0x18>)
 23fbfa4:	4403      	add	r3, r0
 23fbfa6:	681b      	ldr	r3, [r3, #0]
 23fbfa8:	689b      	ldr	r3, [r3, #8]
 23fbfaa:	9302      	str	r3, [sp, #8]
 23fbfac:	bd09      	pop	{r0, r3, pc}
 23fbfae:	0000      	.short	0x0000
 23fbfb0:	1007ad78 	.word	0x1007ad78
 23fbfb4:	00000004 	.word	0x00000004

023fbfb8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fbfb8:	b509      	push	{r0, r3, lr}
 23fbfba:	4804      	ldr	r0, [pc, #16]	; (23fbfcc <vsnprintf+0x14>)
 23fbfbc:	6800      	ldr	r0, [r0, #0]
 23fbfbe:	4b04      	ldr	r3, [pc, #16]	; (23fbfd0 <vsnprintf+0x18>)
 23fbfc0:	4403      	add	r3, r0
 23fbfc2:	681b      	ldr	r3, [r3, #0]
 23fbfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbfc6:	9302      	str	r3, [sp, #8]
 23fbfc8:	bd09      	pop	{r0, r3, pc}
 23fbfca:	0000      	.short	0x0000
 23fbfcc:	1007ad78 	.word	0x1007ad78
 23fbfd0:	00000004 	.word	0x00000004

023fbfd4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fbfd4:	b509      	push	{r0, r3, lr}
 23fbfd6:	4804      	ldr	r0, [pc, #16]	; (23fbfe8 <abort+0x14>)
 23fbfd8:	6800      	ldr	r0, [r0, #0]
 23fbfda:	4b04      	ldr	r3, [pc, #16]	; (23fbfec <abort+0x18>)
 23fbfdc:	4403      	add	r3, r0
 23fbfde:	681b      	ldr	r3, [r3, #0]
 23fbfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbfe2:	9302      	str	r3, [sp, #8]
 23fbfe4:	bd09      	pop	{r0, r3, pc}
 23fbfe6:	0000      	.short	0x0000
 23fbfe8:	1007ad78 	.word	0x1007ad78
 23fbfec:	00000004 	.word	0x00000004

023fbff0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fbff0:	b509      	push	{r0, r3, lr}
 23fbff2:	4804      	ldr	r0, [pc, #16]	; (23fc004 <__errno+0x14>)
 23fbff4:	6800      	ldr	r0, [r0, #0]
 23fbff6:	4b04      	ldr	r3, [pc, #16]	; (23fc008 <__errno+0x18>)
 23fbff8:	4403      	add	r3, r0
 23fbffa:	681b      	ldr	r3, [r3, #0]
 23fbffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbffe:	9302      	str	r3, [sp, #8]
 23fc000:	bd09      	pop	{r0, r3, pc}
 23fc002:	0000      	.short	0x0000
 23fc004:	1007ad78 	.word	0x1007ad78
 23fc008:	00000004 	.word	0x00000004

023fc00c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc00c:	b509      	push	{r0, r3, lr}
 23fc00e:	4804      	ldr	r0, [pc, #16]	; (23fc020 <__assert_func+0x14>)
 23fc010:	6800      	ldr	r0, [r0, #0]
 23fc012:	4b04      	ldr	r3, [pc, #16]	; (23fc024 <__assert_func+0x18>)
 23fc014:	4403      	add	r3, r0
 23fc016:	681b      	ldr	r3, [r3, #0]
 23fc018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc01a:	9302      	str	r3, [sp, #8]
 23fc01c:	bd09      	pop	{r0, r3, pc}
 23fc01e:	0000      	.short	0x0000
 23fc020:	1007ad78 	.word	0x1007ad78
 23fc024:	00000004 	.word	0x00000004

023fc028 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc028:	b509      	push	{r0, r3, lr}
 23fc02a:	4804      	ldr	r0, [pc, #16]	; (23fc03c <newlib_impure_ptr_callback+0x14>)
 23fc02c:	6800      	ldr	r0, [r0, #0]
 23fc02e:	4b04      	ldr	r3, [pc, #16]	; (23fc040 <newlib_impure_ptr_callback+0x18>)
 23fc030:	4403      	add	r3, r0
 23fc032:	681b      	ldr	r3, [r3, #0]
 23fc034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc036:	9302      	str	r3, [sp, #8]
 23fc038:	bd09      	pop	{r0, r3, pc}
 23fc03a:	0000      	.short	0x0000
 23fc03c:	1007ad78 	.word	0x1007ad78
 23fc040:	00000004 	.word	0x00000004

023fc044 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fc044:	2300      	movs	r3, #0
 23fc046:	6840      	ldr	r0, [r0, #4]
 23fc048:	461a      	mov	r2, r3
 23fc04a:	f7ff beb9 	b.w	23fbdc0 <network_connect>

023fc04e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fc04e:	2200      	movs	r2, #0
 23fc050:	2102      	movs	r1, #2
 23fc052:	6840      	ldr	r0, [r0, #4]
 23fc054:	f7ff bed0 	b.w	23fbdf8 <network_disconnect>

023fc058 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fc058:	2200      	movs	r2, #0
 23fc05a:	6840      	ldr	r0, [r0, #4]
 23fc05c:	4611      	mov	r1, r2
 23fc05e:	f7ff bebd 	b.w	23fbddc <network_connecting>

023fc062 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fc062:	2200      	movs	r2, #0
 23fc064:	6840      	ldr	r0, [r0, #4]
 23fc066:	4611      	mov	r1, r2
 23fc068:	f7ff bed4 	b.w	23fbe14 <network_ready>

023fc06c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fc06c:	2300      	movs	r3, #0
 23fc06e:	6840      	ldr	r0, [r0, #4]
 23fc070:	461a      	mov	r2, r3
 23fc072:	4619      	mov	r1, r3
 23fc074:	f7ff bedc 	b.w	23fbe30 <network_on>

023fc078 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fc078:	2300      	movs	r3, #0
 23fc07a:	6840      	ldr	r0, [r0, #4]
 23fc07c:	461a      	mov	r2, r3
 23fc07e:	4619      	mov	r1, r3
 23fc080:	f7ff bee4 	b.w	23fbe4c <network_off>

023fc084 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fc084:	2100      	movs	r1, #0
 23fc086:	6840      	ldr	r0, [r0, #4]
 23fc088:	f7ff bf26 	b.w	23fbed8 <network_is_on>

023fc08c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fc08c:	2100      	movs	r1, #0
 23fc08e:	6840      	ldr	r0, [r0, #4]
 23fc090:	f7ff bf30 	b.w	23fbef4 <network_is_off>

023fc094 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fc094:	2200      	movs	r2, #0
 23fc096:	6840      	ldr	r0, [r0, #4]
 23fc098:	f081 0101 	eor.w	r1, r1, #1
 23fc09c:	f7ff bee4 	b.w	23fbe68 <network_listen>

023fc0a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fc0a0:	2200      	movs	r2, #0
 23fc0a2:	6840      	ldr	r0, [r0, #4]
 23fc0a4:	f7ff befc 	b.w	23fbea0 <network_set_listen_timeout>

023fc0a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fc0a8:	2200      	movs	r2, #0
 23fc0aa:	6840      	ldr	r0, [r0, #4]
 23fc0ac:	4611      	mov	r1, r2
 23fc0ae:	f7ff bf05 	b.w	23fbebc <network_get_listen_timeout>

023fc0b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fc0b2:	2200      	movs	r2, #0
 23fc0b4:	6840      	ldr	r0, [r0, #4]
 23fc0b6:	4611      	mov	r1, r2
 23fc0b8:	f7ff bee4 	b.w	23fbe84 <network_listening>

023fc0bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fc0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc0c0:	b095      	sub	sp, #84	; 0x54
 23fc0c2:	4614      	mov	r4, r2
 23fc0c4:	460d      	mov	r5, r1
 23fc0c6:	4607      	mov	r7, r0
    IPAddress addr;
 23fc0c8:	f000 fb60 	bl	23fc78c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fc0cc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fc0ce:	221c      	movs	r2, #28
 23fc0d0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fc0d2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fc0d4:	f003 fa53 	bl	23ff57e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fc0d8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc0da:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fc0dc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc0de:	2100      	movs	r1, #0
 23fc0e0:	466b      	mov	r3, sp
 23fc0e2:	aa0c      	add	r2, sp, #48	; 0x30
 23fc0e4:	f7ff fe0a 	bl	23fbcfc <netdb_getaddrinfo>
    if (!r) {
 23fc0e8:	4604      	mov	r4, r0
 23fc0ea:	2800      	cmp	r0, #0
 23fc0ec:	d14b      	bne.n	23fc186 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc0ee:	4602      	mov	r2, r0
 23fc0f0:	2101      	movs	r1, #1
 23fc0f2:	6868      	ldr	r0, [r5, #4]
 23fc0f4:	f7ff fe8e 	bl	23fbe14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc0f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc0fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc0fc:	4622      	mov	r2, r4
 23fc0fe:	6868      	ldr	r0, [r5, #4]
 23fc100:	f7ff fe88 	bl	23fbe14 <network_ready>
        bool ok = false;
 23fc104:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc106:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc108:	9e00      	ldr	r6, [sp, #0]
 23fc10a:	2e00      	cmp	r6, #0
 23fc10c:	d03b      	beq.n	23fc186 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fc10e:	2900      	cmp	r1, #0
 23fc110:	d139      	bne.n	23fc186 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fc112:	6873      	ldr	r3, [r6, #4]
 23fc114:	2b02      	cmp	r3, #2
 23fc116:	d003      	beq.n	23fc120 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fc118:	2b0a      	cmp	r3, #10
 23fc11a:	d011      	beq.n	23fc140 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc11c:	69f6      	ldr	r6, [r6, #28]
 23fc11e:	e7f4      	b.n	23fc10a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fc120:	f1b8 0f00 	cmp.w	r8, #0
 23fc124:	d0fa      	beq.n	23fc11c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fc126:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fc128:	a806      	add	r0, sp, #24
 23fc12a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fc12c:	1d3c      	adds	r4, r7, #4
 23fc12e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fc130:	f000 fb5a 	bl	23fc7e8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fc134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc138:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc13a:	4641      	mov	r1, r8
 23fc13c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fc13e:	e7ed      	b.n	23fc11c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fc140:	f1b9 0f00 	cmp.w	r9, #0
 23fc144:	d0ea      	beq.n	23fc11c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fc146:	2210      	movs	r2, #16
 23fc148:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fc14a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fc14c:	f003 fa17 	bl	23ff57e <memset>
                    a.v = 6;
 23fc150:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc152:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fc154:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc158:	f104 0308 	add.w	r3, r4, #8
 23fc15c:	3418      	adds	r4, #24
 23fc15e:	462a      	mov	r2, r5
 23fc160:	6818      	ldr	r0, [r3, #0]
 23fc162:	6859      	ldr	r1, [r3, #4]
 23fc164:	3308      	adds	r3, #8
 23fc166:	c203      	stmia	r2!, {r0, r1}
 23fc168:	42a3      	cmp	r3, r4
 23fc16a:	4615      	mov	r5, r2
 23fc16c:	d1f7      	bne.n	23fc15e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fc16e:	a901      	add	r1, sp, #4
 23fc170:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fc172:	1d3c      	adds	r4, r7, #4
 23fc174:	ad07      	add	r5, sp, #28
 23fc176:	f000 fb17 	bl	23fc7a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc17a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc17c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc17e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc180:	4649      	mov	r1, r9
 23fc182:	7023      	strb	r3, [r4, #0]
                    break;
 23fc184:	e7ca      	b.n	23fc11c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fc186:	9800      	ldr	r0, [sp, #0]
 23fc188:	f7ff fdaa 	bl	23fbce0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fc18c:	4638      	mov	r0, r7
 23fc18e:	b015      	add	sp, #84	; 0x54
 23fc190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc194 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc194:	4b02      	ldr	r3, [pc, #8]	; (23fc1a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fc196:	4a03      	ldr	r2, [pc, #12]	; (23fc1a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fc198:	601a      	str	r2, [r3, #0]
 23fc19a:	2200      	movs	r2, #0
 23fc19c:	605a      	str	r2, [r3, #4]

} // spark
 23fc19e:	4770      	bx	lr
 23fc1a0:	1007ae64 	.word	0x1007ae64
 23fc1a4:	023ff96c 	.word	0x023ff96c

023fc1a8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fc1a8:	2200      	movs	r2, #0
 23fc1aa:	6840      	ldr	r0, [r0, #4]
 23fc1ac:	4611      	mov	r1, r2
 23fc1ae:	f7ff be31 	b.w	23fbe14 <network_ready>

023fc1b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc1b2:	2200      	movs	r2, #0
 23fc1b4:	6840      	ldr	r0, [r0, #4]
 23fc1b6:	4611      	mov	r1, r2
 23fc1b8:	f7ff be64 	b.w	23fbe84 <network_listening>

023fc1bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc1bc:	2200      	movs	r2, #0
 23fc1be:	6840      	ldr	r0, [r0, #4]
 23fc1c0:	4611      	mov	r1, r2
 23fc1c2:	f7ff be7b 	b.w	23fbebc <network_get_listen_timeout>

023fc1c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc1c6:	2200      	movs	r2, #0
 23fc1c8:	6840      	ldr	r0, [r0, #4]
 23fc1ca:	f7ff be69 	b.w	23fbea0 <network_set_listen_timeout>

023fc1ce <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc1ce:	2200      	movs	r2, #0
 23fc1d0:	6840      	ldr	r0, [r0, #4]
 23fc1d2:	f081 0101 	eor.w	r1, r1, #1
 23fc1d6:	f7ff be47 	b.w	23fbe68 <network_listen>

023fc1da <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc1da:	2300      	movs	r3, #0
 23fc1dc:	6840      	ldr	r0, [r0, #4]
 23fc1de:	461a      	mov	r2, r3
 23fc1e0:	4619      	mov	r1, r3
 23fc1e2:	f7ff be33 	b.w	23fbe4c <network_off>

023fc1e6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc1e6:	2300      	movs	r3, #0
 23fc1e8:	6840      	ldr	r0, [r0, #4]
 23fc1ea:	461a      	mov	r2, r3
 23fc1ec:	4619      	mov	r1, r3
 23fc1ee:	f7ff be1f 	b.w	23fbe30 <network_on>

023fc1f2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc1f2:	2200      	movs	r2, #0
 23fc1f4:	6840      	ldr	r0, [r0, #4]
 23fc1f6:	4611      	mov	r1, r2
 23fc1f8:	f7ff bdf0 	b.w	23fbddc <network_connecting>

023fc1fc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc1fc:	2200      	movs	r2, #0
 23fc1fe:	2102      	movs	r1, #2
 23fc200:	6840      	ldr	r0, [r0, #4]
 23fc202:	f7ff bdf9 	b.w	23fbdf8 <network_disconnect>

023fc206 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc206:	2300      	movs	r3, #0
 23fc208:	6840      	ldr	r0, [r0, #4]
 23fc20a:	461a      	mov	r2, r3
 23fc20c:	f7ff bdd8 	b.w	23fbdc0 <network_connect>

023fc210 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fc210:	2204      	movs	r2, #4
 23fc212:	4b02      	ldr	r3, [pc, #8]	; (23fc21c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fc214:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fc216:	4a02      	ldr	r2, [pc, #8]	; (23fc220 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fc218:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fc21a:	4770      	bx	lr
 23fc21c:	1007ae6c 	.word	0x1007ae6c
 23fc220:	023ff9a8 	.word	0x023ff9a8

023fc224 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc224:	2201      	movs	r2, #1
 23fc226:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc22a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc22e:	4618      	mov	r0, r3
 23fc230:	2901      	cmp	r1, #1
 23fc232:	d108      	bne.n	23fc246 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc234:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc238:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc23c:	3a01      	subs	r2, #1
 23fc23e:	f103 0310 	add.w	r3, r3, #16
 23fc242:	d1f2      	bne.n	23fc22a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc244:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc246:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc248:	bf04      	itt	eq
 23fc24a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc24e:	1852      	addeq	r2, r2, r1
 23fc250:	e7f4      	b.n	23fc23c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc252 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc252:	b40e      	push	{r1, r2, r3}
 23fc254:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc256:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc258:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc25a:	af00      	add	r7, sp, #0
 23fc25c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc260:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc264:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc266:	462b      	mov	r3, r5
 23fc268:	1878      	adds	r0, r7, r1
 23fc26a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc26c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc26e:	f7ff fea3 	bl	23fbfb8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc272:	280f      	cmp	r0, #15
 23fc274:	687a      	ldr	r2, [r7, #4]
 23fc276:	d91a      	bls.n	23fc2ae <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc278:	f100 0308 	add.w	r3, r0, #8
 23fc27c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc280:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc282:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc286:	1c41      	adds	r1, r0, #1
 23fc288:	462b      	mov	r3, r5
 23fc28a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc28c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc28e:	f7ff fe93 	bl	23fbfb8 <vsnprintf>
        if (n > 0) {
 23fc292:	1e02      	subs	r2, r0, #0
 23fc294:	dd04      	ble.n	23fc2a0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc296:	6823      	ldr	r3, [r4, #0]
 23fc298:	4669      	mov	r1, sp
 23fc29a:	4620      	mov	r0, r4
 23fc29c:	689b      	ldr	r3, [r3, #8]
 23fc29e:	4798      	blx	r3
 23fc2a0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc2a2:	3720      	adds	r7, #32
 23fc2a4:	46bd      	mov	sp, r7
 23fc2a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc2aa:	b003      	add	sp, #12
 23fc2ac:	4770      	bx	lr
    } else if (n > 0) {
 23fc2ae:	2800      	cmp	r0, #0
 23fc2b0:	d0f7      	beq.n	23fc2a2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc2b2:	6823      	ldr	r3, [r4, #0]
 23fc2b4:	4602      	mov	r2, r0
 23fc2b6:	689b      	ldr	r3, [r3, #8]
 23fc2b8:	4620      	mov	r0, r4
 23fc2ba:	f107 0110 	add.w	r1, r7, #16
 23fc2be:	4798      	blx	r3
}
 23fc2c0:	e7ef      	b.n	23fc2a2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc2c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc2c2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc2c4:	6843      	ldr	r3, [r0, #4]
    {
 23fc2c6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc2c8:	3b01      	subs	r3, #1
 23fc2ca:	6043      	str	r3, [r0, #4]
 23fc2cc:	b963      	cbnz	r3, 23fc2e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc2ce:	6803      	ldr	r3, [r0, #0]
 23fc2d0:	689b      	ldr	r3, [r3, #8]
 23fc2d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc2d4:	68a3      	ldr	r3, [r4, #8]
 23fc2d6:	3b01      	subs	r3, #1
 23fc2d8:	60a3      	str	r3, [r4, #8]
 23fc2da:	b92b      	cbnz	r3, 23fc2e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc2dc:	6823      	ldr	r3, [r4, #0]
 23fc2de:	4620      	mov	r0, r4
    }
 23fc2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc2e4:	68db      	ldr	r3, [r3, #12]
 23fc2e6:	4718      	bx	r3
    }
 23fc2e8:	bd10      	pop	{r4, pc}

023fc2ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc2ea:	b538      	push	{r3, r4, r5, lr}
 23fc2ec:	680b      	ldr	r3, [r1, #0]
 23fc2ee:	4604      	mov	r4, r0
 23fc2f0:	6003      	str	r3, [r0, #0]
 23fc2f2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc2f4:	6843      	ldr	r3, [r0, #4]
 23fc2f6:	429d      	cmp	r5, r3
 23fc2f8:	d008      	beq.n	23fc30c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc2fa:	b115      	cbz	r5, 23fc302 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc2fc:	686b      	ldr	r3, [r5, #4]
 23fc2fe:	3301      	adds	r3, #1
 23fc300:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc302:	6860      	ldr	r0, [r4, #4]
 23fc304:	b108      	cbz	r0, 23fc30a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc306:	f7ff ffdc 	bl	23fc2c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc30a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc30c:	bd38      	pop	{r3, r4, r5, pc}

023fc30e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc30e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc310:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc312:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc316:	2201      	movs	r2, #1
 23fc318:	689b      	ldr	r3, [r3, #8]
 23fc31a:	f10d 0107 	add.w	r1, sp, #7
 23fc31e:	4798      	blx	r3
}
 23fc320:	b003      	add	sp, #12
 23fc322:	f85d fb04 	ldr.w	pc, [sp], #4

023fc326 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc326:	460b      	mov	r3, r1
 23fc328:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc32a:	2200      	movs	r2, #0
 23fc32c:	b510      	push	{r4, lr}
 23fc32e:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc330:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc334:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc336:	b90b      	cbnz	r3, 23fc33c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc338:	4620      	mov	r0, r4
 23fc33a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc33c:	f7ff ffd5 	bl	23fc2ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc340:	e7fa      	b.n	23fc338 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc342 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc342:	6883      	ldr	r3, [r0, #8]
 23fc344:	b1eb      	cbz	r3, 23fc382 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc346:	781a      	ldrb	r2, [r3, #0]
 23fc348:	2a03      	cmp	r2, #3
 23fc34a:	d81a      	bhi.n	23fc382 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc34c:	e8df f002 	tbb	[pc, r2]
 23fc350:	1b021704 	.word	0x1b021704
 23fc354:	2005      	movs	r0, #5
 23fc356:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc358:	6802      	ldr	r2, [r0, #0]
 23fc35a:	685b      	ldr	r3, [r3, #4]
 23fc35c:	6852      	ldr	r2, [r2, #4]
 23fc35e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc360:	282d      	cmp	r0, #45	; 0x2d
 23fc362:	d012      	beq.n	23fc38a <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc364:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc368:	2b09      	cmp	r3, #9
 23fc36a:	d90e      	bls.n	23fc38a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc36c:	2874      	cmp	r0, #116	; 0x74
 23fc36e:	d00e      	beq.n	23fc38e <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc370:	2866      	cmp	r0, #102	; 0x66
 23fc372:	d00c      	beq.n	23fc38e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc374:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc378:	4258      	negs	r0, r3
 23fc37a:	4158      	adcs	r0, r3
 23fc37c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc37e:	2006      	movs	r0, #6
 23fc380:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc382:	2000      	movs	r0, #0
 23fc384:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc386:	2004      	movs	r0, #4
 23fc388:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc38a:	2003      	movs	r0, #3
 23fc38c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc38e:	2002      	movs	r0, #2
}
 23fc390:	4770      	bx	lr

023fc392 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc392:	b510      	push	{r4, lr}
 23fc394:	4604      	mov	r4, r0
    switch (type()) {
 23fc396:	f7ff ffd4 	bl	23fc342 <_ZNK5spark9JSONValue4typeEv>
 23fc39a:	2802      	cmp	r0, #2
 23fc39c:	d00e      	beq.n	23fc3bc <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc39e:	1ec3      	subs	r3, r0, #3
 23fc3a0:	b2db      	uxtb	r3, r3
 23fc3a2:	2b01      	cmp	r3, #1
 23fc3a4:	d814      	bhi.n	23fc3d0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc3a6:	6822      	ldr	r2, [r4, #0]
 23fc3a8:	68a3      	ldr	r3, [r4, #8]
 23fc3aa:	6850      	ldr	r0, [r2, #4]
 23fc3ac:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc3ae:	220a      	movs	r2, #10
}
 23fc3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc3b4:	2100      	movs	r1, #0
 23fc3b6:	4418      	add	r0, r3
 23fc3b8:	f003 b9ee 	b.w	23ff798 <strtol>
        const char* const s = d_->json + t_->start;
 23fc3bc:	6822      	ldr	r2, [r4, #0]
 23fc3be:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc3c0:	6852      	ldr	r2, [r2, #4]
 23fc3c2:	685b      	ldr	r3, [r3, #4]
 23fc3c4:	5cd0      	ldrb	r0, [r2, r3]
 23fc3c6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc3ca:	4258      	negs	r0, r3
 23fc3cc:	4158      	adcs	r0, r3
}
 23fc3ce:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc3d0:	2000      	movs	r0, #0
 23fc3d2:	e7fc      	b.n	23fc3ce <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc3d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc3d4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc3d6:	2300      	movs	r3, #0
 23fc3d8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc3da:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc3de:	480e      	ldr	r0, [pc, #56]	; (23fc418 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc3e0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc3e4:	b1a9      	cbz	r1, 23fc412 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc3e6:	780b      	ldrb	r3, [r1, #0]
 23fc3e8:	2b03      	cmp	r3, #3
 23fc3ea:	d006      	beq.n	23fc3fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc3ec:	b98b      	cbnz	r3, 23fc412 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc3ee:	6813      	ldr	r3, [r2, #0]
 23fc3f0:	6858      	ldr	r0, [r3, #4]
 23fc3f2:	684b      	ldr	r3, [r1, #4]
 23fc3f4:	5cc3      	ldrb	r3, [r0, r3]
 23fc3f6:	2b6e      	cmp	r3, #110	; 0x6e
 23fc3f8:	d007      	beq.n	23fc40a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc3fa:	6813      	ldr	r3, [r2, #0]
 23fc3fc:	684d      	ldr	r5, [r1, #4]
 23fc3fe:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc400:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc402:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc404:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc406:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc408:	60e3      	str	r3, [r4, #12]
 23fc40a:	4611      	mov	r1, r2
 23fc40c:	4620      	mov	r0, r4
 23fc40e:	f7ff ff6c 	bl	23fc2ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc412:	4620      	mov	r0, r4
 23fc414:	bd38      	pop	{r3, r4, r5, pc}
 23fc416:	bf00      	nop
 23fc418:	023ffaaa 	.word	0x023ffaaa

023fc41c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc41c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc41e:	2500      	movs	r5, #0
 23fc420:	460b      	mov	r3, r1
 23fc422:	4604      	mov	r4, r0
 23fc424:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc426:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc42a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc42e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc432:	b14b      	cbz	r3, 23fc448 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc434:	781a      	ldrb	r2, [r3, #0]
 23fc436:	2a01      	cmp	r2, #1
 23fc438:	d106      	bne.n	23fc448 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc43a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc43e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc440:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc442:	6143      	str	r3, [r0, #20]
 23fc444:	f7ff ff51 	bl	23fc2ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc448:	4620      	mov	r0, r4
 23fc44a:	bd38      	pop	{r3, r4, r5, pc}

023fc44c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc44c:	b510      	push	{r4, lr}
    if (!n_) {
 23fc44e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc450:	4604      	mov	r4, r0
    if (!n_) {
 23fc452:	b163      	cbz	r3, 23fc46e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc454:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc456:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc458:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc45a:	3010      	adds	r0, #16
 23fc45c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc45e:	6120      	str	r0, [r4, #16]
    --n_;
 23fc460:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc462:	b113      	cbz	r3, 23fc46a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc464:	f7ff fede 	bl	23fc224 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc468:	60a0      	str	r0, [r4, #8]
    return true;
 23fc46a:	2001      	movs	r0, #1
 23fc46c:	e000      	b.n	23fc470 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc46e:	4618      	mov	r0, r3
}
 23fc470:	bd10      	pop	{r4, pc}

023fc472 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc472:	b510      	push	{r4, lr}
    write('}');
 23fc474:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc476:	4604      	mov	r4, r0
    write('}');
 23fc478:	f7ff ff49 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc47c:	2301      	movs	r3, #1
}
 23fc47e:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc480:	7123      	strb	r3, [r4, #4]
}
 23fc482:	bd10      	pop	{r4, pc}

023fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc484:	b508      	push	{r3, lr}
    switch (state_) {
 23fc486:	7903      	ldrb	r3, [r0, #4]
 23fc488:	2b01      	cmp	r3, #1
 23fc48a:	d002      	beq.n	23fc492 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc48c:	2b02      	cmp	r3, #2
 23fc48e:	d004      	beq.n	23fc49a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc490:	bd08      	pop	{r3, pc}
        write(',');
 23fc492:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc494:	f7ff ff3b 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
}
 23fc498:	e7fa      	b.n	23fc490 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc49a:	213a      	movs	r1, #58	; 0x3a
 23fc49c:	e7fa      	b.n	23fc494 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc49e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc49e:	b510      	push	{r4, lr}
 23fc4a0:	4604      	mov	r4, r0
    writeSeparator();
 23fc4a2:	f7ff ffef 	bl	23fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc4a6:	4620      	mov	r0, r4
 23fc4a8:	217b      	movs	r1, #123	; 0x7b
 23fc4aa:	f7ff ff30 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc4ae:	2300      	movs	r3, #0
}
 23fc4b0:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc4b2:	7123      	strb	r3, [r4, #4]
}
 23fc4b4:	bd10      	pop	{r4, pc}
	...

023fc4b8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc4b8:	b513      	push	{r0, r1, r4, lr}
 23fc4ba:	4604      	mov	r4, r0
 23fc4bc:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc4be:	f7ff ffe1 	bl	23fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc4c2:	6823      	ldr	r3, [r4, #0]
 23fc4c4:	4620      	mov	r0, r4
 23fc4c6:	68db      	ldr	r3, [r3, #12]
 23fc4c8:	9a01      	ldr	r2, [sp, #4]
 23fc4ca:	4903      	ldr	r1, [pc, #12]	; (23fc4d8 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc4cc:	4798      	blx	r3
    state_ = NEXT;
 23fc4ce:	2301      	movs	r3, #1
}
 23fc4d0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc4d2:	7123      	strb	r3, [r4, #4]
}
 23fc4d4:	b002      	add	sp, #8
 23fc4d6:	bd10      	pop	{r4, pc}
 23fc4d8:	023ff8b9 	.word	0x023ff8b9

023fc4dc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc4dc:	b513      	push	{r0, r1, r4, lr}
 23fc4de:	4604      	mov	r4, r0
 23fc4e0:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc4e2:	f7ff ffcf 	bl	23fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc4e6:	6823      	ldr	r3, [r4, #0]
 23fc4e8:	4620      	mov	r0, r4
 23fc4ea:	68db      	ldr	r3, [r3, #12]
 23fc4ec:	9a01      	ldr	r2, [sp, #4]
 23fc4ee:	4903      	ldr	r1, [pc, #12]	; (23fc4fc <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc4f0:	4798      	blx	r3
    state_ = NEXT;
 23fc4f2:	2301      	movs	r3, #1
}
 23fc4f4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc4f6:	7123      	strb	r3, [r4, #4]
}
 23fc4f8:	b002      	add	sp, #8
 23fc4fa:	bd10      	pop	{r4, pc}
 23fc4fc:	023ff9e4 	.word	0x023ff9e4

023fc500 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc504:	460d      	mov	r5, r1
 23fc506:	4690      	mov	r8, r2
    write('"');
 23fc508:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc50a:	4604      	mov	r4, r0
 23fc50c:	462f      	mov	r7, r5
    write('"');
 23fc50e:	f7ff fefe 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc512:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc5b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc516:	44a8      	add	r8, r5
    while (s != end) {
 23fc518:	4547      	cmp	r7, r8
 23fc51a:	46ba      	mov	sl, r7
 23fc51c:	d03d      	beq.n	23fc59a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc51e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc522:	2e22      	cmp	r6, #34	; 0x22
 23fc524:	d006      	beq.n	23fc534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc526:	2e5c      	cmp	r6, #92	; 0x5c
 23fc528:	d004      	beq.n	23fc534 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc52a:	4630      	mov	r0, r6
 23fc52c:	f002 ffe8 	bl	23ff500 <isprint>
 23fc530:	2800      	cmp	r0, #0
 23fc532:	d1f1      	bne.n	23fc518 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc534:	6823      	ldr	r3, [r4, #0]
 23fc536:	4629      	mov	r1, r5
 23fc538:	4620      	mov	r0, r4
 23fc53a:	689b      	ldr	r3, [r3, #8]
 23fc53c:	ebaa 0205 	sub.w	r2, sl, r5
 23fc540:	4798      	blx	r3
            write('\\');
 23fc542:	215c      	movs	r1, #92	; 0x5c
 23fc544:	4620      	mov	r0, r4
 23fc546:	f7ff fee2 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc54a:	2e0d      	cmp	r6, #13
 23fc54c:	d80a      	bhi.n	23fc564 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc54e:	2e07      	cmp	r6, #7
 23fc550:	d91c      	bls.n	23fc58c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc552:	f1a6 0308 	sub.w	r3, r6, #8
 23fc556:	2b05      	cmp	r3, #5
 23fc558:	d818      	bhi.n	23fc58c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc55a:	e8df f003 	tbb	[pc, r3]
 23fc55e:	0f0d      	.short	0x0f0d
 23fc560:	15131711 	.word	0x15131711
 23fc564:	2e22      	cmp	r6, #34	; 0x22
 23fc566:	d001      	beq.n	23fc56c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc568:	2e5c      	cmp	r6, #92	; 0x5c
 23fc56a:	d10f      	bne.n	23fc58c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc56c:	4631      	mov	r1, r6
                write('b');
 23fc56e:	4620      	mov	r0, r4
 23fc570:	f7ff fecd 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc574:	463d      	mov	r5, r7
    while (s != end) {
 23fc576:	e7cf      	b.n	23fc518 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc578:	2162      	movs	r1, #98	; 0x62
 23fc57a:	e7f8      	b.n	23fc56e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc57c:	2174      	movs	r1, #116	; 0x74
 23fc57e:	e7f6      	b.n	23fc56e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc580:	216e      	movs	r1, #110	; 0x6e
 23fc582:	e7f4      	b.n	23fc56e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc584:	2166      	movs	r1, #102	; 0x66
 23fc586:	e7f2      	b.n	23fc56e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc588:	2172      	movs	r1, #114	; 0x72
 23fc58a:	e7f0      	b.n	23fc56e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc58c:	6823      	ldr	r3, [r4, #0]
 23fc58e:	4632      	mov	r2, r6
 23fc590:	4649      	mov	r1, r9
 23fc592:	4620      	mov	r0, r4
 23fc594:	68db      	ldr	r3, [r3, #12]
 23fc596:	4798      	blx	r3
                break;
 23fc598:	e7ec      	b.n	23fc574 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc59a:	42bd      	cmp	r5, r7
 23fc59c:	d005      	beq.n	23fc5aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc59e:	6823      	ldr	r3, [r4, #0]
 23fc5a0:	4629      	mov	r1, r5
 23fc5a2:	4620      	mov	r0, r4
 23fc5a4:	689b      	ldr	r3, [r3, #8]
 23fc5a6:	1b7a      	subs	r2, r7, r5
 23fc5a8:	4798      	blx	r3
    }
    write('"');
 23fc5aa:	2122      	movs	r1, #34	; 0x22
 23fc5ac:	4620      	mov	r0, r4
 23fc5ae:	f7ff feae 	bl	23fc30e <_ZN5spark10JSONWriter5writeEc>
}
 23fc5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc5b6:	bf00      	nop
 23fc5b8:	023ff9e7 	.word	0x023ff9e7

023fc5bc <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc5bc:	b513      	push	{r0, r1, r4, lr}
 23fc5be:	4604      	mov	r4, r0
 23fc5c0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc5c4:	f7ff ff5e 	bl	23fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc5c8:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc5cc:	4620      	mov	r0, r4
 23fc5ce:	f7ff ff97 	bl	23fc500 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc5d2:	2302      	movs	r3, #2
}
 23fc5d4:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc5d6:	7123      	strb	r3, [r4, #4]
}
 23fc5d8:	b002      	add	sp, #8
 23fc5da:	bd10      	pop	{r4, pc}

023fc5dc <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc5dc:	b513      	push	{r0, r1, r4, lr}
 23fc5de:	4604      	mov	r4, r0
 23fc5e0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc5e4:	f7ff ff4e 	bl	23fc484 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc5e8:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc5ec:	4620      	mov	r0, r4
 23fc5ee:	f7ff ff87 	bl	23fc500 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc5f2:	2301      	movs	r3, #1
}
 23fc5f4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc5f6:	7123      	strb	r3, [r4, #4]
}
 23fc5f8:	b002      	add	sp, #8
 23fc5fa:	bd10      	pop	{r4, pc}

023fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fc5fc:	b510      	push	{r4, lr}
 23fc5fe:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fc600:	6800      	ldr	r0, [r0, #0]
 23fc602:	b108      	cbz	r0, 23fc608 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fc604:	f7ff fe5d 	bl	23fc2c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fc608:	4620      	mov	r0, r4
 23fc60a:	bd10      	pop	{r4, pc}

023fc60c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc60c:	7441      	strb	r1, [r0, #17]
}
 23fc60e:	4770      	bx	lr

023fc610 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc610:	4770      	bx	lr

023fc612 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc612:	4770      	bx	lr

023fc614 <_ZN9USBSerial4readEv>:
{
 23fc614:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc616:	2100      	movs	r1, #0
 23fc618:	7c00      	ldrb	r0, [r0, #16]
 23fc61a:	f7ff f985 	bl	23fb928 <HAL_USB_USART_Receive_Data>
}
 23fc61e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc622:	bd08      	pop	{r3, pc}

023fc624 <_ZN9USBSerial4peekEv>:
{
 23fc624:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc626:	2101      	movs	r1, #1
 23fc628:	7c00      	ldrb	r0, [r0, #16]
 23fc62a:	f7ff f97d 	bl	23fb928 <HAL_USB_USART_Receive_Data>
}
 23fc62e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc632:	bd08      	pop	{r3, pc}

023fc634 <_ZN9USBSerial17availableForWriteEv>:
{
 23fc634:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc636:	7c00      	ldrb	r0, [r0, #16]
 23fc638:	f7ff f968 	bl	23fb90c <HAL_USB_USART_Available_Data_For_Write>
}
 23fc63c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc640:	bd08      	pop	{r3, pc}

023fc642 <_ZN9USBSerial9availableEv>:
{
 23fc642:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc644:	7c00      	ldrb	r0, [r0, #16]
 23fc646:	f7ff f953 	bl	23fb8f0 <HAL_USB_USART_Available_Data>
}
 23fc64a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc64e:	bd08      	pop	{r3, pc}

023fc650 <_ZN9USBSerial5writeEh>:
{
 23fc650:	b513      	push	{r0, r1, r4, lr}
 23fc652:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc654:	7c00      	ldrb	r0, [r0, #16]
{
 23fc656:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc658:	f7ff f958 	bl	23fb90c <HAL_USB_USART_Available_Data_For_Write>
 23fc65c:	2800      	cmp	r0, #0
 23fc65e:	9901      	ldr	r1, [sp, #4]
 23fc660:	dc01      	bgt.n	23fc666 <_ZN9USBSerial5writeEh+0x16>
 23fc662:	7c60      	ldrb	r0, [r4, #17]
 23fc664:	b120      	cbz	r0, 23fc670 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc666:	7c20      	ldrb	r0, [r4, #16]
 23fc668:	f7ff f96c 	bl	23fb944 <HAL_USB_USART_Send_Data>
 23fc66c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc670:	b002      	add	sp, #8
 23fc672:	bd10      	pop	{r4, pc}

023fc674 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc674:	7c00      	ldrb	r0, [r0, #16]
 23fc676:	f7ff b973 	b.w	23fb960 <HAL_USB_USART_Flush_Data>

023fc67a <_ZN9USBSerialD0Ev>:
 23fc67a:	b510      	push	{r4, lr}
 23fc67c:	4604      	mov	r4, r0
 23fc67e:	2114      	movs	r1, #20
 23fc680:	f7fe fed1 	bl	23fb426 <_ZdlPvj>
 23fc684:	4620      	mov	r0, r4
 23fc686:	bd10      	pop	{r4, pc}

023fc688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc688:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc68a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc68e:	4604      	mov	r4, r0
 23fc690:	4608      	mov	r0, r1
 23fc692:	2100      	movs	r1, #0
 23fc694:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc698:	4b04      	ldr	r3, [pc, #16]	; (23fc6ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc69a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc69c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc69e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc6a0:	4611      	mov	r1, r2
  _blocking = true;
 23fc6a2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc6a4:	f7ff f8fa 	bl	23fb89c <HAL_USB_USART_Init>
}
 23fc6a8:	4620      	mov	r0, r4
 23fc6aa:	bd10      	pop	{r4, pc}
 23fc6ac:	023ff9f8 	.word	0x023ff9f8

023fc6b0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc6b0:	2200      	movs	r2, #0
 23fc6b2:	7c00      	ldrb	r0, [r0, #16]
 23fc6b4:	f7ff b900 	b.w	23fb8b8 <HAL_USB_USART_Begin>

023fc6b8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fc6b8:	7c00      	ldrb	r0, [r0, #16]
 23fc6ba:	f7ff b90b 	b.w	23fb8d4 <HAL_USB_USART_End>

023fc6be <_Z19acquireSerialBufferv>:
{
 23fc6be:	b510      	push	{r4, lr}
 23fc6c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc6c2:	2214      	movs	r2, #20
 23fc6c4:	2100      	movs	r1, #0
 23fc6c6:	f002 ff5a 	bl	23ff57e <memset>
}
 23fc6ca:	4620      	mov	r0, r4
 23fc6cc:	bd10      	pop	{r4, pc}
	...

023fc6d0 <_Z16_fetch_usbserialv>:
{
 23fc6d0:	b510      	push	{r4, lr}
 23fc6d2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc6d4:	a803      	add	r0, sp, #12
 23fc6d6:	f7ff fff2 	bl	23fc6be <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc6da:	4c0c      	ldr	r4, [pc, #48]	; (23fc70c <_Z16_fetch_usbserialv+0x3c>)
 23fc6dc:	e8d4 1f8f 	ldab	r1, [r4]
 23fc6e0:	f011 0101 	ands.w	r1, r1, #1
 23fc6e4:	d10f      	bne.n	23fc706 <_Z16_fetch_usbserialv+0x36>
 23fc6e6:	4620      	mov	r0, r4
 23fc6e8:	9101      	str	r1, [sp, #4]
 23fc6ea:	f7fe feab 	bl	23fb444 <__cxa_guard_acquire>
 23fc6ee:	9901      	ldr	r1, [sp, #4]
 23fc6f0:	b148      	cbz	r0, 23fc706 <_Z16_fetch_usbserialv+0x36>
 23fc6f2:	aa03      	add	r2, sp, #12
 23fc6f4:	4806      	ldr	r0, [pc, #24]	; (23fc710 <_Z16_fetch_usbserialv+0x40>)
 23fc6f6:	f7ff ffc7 	bl	23fc688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc6fa:	4620      	mov	r0, r4
 23fc6fc:	f7fe fea7 	bl	23fb44e <__cxa_guard_release>
 23fc700:	4804      	ldr	r0, [pc, #16]	; (23fc714 <_Z16_fetch_usbserialv+0x44>)
 23fc702:	f002 fef7 	bl	23ff4f4 <atexit>
	return _usbserial;
}
 23fc706:	4802      	ldr	r0, [pc, #8]	; (23fc710 <_Z16_fetch_usbserialv+0x40>)
 23fc708:	b008      	add	sp, #32
 23fc70a:	bd10      	pop	{r4, pc}
 23fc70c:	1007ae74 	.word	0x1007ae74
 23fc710:	1007ae78 	.word	0x1007ae78
 23fc714:	023fc611 	.word	0x023fc611

023fc718 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fc718:	4770      	bx	lr

023fc71a <_ZN9IPAddressD0Ev>:
 23fc71a:	b510      	push	{r4, lr}
 23fc71c:	4604      	mov	r4, r0
 23fc71e:	2118      	movs	r1, #24
 23fc720:	f7fe fe81 	bl	23fb426 <_ZdlPvj>
 23fc724:	4620      	mov	r0, r4
 23fc726:	bd10      	pop	{r4, pc}

023fc728 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc728:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc72a:	7d03      	ldrb	r3, [r0, #20]
{
 23fc72c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc72e:	2b06      	cmp	r3, #6
 23fc730:	f04f 0400 	mov.w	r4, #0
{
 23fc734:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc736:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc73a:	d012      	beq.n	23fc762 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc73c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc740:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc744:	220a      	movs	r2, #10
 23fc746:	4630      	mov	r0, r6
 23fc748:	f001 f92b 	bl	23fd9a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc74c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc74e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc750:	d019      	beq.n	23fc786 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc752:	2c00      	cmp	r4, #0
 23fc754:	d0f4      	beq.n	23fc740 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc756:	212e      	movs	r1, #46	; 0x2e
 23fc758:	4630      	mov	r0, r6
 23fc75a:	f001 f91f 	bl	23fd99c <_ZN5Print5printEc>
 23fc75e:	4404      	add	r4, r0
 23fc760:	e7ee      	b.n	23fc740 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc762:	232f      	movs	r3, #47	; 0x2f
 23fc764:	466a      	mov	r2, sp
 23fc766:	4639      	mov	r1, r7
 23fc768:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc76a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc76e:	f7ff f991 	bl	23fba94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc772:	4668      	mov	r0, sp
 23fc774:	f7fe fe2e 	bl	23fb3d4 <strlen>
 23fc778:	6833      	ldr	r3, [r6, #0]
 23fc77a:	4602      	mov	r2, r0
 23fc77c:	4669      	mov	r1, sp
 23fc77e:	4630      	mov	r0, r6
 23fc780:	68db      	ldr	r3, [r3, #12]
 23fc782:	4798      	blx	r3
 23fc784:	4604      	mov	r4, r0
    }
    return n;
}
 23fc786:	4620      	mov	r0, r4
 23fc788:	b00d      	add	sp, #52	; 0x34
 23fc78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc78c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc78c:	b510      	push	{r4, lr}
 23fc78e:	4604      	mov	r4, r0
 23fc790:	4b04      	ldr	r3, [pc, #16]	; (23fc7a4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc792:	2211      	movs	r2, #17
 23fc794:	2100      	movs	r1, #0
 23fc796:	f840 3b04 	str.w	r3, [r0], #4
 23fc79a:	f002 fef0 	bl	23ff57e <memset>
}
 23fc79e:	4620      	mov	r0, r4
 23fc7a0:	bd10      	pop	{r4, pc}
 23fc7a2:	bf00      	nop
 23fc7a4:	023ffa28 	.word	0x023ffa28

023fc7a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc7a8:	4603      	mov	r3, r0
 23fc7aa:	4a07      	ldr	r2, [pc, #28]	; (23fc7c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc7ac:	b510      	push	{r4, lr}
 23fc7ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc7b2:	f101 0210 	add.w	r2, r1, #16
 23fc7b6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc7ba:	4291      	cmp	r1, r2
 23fc7bc:	f843 4b04 	str.w	r4, [r3], #4
 23fc7c0:	d1f9      	bne.n	23fc7b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc7c2:	780a      	ldrb	r2, [r1, #0]
 23fc7c4:	701a      	strb	r2, [r3, #0]
}
 23fc7c6:	bd10      	pop	{r4, pc}
 23fc7c8:	023ffa28 	.word	0x023ffa28

023fc7cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc7cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc7ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc7d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc7d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc7da:	2304      	movs	r3, #4
 23fc7dc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc7e0:	6041      	str	r1, [r0, #4]
 23fc7e2:	7503      	strb	r3, [r0, #20]
}
 23fc7e4:	bd10      	pop	{r4, pc}
	...

023fc7e8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc7e8:	b507      	push	{r0, r1, r2, lr}
 23fc7ea:	4b06      	ldr	r3, [pc, #24]	; (23fc804 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc7ec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc7ee:	78cb      	ldrb	r3, [r1, #3]
 23fc7f0:	9300      	str	r3, [sp, #0]
 23fc7f2:	788b      	ldrb	r3, [r1, #2]
 23fc7f4:	784a      	ldrb	r2, [r1, #1]
 23fc7f6:	7809      	ldrb	r1, [r1, #0]
 23fc7f8:	f7ff ffe8 	bl	23fc7cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc7fc:	b003      	add	sp, #12
 23fc7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc802:	bf00      	nop
 23fc804:	023ffa28 	.word	0x023ffa28

023fc808 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fc808:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fc80a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fc80c:	4604      	mov	r4, r0
      if (_M_manager)
 23fc80e:	b113      	cbz	r3, 23fc816 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc810:	2203      	movs	r2, #3
 23fc812:	4601      	mov	r1, r0
 23fc814:	4798      	blx	r3
    }
 23fc816:	4620      	mov	r0, r4
 23fc818:	bd10      	pop	{r4, pc}

023fc81a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fc81a:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc81c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fc81e:	460b      	mov	r3, r1
 23fc820:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc822:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fc826:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fc82a:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fc82e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fc832:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fc836:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fc83a:	b002      	add	sp, #8
 23fc83c:	bd10      	pop	{r4, pc}
	...

023fc840 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fc840:	4b01      	ldr	r3, [pc, #4]	; (23fc848 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fc842:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fc844:	4770      	bx	lr
 23fc846:	bf00      	nop
 23fc848:	1007ad88 	.word	0x1007ad88

023fc84c <serialEventRun>:
{
 23fc84c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fc84e:	4b0f      	ldr	r3, [pc, #60]	; (23fc88c <serialEventRun+0x40>)
 23fc850:	b143      	cbz	r3, 23fc864 <serialEventRun+0x18>
 23fc852:	f7ff ff3d 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fc856:	6803      	ldr	r3, [r0, #0]
 23fc858:	691b      	ldr	r3, [r3, #16]
 23fc85a:	4798      	blx	r3
 23fc85c:	2800      	cmp	r0, #0
 23fc85e:	dd01      	ble.n	23fc864 <serialEventRun+0x18>
        serialEvent();
 23fc860:	e000      	b.n	23fc864 <serialEventRun+0x18>
 23fc862:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fc864:	4b0a      	ldr	r3, [pc, #40]	; (23fc890 <serialEventRun+0x44>)
 23fc866:	b143      	cbz	r3, 23fc87a <serialEventRun+0x2e>
 23fc868:	f002 fc9a 	bl	23ff1a0 <_Z22__fetch_global_Serial1v>
 23fc86c:	6803      	ldr	r3, [r0, #0]
 23fc86e:	691b      	ldr	r3, [r3, #16]
 23fc870:	4798      	blx	r3
 23fc872:	2800      	cmp	r0, #0
 23fc874:	dd01      	ble.n	23fc87a <serialEventRun+0x2e>
        serialEvent1();
 23fc876:	e000      	b.n	23fc87a <serialEventRun+0x2e>
 23fc878:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fc87a:	4b06      	ldr	r3, [pc, #24]	; (23fc894 <serialEventRun+0x48>)
 23fc87c:	b10b      	cbz	r3, 23fc882 <serialEventRun+0x36>
 23fc87e:	f002 fcd5 	bl	23ff22c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fc882:	4b05      	ldr	r3, [pc, #20]	; (23fc898 <serialEventRun+0x4c>)
 23fc884:	b10b      	cbz	r3, 23fc88a <serialEventRun+0x3e>
 23fc886:	f002 fd07 	bl	23ff298 <_Z15serialEventRun3v>
}
 23fc88a:	bd08      	pop	{r3, pc}
	...

023fc89c <_post_loop>:
{
 23fc89c:	b508      	push	{r3, lr}
	serialEventRun();
 23fc89e:	f7ff ffd5 	bl	23fc84c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fc8a2:	f7ff fa0f 	bl	23fbcc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fc8a6:	4b01      	ldr	r3, [pc, #4]	; (23fc8ac <_post_loop+0x10>)
 23fc8a8:	6018      	str	r0, [r3, #0]
}
 23fc8aa:	bd08      	pop	{r3, pc}
 23fc8ac:	1007af08 	.word	0x1007af08

023fc8b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc8b0:	4805      	ldr	r0, [pc, #20]	; (23fc8c8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fc8b2:	4a06      	ldr	r2, [pc, #24]	; (23fc8cc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fc8b4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc8b6:	1a12      	subs	r2, r2, r0
 23fc8b8:	4905      	ldr	r1, [pc, #20]	; (23fc8d0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fc8ba:	f002 fe39 	bl	23ff530 <memcpy>
    __backup_sram_signature = signature;
 23fc8be:	4b05      	ldr	r3, [pc, #20]	; (23fc8d4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fc8c0:	4a05      	ldr	r2, [pc, #20]	; (23fc8d8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fc8c2:	601a      	str	r2, [r3, #0]
}
 23fc8c4:	bd08      	pop	{r3, pc}
 23fc8c6:	bf00      	nop
 23fc8c8:	1007b400 	.word	0x1007b400
 23fc8cc:	1007b404 	.word	0x1007b404
 23fc8d0:	085ffd44 	.word	0x085ffd44
 23fc8d4:	1007b400 	.word	0x1007b400
 23fc8d8:	9a271c1e 	.word	0x9a271c1e

023fc8dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc8dc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fc8de:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc8e0:	461a      	mov	r2, r3
 23fc8e2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc8e6:	9300      	str	r3, [sp, #0]
 23fc8e8:	f7ff fb2e 	bl	23fbf48 <system_ctrl_set_result>
}
 23fc8ec:	b003      	add	sp, #12
 23fc8ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc8f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fc8f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fc8f6:	8843      	ldrh	r3, [r0, #2]
 23fc8f8:	2b0a      	cmp	r3, #10
 23fc8fa:	d008      	beq.n	23fc90e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fc8fc:	2b50      	cmp	r3, #80	; 0x50
 23fc8fe:	d10b      	bne.n	23fc918 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fc900:	4b09      	ldr	r3, [pc, #36]	; (23fc928 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fc902:	681b      	ldr	r3, [r3, #0]
 23fc904:	b14b      	cbz	r3, 23fc91a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fc906:	b003      	add	sp, #12
 23fc908:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fc90c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fc90e:	f7ff ffe5 	bl	23fc8dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fc912:	b003      	add	sp, #12
 23fc914:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc918:	2300      	movs	r3, #0
 23fc91a:	461a      	mov	r2, r3
 23fc91c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc920:	9300      	str	r3, [sp, #0]
 23fc922:	f7ff fb11 	bl	23fbf48 <system_ctrl_set_result>
}
 23fc926:	e7f4      	b.n	23fc912 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fc928:	1007ae90 	.word	0x1007ae90

023fc92c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc92c:	2100      	movs	r1, #0
{
 23fc92e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc930:	4811      	ldr	r0, [pc, #68]	; (23fc978 <module_user_init_hook+0x4c>)
 23fc932:	f7ff fb79 	bl	23fc028 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fc936:	4b11      	ldr	r3, [pc, #68]	; (23fc97c <module_user_init_hook+0x50>)
 23fc938:	681a      	ldr	r2, [r3, #0]
 23fc93a:	4b11      	ldr	r3, [pc, #68]	; (23fc980 <module_user_init_hook+0x54>)
 23fc93c:	429a      	cmp	r2, r3
 23fc93e:	bf0c      	ite	eq
 23fc940:	2201      	moveq	r2, #1
 23fc942:	2200      	movne	r2, #0
 23fc944:	4b0f      	ldr	r3, [pc, #60]	; (23fc984 <module_user_init_hook+0x58>)
 23fc946:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fc948:	d001      	beq.n	23fc94e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fc94a:	f7ff ffb1 	bl	23fc8b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fc94e:	f7ff f99d 	bl	23fbc8c <HAL_RNG_GetRandomNumber>
 23fc952:	4604      	mov	r4, r0
    srand(seed);
 23fc954:	f002 fe1c 	bl	23ff590 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fc958:	4b0b      	ldr	r3, [pc, #44]	; (23fc988 <module_user_init_hook+0x5c>)
 23fc95a:	b113      	cbz	r3, 23fc962 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fc95c:	4620      	mov	r0, r4
 23fc95e:	e000      	b.n	23fc962 <module_user_init_hook+0x36>
 23fc960:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fc962:	2100      	movs	r1, #0
 23fc964:	4808      	ldr	r0, [pc, #32]	; (23fc988 <module_user_init_hook+0x5c>)
 23fc966:	f7ff fa1d 	bl	23fbda4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fc96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fc96e:	2100      	movs	r1, #0
 23fc970:	4806      	ldr	r0, [pc, #24]	; (23fc98c <module_user_init_hook+0x60>)
 23fc972:	f7ff badb 	b.w	23fbf2c <system_ctrl_set_app_request_handler>
 23fc976:	bf00      	nop
 23fc978:	023fc841 	.word	0x023fc841
 23fc97c:	1007b400 	.word	0x1007b400
 23fc980:	9a271c1e 	.word	0x9a271c1e
 23fc984:	1007ae8c 	.word	0x1007ae8c
 23fc988:	00000000 	.word	0x00000000
 23fc98c:	023fc8f5 	.word	0x023fc8f5

023fc990 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fc990:	2200      	movs	r2, #0
 23fc992:	4b01      	ldr	r3, [pc, #4]	; (23fc998 <_GLOBAL__sub_I_RGB+0x8>)
 23fc994:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fc996:	4770      	bx	lr
 23fc998:	1007ae94 	.word	0x1007ae94

023fc99c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc99c:	4b02      	ldr	r3, [pc, #8]	; (23fc9a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc99e:	681a      	ldr	r2, [r3, #0]
 23fc9a0:	4b02      	ldr	r3, [pc, #8]	; (23fc9ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc9a2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc9a4:	4770      	bx	lr
 23fc9a6:	bf00      	nop
 23fc9a8:	1007ad7c 	.word	0x1007ad7c
 23fc9ac:	1007aea4 	.word	0x1007aea4

023fc9b0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc9b0:	6880      	ldr	r0, [r0, #8]
 23fc9b2:	6803      	ldr	r3, [r0, #0]
 23fc9b4:	68db      	ldr	r3, [r3, #12]
 23fc9b6:	4718      	bx	r3

023fc9b8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc9b8:	4770      	bx	lr

023fc9ba <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc9ba:	4608      	mov	r0, r1
 23fc9bc:	b111      	cbz	r1, 23fc9c4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc9be:	680b      	ldr	r3, [r1, #0]
 23fc9c0:	685b      	ldr	r3, [r3, #4]
 23fc9c2:	4718      	bx	r3
}
 23fc9c4:	4770      	bx	lr

023fc9c6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc9c6:	4770      	bx	lr

023fc9c8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc9c8:	4770      	bx	lr

023fc9ca <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc9ca:	4770      	bx	lr

023fc9cc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc9cc:	4770      	bx	lr

023fc9ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc9ce:	b538      	push	{r3, r4, r5, lr}
 23fc9d0:	4604      	mov	r4, r0
 23fc9d2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc9d4:	6800      	ldr	r0, [r0, #0]
 23fc9d6:	212e      	movs	r1, #46	; 0x2e
 23fc9d8:	f002 fe15 	bl	23ff606 <strchrnul>
    size = s - category;
 23fc9dc:	6823      	ldr	r3, [r4, #0]
 23fc9de:	1ac3      	subs	r3, r0, r3
 23fc9e0:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc9e2:	b123      	cbz	r3, 23fc9ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc9e4:	7803      	ldrb	r3, [r0, #0]
 23fc9e6:	b103      	cbz	r3, 23fc9ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc9e8:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fc9ea:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc9ec:	6020      	str	r0, [r4, #0]
}
 23fc9ee:	4618      	mov	r0, r3
 23fc9f0:	bd38      	pop	{r3, r4, r5, pc}

023fc9f2 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc9f2:	b510      	push	{r4, lr}
 23fc9f4:	4604      	mov	r4, r0
 23fc9f6:	210c      	movs	r1, #12
 23fc9f8:	f7fe fd15 	bl	23fb426 <_ZdlPvj>
 23fc9fc:	4620      	mov	r0, r4
 23fc9fe:	bd10      	pop	{r4, pc}

023fca00 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fca00:	b510      	push	{r4, lr}
 23fca02:	4604      	mov	r4, r0
 23fca04:	2104      	movs	r1, #4
 23fca06:	f7fe fd0e 	bl	23fb426 <_ZdlPvj>
 23fca0a:	4620      	mov	r0, r4
 23fca0c:	bd10      	pop	{r4, pc}

023fca0e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fca0e:	b510      	push	{r4, lr}
 23fca10:	4604      	mov	r4, r0
 23fca12:	2104      	movs	r1, #4
 23fca14:	f7fe fd07 	bl	23fb426 <_ZdlPvj>
 23fca18:	4620      	mov	r0, r4
 23fca1a:	bd10      	pop	{r4, pc}

023fca1c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fca1c:	f7ff b864 	b.w	23fbae8 <os_mutex_recursive_lock>

023fca20 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fca20:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fca22:	f7fe fccd 	bl	23fb3c0 <strcmp>
}
 23fca26:	fab0 f080 	clz	r0, r0
 23fca2a:	0940      	lsrs	r0, r0, #5
 23fca2c:	bd08      	pop	{r3, pc}

023fca2e <__tcf_1>:
 23fca2e:	4770      	bx	lr

023fca30 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fca30:	b510      	push	{r4, lr}
 23fca32:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fca34:	f7ff fe4c 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fca38:	4284      	cmp	r4, r0
 23fca3a:	d105      	bne.n	23fca48 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fca3c:	f7ff fe48 	bl	23fc6d0 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fca40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fca44:	f7ff be38 	b.w	23fc6b8 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fca48:	f002 fbaa 	bl	23ff1a0 <_Z22__fetch_global_Serial1v>
 23fca4c:	4284      	cmp	r4, r0
 23fca4e:	d105      	bne.n	23fca5c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fca50:	f002 fba6 	bl	23ff1a0 <_Z22__fetch_global_Serial1v>
}
 23fca54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fca58:	f002 ba69 	b.w	23fef2e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fca5c:	b12c      	cbz	r4, 23fca6a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fca5e:	6823      	ldr	r3, [r4, #0]
 23fca60:	4620      	mov	r0, r4
}
 23fca62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fca66:	685b      	ldr	r3, [r3, #4]
 23fca68:	4718      	bx	r3
 23fca6a:	bd10      	pop	{r4, pc}

023fca6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fca6c:	680b      	ldr	r3, [r1, #0]
 23fca6e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fca70:	684b      	ldr	r3, [r1, #4]
 23fca72:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fca74:	b113      	cbz	r3, 23fca7c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fca76:	685a      	ldr	r2, [r3, #4]
 23fca78:	3201      	adds	r2, #1
 23fca7a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fca7c:	4770      	bx	lr

023fca7e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fca7e:	b513      	push	{r0, r1, r4, lr}
 23fca80:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fca82:	4608      	mov	r0, r1
 23fca84:	9101      	str	r1, [sp, #4]
 23fca86:	f7fe fca5 	bl	23fb3d4 <strlen>
 23fca8a:	4602      	mov	r2, r0
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	9901      	ldr	r1, [sp, #4]
}
 23fca90:	b002      	add	sp, #8
 23fca92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fca96:	f7ff bda1 	b.w	23fc5dc <_ZN5spark10JSONWriter5valueEPKcj>

023fca9a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fca9a:	b513      	push	{r0, r1, r4, lr}
 23fca9c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fca9e:	4608      	mov	r0, r1
 23fcaa0:	9101      	str	r1, [sp, #4]
 23fcaa2:	f7fe fc97 	bl	23fb3d4 <strlen>
 23fcaa6:	4602      	mov	r2, r0
 23fcaa8:	4620      	mov	r0, r4
 23fcaaa:	6823      	ldr	r3, [r4, #0]
 23fcaac:	9901      	ldr	r1, [sp, #4]
 23fcaae:	68db      	ldr	r3, [r3, #12]
}
 23fcab0:	b002      	add	sp, #8
 23fcab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fcab6:	4718      	bx	r3

023fcab8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fcab8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcaba:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fcabc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcac0:	2201      	movs	r2, #1
 23fcac2:	68db      	ldr	r3, [r3, #12]
 23fcac4:	f10d 0107 	add.w	r1, sp, #7
 23fcac8:	4798      	blx	r3
}
 23fcaca:	b003      	add	sp, #12
 23fcacc:	f85d fb04 	ldr.w	pc, [sp], #4

023fcad0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fcad0:	680a      	ldr	r2, [r1, #0]
 23fcad2:	b510      	push	{r4, lr}
 23fcad4:	6002      	str	r2, [r0, #0]
 23fcad6:	684a      	ldr	r2, [r1, #4]
 23fcad8:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fcada:	2200      	movs	r2, #0
 23fcadc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fcae0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcae2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcae4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcae6:	6084      	str	r4, [r0, #8]
 23fcae8:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcaea:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcaec:	60c4      	str	r4, [r0, #12]
 23fcaee:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcaf0:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcaf2:	6104      	str	r4, [r0, #16]
 23fcaf4:	bd10      	pop	{r4, pc}
	...

023fcaf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fcafc:	f04f 0a14 	mov.w	sl, #20
 23fcb00:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fcb04:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fcb06:	4645      	mov	r5, r8
 23fcb08:	fb0a f404 	mul.w	r4, sl, r4
 23fcb0c:	9300      	str	r3, [sp, #0]
 23fcb0e:	4b17      	ldr	r3, [pc, #92]	; (23fcb6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcb10:	10a4      	asrs	r4, r4, #2
 23fcb12:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fcb14:	2c00      	cmp	r4, #0
 23fcb16:	dd21      	ble.n	23fcb5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fcb18:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fcb1a:	fb0a f006 	mul.w	r0, sl, r6
 23fcb1e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fcb22:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fcb26:	463a      	mov	r2, r7
 23fcb28:	455f      	cmp	r7, fp
 23fcb2a:	bf28      	it	cs
 23fcb2c:	465a      	movcs	r2, fp
 23fcb2e:	5828      	ldr	r0, [r5, r0]
 23fcb30:	9101      	str	r1, [sp, #4]
 23fcb32:	f002 fd7a 	bl	23ff62a <strncmp>
                if (cmp == 0) {
 23fcb36:	2800      	cmp	r0, #0
 23fcb38:	f04f 0301 	mov.w	r3, #1
 23fcb3c:	9901      	ldr	r1, [sp, #4]
 23fcb3e:	d10b      	bne.n	23fcb58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fcb40:	455f      	cmp	r7, fp
 23fcb42:	d103      	bne.n	23fcb4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fcb44:	9a00      	ldr	r2, [sp, #0]
 23fcb46:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcb48:	4634      	mov	r4, r6
 23fcb4a:	e7e3      	b.n	23fcb14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fcb4c:	d9fc      	bls.n	23fcb48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fcb4e:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fcb50:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fcb54:	3e01      	subs	r6, #1
 23fcb56:	e7f7      	b.n	23fcb48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fcb58:	dbf9      	blt.n	23fcb4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fcb5a:	e7f5      	b.n	23fcb48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fcb5c:	eba5 0508 	sub.w	r5, r5, r8
}
 23fcb60:	4802      	ldr	r0, [pc, #8]	; (23fcb6c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcb62:	10ad      	asrs	r5, r5, #2
 23fcb64:	4368      	muls	r0, r5
 23fcb66:	b003      	add	sp, #12
 23fcb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcb6c:	cccccccd 	.word	0xcccccccd

023fcb70 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcb70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fcb72:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fcb74:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcb76:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fcb78:	b303      	cbz	r3, 23fcbbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fcb7a:	b1f9      	cbz	r1, 23fcbbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fcb7c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fcb7e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fcb82:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fcb84:	a903      	add	r1, sp, #12
 23fcb86:	a801      	add	r0, sp, #4
 23fcb88:	f7ff ff21 	bl	23fc9ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcb8c:	4601      	mov	r1, r0
 23fcb8e:	b1a8      	cbz	r0, 23fcbbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcb90:	f10d 030b 	add.w	r3, sp, #11
 23fcb94:	4620      	mov	r0, r4
 23fcb96:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fcb98:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcb9c:	f7ff ffac 	bl	23fcaf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fcba0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fcba4:	b153      	cbz	r3, 23fcbbc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fcba6:	6823      	ldr	r3, [r4, #0]
 23fcba8:	2414      	movs	r4, #20
 23fcbaa:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fcbae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fcbb2:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fcbb4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fcbb6:	bfa8      	it	ge
 23fcbb8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fcbba:	e7e3      	b.n	23fcb84 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fcbbc:	4628      	mov	r0, r5
 23fcbbe:	b004      	add	sp, #16
 23fcbc0:	bd70      	pop	{r4, r5, r6, pc}

023fcbc2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fcbc2:	b40e      	push	{r1, r2, r3}
 23fcbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcbc6:	b08c      	sub	sp, #48	; 0x30
 23fcbc8:	af00      	add	r7, sp, #0
 23fcbca:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fcbce:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcbd2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbd4:	462b      	mov	r3, r5
 23fcbd6:	2120      	movs	r1, #32
 23fcbd8:	f107 0010 	add.w	r0, r7, #16
 23fcbdc:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fcbde:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbe0:	f7ff f9ea 	bl	23fbfb8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fcbe4:	281f      	cmp	r0, #31
 23fcbe6:	687a      	ldr	r2, [r7, #4]
 23fcbe8:	d91a      	bls.n	23fcc20 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fcbea:	f100 0308 	add.w	r3, r0, #8
 23fcbee:	f023 0307 	bic.w	r3, r3, #7
        }
 23fcbf2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fcbf4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbf8:	1c41      	adds	r1, r0, #1
 23fcbfa:	462b      	mov	r3, r5
 23fcbfc:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fcbfe:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc00:	f7ff f9da 	bl	23fbfb8 <vsnprintf>
        if (n > 0) {
 23fcc04:	1e02      	subs	r2, r0, #0
 23fcc06:	dd04      	ble.n	23fcc12 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fcc08:	6823      	ldr	r3, [r4, #0]
 23fcc0a:	4669      	mov	r1, sp
 23fcc0c:	4620      	mov	r0, r4
 23fcc0e:	68db      	ldr	r3, [r3, #12]
 23fcc10:	4798      	blx	r3
 23fcc12:	46b5      	mov	sp, r6
}
 23fcc14:	3730      	adds	r7, #48	; 0x30
 23fcc16:	46bd      	mov	sp, r7
 23fcc18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcc1c:	b003      	add	sp, #12
 23fcc1e:	4770      	bx	lr
    } else if (n > 0) {
 23fcc20:	2800      	cmp	r0, #0
 23fcc22:	d0f7      	beq.n	23fcc14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fcc24:	6823      	ldr	r3, [r4, #0]
 23fcc26:	4602      	mov	r2, r0
 23fcc28:	68db      	ldr	r3, [r3, #12]
 23fcc2a:	4620      	mov	r0, r4
 23fcc2c:	f107 0110 	add.w	r1, r7, #16
 23fcc30:	4798      	blx	r3
}
 23fcc32:	e7ef      	b.n	23fcc14 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fcc34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fcc34:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fcc36:	4c08      	ldr	r4, [pc, #32]	; (23fcc58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fcc38:	e8d4 3f8f 	ldab	r3, [r4]
 23fcc3c:	07db      	lsls	r3, r3, #31
 23fcc3e:	d409      	bmi.n	23fcc54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcc40:	4620      	mov	r0, r4
 23fcc42:	f7fe fbff 	bl	23fb444 <__cxa_guard_acquire>
 23fcc46:	b128      	cbz	r0, 23fcc54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcc48:	4620      	mov	r0, r4
 23fcc4a:	f7fe fc00 	bl	23fb44e <__cxa_guard_release>
 23fcc4e:	4803      	ldr	r0, [pc, #12]	; (23fcc5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fcc50:	f002 fc50 	bl	23ff4f4 <atexit>
}
 23fcc54:	4802      	ldr	r0, [pc, #8]	; (23fcc60 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fcc56:	bd10      	pop	{r4, pc}
 23fcc58:	1007aeac 	.word	0x1007aeac
 23fcc5c:	023fc9c7 	.word	0x023fc9c7
 23fcc60:	1007ad80 	.word	0x1007ad80

023fcc64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fcc64:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fcc66:	4c08      	ldr	r4, [pc, #32]	; (23fcc88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fcc68:	e8d4 3f8f 	ldab	r3, [r4]
 23fcc6c:	07db      	lsls	r3, r3, #31
 23fcc6e:	d409      	bmi.n	23fcc84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcc70:	4620      	mov	r0, r4
 23fcc72:	f7fe fbe7 	bl	23fb444 <__cxa_guard_acquire>
 23fcc76:	b128      	cbz	r0, 23fcc84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcc78:	4620      	mov	r0, r4
 23fcc7a:	f7fe fbe8 	bl	23fb44e <__cxa_guard_release>
 23fcc7e:	4803      	ldr	r0, [pc, #12]	; (23fcc8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fcc80:	f002 fc38 	bl	23ff4f4 <atexit>
    return &factory;
}
 23fcc84:	4802      	ldr	r0, [pc, #8]	; (23fcc90 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fcc86:	bd10      	pop	{r4, pc}
 23fcc88:	1007aeb0 	.word	0x1007aeb0
 23fcc8c:	023fca2f 	.word	0x023fca2f
 23fcc90:	1007ad84 	.word	0x1007ad84

023fcc94 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fcc94:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fcc96:	2500      	movs	r5, #0
 23fcc98:	4604      	mov	r4, r0
 23fcc9a:	e9c0 5500 	strd	r5, r5, [r0]
 23fcc9e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fcca2:	6085      	str	r5, [r0, #8]
 23fcca4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fcca6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fccaa:	f7fe ff01 	bl	23fbab0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fccae:	f7ff ffc1 	bl	23fcc34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fccb2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fccb4:	f7ff ffd6 	bl	23fcc64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fccb8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fccba:	6220      	str	r0, [r4, #32]
}
 23fccbc:	4620      	mov	r0, r4
 23fccbe:	bd38      	pop	{r3, r4, r5, pc}

023fccc0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fccc0:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fccc2:	4c0a      	ldr	r4, [pc, #40]	; (23fccec <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fccc4:	e8d4 3f8f 	ldab	r3, [r4]
 23fccc8:	07db      	lsls	r3, r3, #31
 23fccca:	d40c      	bmi.n	23fcce6 <_ZN5spark10LogManager8instanceEv+0x26>
 23fcccc:	4620      	mov	r0, r4
 23fccce:	f7fe fbb9 	bl	23fb444 <__cxa_guard_acquire>
 23fccd2:	b140      	cbz	r0, 23fcce6 <_ZN5spark10LogManager8instanceEv+0x26>
 23fccd4:	4806      	ldr	r0, [pc, #24]	; (23fccf0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fccd6:	f7ff ffdd 	bl	23fcc94 <_ZN5spark10LogManagerC1Ev>
 23fccda:	4620      	mov	r0, r4
 23fccdc:	f7fe fbb7 	bl	23fb44e <__cxa_guard_release>
 23fcce0:	4804      	ldr	r0, [pc, #16]	; (23fccf4 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fcce2:	f002 fc07 	bl	23ff4f4 <atexit>
    return &mgr;
}
 23fcce6:	4802      	ldr	r0, [pc, #8]	; (23fccf0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcce8:	bd10      	pop	{r4, pc}
 23fccea:	bf00      	nop
 23fccec:	1007aea8 	.word	0x1007aea8
 23fccf0:	1007aeb8 	.word	0x1007aeb8
 23fccf4:	023fd235 	.word	0x023fd235

023fccf8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fccf8:	2300      	movs	r3, #0
 23fccfa:	4a02      	ldr	r2, [pc, #8]	; (23fcd04 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fccfc:	4902      	ldr	r1, [pc, #8]	; (23fcd08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fccfe:	4803      	ldr	r0, [pc, #12]	; (23fcd0c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fcd00:	f7ff b842 	b.w	23fbd88 <log_set_callbacks>
 23fcd04:	023fd01d 	.word	0x023fd01d
 23fcd08:	023fcfa9 	.word	0x023fcfa9
 23fcd0c:	023fcf29 	.word	0x023fcf29

023fcd10 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fcd10:	2300      	movs	r3, #0
 23fcd12:	461a      	mov	r2, r3
 23fcd14:	4619      	mov	r1, r3
 23fcd16:	4618      	mov	r0, r3
 23fcd18:	f7ff b836 	b.w	23fbd88 <log_set_callbacks>

023fcd1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fcd1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd1e:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fcd20:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcd22:	4668      	mov	r0, sp
 23fcd24:	f7ff fea2 	bl	23fca6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcd28:	466a      	mov	r2, sp
 23fcd2a:	4629      	mov	r1, r5
 23fcd2c:	4620      	mov	r0, r4
 23fcd2e:	f7ff fb75 	bl	23fc41c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fcd32:	a801      	add	r0, sp, #4
 23fcd34:	f7ff fc62 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcd38:	4620      	mov	r0, r4
 23fcd3a:	b003      	add	sp, #12
 23fcd3c:	bd30      	pop	{r4, r5, pc}

023fcd3e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fcd3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd40:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fcd42:	68cd      	ldr	r5, [r1, #12]
 23fcd44:	4668      	mov	r0, sp
 23fcd46:	f7ff fe91 	bl	23fca6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcd4a:	466a      	mov	r2, sp
 23fcd4c:	4629      	mov	r1, r5
 23fcd4e:	4620      	mov	r0, r4
 23fcd50:	f7ff fb40 	bl	23fc3d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcd54:	a801      	add	r0, sp, #4
 23fcd56:	f7ff fc51 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcd5a:	4620      	mov	r0, r4
 23fcd5c:	b003      	add	sp, #12
 23fcd5e:	bd30      	pop	{r4, r5, pc}

023fcd60 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fcd60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd62:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fcd64:	690d      	ldr	r5, [r1, #16]
 23fcd66:	4668      	mov	r0, sp
 23fcd68:	f7ff fe80 	bl	23fca6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcd6c:	466a      	mov	r2, sp
 23fcd6e:	4629      	mov	r1, r5
 23fcd70:	4620      	mov	r0, r4
 23fcd72:	f7ff fad8 	bl	23fc326 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcd76:	a801      	add	r0, sp, #4
 23fcd78:	f7ff fc40 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcd7c:	4620      	mov	r0, r4
 23fcd7e:	b003      	add	sp, #12
 23fcd80:	bd30      	pop	{r4, r5, pc}
	...

023fcd84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fcd84:	b570      	push	{r4, r5, r6, lr}
 23fcd86:	b08a      	sub	sp, #40	; 0x28
 23fcd88:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fcd8a:	4601      	mov	r1, r0
 23fcd8c:	a804      	add	r0, sp, #16
 23fcd8e:	f7ff ffc5 	bl	23fcd1c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fcd92:	4e14      	ldr	r6, [pc, #80]	; (23fcde4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fcd94:	a804      	add	r0, sp, #16
 23fcd96:	f7ff fb59 	bl	23fc44c <_ZN5spark18JSONObjectIterator4nextEv>
 23fcd9a:	b1e8      	cbz	r0, 23fcdd8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fcd9c:	4668      	mov	r0, sp
 23fcd9e:	a904      	add	r1, sp, #16
 23fcda0:	f7ff ffcd 	bl	23fcd3e <_ZNK5spark18JSONObjectIterator4nameEv>
 23fcda4:	4631      	mov	r1, r6
 23fcda6:	9802      	ldr	r0, [sp, #8]
 23fcda8:	f7ff fe3a 	bl	23fca20 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fcdac:	4604      	mov	r4, r0
 23fcdae:	b110      	cbz	r0, 23fcdb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fcdb0:	1e2c      	subs	r4, r5, #0
 23fcdb2:	bf18      	it	ne
 23fcdb4:	2401      	movne	r4, #1
 23fcdb6:	a801      	add	r0, sp, #4
 23fcdb8:	f7ff fc20 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcdbc:	2c00      	cmp	r4, #0
 23fcdbe:	d0e9      	beq.n	23fcd94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fcdc0:	4668      	mov	r0, sp
 23fcdc2:	a904      	add	r1, sp, #16
 23fcdc4:	f7ff ffcc 	bl	23fcd60 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fcdc8:	4668      	mov	r0, sp
 23fcdca:	f7ff fae2 	bl	23fc392 <_ZNK5spark9JSONValue5toIntEv>
 23fcdce:	6028      	str	r0, [r5, #0]
 23fcdd0:	a801      	add	r0, sp, #4
 23fcdd2:	f7ff fc13 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcdd6:	e7dd      	b.n	23fcd94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fcdd8:	a805      	add	r0, sp, #20
 23fcdda:	f7ff fc0f 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcdde:	b00a      	add	sp, #40	; 0x28
 23fcde0:	bd70      	pop	{r4, r5, r6, pc}
 23fcde2:	bf00      	nop
 23fcde4:	023ffa50 	.word	0x023ffa50

023fcde8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcdea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fcdec:	4913      	ldr	r1, [pc, #76]	; (23fce3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fcdee:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcdf0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fcdf2:	f7fe fae5 	bl	23fb3c0 <strcmp>
 23fcdf6:	b950      	cbnz	r0, 23fce0e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fcdf8:	f7ff fc6a 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fcdfc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fce00:	f7ff fc56 	bl	23fc6b0 <_ZN9USBSerial5beginEl>
}
 23fce04:	b003      	add	sp, #12
 23fce06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fce0a:	f7ff bc61 	b.w	23fc6d0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fce0e:	4620      	mov	r0, r4
 23fce10:	490b      	ldr	r1, [pc, #44]	; (23fce40 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fce12:	f7fe fad5 	bl	23fb3c0 <strcmp>
 23fce16:	b978      	cbnz	r0, 23fce38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fce18:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fce1c:	a901      	add	r1, sp, #4
 23fce1e:	4628      	mov	r0, r5
        int baud = 9600;
 23fce20:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fce22:	f7ff ffaf 	bl	23fcd84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fce26:	f002 f9bb 	bl	23ff1a0 <_Z22__fetch_global_Serial1v>
 23fce2a:	9901      	ldr	r1, [sp, #4]
 23fce2c:	f002 f87c 	bl	23fef28 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fce30:	f002 f9b6 	bl	23ff1a0 <_Z22__fetch_global_Serial1v>
}
 23fce34:	b003      	add	sp, #12
 23fce36:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fce38:	2000      	movs	r0, #0
 23fce3a:	e7fb      	b.n	23fce34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fce3c:	023ffa55 	.word	0x023ffa55
 23fce40:	023ffa5c 	.word	0x023ffa5c

023fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fce44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fce46:	2614      	movs	r6, #20
 23fce48:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fce4c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fce4e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fce52:	42ae      	cmp	r6, r5
 23fce54:	d005      	beq.n	23fce62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fce56:	f105 0008 	add.w	r0, r5, #8
 23fce5a:	f7ff fff3 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fce5e:	3514      	adds	r5, #20
 23fce60:	e7f7      	b.n	23fce52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fce62:	6820      	ldr	r0, [r4, #0]
 23fce64:	f7ff f88c 	bl	23fbf80 <free>
}
 23fce68:	4620      	mov	r0, r4
 23fce6a:	bd70      	pop	{r4, r5, r6, pc}

023fce6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fce6c:	b570      	push	{r4, r5, r6, lr}
 23fce6e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fce70:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fce74:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fce78:	42ae      	cmp	r6, r5
 23fce7a:	d004      	beq.n	23fce86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fce7c:	4628      	mov	r0, r5
 23fce7e:	f002 f8ad 	bl	23fefdc <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fce82:	3510      	adds	r5, #16
 23fce84:	e7f8      	b.n	23fce78 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fce86:	6820      	ldr	r0, [r4, #0]
 23fce88:	f7ff f87a 	bl	23fbf80 <free>
}
 23fce8c:	4620      	mov	r0, r4
 23fce8e:	bd70      	pop	{r4, r5, r6, pc}

023fce90 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fce90:	b510      	push	{r4, lr}
 23fce92:	4604      	mov	r4, r0
 23fce94:	300c      	adds	r0, #12
 23fce96:	f7ff ffd5 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fce9a:	4620      	mov	r0, r4
 23fce9c:	f7ff ffe6 	bl	23fce6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcea0:	4620      	mov	r0, r4
 23fcea2:	bd10      	pop	{r4, pc}

023fcea4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fcea4:	b510      	push	{r4, lr}
 23fcea6:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fcea8:	4b03      	ldr	r3, [pc, #12]	; (23fceb8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fceaa:	f840 3b04 	str.w	r3, [r0], #4
 23fceae:	f7ff ffef 	bl	23fce90 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fceb2:	4620      	mov	r0, r4
 23fceb4:	bd10      	pop	{r4, pc}
 23fceb6:	bf00      	nop
 23fceb8:	023ff93c 	.word	0x023ff93c

023fcebc <_ZN5spark16StreamLogHandlerD0Ev>:
 23fcebc:	b510      	push	{r4, lr}
 23fcebe:	4604      	mov	r4, r0
 23fcec0:	f7ff fff0 	bl	23fcea4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcec4:	4620      	mov	r0, r4
 23fcec6:	2124      	movs	r1, #36	; 0x24
 23fcec8:	f7fe faad 	bl	23fb426 <_ZdlPvj>
 23fcecc:	4620      	mov	r0, r4
 23fcece:	bd10      	pop	{r4, pc}

023fced0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fced0:	b510      	push	{r4, lr}
 23fced2:	4604      	mov	r4, r0
 23fced4:	4b02      	ldr	r3, [pc, #8]	; (23fcee0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fced6:	6003      	str	r3, [r0, #0]
 23fced8:	f7ff ffe4 	bl	23fcea4 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcedc:	4620      	mov	r0, r4
 23fcede:	bd10      	pop	{r4, pc}
 23fcee0:	023ffafc 	.word	0x023ffafc

023fcee4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fcee4:	b510      	push	{r4, lr}
 23fcee6:	4604      	mov	r4, r0
 23fcee8:	f7ff fff2 	bl	23fced0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fceec:	4620      	mov	r0, r4
 23fceee:	2124      	movs	r1, #36	; 0x24
 23fcef0:	f7fe fa99 	bl	23fb426 <_ZdlPvj>
 23fcef4:	4620      	mov	r0, r4
 23fcef6:	bd10      	pop	{r4, pc}

023fcef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fcef8:	2200      	movs	r2, #0
 23fcefa:	e9c0 2200 	strd	r2, r2, [r0]
 23fcefe:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fcf00:	b510      	push	{r4, lr}
 23fcf02:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf04:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcf06:	6004      	str	r4, [r0, #0]
 23fcf08:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf0a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcf0c:	6044      	str	r4, [r0, #4]
 23fcf0e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcf10:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcf12:	6084      	str	r4, [r0, #8]
}
 23fcf14:	bd10      	pop	{r4, pc}

023fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fcf16:	b510      	push	{r4, lr}
 23fcf18:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fcf1a:	6803      	ldr	r3, [r0, #0]
 23fcf1c:	6818      	ldr	r0, [r3, #0]
 23fcf1e:	f7fe fdf1 	bl	23fbb04 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	bd10      	pop	{r4, pc}
	...

023fcf28 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fcf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcf2c:	b087      	sub	sp, #28
 23fcf2e:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fcf30:	4b1c      	ldr	r3, [pc, #112]	; (23fcfa4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fcf32:	4680      	mov	r8, r0
 23fcf34:	685b      	ldr	r3, [r3, #4]
 23fcf36:	4689      	mov	r9, r1
 23fcf38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcf3c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fcf3e:	b96b      	cbnz	r3, 23fcf5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fcf40:	f7ff febe 	bl	23fccc0 <_ZN5spark10LogManager8instanceEv>
 23fcf44:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcf46:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fcf4a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcf4c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fcf4e:	f7ff fd65 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fcf52:	7b23      	ldrb	r3, [r4, #12]
 23fcf54:	b12b      	cbz	r3, 23fcf62 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fcf56:	a805      	add	r0, sp, #20
 23fcf58:	f7ff ffdd 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fcf5c:	b007      	add	sp, #28
 23fcf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fcf62:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fcf64:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fcf68:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fcf6a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcf6e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcf72:	45aa      	cmp	sl, r5
 23fcf74:	d012      	beq.n	23fcf9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fcf76:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fcf7a:	4631      	mov	r1, r6
 23fcf7c:	1d38      	adds	r0, r7, #4
 23fcf7e:	f7ff fdf7 	bl	23fcb70 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcf82:	4581      	cmp	r9, r0
 23fcf84:	d3f5      	bcc.n	23fcf72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fcf86:	9a03      	ldr	r2, [sp, #12]
 23fcf88:	683b      	ldr	r3, [r7, #0]
 23fcf8a:	9200      	str	r2, [sp, #0]
 23fcf8c:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fcf90:	464a      	mov	r2, r9
 23fcf92:	4633      	mov	r3, r6
 23fcf94:	4641      	mov	r1, r8
 23fcf96:	4638      	mov	r0, r7
 23fcf98:	47d8      	blx	fp
 23fcf9a:	e7ea      	b.n	23fcf72 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fcf9c:	2300      	movs	r3, #0
 23fcf9e:	7323      	strb	r3, [r4, #12]
 23fcfa0:	e7d9      	b.n	23fcf56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fcfa2:	bf00      	nop
 23fcfa4:	e000ed00 	.word	0xe000ed00

023fcfa8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fcfa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcfac:	469b      	mov	fp, r3
 23fcfae:	4b1a      	ldr	r3, [pc, #104]	; (23fd018 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fcfb0:	4680      	mov	r8, r0
 23fcfb2:	685b      	ldr	r3, [r3, #4]
 23fcfb4:	4689      	mov	r9, r1
 23fcfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcfba:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fcfbc:	b96b      	cbnz	r3, 23fcfda <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fcfbe:	f7ff fe7f 	bl	23fccc0 <_ZN5spark10LogManager8instanceEv>
 23fcfc2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcfc4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcfc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcfca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fcfcc:	f7ff fd26 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fcfd0:	7b23      	ldrb	r3, [r4, #12]
 23fcfd2:	b12b      	cbz	r3, 23fcfe0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fcfd4:	a801      	add	r0, sp, #4
 23fcfd6:	f7ff ff9e 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fcfda:	b003      	add	sp, #12
 23fcfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fcfe0:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fcfe2:	b2f6      	uxtb	r6, r6
 23fcfe4:	7323      	strb	r3, [r4, #12]
 23fcfe6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fcfea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcfee:	4555      	cmp	r5, sl
 23fcff0:	d00e      	beq.n	23fd010 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fcff2:	f855 7b04 	ldr.w	r7, [r5], #4
 23fcff6:	4659      	mov	r1, fp
 23fcff8:	1d38      	adds	r0, r7, #4
 23fcffa:	f7ff fdb9 	bl	23fcb70 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fcffe:	4286      	cmp	r6, r0
 23fd000:	d3f5      	bcc.n	23fcfee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd002:	683b      	ldr	r3, [r7, #0]
 23fd004:	464a      	mov	r2, r9
 23fd006:	4641      	mov	r1, r8
 23fd008:	4638      	mov	r0, r7
 23fd00a:	68db      	ldr	r3, [r3, #12]
 23fd00c:	4798      	blx	r3
 23fd00e:	e7ee      	b.n	23fcfee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd010:	2300      	movs	r3, #0
 23fd012:	7323      	strb	r3, [r4, #12]
 23fd014:	e7de      	b.n	23fcfd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd016:	bf00      	nop
 23fd018:	e000ed00 	.word	0xe000ed00

023fd01c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd020:	4b16      	ldr	r3, [pc, #88]	; (23fd07c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd022:	4605      	mov	r5, r0
 23fd024:	685b      	ldr	r3, [r3, #4]
 23fd026:	460f      	mov	r7, r1
 23fd028:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd02c:	bb1b      	cbnz	r3, 23fd076 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd02e:	f7ff fe47 	bl	23fccc0 <_ZN5spark10LogManager8instanceEv>
 23fd032:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd034:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd038:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd03a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd03c:	f7ff fcee 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd040:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd044:	2446      	movs	r4, #70	; 0x46
 23fd046:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd04a:	45b0      	cmp	r8, r6
 23fd04c:	d109      	bne.n	23fd062 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd04e:	a801      	add	r0, sp, #4
 23fd050:	f7ff ff61 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd054:	42a5      	cmp	r5, r4
 23fd056:	bfb4      	ite	lt
 23fd058:	2000      	movlt	r0, #0
 23fd05a:	2001      	movge	r0, #1
}
 23fd05c:	b002      	add	sp, #8
 23fd05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd062:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd066:	4639      	mov	r1, r7
 23fd068:	3004      	adds	r0, #4
 23fd06a:	f7ff fd81 	bl	23fcb70 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd06e:	4284      	cmp	r4, r0
 23fd070:	bfa8      	it	ge
 23fd072:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd074:	e7e9      	b.n	23fd04a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd076:	2000      	movs	r0, #0
 23fd078:	e7f0      	b.n	23fd05c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd07a:	bf00      	nop
 23fd07c:	e000ed00 	.word	0xe000ed00

023fd080 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd082:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd086:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd088:	4604      	mov	r4, r0
 23fd08a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd08c:	db0d      	blt.n	23fd0aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd08e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd090:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd092:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd094:	dd04      	ble.n	23fd0a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd096:	00b9      	lsls	r1, r7, #2
 23fd098:	f7fe ff80 	bl	23fbf9c <realloc>
            if (!d) {
 23fd09c:	b918      	cbnz	r0, 23fd0a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd0a0:	f7fe ff6e 	bl	23fbf80 <free>
        T* d = nullptr;
 23fd0a4:	2000      	movs	r0, #0
        data_ = d;
 23fd0a6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd0a8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd0aa:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd0ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd0ae:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd0b2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd0b4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd0b8:	1d08      	adds	r0, r1, #4
 23fd0ba:	f002 fa46 	bl	23ff54a <memmove>
    new(p) T(std::move(value));
 23fd0be:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd0c2:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd0c4:	2001      	movs	r0, #1
    ++size_;
 23fd0c6:	3301      	adds	r3, #1
 23fd0c8:	6063      	str	r3, [r4, #4]
    return true;
 23fd0ca:	e7e8      	b.n	23fd09e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd0cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd0ce:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd0d0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd0d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd0d6:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd0d8:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd0da:	f7ff fc9f 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd0de:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd0e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd0e6:	4293      	cmp	r3, r2
 23fd0e8:	4619      	mov	r1, r3
 23fd0ea:	d00a      	beq.n	23fd102 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd0ec:	6809      	ldr	r1, [r1, #0]
 23fd0ee:	3304      	adds	r3, #4
 23fd0f0:	42a9      	cmp	r1, r5
 23fd0f2:	d1f8      	bne.n	23fd0e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd0f4:	a801      	add	r0, sp, #4
 23fd0f6:	f7ff ff0e 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd0fa:	2500      	movs	r5, #0
}
 23fd0fc:	4628      	mov	r0, r5
 23fd0fe:	b003      	add	sp, #12
 23fd100:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd102:	4629      	mov	r1, r5
 23fd104:	4620      	mov	r0, r4
 23fd106:	f7ff ffbb 	bl	23fd080 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd10a:	4605      	mov	r5, r0
 23fd10c:	2800      	cmp	r0, #0
 23fd10e:	d0f1      	beq.n	23fd0f4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd110:	6863      	ldr	r3, [r4, #4]
 23fd112:	2b01      	cmp	r3, #1
 23fd114:	d101      	bne.n	23fd11a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd116:	f7ff fdef 	bl	23fccf8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd11a:	a801      	add	r0, sp, #4
 23fd11c:	f7ff fefb 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd120:	e7ec      	b.n	23fd0fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd122 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd122:	460b      	mov	r3, r1
 23fd124:	b570      	push	{r4, r5, r6, lr}
 23fd126:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd128:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd12c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd130:	4282      	cmp	r2, r0
 23fd132:	d00f      	beq.n	23fd154 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd134:	4601      	mov	r1, r0
            if (*p == value) {
 23fd136:	681d      	ldr	r5, [r3, #0]
 23fd138:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd13c:	42ae      	cmp	r6, r5
 23fd13e:	d107      	bne.n	23fd150 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd140:	1a52      	subs	r2, r2, r1
 23fd142:	f002 fa02 	bl	23ff54a <memmove>
    return true;
 23fd146:	2001      	movs	r0, #1
    --size_;
 23fd148:	6863      	ldr	r3, [r4, #4]
 23fd14a:	3b01      	subs	r3, #1
 23fd14c:	6063      	str	r3, [r4, #4]
}
 23fd14e:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd150:	4608      	mov	r0, r1
 23fd152:	e7ed      	b.n	23fd130 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd154:	2000      	movs	r0, #0
 23fd156:	e7fa      	b.n	23fd14e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd158 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd15a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd15c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd160:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd162:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd164:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd166:	f7ff fc59 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd16a:	4620      	mov	r0, r4
 23fd16c:	a901      	add	r1, sp, #4
 23fd16e:	f7ff ffd8 	bl	23fd122 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd172:	b118      	cbz	r0, 23fd17c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd174:	6863      	ldr	r3, [r4, #4]
 23fd176:	b90b      	cbnz	r3, 23fd17c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd178:	f7ff fdca 	bl	23fcd10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd17c:	a803      	add	r0, sp, #12
 23fd17e:	f7ff feca 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd182:	b004      	add	sp, #16
 23fd184:	bd10      	pop	{r4, pc}

023fd186 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd186:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd188:	b570      	push	{r4, r5, r6, lr}
 23fd18a:	4604      	mov	r4, r0
 23fd18c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd190:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd194:	42ae      	cmp	r6, r5
 23fd196:	d015      	beq.n	23fd1c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd198:	4620      	mov	r0, r4
 23fd19a:	f105 0110 	add.w	r1, r5, #16
 23fd19e:	f7ff ffc0 	bl	23fd122 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd1a2:	6863      	ldr	r3, [r4, #4]
 23fd1a4:	b90b      	cbnz	r3, 23fd1aa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd1a6:	f7ff fdb3 	bl	23fcd10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd1aa:	69e0      	ldr	r0, [r4, #28]
 23fd1ac:	6929      	ldr	r1, [r5, #16]
 23fd1ae:	6803      	ldr	r3, [r0, #0]
 23fd1b0:	68db      	ldr	r3, [r3, #12]
 23fd1b2:	4798      	blx	r3
        if (h.stream) {
 23fd1b4:	6969      	ldr	r1, [r5, #20]
 23fd1b6:	b119      	cbz	r1, 23fd1c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd1b8:	6a20      	ldr	r0, [r4, #32]
 23fd1ba:	6803      	ldr	r3, [r0, #0]
 23fd1bc:	68db      	ldr	r3, [r3, #12]
 23fd1be:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd1c0:	3518      	adds	r5, #24
 23fd1c2:	e7e7      	b.n	23fd194 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd1c4:	2618      	movs	r6, #24
 23fd1c6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd1ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd1ce:	42ae      	cmp	r6, r5
 23fd1d0:	d004      	beq.n	23fd1dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd1d2:	4628      	mov	r0, r5
 23fd1d4:	f001 ff02 	bl	23fefdc <_ZN6StringD1Ev>
 23fd1d8:	3518      	adds	r5, #24
 23fd1da:	e7f8      	b.n	23fd1ce <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd1dc:	2300      	movs	r3, #0
 23fd1de:	6163      	str	r3, [r4, #20]
}
 23fd1e0:	bd70      	pop	{r4, r5, r6, pc}

023fd1e2 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd1e4:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd1e6:	f7ff fd93 	bl	23fcd10 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd1ea:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd1ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd1f0:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd1f2:	f7ff fc13 	bl	23fca1c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd1f6:	4620      	mov	r0, r4
 23fd1f8:	f7ff ffc5 	bl	23fd186 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd1fc:	a801      	add	r0, sp, #4
 23fd1fe:	f7ff fe8a 	bl	23fcf16 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd204:	b108      	cbz	r0, 23fd20a <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd206:	f7fe fc61 	bl	23fbacc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd20a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd20e:	2618      	movs	r6, #24
 23fd210:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd214:	42ae      	cmp	r6, r5
 23fd216:	d004      	beq.n	23fd222 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd218:	4628      	mov	r0, r5
 23fd21a:	f001 fedf 	bl	23fefdc <_ZN6StringD1Ev>
 23fd21e:	3518      	adds	r5, #24
 23fd220:	e7f8      	b.n	23fd214 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd222:	6920      	ldr	r0, [r4, #16]
 23fd224:	f7fe feac 	bl	23fbf80 <free>
 23fd228:	6820      	ldr	r0, [r4, #0]
 23fd22a:	f7fe fea9 	bl	23fbf80 <free>
}
 23fd22e:	4620      	mov	r0, r4
 23fd230:	b002      	add	sp, #8
 23fd232:	bd70      	pop	{r4, r5, r6, pc}

023fd234 <__tcf_2>:
    static LogManager mgr;
 23fd234:	4801      	ldr	r0, [pc, #4]	; (23fd23c <__tcf_2+0x8>)
 23fd236:	f7ff bfd4 	b.w	23fd1e2 <_ZN5spark10LogManagerD1Ev>
 23fd23a:	bf00      	nop
 23fd23c:	1007aeb8 	.word	0x1007aeb8

023fd240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd240:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd244:	4604      	mov	r4, r0
 23fd246:	460d      	mov	r5, r1
 23fd248:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd24a:	d915      	bls.n	23fd278 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd24c:	4290      	cmp	r0, r2
 23fd24e:	d214      	bcs.n	23fd27a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd250:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd254:	1a75      	subs	r5, r6, r1
 23fd256:	f1a1 0714 	sub.w	r7, r1, #20
 23fd25a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd25c:	42b7      	cmp	r7, r6
 23fd25e:	d01a      	beq.n	23fd296 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd260:	b11c      	cbz	r4, 23fd26a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd262:	4631      	mov	r1, r6
 23fd264:	4620      	mov	r0, r4
 23fd266:	f7ff fc33 	bl	23fcad0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd26a:	f106 0008 	add.w	r0, r6, #8
 23fd26e:	f7ff fde9 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd272:	3e14      	subs	r6, #20
 23fd274:	3c14      	subs	r4, #20
 23fd276:	e7f1      	b.n	23fd25c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd278:	d00d      	beq.n	23fd296 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd27a:	42b5      	cmp	r5, r6
 23fd27c:	d00b      	beq.n	23fd296 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd27e:	b11c      	cbz	r4, 23fd288 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd280:	4629      	mov	r1, r5
 23fd282:	4620      	mov	r0, r4
 23fd284:	f7ff fc24 	bl	23fcad0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd288:	f105 0008 	add.w	r0, r5, #8
 23fd28c:	f7ff fdda 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd290:	3514      	adds	r5, #20
 23fd292:	3414      	adds	r4, #20
 23fd294:	e7f1      	b.n	23fd27a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd298 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd298:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd29c:	4604      	mov	r4, r0
 23fd29e:	460d      	mov	r5, r1
 23fd2a0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd2a2:	d914      	bls.n	23fd2ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd2a4:	4290      	cmp	r0, r2
 23fd2a6:	d213      	bcs.n	23fd2d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd2a8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd2ac:	1a75      	subs	r5, r6, r1
 23fd2ae:	f1a1 0710 	sub.w	r7, r1, #16
 23fd2b2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd2b4:	42b7      	cmp	r7, r6
 23fd2b6:	d018      	beq.n	23fd2ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd2b8:	b11c      	cbz	r4, 23fd2c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd2ba:	4631      	mov	r1, r6
 23fd2bc:	4620      	mov	r0, r4
 23fd2be:	f001 ff09 	bl	23ff0d4 <_ZN6StringC1EOS_>
                end->~T();
 23fd2c2:	4630      	mov	r0, r6
 23fd2c4:	f001 fe8a 	bl	23fefdc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd2c8:	3e10      	subs	r6, #16
 23fd2ca:	3c10      	subs	r4, #16
 23fd2cc:	e7f2      	b.n	23fd2b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd2ce:	d00c      	beq.n	23fd2ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd2d0:	42b5      	cmp	r5, r6
 23fd2d2:	d00a      	beq.n	23fd2ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd2d4:	b11c      	cbz	r4, 23fd2de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd2d6:	4629      	mov	r1, r5
 23fd2d8:	4620      	mov	r0, r4
 23fd2da:	f001 fefb 	bl	23ff0d4 <_ZN6StringC1EOS_>
                p->~T();
 23fd2de:	4628      	mov	r0, r5
 23fd2e0:	f001 fe7c 	bl	23fefdc <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd2e4:	3510      	adds	r5, #16
 23fd2e6:	3410      	adds	r4, #16
 23fd2e8:	e7f2      	b.n	23fd2d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd2ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd2ec:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd2ee:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd2f0:	4605      	mov	r5, r0
        if (n > 0) {
 23fd2f2:	dd11      	ble.n	23fd318 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd2f4:	0130      	lsls	r0, r6, #4
 23fd2f6:	f7fe fe35 	bl	23fbf64 <malloc>
            if (!d) {
 23fd2fa:	4604      	mov	r4, r0
 23fd2fc:	b158      	cbz	r0, 23fd316 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd2fe:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd302:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd306:	f7ff ffc7 	bl	23fd298 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd30a:	6828      	ldr	r0, [r5, #0]
 23fd30c:	f7fe fe38 	bl	23fbf80 <free>
        return true;
 23fd310:	2001      	movs	r0, #1
        data_ = d;
 23fd312:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd314:	60ae      	str	r6, [r5, #8]
    }
 23fd316:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd318:	2400      	movs	r4, #0
 23fd31a:	e7f6      	b.n	23fd30a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd31c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd320:	4690      	mov	r8, r2
        capacity_(0) {
 23fd322:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd324:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd326:	b095      	sub	sp, #84	; 0x54
 23fd328:	9103      	str	r1, [sp, #12]
    return size_;
 23fd32a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd32e:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd330:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd332:	e9c0 3300 	strd	r3, r3, [r0]
 23fd336:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd33e:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd342:	7602      	strb	r2, [r0, #24]
 23fd344:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd346:	dc23      	bgt.n	23fd390 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd348:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd34c:	2314      	movs	r3, #20
 23fd34e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd352:	42af      	cmp	r7, r5
 23fd354:	d03b      	beq.n	23fd3ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd356:	4629      	mov	r1, r5
 23fd358:	a80b      	add	r0, sp, #44	; 0x2c
 23fd35a:	f001 febb 	bl	23ff0d4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd35e:	a90b      	add	r1, sp, #44	; 0x2c
 23fd360:	a80f      	add	r0, sp, #60	; 0x3c
 23fd362:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd364:	f001 feb6 	bl	23ff0d4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd368:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd36c:	4299      	cmp	r1, r3
 23fd36e:	da1b      	bge.n	23fd3a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd370:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd372:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd374:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd378:	4631      	mov	r1, r6
 23fd37a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd37e:	f106 0010 	add.w	r0, r6, #16
 23fd382:	f7ff ff89 	bl	23fd298 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd386:	b9ee      	cbnz	r6, 23fd3c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd38a:	3301      	adds	r3, #1
 23fd38c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd38e:	e011      	b.n	23fd3b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd390:	a808      	add	r0, sp, #32
 23fd392:	f7ff ffab 	bl	23fd2ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd396:	2800      	cmp	r0, #0
 23fd398:	d1d6      	bne.n	23fd348 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd39a:	a808      	add	r0, sp, #32
 23fd39c:	f7ff fd66 	bl	23fce6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd3a0:	4620      	mov	r0, r4
 23fd3a2:	b015      	add	sp, #84	; 0x54
 23fd3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd3a8:	3101      	adds	r1, #1
 23fd3aa:	a808      	add	r0, sp, #32
 23fd3ac:	f7ff ff9e 	bl	23fd2ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd3b0:	2800      	cmp	r0, #0
 23fd3b2:	d1dd      	bne.n	23fd370 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd3b4:	a80f      	add	r0, sp, #60	; 0x3c
 23fd3b6:	f001 fe11 	bl	23fefdc <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd3ba:	a80b      	add	r0, sp, #44	; 0x2c
 23fd3bc:	f001 fe0e 	bl	23fefdc <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd3c0:	3514      	adds	r5, #20
 23fd3c2:	e7c6      	b.n	23fd352 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd3c4:	4630      	mov	r0, r6
 23fd3c6:	a90f      	add	r1, sp, #60	; 0x3c
 23fd3c8:	f001 fe84 	bl	23ff0d4 <_ZN6StringC1EOS_>
 23fd3cc:	e7dc      	b.n	23fd388 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd3ce:	2600      	movs	r6, #0
 23fd3d0:	f04f 0914 	mov.w	r9, #20
 23fd3d4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd3d8:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd3da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd3de:	429e      	cmp	r6, r3
 23fd3e0:	da7c      	bge.n	23fd4dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd3e2:	0133      	lsls	r3, r6, #4
 23fd3e4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd3e6:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd3e8:	b90b      	cbnz	r3, 23fd3ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd3ea:	3601      	adds	r6, #1
 23fd3ec:	e7f5      	b.n	23fd3da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd3ee:	2300      	movs	r3, #0
 23fd3f0:	9307      	str	r3, [sp, #28]
 23fd3f2:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd3f6:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd3f8:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd3fa:	a907      	add	r1, sp, #28
 23fd3fc:	a806      	add	r0, sp, #24
 23fd3fe:	f7ff fae6 	bl	23fc9ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd402:	4682      	mov	sl, r0
 23fd404:	2800      	cmp	r0, #0
 23fd406:	d0f0      	beq.n	23fd3ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd408:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd40c:	4601      	mov	r1, r0
            bool found = false;
 23fd40e:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd412:	4628      	mov	r0, r5
 23fd414:	9a07      	ldr	r2, [sp, #28]
 23fd416:	f10d 0317 	add.w	r3, sp, #23
 23fd41a:	f7ff fb6d 	bl	23fcaf8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd41e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd422:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd424:	2f00      	cmp	r7, #0
 23fd426:	d14a      	bne.n	23fd4be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd428:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd42c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd430:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd438:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd43c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd440:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd442:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd446:	4293      	cmp	r3, r2
 23fd448:	db17      	blt.n	23fd47a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd44a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd44e:	f1ba 0f00 	cmp.w	sl, #0
 23fd452:	dd30      	ble.n	23fd4b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd454:	fb09 f00a 	mul.w	r0, r9, sl
 23fd458:	f7fe fd84 	bl	23fbf64 <malloc>
            if (!d) {
 23fd45c:	4683      	mov	fp, r0
 23fd45e:	b360      	cbz	r0, 23fd4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd460:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd464:	fb09 1202 	mla	r2, r9, r2, r1
 23fd468:	f7ff feea 	bl	23fd240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd46c:	6828      	ldr	r0, [r5, #0]
 23fd46e:	f7fe fd87 	bl	23fbf80 <free>
        data_ = d;
 23fd472:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd476:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd47a:	682b      	ldr	r3, [r5, #0]
 23fd47c:	9a01      	ldr	r2, [sp, #4]
 23fd47e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd482:	686a      	ldr	r2, [r5, #4]
 23fd484:	4651      	mov	r1, sl
 23fd486:	fb09 3202 	mla	r2, r9, r2, r3
 23fd48a:	f10a 0014 	add.w	r0, sl, #20
 23fd48e:	f7ff fed7 	bl	23fd240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd492:	f1ba 0f00 	cmp.w	sl, #0
 23fd496:	d003      	beq.n	23fd4a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd498:	4650      	mov	r0, sl
 23fd49a:	a90f      	add	r1, sp, #60	; 0x3c
 23fd49c:	f7ff fb18 	bl	23fcad0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd4a0:	686b      	ldr	r3, [r5, #4]
 23fd4a2:	3301      	adds	r3, #1
 23fd4a4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd4a6:	a811      	add	r0, sp, #68	; 0x44
 23fd4a8:	f7ff fccc 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd4ac:	b13f      	cbz	r7, 23fd4be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd4ae:	a80b      	add	r0, sp, #44	; 0x2c
 23fd4b0:	f7ff fcc8 	bl	23fce44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd4b4:	e771      	b.n	23fd39a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd4b6:	46bb      	mov	fp, r7
 23fd4b8:	e7d8      	b.n	23fd46c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd4ba:	2701      	movs	r7, #1
 23fd4bc:	e7f3      	b.n	23fd4a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd4be:	9b01      	ldr	r3, [sp, #4]
 23fd4c0:	682d      	ldr	r5, [r5, #0]
 23fd4c2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd4c6:	9b06      	ldr	r3, [sp, #24]
 23fd4c8:	781b      	ldrb	r3, [r3, #0]
 23fd4ca:	b92b      	cbnz	r3, 23fd4d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd4cc:	f8d8 3000 	ldr.w	r3, [r8]
 23fd4d0:	9a02      	ldr	r2, [sp, #8]
 23fd4d2:	4413      	add	r3, r2
 23fd4d4:	7c1b      	ldrb	r3, [r3, #16]
 23fd4d6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd4d8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd4da:	e78e      	b.n	23fd3fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4dc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd4de:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4e0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd4e2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4e4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4e6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd4e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4ea:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4ec:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd4ee:	60a2      	str	r2, [r4, #8]
 23fd4f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4f2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4f4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd4f6:	60e2      	str	r2, [r4, #12]
 23fd4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4fa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4fc:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd4fe:	6122      	str	r2, [r4, #16]
 23fd500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd502:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd504:	9b03      	ldr	r3, [sp, #12]
 23fd506:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd508:	6162      	str	r2, [r4, #20]
 23fd50a:	7623      	strb	r3, [r4, #24]
 23fd50c:	e7cf      	b.n	23fd4ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd510 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd510:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd512:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd514:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd516:	4617      	mov	r7, r2
 23fd518:	b087      	sub	sp, #28
 23fd51a:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd51c:	4668      	mov	r0, sp
 23fd51e:	4619      	mov	r1, r3
 23fd520:	f7fe f8bb 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd524:	4b0b      	ldr	r3, [pc, #44]	; (23fd554 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd526:	4669      	mov	r1, sp
 23fd528:	f846 3b04 	str.w	r3, [r6], #4
 23fd52c:	a803      	add	r0, sp, #12
 23fd52e:	f7fe f8b4 	bl	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd532:	4639      	mov	r1, r7
 23fd534:	aa03      	add	r2, sp, #12
 23fd536:	4630      	mov	r0, r6
 23fd538:	f7ff fef0 	bl	23fd31c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd53c:	a803      	add	r0, sp, #12
 23fd53e:	f7fe f86b 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd542:	4668      	mov	r0, sp
 23fd544:	f7fe f868 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd548:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd54a:	4b03      	ldr	r3, [pc, #12]	; (23fd558 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd54c:	6225      	str	r5, [r4, #32]
 23fd54e:	6023      	str	r3, [r4, #0]
}
 23fd550:	b007      	add	sp, #28
 23fd552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd554:	023ff93c 	.word	0x023ff93c
 23fd558:	023ffae4 	.word	0x023ffae4

023fd55c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd55e:	460f      	mov	r7, r1
 23fd560:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd562:	4638      	mov	r0, r7
 23fd564:	491c      	ldr	r1, [pc, #112]	; (23fd5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd566:	4616      	mov	r6, r2
 23fd568:	461d      	mov	r5, r3
 23fd56a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd56c:	f7fd ff28 	bl	23fb3c0 <strcmp>
 23fd570:	b9c0      	cbnz	r0, 23fd5a4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd572:	b1a4      	cbz	r4, 23fd59e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd574:	4629      	mov	r1, r5
 23fd576:	a801      	add	r0, sp, #4
 23fd578:	f7ff fcbe 	bl	23fcef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd57c:	2024      	movs	r0, #36	; 0x24
 23fd57e:	4917      	ldr	r1, [pc, #92]	; (23fd5dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd580:	f001 fe9e 	bl	23ff2c0 <_ZnwjRKSt9nothrow_t>
 23fd584:	4605      	mov	r5, r0
 23fd586:	b130      	cbz	r0, 23fd596 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd588:	ab01      	add	r3, sp, #4
 23fd58a:	4632      	mov	r2, r6
 23fd58c:	4621      	mov	r1, r4
 23fd58e:	f7ff ffbf 	bl	23fd510 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd592:	4b13      	ldr	r3, [pc, #76]	; (23fd5e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd594:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd596:	a801      	add	r0, sp, #4
 23fd598:	f7fe f83e 	bl	23fb618 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd59c:	462c      	mov	r4, r5
}
 23fd59e:	4620      	mov	r0, r4
 23fd5a0:	b005      	add	sp, #20
 23fd5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd5a4:	4638      	mov	r0, r7
 23fd5a6:	490f      	ldr	r1, [pc, #60]	; (23fd5e4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd5a8:	f7fd ff0a 	bl	23fb3c0 <strcmp>
 23fd5ac:	b990      	cbnz	r0, 23fd5d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd5ae:	2c00      	cmp	r4, #0
 23fd5b0:	d0f5      	beq.n	23fd59e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd5b2:	4629      	mov	r1, r5
 23fd5b4:	a801      	add	r0, sp, #4
 23fd5b6:	f7ff fc9f 	bl	23fcef8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd5ba:	2024      	movs	r0, #36	; 0x24
 23fd5bc:	4907      	ldr	r1, [pc, #28]	; (23fd5dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd5be:	f001 fe7f 	bl	23ff2c0 <_ZnwjRKSt9nothrow_t>
 23fd5c2:	4605      	mov	r5, r0
 23fd5c4:	2800      	cmp	r0, #0
 23fd5c6:	d0e6      	beq.n	23fd596 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd5c8:	4632      	mov	r2, r6
 23fd5ca:	4621      	mov	r1, r4
 23fd5cc:	ab01      	add	r3, sp, #4
 23fd5ce:	f7ff ff9f 	bl	23fd510 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd5d2:	e7e0      	b.n	23fd596 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd5d4:	2400      	movs	r4, #0
 23fd5d6:	e7e2      	b.n	23fd59e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd5d8:	023ffa64 	.word	0x023ffa64
 23fd5dc:	023ffd4c 	.word	0x023ffd4c
 23fd5e0:	023ffafc 	.word	0x023ffafc
 23fd5e4:	023ffa68 	.word	0x023ffa68

023fd5e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd5e8:	4b01      	ldr	r3, [pc, #4]	; (23fd5f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd5ea:	4a02      	ldr	r2, [pc, #8]	; (23fd5f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd5ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd5ee:	4770      	bx	lr
 23fd5f0:	1007aeb4 	.word	0x1007aeb4
 23fd5f4:	023ffa79 	.word	0x023ffa79

023fd5f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd5fc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd5fe:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd602:	4604      	mov	r4, r0
 23fd604:	460e      	mov	r6, r1
 23fd606:	4617      	mov	r7, r2
 23fd608:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd60a:	f7ff f861 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fd60e:	4581      	cmp	r9, r0
 23fd610:	d04d      	beq.n	23fd6ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd612:	792b      	ldrb	r3, [r5, #4]
 23fd614:	0719      	lsls	r1, r3, #28
 23fd616:	d504      	bpl.n	23fd622 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd618:	4620      	mov	r0, r4
 23fd61a:	696a      	ldr	r2, [r5, #20]
 23fd61c:	4954      	ldr	r1, [pc, #336]	; (23fd770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd61e:	f7ff fad0 	bl	23fcbc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd622:	f1b8 0f00 	cmp.w	r8, #0
 23fd626:	d00d      	beq.n	23fd644 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd628:	215b      	movs	r1, #91	; 0x5b
 23fd62a:	4620      	mov	r0, r4
 23fd62c:	f7ff fa44 	bl	23fcab8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd630:	4641      	mov	r1, r8
 23fd632:	4620      	mov	r0, r4
 23fd634:	f7ff fa31 	bl	23fca9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd638:	6823      	ldr	r3, [r4, #0]
 23fd63a:	2202      	movs	r2, #2
 23fd63c:	4620      	mov	r0, r4
 23fd63e:	68db      	ldr	r3, [r3, #12]
 23fd640:	494c      	ldr	r1, [pc, #304]	; (23fd774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd642:	4798      	blx	r3
    if (attr.has_file) {
 23fd644:	792b      	ldrb	r3, [r5, #4]
 23fd646:	07da      	lsls	r2, r3, #31
 23fd648:	d524      	bpl.n	23fd694 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd64a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd64e:	212f      	movs	r1, #47	; 0x2f
 23fd650:	4640      	mov	r0, r8
 23fd652:	f002 f80a 	bl	23ff66a <strrchr>
    if (s1) {
 23fd656:	b108      	cbz	r0, 23fd65c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd658:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd65c:	4641      	mov	r1, r8
 23fd65e:	4620      	mov	r0, r4
 23fd660:	f7ff fa1b 	bl	23fca9a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd664:	792b      	ldrb	r3, [r5, #4]
 23fd666:	079b      	lsls	r3, r3, #30
 23fd668:	d508      	bpl.n	23fd67c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd66a:	213a      	movs	r1, #58	; 0x3a
 23fd66c:	4620      	mov	r0, r4
 23fd66e:	f7ff fa23 	bl	23fcab8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd672:	4620      	mov	r0, r4
 23fd674:	68ea      	ldr	r2, [r5, #12]
 23fd676:	4940      	ldr	r1, [pc, #256]	; (23fd778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd678:	f7ff faa3 	bl	23fcbc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd67c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd67e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd680:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd684:	4620      	mov	r0, r4
            write(", ", 2);
 23fd686:	f04f 0202 	mov.w	r2, #2
 23fd68a:	68db      	ldr	r3, [r3, #12]
 23fd68c:	bf14      	ite	ne
 23fd68e:	493b      	ldrne	r1, [pc, #236]	; (23fd77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd690:	493b      	ldreq	r1, [pc, #236]	; (23fd780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd692:	4798      	blx	r3
    if (attr.has_function) {
 23fd694:	792b      	ldrb	r3, [r5, #4]
 23fd696:	0758      	lsls	r0, r3, #29
 23fd698:	d51d      	bpl.n	23fd6d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd69a:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd69c:	460b      	mov	r3, r1
 23fd69e:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd6a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd6a4:	b160      	cbz	r0, 23fd6c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd6a6:	2820      	cmp	r0, #32
 23fd6a8:	d108      	bne.n	23fd6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd6aa:	4619      	mov	r1, r3
 23fd6ac:	e7f7      	b.n	23fd69e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd6ae:	4835      	ldr	r0, [pc, #212]	; (23fd784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd6b0:	f7fe fcff 	bl	23fc0b2 <_ZN5spark12NetworkClass9listeningEv>
 23fd6b4:	2800      	cmp	r0, #0
 23fd6b6:	d0ac      	beq.n	23fd612 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd6bc:	2828      	cmp	r0, #40	; 0x28
 23fd6be:	d1ee      	bne.n	23fd69e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd6c0:	6823      	ldr	r3, [r4, #0]
 23fd6c2:	1a52      	subs	r2, r2, r1
 23fd6c4:	4620      	mov	r0, r4
 23fd6c6:	68db      	ldr	r3, [r3, #12]
 23fd6c8:	4798      	blx	r3
        write("(): ", 4);
 23fd6ca:	6823      	ldr	r3, [r4, #0]
 23fd6cc:	2204      	movs	r2, #4
 23fd6ce:	4620      	mov	r0, r4
 23fd6d0:	68db      	ldr	r3, [r3, #12]
 23fd6d2:	492d      	ldr	r1, [pc, #180]	; (23fd788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd6d4:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd6d6:	2100      	movs	r1, #0
 23fd6d8:	4638      	mov	r0, r7
 23fd6da:	f7fe fb47 	bl	23fbd6c <log_level_name>
 23fd6de:	4601      	mov	r1, r0
    write(s);
 23fd6e0:	4620      	mov	r0, r4
 23fd6e2:	f7ff f9da 	bl	23fca9a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd6e6:	6823      	ldr	r3, [r4, #0]
 23fd6e8:	2202      	movs	r2, #2
 23fd6ea:	4620      	mov	r0, r4
 23fd6ec:	68db      	ldr	r3, [r3, #12]
 23fd6ee:	4924      	ldr	r1, [pc, #144]	; (23fd780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd6f0:	4798      	blx	r3
    if (msg) {
 23fd6f2:	b11e      	cbz	r6, 23fd6fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd6f4:	4631      	mov	r1, r6
 23fd6f6:	4620      	mov	r0, r4
 23fd6f8:	f7ff f9cf 	bl	23fca9a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd6fc:	792b      	ldrb	r3, [r5, #4]
 23fd6fe:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd702:	d02c      	beq.n	23fd75e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd704:	6823      	ldr	r3, [r4, #0]
 23fd706:	4921      	ldr	r1, [pc, #132]	; (23fd78c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd708:	68db      	ldr	r3, [r3, #12]
 23fd70a:	2202      	movs	r2, #2
 23fd70c:	4620      	mov	r0, r4
 23fd70e:	4798      	blx	r3
        if (attr.has_code) {
 23fd710:	792b      	ldrb	r3, [r5, #4]
 23fd712:	06d9      	lsls	r1, r3, #27
 23fd714:	d50a      	bpl.n	23fd72c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd716:	6823      	ldr	r3, [r4, #0]
 23fd718:	2207      	movs	r2, #7
 23fd71a:	4620      	mov	r0, r4
 23fd71c:	491c      	ldr	r1, [pc, #112]	; (23fd790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd71e:	68db      	ldr	r3, [r3, #12]
 23fd720:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd722:	4620      	mov	r0, r4
 23fd724:	69aa      	ldr	r2, [r5, #24]
 23fd726:	491b      	ldr	r1, [pc, #108]	; (23fd794 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd728:	f7ff fa4b 	bl	23fcbc2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd72c:	792b      	ldrb	r3, [r5, #4]
 23fd72e:	069a      	lsls	r2, r3, #26
 23fd730:	d511      	bpl.n	23fd756 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd732:	06db      	lsls	r3, r3, #27
 23fd734:	d505      	bpl.n	23fd742 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd736:	6823      	ldr	r3, [r4, #0]
 23fd738:	2202      	movs	r2, #2
 23fd73a:	4620      	mov	r0, r4
 23fd73c:	68db      	ldr	r3, [r3, #12]
 23fd73e:	490f      	ldr	r1, [pc, #60]	; (23fd77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd740:	4798      	blx	r3
            write("details = ", 10);
 23fd742:	6823      	ldr	r3, [r4, #0]
 23fd744:	4620      	mov	r0, r4
 23fd746:	4914      	ldr	r1, [pc, #80]	; (23fd798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd748:	220a      	movs	r2, #10
 23fd74a:	68db      	ldr	r3, [r3, #12]
 23fd74c:	4798      	blx	r3
            write(attr.details);
 23fd74e:	4620      	mov	r0, r4
 23fd750:	69e9      	ldr	r1, [r5, #28]
 23fd752:	f7ff f9a2 	bl	23fca9a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd756:	215d      	movs	r1, #93	; 0x5d
 23fd758:	4620      	mov	r0, r4
 23fd75a:	f7ff f9ad 	bl	23fcab8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd75e:	6823      	ldr	r3, [r4, #0]
 23fd760:	4620      	mov	r0, r4
}
 23fd762:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd766:	2202      	movs	r2, #2
 23fd768:	68db      	ldr	r3, [r3, #12]
 23fd76a:	490c      	ldr	r1, [pc, #48]	; (23fd79c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd76c:	4718      	bx	r3
 23fd76e:	bf00      	nop
 23fd770:	023ffa7d 	.word	0x023ffa7d
 23fd774:	023ffa84 	.word	0x023ffa84
 23fd778:	023ff8b9 	.word	0x023ff8b9
 23fd77c:	023ffa87 	.word	0x023ffa87
 23fd780:	023ffa8c 	.word	0x023ffa8c
 23fd784:	1007ae64 	.word	0x1007ae64
 23fd788:	023ffa8a 	.word	0x023ffa8a
 23fd78c:	023ffa8f 	.word	0x023ffa8f
 23fd790:	023ffa92 	.word	0x023ffa92
 23fd794:	023ffa9a 	.word	0x023ffa9a
 23fd798:	023ffa9d 	.word	0x023ffa9d
 23fd79c:	023ffaa8 	.word	0x023ffaa8

023fd7a0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd7a4:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd7a6:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd7a8:	460d      	mov	r5, r1
 23fd7aa:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd7ac:	f7fe ff90 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fd7b0:	4287      	cmp	r7, r0
 23fd7b2:	d007      	beq.n	23fd7c4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd7b4:	6a20      	ldr	r0, [r4, #32]
 23fd7b6:	4632      	mov	r2, r6
 23fd7b8:	6803      	ldr	r3, [r0, #0]
 23fd7ba:	4629      	mov	r1, r5
}
 23fd7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd7c0:	68db      	ldr	r3, [r3, #12]
 23fd7c2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd7c4:	4803      	ldr	r0, [pc, #12]	; (23fd7d4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd7c6:	f7fe fc74 	bl	23fc0b2 <_ZN5spark12NetworkClass9listeningEv>
 23fd7ca:	2800      	cmp	r0, #0
 23fd7cc:	d0f2      	beq.n	23fd7b4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd7d2:	bf00      	nop
 23fd7d4:	1007ae64 	.word	0x1007ae64

023fd7d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd7dc:	b085      	sub	sp, #20
    return stream_;
 23fd7de:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd7e2:	4605      	mov	r5, r0
 23fd7e4:	460f      	mov	r7, r1
 23fd7e6:	4690      	mov	r8, r2
 23fd7e8:	461e      	mov	r6, r3
 23fd7ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd7ec:	f7fe ff70 	bl	23fc6d0 <_Z16_fetch_usbserialv>
 23fd7f0:	4581      	cmp	r9, r0
 23fd7f2:	d105      	bne.n	23fd800 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd7f4:	4849      	ldr	r0, [pc, #292]	; (23fd91c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd7f6:	f7fe fc5c 	bl	23fc0b2 <_ZN5spark12NetworkClass9listeningEv>
 23fd7fa:	2800      	cmp	r0, #0
 23fd7fc:	f040 808a 	bne.w	23fd914 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd800:	f04f 0900 	mov.w	r9, #0
 23fd804:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd806:	4a46      	ldr	r2, [pc, #280]	; (23fd920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd808:	a801      	add	r0, sp, #4
 23fd80a:	9201      	str	r2, [sp, #4]
 23fd80c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd80e:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd812:	f7fe fe44 	bl	23fc49e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd816:	4649      	mov	r1, r9
 23fd818:	4640      	mov	r0, r8
 23fd81a:	f7fe faa7 	bl	23fbd6c <log_level_name>
 23fd81e:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd820:	4940      	ldr	r1, [pc, #256]	; (23fd924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd822:	2201      	movs	r2, #1
 23fd824:	a801      	add	r0, sp, #4
 23fd826:	f7fe fec9 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd82a:	4641      	mov	r1, r8
 23fd82c:	f7ff f927 	bl	23fca7e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd830:	b13f      	cbz	r7, 23fd842 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd832:	493d      	ldr	r1, [pc, #244]	; (23fd928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd834:	2201      	movs	r2, #1
 23fd836:	a801      	add	r0, sp, #4
 23fd838:	f7fe fec0 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd83c:	4639      	mov	r1, r7
 23fd83e:	f7ff f91e 	bl	23fca7e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd842:	b13e      	cbz	r6, 23fd854 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd844:	4939      	ldr	r1, [pc, #228]	; (23fd92c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd846:	2201      	movs	r2, #1
 23fd848:	a801      	add	r0, sp, #4
 23fd84a:	f7fe feb7 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd84e:	4631      	mov	r1, r6
 23fd850:	f7ff f915 	bl	23fca7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd854:	7923      	ldrb	r3, [r4, #4]
 23fd856:	07df      	lsls	r7, r3, #31
 23fd858:	d50e      	bpl.n	23fd878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd85a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd85c:	212f      	movs	r1, #47	; 0x2f
 23fd85e:	4630      	mov	r0, r6
 23fd860:	f001 ff03 	bl	23ff66a <strrchr>
    if (s1) {
 23fd864:	b100      	cbz	r0, 23fd868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd866:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd868:	4931      	ldr	r1, [pc, #196]	; (23fd930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd86a:	2201      	movs	r2, #1
 23fd86c:	a801      	add	r0, sp, #4
 23fd86e:	f7fe fea5 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd872:	4631      	mov	r1, r6
 23fd874:	f7ff f903 	bl	23fca7e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd878:	7923      	ldrb	r3, [r4, #4]
 23fd87a:	079e      	lsls	r6, r3, #30
 23fd87c:	d507      	bpl.n	23fd88e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd87e:	492d      	ldr	r1, [pc, #180]	; (23fd934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd880:	2202      	movs	r2, #2
 23fd882:	a801      	add	r0, sp, #4
 23fd884:	f7fe fe9a 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd888:	68e1      	ldr	r1, [r4, #12]
 23fd88a:	f7fe fe15 	bl	23fc4b8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd88e:	7923      	ldrb	r3, [r4, #4]
 23fd890:	0758      	lsls	r0, r3, #29
 23fd892:	d514      	bpl.n	23fd8be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd894:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd896:	4633      	mov	r3, r6
 23fd898:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd89e:	b12a      	cbz	r2, 23fd8ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd8a0:	2a20      	cmp	r2, #32
 23fd8a2:	d101      	bne.n	23fd8a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd8a4:	461e      	mov	r6, r3
 23fd8a6:	e7f7      	b.n	23fd898 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd8a8:	2a28      	cmp	r2, #40	; 0x28
 23fd8aa:	d1f5      	bne.n	23fd898 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd8ac:	2202      	movs	r2, #2
 23fd8ae:	4922      	ldr	r1, [pc, #136]	; (23fd938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd8b0:	a801      	add	r0, sp, #4
 23fd8b2:	f7fe fe83 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8b6:	4631      	mov	r1, r6
 23fd8b8:	1bba      	subs	r2, r7, r6
 23fd8ba:	f7fe fe8f 	bl	23fc5dc <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd8be:	7923      	ldrb	r3, [r4, #4]
 23fd8c0:	0719      	lsls	r1, r3, #28
 23fd8c2:	d507      	bpl.n	23fd8d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd8c4:	491d      	ldr	r1, [pc, #116]	; (23fd93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd8c6:	2201      	movs	r2, #1
 23fd8c8:	a801      	add	r0, sp, #4
 23fd8ca:	f7fe fe77 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8ce:	6961      	ldr	r1, [r4, #20]
 23fd8d0:	f7fe fe04 	bl	23fc4dc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd8d4:	7923      	ldrb	r3, [r4, #4]
 23fd8d6:	06da      	lsls	r2, r3, #27
 23fd8d8:	d508      	bpl.n	23fd8ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd8da:	2204      	movs	r2, #4
 23fd8dc:	4918      	ldr	r1, [pc, #96]	; (23fd940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd8de:	eb0d 0002 	add.w	r0, sp, r2
 23fd8e2:	f7fe fe6b 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8e6:	69a1      	ldr	r1, [r4, #24]
 23fd8e8:	f7fe fde6 	bl	23fc4b8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd8ec:	7923      	ldrb	r3, [r4, #4]
 23fd8ee:	069b      	lsls	r3, r3, #26
 23fd8f0:	d507      	bpl.n	23fd902 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd8f2:	4914      	ldr	r1, [pc, #80]	; (23fd944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd8f4:	2206      	movs	r2, #6
 23fd8f6:	a801      	add	r0, sp, #4
 23fd8f8:	f7fe fe60 	bl	23fc5bc <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8fc:	69e1      	ldr	r1, [r4, #28]
 23fd8fe:	f7ff f8be 	bl	23fca7e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd902:	a801      	add	r0, sp, #4
 23fd904:	f7fe fdb5 	bl	23fc472 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd908:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd90a:	2202      	movs	r2, #2
 23fd90c:	6803      	ldr	r3, [r0, #0]
 23fd90e:	490e      	ldr	r1, [pc, #56]	; (23fd948 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd910:	68db      	ldr	r3, [r3, #12]
 23fd912:	4798      	blx	r3
}
 23fd914:	b005      	add	sp, #20
 23fd916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd91a:	bf00      	nop
 23fd91c:	1007ae64 	.word	0x1007ae64
 23fd920:	023ffacc 	.word	0x023ffacc
 23fd924:	023ffa5a 	.word	0x023ffa5a
 23fd928:	023ffaab 	.word	0x023ffaab
 23fd92c:	023ffed3 	.word	0x023ffed3
 23fd930:	023ff904 	.word	0x023ff904
 23fd934:	023ffaad 	.word	0x023ffaad
 23fd938:	023ffab0 	.word	0x023ffab0
 23fd93c:	023ffab3 	.word	0x023ffab3
 23fd940:	023ffab5 	.word	0x023ffab5
 23fd944:	023ffaba 	.word	0x023ffaba
 23fd948:	023ffaa8 	.word	0x023ffaa8

023fd94c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd94e:	4606      	mov	r6, r0
 23fd950:	460d      	mov	r5, r1
  size_t n = 0;
 23fd952:	2400      	movs	r4, #0
 23fd954:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd956:	42bd      	cmp	r5, r7
 23fd958:	d00c      	beq.n	23fd974 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd95a:	6833      	ldr	r3, [r6, #0]
 23fd95c:	4630      	mov	r0, r6
 23fd95e:	689b      	ldr	r3, [r3, #8]
 23fd960:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd964:	4798      	blx	r3
     if (chunk>=0)
 23fd966:	1e03      	subs	r3, r0, #0
 23fd968:	db01      	blt.n	23fd96e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd96a:	441c      	add	r4, r3
  while (size--) {
 23fd96c:	e7f3      	b.n	23fd956 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd96e:	2c00      	cmp	r4, #0
 23fd970:	bf08      	it	eq
 23fd972:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd974:	4620      	mov	r0, r4
 23fd976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd978 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd978:	b513      	push	{r0, r1, r4, lr}
 23fd97a:	4604      	mov	r4, r0
    }
 23fd97c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd97e:	b159      	cbz	r1, 23fd998 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd980:	9101      	str	r1, [sp, #4]
 23fd982:	f7fd fd27 	bl	23fb3d4 <strlen>
 23fd986:	4602      	mov	r2, r0
 23fd988:	4620      	mov	r0, r4
 23fd98a:	6823      	ldr	r3, [r4, #0]
 23fd98c:	9901      	ldr	r1, [sp, #4]
 23fd98e:	68db      	ldr	r3, [r3, #12]
    }
 23fd990:	b002      	add	sp, #8
 23fd992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd996:	4718      	bx	r3
    }
 23fd998:	b002      	add	sp, #8
 23fd99a:	bd10      	pop	{r4, pc}

023fd99c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd99c:	6803      	ldr	r3, [r0, #0]
 23fd99e:	689b      	ldr	r3, [r3, #8]
 23fd9a0:	4718      	bx	r3

023fd9a2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd9a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd9a4:	2a01      	cmp	r2, #1
 23fd9a6:	bf98      	it	ls
 23fd9a8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd9aa:	b530      	push	{r4, r5, lr}
 23fd9ac:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd9ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd9b2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd9b4:	460d      	mov	r5, r1
 23fd9b6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd9ba:	fb01 5312 	mls	r3, r1, r2, r5
 23fd9be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd9c2:	2b09      	cmp	r3, #9
 23fd9c4:	bf94      	ite	ls
 23fd9c6:	3330      	addls	r3, #48	; 0x30
 23fd9c8:	3337      	addhi	r3, #55	; 0x37
 23fd9ca:	b2db      	uxtb	r3, r3
  } while(n);
 23fd9cc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd9ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd9d2:	d9ef      	bls.n	23fd9b4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd9d4:	4621      	mov	r1, r4
 23fd9d6:	f7ff ffcf 	bl	23fd978 <_ZN5Print5writeEPKc>
}
 23fd9da:	b00b      	add	sp, #44	; 0x2c
 23fd9dc:	bd30      	pop	{r4, r5, pc}

023fd9de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fd9de:	4770      	bx	lr

023fd9e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23fd9e0:	4770      	bx	lr

023fd9e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23fd9e2:	4770      	bx	lr

023fd9e4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fd9e4:	4770      	bx	lr
	...

023fd9e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fd9e8:	4b06      	ldr	r3, [pc, #24]	; (23fda04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fd9ea:	b510      	push	{r4, lr}
	    ||
 23fd9ec:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fd9ee:	f100 040c 	add.w	r4, r0, #12
 23fd9f2:	d005      	beq.n	23fda00 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fd9f4:	4608      	mov	r0, r1
 23fd9f6:	f001 fc6b 	bl	23ff2d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fd9fa:	2800      	cmp	r0, #0
 23fd9fc:	bf08      	it	eq
 23fd9fe:	2400      	moveq	r4, #0
      }
 23fda00:	4620      	mov	r0, r4
 23fda02:	bd10      	pop	{r4, pc}
 23fda04:	023ff9dc 	.word	0x023ff9dc

023fda08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fda08:	4b06      	ldr	r3, [pc, #24]	; (23fda24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fda0a:	b510      	push	{r4, lr}
	    ||
 23fda0c:	4299      	cmp	r1, r3
 23fda0e:	f100 040c 	add.w	r4, r0, #12
 23fda12:	d005      	beq.n	23fda20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fda14:	4608      	mov	r0, r1
 23fda16:	f001 fc5b 	bl	23ff2d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fda1a:	2800      	cmp	r0, #0
 23fda1c:	bf08      	it	eq
 23fda1e:	2400      	moveq	r4, #0
      }
 23fda20:	4620      	mov	r0, r4
 23fda22:	bd10      	pop	{r4, pc}
 23fda24:	023ff9dc 	.word	0x023ff9dc

023fda28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fda28:	4b06      	ldr	r3, [pc, #24]	; (23fda44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fda2a:	b510      	push	{r4, lr}
	    ||
 23fda2c:	4299      	cmp	r1, r3
 23fda2e:	f100 040c 	add.w	r4, r0, #12
 23fda32:	d005      	beq.n	23fda40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fda34:	4608      	mov	r0, r1
 23fda36:	f001 fc4b 	bl	23ff2d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fda3a:	2800      	cmp	r0, #0
 23fda3c:	bf08      	it	eq
 23fda3e:	2400      	moveq	r4, #0
      }
 23fda40:	4620      	mov	r0, r4
 23fda42:	bd10      	pop	{r4, pc}
 23fda44:	023ff9dc 	.word	0x023ff9dc

023fda48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fda48:	b510      	push	{r4, lr}
 23fda4a:	4604      	mov	r4, r0
 23fda4c:	2168      	movs	r1, #104	; 0x68
 23fda4e:	f7fd fcea 	bl	23fb426 <_ZdlPvj>
 23fda52:	4620      	mov	r0, r4
 23fda54:	bd10      	pop	{r4, pc}

023fda56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fda56:	b510      	push	{r4, lr}
 23fda58:	4604      	mov	r4, r0
 23fda5a:	2128      	movs	r1, #40	; 0x28
 23fda5c:	f7fd fce3 	bl	23fb426 <_ZdlPvj>
 23fda60:	4620      	mov	r0, r4
 23fda62:	bd10      	pop	{r4, pc}

023fda64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fda64:	b510      	push	{r4, lr}
 23fda66:	4604      	mov	r4, r0
 23fda68:	2130      	movs	r1, #48	; 0x30
 23fda6a:	f7fd fcdc 	bl	23fb426 <_ZdlPvj>
 23fda6e:	4620      	mov	r0, r4
 23fda70:	bd10      	pop	{r4, pc}

023fda72 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fda72:	2168      	movs	r1, #104	; 0x68
 23fda74:	f7fd bcd7 	b.w	23fb426 <_ZdlPvj>

023fda78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fda78:	2128      	movs	r1, #40	; 0x28
 23fda7a:	f7fd bcd4 	b.w	23fb426 <_ZdlPvj>

023fda7e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fda7e:	2130      	movs	r1, #48	; 0x30
 23fda80:	f7fd bcd1 	b.w	23fb426 <_ZdlPvj>

023fda84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fda84:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fda86:	2500      	movs	r5, #0
 23fda88:	1cec      	adds	r4, r5, #3
 23fda8a:	428c      	cmp	r4, r1
 23fda8c:	d80d      	bhi.n	23fdaaa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fda8e:	1c6e      	adds	r6, r5, #1
 23fda90:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fda92:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fda94:	4297      	cmp	r7, r2
 23fda96:	d105      	bne.n	23fdaa4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fda98:	4426      	add	r6, r4
 23fda9a:	42b1      	cmp	r1, r6
 23fda9c:	d305      	bcc.n	23fdaaa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fda9e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fdaa0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fdaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fdaa4:	3401      	adds	r4, #1
 23fdaa6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fdaa8:	e7ee      	b.n	23fda88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fdaaa:	2000      	movs	r0, #0
 23fdaac:	e7f9      	b.n	23fdaa2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fdab0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fdab0:	200a      	movs	r0, #10
 23fdab2:	4a02      	ldr	r2, [pc, #8]	; (23fdabc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fdab4:	4902      	ldr	r1, [pc, #8]	; (23fdac0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fdab6:	f7fe b92f 	b.w	23fbd18 <panic_>
 23fdaba:	bf00      	nop
 23fdabc:	023fbca9 	.word	0x023fbca9
 23fdac0:	023ffb3c 	.word	0x023ffb3c

023fdac4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fdac4:	b430      	push	{r4, r5}
 23fdac6:	460d      	mov	r5, r1
 23fdac8:	4611      	mov	r1, r2
 23fdaca:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
 23fdacc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fdace:	6809      	ldr	r1, [r1, #0]
 23fdad0:	e9d3 4300 	ldrd	r4, r3, [r3]
 23fdad4:	6828      	ldr	r0, [r5, #0]
 23fdad6:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fdad8:	bc30      	pop	{r4, r5}
 23fdada:	4760      	bx	ip

023fdadc <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
 23fdadc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fdade:	b538      	push	{r3, r4, r5, lr}
 23fdae0:	4604      	mov	r4, r0
	switch (__op)
 23fdae2:	d102      	bne.n	23fdaea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fdae4:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fdae6:	6023      	str	r3, [r4, #0]
	}
 23fdae8:	e003      	b.n	23fdaf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
 23fdaea:	2a02      	cmp	r2, #2
 23fdaec:	d003      	beq.n	23fdaf6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
 23fdaee:	2a03      	cmp	r2, #3
 23fdaf0:	d00d      	beq.n	23fdb0e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
 23fdaf2:	2000      	movs	r0, #0
 23fdaf4:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fdaf6:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
 23fdaf8:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fdafa:	f7fd fc90 	bl	23fb41e <_Znwj>
 23fdafe:	4603      	mov	r3, r0
 23fdb00:	2800      	cmp	r0, #0
 23fdb02:	d0f0      	beq.n	23fdae6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
 23fdb04:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fdb08:	e883 0003 	stmia.w	r3, {r0, r1}
 23fdb0c:	e7eb      	b.n	23fdae6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fdb0e:	6800      	ldr	r0, [r0, #0]
 23fdb10:	2800      	cmp	r0, #0
 23fdb12:	d0ee      	beq.n	23fdaf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
 23fdb14:	2108      	movs	r1, #8
 23fdb16:	f7fd fc86 	bl	23fb426 <_ZdlPvj>
 23fdb1a:	e7ea      	b.n	23fdaf2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

023fdb1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fdb1c:	b510      	push	{r4, lr}
 23fdb1e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 23fdb20:	3058      	adds	r0, #88	; 0x58
 23fdb22:	f7fe fe71 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fdb26:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fdb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fdb2e:	f001 ba55 	b.w	23fefdc <_ZN6StringD1Ev>

023fdb32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fdb32:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fdb34:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fdb36:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fdb38:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fdb3a:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fdb3c:	d008      	beq.n	23fdb50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fdb3e:	b111      	cbz	r1, 23fdb46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fdb40:	684b      	ldr	r3, [r1, #4]
 23fdb42:	3301      	adds	r3, #1
 23fdb44:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fdb46:	6828      	ldr	r0, [r5, #0]
 23fdb48:	b108      	cbz	r0, 23fdb4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fdb4a:	f7fe fbba 	bl	23fc2c2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fdb4e:	602c      	str	r4, [r5, #0]
      }
 23fdb50:	bd38      	pop	{r3, r4, r5, pc}

023fdb52 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23fdb52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdb56:	b2da      	uxtb	r2, r3
 23fdb58:	2a09      	cmp	r2, #9
 23fdb5a:	d801      	bhi.n	23fdb60 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23fdb5c:	4618      	mov	r0, r3
 23fdb5e:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23fdb60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fdb64:	2b05      	cmp	r3, #5
 23fdb66:	d801      	bhi.n	23fdb6c <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23fdb68:	3857      	subs	r0, #87	; 0x57
 23fdb6a:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23fdb6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fdb70:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23fdb72:	bf94      	ite	ls
 23fdb74:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23fdb76:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23fdb7a:	4770      	bx	lr

023fdb7c <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fdb7c:	2300      	movs	r3, #0
    WiringBleLock() :
 23fdb7e:	b510      	push	{r4, lr}
            locked_(false) {
 23fdb80:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23fdb82:	4b04      	ldr	r3, [pc, #16]	; (23fdb94 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fdb84:	4604      	mov	r4, r0
 23fdb86:	6818      	ldr	r0, [r3, #0]
 23fdb88:	f7fd ffae 	bl	23fbae8 <os_mutex_recursive_lock>
        locked_ = true;
 23fdb8c:	2301      	movs	r3, #1
    }
 23fdb8e:	4620      	mov	r0, r4
        locked_ = true;
 23fdb90:	7023      	strb	r3, [r4, #0]
    }
 23fdb92:	bd10      	pop	{r4, pc}
 23fdb94:	1007aee8 	.word	0x1007aee8

023fdb98 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fdb98:	b510      	push	{r4, lr}
        if (locked_) {
 23fdb9a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fdb9c:	4604      	mov	r4, r0
        if (locked_) {
 23fdb9e:	b11b      	cbz	r3, 23fdba8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdba0:	4b02      	ldr	r3, [pc, #8]	; (23fdbac <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fdba2:	6818      	ldr	r0, [r3, #0]
 23fdba4:	f7fd ffae 	bl	23fbb04 <os_mutex_recursive_unlock>
    }
 23fdba8:	4620      	mov	r0, r4
 23fdbaa:	bd10      	pop	{r4, pc}
 23fdbac:	1007aee8 	.word	0x1007aee8

023fdbb0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fdbb0:	b082      	sub	sp, #8
    address_ = addr;
 23fdbb2:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fdbb4:	4603      	mov	r3, r0
    address_ = addr;
 23fdbb6:	6808      	ldr	r0, [r1, #0]
 23fdbb8:	6849      	ldr	r1, [r1, #4]
 23fdbba:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fdbbc:	466a      	mov	r2, sp
 23fdbbe:	ca03      	ldmia	r2!, {r0, r1}
 23fdbc0:	6018      	str	r0, [r3, #0]
}
 23fdbc2:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fdbc4:	6059      	str	r1, [r3, #4]
}
 23fdbc6:	b002      	add	sp, #8
 23fdbc8:	4770      	bx	lr

023fdbca <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fdbca:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fdbcc:	7982      	ldrb	r2, [r0, #6]
 23fdbce:	798b      	ldrb	r3, [r1, #6]
 23fdbd0:	429a      	cmp	r2, r3
 23fdbd2:	d106      	bne.n	23fdbe2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fdbd4:	2206      	movs	r2, #6
 23fdbd6:	f001 fc9b 	bl	23ff510 <memcmp>
 23fdbda:	fab0 f080 	clz	r0, r0
 23fdbde:	0940      	lsrs	r0, r0, #5
}
 23fdbe0:	bd08      	pop	{r3, pc}
    return false;
 23fdbe2:	2000      	movs	r0, #0
 23fdbe4:	e7fc      	b.n	23fdbe0 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fdbe8 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fdbe8:	b570      	push	{r4, r5, r6, lr}
 23fdbea:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fdbec:	4b38      	ldr	r3, [pc, #224]	; (23fdcd0 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fdbee:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fdbf0:	6818      	ldr	r0, [r3, #0]
 23fdbf2:	889b      	ldrh	r3, [r3, #4]
 23fdbf4:	9000      	str	r0, [sp, #0]
 23fdbf6:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fdbfa:	4b36      	ldr	r3, [pc, #216]	; (23fdcd4 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fdbfc:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fdbfe:	6818      	ldr	r0, [r3, #0]
 23fdc00:	889b      	ldrh	r3, [r3, #4]
 23fdc02:	9002      	str	r0, [sp, #8]
 23fdc04:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fdc08:	b97e      	cbnz	r6, 23fdc2a <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fdc0a:	2206      	movs	r2, #6
 23fdc0c:	4669      	mov	r1, sp
 23fdc0e:	4620      	mov	r0, r4
 23fdc10:	f001 fc7e 	bl	23ff510 <memcmp>
 23fdc14:	b138      	cbz	r0, 23fdc26 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fdc16:	2206      	movs	r2, #6
 23fdc18:	4620      	mov	r0, r4
 23fdc1a:	a902      	add	r1, sp, #8
 23fdc1c:	f001 fc78 	bl	23ff510 <memcmp>
 23fdc20:	3800      	subs	r0, #0
 23fdc22:	bf18      	it	ne
 23fdc24:	2001      	movne	r0, #1
}
 23fdc26:	b006      	add	sp, #24
 23fdc28:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fdc2a:	88a3      	ldrh	r3, [r4, #4]
 23fdc2c:	6820      	ldr	r0, [r4, #0]
 23fdc2e:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fdc32:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fdc36:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fdc38:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fdc3a:	d124      	bne.n	23fdc86 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fdc3c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fdc40:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fdc42:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fdc46:	4669      	mov	r1, sp
 23fdc48:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fdc4a:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fdc4e:	f001 fc5f 	bl	23ff510 <memcmp>
 23fdc52:	2800      	cmp	r0, #0
 23fdc54:	d03a      	beq.n	23fdccc <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fdc56:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fdc5a:	2206      	movs	r2, #6
 23fdc5c:	a902      	add	r1, sp, #8
 23fdc5e:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fdc60:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fdc64:	f001 fc54 	bl	23ff510 <memcmp>
 23fdc68:	b380      	cbz	r0, 23fdccc <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fdc6a:	7960      	ldrb	r0, [r4, #5]
 23fdc6c:	2e01      	cmp	r6, #1
 23fdc6e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fdc72:	d104      	bne.n	23fdc7e <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fdc74:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fdc76:	bf14      	ite	ne
 23fdc78:	2000      	movne	r0, #0
 23fdc7a:	2001      	moveq	r0, #1
 23fdc7c:	e7d3      	b.n	23fdc26 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fdc7e:	fab0 f080 	clz	r0, r0
 23fdc82:	0940      	lsrs	r0, r0, #5
 23fdc84:	e7cf      	b.n	23fdc26 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fdc86:	2e02      	cmp	r6, #2
 23fdc88:	d11e      	bne.n	23fdcc8 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fdc8a:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fdc8c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fdc90:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fdc94:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fdc98:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fdc9c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fdca0:	f001 fc36 	bl	23ff510 <memcmp>
 23fdca4:	b190      	cbz	r0, 23fdccc <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fdca6:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fdcaa:	2203      	movs	r2, #3
 23fdcac:	f10d 010b 	add.w	r1, sp, #11
 23fdcb0:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fdcb4:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fdcb8:	f001 fc2a 	bl	23ff510 <memcmp>
 23fdcbc:	b130      	cbz	r0, 23fdccc <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fdcbe:	7960      	ldrb	r0, [r4, #5]
 23fdcc0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fdcc4:	2840      	cmp	r0, #64	; 0x40
 23fdcc6:	e7d6      	b.n	23fdc76 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fdcc8:	2001      	movs	r0, #1
 23fdcca:	e7ac      	b.n	23fdc26 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fdccc:	2000      	movs	r0, #0
 23fdcce:	e7aa      	b.n	23fdc26 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fdcd0:	023ff87c 	.word	0x023ff87c
 23fdcd4:	023ffb7a 	.word	0x023ffb7a

023fdcd8 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fdcd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fdcdc:	6003      	str	r3, [r0, #0]
 23fdcde:	8083      	strh	r3, [r0, #4]
}
 23fdce0:	2000      	movs	r0, #0
 23fdce2:	4770      	bx	lr

023fdce4 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fdce4:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fdce6:	4602      	mov	r2, r0
 23fdce8:	b508      	push	{r3, lr}
        : address_{} {
 23fdcea:	6001      	str	r1, [r0, #0]
 23fdcec:	6041      	str	r1, [r0, #4]
    clear();
 23fdcee:	f7ff fff3 	bl	23fdcd8 <_ZN8particle10BleAddress5clearEv>
}
 23fdcf2:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fdcf4:	7191      	strb	r1, [r2, #6]
}
 23fdcf6:	bd08      	pop	{r3, pc}

023fdcf8 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fdcf8:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdcfa:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fdcfc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fdcfe:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdd00:	4b04      	ldr	r3, [pc, #16]	; (23fdd14 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fdd02:	f103 0110 	add.w	r1, r3, #16
 23fdd06:	f853 4b04 	ldr.w	r4, [r3], #4
 23fdd0a:	428b      	cmp	r3, r1
 23fdd0c:	f842 4b04 	str.w	r4, [r2], #4
 23fdd10:	d1f9      	bne.n	23fdd06 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fdd12:	bd10      	pop	{r4, pc}
 23fdd14:	023ff882 	.word	0x023ff882

023fdd18 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fdd18:	b510      	push	{r4, lr}
    if (uuid128) {
 23fdd1a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fdd1c:	4604      	mov	r4, r0
    if (uuid128) {
 23fdd1e:	b1b1      	cbz	r1, 23fdd4e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fdd20:	2a01      	cmp	r2, #1
 23fdd22:	f101 0210 	add.w	r2, r1, #16
 23fdd26:	d10a      	bne.n	23fdd3e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fdd28:	4601      	mov	r1, r0
 23fdd2a:	f853 0b04 	ldr.w	r0, [r3], #4
 23fdd2e:	4293      	cmp	r3, r2
 23fdd30:	f841 0b04 	str.w	r0, [r1], #4
 23fdd34:	d1f9      	bne.n	23fdd2a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fdd36:	2301      	movs	r3, #1
 23fdd38:	6123      	str	r3, [r4, #16]
}
 23fdd3a:	4620      	mov	r0, r4
 23fdd3c:	bd10      	pop	{r4, pc}
 23fdd3e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fdd40:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fdd44:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fdd46:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fdd4a:	d1f9      	bne.n	23fdd40 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fdd4c:	e7f3      	b.n	23fdd36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fdd4e:	2210      	movs	r2, #16
 23fdd50:	f001 fc15 	bl	23ff57e <memset>
 23fdd54:	e7f1      	b.n	23fdd3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fdd56 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
 23fdd56:	b538      	push	{r3, r4, r5, lr}
 23fdd58:	4604      	mov	r4, r0
 23fdd5a:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
 23fdd5c:	461a      	mov	r2, r3
 23fdd5e:	f7ff ffdb 	bl	23fdd18 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
}
 23fdd62:	4620      	mov	r0, r4
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fdd64:	81a5      	strh	r5, [r4, #12]
}
 23fdd66:	bd38      	pop	{r3, r4, r5, pc}

023fdd68 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
 23fdd68:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
 23fdd6a:	6902      	ldr	r2, [r0, #16]
 23fdd6c:	b922      	cbnz	r2, 23fdd78 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
 23fdd6e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdd70:	3800      	subs	r0, #0
 23fdd72:	bf18      	it	ne
 23fdd74:	2001      	movne	r0, #1
}
 23fdd76:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdd78:	2210      	movs	r2, #16
 23fdd7a:	4902      	ldr	r1, [pc, #8]	; (23fdd84 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
 23fdd7c:	f001 fbc8 	bl	23ff510 <memcmp>
 23fdd80:	e7f6      	b.n	23fdd70 <_ZNK8particle7BleUuid7isValidEv+0x8>
 23fdd82:	bf00      	nop
 23fdd84:	023ffcd0 	.word	0x023ffcd0

023fdd88 <_ZNK8particle7BleUuid4typeEv>:
}
 23fdd88:	6900      	ldr	r0, [r0, #16]
 23fdd8a:	4770      	bx	lr

023fdd8c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
 23fdd8c:	b538      	push	{r3, r4, r5, lr}
 23fdd8e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
 23fdd90:	2214      	movs	r2, #20
 23fdd92:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
 23fdd94:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
 23fdd96:	f001 fbf2 	bl	23ff57e <memset>
    if (type_ == BleUuidType::SHORT) {
 23fdd9a:	6923      	ldr	r3, [r4, #16]
 23fdd9c:	b91b      	cbnz	r3, 23fdda6 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
 23fdd9e:	89a3      	ldrh	r3, [r4, #12]
 23fdda0:	802b      	strh	r3, [r5, #0]
}
 23fdda2:	4628      	mov	r0, r5
 23fdda4:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
 23fdda6:	2301      	movs	r3, #1
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
 23fdda8:	4621      	mov	r1, r4
        uuid.type = BLE_UUID_TYPE_128BIT;
 23fddaa:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
 23fddac:	462b      	mov	r3, r5
 23fddae:	f104 0210 	add.w	r2, r4, #16
 23fddb2:	f851 0b04 	ldr.w	r0, [r1], #4
 23fddb6:	4291      	cmp	r1, r2
 23fddb8:	f843 0b04 	str.w	r0, [r3], #4
 23fddbc:	d1f9      	bne.n	23fddb2 <_ZN8particle7BleUuid7halUUIDEv+0x26>
 23fddbe:	e7f0      	b.n	23fdda2 <_ZN8particle7BleUuid7halUUIDEv+0x16>

023fddc0 <_ZNK8particle7BleUuid7shortedEv>:
}
 23fddc0:	8980      	ldrh	r0, [r0, #12]
 23fddc2:	4770      	bx	lr

023fddc4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
 23fddc4:	4770      	bx	lr

023fddc6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fddc6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fddc8:	6902      	ldr	r2, [r0, #16]
 23fddca:	690b      	ldr	r3, [r1, #16]
 23fddcc:	429a      	cmp	r2, r3
 23fddce:	d106      	bne.n	23fddde <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fddd0:	2210      	movs	r2, #16
 23fddd2:	f001 fb9d 	bl	23ff510 <memcmp>
 23fddd6:	fab0 f080 	clz	r0, r0
 23fddda:	0940      	lsrs	r0, r0, #5
}
 23fdddc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fddde:	2000      	movs	r0, #0
 23fdde0:	e7fc      	b.n	23fdddc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023fdde4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23fdde4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23fdde6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fddea:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23fddec:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23fddee:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fddf0:	4b33      	ldr	r3, [pc, #204]	; (23fdec0 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23fddf2:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fddf4:	f103 0110 	add.w	r1, r3, #16
 23fddf8:	f853 0b04 	ldr.w	r0, [r3], #4
 23fddfc:	428b      	cmp	r3, r1
 23fddfe:	f842 0b04 	str.w	r0, [r2], #4
 23fde02:	d1f9      	bne.n	23fddf8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23fde04:	b344      	cbz	r4, 23fde58 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23fde06:	2124      	movs	r1, #36	; 0x24
 23fde08:	4620      	mov	r0, r4
 23fde0a:	f001 fc22 	bl	23ff652 <strnlen>
 23fde0e:	2804      	cmp	r0, #4
 23fde10:	f04f 0500 	mov.w	r5, #0
 23fde14:	d123      	bne.n	23fde5e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23fde16:	f8ad 5004 	strh.w	r5, [sp, #4]
 23fde1a:	af01      	add	r7, sp, #4
 23fde1c:	1ca5      	adds	r5, r4, #2
 23fde1e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23fde20:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23fde24:	f7ff fe95 	bl	23fdb52 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23fde28:	f1b0 0800 	subs.w	r8, r0, #0
 23fde2c:	db12      	blt.n	23fde54 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23fde2e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23fde32:	f7ff fe8e 	bl	23fdb52 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23fde36:	2800      	cmp	r0, #0
 23fde38:	db0c      	blt.n	23fde54 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23fde3a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fde3c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23fde40:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fde42:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23fde46:	d1eb      	bne.n	23fde20 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23fde48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23fde4c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23fde4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fde52:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23fde54:	2300      	movs	r3, #0
 23fde56:	6133      	str	r3, [r6, #16]
}
 23fde58:	b002      	add	sp, #8
 23fde5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23fde5e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fde62:	2124      	movs	r1, #36	; 0x24
 23fde64:	4620      	mov	r0, r4
 23fde66:	f001 fbf4 	bl	23ff652 <strnlen>
 23fde6a:	42a8      	cmp	r0, r5
 23fde6c:	d807      	bhi.n	23fde7e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23fde6e:	4642      	mov	r2, r8
 23fde70:	2100      	movs	r1, #0
 23fde72:	4630      	mov	r0, r6
}
 23fde74:	b002      	add	sp, #8
 23fde76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23fde7a:	f001 bb80 	b.w	23ff57e <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fde7e:	f1b8 0f00 	cmp.w	r8, #0
 23fde82:	d0e9      	beq.n	23fde58 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23fde84:	5d60      	ldrb	r0, [r4, r5]
 23fde86:	f7ff fe64 	bl	23fdb52 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23fde8a:	0603      	lsls	r3, r0, #24
 23fde8c:	d415      	bmi.n	23fdeba <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23fde8e:	0100      	lsls	r0, r0, #4
 23fde90:	b2c7      	uxtb	r7, r0
 23fde92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fde96:	2124      	movs	r1, #36	; 0x24
 23fde98:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23fde9a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fde9e:	f001 fbd8 	bl	23ff652 <strnlen>
 23fdea2:	3501      	adds	r5, #1
 23fdea4:	42a8      	cmp	r0, r5
 23fdea6:	d908      	bls.n	23fdeba <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23fdea8:	5d60      	ldrb	r0, [r4, r5]
 23fdeaa:	f7ff fe52 	bl	23fdb52 <_ZN8particle11hexToNibbleEc>
 23fdeae:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23fdeb0:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23fdeb2:	bfa4      	itt	ge
 23fdeb4:	4338      	orrge	r0, r7
 23fdeb6:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fdeba:	3501      	adds	r5, #1
 23fdebc:	e7d1      	b.n	23fde62 <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23fdebe:	bf00      	nop
 23fdec0:	023ff882 	.word	0x023ff882

023fdec4 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23fdec4:	b513      	push	{r0, r1, r4, lr}
 23fdec6:	4604      	mov	r4, r0
 23fdec8:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23fdeca:	f7ff ff15 	bl	23fdcf8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23fdece:	4620      	mov	r0, r4
 23fded0:	9901      	ldr	r1, [sp, #4]
 23fded2:	f7ff ff87 	bl	23fdde4 <_ZN8particle7BleUuid9constructEPKc>
}
 23fded6:	4620      	mov	r0, r4
 23fded8:	b002      	add	sp, #8
 23fdeda:	bd10      	pop	{r4, pc}

023fdedc <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fdedc:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fdede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdee2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fdee4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fdee6:	8043      	strh	r3, [r0, #2]
 23fdee8:	220e      	movs	r2, #14
 23fdeea:	4629      	mov	r1, r5
 23fdeec:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fdeee:	7105      	strb	r5, [r0, #4]
 23fdef0:	3006      	adds	r0, #6
 23fdef2:	f001 fb44 	bl	23ff57e <memset>
 23fdef6:	f104 0014 	add.w	r0, r4, #20
 23fdefa:	f7ff fefd 	bl	23fdcf8 <_ZN8particle7BleUuidC1Ev>
 23fdefe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fdf02:	f7ff fef9 	bl	23fdcf8 <_ZN8particle7BleUuidC1Ev>
 23fdf06:	4904      	ldr	r1, [pc, #16]	; (23fdf18 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23fdf08:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fdf0c:	f001 f8b1 	bl	23ff072 <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23fdf10:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23fdf12:	6565      	str	r5, [r4, #84]	; 0x54
 23fdf14:	bd38      	pop	{r3, r4, r5, pc}
 23fdf16:	bf00      	nop
 23fdf18:	023ffaaa 	.word	0x023ffaaa

023fdf1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fdf1c:	b510      	push	{r4, lr}
    return data_ + size_;
 23fdf1e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fdf22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fdf26:	4293      	cmp	r3, r2
 23fdf28:	4618      	mov	r0, r3
 23fdf2a:	d005      	beq.n	23fdf38 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fdf2c:	6804      	ldr	r4, [r0, #0]
 23fdf2e:	3308      	adds	r3, #8
 23fdf30:	8824      	ldrh	r4, [r4, #0]
 23fdf32:	428c      	cmp	r4, r1
 23fdf34:	d1f7      	bne.n	23fdf26 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23fdf36:	bd10      	pop	{r4, pc}
        return nullptr;
 23fdf38:	2000      	movs	r0, #0
 23fdf3a:	e7fc      	b.n	23fdf36 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>

023fdf3c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fdf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdf3e:	4606      	mov	r6, r0
 23fdf40:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23fdf42:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fdf44:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23fdf46:	2900      	cmp	r1, #0
 23fdf48:	d050      	beq.n	23fdfec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23fdf4a:	2a00      	cmp	r2, #0
 23fdf4c:	d04e      	beq.n	23fdfec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fdf4e:	6804      	ldr	r4, [r0, #0]
 23fdf50:	2af4      	cmp	r2, #244	; 0xf4
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
 23fdf52:	7823      	ldrb	r3, [r4, #0]
 23fdf54:	bf28      	it	cs
 23fdf56:	22f4      	movcs	r2, #244	; 0xf4
 23fdf58:	b343      	cbz	r3, 23fdfac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23fdf5a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23fdf5c:	0798      	lsls	r0, r3, #30
 23fdf5e:	d509      	bpl.n	23fdf74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23fdf60:	2300      	movs	r3, #0
 23fdf62:	89a0      	ldrh	r0, [r4, #12]
 23fdf64:	9203      	str	r2, [sp, #12]
 23fdf66:	f7fd fe2f 	bl	23fbbc8 <hal_ble_gatt_server_set_characteristic_value>
 23fdf6a:	2800      	cmp	r0, #0
 23fdf6c:	9a03      	ldr	r2, [sp, #12]
 23fdf6e:	da03      	bge.n	23fdf78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
 23fdf70:	b005      	add	sp, #20
 23fdf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23fdf74:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fdf78:	6834      	ldr	r4, [r6, #0]
 23fdf7a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23fdf7c:	06d9      	lsls	r1, r3, #27
 23fdf7e:	d509      	bpl.n	23fdf94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23fdf80:	2f01      	cmp	r7, #1
 23fdf82:	d007      	beq.n	23fdf94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdf84:	2300      	movs	r3, #0
 23fdf86:	4629      	mov	r1, r5
 23fdf88:	89a0      	ldrh	r0, [r4, #12]
}
 23fdf8a:	b005      	add	sp, #20
 23fdf8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdf90:	f7fd be60 	b.w	23fbc54 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23fdf94:	069b      	lsls	r3, r3, #26
 23fdf96:	d5eb      	bpl.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fdf98:	2f02      	cmp	r7, #2
 23fdf9a:	d0e9      	beq.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdf9c:	2300      	movs	r3, #0
 23fdf9e:	4629      	mov	r1, r5
 23fdfa0:	89a0      	ldrh	r0, [r4, #12]
}
 23fdfa2:	b005      	add	sp, #20
 23fdfa4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdfa8:	f7fd be62 	b.w	23fbc70 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23fdfac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fdfb0:	8860      	ldrh	r0, [r4, #2]
 23fdfb2:	4288      	cmp	r0, r1
 23fdfb4:	d01c      	beq.n	23fdff0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23fdfb6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23fdfb8:	074e      	lsls	r6, r1, #29
 23fdfba:	d501      	bpl.n	23fdfc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23fdfbc:	2f01      	cmp	r7, #1
 23fdfbe:	d104      	bne.n	23fdfca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fdfc0:	070b      	lsls	r3, r1, #28
 23fdfc2:	d409      	bmi.n	23fdfd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23fdfc4:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fdfc8:	e7d2      	b.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdfca:	89a1      	ldrh	r1, [r4, #12]
 23fdfcc:	9300      	str	r3, [sp, #0]
 23fdfce:	4613      	mov	r3, r2
 23fdfd0:	462a      	mov	r2, r5
 23fdfd2:	f7fd fe15 	bl	23fbc00 <hal_ble_gatt_client_write_without_response>
 23fdfd6:	e7cb      	b.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fdfd8:	2f02      	cmp	r7, #2
 23fdfda:	d0f3      	beq.n	23fdfc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fdfdc:	2300      	movs	r3, #0
 23fdfde:	89a1      	ldrh	r1, [r4, #12]
 23fdfe0:	9300      	str	r3, [sp, #0]
 23fdfe2:	4613      	mov	r3, r2
 23fdfe4:	462a      	mov	r2, r5
 23fdfe6:	f7fd fdfd 	bl	23fbbe4 <hal_ble_gatt_client_write_with_response>
 23fdfea:	e7c1      	b.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fdfec:	4802      	ldr	r0, [pc, #8]	; (23fdff8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23fdfee:	e7bf      	b.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23fdff0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fdff4:	e7bc      	b.n	23fdf70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fdff6:	bf00      	nop
 23fdff8:	fffffef2 	.word	0xfffffef2

023fdffc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
 23fdffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fe000:	2600      	movs	r6, #0
 23fe002:	4607      	mov	r7, r0
 23fe004:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fe006:	2028      	movs	r0, #40	; 0x28
 23fe008:	460c      	mov	r4, r1
 23fe00a:	f7fd fa08 	bl	23fb41e <_Znwj>
	  auto __pi = ::new (__mem)
 23fe00e:	1e05      	subs	r5, r0, #0
 23fe010:	f105 080c 	add.w	r8, r5, #12
 23fe014:	d00f      	beq.n	23fe036 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe016:	2301      	movs	r3, #1
 23fe018:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fe01c:	4b08      	ldr	r3, [pc, #32]	; (23fe040 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
              characteristicsDiscovered_(false) {
 23fe01e:	4640      	mov	r0, r8
 23fe020:	602b      	str	r3, [r5, #0]
 23fe022:	f7ff fe69 	bl	23fdcf8 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
 23fe026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
 23fe028:	622e      	str	r6, [r5, #32]
 23fe02a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
 23fe02e:	4646      	mov	r6, r8
 23fe030:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 23fe032:	6823      	ldr	r3, [r4, #0]
 23fe034:	6033      	str	r3, [r6, #0]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fe036:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
 23fe038:	e9c7 8500 	strd	r8, r5, [r7]
 23fe03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe040:	023ffc90 	.word	0x023ffc90

023fe044 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fe044:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fe046:	2500      	movs	r5, #0
 23fe048:	4606      	mov	r6, r0
 23fe04a:	6005      	str	r5, [r0, #0]
 23fe04c:	2030      	movs	r0, #48	; 0x30
 23fe04e:	f7fd f9e6 	bl	23fb41e <_Znwj>
	  auto __pi = ::new (__mem)
 23fe052:	4604      	mov	r4, r0
 23fe054:	b198      	cbz	r0, 23fe07e <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe056:	2301      	movs	r3, #1
 23fe058:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fe05c:	4b0a      	ldr	r3, [pc, #40]	; (23fe088 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fe05e:	300e      	adds	r0, #14
 23fe060:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fe064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe068:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fe06c:	f7ff fe3a 	bl	23fdce4 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fe070:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fe074:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fe078:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fe07c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fe07e:	6074      	str	r4, [r6, #4]
 23fe080:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fe082:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fe084:	6034      	str	r4, [r6, #0]
 23fe086:	bd70      	pop	{r4, r5, r6, pc}
 23fe088:	023ffcac 	.word	0x023ffcac

023fe08c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
 23fe08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe08e:	460d      	mov	r5, r1
 23fe090:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe092:	a801      	add	r0, sp, #4
 23fe094:	f7ff fd72 	bl	23fdb7c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fe098:	682a      	ldr	r2, [r5, #0]
 23fe09a:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fe09c:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fe0a0:	6023      	str	r3, [r4, #0]
 23fe0a2:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fe0a6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fe0a8:	f7ff fd76 	bl	23fdb98 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fe0ac:	4620      	mov	r0, r4
 23fe0ae:	b003      	add	sp, #12
 23fe0b0:	bd30      	pop	{r4, r5, pc}

023fe0b2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fe0b2:	b530      	push	{r4, r5, lr}
 23fe0b4:	4605      	mov	r5, r0
 23fe0b6:	460c      	mov	r4, r1
 23fe0b8:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fe0ba:	a801      	add	r0, sp, #4
 23fe0bc:	f7ff fd5e 	bl	23fdb7c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fe0c0:	682a      	ldr	r2, [r5, #0]
 23fe0c2:	6823      	ldr	r3, [r4, #0]
 23fe0c4:	8812      	ldrh	r2, [r2, #0]
 23fe0c6:	881b      	ldrh	r3, [r3, #0]
 23fe0c8:	429a      	cmp	r2, r3
 23fe0ca:	d10d      	bne.n	23fe0e8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fe0cc:	4629      	mov	r1, r5
 23fe0ce:	a802      	add	r0, sp, #8
 23fe0d0:	f7ff ffdc 	bl	23fe08c <_ZNK8particle13BlePeerDevice7addressEv>
 23fe0d4:	4621      	mov	r1, r4
 23fe0d6:	a804      	add	r0, sp, #16
 23fe0d8:	f7ff ffd8 	bl	23fe08c <_ZNK8particle13BlePeerDevice7addressEv>
 23fe0dc:	a904      	add	r1, sp, #16
 23fe0de:	a802      	add	r0, sp, #8
 23fe0e0:	f7ff fd73 	bl	23fdbca <_ZNK8particle10BleAddresseqERKS0_>
 23fe0e4:	4604      	mov	r4, r0
 23fe0e6:	b900      	cbnz	r0, 23fe0ea <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fe0e8:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fe0ea:	a801      	add	r0, sp, #4
 23fe0ec:	f7ff fd54 	bl	23fdb98 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe0f0:	4620      	mov	r0, r4
 23fe0f2:	b007      	add	sp, #28
 23fe0f4:	bd30      	pop	{r4, r5, pc}
	...

023fe0f8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fe0f8:	b570      	push	{r4, r5, r6, lr}
 23fe0fa:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fe0fc:	2074      	movs	r0, #116	; 0x74
 23fe0fe:	f7fd f98e 	bl	23fb41e <_Znwj>
 23fe102:	4604      	mov	r4, r0
 23fe104:	b1a0      	cbz	r0, 23fe130 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fe106:	2500      	movs	r5, #0
 23fe108:	e9c0 5500 	strd	r5, r5, [r0]
 23fe10c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fe110:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fe114:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fe118:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fe11a:	3024      	adds	r0, #36	; 0x24
 23fe11c:	f7ff ff92 	bl	23fe044 <_ZN8particle13BlePeerDeviceC1Ev>
 23fe120:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fe124:	f7ff ff8e 	bl	23fe044 <_ZN8particle13BlePeerDeviceC1Ev>
 23fe128:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fe12a:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fe12c:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fe12e:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fe130:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fe132:	b924      	cbnz	r4, 23fe13e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fe134:	200a      	movs	r0, #10
 23fe136:	4a0a      	ldr	r2, [pc, #40]	; (23fe160 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fe138:	490a      	ldr	r1, [pc, #40]	; (23fe164 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fe13a:	f7fd fded 	bl	23fbd18 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fe13e:	2000      	movs	r0, #0
 23fe140:	f7fd fcee 	bl	23fbb20 <hal_ble_stack_init>
 23fe144:	b120      	cbz	r0, 23fe150 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fe146:	200a      	movs	r0, #10
 23fe148:	4a05      	ldr	r2, [pc, #20]	; (23fe160 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fe14a:	4907      	ldr	r1, [pc, #28]	; (23fe168 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fe14c:	f7fd fde4 	bl	23fbd18 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fe150:	2200      	movs	r2, #0
 23fe152:	6831      	ldr	r1, [r6, #0]
 23fe154:	4805      	ldr	r0, [pc, #20]	; (23fe16c <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fe156:	f7fd fd6f 	bl	23fbc38 <hal_ble_set_callback_on_periph_link_events>
}
 23fe15a:	4630      	mov	r0, r6
 23fe15c:	bd70      	pop	{r4, r5, r6, pc}
 23fe15e:	bf00      	nop
 23fe160:	023fbca9 	.word	0x023fbca9
 23fe164:	023ffb3c 	.word	0x023ffb3c
 23fe168:	023ffb81 	.word	0x023ffb81
 23fe16c:	023fe689 	.word	0x023fe689

023fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fe170:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fe172:	4c0a      	ldr	r4, [pc, #40]	; (23fe19c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fe174:	e8d4 3f8f 	ldab	r3, [r4]
 23fe178:	07db      	lsls	r3, r3, #31
 23fe17a:	d40c      	bmi.n	23fe196 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fe17c:	4620      	mov	r0, r4
 23fe17e:	f7fd f961 	bl	23fb444 <__cxa_guard_acquire>
 23fe182:	b140      	cbz	r0, 23fe196 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fe184:	4806      	ldr	r0, [pc, #24]	; (23fe1a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fe186:	f7ff ffb7 	bl	23fe0f8 <_ZN8particle14BleLocalDeviceC1Ev>
 23fe18a:	4620      	mov	r0, r4
 23fe18c:	f7fd f95f 	bl	23fb44e <__cxa_guard_release>
 23fe190:	4804      	ldr	r0, [pc, #16]	; (23fe1a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fe192:	f001 f9af 	bl	23ff4f4 <atexit>
    return instance;
}
 23fe196:	4802      	ldr	r0, [pc, #8]	; (23fe1a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fe198:	bd10      	pop	{r4, pc}
 23fe19a:	bf00      	nop
 23fe19c:	1007aee0 	.word	0x1007aee0
 23fe1a0:	1007aeec 	.word	0x1007aeec
 23fe1a4:	023fe935 	.word	0x023fe935

023fe1a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fe1a8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23fe1aa:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fe1ac:	4604      	mov	r4, r0
    switch (event->type) {
 23fe1ae:	3b09      	subs	r3, #9
 23fe1b0:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fe1b2:	460d      	mov	r5, r1
 23fe1b4:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23fe1b6:	d811      	bhi.n	23fe1dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23fe1b8:	f7ff ffda 	bl	23fe170 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fe1bc:	88a1      	ldrh	r1, [r4, #4]
 23fe1be:	6800      	ldr	r0, [r0, #0]
 23fe1c0:	f7ff feac 	bl	23fdf1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23fe1c4:	4603      	mov	r3, r0
 23fe1c6:	b958      	cbnz	r0, 23fe1e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23fe1c8:	2220      	movs	r2, #32
 23fe1ca:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23fe1ce:	4a0b      	ldr	r2, [pc, #44]	; (23fe1fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23fe1d0:	2032      	movs	r0, #50	; 0x32
 23fe1d2:	9200      	str	r2, [sp, #0]
 23fe1d4:	490a      	ldr	r1, [pc, #40]	; (23fe200 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23fe1d6:	aa04      	add	r2, sp, #16
 23fe1d8:	f7fd fdac 	bl	23fbd34 <log_message>
}
 23fe1dc:	b00d      	add	sp, #52	; 0x34
 23fe1de:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23fe1e0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23fe1e2:	2a00      	cmp	r2, #0
 23fe1e4:	d0fa      	beq.n	23fe1dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23fe1e6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe1ea:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23fe1ee:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23fe1f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23fe1f4:	aa04      	add	r2, sp, #16
 23fe1f6:	a903      	add	r1, sp, #12
 23fe1f8:	47a0      	blx	r4
}
 23fe1fa:	e7ef      	b.n	23fe1dc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23fe1fc:	023ffbc3 	.word	0x023ffbc3
 23fe200:	023ffb53 	.word	0x023ffb53

023fe204 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fe204:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fe206:	2000      	movs	r0, #0
 23fe208:	f7fd fc8a 	bl	23fbb20 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fe20c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fe210:	bd08      	pop	{r3, pc}

023fe212 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
 23fe212:	b919      	cbnz	r1, 23fe21c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
 23fe214:	460a      	mov	r2, r1
 23fe216:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
 23fe218:	f7fd bc90 	b.w	23fbb3c <hal_ble_gap_set_advertising_data>
 23fe21c:	2200      	movs	r2, #0
 23fe21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe222:	e7f9      	b.n	23fe218 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

023fe224 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
 23fe224:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
 23fe226:	69d8      	ldr	r0, [r3, #28]
}
 23fe228:	2800      	cmp	r0, #0
 23fe22a:	bfd4      	ite	le
 23fe22c:	2000      	movle	r0, #0
 23fe22e:	2001      	movgt	r0, #1
 23fe230:	4770      	bx	lr

023fe232 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fe232:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fe234:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fe236:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fe238:	6843      	ldr	r3, [r0, #4]
 23fe23a:	db02      	blt.n	23fe242 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fe23c:	1862      	adds	r2, r4, r1
 23fe23e:	429a      	cmp	r2, r3
 23fe240:	dd00      	ble.n	23fe244 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fe242:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fe244:	682a      	ldr	r2, [r5, #0]
 23fe246:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fe248:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fe24a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe24c:	1a52      	subs	r2, r2, r1
 23fe24e:	f001 f97c 	bl	23ff54a <memmove>
    size_ -= n;
 23fe252:	686a      	ldr	r2, [r5, #4]
 23fe254:	1b12      	subs	r2, r2, r4
 23fe256:	606a      	str	r2, [r5, #4]
}
 23fe258:	bd38      	pop	{r3, r4, r5, pc}

023fe25a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fe25a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
 23fe25c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fe25e:	4604      	mov	r4, r0
 23fe260:	460d      	mov	r5, r1
 23fe262:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe266:	ab01      	add	r3, sp, #4
 23fe268:	f7ff fc0c 	bl	23fda84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
 23fe26c:	4602      	mov	r2, r0
 23fe26e:	b138      	cbz	r0, 23fe280 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
 23fe270:	4620      	mov	r0, r4
 23fe272:	9901      	ldr	r1, [sp, #4]
 23fe274:	f7ff ffdd 	bl	23fe232 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
 23fe278:	4629      	mov	r1, r5
 23fe27a:	4620      	mov	r0, r4
 23fe27c:	f7ff ffed 	bl	23fe25a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
 23fe280:	b003      	add	sp, #12
 23fe282:	bd30      	pop	{r4, r5, pc}

023fe284 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
 23fe284:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
 23fe286:	460c      	mov	r4, r1
 23fe288:	b929      	cbnz	r1, 23fe296 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
 23fe28a:	460a      	mov	r2, r1
 23fe28c:	4608      	mov	r0, r1
}
 23fe28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23fe292:	f7fd bc61 	b.w	23fbb58 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
 23fe296:	2101      	movs	r1, #1
 23fe298:	4620      	mov	r0, r4
 23fe29a:	f7ff ffde 	bl	23fe25a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23fe29e:	e9d4 0100 	ldrd	r0, r1, [r4]
 23fe2a2:	2200      	movs	r2, #0
 23fe2a4:	e7f3      	b.n	23fe28e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

023fe2a6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
 23fe2a6:	b538      	push	{r3, r4, r5, lr}
 23fe2a8:	4604      	mov	r4, r0
 23fe2aa:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
 23fe2ac:	f7ff ffb1 	bl	23fe212 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
 23fe2b0:	2800      	cmp	r0, #0
 23fe2b2:	db0a      	blt.n	23fe2ca <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
 23fe2b4:	4629      	mov	r1, r5
 23fe2b6:	4620      	mov	r0, r4
 23fe2b8:	f7ff ffe4 	bl	23fe284 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
 23fe2bc:	2800      	cmp	r0, #0
 23fe2be:	db04      	blt.n	23fe2ca <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
 23fe2c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
 23fe2c4:	2000      	movs	r0, #0
 23fe2c6:	f7fd bc55 	b.w	23fbb74 <hal_ble_gap_start_advertising>
}
 23fe2ca:	bd38      	pop	{r3, r4, r5, pc}

023fe2cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 23fe2cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe2ce:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 23fe2d0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe2d2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe2d4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
 23fe2d6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe2d8:	f7fd f8a1 	bl	23fb41e <_Znwj>
 23fe2dc:	b118      	cbz	r0, 23fe2e6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fe2de:	682b      	ldr	r3, [r5, #0]
 23fe2e0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe2e2:	686b      	ldr	r3, [r5, #4]
 23fe2e4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe2e6:	4b03      	ldr	r3, [pc, #12]	; (23fe2f4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe2e8:	6020      	str	r0, [r4, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe2ea:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe2ec:	4b02      	ldr	r3, [pc, #8]	; (23fe2f8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
      }
 23fe2ee:	4620      	mov	r0, r4
	    _M_manager = &_My_handler::_M_manager;
 23fe2f0:	60a3      	str	r3, [r4, #8]
      }
 23fe2f2:	bd38      	pop	{r3, r4, r5, pc}
 23fe2f4:	023fdac5 	.word	0x023fdac5
 23fe2f8:	023fdadd 	.word	0x023fdadd

023fe2fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fe2fc:	680b      	ldr	r3, [r1, #0]
 23fe2fe:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fe300:	b113      	cbz	r3, 23fe308 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fe302:	685a      	ldr	r2, [r3, #4]
 23fe304:	3201      	adds	r2, #1
 23fe306:	605a      	str	r2, [r3, #4]
      }
 23fe308:	4770      	bx	lr

023fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23fe30a:	b510      	push	{r4, lr}
 23fe30c:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe30e:	f851 3b04 	ldr.w	r3, [r1], #4
 23fe312:	f840 3b04 	str.w	r3, [r0], #4
 23fe316:	f7ff fff1 	bl	23fe2fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fe31a:	6823      	ldr	r3, [r4, #0]
 23fe31c:	b90b      	cbnz	r3, 23fe322 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fe31e:	f7ff fbc7 	bl	23fdab0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fe322:	4620      	mov	r0, r4
 23fe324:	bd10      	pop	{r4, pc}

023fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fe326:	b510      	push	{r4, lr}
 23fe328:	4604      	mov	r4, r0
 23fe32a:	f851 3b04 	ldr.w	r3, [r1], #4
 23fe32e:	f840 3b04 	str.w	r3, [r0], #4
 23fe332:	f7ff ffe3 	bl	23fe2fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fe336:	4620      	mov	r0, r4
 23fe338:	bd10      	pop	{r4, pc}

023fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fe33a:	b510      	push	{r4, lr}
 23fe33c:	4604      	mov	r4, r0
 23fe33e:	f851 3b04 	ldr.w	r3, [r1], #4
 23fe342:	f840 3b04 	str.w	r3, [r0], #4
 23fe346:	f7ff ffd9 	bl	23fe2fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fe34a:	4620      	mov	r0, r4
 23fe34c:	bd10      	pop	{r4, pc}

023fe34e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
 23fe34e:	b510      	push	{r4, lr}
 23fe350:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fe352:	3004      	adds	r0, #4
 23fe354:	f7fe f952 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe358:	4620      	mov	r0, r4
 23fe35a:	bd10      	pop	{r4, pc}

023fe35c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe35c:	b570      	push	{r4, r5, r6, lr}
 23fe35e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe360:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fe364:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe368:	42ae      	cmp	r6, r5
 23fe36a:	d004      	beq.n	23fe376 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fe36c:	1d28      	adds	r0, r5, #4
 23fe36e:	f7fe f945 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe372:	3508      	adds	r5, #8
 23fe374:	e7f8      	b.n	23fe368 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fe376:	6820      	ldr	r0, [r4, #0]
 23fe378:	f7fd fe02 	bl	23fbf80 <free>
}
 23fe37c:	4620      	mov	r0, r4
 23fe37e:	bd70      	pop	{r4, r5, r6, pc}

023fe380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe380:	b570      	push	{r4, r5, r6, lr}
 23fe382:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe384:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fe388:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe38c:	42ae      	cmp	r6, r5
 23fe38e:	d004      	beq.n	23fe39a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fe390:	1d28      	adds	r0, r5, #4
 23fe392:	f7fe f933 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe396:	3508      	adds	r5, #8
 23fe398:	e7f8      	b.n	23fe38c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fe39a:	6820      	ldr	r0, [r4, #0]
 23fe39c:	f7fd fdf0 	bl	23fbf80 <free>
}
 23fe3a0:	4620      	mov	r0, r4
 23fe3a2:	bd70      	pop	{r4, r5, r6, pc}

023fe3a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fe3a4:	b510      	push	{r4, lr}
 23fe3a6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fe3a8:	3024      	adds	r0, #36	; 0x24
 23fe3aa:	f7ff ffe9 	bl	23fe380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe3ae:	f104 0018 	add.w	r0, r4, #24
 23fe3b2:	f7ff ffd3 	bl	23fe35c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fe3b6:	bd10      	pop	{r4, pc}

023fe3b8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
	__r._M_pi = _M_pi;
 23fe3b8:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
 23fe3ba:	b513      	push	{r0, r1, r4, lr}
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe3bc:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
 23fe3c0:	e9c1 3300 	strd	r3, r3, [r1]
 23fe3c4:	6803      	ldr	r3, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe3c6:	6004      	str	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe3c8:	9300      	str	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe3ca:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
 23fe3cc:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
 23fe3ce:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fe3d0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
 23fe3d2:	f7fe f913 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 23fe3d6:	b002      	add	sp, #8
 23fe3d8:	bd10      	pop	{r4, pc}

023fe3da <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fe3da:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe3dc:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe3de:	b90a      	cbnz	r2, 23fe3e4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fe3e0:	f000 ff72 	bl	23ff2c8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe3e4:	68c3      	ldr	r3, [r0, #12]
    }
 23fe3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe3ea:	4718      	bx	r3

023fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fe3ec:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fe3ee:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fe3f0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe3f2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe3f4:	dd03      	ble.n	23fe3fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fe3f6:	f7fd fdd1 	bl	23fbf9c <realloc>
            if (!d) {
 23fe3fa:	b918      	cbnz	r0, 23fe404 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fe3fc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fe3fe:	f7fd fdbf 	bl	23fbf80 <free>
        T* d = nullptr;
 23fe402:	2000      	movs	r0, #0
        data_ = d;
 23fe404:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe406:	60a5      	str	r5, [r4, #8]
        return true;
 23fe408:	2001      	movs	r0, #1
 23fe40a:	e7f7      	b.n	23fe3fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fe40c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fe40c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fe40e:	6883      	ldr	r3, [r0, #8]
 23fe410:	428b      	cmp	r3, r1
 23fe412:	da02      	bge.n	23fe41a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fe414:	f7ff ffea 	bl	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fe418:	bd08      	pop	{r3, pc}
    return true;
 23fe41a:	2001      	movs	r0, #1
 23fe41c:	e7fc      	b.n	23fe418 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fe41e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe422:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe424:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe426:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe428:	4419      	add	r1, r3
 23fe42a:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe42c:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe42e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe430:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe432:	dc12      	bgt.n	23fe45a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fe434:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe436:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe438:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe43a:	4631      	mov	r1, r6
 23fe43c:	1bd2      	subs	r2, r2, r7
 23fe43e:	1970      	adds	r0, r6, r5
 23fe440:	f001 f883 	bl	23ff54a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fe444:	462a      	mov	r2, r5
 23fe446:	4641      	mov	r1, r8
 23fe448:	4630      	mov	r0, r6
 23fe44a:	f001 f871 	bl	23ff530 <memcpy>
    return true;
 23fe44e:	2001      	movs	r0, #1
    size_ += n;
 23fe450:	6863      	ldr	r3, [r4, #4]
 23fe452:	442b      	add	r3, r5
 23fe454:	6063      	str	r3, [r4, #4]
}
 23fe456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe45a:	f7ff ffc7 	bl	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe45e:	2800      	cmp	r0, #0
 23fe460:	d1e8      	bne.n	23fe434 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fe462:	e7f8      	b.n	23fe456 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fe464 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe466:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe468:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fe46c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe46e:	4604      	mov	r4, r0
 23fe470:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe472:	da0b      	bge.n	23fe48c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fe474:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe476:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe478:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe47a:	1b52      	subs	r2, r2, r5
 23fe47c:	1c48      	adds	r0, r1, #1
 23fe47e:	f001 f864 	bl	23ff54a <memmove>
    new(p) T(std::move(value));
 23fe482:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fe484:	6863      	ldr	r3, [r4, #4]
 23fe486:	3301      	adds	r3, #1
 23fe488:	6063      	str	r3, [r4, #4]
}
 23fe48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe48c:	3101      	adds	r1, #1
 23fe48e:	f7ff ffad 	bl	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe492:	2800      	cmp	r0, #0
 23fe494:	d1ee      	bne.n	23fe474 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fe496:	e7f8      	b.n	23fe48a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fe498 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe498:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fe49a:	6841      	ldr	r1, [r0, #4]
 23fe49c:	f7ff bfe2 	b.w	23fe464 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fe4a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe4a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fe4a4:	4604      	mov	r4, r0
 23fe4a6:	461d      	mov	r5, r3
 23fe4a8:	460f      	mov	r7, r1
 23fe4aa:	ab01      	add	r3, sp, #4
 23fe4ac:	4690      	mov	r8, r2
 23fe4ae:	460a      	mov	r2, r1
 23fe4b0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe4b4:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fe4b8:	f7ff fae4 	bl	23fda84 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fe4bc:	1cae      	adds	r6, r5, #2
 23fe4be:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fe4c0:	6863      	ldr	r3, [r4, #4]
 23fe4c2:	f1b9 0f00 	cmp.w	r9, #0
 23fe4c6:	d126      	bne.n	23fe516 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fe4c8:	b328      	cbz	r0, 23fe516 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe4ca:	4433      	add	r3, r6
 23fe4cc:	1a1b      	subs	r3, r3, r0
 23fe4ce:	2bff      	cmp	r3, #255	; 0xff
 23fe4d0:	d809      	bhi.n	23fe4e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fe4d2:	4620      	mov	r0, r4
 23fe4d4:	9901      	ldr	r1, [sp, #4]
 23fe4d6:	f7ff feac 	bl	23fe232 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe4da:	6861      	ldr	r1, [r4, #4]
 23fe4dc:	4620      	mov	r0, r4
 23fe4de:	4431      	add	r1, r6
 23fe4e0:	f7ff ff94 	bl	23fe40c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe4e4:	b918      	cbnz	r0, 23fe4ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fe4e6:	6860      	ldr	r0, [r4, #4]
}
 23fe4e8:	b003      	add	sp, #12
 23fe4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fe4ee:	1c6a      	adds	r2, r5, #1
 23fe4f0:	4620      	mov	r0, r4
 23fe4f2:	9901      	ldr	r1, [sp, #4]
 23fe4f4:	b2d2      	uxtb	r2, r2
 23fe4f6:	f7ff ffb5 	bl	23fe464 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fe4fa:	9901      	ldr	r1, [sp, #4]
 23fe4fc:	463a      	mov	r2, r7
 23fe4fe:	3101      	adds	r1, #1
 23fe500:	4620      	mov	r0, r4
 23fe502:	f7ff ffaf 	bl	23fe464 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fe506:	462b      	mov	r3, r5
 23fe508:	4642      	mov	r2, r8
 23fe50a:	9901      	ldr	r1, [sp, #4]
 23fe50c:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fe50e:	4620      	mov	r0, r4
 23fe510:	f7ff ff85 	bl	23fe41e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fe514:	e7e7      	b.n	23fe4e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe516:	18f1      	adds	r1, r6, r3
 23fe518:	29ff      	cmp	r1, #255	; 0xff
 23fe51a:	d8e4      	bhi.n	23fe4e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe51c:	4620      	mov	r0, r4
 23fe51e:	f7ff ff75 	bl	23fe40c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe522:	2800      	cmp	r0, #0
 23fe524:	d0df      	beq.n	23fe4e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fe526:	1c69      	adds	r1, r5, #1
 23fe528:	4620      	mov	r0, r4
 23fe52a:	b2c9      	uxtb	r1, r1
 23fe52c:	f7ff ffb4 	bl	23fe498 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fe530:	4639      	mov	r1, r7
 23fe532:	4620      	mov	r0, r4
 23fe534:	f7ff ffb0 	bl	23fe498 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fe538:	462b      	mov	r3, r5
 23fe53a:	4642      	mov	r2, r8
 23fe53c:	6861      	ldr	r1, [r4, #4]
 23fe53e:	e7e6      	b.n	23fe50e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fe540 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe540:	b430      	push	{r4, r5}
 23fe542:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fe546:	b11a      	cbz	r2, 23fe550 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fe548:	9502      	str	r5, [sp, #8]
}
 23fe54a:	bc30      	pop	{r4, r5}
 23fe54c:	f7ff bfa8 	b.w	23fe4a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fe550:	6840      	ldr	r0, [r0, #4]
}
 23fe552:	bc30      	pop	{r4, r5}
 23fe554:	4770      	bx	lr

023fe556 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fe556:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fe558:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe55a:	2206      	movs	r2, #6
 23fe55c:	e9c0 3300 	strd	r3, r3, [r0]
 23fe560:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe562:	9300      	str	r3, [sp, #0]
 23fe564:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fe566:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe568:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe56c:	4619      	mov	r1, r3
 23fe56e:	f10d 020f 	add.w	r2, sp, #15
 23fe572:	f7ff ffe5 	bl	23fe540 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fe576:	4620      	mov	r0, r4
 23fe578:	b004      	add	sp, #16
 23fe57a:	bd10      	pop	{r4, pc}

023fe57c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe57c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe580:	4604      	mov	r4, r0
 23fe582:	460d      	mov	r5, r1
 23fe584:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe586:	d914      	bls.n	23fe5b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe588:	4290      	cmp	r0, r2
 23fe58a:	d213      	bcs.n	23fe5b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe58c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe590:	1a75      	subs	r5, r6, r1
 23fe592:	f1a1 0708 	sub.w	r7, r1, #8
 23fe596:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe598:	42b7      	cmp	r7, r6
 23fe59a:	d018      	beq.n	23fe5ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe59c:	b11c      	cbz	r4, 23fe5a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe59e:	4631      	mov	r1, r6
 23fe5a0:	4620      	mov	r0, r4
 23fe5a2:	f7ff feca 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fe5a6:	1d30      	adds	r0, r6, #4
 23fe5a8:	f7fe f828 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe5ac:	3e08      	subs	r6, #8
 23fe5ae:	3c08      	subs	r4, #8
 23fe5b0:	e7f2      	b.n	23fe598 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe5b2:	d00c      	beq.n	23fe5ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe5b4:	42b5      	cmp	r5, r6
 23fe5b6:	d00a      	beq.n	23fe5ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe5b8:	b11c      	cbz	r4, 23fe5c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe5ba:	4629      	mov	r1, r5
 23fe5bc:	4620      	mov	r0, r4
 23fe5be:	f7ff febc 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe5c2:	1d28      	adds	r0, r5, #4
 23fe5c4:	f7fe f81a 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe5c8:	3508      	adds	r5, #8
 23fe5ca:	3408      	adds	r4, #8
 23fe5cc:	e7f2      	b.n	23fe5b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe5d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fe5d2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe5d4:	6846      	ldr	r6, [r0, #4]
 23fe5d6:	4668      	mov	r0, sp
 23fe5d8:	f7ff feaf 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe5dc:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fe5e0:	429f      	cmp	r7, r3
 23fe5e2:	db12      	blt.n	23fe60a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fe5e4:	3701      	adds	r7, #1
        if (n > 0) {
 23fe5e6:	2f00      	cmp	r7, #0
 23fe5e8:	dd29      	ble.n	23fe63e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fe5ea:	00f8      	lsls	r0, r7, #3
 23fe5ec:	f7fd fcba 	bl	23fbf64 <malloc>
            if (!d) {
 23fe5f0:	4605      	mov	r5, r0
 23fe5f2:	b1f0      	cbz	r0, 23fe632 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fe5f4:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fe5f8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe5fc:	f7ff ffbe 	bl	23fe57c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe600:	6820      	ldr	r0, [r4, #0]
 23fe602:	f7fd fcbd 	bl	23fbf80 <free>
        data_ = d;
 23fe606:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fe608:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe60a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe60c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe60e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fe612:	4631      	mov	r1, r6
 23fe614:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe618:	f106 0008 	add.w	r0, r6, #8
 23fe61c:	f7ff ffae 	bl	23fe57c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe620:	b11e      	cbz	r6, 23fe62a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fe622:	4669      	mov	r1, sp
 23fe624:	4630      	mov	r0, r6
 23fe626:	f7ff fe88 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fe62a:	2501      	movs	r5, #1
    ++size_;
 23fe62c:	6863      	ldr	r3, [r4, #4]
 23fe62e:	3301      	adds	r3, #1
 23fe630:	6063      	str	r3, [r4, #4]
 23fe632:	a801      	add	r0, sp, #4
 23fe634:	f7fd ffe2 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe638:	4628      	mov	r0, r5
 23fe63a:	b003      	add	sp, #12
 23fe63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fe63e:	2500      	movs	r5, #0
 23fe640:	e7de      	b.n	23fe600 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fe642 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe644:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fe646:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe64a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fe64c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fe650:	42a6      	cmp	r6, r4
 23fe652:	d005      	beq.n	23fe660 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fe654:	4639      	mov	r1, r7
 23fe656:	4620      	mov	r0, r4
 23fe658:	f7ff fd2b 	bl	23fe0b2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fe65c:	b108      	cbz	r0, 23fe662 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fe65e:	b914      	cbnz	r4, 23fe666 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fe660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fe662:	3408      	adds	r4, #8
 23fe664:	e7f4      	b.n	23fe650 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fe666:	1d20      	adds	r0, r4, #4
 23fe668:	f7fd ffc8 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fe66c:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fe670:	4620      	mov	r0, r4
 23fe672:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe676:	f104 0108 	add.w	r1, r4, #8
 23fe67a:	f7ff ff7f 	bl	23fe57c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fe67e:	686b      	ldr	r3, [r5, #4]
 23fe680:	3b01      	subs	r3, #1
 23fe682:	606b      	str	r3, [r5, #4]
    return true;
 23fe684:	e7ec      	b.n	23fe660 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fe688 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fe688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe68c:	4605      	mov	r5, r0
 23fe68e:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23fe690:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fe692:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fe694:	f7ff fa72 	bl	23fdb7c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fe698:	682e      	ldr	r6, [r5, #0]
 23fe69a:	1ef3      	subs	r3, r6, #3
 23fe69c:	2b0d      	cmp	r3, #13
 23fe69e:	d86a      	bhi.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe6a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fe6a4:	0078000e 	.word	0x0078000e
 23fe6a8:	00fc0069 	.word	0x00fc0069
 23fe6ac:	00690069 	.word	0x00690069
 23fe6b0:	00690069 	.word	0x00690069
 23fe6b4:	00c60069 	.word	0x00c60069
 23fe6b8:	00c600c6 	.word	0x00c600c6
 23fe6bc:	00c600c6 	.word	0x00c600c6
        return address_;
 23fe6c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fe6c2:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fe6c6:	3002      	adds	r0, #2
 23fe6c8:	f7ff fa8e 	bl	23fdbe8 <_ZNK8particle10BleAddress7isValidEv>
 23fe6cc:	b338      	cbz	r0, 23fe71e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fe6ce:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fe6d0:	89aa      	ldrh	r2, [r5, #12]
 23fe6d2:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fe6d6:	a806      	add	r0, sp, #24
 23fe6d8:	801a      	strh	r2, [r3, #0]
 23fe6da:	f7ff fe2e 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fe6de:	a906      	add	r1, sp, #24
 23fe6e0:	4630      	mov	r0, r6
 23fe6e2:	f7ff ff75 	bl	23fe5d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fe6e6:	a807      	add	r0, sp, #28
 23fe6e8:	f7fd ff88 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fe6ec:	a806      	add	r0, sp, #24
 23fe6ee:	f7ff fca9 	bl	23fe044 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe6f2:	9b06      	ldr	r3, [sp, #24]
 23fe6f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fe6f8:	9907      	ldr	r1, [sp, #28]
 23fe6fa:	6263      	str	r3, [r4, #36]	; 0x24
 23fe6fc:	f7ff fa19 	bl	23fdb32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fe700:	a807      	add	r0, sp, #28
 23fe702:	f7fd ff7b 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fe706:	2120      	movs	r1, #32
 23fe708:	2300      	movs	r3, #0
 23fe70a:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23fe70e:	4a6d      	ldr	r2, [pc, #436]	; (23fe8c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23fe710:	9200      	str	r2, [sp, #0]
 23fe712:	2001      	movs	r0, #1
 23fe714:	496c      	ldr	r1, [pc, #432]	; (23fe8c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fe716:	aa06      	add	r2, sp, #24
 23fe718:	f7fd fb0c 	bl	23fbd34 <log_message>
 23fe71c:	e02b      	b.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fe71e:	a804      	add	r0, sp, #16
 23fe720:	f7ff fc90 	bl	23fe044 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fe724:	89aa      	ldrh	r2, [r5, #12]
 23fe726:	9b04      	ldr	r3, [sp, #16]
 23fe728:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fe72a:	6869      	ldr	r1, [r5, #4]
 23fe72c:	9804      	ldr	r0, [sp, #16]
 23fe72e:	3108      	adds	r1, #8
 23fe730:	3002      	adds	r0, #2
 23fe732:	f7ff fa3d 	bl	23fdbb0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fe736:	a904      	add	r1, sp, #16
 23fe738:	a806      	add	r0, sp, #24
 23fe73a:	f7ff fdfe 	bl	23fe33a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fe73e:	4630      	mov	r0, r6
 23fe740:	a906      	add	r1, sp, #24
 23fe742:	f7ff ff45 	bl	23fe5d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fe746:	4605      	mov	r5, r0
 23fe748:	a807      	add	r0, sp, #28
 23fe74a:	f7fd ff57 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe74e:	b9c5      	cbnz	r5, 23fe782 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fe750:	2320      	movs	r3, #32
 23fe752:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23fe756:	4b5d      	ldr	r3, [pc, #372]	; (23fe8cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fe758:	2001      	movs	r0, #1
 23fe75a:	495b      	ldr	r1, [pc, #364]	; (23fe8c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fe75c:	9300      	str	r3, [sp, #0]
 23fe75e:	aa06      	add	r2, sp, #24
 23fe760:	462b      	mov	r3, r5
 23fe762:	f7fd fae7 	bl	23fbd34 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fe766:	9b04      	ldr	r3, [sp, #16]
 23fe768:	4629      	mov	r1, r5
 23fe76a:	8818      	ldrh	r0, [r3, #0]
 23fe76c:	f7fd fa10 	bl	23fbb90 <hal_ble_gap_disconnect>
 23fe770:	a805      	add	r0, sp, #20
 23fe772:	f7fd ff43 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fe776:	a803      	add	r0, sp, #12
 23fe778:	f7ff fa0e 	bl	23fdb98 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fe77c:	b00f      	add	sp, #60	; 0x3c
 23fe77e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23fe782:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fe784:	b123      	cbz	r3, 23fe790 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fe786:	a904      	add	r1, sp, #16
 23fe788:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fe78c:	f7ff fe25 	bl	23fe3da <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fe790:	a805      	add	r0, sp, #20
 23fe792:	e7b6      	b.n	23fe702 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe794:	4620      	mov	r0, r4
 23fe796:	89a9      	ldrh	r1, [r5, #12]
 23fe798:	f7ff fbc0 	bl	23fdf1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fe79c:	4606      	mov	r6, r0
 23fe79e:	2800      	cmp	r0, #0
 23fe7a0:	d0e9      	beq.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fe7a2:	4601      	mov	r1, r0
 23fe7a4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fe7a8:	f7ff fc83 	bl	23fe0b2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fe7ac:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fe7b0:	b148      	cbz	r0, 23fe7c6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fe7b2:	4631      	mov	r1, r6
 23fe7b4:	4640      	mov	r0, r8
 23fe7b6:	f7ff ff44 	bl	23fe642 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fe7ba:	2220      	movs	r2, #32
 23fe7bc:	2300      	movs	r3, #0
 23fe7be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fe7c2:	4a43      	ldr	r2, [pc, #268]	; (23fe8d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fe7c4:	e7a4      	b.n	23fe710 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fe7c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fe7ca:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fe7cc:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fe7d0:	8029      	strh	r1, [r5, #0]
 23fe7d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fe7d6:	429a      	cmp	r2, r3
 23fe7d8:	d003      	beq.n	23fe7e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fe7da:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe7de:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fe7e0:	e7f9      	b.n	23fe7d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fe7e2:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fe7e6:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe7ea:	45b9      	cmp	r9, r7
 23fe7ec:	d004      	beq.n	23fe7f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fe7ee:	1d38      	adds	r0, r7, #4
 23fe7f0:	f7fd ff04 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe7f4:	3708      	adds	r7, #8
 23fe7f6:	e7f8      	b.n	23fe7ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fe7f8:	2300      	movs	r3, #0
 23fe7fa:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fe7fc:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fe800:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe804:	45b9      	cmp	r9, r7
 23fe806:	d004      	beq.n	23fe812 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fe808:	1d38      	adds	r0, r7, #4
 23fe80a:	f7fd fef7 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe80e:	3708      	adds	r7, #8
 23fe810:	e7f8      	b.n	23fe804 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fe812:	2300      	movs	r3, #0
 23fe814:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fe816:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fe818:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fe81a:	b123      	cbz	r3, 23fe826 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fe81c:	4631      	mov	r1, r6
 23fe81e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe822:	f7ff fdda 	bl	23fe3da <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe826:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fe82a:	6833      	ldr	r3, [r6, #0]
 23fe82c:	801a      	strh	r2, [r3, #0]
 23fe82e:	e7c0      	b.n	23fe7b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe830:	4620      	mov	r0, r4
 23fe832:	89a9      	ldrh	r1, [r5, #12]
 23fe834:	f7ff fb72 	bl	23fdf1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fe838:	2800      	cmp	r0, #0
 23fe83a:	d09c      	beq.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fe83c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fe83e:	2b00      	cmp	r3, #0
 23fe840:	d099      	beq.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fe842:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe844:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fe846:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe84a:	d001      	beq.n	23fe850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fe84c:	2e10      	cmp	r6, #16
 23fe84e:	d117      	bne.n	23fe880 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23fe850:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fe852:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fe854:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fe856:	2506      	movs	r5, #6
                        };
 23fe858:	f88d 3015 	strb.w	r3, [sp, #21]
 23fe85c:	9104      	str	r1, [sp, #16]
 23fe85e:	ab09      	add	r3, sp, #36	; 0x24
 23fe860:	f88d 2014 	strb.w	r2, [sp, #20]
 23fe864:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fe866:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fe86a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fe86e:	9508      	str	r5, [sp, #32]
 23fe870:	e883 0003 	stmia.w	r3, {r0, r1}
 23fe874:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fe876:	a906      	add	r1, sp, #24
 23fe878:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe87c:	4798      	blx	r3
 23fe87e:	e77a      	b.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fe880:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe882:	bf01      	itttt	eq
 23fe884:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fe886:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe888:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe88c:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fe88e:	bf1d      	ittte	ne
 23fe890:	461a      	movne	r2, r3
 23fe892:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fe894:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fe896:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe89a:	e7dd      	b.n	23fe858 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe89c:	89a9      	ldrh	r1, [r5, #12]
 23fe89e:	4620      	mov	r0, r4
 23fe8a0:	f7ff fb3c 	bl	23fdf1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fe8a4:	4601      	mov	r1, r0
 23fe8a6:	2800      	cmp	r0, #0
 23fe8a8:	f43f af65 	beq.w	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe8ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fe8ae:	2b00      	cmp	r3, #0
 23fe8b0:	f43f af61 	beq.w	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fe8b4:	686b      	ldr	r3, [r5, #4]
 23fe8b6:	aa06      	add	r2, sp, #24
 23fe8b8:	9306      	str	r3, [sp, #24]
 23fe8ba:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fe8be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fe8c0:	4798      	blx	r3
 23fe8c2:	e758      	b.n	23fe776 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe8c4:	023ffc01 	.word	0x023ffc01
 23fe8c8:	023ffb53 	.word	0x023ffb53
 23fe8cc:	023ffbdb 	.word	0x023ffbdb
 23fe8d0:	023ffc0b 	.word	0x023ffc0b

023fe8d4 <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fe8d4:	b570      	push	{r4, r5, r6, lr}
 23fe8d6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fe8d8:	3064      	adds	r0, #100	; 0x64
 23fe8da:	f7fd ff95 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
 23fe8de:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe8e2:	f7fd ff91 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
 23fe8e6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe8ea:	f7fd ff8d 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
 23fe8ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fe8f2:	f7fd ff89 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fe8f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fe8fa:	f7fd fe7f 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe8fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fe902:	f7fd fe7b 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fe906:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fe90a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe90e:	42ae      	cmp	r6, r5
 23fe910:	d004      	beq.n	23fe91c <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fe912:	1d28      	adds	r0, r5, #4
 23fe914:	f7fd fe72 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe918:	3508      	adds	r5, #8
 23fe91a:	e7f8      	b.n	23fe90e <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fe91c:	69a0      	ldr	r0, [r4, #24]
 23fe91e:	f7fd fb2f 	bl	23fbf80 <free>
 23fe922:	f104 000c 	add.w	r0, r4, #12
 23fe926:	f7ff fd2b 	bl	23fe380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe92a:	4620      	mov	r0, r4
 23fe92c:	f7ff fd16 	bl	23fe35c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fe930:	4620      	mov	r0, r4
 23fe932:	bd70      	pop	{r4, r5, r6, pc}

023fe934 <__tcf_0>:
    static BleLocalDevice instance;
 23fe934:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fe936:	4b06      	ldr	r3, [pc, #24]	; (23fe950 <__tcf_0+0x1c>)
 23fe938:	681c      	ldr	r4, [r3, #0]
 23fe93a:	b144      	cbz	r4, 23fe94e <__tcf_0+0x1a>
	delete __ptr;
 23fe93c:	4620      	mov	r0, r4
 23fe93e:	f7ff ffc9 	bl	23fe8d4 <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fe942:	4620      	mov	r0, r4
 23fe944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe948:	2174      	movs	r1, #116	; 0x74
 23fe94a:	f7fc bd6c 	b.w	23fb426 <_ZdlPvj>
 23fe94e:	bd10      	pop	{r4, pc}
 23fe950:	1007aeec 	.word	0x1007aeec

023fe954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23fe954:	b538      	push	{r3, r4, r5, lr}
 23fe956:	4605      	mov	r5, r0
 23fe958:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23fe95a:	f7fd ff5e 	bl	23fc81a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe95e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe960:	68a2      	ldr	r2, [r4, #8]
 23fe962:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe964:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe966:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe968:	68e2      	ldr	r2, [r4, #12]
 23fe96a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe96c:	60e3      	str	r3, [r4, #12]
      }
 23fe96e:	bd38      	pop	{r3, r4, r5, pc}

023fe970 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe970:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe972:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe974:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe976:	344c      	adds	r4, #76	; 0x4c
 23fe978:	b1b9      	cbz	r1, 23fe9aa <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
 23fe97a:	e9cd 1200 	strd	r1, r2, [sp]
 23fe97e:	a802      	add	r0, sp, #8
 23fe980:	4669      	mov	r1, sp
 23fe982:	f7ff fca3 	bl	23fe2cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fe986:	2300      	movs	r3, #0
	__x.swap(*this);
 23fe988:	a906      	add	r1, sp, #24
 23fe98a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 23fe98c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
 23fe98e:	f7ff ffe1 	bl	23fe954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fe992:	4621      	mov	r1, r4
 23fe994:	a806      	add	r0, sp, #24
 23fe996:	f7ff ffdd 	bl	23fe954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe99a:	a806      	add	r0, sp, #24
 23fe99c:	f7fd ff34 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
 23fe9a0:	a802      	add	r0, sp, #8
 23fe9a2:	f7fd ff31 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
}
 23fe9a6:	b00a      	add	sp, #40	; 0x28
 23fe9a8:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fe9aa:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
 23fe9ac:	e7eb      	b.n	23fe986 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

023fe9ae <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
 23fe9ae:	b570      	push	{r4, r5, r6, lr}
 23fe9b0:	4604      	mov	r4, r0
 23fe9b2:	460e      	mov	r6, r1
 23fe9b4:	461d      	mov	r5, r3
 23fe9b6:	b08c      	sub	sp, #48	; 0x30
 23fe9b8:	9201      	str	r2, [sp, #4]
            : BleCharacteristicImpl() {
 23fe9ba:	f7ff fa8f 	bl	23fdedc <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
 23fe9be:	7126      	strb	r6, [r4, #4]
        description_ = desc;
 23fe9c0:	9901      	ldr	r1, [sp, #4]
 23fe9c2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fe9c6:	f000 fbaa 	bl	23ff11e <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe9ca:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 23fe9ce:	b1cd      	cbz	r5, 23fea04 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
 23fe9d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23fe9d2:	a902      	add	r1, sp, #8
 23fe9d4:	a804      	add	r0, sp, #16
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe9d6:	9502      	str	r5, [sp, #8]
 23fe9d8:	9303      	str	r3, [sp, #12]
 23fe9da:	f7ff fc77 	bl	23fe2cc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fe9de:	2300      	movs	r3, #0
	__x.swap(*this);
 23fe9e0:	a908      	add	r1, sp, #32
 23fe9e2:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
 23fe9e4:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
 23fe9e6:	f7ff ffb5 	bl	23fe954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fe9ea:	4631      	mov	r1, r6
 23fe9ec:	a808      	add	r0, sp, #32
 23fe9ee:	f7ff ffb1 	bl	23fe954 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe9f2:	a808      	add	r0, sp, #32
 23fe9f4:	f7fd ff08 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
 23fe9f8:	a804      	add	r0, sp, #16
 23fe9fa:	f7fd ff05 	bl	23fc808 <_ZNSt14_Function_baseD1Ev>
    }
 23fe9fe:	4620      	mov	r0, r4
 23fea00:	b00c      	add	sp, #48	; 0x30
 23fea02:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fea04:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
 23fea06:	e7ea      	b.n	23fe9de <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

023fea08 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
 23fea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fea0c:	4692      	mov	sl, r2
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fea0e:	2200      	movs	r2, #0
 23fea10:	b087      	sub	sp, #28
 23fea12:	468b      	mov	fp, r1
 23fea14:	9912      	ldr	r1, [sp, #72]	; 0x48
 23fea16:	4680      	mov	r8, r0
 23fea18:	2068      	movs	r0, #104	; 0x68
 23fea1a:	461d      	mov	r5, r3
 23fea1c:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
 23fea20:	9102      	str	r1, [sp, #8]
 23fea22:	9303      	str	r3, [sp, #12]
 23fea24:	9204      	str	r2, [sp, #16]
 23fea26:	f7fc fcfa 	bl	23fb41e <_Znwj>
	  auto __pi = ::new (__mem)
 23fea2a:	1e06      	subs	r6, r0, #0
 23fea2c:	f106 090c 	add.w	r9, r6, #12
 23fea30:	d018      	beq.n	23fea64 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fea32:	2201      	movs	r2, #1
	: _M_impl(__a)
 23fea34:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
 23fea36:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
 23fea3a:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
 23fea3c:	4a15      	ldr	r2, [pc, #84]	; (23fea94 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
 23fea3e:	9b03      	ldr	r3, [sp, #12]
 23fea40:	f847 2b20 	str.w	r2, [r7], #32
 23fea44:	4648      	mov	r0, r9
 23fea46:	465a      	mov	r2, fp
 23fea48:	9100      	str	r1, [sp, #0]
 23fea4a:	4651      	mov	r1, sl
 23fea4c:	f7ff ffaf 	bl	23fe9ae <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
 23fea50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fea52:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 23fea54:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
 23fea56:	f106 0534 	add.w	r5, r6, #52	; 0x34
        charUuid_ = charUuid;
 23fea5a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
 23fea5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fea5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fea60:	6823      	ldr	r3, [r4, #0]
 23fea62:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 23fea64:	4640      	mov	r0, r8
 23fea66:	a904      	add	r1, sp, #16
	  __p = __pi->_M_ptr();
 23fea68:	e9cd 9604 	strd	r9, r6, [sp, #16]
 23fea6c:	f7ff fca4 	bl	23fe3b8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
 23fea70:	a805      	add	r0, sp, #20
 23fea72:	f7fd fdc3 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
 23fea76:	f8d8 3000 	ldr.w	r3, [r8]
 23fea7a:	b93b      	cbnz	r3, 23fea8c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
 23fea7c:	200a      	movs	r0, #10
 23fea7e:	4a06      	ldr	r2, [pc, #24]	; (23fea98 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
 23fea80:	4906      	ldr	r1, [pc, #24]	; (23fea9c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
}
 23fea82:	b007      	add	sp, #28
 23fea84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
 23fea88:	f7fd b946 	b.w	23fbd18 <panic_>
}
 23fea8c:	b007      	add	sp, #28
 23fea8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fea92:	bf00      	nop
 23fea94:	023ffc74 	.word	0x023ffc74
 23fea98:	023fbca9 	.word	0x023fbca9
 23fea9c:	023ffb3c 	.word	0x023ffb3c

023feaa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23feaa0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23feaa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feaa4:	4604      	mov	r4, r0
 23feaa6:	460d      	mov	r5, r1
 23feaa8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23feaaa:	d914      	bls.n	23fead6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23feaac:	4290      	cmp	r0, r2
 23feaae:	d213      	bcs.n	23fead8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23feab0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23feab4:	1a75      	subs	r5, r6, r1
 23feab6:	f1a1 0708 	sub.w	r7, r1, #8
 23feaba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23feabc:	42b7      	cmp	r7, r6
 23feabe:	d018      	beq.n	23feaf2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23feac0:	b11c      	cbz	r4, 23feaca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23feac2:	4631      	mov	r1, r6
 23feac4:	4620      	mov	r0, r4
 23feac6:	f7ff fc2e 	bl	23fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23feaca:	1d30      	adds	r0, r6, #4
 23feacc:	f7fd fd96 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fead0:	3e08      	subs	r6, #8
 23fead2:	3c08      	subs	r4, #8
 23fead4:	e7f2      	b.n	23feabc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fead6:	d00c      	beq.n	23feaf2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fead8:	42b5      	cmp	r5, r6
 23feada:	d00a      	beq.n	23feaf2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23feadc:	b11c      	cbz	r4, 23feae6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23feade:	4629      	mov	r1, r5
 23feae0:	4620      	mov	r0, r4
 23feae2:	f7ff fc20 	bl	23fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23feae6:	1d28      	adds	r0, r5, #4
 23feae8:	f7fd fd88 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23feaec:	3508      	adds	r5, #8
 23feaee:	3408      	adds	r4, #8
 23feaf0:	e7f2      	b.n	23fead8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23feaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023feaf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23feaf4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23feaf6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23feaf8:	4605      	mov	r5, r0
        if (n > 0) {
 23feafa:	dd11      	ble.n	23feb20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23feafc:	00f0      	lsls	r0, r6, #3
 23feafe:	f7fd fa31 	bl	23fbf64 <malloc>
            if (!d) {
 23feb02:	4604      	mov	r4, r0
 23feb04:	b158      	cbz	r0, 23feb1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23feb06:	e9d5 1200 	ldrd	r1, r2, [r5]
 23feb0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23feb0e:	f7ff ffc7 	bl	23feaa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23feb12:	6828      	ldr	r0, [r5, #0]
 23feb14:	f7fd fa34 	bl	23fbf80 <free>
        return true;
 23feb18:	2001      	movs	r0, #1
        data_ = d;
 23feb1a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23feb1c:	60ae      	str	r6, [r5, #8]
    }
 23feb1e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23feb20:	2400      	movs	r4, #0
 23feb22:	e7f6      	b.n	23feb12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023feb24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23feb24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23feb26:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23feb28:	6845      	ldr	r5, [r0, #4]
 23feb2a:	4668      	mov	r0, sp
 23feb2c:	f7ff fbfb 	bl	23fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23feb30:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23feb34:	4299      	cmp	r1, r3
 23feb36:	da10      	bge.n	23feb5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23feb38:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23feb3a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23feb3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23feb40:	4629      	mov	r1, r5
 23feb42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23feb46:	f105 0008 	add.w	r0, r5, #8
 23feb4a:	f7ff ffa9 	bl	23feaa0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23feb4e:	b98d      	cbnz	r5, 23feb74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23feb50:	6863      	ldr	r3, [r4, #4]
    return true;
 23feb52:	2601      	movs	r6, #1
    ++size_;
 23feb54:	3301      	adds	r3, #1
 23feb56:	6063      	str	r3, [r4, #4]
    return true;
 23feb58:	e006      	b.n	23feb68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23feb5a:	4620      	mov	r0, r4
 23feb5c:	3101      	adds	r1, #1
 23feb5e:	f7ff ffc9 	bl	23feaf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23feb62:	4606      	mov	r6, r0
 23feb64:	2800      	cmp	r0, #0
 23feb66:	d1e7      	bne.n	23feb38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
 23feb68:	a801      	add	r0, sp, #4
 23feb6a:	f7fd fd47 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23feb6e:	4630      	mov	r0, r6
 23feb70:	b002      	add	sp, #8
 23feb72:	bd70      	pop	{r4, r5, r6, pc}
 23feb74:	4669      	mov	r1, sp
 23feb76:	4628      	mov	r0, r5
 23feb78:	f7ff fbd5 	bl	23fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23feb7c:	e7e8      	b.n	23feb50 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023feb7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23feb7e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23feb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feb82:	4604      	mov	r4, r0
 23feb84:	460d      	mov	r5, r1
 23feb86:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23feb88:	d914      	bls.n	23febb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23feb8a:	4290      	cmp	r0, r2
 23feb8c:	d213      	bcs.n	23febb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23feb8e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23feb92:	1a75      	subs	r5, r6, r1
 23feb94:	f1a1 0708 	sub.w	r7, r1, #8
 23feb98:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23feb9a:	42b7      	cmp	r7, r6
 23feb9c:	d018      	beq.n	23febd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23feb9e:	b11c      	cbz	r4, 23feba8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23feba0:	4631      	mov	r1, r6
 23feba2:	4620      	mov	r0, r4
 23feba4:	f7ff fbb1 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
 23feba8:	1d30      	adds	r0, r6, #4
 23febaa:	f7fd fd27 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23febae:	3e08      	subs	r6, #8
 23febb0:	3c08      	subs	r4, #8
 23febb2:	e7f2      	b.n	23feb9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23febb4:	d00c      	beq.n	23febd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23febb6:	42b5      	cmp	r5, r6
 23febb8:	d00a      	beq.n	23febd0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23febba:	b11c      	cbz	r4, 23febc4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23febbc:	4629      	mov	r1, r5
 23febbe:	4620      	mov	r0, r4
 23febc0:	f7ff fba3 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
 23febc4:	1d28      	adds	r0, r5, #4
 23febc6:	f7fd fd19 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23febca:	3508      	adds	r5, #8
 23febcc:	3408      	adds	r4, #8
 23febce:	e7f2      	b.n	23febb6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23febd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023febd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23febd2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23febd4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23febd6:	4605      	mov	r5, r0
        if (n > 0) {
 23febd8:	dd11      	ble.n	23febfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23febda:	00f0      	lsls	r0, r6, #3
 23febdc:	f7fd f9c2 	bl	23fbf64 <malloc>
            if (!d) {
 23febe0:	4604      	mov	r4, r0
 23febe2:	b158      	cbz	r0, 23febfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23febe4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23febe8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23febec:	f7ff ffc7 	bl	23feb7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23febf0:	6828      	ldr	r0, [r5, #0]
 23febf2:	f7fd f9c5 	bl	23fbf80 <free>
        return true;
 23febf6:	2001      	movs	r0, #1
        data_ = d;
 23febf8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23febfa:	60ae      	str	r6, [r5, #8]
    }
 23febfc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23febfe:	2400      	movs	r4, #0
 23fec00:	e7f6      	b.n	23febf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fec02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fec02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fec04:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fec06:	6845      	ldr	r5, [r0, #4]
 23fec08:	4668      	mov	r0, sp
 23fec0a:	f7ff fb7e 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fec0e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fec12:	4299      	cmp	r1, r3
 23fec14:	da10      	bge.n	23fec38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fec16:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fec18:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fec1a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fec1e:	4629      	mov	r1, r5
 23fec20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fec24:	f105 0008 	add.w	r0, r5, #8
 23fec28:	f7ff ffa9 	bl	23feb7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fec2c:	b98d      	cbnz	r5, 23fec52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fec2e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fec30:	2601      	movs	r6, #1
    ++size_;
 23fec32:	3301      	adds	r3, #1
 23fec34:	6063      	str	r3, [r4, #4]
    return true;
 23fec36:	e006      	b.n	23fec46 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fec38:	4620      	mov	r0, r4
 23fec3a:	3101      	adds	r1, #1
 23fec3c:	f7ff ffc9 	bl	23febd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fec40:	4606      	mov	r6, r0
 23fec42:	2800      	cmp	r0, #0
 23fec44:	d1e7      	bne.n	23fec16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fec46:	a801      	add	r0, sp, #4
 23fec48:	f7fd fcd8 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fec4c:	4630      	mov	r0, r6
 23fec4e:	b002      	add	sp, #8
 23fec50:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fec52:	4669      	mov	r1, sp
 23fec54:	4628      	mov	r0, r5
 23fec56:	f7ff fb58 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fec5a:	e7e8      	b.n	23fec2e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fec5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
 23fec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fec60:	4617      	mov	r7, r2
 23fec62:	b0a1      	sub	sp, #132	; 0x84
 23fec64:	4680      	mov	r8, r0
    WiringBleLock lk;
 23fec66:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
 23fec68:	460e      	mov	r6, r1
    WiringBleLock lk;
 23fec6a:	f7fe ff87 	bl	23fdb7c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fec6e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
 23fec70:	7923      	ldrb	r3, [r4, #4]
 23fec72:	b953      	cbnz	r3, 23fec8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
 23fec74:	4639      	mov	r1, r7
 23fec76:	4640      	mov	r0, r8
 23fec78:	f7ff fb47 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
 23fec7c:	a80a      	add	r0, sp, #40	; 0x28
 23fec7e:	f7fe ff8b 	bl	23fdb98 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
 23fec82:	4640      	mov	r0, r8
 23fec84:	b021      	add	sp, #132	; 0x84
 23fec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fec8a:	6833      	ldr	r3, [r6, #0]
                svcUuid_ == impl.svcUuid_ &&
 23fec8c:	f104 0a28 	add.w	sl, r4, #40	; 0x28
    return data_ + size_;
 23fec90:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
 23fec94:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23fec98:	9303      	str	r3, [sp, #12]
        if (charUuid_ == impl.charUuid_ &&
 23fec9a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
 23fec9e:	9b03      	ldr	r3, [sp, #12]
 23feca0:	429d      	cmp	r5, r3
 23feca2:	d021      	beq.n	23fece8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
 23feca4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
 23feca8:	4658      	mov	r0, fp
 23fecaa:	f109 0114 	add.w	r1, r9, #20
 23fecae:	f7ff f88a 	bl	23fddc6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
 23fecb2:	b1b8      	cbz	r0, 23fece4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
 23fecb4:	4650      	mov	r0, sl
 23fecb6:	f109 0128 	add.w	r1, r9, #40	; 0x28
 23fecba:	f7ff f884 	bl	23fddc6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
 23fecbe:	b188      	cbz	r0, 23fece4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
 23fecc0:	6823      	ldr	r3, [r4, #0]
 23fecc2:	f8d9 2000 	ldr.w	r2, [r9]
 23fecc6:	4053      	eors	r3, r2
 23fecc8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
 23feccc:	d10a      	bne.n	23fece4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
 23fecce:	2220      	movs	r2, #32
 23fecd0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
 23fecd4:	4a5e      	ldr	r2, [pc, #376]	; (23fee50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
 23fecd6:	9200      	str	r2, [sp, #0]
 23fecd8:	aa15      	add	r2, sp, #84	; 0x54
 23fecda:	2032      	movs	r0, #50	; 0x32
 23fecdc:	495d      	ldr	r1, [pc, #372]	; (23fee54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
 23fecde:	f7fd f829 	bl	23fbd34 <log_message>
 23fece2:	e7c7      	b.n	23fec74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
 23fece4:	3508      	adds	r5, #8
 23fece6:	e7da      	b.n	23fec9e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
 23fece8:	4650      	mov	r0, sl
 23fecea:	f7ff f83d 	bl	23fdd68 <_ZNK8particle7BleUuid7isValidEv>
 23fecee:	b960      	cbnz	r0, 23fed0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
 23fecf0:	2201      	movs	r2, #1
 23fecf2:	4959      	ldr	r1, [pc, #356]	; (23fee58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
 23fecf4:	a815      	add	r0, sp, #84	; 0x54
 23fecf6:	f7ff f80f 	bl	23fdd18 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
 23fecfa:	46d4      	mov	ip, sl
 23fecfc:	ad15      	add	r5, sp, #84	; 0x54
 23fecfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fed00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fed04:	682b      	ldr	r3, [r5, #0]
 23fed06:	f8cc 3000 	str.w	r3, [ip]
 23fed0a:	6833      	ldr	r3, [r6, #0]
 23fed0c:	e9d3 5300 	ldrd	r5, r3, [r3]
 23fed10:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
 23fed14:	455d      	cmp	r5, fp
 23fed16:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
 23fed18:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
 23fed1a:	d06e      	beq.n	23fedfa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
 23fed1c:	f855 0b08 	ldr.w	r0, [r5], #8
 23fed20:	f7ff f851 	bl	23fddc6 <_ZNK8particle7BleUuideqERKS0_>
 23fed24:	2800      	cmp	r0, #0
 23fed26:	d0f5      	beq.n	23fed14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
 23fed28:	f104 0a14 	add.w	sl, r4, #20
 23fed2c:	4650      	mov	r0, sl
 23fed2e:	f7ff f81b 	bl	23fdd68 <_ZNK8particle7BleUuid7isValidEv>
 23fed32:	b988      	cbnz	r0, 23fed58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
 23fed34:	4b49      	ldr	r3, [pc, #292]	; (23fee5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fed36:	4948      	ldr	r1, [pc, #288]	; (23fee58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
 23fed38:	881a      	ldrh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fed3a:	a815      	add	r0, sp, #84	; 0x54
            defaultUuidCharCount_++;
 23fed3c:	3201      	adds	r2, #1
 23fed3e:	b292      	uxth	r2, r2
 23fed40:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
 23fed42:	2301      	movs	r3, #1
 23fed44:	f7ff f807 	bl	23fdd56 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
 23fed48:	46d4      	mov	ip, sl
 23fed4a:	ad15      	add	r5, sp, #84	; 0x54
 23fed4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fed4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fed52:	682b      	ldr	r3, [r5, #0]
 23fed54:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
 23fed58:	4b41      	ldr	r3, [pc, #260]	; (23fee60 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
    hal_ble_char_init_t charInit = {};
 23fed5a:	2228      	movs	r2, #40	; 0x28
 23fed5c:	2100      	movs	r1, #0
 23fed5e:	a816      	add	r0, sp, #88	; 0x58
    charInit.version = BLE_API_VERSION;
 23fed60:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
 23fed62:	f000 fc0c 	bl	23ff57e <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
 23fed66:	4651      	mov	r1, sl
 23fed68:	a804      	add	r0, sp, #16
 23fed6a:	f7ff f80f 	bl	23fdd8c <_ZN8particle7BleUuid7halUUIDEv>
 23fed6e:	ab04      	add	r3, sp, #16
 23fed70:	aa18      	add	r2, sp, #96	; 0x60
 23fed72:	f10d 0c20 	add.w	ip, sp, #32
 23fed76:	4615      	mov	r5, r2
 23fed78:	6818      	ldr	r0, [r3, #0]
 23fed7a:	6859      	ldr	r1, [r3, #4]
 23fed7c:	3308      	adds	r3, #8
 23fed7e:	c503      	stmia	r5!, {r0, r1}
 23fed80:	4563      	cmp	r3, ip
 23fed82:	462a      	mov	r2, r5
 23fed84:	d1f7      	bne.n	23fed76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
 23fed86:	6818      	ldr	r0, [r3, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fed88:	2200      	movs	r2, #0
    charInit.uuid = charImpl->charUUID().halUUID();
 23fed8a:	6028      	str	r0, [r5, #0]
    return value_;
 23fed8c:	7923      	ldrb	r3, [r4, #4]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fed8e:	1da1      	adds	r1, r4, #6
    charInit.properties = charImpl->properties().value();
 23fed90:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
 23fed94:	f8d9 3000 	ldr.w	r3, [r9]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fed98:	a815      	add	r0, sp, #84	; 0x54
    charInit.service_handle = service->impl()->startHandle();
 23fed9a:	8a9b      	ldrh	r3, [r3, #20]
 23fed9c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
 23feda0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23feda2:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
 23feda4:	4b2f      	ldr	r3, [pc, #188]	; (23fee64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    charInit.context = charImpl;
 23feda6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
 23fedaa:	f7fc ff37 	bl	23fbc1c <hal_ble_gatt_server_add_characteristic>
 23fedae:	2800      	cmp	r0, #0
 23fedb0:	f47f af60 	bne.w	23fec74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
 23fedb4:	2301      	movs	r3, #1
 23fedb6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
 23fedb8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
 23fedba:	4639      	mov	r1, r7
        return characteristics_;
 23fedbc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
 23fedbe:	a80d      	add	r0, sp, #52	; 0x34
 23fedc0:	f7ff faa3 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fedc4:	4620      	mov	r0, r4
 23fedc6:	a90d      	add	r1, sp, #52	; 0x34
 23fedc8:	f7ff ff1b 	bl	23fec02 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fedcc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fedce:	a80e      	add	r0, sp, #56	; 0x38
 23fedd0:	f7fd fc14 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fedd4:	2c00      	cmp	r4, #0
 23fedd6:	f47f af4d 	bne.w	23fec74 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
 23fedda:	2320      	movs	r3, #32
 23feddc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 23fede0:	4b21      	ldr	r3, [pc, #132]	; (23fee68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
 23fede2:	aa0d      	add	r2, sp, #52	; 0x34
 23fede4:	9300      	str	r3, [sp, #0]
 23fede6:	4623      	mov	r3, r4
 23fede8:	e777      	b.n	23fecda <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
 23fedea:	4639      	mov	r1, r7
 23fedec:	4640      	mov	r0, r8
 23fedee:	f7ff fa8c 	bl	23fe30a <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fedf2:	a80c      	add	r0, sp, #48	; 0x30
 23fedf4:	f7fd fc02 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fedf8:	e740      	b.n	23fec7c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
 23fedfa:	a80b      	add	r0, sp, #44	; 0x2c
 23fedfc:	f7ff f8fe 	bl	23fdffc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
 23fee00:	4651      	mov	r1, sl
 23fee02:	a815      	add	r0, sp, #84	; 0x54
 23fee04:	f7fe ffc2 	bl	23fdd8c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
 23fee08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fee0a:	2300      	movs	r3, #0
 23fee0c:	2001      	movs	r0, #1
 23fee0e:	3214      	adds	r2, #20
 23fee10:	a915      	add	r1, sp, #84	; 0x54
 23fee12:	f7fc fecb 	bl	23fbbac <hal_ble_gatt_server_add_service>
 23fee16:	2800      	cmp	r0, #0
 23fee18:	d1e7      	bne.n	23fedea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
 23fee1a:	6835      	ldr	r5, [r6, #0]
 23fee1c:	a90b      	add	r1, sp, #44	; 0x2c
 23fee1e:	a80d      	add	r0, sp, #52	; 0x34
 23fee20:	f7ff fa81 	bl	23fe326 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
 23fee24:	4628      	mov	r0, r5
 23fee26:	a90d      	add	r1, sp, #52	; 0x34
 23fee28:	f7ff fe7c 	bl	23feb24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fee2c:	4605      	mov	r5, r0
 23fee2e:	a80e      	add	r0, sp, #56	; 0x38
 23fee30:	f7fd fbe4 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fee34:	2d00      	cmp	r5, #0
 23fee36:	d0d8      	beq.n	23fedea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
 23fee38:	6832      	ldr	r2, [r6, #0]
 23fee3a:	a80c      	add	r0, sp, #48	; 0x30
    return data_[size_ - 1];
 23fee3c:	6853      	ldr	r3, [r2, #4]
 23fee3e:	6812      	ldr	r2, [r2, #0]
 23fee40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 23fee44:	3b01      	subs	r3, #1
 23fee46:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
 23fee4a:	f7fd fbd7 	bl	23fc5fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fee4e:	e76b      	b.n	23fed28 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
 23fee50:	023ffc18 	.word	0x023ffc18
 23fee54:	023ffb53 	.word	0x023ffb53
 23fee58:	023ffcc0 	.word	0x023ffcc0
 23fee5c:	1007aee4 	.word	0x1007aee4
 23fee60:	002c0003 	.word	0x002c0003
 23fee64:	023fe1a9 	.word	0x023fe1a9
 23fee68:	023ffc43 	.word	0x023ffc43

023fee6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fee6c:	2300      	movs	r3, #0
 23fee6e:	4802      	ldr	r0, [pc, #8]	; (23fee78 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fee70:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fee72:	f7fc be1d 	b.w	23fbab0 <os_mutex_recursive_create>
 23fee76:	bf00      	nop
 23fee78:	1007aee8 	.word	0x1007aee8

023fee7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fee7c:	4770      	bx	lr

023fee7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fee7e:	7441      	strb	r1, [r0, #17]
}
 23fee80:	4770      	bx	lr

023fee82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fee82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fee84:	7c00      	ldrb	r0, [r0, #16]
 23fee86:	f7fc fddb 	bl	23fba40 <hal_usart_available_data_for_write>
}
 23fee8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee8e:	bd08      	pop	{r3, pc}

023fee90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fee90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fee92:	7c00      	ldrb	r0, [r0, #16]
 23fee94:	f7fc fd8e 	bl	23fb9b4 <hal_usart_available>
}
 23fee98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee9c:	bd08      	pop	{r3, pc}

023fee9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fee9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23feea0:	7c00      	ldrb	r0, [r0, #16]
 23feea2:	f7fc fda3 	bl	23fb9ec <hal_usart_peek>
}
 23feea6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feeaa:	bd08      	pop	{r3, pc}

023feeac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23feeac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23feeae:	7c00      	ldrb	r0, [r0, #16]
 23feeb0:	f7fc fd8e 	bl	23fb9d0 <hal_usart_read>
}
 23feeb4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23feeb8:	bd08      	pop	{r3, pc}

023feeba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23feeba:	7c00      	ldrb	r0, [r0, #16]
 23feebc:	f7fc bda4 	b.w	23fba08 <hal_usart_flush>

023feec0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23feec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feec2:	7c45      	ldrb	r5, [r0, #17]
{
 23feec4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feec6:	b12d      	cbz	r5, 23feed4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23feec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23feeca:	b003      	add	sp, #12
 23feecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23feed0:	f7fc bd62 	b.w	23fb998 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23feed4:	7c00      	ldrb	r0, [r0, #16]
 23feed6:	9101      	str	r1, [sp, #4]
 23feed8:	f7fc fdb2 	bl	23fba40 <hal_usart_available_data_for_write>
 23feedc:	2800      	cmp	r0, #0
 23feede:	9901      	ldr	r1, [sp, #4]
 23feee0:	dcf2      	bgt.n	23feec8 <_ZN11USARTSerial5writeEh+0x8>
}
 23feee2:	4628      	mov	r0, r5
 23feee4:	b003      	add	sp, #12
 23feee6:	bd30      	pop	{r4, r5, pc}

023feee8 <_ZN11USARTSerialD0Ev>:
 23feee8:	b510      	push	{r4, lr}
 23feeea:	4604      	mov	r4, r0
 23feeec:	2114      	movs	r1, #20
 23feeee:	f7fc fa9a 	bl	23fb426 <_ZdlPvj>
 23feef2:	4620      	mov	r0, r4
 23feef4:	bd10      	pop	{r4, pc}
	...

023feef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23feef8:	b510      	push	{r4, lr}
 23feefa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feefe:	4604      	mov	r4, r0
 23fef00:	4608      	mov	r0, r1
 23fef02:	4611      	mov	r1, r2
 23fef04:	2200      	movs	r2, #0
 23fef06:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef0a:	4b04      	ldr	r3, [pc, #16]	; (23fef1c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fef0c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fef0e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fef10:	2301      	movs	r3, #1
 23fef12:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fef14:	f7fc fdb0 	bl	23fba78 <hal_usart_init_ex>
}
 23fef18:	4620      	mov	r0, r4
 23fef1a:	bd10      	pop	{r4, pc}
 23fef1c:	023ffce8 	.word	0x023ffce8

023fef20 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fef20:	2300      	movs	r3, #0
 23fef22:	7c00      	ldrb	r0, [r0, #16]
 23fef24:	f7fc bd9a 	b.w	23fba5c <hal_usart_begin_config>

023fef28 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fef28:	2200      	movs	r2, #0
 23fef2a:	f7ff bff9 	b.w	23fef20 <_ZN11USARTSerial5beginEmm>

023fef2e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fef2e:	7c00      	ldrb	r0, [r0, #16]
 23fef30:	f7fc bd24 	b.w	23fb97c <hal_usart_end>

023fef34 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fef34:	7c00      	ldrb	r0, [r0, #16]
 23fef36:	f7fc bd75 	b.w	23fba24 <hal_usart_is_enabled>
	...

023fef3c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fef3c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fef3e:	2000      	movs	r0, #0
 23fef40:	4b04      	ldr	r3, [pc, #16]	; (23fef54 <_GLOBAL__sub_I_System+0x18>)
 23fef42:	601a      	str	r2, [r3, #0]
 23fef44:	4b04      	ldr	r3, [pc, #16]	; (23fef58 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fef46:	4a05      	ldr	r2, [pc, #20]	; (23fef5c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fef48:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fef4c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fef4e:	f7fc bfdf 	b.w	23fbf10 <set_system_mode>
 23fef52:	bf00      	nop
 23fef54:	1007aefc 	.word	0x1007aefc
 23fef58:	1007aef0 	.word	0x1007aef0
 23fef5c:	ffff0000 	.word	0xffff0000

023fef60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fef60:	2200      	movs	r2, #0
 23fef62:	6840      	ldr	r0, [r0, #4]
 23fef64:	4611      	mov	r1, r2
 23fef66:	f7fc bf8d 	b.w	23fbe84 <network_listening>

023fef6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fef6a:	2200      	movs	r2, #0
 23fef6c:	6840      	ldr	r0, [r0, #4]
 23fef6e:	4611      	mov	r1, r2
 23fef70:	f7fc bfa4 	b.w	23fbebc <network_get_listen_timeout>

023fef74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fef74:	2200      	movs	r2, #0
 23fef76:	6840      	ldr	r0, [r0, #4]
 23fef78:	f7fc bf92 	b.w	23fbea0 <network_set_listen_timeout>

023fef7c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fef7c:	2200      	movs	r2, #0
 23fef7e:	6840      	ldr	r0, [r0, #4]
 23fef80:	f081 0101 	eor.w	r1, r1, #1
 23fef84:	f7fc bf70 	b.w	23fbe68 <network_listen>

023fef88 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef88:	2300      	movs	r3, #0
 23fef8a:	6840      	ldr	r0, [r0, #4]
 23fef8c:	461a      	mov	r2, r3
 23fef8e:	4619      	mov	r1, r3
 23fef90:	f7fc bf5c 	b.w	23fbe4c <network_off>

023fef94 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef94:	2300      	movs	r3, #0
 23fef96:	6840      	ldr	r0, [r0, #4]
 23fef98:	461a      	mov	r2, r3
 23fef9a:	4619      	mov	r1, r3
 23fef9c:	f7fc bf48 	b.w	23fbe30 <network_on>

023fefa0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fefa0:	2200      	movs	r2, #0
 23fefa2:	6840      	ldr	r0, [r0, #4]
 23fefa4:	4611      	mov	r1, r2
 23fefa6:	f7fc bf35 	b.w	23fbe14 <network_ready>

023fefaa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fefaa:	2200      	movs	r2, #0
 23fefac:	6840      	ldr	r0, [r0, #4]
 23fefae:	4611      	mov	r1, r2
 23fefb0:	f7fc bf14 	b.w	23fbddc <network_connecting>

023fefb4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fefb4:	2200      	movs	r2, #0
 23fefb6:	2102      	movs	r1, #2
 23fefb8:	6840      	ldr	r0, [r0, #4]
 23fefba:	f7fc bf1d 	b.w	23fbdf8 <network_disconnect>

023fefbe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fefbe:	2300      	movs	r3, #0
 23fefc0:	6840      	ldr	r0, [r0, #4]
 23fefc2:	461a      	mov	r2, r3
 23fefc4:	f7fc befc 	b.w	23fbdc0 <network_connect>

023fefc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fefc8:	2203      	movs	r2, #3
 23fefca:	4b02      	ldr	r3, [pc, #8]	; (23fefd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fefcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fefce:	4a02      	ldr	r2, [pc, #8]	; (23fefd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fefd0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fefd2:	4770      	bx	lr
 23fefd4:	1007af00 	.word	0x1007af00
 23fefd8:	023ffd18 	.word	0x023ffd18

023fefdc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fefdc:	b510      	push	{r4, lr}
 23fefde:	4604      	mov	r4, r0
{
	free(buffer);
 23fefe0:	6800      	ldr	r0, [r0, #0]
 23fefe2:	f7fc ffcd 	bl	23fbf80 <free>
}
 23fefe6:	4620      	mov	r0, r4
 23fefe8:	bd10      	pop	{r4, pc}

023fefea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fefea:	b510      	push	{r4, lr}
 23fefec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fefee:	6800      	ldr	r0, [r0, #0]
 23feff0:	b108      	cbz	r0, 23feff6 <_ZN6String10invalidateEv+0xc>
 23feff2:	f7fc ffc5 	bl	23fbf80 <free>
	buffer = NULL;
 23feff6:	2300      	movs	r3, #0
	capacity = len = 0;
 23feff8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23feffc:	6023      	str	r3, [r4, #0]
}
 23feffe:	bd10      	pop	{r4, pc}

023ff000 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff000:	b538      	push	{r3, r4, r5, lr}
 23ff002:	4604      	mov	r4, r0
 23ff004:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff006:	6800      	ldr	r0, [r0, #0]
 23ff008:	3101      	adds	r1, #1
 23ff00a:	f7fc ffc7 	bl	23fbf9c <realloc>
	if (newbuffer) {
 23ff00e:	b110      	cbz	r0, 23ff016 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff010:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff014:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff016:	bd38      	pop	{r3, r4, r5, pc}

023ff018 <_ZN6String7reserveEj>:
{
 23ff018:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff01a:	6803      	ldr	r3, [r0, #0]
{
 23ff01c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff01e:	b123      	cbz	r3, 23ff02a <_ZN6String7reserveEj+0x12>
 23ff020:	6843      	ldr	r3, [r0, #4]
 23ff022:	428b      	cmp	r3, r1
 23ff024:	d301      	bcc.n	23ff02a <_ZN6String7reserveEj+0x12>
 23ff026:	2001      	movs	r0, #1
}
 23ff028:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff02a:	4620      	mov	r0, r4
 23ff02c:	f7ff ffe8 	bl	23ff000 <_ZN6String12changeBufferEj>
 23ff030:	2800      	cmp	r0, #0
 23ff032:	d0f9      	beq.n	23ff028 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff034:	68a3      	ldr	r3, [r4, #8]
 23ff036:	2b00      	cmp	r3, #0
 23ff038:	d1f5      	bne.n	23ff026 <_ZN6String7reserveEj+0xe>
 23ff03a:	6822      	ldr	r2, [r4, #0]
 23ff03c:	7013      	strb	r3, [r2, #0]
 23ff03e:	e7f2      	b.n	23ff026 <_ZN6String7reserveEj+0xe>

023ff040 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff042:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff044:	4611      	mov	r1, r2
 23ff046:	9201      	str	r2, [sp, #4]
{
 23ff048:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff04a:	f7ff ffe5 	bl	23ff018 <_ZN6String7reserveEj>
 23ff04e:	9a01      	ldr	r2, [sp, #4]
 23ff050:	b928      	cbnz	r0, 23ff05e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff052:	4620      	mov	r0, r4
 23ff054:	f7ff ffc9 	bl	23fefea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff058:	4620      	mov	r0, r4
 23ff05a:	b003      	add	sp, #12
 23ff05c:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff05e:	4629      	mov	r1, r5
	len = length;
 23ff060:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff062:	6820      	ldr	r0, [r4, #0]
 23ff064:	f000 fa64 	bl	23ff530 <memcpy>
	buffer[len] = 0;
 23ff068:	2100      	movs	r1, #0
 23ff06a:	6822      	ldr	r2, [r4, #0]
 23ff06c:	68a3      	ldr	r3, [r4, #8]
 23ff06e:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff070:	e7f2      	b.n	23ff058 <_ZN6String4copyEPKcj+0x18>

023ff072 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff072:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff074:	b513      	push	{r0, r1, r4, lr}
 23ff076:	4604      	mov	r4, r0
	capacity = 0;
 23ff078:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff07c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff07e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff080:	b141      	cbz	r1, 23ff094 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff082:	4608      	mov	r0, r1
 23ff084:	9101      	str	r1, [sp, #4]
 23ff086:	f7fc f9a5 	bl	23fb3d4 <strlen>
 23ff08a:	9901      	ldr	r1, [sp, #4]
 23ff08c:	4602      	mov	r2, r0
 23ff08e:	4620      	mov	r0, r4
 23ff090:	f7ff ffd6 	bl	23ff040 <_ZN6String4copyEPKcj>
}
 23ff094:	4620      	mov	r0, r4
 23ff096:	b002      	add	sp, #8
 23ff098:	bd10      	pop	{r4, pc}

023ff09a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23ff09a:	b538      	push	{r3, r4, r5, lr}
 23ff09c:	4605      	mov	r5, r0
	if (buffer) {
 23ff09e:	6800      	ldr	r0, [r0, #0]
{
 23ff0a0:	460c      	mov	r4, r1
	if (buffer) {
 23ff0a2:	b168      	cbz	r0, 23ff0c0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23ff0a4:	686a      	ldr	r2, [r5, #4]
 23ff0a6:	688b      	ldr	r3, [r1, #8]
 23ff0a8:	429a      	cmp	r2, r3
 23ff0aa:	d307      	bcc.n	23ff0bc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23ff0ac:	6809      	ldr	r1, [r1, #0]
 23ff0ae:	f000 fab4 	bl	23ff61a <strcpy>
			len = rhs.len;
 23ff0b2:	68a3      	ldr	r3, [r4, #8]
 23ff0b4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff0b6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff0b8:	60a3      	str	r3, [r4, #8]
}
 23ff0ba:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff0bc:	f7fc ff60 	bl	23fbf80 <free>
	buffer = rhs.buffer;
 23ff0c0:	6823      	ldr	r3, [r4, #0]
 23ff0c2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff0c4:	6863      	ldr	r3, [r4, #4]
 23ff0c6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff0c8:	68a3      	ldr	r3, [r4, #8]
 23ff0ca:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff0cc:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff0ce:	e9c4 3300 	strd	r3, r3, [r4]
 23ff0d2:	e7f1      	b.n	23ff0b8 <_ZN6String4moveERS_+0x1e>

023ff0d4 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff0d4:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff0d6:	b510      	push	{r4, lr}
 23ff0d8:	4604      	mov	r4, r0
	capacity = 0;
 23ff0da:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff0de:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff0e0:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff0e2:	f7ff ffda 	bl	23ff09a <_ZN6String4moveERS_>
}
 23ff0e6:	4620      	mov	r0, r4
 23ff0e8:	bd10      	pop	{r4, pc}

023ff0ea <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff0ea:	4288      	cmp	r0, r1
{
 23ff0ec:	b510      	push	{r4, lr}
 23ff0ee:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff0f0:	d005      	beq.n	23ff0fe <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff0f2:	680b      	ldr	r3, [r1, #0]
 23ff0f4:	b12b      	cbz	r3, 23ff102 <_ZN6StringaSERKS_+0x18>
 23ff0f6:	688a      	ldr	r2, [r1, #8]
 23ff0f8:	4619      	mov	r1, r3
 23ff0fa:	f7ff ffa1 	bl	23ff040 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff0fe:	4620      	mov	r0, r4
 23ff100:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff102:	f7ff ff72 	bl	23fefea <_ZN6String10invalidateEv>
 23ff106:	e7fa      	b.n	23ff0fe <_ZN6StringaSERKS_+0x14>

023ff108 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff108:	2300      	movs	r3, #0
String::String(const String &value)
 23ff10a:	b510      	push	{r4, lr}
 23ff10c:	4604      	mov	r4, r0
	capacity = 0;
 23ff10e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff112:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff114:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff116:	f7ff ffe8 	bl	23ff0ea <_ZN6StringaSERKS_>
}
 23ff11a:	4620      	mov	r0, r4
 23ff11c:	bd10      	pop	{r4, pc}

023ff11e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23ff11e:	b513      	push	{r0, r1, r4, lr}
 23ff120:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23ff122:	b159      	cbz	r1, 23ff13c <_ZN6StringaSEPKc+0x1e>
 23ff124:	4608      	mov	r0, r1
 23ff126:	9101      	str	r1, [sp, #4]
 23ff128:	f7fc f954 	bl	23fb3d4 <strlen>
 23ff12c:	9901      	ldr	r1, [sp, #4]
 23ff12e:	4602      	mov	r2, r0
 23ff130:	4620      	mov	r0, r4
 23ff132:	f7ff ff85 	bl	23ff040 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff136:	4620      	mov	r0, r4
 23ff138:	b002      	add	sp, #8
 23ff13a:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff13c:	f7ff ff55 	bl	23fefea <_ZN6String10invalidateEv>
 23ff140:	e7f9      	b.n	23ff136 <_ZN6StringaSEPKc+0x18>

023ff142 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff142:	4770      	bx	lr

023ff144 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff144:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff146:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff148:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff14a:	462a      	mov	r2, r5
 23ff14c:	2100      	movs	r1, #0
 23ff14e:	f000 fa16 	bl	23ff57e <memset>
 23ff152:	8025      	strh	r5, [r4, #0]
 23ff154:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff156:	4907      	ldr	r1, [pc, #28]	; (23ff174 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff158:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff15a:	8125      	strh	r5, [r4, #8]
 23ff15c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff15e:	f000 f8b1 	bl	23ff2c4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff162:	4904      	ldr	r1, [pc, #16]	; (23ff174 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff164:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff166:	4628      	mov	r0, r5
 23ff168:	f000 f8ac 	bl	23ff2c4 <_ZnajRKSt9nothrow_t>
    };
 23ff16c:	60e0      	str	r0, [r4, #12]
}
 23ff16e:	4620      	mov	r0, r4
 23ff170:	bd38      	pop	{r3, r4, r5, pc}
 23ff172:	bf00      	nop
 23ff174:	023ffd4c 	.word	0x023ffd4c

023ff178 <__tcf_2>:
 23ff178:	4770      	bx	lr

023ff17a <__tcf_1>:
 23ff17a:	4770      	bx	lr

023ff17c <_Z20acquireSerial1Bufferv>:
{
 23ff17c:	b510      	push	{r4, lr}
 23ff17e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff180:	f7ff ffe0 	bl	23ff144 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff184:	4620      	mov	r0, r4
 23ff186:	bd10      	pop	{r4, pc}

023ff188 <_Z20acquireSerial2Bufferv>:
 23ff188:	b510      	push	{r4, lr}
 23ff18a:	4604      	mov	r4, r0
 23ff18c:	f7ff ffda 	bl	23ff144 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff190:	4620      	mov	r0, r4
 23ff192:	bd10      	pop	{r4, pc}

023ff194 <_Z20acquireSerial3Bufferv>:
 23ff194:	b510      	push	{r4, lr}
 23ff196:	4604      	mov	r4, r0
 23ff198:	f7ff ffd4 	bl	23ff144 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff19c:	4620      	mov	r0, r4
 23ff19e:	bd10      	pop	{r4, pc}

023ff1a0 <_Z22__fetch_global_Serial1v>:
{
 23ff1a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1a2:	4d0e      	ldr	r5, [pc, #56]	; (23ff1dc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff1a4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1a6:	e8d5 1f8f 	ldab	r1, [r5]
 23ff1aa:	f011 0401 	ands.w	r4, r1, #1
 23ff1ae:	d111      	bne.n	23ff1d4 <_Z22__fetch_global_Serial1v+0x34>
 23ff1b0:	4628      	mov	r0, r5
 23ff1b2:	f7fc f947 	bl	23fb444 <__cxa_guard_acquire>
 23ff1b6:	b168      	cbz	r0, 23ff1d4 <_Z22__fetch_global_Serial1v+0x34>
 23ff1b8:	a801      	add	r0, sp, #4
 23ff1ba:	f7ff ffdf 	bl	23ff17c <_Z20acquireSerial1Bufferv>
 23ff1be:	4621      	mov	r1, r4
 23ff1c0:	aa01      	add	r2, sp, #4
 23ff1c2:	4807      	ldr	r0, [pc, #28]	; (23ff1e0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1c4:	f7ff fe98 	bl	23feef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1c8:	4628      	mov	r0, r5
 23ff1ca:	f7fc f940 	bl	23fb44e <__cxa_guard_release>
 23ff1ce:	4805      	ldr	r0, [pc, #20]	; (23ff1e4 <_Z22__fetch_global_Serial1v+0x44>)
 23ff1d0:	f000 f990 	bl	23ff4f4 <atexit>
    return serial1;
}
 23ff1d4:	4802      	ldr	r0, [pc, #8]	; (23ff1e0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1d6:	b007      	add	sp, #28
 23ff1d8:	bd30      	pop	{r4, r5, pc}
 23ff1da:	bf00      	nop
 23ff1dc:	1007af0c 	.word	0x1007af0c
 23ff1e0:	1007af18 	.word	0x1007af18
 23ff1e4:	023ff143 	.word	0x023ff143

023ff1e8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff1e8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1ea:	4c0d      	ldr	r4, [pc, #52]	; (23ff220 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff1ec:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1ee:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1f2:	07db      	lsls	r3, r3, #31
 23ff1f4:	d411      	bmi.n	23ff21a <_Z22__fetch_global_Serial2v+0x32>
 23ff1f6:	4620      	mov	r0, r4
 23ff1f8:	f7fc f924 	bl	23fb444 <__cxa_guard_acquire>
 23ff1fc:	b168      	cbz	r0, 23ff21a <_Z22__fetch_global_Serial2v+0x32>
 23ff1fe:	a801      	add	r0, sp, #4
 23ff200:	f7ff ffc2 	bl	23ff188 <_Z20acquireSerial2Bufferv>
 23ff204:	2101      	movs	r1, #1
 23ff206:	aa01      	add	r2, sp, #4
 23ff208:	4806      	ldr	r0, [pc, #24]	; (23ff224 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff20a:	f7ff fe75 	bl	23feef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff20e:	4620      	mov	r0, r4
 23ff210:	f7fc f91d 	bl	23fb44e <__cxa_guard_release>
 23ff214:	4804      	ldr	r0, [pc, #16]	; (23ff228 <_Z22__fetch_global_Serial2v+0x40>)
 23ff216:	f000 f96d 	bl	23ff4f4 <atexit>
	return serial2;
}
 23ff21a:	4802      	ldr	r0, [pc, #8]	; (23ff224 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff21c:	b006      	add	sp, #24
 23ff21e:	bd10      	pop	{r4, pc}
 23ff220:	1007af10 	.word	0x1007af10
 23ff224:	1007af2c 	.word	0x1007af2c
 23ff228:	023ff17b 	.word	0x023ff17b

023ff22c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff22c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff22e:	f7ff ffdb 	bl	23ff1e8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff232:	4b07      	ldr	r3, [pc, #28]	; (23ff250 <_Z15serialEventRun2v+0x24>)
 23ff234:	4604      	mov	r4, r0
 23ff236:	b153      	cbz	r3, 23ff24e <_Z15serialEventRun2v+0x22>
 23ff238:	f7ff fe7c 	bl	23fef34 <_ZN11USARTSerial9isEnabledEv>
 23ff23c:	b138      	cbz	r0, 23ff24e <_Z15serialEventRun2v+0x22>
 23ff23e:	6823      	ldr	r3, [r4, #0]
 23ff240:	4620      	mov	r0, r4
 23ff242:	691b      	ldr	r3, [r3, #16]
 23ff244:	4798      	blx	r3
 23ff246:	2800      	cmp	r0, #0
 23ff248:	dd01      	ble.n	23ff24e <_Z15serialEventRun2v+0x22>
        handler();
 23ff24a:	e000      	b.n	23ff24e <_Z15serialEventRun2v+0x22>
 23ff24c:	bf00      	nop
}
 23ff24e:	bd10      	pop	{r4, pc}
 23ff250:	00000000 	.word	0x00000000

023ff254 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff254:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff256:	4c0d      	ldr	r4, [pc, #52]	; (23ff28c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff258:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff25a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff25e:	07db      	lsls	r3, r3, #31
 23ff260:	d411      	bmi.n	23ff286 <_Z22__fetch_global_Serial3v+0x32>
 23ff262:	4620      	mov	r0, r4
 23ff264:	f7fc f8ee 	bl	23fb444 <__cxa_guard_acquire>
 23ff268:	b168      	cbz	r0, 23ff286 <_Z22__fetch_global_Serial3v+0x32>
 23ff26a:	a801      	add	r0, sp, #4
 23ff26c:	f7ff ff92 	bl	23ff194 <_Z20acquireSerial3Bufferv>
 23ff270:	2102      	movs	r1, #2
 23ff272:	aa01      	add	r2, sp, #4
 23ff274:	4806      	ldr	r0, [pc, #24]	; (23ff290 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff276:	f7ff fe3f 	bl	23feef8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff27a:	4620      	mov	r0, r4
 23ff27c:	f7fc f8e7 	bl	23fb44e <__cxa_guard_release>
 23ff280:	4804      	ldr	r0, [pc, #16]	; (23ff294 <_Z22__fetch_global_Serial3v+0x40>)
 23ff282:	f000 f937 	bl	23ff4f4 <atexit>
	return serial3;
}
 23ff286:	4802      	ldr	r0, [pc, #8]	; (23ff290 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff288:	b006      	add	sp, #24
 23ff28a:	bd10      	pop	{r4, pc}
 23ff28c:	1007af14 	.word	0x1007af14
 23ff290:	1007af40 	.word	0x1007af40
 23ff294:	023ff179 	.word	0x023ff179

023ff298 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff298:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff29a:	f7ff ffdb 	bl	23ff254 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff29e:	4b07      	ldr	r3, [pc, #28]	; (23ff2bc <_Z15serialEventRun3v+0x24>)
 23ff2a0:	4604      	mov	r4, r0
 23ff2a2:	b153      	cbz	r3, 23ff2ba <_Z15serialEventRun3v+0x22>
 23ff2a4:	f7ff fe46 	bl	23fef34 <_ZN11USARTSerial9isEnabledEv>
 23ff2a8:	b138      	cbz	r0, 23ff2ba <_Z15serialEventRun3v+0x22>
 23ff2aa:	6823      	ldr	r3, [r4, #0]
 23ff2ac:	4620      	mov	r0, r4
 23ff2ae:	691b      	ldr	r3, [r3, #16]
 23ff2b0:	4798      	blx	r3
 23ff2b2:	2800      	cmp	r0, #0
 23ff2b4:	dd01      	ble.n	23ff2ba <_Z15serialEventRun3v+0x22>
        handler();
 23ff2b6:	e000      	b.n	23ff2ba <_Z15serialEventRun3v+0x22>
 23ff2b8:	bf00      	nop
}
 23ff2ba:	bd10      	pop	{r4, pc}
 23ff2bc:	00000000 	.word	0x00000000

023ff2c0 <_ZnwjRKSt9nothrow_t>:
 23ff2c0:	f7fc b8ad 	b.w	23fb41e <_Znwj>

023ff2c4 <_ZnajRKSt9nothrow_t>:
 23ff2c4:	f7fc b8ad 	b.w	23fb422 <_Znaj>

023ff2c8 <_ZSt25__throw_bad_function_callv>:
 23ff2c8:	b508      	push	{r3, lr}
 23ff2ca:	f7fc fe83 	bl	23fbfd4 <abort>
	...

023ff2d0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff2d0:	4901      	ldr	r1, [pc, #4]	; (23ff2d8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff2d2:	f000 b8f9 	b.w	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff2d6:	bf00      	nop
 23ff2d8:	023ffd68 	.word	0x023ffd68

023ff2dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff2dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff2de:	2400      	movs	r4, #0
 23ff2e0:	2310      	movs	r3, #16
 23ff2e2:	4615      	mov	r5, r2
 23ff2e4:	6812      	ldr	r2, [r2, #0]
 23ff2e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff2ea:	6803      	ldr	r3, [r0, #0]
 23ff2ec:	e9cd 4400 	strd	r4, r4, [sp]
 23ff2f0:	699e      	ldr	r6, [r3, #24]
 23ff2f2:	466b      	mov	r3, sp
 23ff2f4:	47b0      	blx	r6
 23ff2f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff2fa:	f003 0306 	and.w	r3, r3, #6
 23ff2fe:	2b06      	cmp	r3, #6
 23ff300:	bf05      	ittet	eq
 23ff302:	9b00      	ldreq	r3, [sp, #0]
 23ff304:	2001      	moveq	r0, #1
 23ff306:	4620      	movne	r0, r4
 23ff308:	602b      	streq	r3, [r5, #0]
 23ff30a:	b004      	add	sp, #16
 23ff30c:	bd70      	pop	{r4, r5, r6, pc}

023ff30e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff30e:	9800      	ldr	r0, [sp, #0]
 23ff310:	4290      	cmp	r0, r2
 23ff312:	bf14      	ite	ne
 23ff314:	2001      	movne	r0, #1
 23ff316:	2006      	moveq	r0, #6
 23ff318:	4770      	bx	lr
	...

023ff31c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff31c:	4b03      	ldr	r3, [pc, #12]	; (23ff32c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff31e:	b510      	push	{r4, lr}
 23ff320:	4604      	mov	r4, r0
 23ff322:	6003      	str	r3, [r0, #0]
 23ff324:	f000 f8cd 	bl	23ff4c2 <_ZNSt9type_infoD1Ev>
 23ff328:	4620      	mov	r0, r4
 23ff32a:	bd10      	pop	{r4, pc}
 23ff32c:	023ffda8 	.word	0x023ffda8

023ff330 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff330:	b510      	push	{r4, lr}
 23ff332:	4604      	mov	r4, r0
 23ff334:	f7ff fff2 	bl	23ff31c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff338:	2108      	movs	r1, #8
 23ff33a:	4620      	mov	r0, r4
 23ff33c:	f7fc f873 	bl	23fb426 <_ZdlPvj>
 23ff340:	4620      	mov	r0, r4
 23ff342:	bd10      	pop	{r4, pc}

023ff344 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff348:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff34c:	461f      	mov	r7, r3
 23ff34e:	4606      	mov	r6, r0
 23ff350:	4615      	mov	r5, r2
 23ff352:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff356:	4598      	cmp	r8, r3
 23ff358:	d107      	bne.n	23ff36a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff35a:	9907      	ldr	r1, [sp, #28]
 23ff35c:	f000 f8b4 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff360:	b118      	cbz	r0, 23ff36a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff362:	7165      	strb	r5, [r4, #5]
 23ff364:	2000      	movs	r0, #0
 23ff366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff36a:	4639      	mov	r1, r7
 23ff36c:	4630      	mov	r0, r6
 23ff36e:	f000 f8ab 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff372:	2800      	cmp	r0, #0
 23ff374:	d0f6      	beq.n	23ff364 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff376:	2301      	movs	r3, #1
 23ff378:	f8c4 8000 	str.w	r8, [r4]
 23ff37c:	7125      	strb	r5, [r4, #4]
 23ff37e:	71a3      	strb	r3, [r4, #6]
 23ff380:	e7f0      	b.n	23ff364 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff382 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff382:	b538      	push	{r3, r4, r5, lr}
 23ff384:	4615      	mov	r5, r2
 23ff386:	461c      	mov	r4, r3
 23ff388:	f000 f89e 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff38c:	b120      	cbz	r0, 23ff398 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff38e:	2308      	movs	r3, #8
 23ff390:	6025      	str	r5, [r4, #0]
 23ff392:	60e3      	str	r3, [r4, #12]
 23ff394:	2306      	movs	r3, #6
 23ff396:	7123      	strb	r3, [r4, #4]
 23ff398:	bd38      	pop	{r3, r4, r5, pc}

023ff39a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff39a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff39c:	4605      	mov	r5, r0
 23ff39e:	460c      	mov	r4, r1
 23ff3a0:	461e      	mov	r6, r3
 23ff3a2:	9201      	str	r2, [sp, #4]
 23ff3a4:	f000 f890 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff3a8:	b950      	cbnz	r0, 23ff3c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff3aa:	2e03      	cmp	r6, #3
 23ff3ac:	d808      	bhi.n	23ff3c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff3ae:	6823      	ldr	r3, [r4, #0]
 23ff3b0:	4629      	mov	r1, r5
 23ff3b2:	9a01      	ldr	r2, [sp, #4]
 23ff3b4:	4620      	mov	r0, r4
 23ff3b6:	695b      	ldr	r3, [r3, #20]
 23ff3b8:	b002      	add	sp, #8
 23ff3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff3be:	4718      	bx	r3
 23ff3c0:	b002      	add	sp, #8
 23ff3c2:	bd70      	pop	{r4, r5, r6, pc}

023ff3c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff3c4:	4b03      	ldr	r3, [pc, #12]	; (23ff3d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff3c6:	b510      	push	{r4, lr}
 23ff3c8:	4604      	mov	r4, r0
 23ff3ca:	6003      	str	r3, [r0, #0]
 23ff3cc:	f7ff ffa6 	bl	23ff31c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff3d0:	4620      	mov	r0, r4
 23ff3d2:	bd10      	pop	{r4, pc}
 23ff3d4:	023ffe08 	.word	0x023ffe08

023ff3d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff3d8:	b510      	push	{r4, lr}
 23ff3da:	4604      	mov	r4, r0
 23ff3dc:	f7ff fff2 	bl	23ff3c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff3e0:	210c      	movs	r1, #12
 23ff3e2:	4620      	mov	r0, r4
 23ff3e4:	f7fc f81f 	bl	23fb426 <_ZdlPvj>
 23ff3e8:	4620      	mov	r0, r4
 23ff3ea:	bd10      	pop	{r4, pc}

023ff3ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff3ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff3ee:	9f08      	ldr	r7, [sp, #32]
 23ff3f0:	4605      	mov	r5, r0
 23ff3f2:	460e      	mov	r6, r1
 23ff3f4:	4614      	mov	r4, r2
 23ff3f6:	4297      	cmp	r7, r2
 23ff3f8:	d00a      	beq.n	23ff410 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff3fa:	68a8      	ldr	r0, [r5, #8]
 23ff3fc:	4631      	mov	r1, r6
 23ff3fe:	6802      	ldr	r2, [r0, #0]
 23ff400:	9708      	str	r7, [sp, #32]
 23ff402:	6a15      	ldr	r5, [r2, #32]
 23ff404:	4622      	mov	r2, r4
 23ff406:	46ac      	mov	ip, r5
 23ff408:	b003      	add	sp, #12
 23ff40a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff40e:	4760      	bx	ip
 23ff410:	4619      	mov	r1, r3
 23ff412:	9301      	str	r3, [sp, #4]
 23ff414:	f000 f858 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff418:	9b01      	ldr	r3, [sp, #4]
 23ff41a:	2800      	cmp	r0, #0
 23ff41c:	d0ed      	beq.n	23ff3fa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff41e:	2006      	movs	r0, #6
 23ff420:	b003      	add	sp, #12
 23ff422:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff424:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff428:	460d      	mov	r5, r1
 23ff42a:	4619      	mov	r1, r3
 23ff42c:	4681      	mov	r9, r0
 23ff42e:	4617      	mov	r7, r2
 23ff430:	4698      	mov	r8, r3
 23ff432:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff436:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff43a:	f000 f845 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff43e:	b190      	cbz	r0, 23ff466 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff440:	2d00      	cmp	r5, #0
 23ff442:	6034      	str	r4, [r6, #0]
 23ff444:	7137      	strb	r7, [r6, #4]
 23ff446:	db09      	blt.n	23ff45c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff448:	1961      	adds	r1, r4, r5
 23ff44a:	458a      	cmp	sl, r1
 23ff44c:	bf0c      	ite	eq
 23ff44e:	2106      	moveq	r1, #6
 23ff450:	2101      	movne	r1, #1
 23ff452:	71b1      	strb	r1, [r6, #6]
 23ff454:	2000      	movs	r0, #0
 23ff456:	b001      	add	sp, #4
 23ff458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff45c:	3502      	adds	r5, #2
 23ff45e:	d1f9      	bne.n	23ff454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff460:	2301      	movs	r3, #1
 23ff462:	71b3      	strb	r3, [r6, #6]
 23ff464:	e7f6      	b.n	23ff454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff466:	4554      	cmp	r4, sl
 23ff468:	d106      	bne.n	23ff478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff46a:	4659      	mov	r1, fp
 23ff46c:	4648      	mov	r0, r9
 23ff46e:	f000 f82b 	bl	23ff4c8 <_ZNKSt9type_infoeqERKS_>
 23ff472:	b108      	cbz	r0, 23ff478 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff474:	7177      	strb	r7, [r6, #5]
 23ff476:	e7ed      	b.n	23ff454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff478:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff47c:	463a      	mov	r2, r7
 23ff47e:	4629      	mov	r1, r5
 23ff480:	6803      	ldr	r3, [r0, #0]
 23ff482:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff486:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff48a:	69dc      	ldr	r4, [r3, #28]
 23ff48c:	4643      	mov	r3, r8
 23ff48e:	46a4      	mov	ip, r4
 23ff490:	b001      	add	sp, #4
 23ff492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff496:	4760      	bx	ip

023ff498 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff49c:	4607      	mov	r7, r0
 23ff49e:	460c      	mov	r4, r1
 23ff4a0:	4615      	mov	r5, r2
 23ff4a2:	461e      	mov	r6, r3
 23ff4a4:	f7ff ff6d 	bl	23ff382 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff4a8:	b948      	cbnz	r0, 23ff4be <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff4aa:	68b8      	ldr	r0, [r7, #8]
 23ff4ac:	462a      	mov	r2, r5
 23ff4ae:	4621      	mov	r1, r4
 23ff4b0:	6803      	ldr	r3, [r0, #0]
 23ff4b2:	699f      	ldr	r7, [r3, #24]
 23ff4b4:	4633      	mov	r3, r6
 23ff4b6:	46bc      	mov	ip, r7
 23ff4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff4bc:	4760      	bx	ip
 23ff4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff4c2 <_ZNSt9type_infoD1Ev>:
 23ff4c2:	4770      	bx	lr

023ff4c4 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff4c4:	2000      	movs	r0, #0
 23ff4c6:	4770      	bx	lr

023ff4c8 <_ZNKSt9type_infoeqERKS_>:
 23ff4c8:	4281      	cmp	r1, r0
 23ff4ca:	b508      	push	{r3, lr}
 23ff4cc:	d00e      	beq.n	23ff4ec <_ZNKSt9type_infoeqERKS_+0x24>
 23ff4ce:	6840      	ldr	r0, [r0, #4]
 23ff4d0:	7803      	ldrb	r3, [r0, #0]
 23ff4d2:	2b2a      	cmp	r3, #42	; 0x2a
 23ff4d4:	d00c      	beq.n	23ff4f0 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff4d6:	6849      	ldr	r1, [r1, #4]
 23ff4d8:	780b      	ldrb	r3, [r1, #0]
 23ff4da:	2b2a      	cmp	r3, #42	; 0x2a
 23ff4dc:	bf08      	it	eq
 23ff4de:	3101      	addeq	r1, #1
 23ff4e0:	f7fb ff6e 	bl	23fb3c0 <strcmp>
 23ff4e4:	fab0 f080 	clz	r0, r0
 23ff4e8:	0940      	lsrs	r0, r0, #5
 23ff4ea:	bd08      	pop	{r3, pc}
 23ff4ec:	2001      	movs	r0, #1
 23ff4ee:	e7fc      	b.n	23ff4ea <_ZNKSt9type_infoeqERKS_+0x22>
 23ff4f0:	2000      	movs	r0, #0
 23ff4f2:	e7fa      	b.n	23ff4ea <_ZNKSt9type_infoeqERKS_+0x22>

023ff4f4 <atexit>:
 23ff4f4:	2300      	movs	r3, #0
 23ff4f6:	4601      	mov	r1, r0
 23ff4f8:	461a      	mov	r2, r3
 23ff4fa:	4618      	mov	r0, r3
 23ff4fc:	f000 b956 	b.w	23ff7ac <__register_exitproc>

023ff500 <isprint>:
 23ff500:	4b02      	ldr	r3, [pc, #8]	; (23ff50c <isprint+0xc>)
 23ff502:	4418      	add	r0, r3
 23ff504:	7840      	ldrb	r0, [r0, #1]
 23ff506:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff50a:	4770      	bx	lr
 23ff50c:	023ffed5 	.word	0x023ffed5

023ff510 <memcmp>:
 23ff510:	3901      	subs	r1, #1
 23ff512:	4402      	add	r2, r0
 23ff514:	b510      	push	{r4, lr}
 23ff516:	4290      	cmp	r0, r2
 23ff518:	d101      	bne.n	23ff51e <memcmp+0xe>
 23ff51a:	2000      	movs	r0, #0
 23ff51c:	e005      	b.n	23ff52a <memcmp+0x1a>
 23ff51e:	7803      	ldrb	r3, [r0, #0]
 23ff520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff524:	42a3      	cmp	r3, r4
 23ff526:	d001      	beq.n	23ff52c <memcmp+0x1c>
 23ff528:	1b18      	subs	r0, r3, r4
 23ff52a:	bd10      	pop	{r4, pc}
 23ff52c:	3001      	adds	r0, #1
 23ff52e:	e7f2      	b.n	23ff516 <memcmp+0x6>

023ff530 <memcpy>:
 23ff530:	440a      	add	r2, r1
 23ff532:	1e43      	subs	r3, r0, #1
 23ff534:	4291      	cmp	r1, r2
 23ff536:	d100      	bne.n	23ff53a <memcpy+0xa>
 23ff538:	4770      	bx	lr
 23ff53a:	b510      	push	{r4, lr}
 23ff53c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff540:	4291      	cmp	r1, r2
 23ff542:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff546:	d1f9      	bne.n	23ff53c <memcpy+0xc>
 23ff548:	bd10      	pop	{r4, pc}

023ff54a <memmove>:
 23ff54a:	4288      	cmp	r0, r1
 23ff54c:	b510      	push	{r4, lr}
 23ff54e:	eb01 0402 	add.w	r4, r1, r2
 23ff552:	d902      	bls.n	23ff55a <memmove+0x10>
 23ff554:	4284      	cmp	r4, r0
 23ff556:	4623      	mov	r3, r4
 23ff558:	d807      	bhi.n	23ff56a <memmove+0x20>
 23ff55a:	1e43      	subs	r3, r0, #1
 23ff55c:	42a1      	cmp	r1, r4
 23ff55e:	d008      	beq.n	23ff572 <memmove+0x28>
 23ff560:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff564:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff568:	e7f8      	b.n	23ff55c <memmove+0x12>
 23ff56a:	4402      	add	r2, r0
 23ff56c:	4601      	mov	r1, r0
 23ff56e:	428a      	cmp	r2, r1
 23ff570:	d100      	bne.n	23ff574 <memmove+0x2a>
 23ff572:	bd10      	pop	{r4, pc}
 23ff574:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff578:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff57c:	e7f7      	b.n	23ff56e <memmove+0x24>

023ff57e <memset>:
 23ff57e:	4402      	add	r2, r0
 23ff580:	4603      	mov	r3, r0
 23ff582:	4293      	cmp	r3, r2
 23ff584:	d100      	bne.n	23ff588 <memset+0xa>
 23ff586:	4770      	bx	lr
 23ff588:	f803 1b01 	strb.w	r1, [r3], #1
 23ff58c:	e7f9      	b.n	23ff582 <memset+0x4>
	...

023ff590 <srand>:
 23ff590:	b538      	push	{r3, r4, r5, lr}
 23ff592:	4b10      	ldr	r3, [pc, #64]	; (23ff5d4 <srand+0x44>)
 23ff594:	4604      	mov	r4, r0
 23ff596:	681d      	ldr	r5, [r3, #0]
 23ff598:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff59a:	b9b3      	cbnz	r3, 23ff5ca <srand+0x3a>
 23ff59c:	2018      	movs	r0, #24
 23ff59e:	f7fc fce1 	bl	23fbf64 <malloc>
 23ff5a2:	4602      	mov	r2, r0
 23ff5a4:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff5a6:	b920      	cbnz	r0, 23ff5b2 <srand+0x22>
 23ff5a8:	4b0b      	ldr	r3, [pc, #44]	; (23ff5d8 <srand+0x48>)
 23ff5aa:	2142      	movs	r1, #66	; 0x42
 23ff5ac:	480b      	ldr	r0, [pc, #44]	; (23ff5dc <srand+0x4c>)
 23ff5ae:	f7fc fd2d 	bl	23fc00c <__assert_func>
 23ff5b2:	490b      	ldr	r1, [pc, #44]	; (23ff5e0 <srand+0x50>)
 23ff5b4:	4b0b      	ldr	r3, [pc, #44]	; (23ff5e4 <srand+0x54>)
 23ff5b6:	e9c0 1300 	strd	r1, r3, [r0]
 23ff5ba:	4b0b      	ldr	r3, [pc, #44]	; (23ff5e8 <srand+0x58>)
 23ff5bc:	2100      	movs	r1, #0
 23ff5be:	6083      	str	r3, [r0, #8]
 23ff5c0:	230b      	movs	r3, #11
 23ff5c2:	8183      	strh	r3, [r0, #12]
 23ff5c4:	2001      	movs	r0, #1
 23ff5c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff5ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff5cc:	2200      	movs	r2, #0
 23ff5ce:	611c      	str	r4, [r3, #16]
 23ff5d0:	615a      	str	r2, [r3, #20]
 23ff5d2:	bd38      	pop	{r3, r4, r5, pc}
 23ff5d4:	1007ad88 	.word	0x1007ad88
 23ff5d8:	023ffe41 	.word	0x023ffe41
 23ff5dc:	023ffe58 	.word	0x023ffe58
 23ff5e0:	abcd330e 	.word	0xabcd330e
 23ff5e4:	e66d1234 	.word	0xe66d1234
 23ff5e8:	0005deec 	.word	0x0005deec

023ff5ec <strchr>:
 23ff5ec:	b2c9      	uxtb	r1, r1
 23ff5ee:	4603      	mov	r3, r0
 23ff5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff5f4:	b11a      	cbz	r2, 23ff5fe <strchr+0x12>
 23ff5f6:	428a      	cmp	r2, r1
 23ff5f8:	d1f9      	bne.n	23ff5ee <strchr+0x2>
 23ff5fa:	4618      	mov	r0, r3
 23ff5fc:	4770      	bx	lr
 23ff5fe:	2900      	cmp	r1, #0
 23ff600:	bf18      	it	ne
 23ff602:	2300      	movne	r3, #0
 23ff604:	e7f9      	b.n	23ff5fa <strchr+0xe>

023ff606 <strchrnul>:
 23ff606:	b510      	push	{r4, lr}
 23ff608:	4604      	mov	r4, r0
 23ff60a:	f7ff ffef 	bl	23ff5ec <strchr>
 23ff60e:	b918      	cbnz	r0, 23ff618 <strchrnul+0x12>
 23ff610:	4620      	mov	r0, r4
 23ff612:	f7fb fedf 	bl	23fb3d4 <strlen>
 23ff616:	4420      	add	r0, r4
 23ff618:	bd10      	pop	{r4, pc}

023ff61a <strcpy>:
 23ff61a:	4603      	mov	r3, r0
 23ff61c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff620:	f803 2b01 	strb.w	r2, [r3], #1
 23ff624:	2a00      	cmp	r2, #0
 23ff626:	d1f9      	bne.n	23ff61c <strcpy+0x2>
 23ff628:	4770      	bx	lr

023ff62a <strncmp>:
 23ff62a:	b510      	push	{r4, lr}
 23ff62c:	b17a      	cbz	r2, 23ff64e <strncmp+0x24>
 23ff62e:	4603      	mov	r3, r0
 23ff630:	3901      	subs	r1, #1
 23ff632:	1884      	adds	r4, r0, r2
 23ff634:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff638:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff63c:	4290      	cmp	r0, r2
 23ff63e:	d101      	bne.n	23ff644 <strncmp+0x1a>
 23ff640:	42a3      	cmp	r3, r4
 23ff642:	d101      	bne.n	23ff648 <strncmp+0x1e>
 23ff644:	1a80      	subs	r0, r0, r2
 23ff646:	bd10      	pop	{r4, pc}
 23ff648:	2800      	cmp	r0, #0
 23ff64a:	d1f3      	bne.n	23ff634 <strncmp+0xa>
 23ff64c:	e7fa      	b.n	23ff644 <strncmp+0x1a>
 23ff64e:	4610      	mov	r0, r2
 23ff650:	e7f9      	b.n	23ff646 <strncmp+0x1c>

023ff652 <strnlen>:
 23ff652:	4602      	mov	r2, r0
 23ff654:	4401      	add	r1, r0
 23ff656:	b510      	push	{r4, lr}
 23ff658:	428a      	cmp	r2, r1
 23ff65a:	4613      	mov	r3, r2
 23ff65c:	d003      	beq.n	23ff666 <strnlen+0x14>
 23ff65e:	781c      	ldrb	r4, [r3, #0]
 23ff660:	3201      	adds	r2, #1
 23ff662:	2c00      	cmp	r4, #0
 23ff664:	d1f8      	bne.n	23ff658 <strnlen+0x6>
 23ff666:	1a18      	subs	r0, r3, r0
 23ff668:	bd10      	pop	{r4, pc}

023ff66a <strrchr>:
 23ff66a:	b538      	push	{r3, r4, r5, lr}
 23ff66c:	4603      	mov	r3, r0
 23ff66e:	460c      	mov	r4, r1
 23ff670:	b969      	cbnz	r1, 23ff68e <strrchr+0x24>
 23ff672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff676:	f7ff bfb9 	b.w	23ff5ec <strchr>
 23ff67a:	1c43      	adds	r3, r0, #1
 23ff67c:	4605      	mov	r5, r0
 23ff67e:	4621      	mov	r1, r4
 23ff680:	4618      	mov	r0, r3
 23ff682:	f7ff ffb3 	bl	23ff5ec <strchr>
 23ff686:	2800      	cmp	r0, #0
 23ff688:	d1f7      	bne.n	23ff67a <strrchr+0x10>
 23ff68a:	4628      	mov	r0, r5
 23ff68c:	bd38      	pop	{r3, r4, r5, pc}
 23ff68e:	2500      	movs	r5, #0
 23ff690:	e7f5      	b.n	23ff67e <strrchr+0x14>
	...

023ff694 <_strtol_l.constprop.0>:
 23ff694:	2b01      	cmp	r3, #1
 23ff696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff69a:	d001      	beq.n	23ff6a0 <_strtol_l.constprop.0+0xc>
 23ff69c:	2b24      	cmp	r3, #36	; 0x24
 23ff69e:	d906      	bls.n	23ff6ae <_strtol_l.constprop.0+0x1a>
 23ff6a0:	f7fc fca6 	bl	23fbff0 <__errno>
 23ff6a4:	2316      	movs	r3, #22
 23ff6a6:	6003      	str	r3, [r0, #0]
 23ff6a8:	2000      	movs	r0, #0
 23ff6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff6ae:	460d      	mov	r5, r1
 23ff6b0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff794 <_strtol_l.constprop.0+0x100>
 23ff6b4:	462e      	mov	r6, r5
 23ff6b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff6ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff6be:	f017 0708 	ands.w	r7, r7, #8
 23ff6c2:	d1f7      	bne.n	23ff6b4 <_strtol_l.constprop.0+0x20>
 23ff6c4:	2c2d      	cmp	r4, #45	; 0x2d
 23ff6c6:	d132      	bne.n	23ff72e <_strtol_l.constprop.0+0x9a>
 23ff6c8:	782c      	ldrb	r4, [r5, #0]
 23ff6ca:	2701      	movs	r7, #1
 23ff6cc:	1cb5      	adds	r5, r6, #2
 23ff6ce:	2b00      	cmp	r3, #0
 23ff6d0:	d05b      	beq.n	23ff78a <_strtol_l.constprop.0+0xf6>
 23ff6d2:	2b10      	cmp	r3, #16
 23ff6d4:	d109      	bne.n	23ff6ea <_strtol_l.constprop.0+0x56>
 23ff6d6:	2c30      	cmp	r4, #48	; 0x30
 23ff6d8:	d107      	bne.n	23ff6ea <_strtol_l.constprop.0+0x56>
 23ff6da:	782c      	ldrb	r4, [r5, #0]
 23ff6dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff6e0:	2c58      	cmp	r4, #88	; 0x58
 23ff6e2:	d14d      	bne.n	23ff780 <_strtol_l.constprop.0+0xec>
 23ff6e4:	786c      	ldrb	r4, [r5, #1]
 23ff6e6:	2310      	movs	r3, #16
 23ff6e8:	3502      	adds	r5, #2
 23ff6ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff6ee:	f04f 0c00 	mov.w	ip, #0
 23ff6f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff6f6:	4666      	mov	r6, ip
 23ff6f8:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff6fc:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff700:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff704:	f1be 0f09 	cmp.w	lr, #9
 23ff708:	d816      	bhi.n	23ff738 <_strtol_l.constprop.0+0xa4>
 23ff70a:	4674      	mov	r4, lr
 23ff70c:	42a3      	cmp	r3, r4
 23ff70e:	dd24      	ble.n	23ff75a <_strtol_l.constprop.0+0xc6>
 23ff710:	f1bc 0f00 	cmp.w	ip, #0
 23ff714:	db1e      	blt.n	23ff754 <_strtol_l.constprop.0+0xc0>
 23ff716:	45b1      	cmp	r9, r6
 23ff718:	d31c      	bcc.n	23ff754 <_strtol_l.constprop.0+0xc0>
 23ff71a:	d101      	bne.n	23ff720 <_strtol_l.constprop.0+0x8c>
 23ff71c:	45a2      	cmp	sl, r4
 23ff71e:	db19      	blt.n	23ff754 <_strtol_l.constprop.0+0xc0>
 23ff720:	fb06 4603 	mla	r6, r6, r3, r4
 23ff724:	f04f 0c01 	mov.w	ip, #1
 23ff728:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff72c:	e7e8      	b.n	23ff700 <_strtol_l.constprop.0+0x6c>
 23ff72e:	2c2b      	cmp	r4, #43	; 0x2b
 23ff730:	bf04      	itt	eq
 23ff732:	782c      	ldrbeq	r4, [r5, #0]
 23ff734:	1cb5      	addeq	r5, r6, #2
 23ff736:	e7ca      	b.n	23ff6ce <_strtol_l.constprop.0+0x3a>
 23ff738:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff73c:	f1be 0f19 	cmp.w	lr, #25
 23ff740:	d801      	bhi.n	23ff746 <_strtol_l.constprop.0+0xb2>
 23ff742:	3c37      	subs	r4, #55	; 0x37
 23ff744:	e7e2      	b.n	23ff70c <_strtol_l.constprop.0+0x78>
 23ff746:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff74a:	f1be 0f19 	cmp.w	lr, #25
 23ff74e:	d804      	bhi.n	23ff75a <_strtol_l.constprop.0+0xc6>
 23ff750:	3c57      	subs	r4, #87	; 0x57
 23ff752:	e7db      	b.n	23ff70c <_strtol_l.constprop.0+0x78>
 23ff754:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff758:	e7e6      	b.n	23ff728 <_strtol_l.constprop.0+0x94>
 23ff75a:	f1bc 0f00 	cmp.w	ip, #0
 23ff75e:	da05      	bge.n	23ff76c <_strtol_l.constprop.0+0xd8>
 23ff760:	2322      	movs	r3, #34	; 0x22
 23ff762:	4646      	mov	r6, r8
 23ff764:	6003      	str	r3, [r0, #0]
 23ff766:	b942      	cbnz	r2, 23ff77a <_strtol_l.constprop.0+0xe6>
 23ff768:	4630      	mov	r0, r6
 23ff76a:	e79e      	b.n	23ff6aa <_strtol_l.constprop.0+0x16>
 23ff76c:	b107      	cbz	r7, 23ff770 <_strtol_l.constprop.0+0xdc>
 23ff76e:	4276      	negs	r6, r6
 23ff770:	2a00      	cmp	r2, #0
 23ff772:	d0f9      	beq.n	23ff768 <_strtol_l.constprop.0+0xd4>
 23ff774:	f1bc 0f00 	cmp.w	ip, #0
 23ff778:	d000      	beq.n	23ff77c <_strtol_l.constprop.0+0xe8>
 23ff77a:	1e69      	subs	r1, r5, #1
 23ff77c:	6011      	str	r1, [r2, #0]
 23ff77e:	e7f3      	b.n	23ff768 <_strtol_l.constprop.0+0xd4>
 23ff780:	2430      	movs	r4, #48	; 0x30
 23ff782:	2b00      	cmp	r3, #0
 23ff784:	d1b1      	bne.n	23ff6ea <_strtol_l.constprop.0+0x56>
 23ff786:	2308      	movs	r3, #8
 23ff788:	e7af      	b.n	23ff6ea <_strtol_l.constprop.0+0x56>
 23ff78a:	2c30      	cmp	r4, #48	; 0x30
 23ff78c:	d0a5      	beq.n	23ff6da <_strtol_l.constprop.0+0x46>
 23ff78e:	230a      	movs	r3, #10
 23ff790:	e7ab      	b.n	23ff6ea <_strtol_l.constprop.0+0x56>
 23ff792:	bf00      	nop
 23ff794:	023ffed6 	.word	0x023ffed6

023ff798 <strtol>:
 23ff798:	4613      	mov	r3, r2
 23ff79a:	460a      	mov	r2, r1
 23ff79c:	4601      	mov	r1, r0
 23ff79e:	4802      	ldr	r0, [pc, #8]	; (23ff7a8 <strtol+0x10>)
 23ff7a0:	6800      	ldr	r0, [r0, #0]
 23ff7a2:	f7ff bf77 	b.w	23ff694 <_strtol_l.constprop.0>
 23ff7a6:	bf00      	nop
 23ff7a8:	1007ad88 	.word	0x1007ad88

023ff7ac <__register_exitproc>:
 23ff7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff7b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff870 <__register_exitproc+0xc4>
 23ff7b4:	4606      	mov	r6, r0
 23ff7b6:	461f      	mov	r7, r3
 23ff7b8:	460d      	mov	r5, r1
 23ff7ba:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7be:	4691      	mov	r9, r2
 23ff7c0:	f000 f858 	bl	23ff874 <__retarget_lock_acquire_recursive>
 23ff7c4:	4b26      	ldr	r3, [pc, #152]	; (23ff860 <__register_exitproc+0xb4>)
 23ff7c6:	681c      	ldr	r4, [r3, #0]
 23ff7c8:	b934      	cbnz	r4, 23ff7d8 <__register_exitproc+0x2c>
 23ff7ca:	4c26      	ldr	r4, [pc, #152]	; (23ff864 <__register_exitproc+0xb8>)
 23ff7cc:	601c      	str	r4, [r3, #0]
 23ff7ce:	4b26      	ldr	r3, [pc, #152]	; (23ff868 <__register_exitproc+0xbc>)
 23ff7d0:	b113      	cbz	r3, 23ff7d8 <__register_exitproc+0x2c>
 23ff7d2:	681b      	ldr	r3, [r3, #0]
 23ff7d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff7d8:	6863      	ldr	r3, [r4, #4]
 23ff7da:	2b1f      	cmp	r3, #31
 23ff7dc:	dd07      	ble.n	23ff7ee <__register_exitproc+0x42>
 23ff7de:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7e2:	f000 f849 	bl	23ff878 <__retarget_lock_release_recursive>
 23ff7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff7ee:	b35e      	cbz	r6, 23ff848 <__register_exitproc+0x9c>
 23ff7f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff7f4:	b988      	cbnz	r0, 23ff81a <__register_exitproc+0x6e>
 23ff7f6:	4b1d      	ldr	r3, [pc, #116]	; (23ff86c <__register_exitproc+0xc0>)
 23ff7f8:	b923      	cbnz	r3, 23ff804 <__register_exitproc+0x58>
 23ff7fa:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7fe:	f000 f83a 	bl	23ff876 <__retarget_lock_release>
 23ff802:	e7f0      	b.n	23ff7e6 <__register_exitproc+0x3a>
 23ff804:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff808:	f7fc fbac 	bl	23fbf64 <malloc>
 23ff80c:	2800      	cmp	r0, #0
 23ff80e:	d0f4      	beq.n	23ff7fa <__register_exitproc+0x4e>
 23ff810:	2300      	movs	r3, #0
 23ff812:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff816:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff81a:	6863      	ldr	r3, [r4, #4]
 23ff81c:	2201      	movs	r2, #1
 23ff81e:	2e02      	cmp	r6, #2
 23ff820:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff824:	fa02 f203 	lsl.w	r2, r2, r3
 23ff828:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff82c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff830:	ea43 0302 	orr.w	r3, r3, r2
 23ff834:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff838:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff83c:	bf02      	ittt	eq
 23ff83e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff842:	4313      	orreq	r3, r2
 23ff844:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff848:	6863      	ldr	r3, [r4, #4]
 23ff84a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff84e:	1c5a      	adds	r2, r3, #1
 23ff850:	3302      	adds	r3, #2
 23ff852:	6062      	str	r2, [r4, #4]
 23ff854:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff858:	f000 f80e 	bl	23ff878 <__retarget_lock_release_recursive>
 23ff85c:	2000      	movs	r0, #0
 23ff85e:	e7c4      	b.n	23ff7ea <__register_exitproc+0x3e>
 23ff860:	1007afe0 	.word	0x1007afe0
 23ff864:	1007af54 	.word	0x1007af54
 23ff868:	00000000 	.word	0x00000000
 23ff86c:	023fbf65 	.word	0x023fbf65
 23ff870:	1007adec 	.word	0x1007adec

023ff874 <__retarget_lock_acquire_recursive>:
 23ff874:	4770      	bx	lr

023ff876 <__retarget_lock_release>:
 23ff876:	4770      	bx	lr

023ff878 <__retarget_lock_release_recursive>:
 23ff878:	4770      	bx	lr
	...

023ff87c <link_const_data_start>:
 23ff87c:	00000000 	.word	0x00000000
 23ff880:	34fb0000 	.word	0x34fb0000
 23ff884:	00805f9b 	.word	0x00805f9b
 23ff888:	10008000 	.word	0x10008000
	...

023ff894 <dynalib_user>:
 23ff894:	023fb3e5 023fb40d 023fb411 00000000     ..?...?...?.....
 23ff8a4:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff8b4:	6c617574 00642500 38323837 64353566     tual.%d.7828f55d
 23ff8c4:	3430632d 39342d63 382d3865 2d396536     -c04c-49e8-86e9-
 23ff8d4:	33316638 35373236 37636435 63353700     8f1362755dc7.75c
 23ff8e4:	34643431 62312d34 342d3131 2d343135     14d44-1b11-4514-
 23ff8f4:	31323262 3166642d 38636635 30353038     b221-df15fc88050
 23ff904:	30310066 38646366 382d6137 2d313036     f.10fcd87a-8601-
 23ff914:	65343834 3932382d 31642d64 34613431     484e-829d-d114a4
 23ff924:	62386130 74003661 78720078 00000000     0a8ba6.tx.rx....

023ff934 <_ZTVN5spark10LogHandlerE>:
	...
 23ff944:	023fb42d 023fb455                       -.?.U.?.

023ff94c <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff954:	023fb459 023fb48d 023fd5f9 023fd7a1     Y.?...?...?...?.

023ff964 <_ZTVN5spark12NetworkClassE>:
	...
 23ff96c:	023fc045 023fc04f 023fc059 023fc063     E.?.O.?.Y.?.c.?.
 23ff97c:	023fc06d 023fc079 023fc085 023fc08d     m.?.y.?...?...?.
 23ff98c:	023fc095 023fc0a1 023fc0a9 023fc0b3     ..?...?...?...?.
 23ff99c:	023fc0bd                                ..?.

023ff9a0 <_ZTVN5spark9WiFiClassE>:
	...
 23ff9a8:	023fc207 023fc1fd 023fc1f3 023fc1a9     ..?...?...?...?.
 23ff9b8:	023fc1e7 023fc1db 023fc085 023fc08d     ..?...?...?...?.
 23ff9c8:	023fc1cf 023fc1c7 023fc1bd 023fc1b3     ..?...?...?...?.
 23ff9d8:	023fc0bd                                ..?.

023ff9dc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ff9e4:	75007525 78343025 00000000              %u.u%04x....

023ff9f0 <_ZTV9USBSerial>:
	...
 23ff9f8:	023fc613 023fc67b 023fc651 023fd94d     ..?.{.?.Q.?.M.?.
 23ffa08:	023fc643 023fc615 023fc625 023fc675     C.?...?.%.?.u.?.
 23ffa18:	023fc635 023fc60d                       5.?...?.

023ffa20 <_ZTV9IPAddress>:
	...
 23ffa28:	023fc729 023fc719 023fc71b 252d5925     ).?...?...?.%Y-%
 23ffa38:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffa48:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffa58:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffa68:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffa78:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffa88:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffa98:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffaa8:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
 23ffab8:	65640065 6c696174 00000000              e.detail....

023ffac4 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffacc:	023fc9cd 023fc9f3 023fc9b1 023fc253     ..?...?...?.S.?.

023ffadc <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffae4:	023fcea5 023fcebd 023fd5f9 023fd7a1     ..?...?...?...?.

023ffaf4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffafc:	023fced1 023fcee5 023fd7d9 023fc9b9     ..?...?...?...?.

023ffb0c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffb14:	023fc9cb 023fca01 023fd55d 023fc9bb     ..?...?.].?...?.

023ffb24 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffb2c:	023fc9c9 023fca0f 023fcde9 023fca31     ..?...?...?.1.?.
 23ffb3c:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffb4c:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffb5c:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffb6c:	20676e69 76726573 73656369 ffff002e     ing services....
 23ffb7c:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ffb8c:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ffb9c:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ffbac:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ffbbc:	4f4e5f52 5000454e 20726565 69766564     R_NONE.Peer devi
 23ffbcc:	69206563 696d2073 6e697373 46002167     ce is missing!.F
 23ffbdc:	656c6961 6f742064 70706120 20646e65     ailed to append 
 23ffbec:	72656570 6e654320 6c617274 76656420     peer Central dev
 23ffbfc:	2e656369 6e6f4300 7463656e 44006465     ice..Connected.D
 23ffc0c:	6f637369 63656e6e 00646574 6c707544     isconnected.Dupl
 23ffc1c:	74616369 63206465 61726168 72657463     icated character
 23ffc2c:	69747369 61632063 746f6e6e 20656220     istic cannot be 
 23ffc3c:	65646461 46002e64 656c6961 6f742064     added..Failed to
 23ffc4c:	70706120 20646e65 61636f6c 6863206c      append local ch
 23ffc5c:	63617261 69726574 63697473 0000002e     aracteristic....

023ffc6c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc74:	023fd9e5 023fda49 023fdb1d 023fda73     ..?.I.?...?.s.?.
 23ffc84:	023fd9e9                                ..?.

023ffc88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc90:	023fd9e1 023fda57 023fd9e3 023fda79     ..?.W.?...?.y.?.
 23ffca0:	023fda09                                ..?.

023ffca4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffcac:	023fd9df 023fda65 023fe3a5 023fda7f     ..?.e.?...?...?.
 23ffcbc:	023fda29                                ).?.

023ffcc0 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
 23ffcc0:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

023ffcd0 <_ZN8particle7BleUuid9BASE_UUIDE>:
 23ffcd0:	5f9b34fb 80000080 00001000 00000000     .4._............

023ffce0 <_ZTV11USARTSerial>:
	...
 23ffce8:	023fee7d 023feee9 023feec1 023fd94d     }.?...?...?.M.?.
 23ffcf8:	023fee91 023feead 023fee9f 023feebb     ..?...?...?...?.
 23ffd08:	023fee7f 023fee83                       ..?...?.

023ffd10 <_ZTVN5spark13EthernetClassE>:
	...
 23ffd18:	023fefbf 023fefb5 023fefab 023fefa1     ..?...?...?...?.
 23ffd28:	023fef95 023fef89 023fc085 023fc08d     ..?...?...?...?.
 23ffd38:	023fef7d 023fef75 023fef6b 023fef61     }.?.u.?.k.?.a.?.
 23ffd48:	023fc0bd                                ..?.

023ffd4c <_ZSt7nothrow>:
	...

023ffd4d <_ZTSSt19_Sp_make_shared_tag>:
 23ffd4d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd5d:	5f646572 00676174                        red_tag....

023ffd68 <_ZTISt19_Sp_make_shared_tag>:
 23ffd68:	023ffda8 023ffd4d                       ..?.M.?.

023ffd70 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd70:	023ffe08 023ffd7c 023ffe2c              ..?.|.?.,.?.

023ffd7c <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd7c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd8c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd9c:	00000045                                E...

023ffda0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffda0:	00000000 023ffd70 023ff31d 023ff331     ....p.?...?.1.?.
 23ffdb0:	023ff4c5 023ff4c5 023ff39b 023ff2dd     ..?...?...?...?.
 23ffdc0:	023ff383 023ff345 023ff30f              ..?.E.?...?.

023ffdcc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdcc:	023ffe08 023ffdd8 023ffd70              ..?...?.p.?.

023ffdd8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf8:	456f666e 00000000                       nfoE....

023ffe00 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffe00:	00000000 023ffdcc 023ff3c5 023ff3d9     ......?...?...?.
 23ffe10:	023ff4c5 023ff4c5 023ff39b 023ff2dd     ..?...?...?...?.
 23ffe20:	023ff499 023ff425 023ff3ed              ..?.%.?...?.

023ffe2c <_ZTISt9type_info>:
 23ffe2c:	023ffda8 023ffe34                       ..?.4.?.

023ffe34 <_ZTSSt9type_info>:
 23ffe34:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe44:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe54:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe64:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe74:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe84:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe94:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffea4:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeb4:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffec4:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffed5 <_ctype_>:
 23ffed5:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffee5:	20202020 20202020 20202020 20202020                     
 23ffef5:	10108820 10101010 10101010 10101010      ...............
 23fff05:	04040410 04040404 10040404 10101010     ................
 23fff15:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff25:	01010101 01010101 01010101 10101010     ................
 23fff35:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff45:	02020202 02020202 02020202 10101010     ................
 23fff55:	00000020 00000000 00000000 00000000      ...............
	...

023fffd6 <link_const_data_end>:
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fb701 	.word	0x023fb701
 23fffdc:	023fc195 	.word	0x023fc195
 23fffe0:	023fc211 	.word	0x023fc211
 23fffe4:	023fc991 	.word	0x023fc991
 23fffe8:	023fc99d 	.word	0x023fc99d
 23fffec:	023fd5e9 	.word	0x023fd5e9
 23ffff0:	023fee6d 	.word	0x023fee6d
 23ffff4:	023fef3d 	.word	0x023fef3d
 23ffff8:	023fefc9 	.word	0x023fefc9
