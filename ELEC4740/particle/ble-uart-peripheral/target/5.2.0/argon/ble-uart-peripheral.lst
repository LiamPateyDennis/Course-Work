
/home/elec4740/Documents/particle/ble-uart-peripheral/target/5.2.0/argon/ble-uart-peripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000046b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b86d0  000b86d0  000086d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e5b4  000b86f4  0000e5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c8  2003e628  2003e628  0001e628  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8768  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b876c  000b876c  0001876c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8772  000b8772  00018772  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8796  000b8796  00018796  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00119a6b  00000000  00000000  0001879a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000112e8  00000000  00000000  00132205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c20  00000000  00000000  001434ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032e02  00000000  00000000  0014610d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00037385  00000000  00000000  00178f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00143b7e  00000000  00000000  001b0294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003d5c9  00000000  00000000  002f3e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000afa8  00000000  00000000  003313db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000080dc  00000000  00000000  0033c384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fddb 	bl	b7c0c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fdfd 	bl	b7c5c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e5b4 	.word	0x2003e5b4
   b406c:	000b86f4 	.word	0x000b86f4
   b4070:	2003e628 	.word	0x2003e628
   b4074:	2003e628 	.word	0x2003e628
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 f91d 	bl	b52c0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b86ac 	.word	0x000b86ac
   b40a0:	000b86d0 	.word	0x000b86d0

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b870 	b.w	b4188 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f8cd 	bl	b4248 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 b8bd 	b.w	b5230 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bc3b 	b.w	b4930 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bc39 	b.w	b4930 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bc3f 	b.w	b4940 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fb84 	bl	b47d8 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b4799 	.word	0x000b4799
   b40d8:	000b7f80 	.word	0x000b7f80

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr
	...

000b40f0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40f0:	4b0a      	ldr	r3, [pc, #40]	; (b411c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40f2:	b510      	push	{r4, lr}
   b40f4:	4604      	mov	r4, r0
   b40f6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40f8:	f001 faaa 	bl	b5650 <_ZN5spark10LogManager8instanceEv>
   b40fc:	4621      	mov	r1, r4
   b40fe:	f001 fcf4 	bl	b5aea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4102:	f000 ffb9 	bl	b5078 <_Z16_fetch_usbserialv>
   b4106:	f000 ffab 	bl	b5060 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b410a:	4620      	mov	r0, r4
   b410c:	4b04      	ldr	r3, [pc, #16]	; (b4120 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b410e:	f840 3b04 	str.w	r3, [r0], #4
   b4112:	f001 fb85 	bl	b5820 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4116:	4620      	mov	r0, r4
   b4118:	bd10      	pop	{r4, pc}
   b411a:	bf00      	nop
   b411c:	000b8030 	.word	0x000b8030
   b4120:	000b8018 	.word	0x000b8018

000b4124 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4124:	b510      	push	{r4, lr}
   b4126:	4604      	mov	r4, r0
    }
   b4128:	f7ff ffe2 	bl	b40f0 <_ZN5spark16SerialLogHandlerD1Ev>
   b412c:	4620      	mov	r0, r4
   b412e:	2124      	movs	r1, #36	; 0x24
   b4130:	f7ff ffc5 	bl	b40be <_ZdlPvj>
   b4134:	4620      	mov	r0, r4
   b4136:	bd10      	pop	{r4, pc}

000b4138 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4138:	b40e      	push	{r1, r2, r3}
   b413a:	b500      	push	{lr}
   b413c:	b08c      	sub	sp, #48	; 0x30
   b413e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4140:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4144:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4148:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b414a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b414e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	6801      	ldr	r1, [r0, #0]
   b4152:	aa04      	add	r2, sp, #16
   b4154:	201e      	movs	r0, #30
    attr.flags = 0;
   b4156:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b415a:	f000 fb4d 	bl	b47f8 <log_message_v>
}
   b415e:	b00c      	add	sp, #48	; 0x30
   b4160:	f85d eb04 	ldr.w	lr, [sp], #4
   b4164:	b003      	add	sp, #12
   b4166:	4770      	bx	lr

000b4168 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

uint16_t counting;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4168:	b508      	push	{r3, lr}
    // Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);

    // for (size_t ii = 0; ii < len; ii++) {
    //     Serial.write(data[ii]);
    // }
    memcpy(&counting,&data[0],2);
   b416a:	4b04      	ldr	r3, [pc, #16]	; (b417c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   b416c:	8802      	ldrh	r2, [r0, #0]
    Log.info("%d",counting);
   b416e:	4904      	ldr	r1, [pc, #16]	; (b4180 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   b4170:	4804      	ldr	r0, [pc, #16]	; (b4184 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
    memcpy(&counting,&data[0],2);
   b4172:	801a      	strh	r2, [r3, #0]
    Log.info("%d",counting);
   b4174:	f7ff ffe0 	bl	b4138 <_ZNK5spark6Logger4infoEPKcz>
}
   b4178:	bd08      	pop	{r3, pc}
   b417a:	bf00      	nop
   b417c:	2003e688 	.word	0x2003e688
   b4180:	000b7f95 	.word	0x000b7f95
   b4184:	2003e6ec 	.word	0x2003e6ec

000b4188 <setup>:

void setup() {
   b4188:	b570      	push	{r4, r5, r6, lr}
   b418a:	b090      	sub	sp, #64	; 0x40
    Serial.begin(9600);
   b418c:	f000 ff74 	bl	b5078 <_Z16_fetch_usbserialv>
   b4190:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4194:	f000 ff60 	bl	b5058 <_ZN9USBSerial5beginEl>

	BLE.on();
   b4198:	f002 fc22 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b419c:	f002 fc6a 	bl	b6a74 <_ZNK8particle14BleLocalDevice2onEv>

    BLE.addCharacteristic(txCharacteristic);
   b41a0:	f002 fc1e 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a4:	4a24      	ldr	r2, [pc, #144]	; (b4238 <setup+0xb0>)
   b41a6:	4c25      	ldr	r4, [pc, #148]	; (b423c <setup+0xb4>)
   b41a8:	4601      	mov	r1, r0
   b41aa:	a80b      	add	r0, sp, #44	; 0x2c
   b41ac:	f003 f948 	bl	b7440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b41b0:	a80b      	add	r0, sp, #44	; 0x2c
   b41b2:	f002 fd04 	bl	b6bbe <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b41b6:	f002 fc13 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ba:	4a21      	ldr	r2, [pc, #132]	; (b4240 <setup+0xb8>)
   b41bc:	4601      	mov	r1, r0
   b41be:	a80b      	add	r0, sp, #44	; 0x2c
   b41c0:	f003 f93e 	bl	b7440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b41c4:	a80b      	add	r0, sp, #44	; 0x2c
   b41c6:	f002 fcfa 	bl	b6bbe <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData data;
   b41ca:	a803      	add	r0, sp, #12
   b41cc:	f002 fe1d 	bl	b6e0a <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
   b41d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b41d2:	ad06      	add	r5, sp, #24
   b41d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b41d6:	ad06      	add	r5, sp, #24
   b41d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41da:	6826      	ldr	r6, [r4, #0]
   b41dc:	ac0b      	add	r4, sp, #44	; 0x2c
   b41de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41e0:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b41e2:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41e4:	f002 fa10 	bl	b6608 <_ZNK8particle7BleUuid4typeEv>
   b41e8:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b41ea:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41ec:	b9dc      	cbnz	r4, b4226 <setup+0x9e>
            uint16_t uuid16 = tempUUID.shorted();
   b41ee:	f002 fa27 	bl	b6640 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41f2:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41f4:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41f8:	2302      	movs	r3, #2
   b41fa:	f10d 020a 	add.w	r2, sp, #10
   b41fe:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4200:	a803      	add	r0, sp, #12
   b4202:	f002 fdf7 	bl	b6df4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b4206:	f002 fbeb 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b420a:	a903      	add	r1, sp, #12
   b420c:	2200      	movs	r2, #0
   b420e:	f002 fc82 	bl	b6b16 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    rxCharacteristic.onDataReceived(onDataReceived, NULL);
   b4212:	490c      	ldr	r1, [pc, #48]	; (b4244 <setup+0xbc>)
   b4214:	480a      	ldr	r0, [pc, #40]	; (b4240 <setup+0xb8>)
   b4216:	2200      	movs	r2, #0
   b4218:	f002 ff9c 	bl	b7154 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b421c:	9803      	ldr	r0, [sp, #12]
   b421e:	f000 fb8f 	bl	b4940 <free>

}
   b4222:	b010      	add	sp, #64	; 0x40
   b4224:	bd70      	pop	{r4, r5, r6, pc}
   b4226:	f002 fa0d 	bl	b6644 <_ZNK8particle7BleUuid8rawBytesEv>
   b422a:	2300      	movs	r3, #0
   b422c:	9300      	str	r3, [sp, #0]
   b422e:	4602      	mov	r2, r0
   b4230:	2310      	movs	r3, #16
   b4232:	2107      	movs	r1, #7
   b4234:	e7e4      	b.n	b4200 <setup+0x78>
   b4236:	bf00      	nop
   b4238:	2003e694 	.word	0x2003e694
   b423c:	2003e64c 	.word	0x2003e64c
   b4240:	2003e68c 	.word	0x2003e68c
   b4244:	000b4169 	.word	0x000b4169

000b4248 <loop>:

void loop() {
   b4248:	b530      	push	{r4, r5, lr}
   b424a:	b087      	sub	sp, #28
    if (BLE.connected()) {
   b424c:	f002 fbc8 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4250:	f002 fc20 	bl	b6a94 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4254:	b330      	cbz	r0, b42a4 <loop+0x5c>
    	uint8_t txBuf[UART_TX_BUF_SIZE];
    	size_t txLen = 0;
        counting++;
   b4256:	4a14      	ldr	r2, [pc, #80]	; (b42a8 <loop+0x60>)
   b4258:	8813      	ldrh	r3, [r2, #0]
   b425a:	3301      	adds	r3, #1
   b425c:	b29b      	uxth	r3, r3
   b425e:	8013      	strh	r3, [r2, #0]
        memcpy(&txBuf,&counting,2);
   b4260:	f8ad 3004 	strh.w	r3, [sp, #4]
        txLen+=2;
   b4264:	f10d 0506 	add.w	r5, sp, #6
   b4268:	2402      	movs	r4, #2
    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b426a:	f000 ff05 	bl	b5078 <_Z16_fetch_usbserialv>
   b426e:	6803      	ldr	r3, [r0, #0]
   b4270:	691b      	ldr	r3, [r3, #16]
   b4272:	4798      	blx	r3
   b4274:	b180      	cbz	r0, b4298 <loop+0x50>
   b4276:	2c14      	cmp	r4, #20
   b4278:	d00e      	beq.n	b4298 <loop+0x50>
            txBuf[txLen++] = Serial.read();
   b427a:	f000 fefd 	bl	b5078 <_Z16_fetch_usbserialv>
   b427e:	6803      	ldr	r3, [r0, #0]
   b4280:	695b      	ldr	r3, [r3, #20]
   b4282:	4798      	blx	r3
   b4284:	7028      	strb	r0, [r5, #0]
            Serial.write(txBuf[txLen - 1]);
   b4286:	f000 fef7 	bl	b5078 <_Z16_fetch_usbserialv>
   b428a:	6803      	ldr	r3, [r0, #0]
   b428c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4290:	689b      	ldr	r3, [r3, #8]
            txBuf[txLen++] = Serial.read();
   b4292:	3401      	adds	r4, #1
            Serial.write(txBuf[txLen - 1]);
   b4294:	4798      	blx	r3
    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b4296:	e7e8      	b.n	b426a <loop+0x22>
        }
        if (txLen > 0) {
            // memcpy(&count,)
            txCharacteristic.setValue(txBuf, txLen);
   b4298:	4804      	ldr	r0, [pc, #16]	; (b42ac <loop+0x64>)
   b429a:	2300      	movs	r3, #0
   b429c:	4622      	mov	r2, r4
   b429e:	a901      	add	r1, sp, #4
   b42a0:	f002 fa8e 	bl	b67c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        }
        // Log.info("Connection");

    }
}
   b42a4:	b007      	add	sp, #28
   b42a6:	bd30      	pop	{r4, r5, pc}
   b42a8:	2003e688 	.word	0x2003e688
   b42ac:	2003e694 	.word	0x2003e694

000b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b42b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b42b2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b42b6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b42b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b42ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b42be:	42ae      	cmp	r6, r5
   b42c0:	d004      	beq.n	b42cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b42c2:	4628      	mov	r0, r5
   b42c4:	f003 fa78 	bl	b77b8 <_ZN6StringD1Ev>
   b42c8:	3514      	adds	r5, #20
   b42ca:	e7f8      	b.n	b42be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b42cc:	6820      	ldr	r0, [r4, #0]
   b42ce:	f000 fb37 	bl	b4940 <free>
    AllocatorT::free(data_);
}
   b42d2:	4620      	mov	r0, r4
   b42d4:	bd70      	pop	{r4, r5, r6, pc}

000b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b42d6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b42d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42da:	4604      	mov	r4, r0
   b42dc:	460d      	mov	r5, r1
   b42de:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b42e0:	d916      	bls.n	b4310 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b42e2:	4290      	cmp	r0, r2
   b42e4:	d215      	bcs.n	b4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b42e6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b42ea:	1a75      	subs	r5, r6, r1
   b42ec:	f1a1 0714 	sub.w	r7, r1, #20
   b42f0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b42f2:	42b7      	cmp	r7, r6
   b42f4:	d01c      	beq.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b42f6:	b12c      	cbz	r4, b4304 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b42f8:	4631      	mov	r1, r6
   b42fa:	4620      	mov	r0, r4
   b42fc:	f003 fad8 	bl	b78b0 <_ZN6StringC1EOS_>
   b4300:	7c33      	ldrb	r3, [r6, #16]
   b4302:	7423      	strb	r3, [r4, #16]
   b4304:	4630      	mov	r0, r6
   b4306:	f003 fa57 	bl	b77b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b430a:	3e14      	subs	r6, #20
   b430c:	3c14      	subs	r4, #20
   b430e:	e7f0      	b.n	b42f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4310:	d00e      	beq.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4312:	42b5      	cmp	r5, r6
   b4314:	d00c      	beq.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4316:	b12c      	cbz	r4, b4324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4318:	4629      	mov	r1, r5
   b431a:	4620      	mov	r0, r4
   b431c:	f003 fac8 	bl	b78b0 <_ZN6StringC1EOS_>
   b4320:	7c2b      	ldrb	r3, [r5, #16]
   b4322:	7423      	strb	r3, [r4, #16]
   b4324:	4628      	mov	r0, r5
   b4326:	f003 fa47 	bl	b77b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b432a:	3514      	adds	r5, #20
   b432c:	3414      	adds	r4, #20
   b432e:	e7f0      	b.n	b4312 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4336:	2300      	movs	r3, #0
   b4338:	e9c0 3300 	strd	r3, r3, [r0]
   b433c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b433e:	684f      	ldr	r7, [r1, #4]
   b4340:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4342:	4604      	mov	r4, r0
   b4344:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4346:	dd23      	ble.n	b4390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4348:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b434c:	fb08 f007 	mul.w	r0, r8, r7
   b4350:	f000 faee 	bl	b4930 <malloc>
            if (!d) {
   b4354:	4605      	mov	r5, r0
   b4356:	b1d8      	cbz	r0, b4390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4358:	e9d4 1200 	ldrd	r1, r2, [r4]
   b435c:	fb08 1202 	mla	r2, r8, r2, r1
   b4360:	f7ff ffb9 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4364:	6820      	ldr	r0, [r4, #0]
   b4366:	f000 faeb 	bl	b4940 <free>
        data_ = d;
   b436a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b436c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b436e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4372:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4376:	45b8      	cmp	r8, r7
   b4378:	d008      	beq.n	b438c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b437a:	4639      	mov	r1, r7
   b437c:	4628      	mov	r0, r5
   b437e:	f003 fab1 	bl	b78e4 <_ZN6StringC1ERKS_>
   b4382:	7c3b      	ldrb	r3, [r7, #16]
   b4384:	742b      	strb	r3, [r5, #16]
   b4386:	3714      	adds	r7, #20
   b4388:	3514      	adds	r5, #20
   b438a:	e7f4      	b.n	b4376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b438c:	6873      	ldr	r3, [r6, #4]
   b438e:	6063      	str	r3, [r4, #4]
}
   b4390:	4620      	mov	r0, r4
   b4392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4398 <_GLOBAL__sub_I_LogHandler>:
   b4398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b439c:	b098      	sub	sp, #96	; 0x60
        capacity_(0) {
   b439e:	2500      	movs	r5, #0
   b43a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
   b43a4:	9506      	str	r5, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b43a6:	f000 fe67 	bl	b5078 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b43aa:	4c53      	ldr	r4, [pc, #332]	; (b44f8 <_GLOBAL__sub_I_LogHandler+0x160>)
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b43ac:	f8df 8180 	ldr.w	r8, [pc, #384]	; b4530 <_GLOBAL__sub_I_LogHandler+0x198>
   b43b0:	4606      	mov	r6, r0
   b43b2:	a904      	add	r1, sp, #16
   b43b4:	a809      	add	r0, sp, #36	; 0x24
   b43b6:	f7ff ffbc 	bl	b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43ba:	4627      	mov	r7, r4
        stream_(&stream) {
   b43bc:	a909      	add	r1, sp, #36	; 0x24
   b43be:	a80e      	add	r0, sp, #56	; 0x38
   b43c0:	f7ff ffb7 	bl	b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b43c4:	4b4d      	ldr	r3, [pc, #308]	; (b44fc <_GLOBAL__sub_I_LogHandler+0x164>)
   b43c6:	f847 3b04 	str.w	r3, [r7], #4
   b43ca:	a90e      	add	r1, sp, #56	; 0x38
   b43cc:	a813      	add	r0, sp, #76	; 0x4c
   b43ce:	f7ff ffb0 	bl	b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43d2:	aa13      	add	r2, sp, #76	; 0x4c
   b43d4:	211e      	movs	r1, #30
   b43d6:	4638      	mov	r0, r7
   b43d8:	f001 fc6a 	bl	b5cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43dc:	a813      	add	r0, sp, #76	; 0x4c
   b43de:	f7ff ff67 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43e2:	a80e      	add	r0, sp, #56	; 0x38
   b43e4:	f7ff ff64 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43e8:	4b45      	ldr	r3, [pc, #276]	; (b4500 <_GLOBAL__sub_I_LogHandler+0x168>)
   b43ea:	6023      	str	r3, [r4, #0]
   b43ec:	6226      	str	r6, [r4, #32]
   b43ee:	a809      	add	r0, sp, #36	; 0x24
   b43f0:	f7ff ff5e 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43f4:	4b43      	ldr	r3, [pc, #268]	; (b4504 <_GLOBAL__sub_I_LogHandler+0x16c>)
   b43f6:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b43f8:	f000 fe3e 	bl	b5078 <_Z16_fetch_usbserialv>
   b43fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4400:	f000 fe2a 	bl	b5058 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4404:	f001 f924 	bl	b5650 <_ZN5spark10LogManager8instanceEv>
   b4408:	4621      	mov	r1, r4
const BleUuid serviceUuid("7828f55d-c04c-49e8-86e9-8f1362755dc7");
   b440a:	4c3f      	ldr	r4, [pc, #252]	; (b4508 <_GLOBAL__sub_I_LogHandler+0x170>)
const BleUuid rxUuid("75c14d44-1b11-4514-b221-df15fc88050f");
   b440c:	4e3f      	ldr	r6, [pc, #252]	; (b450c <_GLOBAL__sub_I_LogHandler+0x174>)
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
   b440e:	4f40      	ldr	r7, [pc, #256]	; (b4510 <_GLOBAL__sub_I_LogHandler+0x178>)
   b4410:	f001 fb24 	bl	b5a5c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
   b4414:	a804      	add	r0, sp, #16
   b4416:	f7ff ff4b 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
const BleUuid serviceUuid("7828f55d-c04c-49e8-86e9-8f1362755dc7");
   b441a:	493e      	ldr	r1, [pc, #248]	; (b4514 <_GLOBAL__sub_I_LogHandler+0x17c>)
   b441c:	4620      	mov	r0, r4
   b441e:	f002 f991 	bl	b6744 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("75c14d44-1b11-4514-b221-df15fc88050f");
   b4422:	493d      	ldr	r1, [pc, #244]	; (b4518 <_GLOBAL__sub_I_LogHandler+0x180>)
   b4424:	4630      	mov	r0, r6
   b4426:	f002 f98d 	bl	b6744 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
   b442a:	493c      	ldr	r1, [pc, #240]	; (b451c <_GLOBAL__sub_I_LogHandler+0x184>)
   b442c:	4638      	mov	r0, r7
   b442e:	f002 f989 	bl	b6744 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4432:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4434:	f10d 0c10 	add.w	ip, sp, #16
   b4438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b443c:	f8d7 e000 	ldr.w	lr, [r7]
   b4440:	f8cc e000 	str.w	lr, [ip]
   b4444:	4627      	mov	r7, r4
   b4446:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4448:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b444c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4450:	f10d 0a10 	add.w	sl, sp, #16
   b4454:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b4458:	f8d7 9000 	ldr.w	r9, [r7]
   b445c:	f8cc 9000 	str.w	r9, [ip]
   b4460:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b4464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4468:	f8cc e000 	str.w	lr, [ip]
        BleUuid sUuid(svcUuid);
   b446c:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4470:	e9c8 5500 	strd	r5, r5, [r8]
   b4474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b4478:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   b447c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4480:	ab13      	add	r3, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b4482:	f8cc 9000 	str.w	r9, [ip]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4486:	4640      	mov	r0, r8
   b4488:	9300      	str	r3, [sp, #0]
   b448a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b448e:	ab0e      	add	r3, sp, #56	; 0x38
   b4490:	4923      	ldr	r1, [pc, #140]	; (b4520 <_GLOBAL__sub_I_LogHandler+0x188>)
   b4492:	f04f 0210 	mov.w	r2, #16
   b4496:	f002 fea9 	bl	b71ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b449a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b449c:	f10d 0c10 	add.w	ip, sp, #16
   b44a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b44a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44a6:	f8d6 e000 	ldr.w	lr, [r6]
   b44aa:	f8cc e000 	str.w	lr, [ip]
   b44ae:	ae09      	add	r6, sp, #36	; 0x24
   b44b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        BleUuid cUuid(charUuid);
   b44b2:	ac04      	add	r4, sp, #16
   b44b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44b6:	f8d7 c000 	ldr.w	ip, [r7]
   b44ba:	f8c6 c000 	str.w	ip, [r6]
   b44be:	ae0e      	add	r6, sp, #56	; 0x38
   b44c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b44c2:	4f18      	ldr	r7, [pc, #96]	; (b4524 <_GLOBAL__sub_I_LogHandler+0x18c>)
   b44c4:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b44c8:	ac09      	add	r4, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b44ca:	e9c7 5500 	strd	r5, r5, [r7]
   b44ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44d0:	ae13      	add	r6, sp, #76	; 0x4c
   b44d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b44d4:	4b14      	ldr	r3, [pc, #80]	; (b4528 <_GLOBAL__sub_I_LogHandler+0x190>)
        BleUuid sUuid(svcUuid);
   b44d6:	f8c6 c000 	str.w	ip, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b44da:	9301      	str	r3, [sp, #4]
   b44dc:	ab13      	add	r3, sp, #76	; 0x4c
   b44de:	9300      	str	r3, [sp, #0]
   b44e0:	4912      	ldr	r1, [pc, #72]	; (b452c <_GLOBAL__sub_I_LogHandler+0x194>)
   b44e2:	9502      	str	r5, [sp, #8]
   b44e4:	ab0e      	add	r3, sp, #56	; 0x38
   b44e6:	f04f 0204 	mov.w	r2, #4
   b44ea:	4638      	mov	r0, r7
   b44ec:	f002 fe7e 	bl	b71ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
}
   b44f0:	b018      	add	sp, #96	; 0x60
   b44f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b44f6:	bf00      	nop
   b44f8:	2003e628 	.word	0x2003e628
   b44fc:	000b8018 	.word	0x000b8018
   b4500:	000b81c0 	.word	0x000b81c0
   b4504:	000b8030 	.word	0x000b8030
   b4508:	2003e64c 	.word	0x2003e64c
   b450c:	2003e660 	.word	0x2003e660
   b4510:	2003e674 	.word	0x2003e674
   b4514:	000b7f98 	.word	0x000b7f98
   b4518:	000b7fbd 	.word	0x000b7fbd
   b451c:	000b7fe2 	.word	0x000b7fe2
   b4520:	000b8007 	.word	0x000b8007
   b4524:	2003e68c 	.word	0x2003e68c
   b4528:	000b4169 	.word	0x000b4169
   b452c:	000b800a 	.word	0x000b800a
   b4530:	2003e694 	.word	0x2003e694

000b4534 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <HAL_USB_USART_Init+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	681b      	ldr	r3, [r3, #0]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003024c 	.word	0x0003024c

000b4544 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <HAL_USB_USART_Begin+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	685b      	ldr	r3, [r3, #4]
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	0003024c 	.word	0x0003024c

000b4554 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <HAL_USB_USART_End+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	689b      	ldr	r3, [r3, #8]
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	0003024c 	.word	0x0003024c

000b4564 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <HAL_USB_USART_Available_Data+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	691b      	ldr	r3, [r3, #16]
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003024c 	.word	0x0003024c

000b4574 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	695b      	ldr	r3, [r3, #20]
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003024c 	.word	0x0003024c

000b4584 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <HAL_USB_USART_Receive_Data+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	699b      	ldr	r3, [r3, #24]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003024c 	.word	0x0003024c

000b4594 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <HAL_USB_USART_Send_Data+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	69db      	ldr	r3, [r3, #28]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003024c 	.word	0x0003024c

000b45a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <HAL_USB_USART_Flush_Data+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	6a1b      	ldr	r3, [r3, #32]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003024c 	.word	0x0003024c

000b45b4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <hal_usart_end+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	689b      	ldr	r3, [r3, #8]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	0003023c 	.word	0x0003023c

000b45c4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <hal_usart_write+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	68db      	ldr	r3, [r3, #12]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003023c 	.word	0x0003023c

000b45d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <hal_usart_available+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	691b      	ldr	r3, [r3, #16]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003023c 	.word	0x0003023c

000b45e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <hal_usart_read+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	695b      	ldr	r3, [r3, #20]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003023c 	.word	0x0003023c

000b45f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <hal_usart_peek+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	699b      	ldr	r3, [r3, #24]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003023c 	.word	0x0003023c

000b4604 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <hal_usart_flush+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	69db      	ldr	r3, [r3, #28]
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	0003023c 	.word	0x0003023c

000b4614 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <hal_usart_available_data_for_write+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	0003023c 	.word	0x0003023c

000b4624 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <hal_usart_begin_config+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	0003023c 	.word	0x0003023c

000b4634 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <hal_usart_init_ex+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	0003023c 	.word	0x0003023c

000b4644 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <inet_inet_ntop+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030264 	.word	0x00030264

000b4654 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <os_mutex_recursive_create+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030248 	.word	0x00030248

000b4664 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b02      	ldr	r3, [pc, #8]	; (b4670 <os_mutex_recursive_destroy+0xc>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b466c:	9301      	str	r3, [sp, #4]
   b466e:	bd08      	pop	{r3, pc}
   b4670:	00030248 	.word	0x00030248

000b4674 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4674:	b508      	push	{r3, lr}
   b4676:	4b02      	ldr	r3, [pc, #8]	; (b4680 <os_mutex_recursive_lock+0xc>)
   b4678:	681b      	ldr	r3, [r3, #0]
   b467a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b467c:	9301      	str	r3, [sp, #4]
   b467e:	bd08      	pop	{r3, pc}
   b4680:	00030248 	.word	0x00030248

000b4684 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4684:	b508      	push	{r3, lr}
   b4686:	4b02      	ldr	r3, [pc, #8]	; (b4690 <os_mutex_recursive_unlock+0xc>)
   b4688:	681b      	ldr	r3, [r3, #0]
   b468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b468c:	9301      	str	r3, [sp, #4]
   b468e:	bd08      	pop	{r3, pc}
   b4690:	00030248 	.word	0x00030248

000b4694 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4694:	b508      	push	{r3, lr}
   b4696:	4b02      	ldr	r3, [pc, #8]	; (b46a0 <hal_ble_stack_init+0xc>)
   b4698:	681b      	ldr	r3, [r3, #0]
   b469a:	689b      	ldr	r3, [r3, #8]
   b469c:	9301      	str	r3, [sp, #4]
   b469e:	bd08      	pop	{r3, pc}
   b46a0:	00030278 	.word	0x00030278

000b46a4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b46a4:	b508      	push	{r3, lr}
   b46a6:	4b02      	ldr	r3, [pc, #8]	; (b46b0 <hal_ble_gap_set_advertising_data+0xc>)
   b46a8:	681b      	ldr	r3, [r3, #0]
   b46aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b46ac:	9301      	str	r3, [sp, #4]
   b46ae:	bd08      	pop	{r3, pc}
   b46b0:	00030278 	.word	0x00030278

000b46b4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b46b4:	b508      	push	{r3, lr}
   b46b6:	4b02      	ldr	r3, [pc, #8]	; (b46c0 <hal_ble_gap_set_scan_response_data+0xc>)
   b46b8:	681b      	ldr	r3, [r3, #0]
   b46ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b46bc:	9301      	str	r3, [sp, #4]
   b46be:	bd08      	pop	{r3, pc}
   b46c0:	00030278 	.word	0x00030278

000b46c4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b46c4:	b508      	push	{r3, lr}
   b46c6:	4b02      	ldr	r3, [pc, #8]	; (b46d0 <hal_ble_gap_start_advertising+0xc>)
   b46c8:	681b      	ldr	r3, [r3, #0]
   b46ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b46cc:	9301      	str	r3, [sp, #4]
   b46ce:	bd08      	pop	{r3, pc}
   b46d0:	00030278 	.word	0x00030278

000b46d4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b46d4:	b508      	push	{r3, lr}
   b46d6:	4b03      	ldr	r3, [pc, #12]	; (b46e4 <hal_ble_gap_disconnect+0x10>)
   b46d8:	681b      	ldr	r3, [r3, #0]
   b46da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b46de:	9301      	str	r3, [sp, #4]
   b46e0:	bd08      	pop	{r3, pc}
   b46e2:	0000      	.short	0x0000
   b46e4:	00030278 	.word	0x00030278

000b46e8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b03      	ldr	r3, [pc, #12]	; (b46f8 <hal_ble_gatt_server_add_service+0x10>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b46f2:	9301      	str	r3, [sp, #4]
   b46f4:	bd08      	pop	{r3, pc}
   b46f6:	0000      	.short	0x0000
   b46f8:	00030278 	.word	0x00030278

000b46fc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b03      	ldr	r3, [pc, #12]	; (b470c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4706:	9301      	str	r3, [sp, #4]
   b4708:	bd08      	pop	{r3, pc}
   b470a:	0000      	.short	0x0000
   b470c:	00030278 	.word	0x00030278

000b4710 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b03      	ldr	r3, [pc, #12]	; (b4720 <hal_ble_gatt_client_write_with_response+0x10>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b471a:	9301      	str	r3, [sp, #4]
   b471c:	bd08      	pop	{r3, pc}
   b471e:	0000      	.short	0x0000
   b4720:	00030278 	.word	0x00030278

000b4724 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4724:	b508      	push	{r3, lr}
   b4726:	4b03      	ldr	r3, [pc, #12]	; (b4734 <hal_ble_gatt_client_write_without_response+0x10>)
   b4728:	681b      	ldr	r3, [r3, #0]
   b472a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b472e:	9301      	str	r3, [sp, #4]
   b4730:	bd08      	pop	{r3, pc}
   b4732:	0000      	.short	0x0000
   b4734:	00030278 	.word	0x00030278

000b4738 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b03      	ldr	r3, [pc, #12]	; (b4748 <hal_ble_gatt_server_add_characteristic+0x10>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4742:	9301      	str	r3, [sp, #4]
   b4744:	bd08      	pop	{r3, pc}
   b4746:	0000      	.short	0x0000
   b4748:	00030278 	.word	0x00030278

000b474c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b03      	ldr	r3, [pc, #12]	; (b475c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4756:	9301      	str	r3, [sp, #4]
   b4758:	bd08      	pop	{r3, pc}
   b475a:	0000      	.short	0x0000
   b475c:	00030278 	.word	0x00030278

000b4760 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b03      	ldr	r3, [pc, #12]	; (b4770 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b476a:	9301      	str	r3, [sp, #4]
   b476c:	bd08      	pop	{r3, pc}
   b476e:	0000      	.short	0x0000
   b4770:	00030278 	.word	0x00030278

000b4774 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4774:	b508      	push	{r3, lr}
   b4776:	4b03      	ldr	r3, [pc, #12]	; (b4784 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4778:	681b      	ldr	r3, [r3, #0]
   b477a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b477e:	9301      	str	r3, [sp, #4]
   b4780:	bd08      	pop	{r3, pc}
   b4782:	0000      	.short	0x0000
   b4784:	00030278 	.word	0x00030278

000b4788 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <HAL_RNG_GetRandomNumber+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	685b      	ldr	r3, [r3, #4]
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030218 	.word	0x00030218

000b4798 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <HAL_Delay_Microseconds+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	68db      	ldr	r3, [r3, #12]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	00030218 	.word	0x00030218

000b47a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	695b      	ldr	r3, [r3, #20]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	00030218 	.word	0x00030218

000b47b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <netdb_freeaddrinfo+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	689b      	ldr	r3, [r3, #8]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	00030268 	.word	0x00030268

000b47c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <netdb_getaddrinfo+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	68db      	ldr	r3, [r3, #12]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	00030268 	.word	0x00030268

000b47d8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <panic_+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	00030260 	.word	0x00030260

000b47e8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <log_message+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	00030260 	.word	0x00030260

000b47f8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <log_message_v+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	00030260 	.word	0x00030260

000b4808 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <log_level_name+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030260 	.word	0x00030260

000b4818 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <log_set_callbacks+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030260 	.word	0x00030260

000b4828 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <spark_set_random_seed_from_cloud_handler+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030244 	.word	0x00030244

000b4838 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <network_connect+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	685b      	ldr	r3, [r3, #4]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030240 	.word	0x00030240

000b4848 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <network_connecting+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	689b      	ldr	r3, [r3, #8]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030240 	.word	0x00030240

000b4858 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <network_disconnect+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	68db      	ldr	r3, [r3, #12]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030240 	.word	0x00030240

000b4868 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <network_ready+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	691b      	ldr	r3, [r3, #16]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030240 	.word	0x00030240

000b4878 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <network_on+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	695b      	ldr	r3, [r3, #20]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030240 	.word	0x00030240

000b4888 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <network_off+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	699b      	ldr	r3, [r3, #24]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030240 	.word	0x00030240

000b4898 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <network_listen+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	69db      	ldr	r3, [r3, #28]
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030240 	.word	0x00030240

000b48a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <network_listening+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6a1b      	ldr	r3, [r3, #32]
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030240 	.word	0x00030240

000b48b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <network_set_listen_timeout+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030240 	.word	0x00030240

000b48c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <network_get_listen_timeout+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030240 	.word	0x00030240

000b48d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <network_is_on+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	00030240 	.word	0x00030240

000b48e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <network_is_off+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	00030240 	.word	0x00030240

000b48f8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <set_system_mode+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	685b      	ldr	r3, [r3, #4]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030220 	.word	0x00030220

000b4908 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b03      	ldr	r3, [pc, #12]	; (b4918 <system_ctrl_set_app_request_handler+0x10>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4912:	9301      	str	r3, [sp, #4]
   b4914:	bd08      	pop	{r3, pc}
   b4916:	0000      	.short	0x0000
   b4918:	00030220 	.word	0x00030220

000b491c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b03      	ldr	r3, [pc, #12]	; (b492c <system_ctrl_set_result+0x10>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4926:	9301      	str	r3, [sp, #4]
   b4928:	bd08      	pop	{r3, pc}
   b492a:	0000      	.short	0x0000
   b492c:	00030220 	.word	0x00030220

000b4930 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <malloc+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	681b      	ldr	r3, [r3, #0]
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	0003021c 	.word	0x0003021c

000b4940 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <free+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	685b      	ldr	r3, [r3, #4]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	0003021c 	.word	0x0003021c

000b4950 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <realloc+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	689b      	ldr	r3, [r3, #8]
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	0003021c 	.word	0x0003021c

000b4960 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <vsnprintf+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	0003021c 	.word	0x0003021c

000b4970 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <abort+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003021c 	.word	0x0003021c

000b4980 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <__errno+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	0003021c 	.word	0x0003021c

000b4990 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <__assert_func+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	0003021c 	.word	0x0003021c

000b49a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <newlib_impure_ptr_callback+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	0003021c 	.word	0x0003021c

000b49b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b49b0:	2300      	movs	r3, #0
   b49b2:	6840      	ldr	r0, [r0, #4]
   b49b4:	461a      	mov	r2, r3
   b49b6:	f7ff bf3f 	b.w	b4838 <network_connect>

000b49ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b49ba:	6840      	ldr	r0, [r0, #4]
   b49bc:	2200      	movs	r2, #0
   b49be:	2102      	movs	r1, #2
   b49c0:	f7ff bf4a 	b.w	b4858 <network_disconnect>

000b49c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b49c4:	2200      	movs	r2, #0
   b49c6:	6840      	ldr	r0, [r0, #4]
   b49c8:	4611      	mov	r1, r2
   b49ca:	f7ff bf3d 	b.w	b4848 <network_connecting>

000b49ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b49ce:	2200      	movs	r2, #0
   b49d0:	6840      	ldr	r0, [r0, #4]
   b49d2:	4611      	mov	r1, r2
   b49d4:	f7ff bf48 	b.w	b4868 <network_ready>

000b49d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b49d8:	2300      	movs	r3, #0
   b49da:	6840      	ldr	r0, [r0, #4]
   b49dc:	461a      	mov	r2, r3
   b49de:	4619      	mov	r1, r3
   b49e0:	f7ff bf4a 	b.w	b4878 <network_on>

000b49e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b49e4:	2300      	movs	r3, #0
   b49e6:	6840      	ldr	r0, [r0, #4]
   b49e8:	461a      	mov	r2, r3
   b49ea:	4619      	mov	r1, r3
   b49ec:	f7ff bf4c 	b.w	b4888 <network_off>

000b49f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b49f0:	6840      	ldr	r0, [r0, #4]
   b49f2:	2100      	movs	r1, #0
   b49f4:	f7ff bf70 	b.w	b48d8 <network_is_on>

000b49f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b49f8:	6840      	ldr	r0, [r0, #4]
   b49fa:	2100      	movs	r1, #0
   b49fc:	f7ff bf74 	b.w	b48e8 <network_is_off>

000b4a00 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4a00:	6840      	ldr	r0, [r0, #4]
   b4a02:	2200      	movs	r2, #0
   b4a04:	f081 0101 	eor.w	r1, r1, #1
   b4a08:	f7ff bf46 	b.w	b4898 <network_listen>

000b4a0c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4a0c:	6840      	ldr	r0, [r0, #4]
   b4a0e:	2200      	movs	r2, #0
   b4a10:	f7ff bf52 	b.w	b48b8 <network_set_listen_timeout>

000b4a14 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4a14:	2200      	movs	r2, #0
   b4a16:	6840      	ldr	r0, [r0, #4]
   b4a18:	4611      	mov	r1, r2
   b4a1a:	f7ff bf55 	b.w	b48c8 <network_get_listen_timeout>

000b4a1e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4a1e:	2200      	movs	r2, #0
   b4a20:	6840      	ldr	r0, [r0, #4]
   b4a22:	4611      	mov	r1, r2
   b4a24:	f7ff bf40 	b.w	b48a8 <network_listening>

000b4a28 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a2c:	b095      	sub	sp, #84	; 0x54
   b4a2e:	4614      	mov	r4, r2
   b4a30:	460d      	mov	r5, r1
   b4a32:	4607      	mov	r7, r0
    IPAddress addr;
   b4a34:	f000 fb80 	bl	b5138 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4a38:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4a3a:	221c      	movs	r2, #28
   b4a3c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4a3e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4a40:	f003 f90c 	bl	b7c5c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4a44:	2340      	movs	r3, #64	; 0x40
   b4a46:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4a48:	4620      	mov	r0, r4
   b4a4a:	466b      	mov	r3, sp
   b4a4c:	aa0c      	add	r2, sp, #48	; 0x30
   b4a4e:	2100      	movs	r1, #0
   b4a50:	f7ff feba 	bl	b47c8 <netdb_getaddrinfo>
    if (!r) {
   b4a54:	4604      	mov	r4, r0
   b4a56:	2800      	cmp	r0, #0
   b4a58:	d14b      	bne.n	b4af2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a5a:	4602      	mov	r2, r0
   b4a5c:	2101      	movs	r1, #1
   b4a5e:	6868      	ldr	r0, [r5, #4]
   b4a60:	f7ff ff02 	bl	b4868 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a64:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4a66:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a68:	4622      	mov	r2, r4
   b4a6a:	6868      	ldr	r0, [r5, #4]
   b4a6c:	f7ff fefc 	bl	b4868 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a70:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4a72:	4681      	mov	r9, r0
        bool ok = false;
   b4a74:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a76:	2e00      	cmp	r6, #0
   b4a78:	d03b      	beq.n	b4af2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4a7a:	2900      	cmp	r1, #0
   b4a7c:	d139      	bne.n	b4af2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4a7e:	6873      	ldr	r3, [r6, #4]
   b4a80:	2b02      	cmp	r3, #2
   b4a82:	d003      	beq.n	b4a8c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4a84:	2b0a      	cmp	r3, #10
   b4a86:	d011      	beq.n	b4aac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4a88:	69f6      	ldr	r6, [r6, #28]
   b4a8a:	e7f4      	b.n	b4a76 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4a8c:	f1b8 0f00 	cmp.w	r8, #0
   b4a90:	d0fa      	beq.n	b4a88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4a92:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4a94:	a806      	add	r0, sp, #24
   b4a96:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4a98:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4a9a:	f000 fb7b 	bl	b5194 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4aa0:	1d3c      	adds	r4, r7, #4
   b4aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4aa4:	682b      	ldr	r3, [r5, #0]
   b4aa6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4aa8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4aaa:	e7ed      	b.n	b4a88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4aac:	f1b9 0f00 	cmp.w	r9, #0
   b4ab0:	d0ea      	beq.n	b4a88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4ab2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4ab4:	2210      	movs	r2, #16
   b4ab6:	a801      	add	r0, sp, #4
   b4ab8:	f003 f8d0 	bl	b7c5c <memset>
                    a.v = 6;
   b4abc:	2306      	movs	r3, #6
   b4abe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4ac2:	ad01      	add	r5, sp, #4
   b4ac4:	f104 0308 	add.w	r3, r4, #8
   b4ac8:	3418      	adds	r4, #24
   b4aca:	6818      	ldr	r0, [r3, #0]
   b4acc:	6859      	ldr	r1, [r3, #4]
   b4ace:	462a      	mov	r2, r5
   b4ad0:	c203      	stmia	r2!, {r0, r1}
   b4ad2:	3308      	adds	r3, #8
   b4ad4:	42a3      	cmp	r3, r4
   b4ad6:	4615      	mov	r5, r2
   b4ad8:	d1f7      	bne.n	b4aca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4ada:	a901      	add	r1, sp, #4
   b4adc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4ade:	ad07      	add	r5, sp, #28
   b4ae0:	f000 fb38 	bl	b5154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ae6:	1d3c      	adds	r4, r7, #4
   b4ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4aea:	682b      	ldr	r3, [r5, #0]
   b4aec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4aee:	4649      	mov	r1, r9
   b4af0:	e7ca      	b.n	b4a88 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4af2:	9800      	ldr	r0, [sp, #0]
   b4af4:	f7ff fe60 	bl	b47b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4af8:	4638      	mov	r0, r7
   b4afa:	b015      	add	sp, #84	; 0x54
   b4afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4b00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b00:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4b02:	4a03      	ldr	r2, [pc, #12]	; (b4b10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4b04:	601a      	str	r2, [r3, #0]
   b4b06:	2200      	movs	r2, #0
   b4b08:	605a      	str	r2, [r3, #4]

} // spark
   b4b0a:	4770      	bx	lr
   b4b0c:	2003e69c 	.word	0x2003e69c
   b4b10:	000b8048 	.word	0x000b8048

000b4b14 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4b14:	2200      	movs	r2, #0
   b4b16:	6840      	ldr	r0, [r0, #4]
   b4b18:	4611      	mov	r1, r2
   b4b1a:	f7ff bea5 	b.w	b4868 <network_ready>

000b4b1e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b1e:	2200      	movs	r2, #0
   b4b20:	6840      	ldr	r0, [r0, #4]
   b4b22:	4611      	mov	r1, r2
   b4b24:	f7ff bec0 	b.w	b48a8 <network_listening>

000b4b28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b28:	2200      	movs	r2, #0
   b4b2a:	6840      	ldr	r0, [r0, #4]
   b4b2c:	4611      	mov	r1, r2
   b4b2e:	f7ff becb 	b.w	b48c8 <network_get_listen_timeout>

000b4b32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b32:	6840      	ldr	r0, [r0, #4]
   b4b34:	2200      	movs	r2, #0
   b4b36:	f7ff bebf 	b.w	b48b8 <network_set_listen_timeout>

000b4b3a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b3a:	6840      	ldr	r0, [r0, #4]
   b4b3c:	2200      	movs	r2, #0
   b4b3e:	f081 0101 	eor.w	r1, r1, #1
   b4b42:	f7ff bea9 	b.w	b4898 <network_listen>

000b4b46 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b46:	2300      	movs	r3, #0
   b4b48:	6840      	ldr	r0, [r0, #4]
   b4b4a:	461a      	mov	r2, r3
   b4b4c:	4619      	mov	r1, r3
   b4b4e:	f7ff be9b 	b.w	b4888 <network_off>

000b4b52 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b52:	2300      	movs	r3, #0
   b4b54:	6840      	ldr	r0, [r0, #4]
   b4b56:	461a      	mov	r2, r3
   b4b58:	4619      	mov	r1, r3
   b4b5a:	f7ff be8d 	b.w	b4878 <network_on>

000b4b5e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b5e:	2200      	movs	r2, #0
   b4b60:	6840      	ldr	r0, [r0, #4]
   b4b62:	4611      	mov	r1, r2
   b4b64:	f7ff be70 	b.w	b4848 <network_connecting>

000b4b68 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b68:	6840      	ldr	r0, [r0, #4]
   b4b6a:	2200      	movs	r2, #0
   b4b6c:	2102      	movs	r1, #2
   b4b6e:	f7ff be73 	b.w	b4858 <network_disconnect>

000b4b72 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b72:	2300      	movs	r3, #0
   b4b74:	6840      	ldr	r0, [r0, #4]
   b4b76:	461a      	mov	r2, r3
   b4b78:	f7ff be5e 	b.w	b4838 <network_connect>

000b4b7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4b7c:	4b02      	ldr	r3, [pc, #8]	; (b4b88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4b7e:	2204      	movs	r2, #4
   b4b80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4b82:	4a02      	ldr	r2, [pc, #8]	; (b4b8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4b84:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4b86:	4770      	bx	lr
   b4b88:	2003e6a4 	.word	0x2003e6a4
   b4b8c:	000b8084 	.word	0x000b8084

000b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4b90:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4b92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4b94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4b96:	b17c      	cbz	r4, b4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4b98:	6863      	ldr	r3, [r4, #4]
   b4b9a:	3b01      	subs	r3, #1
   b4b9c:	6063      	str	r3, [r4, #4]
   b4b9e:	b95b      	cbnz	r3, b4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4ba0:	6823      	ldr	r3, [r4, #0]
   b4ba2:	4620      	mov	r0, r4
   b4ba4:	689b      	ldr	r3, [r3, #8]
   b4ba6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4ba8:	68a3      	ldr	r3, [r4, #8]
   b4baa:	3b01      	subs	r3, #1
   b4bac:	60a3      	str	r3, [r4, #8]
   b4bae:	b91b      	cbnz	r3, b4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4bb0:	6823      	ldr	r3, [r4, #0]
   b4bb2:	4620      	mov	r0, r4
   b4bb4:	68db      	ldr	r3, [r3, #12]
   b4bb6:	4798      	blx	r3
      }
   b4bb8:	4628      	mov	r0, r5
   b4bba:	bd38      	pop	{r3, r4, r5, pc}

000b4bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b4bbc:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b4bbe:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4bc0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4bc2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4bc4:	dd03      	ble.n	b4bce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b4bc6:	f7ff fec3 	bl	b4950 <realloc>
            if (!d) {
   b4bca:	b918      	cbnz	r0, b4bd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4bcc:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4bce:	f7ff feb7 	bl	b4940 <free>
        T* d = nullptr;
   b4bd2:	2000      	movs	r0, #0
        data_ = d;
   b4bd4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4bd6:	60a5      	str	r5, [r4, #8]
        return true;
   b4bd8:	2001      	movs	r0, #1
   b4bda:	e7f7      	b.n	b4bcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4bdc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4bdc:	f100 0310 	add.w	r3, r0, #16
   b4be0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4be2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4be6:	2901      	cmp	r1, #1
   b4be8:	4618      	mov	r0, r3
   b4bea:	d108      	bne.n	b4bfe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4bec:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4bf0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4bf4:	3a01      	subs	r2, #1
   b4bf6:	f103 0310 	add.w	r3, r3, #16
   b4bfa:	d1f2      	bne.n	b4be2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4bfc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4bfe:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4c00:	bf04      	itt	eq
   b4c02:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4c06:	1852      	addeq	r2, r2, r1
   b4c08:	e7f4      	b.n	b4bf4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4c0a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4c0a:	b40e      	push	{r1, r2, r3}
   b4c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c0e:	b088      	sub	sp, #32
   b4c10:	af00      	add	r7, sp, #0
   b4c12:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c16:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4c18:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c1c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4c1e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c20:	462b      	mov	r3, r5
   b4c22:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4c24:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c26:	f7ff fe9b 	bl	b4960 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4c2a:	280f      	cmp	r0, #15
   b4c2c:	687a      	ldr	r2, [r7, #4]
   b4c2e:	d91a      	bls.n	b4c66 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4c30:	f100 0308 	add.w	r3, r0, #8
   b4c34:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4c38:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4c3a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c3e:	1c41      	adds	r1, r0, #1
   b4c40:	462b      	mov	r3, r5
   b4c42:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4c44:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4c46:	f7ff fe8b 	bl	b4960 <vsnprintf>
        if (n > 0) {
   b4c4a:	1e02      	subs	r2, r0, #0
   b4c4c:	dd04      	ble.n	b4c58 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4c4e:	6823      	ldr	r3, [r4, #0]
   b4c50:	4669      	mov	r1, sp
   b4c52:	689b      	ldr	r3, [r3, #8]
   b4c54:	4620      	mov	r0, r4
   b4c56:	4798      	blx	r3
   b4c58:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4c5a:	3720      	adds	r7, #32
   b4c5c:	46bd      	mov	sp, r7
   b4c5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4c62:	b003      	add	sp, #12
   b4c64:	4770      	bx	lr
    } else if (n > 0) {
   b4c66:	2800      	cmp	r0, #0
   b4c68:	d0f7      	beq.n	b4c5a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4c6a:	6823      	ldr	r3, [r4, #0]
   b4c6c:	4602      	mov	r2, r0
   b4c6e:	689b      	ldr	r3, [r3, #8]
   b4c70:	f107 0110 	add.w	r1, r7, #16
   b4c74:	4620      	mov	r0, r4
   b4c76:	4798      	blx	r3
}
   b4c78:	e7ef      	b.n	b4c5a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4c7a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4c7c:	6843      	ldr	r3, [r0, #4]
   b4c7e:	3b01      	subs	r3, #1
    {
   b4c80:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4c82:	6043      	str	r3, [r0, #4]
   b4c84:	b963      	cbnz	r3, b4ca0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4c86:	6803      	ldr	r3, [r0, #0]
   b4c88:	689b      	ldr	r3, [r3, #8]
   b4c8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4c8c:	68a3      	ldr	r3, [r4, #8]
   b4c8e:	3b01      	subs	r3, #1
   b4c90:	60a3      	str	r3, [r4, #8]
   b4c92:	b92b      	cbnz	r3, b4ca0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4c94:	6823      	ldr	r3, [r4, #0]
   b4c96:	4620      	mov	r0, r4
   b4c98:	68db      	ldr	r3, [r3, #12]
    }
   b4c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4c9e:	4718      	bx	r3
    }
   b4ca0:	bd10      	pop	{r4, pc}

000b4ca2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4ca2:	b538      	push	{r3, r4, r5, lr}
   b4ca4:	680b      	ldr	r3, [r1, #0]
   b4ca6:	6003      	str	r3, [r0, #0]
   b4ca8:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4caa:	6843      	ldr	r3, [r0, #4]
   b4cac:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4cae:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4cb0:	d008      	beq.n	b4cc4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4cb2:	b115      	cbz	r5, b4cba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4cb4:	686b      	ldr	r3, [r5, #4]
   b4cb6:	3301      	adds	r3, #1
   b4cb8:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4cba:	6860      	ldr	r0, [r4, #4]
   b4cbc:	b108      	cbz	r0, b4cc2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4cbe:	f7ff ffdc 	bl	b4c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4cc2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4cc4:	bd38      	pop	{r3, r4, r5, pc}

000b4cc6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4cc6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4cc8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4cca:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4cce:	689b      	ldr	r3, [r3, #8]
   b4cd0:	2201      	movs	r2, #1
   b4cd2:	f10d 0107 	add.w	r1, sp, #7
   b4cd6:	4798      	blx	r3
}
   b4cd8:	b003      	add	sp, #12
   b4cda:	f85d fb04 	ldr.w	pc, [sp], #4

000b4cde <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4cde:	460b      	mov	r3, r1
   b4ce0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4ce2:	2200      	movs	r2, #0
   b4ce4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ce6:	e9c0 2200 	strd	r2, r2, [r0]
   b4cea:	4604      	mov	r4, r0
        t_ = t;
   b4cec:	6083      	str	r3, [r0, #8]
    if (t) {
   b4cee:	b90b      	cbnz	r3, b4cf4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4cf0:	4620      	mov	r0, r4
   b4cf2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4cf4:	f7ff ffd5 	bl	b4ca2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4cf8:	e7fa      	b.n	b4cf0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4cfa <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4cfa:	6883      	ldr	r3, [r0, #8]
   b4cfc:	b1eb      	cbz	r3, b4d3a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4cfe:	781a      	ldrb	r2, [r3, #0]
   b4d00:	2a03      	cmp	r2, #3
   b4d02:	d81a      	bhi.n	b4d3a <_ZNK5spark9JSONValue4typeEv+0x40>
   b4d04:	e8df f002 	tbb	[pc, r2]
   b4d08:	1b021704 	.word	0x1b021704
   b4d0c:	2005      	movs	r0, #5
   b4d0e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4d10:	6802      	ldr	r2, [r0, #0]
   b4d12:	685b      	ldr	r3, [r3, #4]
   b4d14:	6852      	ldr	r2, [r2, #4]
   b4d16:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4d18:	282d      	cmp	r0, #45	; 0x2d
   b4d1a:	d012      	beq.n	b4d42 <_ZNK5spark9JSONValue4typeEv+0x48>
   b4d1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4d20:	2b09      	cmp	r3, #9
   b4d22:	d90e      	bls.n	b4d42 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4d24:	2874      	cmp	r0, #116	; 0x74
   b4d26:	d00e      	beq.n	b4d46 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4d28:	2866      	cmp	r0, #102	; 0x66
   b4d2a:	d00c      	beq.n	b4d46 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4d2c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4d30:	4258      	negs	r0, r3
   b4d32:	4158      	adcs	r0, r3
   b4d34:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4d36:	2006      	movs	r0, #6
   b4d38:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4d3a:	2000      	movs	r0, #0
   b4d3c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4d3e:	2004      	movs	r0, #4
   b4d40:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4d42:	2003      	movs	r0, #3
   b4d44:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4d46:	2002      	movs	r0, #2
}
   b4d48:	4770      	bx	lr

000b4d4a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4d4a:	b510      	push	{r4, lr}
   b4d4c:	4604      	mov	r4, r0
    switch (type()) {
   b4d4e:	f7ff ffd4 	bl	b4cfa <_ZNK5spark9JSONValue4typeEv>
   b4d52:	2802      	cmp	r0, #2
   b4d54:	d00e      	beq.n	b4d74 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4d56:	1ec3      	subs	r3, r0, #3
   b4d58:	b2db      	uxtb	r3, r3
   b4d5a:	2b01      	cmp	r3, #1
   b4d5c:	d814      	bhi.n	b4d88 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4d5e:	6822      	ldr	r2, [r4, #0]
   b4d60:	68a3      	ldr	r3, [r4, #8]
   b4d62:	6850      	ldr	r0, [r2, #4]
   b4d64:	685b      	ldr	r3, [r3, #4]
}
   b4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4d6a:	220a      	movs	r2, #10
   b4d6c:	2100      	movs	r1, #0
   b4d6e:	4418      	add	r0, r3
   b4d70:	f003 b880 	b.w	b7e74 <strtol>
        const char* const s = d_->json + t_->start;
   b4d74:	6822      	ldr	r2, [r4, #0]
   b4d76:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4d78:	6852      	ldr	r2, [r2, #4]
   b4d7a:	685b      	ldr	r3, [r3, #4]
   b4d7c:	5cd0      	ldrb	r0, [r2, r3]
   b4d7e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4d82:	4258      	negs	r0, r3
   b4d84:	4158      	adcs	r0, r3
}
   b4d86:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4d88:	2000      	movs	r0, #0
   b4d8a:	e7fc      	b.n	b4d86 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b4d8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4d8c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4d8e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4d90:	e9c0 3300 	strd	r3, r3, [r0]
   b4d94:	4604      	mov	r4, r0
        n_(0) {
   b4d96:	480e      	ldr	r0, [pc, #56]	; (b4dd0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4d98:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4d9c:	b1a9      	cbz	r1, b4dca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4d9e:	780b      	ldrb	r3, [r1, #0]
   b4da0:	2b03      	cmp	r3, #3
   b4da2:	d006      	beq.n	b4db2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4da4:	b98b      	cbnz	r3, b4dca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4da6:	6813      	ldr	r3, [r2, #0]
   b4da8:	6858      	ldr	r0, [r3, #4]
   b4daa:	684b      	ldr	r3, [r1, #4]
   b4dac:	5cc3      	ldrb	r3, [r0, r3]
   b4dae:	2b6e      	cmp	r3, #110	; 0x6e
   b4db0:	d007      	beq.n	b4dc2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4db2:	6813      	ldr	r3, [r2, #0]
   b4db4:	684d      	ldr	r5, [r1, #4]
   b4db6:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4db8:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4dba:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4dbc:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4dbe:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4dc0:	60e3      	str	r3, [r4, #12]
   b4dc2:	4611      	mov	r1, r2
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	f7ff ff6c 	bl	b4ca2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4dca:	4620      	mov	r0, r4
   b4dcc:	bd38      	pop	{r3, r4, r5, pc}
   b4dce:	bf00      	nop
   b4dd0:	000b8186 	.word	0x000b8186

000b4dd4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4dd4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4dd6:	2500      	movs	r5, #0
   b4dd8:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4dda:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4dde:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4de2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4de6:	4604      	mov	r4, r0
   b4de8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4dea:	b14b      	cbz	r3, b4e00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4dec:	781a      	ldrb	r2, [r3, #0]
   b4dee:	2a01      	cmp	r2, #1
   b4df0:	d106      	bne.n	b4e00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4df2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4df6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4df8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4dfa:	6143      	str	r3, [r0, #20]
   b4dfc:	f7ff ff51 	bl	b4ca2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4e00:	4620      	mov	r0, r4
   b4e02:	bd38      	pop	{r3, r4, r5, pc}

000b4e04 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4e04:	b510      	push	{r4, lr}
    if (!n_) {
   b4e06:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4e08:	4604      	mov	r4, r0
    if (!n_) {
   b4e0a:	b163      	cbz	r3, b4e26 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4e0c:	6880      	ldr	r0, [r0, #8]
   b4e0e:	60e0      	str	r0, [r4, #12]
    --n_;
   b4e10:	3b01      	subs	r3, #1
    ++t_;
   b4e12:	3010      	adds	r0, #16
   b4e14:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4e16:	6120      	str	r0, [r4, #16]
    --n_;
   b4e18:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4e1a:	b113      	cbz	r3, b4e22 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4e1c:	f7ff fede 	bl	b4bdc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4e20:	60a0      	str	r0, [r4, #8]
    return true;
   b4e22:	2001      	movs	r0, #1
   b4e24:	e000      	b.n	b4e28 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4e26:	4618      	mov	r0, r3
}
   b4e28:	bd10      	pop	{r4, pc}

000b4e2a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4e2a:	b510      	push	{r4, lr}
    write('}');
   b4e2c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4e2e:	4604      	mov	r4, r0
    write('}');
   b4e30:	f7ff ff49 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4e34:	2301      	movs	r3, #1
   b4e36:	7123      	strb	r3, [r4, #4]
}
   b4e38:	4620      	mov	r0, r4
   b4e3a:	bd10      	pop	{r4, pc}

000b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4e3c:	b508      	push	{r3, lr}
    switch (state_) {
   b4e3e:	7903      	ldrb	r3, [r0, #4]
   b4e40:	2b01      	cmp	r3, #1
   b4e42:	d002      	beq.n	b4e4a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4e44:	2b02      	cmp	r3, #2
   b4e46:	d004      	beq.n	b4e52 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4e48:	bd08      	pop	{r3, pc}
        write(',');
   b4e4a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4e4c:	f7ff ff3b 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
}
   b4e50:	e7fa      	b.n	b4e48 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4e52:	213a      	movs	r1, #58	; 0x3a
   b4e54:	e7fa      	b.n	b4e4c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4e56 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4e56:	b510      	push	{r4, lr}
   b4e58:	4604      	mov	r4, r0
    writeSeparator();
   b4e5a:	f7ff ffef 	bl	b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4e5e:	4620      	mov	r0, r4
   b4e60:	217b      	movs	r1, #123	; 0x7b
   b4e62:	f7ff ff30 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4e66:	2300      	movs	r3, #0
   b4e68:	7123      	strb	r3, [r4, #4]
}
   b4e6a:	4620      	mov	r0, r4
   b4e6c:	bd10      	pop	{r4, pc}
	...

000b4e70 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4e70:	b513      	push	{r0, r1, r4, lr}
   b4e72:	4604      	mov	r4, r0
   b4e74:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4e76:	f7ff ffe1 	bl	b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4e7a:	6823      	ldr	r3, [r4, #0]
   b4e7c:	9a01      	ldr	r2, [sp, #4]
   b4e7e:	68db      	ldr	r3, [r3, #12]
   b4e80:	4903      	ldr	r1, [pc, #12]	; (b4e90 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4e82:	4620      	mov	r0, r4
   b4e84:	4798      	blx	r3
    state_ = NEXT;
   b4e86:	2301      	movs	r3, #1
}
   b4e88:	4620      	mov	r0, r4
    state_ = NEXT;
   b4e8a:	7123      	strb	r3, [r4, #4]
}
   b4e8c:	b002      	add	sp, #8
   b4e8e:	bd10      	pop	{r4, pc}
   b4e90:	000b7f95 	.word	0x000b7f95

000b4e94 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4e94:	b513      	push	{r0, r1, r4, lr}
   b4e96:	4604      	mov	r4, r0
   b4e98:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4e9a:	f7ff ffcf 	bl	b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4e9e:	6823      	ldr	r3, [r4, #0]
   b4ea0:	9a01      	ldr	r2, [sp, #4]
   b4ea2:	68db      	ldr	r3, [r3, #12]
   b4ea4:	4903      	ldr	r1, [pc, #12]	; (b4eb4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	4798      	blx	r3
    state_ = NEXT;
   b4eaa:	2301      	movs	r3, #1
}
   b4eac:	4620      	mov	r0, r4
    state_ = NEXT;
   b4eae:	7123      	strb	r3, [r4, #4]
}
   b4eb0:	b002      	add	sp, #8
   b4eb2:	bd10      	pop	{r4, pc}
   b4eb4:	000b80c0 	.word	0x000b80c0

000b4eb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4ebc:	460d      	mov	r5, r1
    write('"');
   b4ebe:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4ec0:	4690      	mov	r8, r2
   b4ec2:	4604      	mov	r4, r0
    write('"');
   b4ec4:	f7ff feff 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4ec8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4f70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4ecc:	44a8      	add	r8, r5
    const char *s = str;
   b4ece:	462f      	mov	r7, r5
    while (s != end) {
   b4ed0:	4547      	cmp	r7, r8
   b4ed2:	46ba      	mov	sl, r7
   b4ed4:	d03d      	beq.n	b4f52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4ed6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4eda:	2e22      	cmp	r6, #34	; 0x22
   b4edc:	d006      	beq.n	b4eec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4ede:	2e5c      	cmp	r6, #92	; 0x5c
   b4ee0:	d004      	beq.n	b4eec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4ee2:	4630      	mov	r0, r6
   b4ee4:	f002 fe7a 	bl	b7bdc <isprint>
   b4ee8:	2800      	cmp	r0, #0
   b4eea:	d1f1      	bne.n	b4ed0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4eec:	6823      	ldr	r3, [r4, #0]
   b4eee:	ebaa 0205 	sub.w	r2, sl, r5
   b4ef2:	689b      	ldr	r3, [r3, #8]
   b4ef4:	4629      	mov	r1, r5
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	4798      	blx	r3
            write('\\');
   b4efa:	215c      	movs	r1, #92	; 0x5c
   b4efc:	4620      	mov	r0, r4
   b4efe:	f7ff fee2 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4f02:	2e0d      	cmp	r6, #13
   b4f04:	d80a      	bhi.n	b4f1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4f06:	2e07      	cmp	r6, #7
   b4f08:	d91c      	bls.n	b4f44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4f0a:	f1a6 0308 	sub.w	r3, r6, #8
   b4f0e:	2b05      	cmp	r3, #5
   b4f10:	d818      	bhi.n	b4f44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4f12:	e8df f003 	tbb	[pc, r3]
   b4f16:	0f0d      	.short	0x0f0d
   b4f18:	15131711 	.word	0x15131711
   b4f1c:	2e22      	cmp	r6, #34	; 0x22
   b4f1e:	d001      	beq.n	b4f24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4f20:	2e5c      	cmp	r6, #92	; 0x5c
   b4f22:	d10f      	bne.n	b4f44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4f24:	4631      	mov	r1, r6
                write('b');
   b4f26:	4620      	mov	r0, r4
   b4f28:	f7ff fecd 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4f2c:	463d      	mov	r5, r7
    while (s != end) {
   b4f2e:	e7cf      	b.n	b4ed0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4f30:	2162      	movs	r1, #98	; 0x62
   b4f32:	e7f8      	b.n	b4f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4f34:	2174      	movs	r1, #116	; 0x74
   b4f36:	e7f6      	b.n	b4f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4f38:	216e      	movs	r1, #110	; 0x6e
   b4f3a:	e7f4      	b.n	b4f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4f3c:	2166      	movs	r1, #102	; 0x66
   b4f3e:	e7f2      	b.n	b4f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4f40:	2172      	movs	r1, #114	; 0x72
   b4f42:	e7f0      	b.n	b4f26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4f44:	6823      	ldr	r3, [r4, #0]
   b4f46:	4632      	mov	r2, r6
   b4f48:	68db      	ldr	r3, [r3, #12]
   b4f4a:	4649      	mov	r1, r9
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	4798      	blx	r3
                break;
   b4f50:	e7ec      	b.n	b4f2c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4f52:	42bd      	cmp	r5, r7
   b4f54:	d005      	beq.n	b4f62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4f56:	6823      	ldr	r3, [r4, #0]
   b4f58:	1b7a      	subs	r2, r7, r5
   b4f5a:	689b      	ldr	r3, [r3, #8]
   b4f5c:	4629      	mov	r1, r5
   b4f5e:	4620      	mov	r0, r4
   b4f60:	4798      	blx	r3
    }
    write('"');
   b4f62:	2122      	movs	r1, #34	; 0x22
   b4f64:	4620      	mov	r0, r4
   b4f66:	f7ff feae 	bl	b4cc6 <_ZN5spark10JSONWriter5writeEc>
}
   b4f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4f6e:	bf00      	nop
   b4f70:	000b80c3 	.word	0x000b80c3

000b4f74 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4f74:	b513      	push	{r0, r1, r4, lr}
   b4f76:	4604      	mov	r4, r0
   b4f78:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4f7c:	f7ff ff5e 	bl	b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4f80:	4620      	mov	r0, r4
   b4f82:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4f86:	f7ff ff97 	bl	b4eb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4f8a:	2302      	movs	r3, #2
}
   b4f8c:	4620      	mov	r0, r4
    state_ = VALUE;
   b4f8e:	7123      	strb	r3, [r4, #4]
}
   b4f90:	b002      	add	sp, #8
   b4f92:	bd10      	pop	{r4, pc}

000b4f94 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4f94:	b513      	push	{r0, r1, r4, lr}
   b4f96:	4604      	mov	r4, r0
   b4f98:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4f9c:	f7ff ff4e 	bl	b4e3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4fa6:	f7ff ff87 	bl	b4eb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4faa:	2301      	movs	r3, #1
}
   b4fac:	4620      	mov	r0, r4
    state_ = NEXT;
   b4fae:	7123      	strb	r3, [r4, #4]
}
   b4fb0:	b002      	add	sp, #8
   b4fb2:	bd10      	pop	{r4, pc}

000b4fb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4fb4:	7441      	strb	r1, [r0, #17]
}
   b4fb6:	4770      	bx	lr

000b4fb8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4fb8:	4770      	bx	lr

000b4fba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4fba:	4770      	bx	lr

000b4fbc <_ZN9USBSerial4readEv>:
{
   b4fbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4fbe:	2100      	movs	r1, #0
   b4fc0:	7c00      	ldrb	r0, [r0, #16]
   b4fc2:	f7ff fadf 	bl	b4584 <HAL_USB_USART_Receive_Data>
}
   b4fc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4fca:	bd08      	pop	{r3, pc}

000b4fcc <_ZN9USBSerial4peekEv>:
{
   b4fcc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4fce:	2101      	movs	r1, #1
   b4fd0:	7c00      	ldrb	r0, [r0, #16]
   b4fd2:	f7ff fad7 	bl	b4584 <HAL_USB_USART_Receive_Data>
}
   b4fd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4fda:	bd08      	pop	{r3, pc}

000b4fdc <_ZN9USBSerial17availableForWriteEv>:
{
   b4fdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4fde:	7c00      	ldrb	r0, [r0, #16]
   b4fe0:	f7ff fac8 	bl	b4574 <HAL_USB_USART_Available_Data_For_Write>
}
   b4fe4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4fe8:	bd08      	pop	{r3, pc}

000b4fea <_ZN9USBSerial9availableEv>:
{
   b4fea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4fec:	7c00      	ldrb	r0, [r0, #16]
   b4fee:	f7ff fab9 	bl	b4564 <HAL_USB_USART_Available_Data>
}
   b4ff2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4ff6:	bd08      	pop	{r3, pc}

000b4ff8 <_ZN9USBSerial5writeEh>:
{
   b4ff8:	b513      	push	{r0, r1, r4, lr}
   b4ffa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4ffc:	7c00      	ldrb	r0, [r0, #16]
{
   b4ffe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5000:	f7ff fab8 	bl	b4574 <HAL_USB_USART_Available_Data_For_Write>
   b5004:	2800      	cmp	r0, #0
   b5006:	9901      	ldr	r1, [sp, #4]
   b5008:	dc01      	bgt.n	b500e <_ZN9USBSerial5writeEh+0x16>
   b500a:	7c60      	ldrb	r0, [r4, #17]
   b500c:	b120      	cbz	r0, b5018 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b500e:	7c20      	ldrb	r0, [r4, #16]
   b5010:	f7ff fac0 	bl	b4594 <HAL_USB_USART_Send_Data>
   b5014:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5018:	b002      	add	sp, #8
   b501a:	bd10      	pop	{r4, pc}

000b501c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b501c:	7c00      	ldrb	r0, [r0, #16]
   b501e:	f7ff bac1 	b.w	b45a4 <HAL_USB_USART_Flush_Data>

000b5022 <_ZN9USBSerialD0Ev>:
   b5022:	b510      	push	{r4, lr}
   b5024:	2114      	movs	r1, #20
   b5026:	4604      	mov	r4, r0
   b5028:	f7ff f849 	bl	b40be <_ZdlPvj>
   b502c:	4620      	mov	r0, r4
   b502e:	bd10      	pop	{r4, pc}

000b5030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5030:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5036:	4604      	mov	r4, r0
   b5038:	4608      	mov	r0, r1
   b503a:	2100      	movs	r1, #0
   b503c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5040:	4b04      	ldr	r3, [pc, #16]	; (b5054 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5042:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5044:	2301      	movs	r3, #1
  _serial = serial;
   b5046:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5048:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b504a:	4611      	mov	r1, r2
   b504c:	f7ff fa72 	bl	b4534 <HAL_USB_USART_Init>
}
   b5050:	4620      	mov	r0, r4
   b5052:	bd10      	pop	{r4, pc}
   b5054:	000b80d4 	.word	0x000b80d4

000b5058 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5058:	7c00      	ldrb	r0, [r0, #16]
   b505a:	2200      	movs	r2, #0
   b505c:	f7ff ba72 	b.w	b4544 <HAL_USB_USART_Begin>

000b5060 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5060:	7c00      	ldrb	r0, [r0, #16]
   b5062:	f7ff ba77 	b.w	b4554 <HAL_USB_USART_End>

000b5066 <_Z19acquireSerialBufferv>:
{
   b5066:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5068:	2214      	movs	r2, #20
{
   b506a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b506c:	2100      	movs	r1, #0
   b506e:	f002 fdf5 	bl	b7c5c <memset>
}
   b5072:	4620      	mov	r0, r4
   b5074:	bd10      	pop	{r4, pc}
	...

000b5078 <_Z16_fetch_usbserialv>:
{
   b5078:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b507a:	4c0f      	ldr	r4, [pc, #60]	; (b50b8 <_Z16_fetch_usbserialv+0x40>)
{
   b507c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b507e:	a803      	add	r0, sp, #12
   b5080:	f7ff fff1 	bl	b5066 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5084:	7821      	ldrb	r1, [r4, #0]
   b5086:	f3bf 8f5b 	dmb	ish
   b508a:	f011 0101 	ands.w	r1, r1, #1
   b508e:	d10f      	bne.n	b50b0 <_Z16_fetch_usbserialv+0x38>
   b5090:	4620      	mov	r0, r4
   b5092:	9101      	str	r1, [sp, #4]
   b5094:	f7ff f822 	bl	b40dc <__cxa_guard_acquire>
   b5098:	9901      	ldr	r1, [sp, #4]
   b509a:	b148      	cbz	r0, b50b0 <_Z16_fetch_usbserialv+0x38>
   b509c:	aa03      	add	r2, sp, #12
   b509e:	4807      	ldr	r0, [pc, #28]	; (b50bc <_Z16_fetch_usbserialv+0x44>)
   b50a0:	f7ff ffc6 	bl	b5030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b50a4:	4620      	mov	r0, r4
   b50a6:	f7ff f81e 	bl	b40e6 <__cxa_guard_release>
   b50aa:	4805      	ldr	r0, [pc, #20]	; (b50c0 <_Z16_fetch_usbserialv+0x48>)
   b50ac:	f002 fd90 	bl	b7bd0 <atexit>
	return _usbserial;
}
   b50b0:	4802      	ldr	r0, [pc, #8]	; (b50bc <_Z16_fetch_usbserialv+0x44>)
   b50b2:	b008      	add	sp, #32
   b50b4:	bd10      	pop	{r4, pc}
   b50b6:	bf00      	nop
   b50b8:	2003e6ac 	.word	0x2003e6ac
   b50bc:	2003e6b0 	.word	0x2003e6b0
   b50c0:	000b4fb9 	.word	0x000b4fb9

000b50c4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b50c4:	4770      	bx	lr

000b50c6 <_ZN9IPAddressD0Ev>:
   b50c6:	b510      	push	{r4, lr}
   b50c8:	2118      	movs	r1, #24
   b50ca:	4604      	mov	r4, r0
   b50cc:	f7fe fff7 	bl	b40be <_ZdlPvj>
   b50d0:	4620      	mov	r0, r4
   b50d2:	bd10      	pop	{r4, pc}

000b50d4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b50d4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b50d6:	7d03      	ldrb	r3, [r0, #20]
   b50d8:	2b06      	cmp	r3, #6
{
   b50da:	b08d      	sub	sp, #52	; 0x34
   b50dc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b50de:	f100 0704 	add.w	r7, r0, #4
   b50e2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b50e6:	d012      	beq.n	b510e <_ZNK9IPAddress7printToER5Print+0x3a>
   b50e8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b50ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b50f0:	220a      	movs	r2, #10
   b50f2:	4630      	mov	r0, r6
   b50f4:	f001 f91d 	bl	b6332 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b50f8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b50fa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b50fc:	d019      	beq.n	b5132 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b50fe:	2c00      	cmp	r4, #0
   b5100:	d0f4      	beq.n	b50ec <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5102:	212e      	movs	r1, #46	; 0x2e
   b5104:	4630      	mov	r0, r6
   b5106:	f001 f911 	bl	b632c <_ZN5Print5printEc>
   b510a:	4404      	add	r4, r0
   b510c:	e7ee      	b.n	b50ec <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b510e:	232f      	movs	r3, #47	; 0x2f
   b5110:	466a      	mov	r2, sp
   b5112:	4639      	mov	r1, r7
   b5114:	200a      	movs	r0, #10
		buf[0] = 0;
   b5116:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b511a:	f7ff fa93 	bl	b4644 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b511e:	4668      	mov	r0, sp
   b5120:	f7fe ff86 	bl	b4030 <strlen>
   b5124:	6833      	ldr	r3, [r6, #0]
   b5126:	4602      	mov	r2, r0
   b5128:	68db      	ldr	r3, [r3, #12]
   b512a:	4669      	mov	r1, sp
   b512c:	4630      	mov	r0, r6
   b512e:	4798      	blx	r3
   b5130:	4604      	mov	r4, r0
    }
    return n;
}
   b5132:	4620      	mov	r0, r4
   b5134:	b00d      	add	sp, #52	; 0x34
   b5136:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5138 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5138:	b510      	push	{r4, lr}
   b513a:	4b05      	ldr	r3, [pc, #20]	; (b5150 <_ZN9IPAddressC1Ev+0x18>)
   b513c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b513e:	2211      	movs	r2, #17
   b5140:	f840 3b04 	str.w	r3, [r0], #4
   b5144:	2100      	movs	r1, #0
   b5146:	f002 fd89 	bl	b7c5c <memset>
}
   b514a:	4620      	mov	r0, r4
   b514c:	bd10      	pop	{r4, pc}
   b514e:	bf00      	nop
   b5150:	000b8104 	.word	0x000b8104

000b5154 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5154:	4603      	mov	r3, r0
   b5156:	4a07      	ldr	r2, [pc, #28]	; (b5174 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5158:	b510      	push	{r4, lr}
   b515a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b515e:	f101 0210 	add.w	r2, r1, #16
   b5162:	f851 4b04 	ldr.w	r4, [r1], #4
   b5166:	f843 4b04 	str.w	r4, [r3], #4
   b516a:	4291      	cmp	r1, r2
   b516c:	d1f9      	bne.n	b5162 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b516e:	780a      	ldrb	r2, [r1, #0]
   b5170:	701a      	strb	r2, [r3, #0]
}
   b5172:	bd10      	pop	{r4, pc}
   b5174:	000b8104 	.word	0x000b8104

000b5178 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5178:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b517a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b517e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5182:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5186:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b518a:	2304      	movs	r3, #4
   b518c:	6041      	str	r1, [r0, #4]
   b518e:	7503      	strb	r3, [r0, #20]
}
   b5190:	bd10      	pop	{r4, pc}
	...

000b5194 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5194:	b507      	push	{r0, r1, r2, lr}
   b5196:	4b06      	ldr	r3, [pc, #24]	; (b51b0 <_ZN9IPAddressC1EPKh+0x1c>)
   b5198:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b519a:	78cb      	ldrb	r3, [r1, #3]
   b519c:	9300      	str	r3, [sp, #0]
   b519e:	788b      	ldrb	r3, [r1, #2]
   b51a0:	784a      	ldrb	r2, [r1, #1]
   b51a2:	7809      	ldrb	r1, [r1, #0]
   b51a4:	f7ff ffe8 	bl	b5178 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b51a8:	b003      	add	sp, #12
   b51aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b51ae:	bf00      	nop
   b51b0:	000b8104 	.word	0x000b8104

000b51b4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b51b4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b51b6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b51b8:	4604      	mov	r4, r0
      if (_M_manager)
   b51ba:	b113      	cbz	r3, b51c2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b51bc:	2203      	movs	r2, #3
   b51be:	4601      	mov	r1, r0
   b51c0:	4798      	blx	r3
    }
   b51c2:	4620      	mov	r0, r4
   b51c4:	bd10      	pop	{r4, pc}

000b51c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b51c6:	b513      	push	{r0, r1, r4, lr}
   b51c8:	460b      	mov	r3, r1
   b51ca:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b51cc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b51d0:	466c      	mov	r4, sp
   b51d2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b51d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   b51da:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b51de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b51e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b51e6:	b002      	add	sp, #8
   b51e8:	bd10      	pop	{r4, pc}
	...

000b51ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b51ec:	4b01      	ldr	r3, [pc, #4]	; (b51f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b51ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b51f0:	4770      	bx	lr
   b51f2:	bf00      	nop
   b51f4:	2003e5c0 	.word	0x2003e5c0

000b51f8 <serialEventRun>:
{
   b51f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b51fa:	4b0b      	ldr	r3, [pc, #44]	; (b5228 <serialEventRun+0x30>)
   b51fc:	b143      	cbz	r3, b5210 <serialEventRun+0x18>
   b51fe:	f7ff ff3b 	bl	b5078 <_Z16_fetch_usbserialv>
   b5202:	6803      	ldr	r3, [r0, #0]
   b5204:	691b      	ldr	r3, [r3, #16]
   b5206:	4798      	blx	r3
   b5208:	2800      	cmp	r0, #0
   b520a:	dd01      	ble.n	b5210 <serialEventRun+0x18>
        serialEvent();
   b520c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5210:	4b06      	ldr	r3, [pc, #24]	; (b522c <serialEventRun+0x34>)
   b5212:	b143      	cbz	r3, b5226 <serialEventRun+0x2e>
   b5214:	f002 fb9e 	bl	b7954 <_Z22__fetch_global_Serial1v>
   b5218:	6803      	ldr	r3, [r0, #0]
   b521a:	691b      	ldr	r3, [r3, #16]
   b521c:	4798      	blx	r3
   b521e:	2800      	cmp	r0, #0
   b5220:	dd01      	ble.n	b5226 <serialEventRun+0x2e>
        serialEvent1();
   b5222:	f3af 8000 	nop.w
}
   b5226:	bd08      	pop	{r3, pc}
	...

000b5230 <_post_loop>:
{
   b5230:	b508      	push	{r3, lr}
	serialEventRun();
   b5232:	f7ff ffe1 	bl	b51f8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5236:	f7ff fab7 	bl	b47a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b523a:	4b01      	ldr	r3, [pc, #4]	; (b5240 <_post_loop+0x10>)
   b523c:	6018      	str	r0, [r3, #0]
}
   b523e:	bd08      	pop	{r3, pc}
   b5240:	2003e740 	.word	0x2003e740

000b5244 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5244:	4805      	ldr	r0, [pc, #20]	; (b525c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5246:	4a06      	ldr	r2, [pc, #24]	; (b5260 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5248:	4906      	ldr	r1, [pc, #24]	; (b5264 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b524a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b524c:	1a12      	subs	r2, r2, r0
   b524e:	f002 fcdd 	bl	b7c0c <memcpy>
    __backup_sram_signature = signature;
   b5252:	4b05      	ldr	r3, [pc, #20]	; (b5268 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5254:	4a05      	ldr	r2, [pc, #20]	; (b526c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5256:	601a      	str	r2, [r3, #0]
}
   b5258:	bd08      	pop	{r3, pc}
   b525a:	bf00      	nop
   b525c:	2003f400 	.word	0x2003f400
   b5260:	2003f404 	.word	0x2003f404
   b5264:	000b8768 	.word	0x000b8768
   b5268:	2003f400 	.word	0x2003f400
   b526c:	9a271c1e 	.word	0x9a271c1e

000b5270 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5270:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5272:	2300      	movs	r3, #0
   b5274:	9300      	str	r3, [sp, #0]
   b5276:	461a      	mov	r2, r3
   b5278:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b527c:	f7ff fb4e 	bl	b491c <system_ctrl_set_result>
}
   b5280:	b003      	add	sp, #12
   b5282:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5288 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5288:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b528a:	8843      	ldrh	r3, [r0, #2]
   b528c:	2b0a      	cmp	r3, #10
   b528e:	d008      	beq.n	b52a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5290:	2b50      	cmp	r3, #80	; 0x50
   b5292:	d10b      	bne.n	b52ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5294:	4b09      	ldr	r3, [pc, #36]	; (b52bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5296:	681b      	ldr	r3, [r3, #0]
   b5298:	b14b      	cbz	r3, b52ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b529a:	b003      	add	sp, #12
   b529c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b52a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b52a2:	f7ff ffe5 	bl	b5270 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b52a6:	b003      	add	sp, #12
   b52a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b52ac:	2300      	movs	r3, #0
   b52ae:	9300      	str	r3, [sp, #0]
   b52b0:	461a      	mov	r2, r3
   b52b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b52b6:	f7ff fb31 	bl	b491c <system_ctrl_set_result>
}
   b52ba:	e7f4      	b.n	b52a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b52bc:	2003e6c8 	.word	0x2003e6c8

000b52c0 <module_user_init_hook>:
{
   b52c0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b52c2:	4812      	ldr	r0, [pc, #72]	; (b530c <module_user_init_hook+0x4c>)
   b52c4:	2100      	movs	r1, #0
   b52c6:	f7ff fb6b 	bl	b49a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b52ca:	4b11      	ldr	r3, [pc, #68]	; (b5310 <module_user_init_hook+0x50>)
   b52cc:	681a      	ldr	r2, [r3, #0]
   b52ce:	4b11      	ldr	r3, [pc, #68]	; (b5314 <module_user_init_hook+0x54>)
   b52d0:	429a      	cmp	r2, r3
   b52d2:	4b11      	ldr	r3, [pc, #68]	; (b5318 <module_user_init_hook+0x58>)
   b52d4:	bf0c      	ite	eq
   b52d6:	2201      	moveq	r2, #1
   b52d8:	2200      	movne	r2, #0
   b52da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b52dc:	d001      	beq.n	b52e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b52de:	f7ff ffb1 	bl	b5244 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b52e2:	f7ff fa51 	bl	b4788 <HAL_RNG_GetRandomNumber>
   b52e6:	4604      	mov	r4, r0
    srand(seed);
   b52e8:	f002 fcc0 	bl	b7c6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b52ec:	4b0b      	ldr	r3, [pc, #44]	; (b531c <module_user_init_hook+0x5c>)
   b52ee:	b113      	cbz	r3, b52f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b52f0:	4620      	mov	r0, r4
   b52f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b52f6:	2100      	movs	r1, #0
   b52f8:	4808      	ldr	r0, [pc, #32]	; (b531c <module_user_init_hook+0x5c>)
   b52fa:	f7ff fa95 	bl	b4828 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b52fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5302:	4807      	ldr	r0, [pc, #28]	; (b5320 <module_user_init_hook+0x60>)
   b5304:	2100      	movs	r1, #0
   b5306:	f7ff baff 	b.w	b4908 <system_ctrl_set_app_request_handler>
   b530a:	bf00      	nop
   b530c:	000b51ed 	.word	0x000b51ed
   b5310:	2003f400 	.word	0x2003f400
   b5314:	9a271c1e 	.word	0x9a271c1e
   b5318:	2003e6c4 	.word	0x2003e6c4
   b531c:	00000000 	.word	0x00000000
   b5320:	000b5289 	.word	0x000b5289

000b5324 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5324:	4b01      	ldr	r3, [pc, #4]	; (b532c <_GLOBAL__sub_I_RGB+0x8>)
   b5326:	2200      	movs	r2, #0
   b5328:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b532a:	4770      	bx	lr
   b532c:	2003e6cc 	.word	0x2003e6cc

000b5330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5330:	4b02      	ldr	r3, [pc, #8]	; (b533c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5332:	681a      	ldr	r2, [r3, #0]
   b5334:	4b02      	ldr	r3, [pc, #8]	; (b5340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5336:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5338:	4770      	bx	lr
   b533a:	bf00      	nop
   b533c:	2003e5b4 	.word	0x2003e5b4
   b5340:	2003e6dc 	.word	0x2003e6dc

000b5344 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5344:	6880      	ldr	r0, [r0, #8]
   b5346:	6803      	ldr	r3, [r0, #0]
   b5348:	68db      	ldr	r3, [r3, #12]
   b534a:	4718      	bx	r3

000b534c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b534c:	4770      	bx	lr

000b534e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b534e:	4608      	mov	r0, r1
   b5350:	b111      	cbz	r1, b5358 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5352:	680b      	ldr	r3, [r1, #0]
   b5354:	685b      	ldr	r3, [r3, #4]
   b5356:	4718      	bx	r3
}
   b5358:	4770      	bx	lr

000b535a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b535a:	4770      	bx	lr

000b535c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b535c:	4770      	bx	lr

000b535e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b535e:	4770      	bx	lr

000b5360 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5360:	4770      	bx	lr

000b5362 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5362:	b538      	push	{r3, r4, r5, lr}
   b5364:	4604      	mov	r4, r0
   b5366:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5368:	6800      	ldr	r0, [r0, #0]
   b536a:	212e      	movs	r1, #46	; 0x2e
   b536c:	f002 fcb9 	bl	b7ce2 <strchrnul>
    size = s - category;
   b5370:	6823      	ldr	r3, [r4, #0]
   b5372:	1ac3      	subs	r3, r0, r3
   b5374:	602b      	str	r3, [r5, #0]
    if (size) {
   b5376:	b123      	cbz	r3, b5382 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5378:	7803      	ldrb	r3, [r0, #0]
   b537a:	b103      	cbz	r3, b537e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b537c:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b537e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5380:	6020      	str	r0, [r4, #0]
}
   b5382:	4618      	mov	r0, r3
   b5384:	bd38      	pop	{r3, r4, r5, pc}

000b5386 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5386:	b510      	push	{r4, lr}
   b5388:	210c      	movs	r1, #12
   b538a:	4604      	mov	r4, r0
   b538c:	f7fe fe97 	bl	b40be <_ZdlPvj>
   b5390:	4620      	mov	r0, r4
   b5392:	bd10      	pop	{r4, pc}

000b5394 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5394:	b510      	push	{r4, lr}
   b5396:	2104      	movs	r1, #4
   b5398:	4604      	mov	r4, r0
   b539a:	f7fe fe90 	bl	b40be <_ZdlPvj>
   b539e:	4620      	mov	r0, r4
   b53a0:	bd10      	pop	{r4, pc}

000b53a2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b53a2:	b510      	push	{r4, lr}
   b53a4:	2104      	movs	r1, #4
   b53a6:	4604      	mov	r4, r0
   b53a8:	f7fe fe89 	bl	b40be <_ZdlPvj>
   b53ac:	4620      	mov	r0, r4
   b53ae:	bd10      	pop	{r4, pc}

000b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b53b0:	f7ff b960 	b.w	b4674 <os_mutex_recursive_lock>

000b53b4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b53b4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b53b6:	f7fe fe31 	bl	b401c <strcmp>
}
   b53ba:	fab0 f080 	clz	r0, r0
   b53be:	0940      	lsrs	r0, r0, #5
   b53c0:	bd08      	pop	{r3, pc}

000b53c2 <__tcf_1>:
   b53c2:	4770      	bx	lr

000b53c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b53c4:	b510      	push	{r4, lr}
   b53c6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b53c8:	f7ff fe56 	bl	b5078 <_Z16_fetch_usbserialv>
   b53cc:	4284      	cmp	r4, r0
   b53ce:	d010      	beq.n	b53f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b53d0:	f002 fac0 	bl	b7954 <_Z22__fetch_global_Serial1v>
   b53d4:	4284      	cmp	r4, r0
   b53d6:	d105      	bne.n	b53e4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b53d8:	f002 fabc 	bl	b7954 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b53dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b53e0:	f002 b997 	b.w	b7712 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b53e4:	b12c      	cbz	r4, b53f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b53e6:	6823      	ldr	r3, [r4, #0]
   b53e8:	4620      	mov	r0, r4
   b53ea:	685b      	ldr	r3, [r3, #4]
}
   b53ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53f0:	4718      	bx	r3
   b53f2:	bd10      	pop	{r4, pc}

000b53f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b53f4:	680b      	ldr	r3, [r1, #0]
   b53f6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b53f8:	684b      	ldr	r3, [r1, #4]
   b53fa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b53fc:	b113      	cbz	r3, b5404 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b53fe:	685a      	ldr	r2, [r3, #4]
   b5400:	3201      	adds	r2, #1
   b5402:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5404:	4770      	bx	lr

000b5406 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5406:	b513      	push	{r0, r1, r4, lr}
   b5408:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b540a:	4608      	mov	r0, r1
   b540c:	9101      	str	r1, [sp, #4]
   b540e:	f7fe fe0f 	bl	b4030 <strlen>
   b5412:	9901      	ldr	r1, [sp, #4]
   b5414:	4602      	mov	r2, r0
   b5416:	4620      	mov	r0, r4
}
   b5418:	b002      	add	sp, #8
   b541a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b541e:	f7ff bdb9 	b.w	b4f94 <_ZN5spark10JSONWriter5valueEPKcj>

000b5422 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5422:	b513      	push	{r0, r1, r4, lr}
   b5424:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5426:	4608      	mov	r0, r1
   b5428:	9101      	str	r1, [sp, #4]
   b542a:	f7fe fe01 	bl	b4030 <strlen>
   b542e:	6823      	ldr	r3, [r4, #0]
   b5430:	9901      	ldr	r1, [sp, #4]
   b5432:	68db      	ldr	r3, [r3, #12]
   b5434:	4602      	mov	r2, r0
   b5436:	4620      	mov	r0, r4
}
   b5438:	b002      	add	sp, #8
   b543a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b543e:	4718      	bx	r3

000b5440 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5440:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5442:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5444:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5448:	68db      	ldr	r3, [r3, #12]
   b544a:	2201      	movs	r2, #1
   b544c:	f10d 0107 	add.w	r1, sp, #7
   b5450:	4798      	blx	r3
}
   b5452:	b003      	add	sp, #12
   b5454:	f85d fb04 	ldr.w	pc, [sp], #4

000b5458 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5458:	680a      	ldr	r2, [r1, #0]
   b545a:	6002      	str	r2, [r0, #0]
   b545c:	684a      	ldr	r2, [r1, #4]
   b545e:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b5460:	2200      	movs	r2, #0
   b5462:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5466:	b510      	push	{r4, lr}
   b5468:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b546a:	688c      	ldr	r4, [r1, #8]
   b546c:	6084      	str	r4, [r0, #8]
   b546e:	68cc      	ldr	r4, [r1, #12]
   b5470:	60c4      	str	r4, [r0, #12]
   b5472:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5474:	608a      	str	r2, [r1, #8]
   b5476:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5478:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b547a:	610a      	str	r2, [r1, #16]
   b547c:	bd10      	pop	{r4, pc}
	...

000b5480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5484:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5488:	f04f 0a14 	mov.w	sl, #20
   b548c:	9300      	str	r3, [sp, #0]
   b548e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5492:	4b18      	ldr	r3, [pc, #96]	; (b54f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5494:	10a4      	asrs	r4, r4, #2
   b5496:	4617      	mov	r7, r2
   b5498:	435c      	muls	r4, r3
   b549a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b549c:	2c00      	cmp	r4, #0
   b549e:	dd21      	ble.n	b54e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b54a0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b54a2:	fb0a f006 	mul.w	r0, sl, r6
   b54a6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b54aa:	463a      	mov	r2, r7
   b54ac:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b54b0:	5828      	ldr	r0, [r5, r0]
   b54b2:	9101      	str	r1, [sp, #4]
   b54b4:	455f      	cmp	r7, fp
   b54b6:	bf28      	it	cs
   b54b8:	465a      	movcs	r2, fp
   b54ba:	f002 fc24 	bl	b7d06 <strncmp>
                if (cmp == 0) {
   b54be:	2800      	cmp	r0, #0
   b54c0:	9901      	ldr	r1, [sp, #4]
   b54c2:	f04f 0301 	mov.w	r3, #1
   b54c6:	d10b      	bne.n	b54e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b54c8:	455f      	cmp	r7, fp
   b54ca:	d103      	bne.n	b54d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b54cc:	9a00      	ldr	r2, [sp, #0]
   b54ce:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b54d0:	4634      	mov	r4, r6
   b54d2:	e7e3      	b.n	b549c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b54d4:	d9fc      	bls.n	b54d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b54d6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b54d8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b54dc:	3e01      	subs	r6, #1
   b54de:	e7f7      	b.n	b54d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b54e0:	dbf9      	blt.n	b54d6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b54e2:	e7f5      	b.n	b54d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b54e4:	eba5 0508 	sub.w	r5, r5, r8
}
   b54e8:	4802      	ldr	r0, [pc, #8]	; (b54f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b54ea:	10ad      	asrs	r5, r5, #2
   b54ec:	4368      	muls	r0, r5
   b54ee:	b003      	add	sp, #12
   b54f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b54f4:	cccccccd 	.word	0xcccccccd

000b54f8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b54fa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b54fc:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b54fe:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5500:	b303      	cbz	r3, b5544 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5502:	b1f9      	cbz	r1, b5544 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5504:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5506:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b550a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b550c:	a903      	add	r1, sp, #12
   b550e:	a801      	add	r0, sp, #4
   b5510:	f7ff ff27 	bl	b5362 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5514:	4601      	mov	r1, r0
   b5516:	b1a8      	cbz	r0, b5544 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5518:	f10d 030b 	add.w	r3, sp, #11
   b551c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b551e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5522:	4620      	mov	r0, r4
   b5524:	f7ff ffac 	bl	b5480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5528:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b552c:	b153      	cbz	r3, b5544 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b552e:	6823      	ldr	r3, [r4, #0]
   b5530:	2414      	movs	r4, #20
   b5532:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5536:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5538:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b553c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b553e:	bfa8      	it	ge
   b5540:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5542:	e7e3      	b.n	b550c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5544:	4628      	mov	r0, r5
   b5546:	b004      	add	sp, #16
   b5548:	bd70      	pop	{r4, r5, r6, pc}

000b554a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b554a:	b40e      	push	{r1, r2, r3}
   b554c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b554e:	b08c      	sub	sp, #48	; 0x30
   b5550:	af00      	add	r7, sp, #0
   b5552:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5556:	4604      	mov	r4, r0
   b5558:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b555c:	607a      	str	r2, [r7, #4]
   b555e:	462b      	mov	r3, r5
   b5560:	2120      	movs	r1, #32
   b5562:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5566:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5568:	f7ff f9fa 	bl	b4960 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b556c:	281f      	cmp	r0, #31
   b556e:	687a      	ldr	r2, [r7, #4]
   b5570:	d91a      	bls.n	b55a8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b5572:	f100 0308 	add.w	r3, r0, #8
   b5576:	f023 0307 	bic.w	r3, r3, #7
        }
   b557a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b557c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5580:	1c41      	adds	r1, r0, #1
   b5582:	462b      	mov	r3, r5
   b5584:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5586:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5588:	f7ff f9ea 	bl	b4960 <vsnprintf>
        if (n > 0) {
   b558c:	1e02      	subs	r2, r0, #0
   b558e:	dd04      	ble.n	b559a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b5590:	6823      	ldr	r3, [r4, #0]
   b5592:	4669      	mov	r1, sp
   b5594:	68db      	ldr	r3, [r3, #12]
   b5596:	4620      	mov	r0, r4
   b5598:	4798      	blx	r3
   b559a:	46b5      	mov	sp, r6
}
   b559c:	3730      	adds	r7, #48	; 0x30
   b559e:	46bd      	mov	sp, r7
   b55a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b55a4:	b003      	add	sp, #12
   b55a6:	4770      	bx	lr
    } else if (n > 0) {
   b55a8:	2800      	cmp	r0, #0
   b55aa:	d0f7      	beq.n	b559c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b55ac:	6823      	ldr	r3, [r4, #0]
   b55ae:	4602      	mov	r2, r0
   b55b0:	68db      	ldr	r3, [r3, #12]
   b55b2:	f107 0110 	add.w	r1, r7, #16
   b55b6:	4620      	mov	r0, r4
   b55b8:	4798      	blx	r3
}
   b55ba:	e7ef      	b.n	b559c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b55bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b55bc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b55be:	4c09      	ldr	r4, [pc, #36]	; (b55e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b55c0:	7823      	ldrb	r3, [r4, #0]
   b55c2:	f3bf 8f5b 	dmb	ish
   b55c6:	07db      	lsls	r3, r3, #31
   b55c8:	d409      	bmi.n	b55de <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b55ca:	4620      	mov	r0, r4
   b55cc:	f7fe fd86 	bl	b40dc <__cxa_guard_acquire>
   b55d0:	b128      	cbz	r0, b55de <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b55d2:	4620      	mov	r0, r4
   b55d4:	f7fe fd87 	bl	b40e6 <__cxa_guard_release>
   b55d8:	4803      	ldr	r0, [pc, #12]	; (b55e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b55da:	f002 faf9 	bl	b7bd0 <atexit>
}
   b55de:	4803      	ldr	r0, [pc, #12]	; (b55ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b55e0:	bd10      	pop	{r4, pc}
   b55e2:	bf00      	nop
   b55e4:	2003e6e4 	.word	0x2003e6e4
   b55e8:	000b535b 	.word	0x000b535b
   b55ec:	2003e5b8 	.word	0x2003e5b8

000b55f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b55f0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b55f2:	4c09      	ldr	r4, [pc, #36]	; (b5618 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b55f4:	7823      	ldrb	r3, [r4, #0]
   b55f6:	f3bf 8f5b 	dmb	ish
   b55fa:	07db      	lsls	r3, r3, #31
   b55fc:	d409      	bmi.n	b5612 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b55fe:	4620      	mov	r0, r4
   b5600:	f7fe fd6c 	bl	b40dc <__cxa_guard_acquire>
   b5604:	b128      	cbz	r0, b5612 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5606:	4620      	mov	r0, r4
   b5608:	f7fe fd6d 	bl	b40e6 <__cxa_guard_release>
   b560c:	4803      	ldr	r0, [pc, #12]	; (b561c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b560e:	f002 fadf 	bl	b7bd0 <atexit>
    return &factory;
}
   b5612:	4803      	ldr	r0, [pc, #12]	; (b5620 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5614:	bd10      	pop	{r4, pc}
   b5616:	bf00      	nop
   b5618:	2003e6e8 	.word	0x2003e6e8
   b561c:	000b53c3 	.word	0x000b53c3
   b5620:	2003e5bc 	.word	0x2003e5bc

000b5624 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5624:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5626:	2500      	movs	r5, #0
   b5628:	4604      	mov	r4, r0
   b562a:	e9c0 5500 	strd	r5, r5, [r0]
   b562e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5632:	6085      	str	r5, [r0, #8]
   b5634:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5636:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b563a:	f7ff f80b 	bl	b4654 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b563e:	f7ff ffbd 	bl	b55bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5642:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5644:	f7ff ffd4 	bl	b55f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5648:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b564a:	6220      	str	r0, [r4, #32]
}
   b564c:	4620      	mov	r0, r4
   b564e:	bd38      	pop	{r3, r4, r5, pc}

000b5650 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5650:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5652:	4c0a      	ldr	r4, [pc, #40]	; (b567c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5654:	7823      	ldrb	r3, [r4, #0]
   b5656:	f3bf 8f5b 	dmb	ish
   b565a:	07db      	lsls	r3, r3, #31
   b565c:	d40c      	bmi.n	b5678 <_ZN5spark10LogManager8instanceEv+0x28>
   b565e:	4620      	mov	r0, r4
   b5660:	f7fe fd3c 	bl	b40dc <__cxa_guard_acquire>
   b5664:	b140      	cbz	r0, b5678 <_ZN5spark10LogManager8instanceEv+0x28>
   b5666:	4806      	ldr	r0, [pc, #24]	; (b5680 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5668:	f7ff ffdc 	bl	b5624 <_ZN5spark10LogManagerC1Ev>
   b566c:	4620      	mov	r0, r4
   b566e:	f7fe fd3a 	bl	b40e6 <__cxa_guard_release>
   b5672:	4804      	ldr	r0, [pc, #16]	; (b5684 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5674:	f002 faac 	bl	b7bd0 <atexit>
    return &mgr;
}
   b5678:	4801      	ldr	r0, [pc, #4]	; (b5680 <_ZN5spark10LogManager8instanceEv+0x30>)
   b567a:	bd10      	pop	{r4, pc}
   b567c:	2003e6e0 	.word	0x2003e6e0
   b5680:	2003e6f0 	.word	0x2003e6f0
   b5684:	000b5bc9 	.word	0x000b5bc9

000b5688 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5688:	4a02      	ldr	r2, [pc, #8]	; (b5694 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b568a:	4903      	ldr	r1, [pc, #12]	; (b5698 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b568c:	4803      	ldr	r0, [pc, #12]	; (b569c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b568e:	2300      	movs	r3, #0
   b5690:	f7ff b8c2 	b.w	b4818 <log_set_callbacks>
   b5694:	000b59ad 	.word	0x000b59ad
   b5698:	000b5939 	.word	0x000b5939
   b569c:	000b58b9 	.word	0x000b58b9

000b56a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b56a0:	2300      	movs	r3, #0
   b56a2:	461a      	mov	r2, r3
   b56a4:	4619      	mov	r1, r3
   b56a6:	4618      	mov	r0, r3
   b56a8:	f7ff b8b6 	b.w	b4818 <log_set_callbacks>

000b56ac <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b56ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b56ae:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b56b0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b56b2:	4668      	mov	r0, sp
   b56b4:	f7ff fe9e 	bl	b53f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b56b8:	466a      	mov	r2, sp
   b56ba:	4629      	mov	r1, r5
   b56bc:	4620      	mov	r0, r4
   b56be:	f7ff fb89 	bl	b4dd4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b56c2:	a801      	add	r0, sp, #4
   b56c4:	f7ff fa64 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56c8:	4620      	mov	r0, r4
   b56ca:	b003      	add	sp, #12
   b56cc:	bd30      	pop	{r4, r5, pc}

000b56ce <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b56ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b56d0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b56d2:	4604      	mov	r4, r0
   b56d4:	4668      	mov	r0, sp
   b56d6:	f7ff fe8d 	bl	b53f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b56da:	466a      	mov	r2, sp
   b56dc:	4629      	mov	r1, r5
   b56de:	4620      	mov	r0, r4
   b56e0:	f7ff fb54 	bl	b4d8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b56e4:	a801      	add	r0, sp, #4
   b56e6:	f7ff fa53 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b56ea:	4620      	mov	r0, r4
   b56ec:	b003      	add	sp, #12
   b56ee:	bd30      	pop	{r4, r5, pc}

000b56f0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b56f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b56f2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b56f4:	4604      	mov	r4, r0
   b56f6:	4668      	mov	r0, sp
   b56f8:	f7ff fe7c 	bl	b53f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b56fc:	466a      	mov	r2, sp
   b56fe:	4629      	mov	r1, r5
   b5700:	4620      	mov	r0, r4
   b5702:	f7ff faec 	bl	b4cde <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5706:	a801      	add	r0, sp, #4
   b5708:	f7ff fa42 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b570c:	4620      	mov	r0, r4
   b570e:	b003      	add	sp, #12
   b5710:	bd30      	pop	{r4, r5, pc}
	...

000b5714 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5714:	b570      	push	{r4, r5, r6, lr}
   b5716:	b08a      	sub	sp, #40	; 0x28
   b5718:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b571a:	4601      	mov	r1, r0
   b571c:	a804      	add	r0, sp, #16
   b571e:	f7ff ffc5 	bl	b56ac <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5722:	4e14      	ldr	r6, [pc, #80]	; (b5774 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5724:	a804      	add	r0, sp, #16
   b5726:	f7ff fb6d 	bl	b4e04 <_ZN5spark18JSONObjectIterator4nextEv>
   b572a:	b1e8      	cbz	r0, b5768 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b572c:	a904      	add	r1, sp, #16
   b572e:	4668      	mov	r0, sp
   b5730:	f7ff ffcd 	bl	b56ce <_ZNK5spark18JSONObjectIterator4nameEv>
   b5734:	9802      	ldr	r0, [sp, #8]
   b5736:	4631      	mov	r1, r6
   b5738:	f7ff fe3c 	bl	b53b4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b573c:	4604      	mov	r4, r0
   b573e:	b110      	cbz	r0, b5746 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5740:	1e2c      	subs	r4, r5, #0
   b5742:	bf18      	it	ne
   b5744:	2401      	movne	r4, #1
   b5746:	a801      	add	r0, sp, #4
   b5748:	f7ff fa22 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b574c:	2c00      	cmp	r4, #0
   b574e:	d0e9      	beq.n	b5724 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5750:	a904      	add	r1, sp, #16
   b5752:	4668      	mov	r0, sp
   b5754:	f7ff ffcc 	bl	b56f0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5758:	4668      	mov	r0, sp
   b575a:	f7ff faf6 	bl	b4d4a <_ZNK5spark9JSONValue5toIntEv>
   b575e:	6028      	str	r0, [r5, #0]
   b5760:	a801      	add	r0, sp, #4
   b5762:	f7ff fa15 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5766:	e7dd      	b.n	b5724 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5768:	a805      	add	r0, sp, #20
   b576a:	f7ff fa11 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b576e:	b00a      	add	sp, #40	; 0x28
   b5770:	bd70      	pop	{r4, r5, r6, pc}
   b5772:	bf00      	nop
   b5774:	000b812c 	.word	0x000b812c

000b5778 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5778:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b577a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b577c:	4620      	mov	r0, r4
   b577e:	4913      	ldr	r1, [pc, #76]	; (b57cc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5780:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5782:	f7fe fc4b 	bl	b401c <strcmp>
   b5786:	b950      	cbnz	r0, b579e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5788:	f7ff fc76 	bl	b5078 <_Z16_fetch_usbserialv>
   b578c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5790:	f7ff fc62 	bl	b5058 <_ZN9USBSerial5beginEl>
}
   b5794:	b003      	add	sp, #12
   b5796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b579a:	f7ff bc6d 	b.w	b5078 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b579e:	490c      	ldr	r1, [pc, #48]	; (b57d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b57a0:	4620      	mov	r0, r4
   b57a2:	f7fe fc3b 	bl	b401c <strcmp>
   b57a6:	b978      	cbnz	r0, b57c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b57a8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b57ac:	a901      	add	r1, sp, #4
   b57ae:	4628      	mov	r0, r5
        int baud = 9600;
   b57b0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b57b2:	f7ff ffaf 	bl	b5714 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b57b6:	f002 f8cd 	bl	b7954 <_Z22__fetch_global_Serial1v>
   b57ba:	9901      	ldr	r1, [sp, #4]
   b57bc:	f001 ffa6 	bl	b770c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b57c0:	f002 f8c8 	bl	b7954 <_Z22__fetch_global_Serial1v>
}
   b57c4:	b003      	add	sp, #12
   b57c6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b57c8:	2000      	movs	r0, #0
   b57ca:	e7fb      	b.n	b57c4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b57cc:	000b8131 	.word	0x000b8131
   b57d0:	000b8138 	.word	0x000b8138

000b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57d6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b57da:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b57de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b57e2:	42ae      	cmp	r6, r5
   b57e4:	d005      	beq.n	b57f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b57e6:	f105 0008 	add.w	r0, r5, #8
   b57ea:	f7ff fff3 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b57ee:	3514      	adds	r5, #20
   b57f0:	e7f7      	b.n	b57e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b57f2:	6820      	ldr	r0, [r4, #0]
   b57f4:	f7ff f8a4 	bl	b4940 <free>
}
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd70      	pop	{r4, r5, r6, pc}

000b57fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b57fc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b57fe:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5802:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5804:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5808:	42ae      	cmp	r6, r5
   b580a:	d004      	beq.n	b5816 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b580c:	4628      	mov	r0, r5
   b580e:	f001 ffd3 	bl	b77b8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5812:	3510      	adds	r5, #16
   b5814:	e7f8      	b.n	b5808 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5816:	6820      	ldr	r0, [r4, #0]
   b5818:	f7ff f892 	bl	b4940 <free>
}
   b581c:	4620      	mov	r0, r4
   b581e:	bd70      	pop	{r4, r5, r6, pc}

000b5820 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5820:	b510      	push	{r4, lr}
   b5822:	4604      	mov	r4, r0
   b5824:	300c      	adds	r0, #12
   b5826:	f7ff ffd5 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b582a:	4620      	mov	r0, r4
   b582c:	f7ff ffe6 	bl	b57fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5830:	4620      	mov	r0, r4
   b5832:	bd10      	pop	{r4, pc}

000b5834 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5834:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5836:	4b04      	ldr	r3, [pc, #16]	; (b5848 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5838:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b583a:	f840 3b04 	str.w	r3, [r0], #4
   b583e:	f7ff ffef 	bl	b5820 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5842:	4620      	mov	r0, r4
   b5844:	bd10      	pop	{r4, pc}
   b5846:	bf00      	nop
   b5848:	000b8018 	.word	0x000b8018

000b584c <_ZN5spark16StreamLogHandlerD0Ev>:
   b584c:	b510      	push	{r4, lr}
   b584e:	4604      	mov	r4, r0
   b5850:	f7ff fff0 	bl	b5834 <_ZN5spark16StreamLogHandlerD1Ev>
   b5854:	4620      	mov	r0, r4
   b5856:	2124      	movs	r1, #36	; 0x24
   b5858:	f7fe fc31 	bl	b40be <_ZdlPvj>
   b585c:	4620      	mov	r0, r4
   b585e:	bd10      	pop	{r4, pc}

000b5860 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5860:	b510      	push	{r4, lr}
   b5862:	4b03      	ldr	r3, [pc, #12]	; (b5870 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5864:	6003      	str	r3, [r0, #0]
   b5866:	4604      	mov	r4, r0
   b5868:	f7ff ffe4 	bl	b5834 <_ZN5spark16StreamLogHandlerD1Ev>
   b586c:	4620      	mov	r0, r4
   b586e:	bd10      	pop	{r4, pc}
   b5870:	000b81d8 	.word	0x000b81d8

000b5874 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5874:	b510      	push	{r4, lr}
   b5876:	4604      	mov	r4, r0
   b5878:	f7ff fff2 	bl	b5860 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b587c:	4620      	mov	r0, r4
   b587e:	2124      	movs	r1, #36	; 0x24
   b5880:	f7fe fc1d 	bl	b40be <_ZdlPvj>
   b5884:	4620      	mov	r0, r4
   b5886:	bd10      	pop	{r4, pc}

000b5888 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5888:	2200      	movs	r2, #0
   b588a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b588e:	b510      	push	{r4, lr}
        capacity_(0) {
   b5890:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5892:	680c      	ldr	r4, [r1, #0]
   b5894:	6004      	str	r4, [r0, #0]
   b5896:	684c      	ldr	r4, [r1, #4]
   b5898:	6044      	str	r4, [r0, #4]
   b589a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b589c:	600a      	str	r2, [r1, #0]
   b589e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b58a0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b58a2:	608a      	str	r2, [r1, #8]
}
   b58a4:	bd10      	pop	{r4, pc}

000b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b58a6:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b58a8:	6803      	ldr	r3, [r0, #0]
   b58aa:	4604      	mov	r4, r0
   b58ac:	6818      	ldr	r0, [r3, #0]
   b58ae:	f7fe fee9 	bl	b4684 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b58b2:	4620      	mov	r0, r4
   b58b4:	bd10      	pop	{r4, pc}
	...

000b58b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b58b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b58bc:	b087      	sub	sp, #28
   b58be:	4680      	mov	r8, r0
   b58c0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b58c2:	4b1c      	ldr	r3, [pc, #112]	; (b5934 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b58c4:	685b      	ldr	r3, [r3, #4]
   b58c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b58ca:	4689      	mov	r9, r1
   b58cc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b58ce:	b96b      	cbnz	r3, b58ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b58d0:	f7ff febe 	bl	b5650 <_ZN5spark10LogManager8instanceEv>
   b58d4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b58d6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b58da:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58dc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b58de:	f7ff fd67 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b58e2:	7b23      	ldrb	r3, [r4, #12]
   b58e4:	b12b      	cbz	r3, b58f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b58e6:	a805      	add	r0, sp, #20
   b58e8:	f7ff ffdd 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b58ec:	b007      	add	sp, #28
   b58ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b58f2:	2301      	movs	r3, #1
   b58f4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b58f6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b58fa:	fa5f f989 	uxtb.w	r9, r9
   b58fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5902:	45aa      	cmp	sl, r5
   b5904:	d012      	beq.n	b592c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5906:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b590a:	4631      	mov	r1, r6
   b590c:	1d38      	adds	r0, r7, #4
   b590e:	f7ff fdf3 	bl	b54f8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5912:	4581      	cmp	r9, r0
   b5914:	d3f5      	bcc.n	b5902 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5916:	683b      	ldr	r3, [r7, #0]
   b5918:	9a03      	ldr	r2, [sp, #12]
   b591a:	9200      	str	r2, [sp, #0]
   b591c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5920:	464a      	mov	r2, r9
   b5922:	4633      	mov	r3, r6
   b5924:	4641      	mov	r1, r8
   b5926:	4638      	mov	r0, r7
   b5928:	47d8      	blx	fp
   b592a:	e7ea      	b.n	b5902 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b592c:	2300      	movs	r3, #0
   b592e:	7323      	strb	r3, [r4, #12]
   b5930:	e7d9      	b.n	b58e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5932:	bf00      	nop
   b5934:	e000ed00 	.word	0xe000ed00

000b5938 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b593c:	469b      	mov	fp, r3
   b593e:	4b1a      	ldr	r3, [pc, #104]	; (b59a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5940:	685b      	ldr	r3, [r3, #4]
   b5942:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5946:	4680      	mov	r8, r0
   b5948:	4689      	mov	r9, r1
   b594a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b594c:	b96b      	cbnz	r3, b596a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b594e:	f7ff fe7f 	bl	b5650 <_ZN5spark10LogManager8instanceEv>
   b5952:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5954:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5958:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b595a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b595c:	f7ff fd28 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5960:	7b23      	ldrb	r3, [r4, #12]
   b5962:	b12b      	cbz	r3, b5970 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5964:	a801      	add	r0, sp, #4
   b5966:	f7ff ff9e 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b596a:	b003      	add	sp, #12
   b596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5970:	2301      	movs	r3, #1
   b5972:	7323      	strb	r3, [r4, #12]
   b5974:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5978:	b2f6      	uxtb	r6, r6
   b597a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b597e:	4555      	cmp	r5, sl
   b5980:	d00e      	beq.n	b59a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5982:	f855 7b04 	ldr.w	r7, [r5], #4
   b5986:	4659      	mov	r1, fp
   b5988:	1d38      	adds	r0, r7, #4
   b598a:	f7ff fdb5 	bl	b54f8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b598e:	4286      	cmp	r6, r0
   b5990:	d3f5      	bcc.n	b597e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5992:	683b      	ldr	r3, [r7, #0]
   b5994:	464a      	mov	r2, r9
   b5996:	68db      	ldr	r3, [r3, #12]
   b5998:	4641      	mov	r1, r8
   b599a:	4638      	mov	r0, r7
   b599c:	4798      	blx	r3
   b599e:	e7ee      	b.n	b597e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b59a0:	2300      	movs	r3, #0
   b59a2:	7323      	strb	r3, [r4, #12]
   b59a4:	e7de      	b.n	b5964 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b59a6:	bf00      	nop
   b59a8:	e000ed00 	.word	0xe000ed00

000b59ac <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b59ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b59b0:	4b16      	ldr	r3, [pc, #88]	; (b5a0c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b59b2:	685b      	ldr	r3, [r3, #4]
   b59b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b59b8:	4605      	mov	r5, r0
   b59ba:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b59bc:	bb1b      	cbnz	r3, b5a06 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b59be:	f7ff fe47 	bl	b5650 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b59c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b59c6:	4604      	mov	r4, r0
   b59c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59ca:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b59cc:	f7ff fcf0 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
   b59d0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b59d4:	2446      	movs	r4, #70	; 0x46
   b59d6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b59da:	45b0      	cmp	r8, r6
   b59dc:	d109      	bne.n	b59f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b59de:	a801      	add	r0, sp, #4
   b59e0:	f7ff ff61 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b59e4:	42a5      	cmp	r5, r4
   b59e6:	bfb4      	ite	lt
   b59e8:	2000      	movlt	r0, #0
   b59ea:	2001      	movge	r0, #1
}
   b59ec:	b002      	add	sp, #8
   b59ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b59f2:	f856 0b04 	ldr.w	r0, [r6], #4
   b59f6:	4639      	mov	r1, r7
   b59f8:	3004      	adds	r0, #4
   b59fa:	f7ff fd7d 	bl	b54f8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b59fe:	4284      	cmp	r4, r0
   b5a00:	bfa8      	it	ge
   b5a02:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5a04:	e7e9      	b.n	b59da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5a06:	2000      	movs	r0, #0
   b5a08:	e7f0      	b.n	b59ec <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5a0a:	bf00      	nop
   b5a0c:	e000ed00 	.word	0xe000ed00

000b5a10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5a12:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5a16:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5a18:	4604      	mov	r4, r0
   b5a1a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5a1c:	db0d      	blt.n	b5a3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5a1e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5a20:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5a22:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5a24:	dd04      	ble.n	b5a30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5a26:	00b9      	lsls	r1, r7, #2
   b5a28:	f7fe ff92 	bl	b4950 <realloc>
            if (!d) {
   b5a2c:	b918      	cbnz	r0, b5a36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5a30:	f7fe ff86 	bl	b4940 <free>
        T* d = nullptr;
   b5a34:	2000      	movs	r0, #0
        data_ = d;
   b5a36:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5a38:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5a3a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5a3c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5a3e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5a42:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a44:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5a48:	1d08      	adds	r0, r1, #4
   b5a4a:	f002 f8ed 	bl	b7c28 <memmove>
    new(p) T(std::move(value));
   b5a4e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5a52:	6863      	ldr	r3, [r4, #4]
   b5a54:	3301      	adds	r3, #1
   b5a56:	6063      	str	r3, [r4, #4]
    return true;
   b5a58:	2001      	movs	r0, #1
   b5a5a:	e7e8      	b.n	b5a2e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5a5c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5a5e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5a62:	4604      	mov	r4, r0
   b5a64:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a66:	9301      	str	r3, [sp, #4]
   b5a68:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5a6a:	f7ff fca1 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5a6e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5a72:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5a76:	4293      	cmp	r3, r2
   b5a78:	4619      	mov	r1, r3
   b5a7a:	d00b      	beq.n	b5a94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5a7c:	6809      	ldr	r1, [r1, #0]
   b5a7e:	42a9      	cmp	r1, r5
   b5a80:	f103 0304 	add.w	r3, r3, #4
   b5a84:	d1f7      	bne.n	b5a76 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5a86:	a801      	add	r0, sp, #4
   b5a88:	f7ff ff0d 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5a8c:	2500      	movs	r5, #0
}
   b5a8e:	4628      	mov	r0, r5
   b5a90:	b003      	add	sp, #12
   b5a92:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5a94:	4629      	mov	r1, r5
   b5a96:	4620      	mov	r0, r4
   b5a98:	f7ff ffba 	bl	b5a10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5a9c:	4605      	mov	r5, r0
   b5a9e:	2800      	cmp	r0, #0
   b5aa0:	d0f1      	beq.n	b5a86 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5aa2:	6863      	ldr	r3, [r4, #4]
   b5aa4:	2b01      	cmp	r3, #1
   b5aa6:	d101      	bne.n	b5aac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5aa8:	f7ff fdee 	bl	b5688 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5aac:	a801      	add	r0, sp, #4
   b5aae:	f7ff fefa 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5ab2:	e7ec      	b.n	b5a8e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5ab4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5ab4:	b570      	push	{r4, r5, r6, lr}
   b5ab6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5ab8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5abc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5abe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5ac2:	4282      	cmp	r2, r0
   b5ac4:	d00f      	beq.n	b5ae6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5ac6:	4601      	mov	r1, r0
            if (*p == value) {
   b5ac8:	681d      	ldr	r5, [r3, #0]
   b5aca:	f851 6b04 	ldr.w	r6, [r1], #4
   b5ace:	42ae      	cmp	r6, r5
   b5ad0:	d107      	bne.n	b5ae2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5ad2:	1a52      	subs	r2, r2, r1
   b5ad4:	f002 f8a8 	bl	b7c28 <memmove>
    --size_;
   b5ad8:	6863      	ldr	r3, [r4, #4]
   b5ada:	3b01      	subs	r3, #1
   b5adc:	6063      	str	r3, [r4, #4]
    return true;
   b5ade:	2001      	movs	r0, #1
}
   b5ae0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5ae2:	4608      	mov	r0, r1
   b5ae4:	e7ed      	b.n	b5ac2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5ae6:	2000      	movs	r0, #0
   b5ae8:	e7fa      	b.n	b5ae0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5aea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5aea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5aec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5af0:	4604      	mov	r4, r0
   b5af2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5af4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5af6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5af8:	f7ff fc5a 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5afc:	a901      	add	r1, sp, #4
   b5afe:	4620      	mov	r0, r4
   b5b00:	f7ff ffd8 	bl	b5ab4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5b04:	b118      	cbz	r0, b5b0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5b06:	6863      	ldr	r3, [r4, #4]
   b5b08:	b90b      	cbnz	r3, b5b0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5b0a:	f7ff fdc9 	bl	b56a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5b0e:	a803      	add	r0, sp, #12
   b5b10:	f7ff fec9 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5b14:	b004      	add	sp, #16
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5b18:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5b1a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5b1e:	2318      	movs	r3, #24
   b5b20:	4604      	mov	r4, r0
   b5b22:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5b26:	42ae      	cmp	r6, r5
   b5b28:	d015      	beq.n	b5b56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5b2a:	f105 0110 	add.w	r1, r5, #16
   b5b2e:	4620      	mov	r0, r4
   b5b30:	f7ff ffc0 	bl	b5ab4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5b34:	6863      	ldr	r3, [r4, #4]
   b5b36:	b90b      	cbnz	r3, b5b3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5b38:	f7ff fdb2 	bl	b56a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5b3c:	69e0      	ldr	r0, [r4, #28]
   b5b3e:	6929      	ldr	r1, [r5, #16]
   b5b40:	6803      	ldr	r3, [r0, #0]
   b5b42:	68db      	ldr	r3, [r3, #12]
   b5b44:	4798      	blx	r3
        if (h.stream) {
   b5b46:	6969      	ldr	r1, [r5, #20]
   b5b48:	b119      	cbz	r1, b5b52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5b4a:	6a20      	ldr	r0, [r4, #32]
   b5b4c:	6803      	ldr	r3, [r0, #0]
   b5b4e:	68db      	ldr	r3, [r3, #12]
   b5b50:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5b52:	3518      	adds	r5, #24
   b5b54:	e7e7      	b.n	b5b26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5b56:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5b5a:	2618      	movs	r6, #24
   b5b5c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b60:	42ae      	cmp	r6, r5
   b5b62:	d004      	beq.n	b5b6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5b64:	4628      	mov	r0, r5
   b5b66:	f001 fe27 	bl	b77b8 <_ZN6StringD1Ev>
   b5b6a:	3518      	adds	r5, #24
   b5b6c:	e7f8      	b.n	b5b60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5b6e:	2300      	movs	r3, #0
   b5b70:	6163      	str	r3, [r4, #20]
}
   b5b72:	bd70      	pop	{r4, r5, r6, pc}

000b5b74 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5b76:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5b78:	f7ff fd92 	bl	b56a0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5b7c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5b80:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5b82:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5b84:	f7ff fc14 	bl	b53b0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5b88:	4620      	mov	r0, r4
   b5b8a:	f7ff ffc5 	bl	b5b18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5b8e:	a801      	add	r0, sp, #4
   b5b90:	f7ff fe89 	bl	b58a6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5b94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5b96:	b108      	cbz	r0, b5b9c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5b98:	f7fe fd64 	bl	b4664 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5b9c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5ba0:	2618      	movs	r6, #24
   b5ba2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5ba6:	42ae      	cmp	r6, r5
   b5ba8:	d004      	beq.n	b5bb4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5baa:	4628      	mov	r0, r5
   b5bac:	f001 fe04 	bl	b77b8 <_ZN6StringD1Ev>
   b5bb0:	3518      	adds	r5, #24
   b5bb2:	e7f8      	b.n	b5ba6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5bb4:	6920      	ldr	r0, [r4, #16]
   b5bb6:	f7fe fec3 	bl	b4940 <free>
   b5bba:	6820      	ldr	r0, [r4, #0]
   b5bbc:	f7fe fec0 	bl	b4940 <free>
}
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	b002      	add	sp, #8
   b5bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5bc8 <__tcf_2>:
    static LogManager mgr;
   b5bc8:	4801      	ldr	r0, [pc, #4]	; (b5bd0 <__tcf_2+0x8>)
   b5bca:	f7ff bfd3 	b.w	b5b74 <_ZN5spark10LogManagerD1Ev>
   b5bce:	bf00      	nop
   b5bd0:	2003e6f0 	.word	0x2003e6f0

000b5bd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5bd4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bd8:	4604      	mov	r4, r0
   b5bda:	460d      	mov	r5, r1
   b5bdc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5bde:	d915      	bls.n	b5c0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5be0:	4290      	cmp	r0, r2
   b5be2:	d214      	bcs.n	b5c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5be4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5be8:	1a75      	subs	r5, r6, r1
   b5bea:	f1a1 0714 	sub.w	r7, r1, #20
   b5bee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5bf0:	42b7      	cmp	r7, r6
   b5bf2:	d01a      	beq.n	b5c2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5bf4:	b11c      	cbz	r4, b5bfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5bf6:	4631      	mov	r1, r6
   b5bf8:	4620      	mov	r0, r4
   b5bfa:	f7ff fc2d 	bl	b5458 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5bfe:	f106 0008 	add.w	r0, r6, #8
   b5c02:	f7ff fde7 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5c06:	3e14      	subs	r6, #20
   b5c08:	3c14      	subs	r4, #20
   b5c0a:	e7f1      	b.n	b5bf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5c0c:	d00d      	beq.n	b5c2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5c0e:	42b5      	cmp	r5, r6
   b5c10:	d00b      	beq.n	b5c2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5c12:	b11c      	cbz	r4, b5c1c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5c14:	4629      	mov	r1, r5
   b5c16:	4620      	mov	r0, r4
   b5c18:	f7ff fc1e 	bl	b5458 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5c1c:	f105 0008 	add.w	r0, r5, #8
   b5c20:	f7ff fdd8 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5c24:	3514      	adds	r5, #20
   b5c26:	3414      	adds	r4, #20
   b5c28:	e7f1      	b.n	b5c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5c2c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c30:	4604      	mov	r4, r0
   b5c32:	460d      	mov	r5, r1
   b5c34:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5c36:	d914      	bls.n	b5c62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5c38:	4290      	cmp	r0, r2
   b5c3a:	d213      	bcs.n	b5c64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5c3c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5c40:	1a75      	subs	r5, r6, r1
   b5c42:	f1a1 0710 	sub.w	r7, r1, #16
   b5c46:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5c48:	42b7      	cmp	r7, r6
   b5c4a:	d018      	beq.n	b5c7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5c4c:	b11c      	cbz	r4, b5c56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5c4e:	4631      	mov	r1, r6
   b5c50:	4620      	mov	r0, r4
   b5c52:	f001 fe2d 	bl	b78b0 <_ZN6StringC1EOS_>
                end->~T();
   b5c56:	4630      	mov	r0, r6
   b5c58:	f001 fdae 	bl	b77b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5c5c:	3e10      	subs	r6, #16
   b5c5e:	3c10      	subs	r4, #16
   b5c60:	e7f2      	b.n	b5c48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5c62:	d00c      	beq.n	b5c7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5c64:	42b5      	cmp	r5, r6
   b5c66:	d00a      	beq.n	b5c7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5c68:	b11c      	cbz	r4, b5c72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5c6a:	4629      	mov	r1, r5
   b5c6c:	4620      	mov	r0, r4
   b5c6e:	f001 fe1f 	bl	b78b0 <_ZN6StringC1EOS_>
                p->~T();
   b5c72:	4628      	mov	r0, r5
   b5c74:	f001 fda0 	bl	b77b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5c78:	3510      	adds	r5, #16
   b5c7a:	3410      	adds	r4, #16
   b5c7c:	e7f2      	b.n	b5c64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5c80:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5c82:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5c84:	4605      	mov	r5, r0
        if (n > 0) {
   b5c86:	dd11      	ble.n	b5cac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5c88:	0130      	lsls	r0, r6, #4
   b5c8a:	f7fe fe51 	bl	b4930 <malloc>
            if (!d) {
   b5c8e:	4604      	mov	r4, r0
   b5c90:	b158      	cbz	r0, b5caa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5c92:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5c96:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5c9a:	f7ff ffc7 	bl	b5c2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5c9e:	6828      	ldr	r0, [r5, #0]
   b5ca0:	f7fe fe4e 	bl	b4940 <free>
        data_ = d;
   b5ca4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5ca6:	60ae      	str	r6, [r5, #8]
        return true;
   b5ca8:	2001      	movs	r0, #1
    }
   b5caa:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5cac:	2400      	movs	r4, #0
   b5cae:	e7f6      	b.n	b5c9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cb4:	4690      	mov	r8, r2
   b5cb6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5cb8:	2300      	movs	r3, #0
   b5cba:	9103      	str	r1, [sp, #12]
    return size_;
   b5cbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5cc0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5cc2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5cc4:	4299      	cmp	r1, r3
        capacity_(0) {
   b5cc6:	e9c0 3300 	strd	r3, r3, [r0]
   b5cca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5cd2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5cd6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5cd8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5cda:	dc23      	bgt.n	b5d24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5cdc:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5ce0:	2314      	movs	r3, #20
   b5ce2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5ce6:	42af      	cmp	r7, r5
   b5ce8:	d03b      	beq.n	b5d62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5cea:	4629      	mov	r1, r5
   b5cec:	a80b      	add	r0, sp, #44	; 0x2c
   b5cee:	f001 fddf 	bl	b78b0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5cf2:	a90b      	add	r1, sp, #44	; 0x2c
   b5cf4:	a80f      	add	r0, sp, #60	; 0x3c
   b5cf6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5cf8:	f001 fdda 	bl	b78b0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cfc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5d00:	4299      	cmp	r1, r3
   b5d02:	da1b      	bge.n	b5d3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5d04:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5d08:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5d0c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5d10:	4631      	mov	r1, r6
   b5d12:	f106 0010 	add.w	r0, r6, #16
   b5d16:	f7ff ff89 	bl	b5c2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5d1a:	b9ee      	cbnz	r6, b5d58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5d1e:	3301      	adds	r3, #1
   b5d20:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5d22:	e011      	b.n	b5d48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5d24:	a808      	add	r0, sp, #32
   b5d26:	f7ff ffab 	bl	b5c80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5d2a:	2800      	cmp	r0, #0
   b5d2c:	d1d6      	bne.n	b5cdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5d2e:	a808      	add	r0, sp, #32
   b5d30:	f7ff fd64 	bl	b57fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5d34:	4620      	mov	r0, r4
   b5d36:	b015      	add	sp, #84	; 0x54
   b5d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d3c:	3101      	adds	r1, #1
   b5d3e:	a808      	add	r0, sp, #32
   b5d40:	f7ff ff9e 	bl	b5c80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5d44:	2800      	cmp	r0, #0
   b5d46:	d1dd      	bne.n	b5d04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5d48:	a80f      	add	r0, sp, #60	; 0x3c
   b5d4a:	f001 fd35 	bl	b77b8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5d4e:	a80b      	add	r0, sp, #44	; 0x2c
   b5d50:	f001 fd32 	bl	b77b8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5d54:	3514      	adds	r5, #20
   b5d56:	e7c6      	b.n	b5ce6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5d58:	a90f      	add	r1, sp, #60	; 0x3c
   b5d5a:	4630      	mov	r0, r6
   b5d5c:	f001 fda8 	bl	b78b0 <_ZN6StringC1EOS_>
   b5d60:	e7dc      	b.n	b5d1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5d62:	2600      	movs	r6, #0
   b5d64:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5d68:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5d6a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5d72:	429e      	cmp	r6, r3
   b5d74:	da7c      	bge.n	b5e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5d76:	0133      	lsls	r3, r6, #4
   b5d78:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5d7a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5d7c:	b90b      	cbnz	r3, b5d82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5d7e:	3601      	adds	r6, #1
   b5d80:	e7f5      	b.n	b5d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5d82:	2300      	movs	r3, #0
   b5d84:	9307      	str	r3, [sp, #28]
   b5d86:	fb09 f306 	mul.w	r3, r9, r6
   b5d8a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5d8c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5d8e:	a907      	add	r1, sp, #28
   b5d90:	a806      	add	r0, sp, #24
   b5d92:	f7ff fae6 	bl	b5362 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5d96:	4682      	mov	sl, r0
   b5d98:	2800      	cmp	r0, #0
   b5d9a:	d0f0      	beq.n	b5d7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5d9c:	f04f 0300 	mov.w	r3, #0
   b5da0:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5da4:	4601      	mov	r1, r0
   b5da6:	9a07      	ldr	r2, [sp, #28]
   b5da8:	f10d 0317 	add.w	r3, sp, #23
   b5dac:	4628      	mov	r0, r5
   b5dae:	f7ff fb67 	bl	b5480 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5db2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5db6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5db8:	2f00      	cmp	r7, #0
   b5dba:	d14a      	bne.n	b5e52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5dbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5dc0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5dc4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5dcc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5dd0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5dd4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5dd6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5dda:	4293      	cmp	r3, r2
   b5ddc:	db17      	blt.n	b5e0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5dde:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5de2:	f1ba 0f00 	cmp.w	sl, #0
   b5de6:	dd30      	ble.n	b5e4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5de8:	fb09 f00a 	mul.w	r0, r9, sl
   b5dec:	f7fe fda0 	bl	b4930 <malloc>
            if (!d) {
   b5df0:	4683      	mov	fp, r0
   b5df2:	b360      	cbz	r0, b5e4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5df4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5df8:	fb09 1202 	mla	r2, r9, r2, r1
   b5dfc:	f7ff feea 	bl	b5bd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5e00:	6828      	ldr	r0, [r5, #0]
   b5e02:	f7fe fd9d 	bl	b4940 <free>
        data_ = d;
   b5e06:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5e0a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5e0e:	682b      	ldr	r3, [r5, #0]
   b5e10:	9a01      	ldr	r2, [sp, #4]
   b5e12:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5e16:	686a      	ldr	r2, [r5, #4]
   b5e18:	4651      	mov	r1, sl
   b5e1a:	fb09 3202 	mla	r2, r9, r2, r3
   b5e1e:	f10a 0014 	add.w	r0, sl, #20
   b5e22:	f7ff fed7 	bl	b5bd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5e26:	f1ba 0f00 	cmp.w	sl, #0
   b5e2a:	d003      	beq.n	b5e34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5e2c:	a90f      	add	r1, sp, #60	; 0x3c
   b5e2e:	4650      	mov	r0, sl
   b5e30:	f7ff fb12 	bl	b5458 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5e34:	686b      	ldr	r3, [r5, #4]
   b5e36:	3301      	adds	r3, #1
   b5e38:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5e3a:	a811      	add	r0, sp, #68	; 0x44
   b5e3c:	f7ff fcca 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5e40:	b13f      	cbz	r7, b5e52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5e42:	a80b      	add	r0, sp, #44	; 0x2c
   b5e44:	f7ff fcc6 	bl	b57d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5e48:	e771      	b.n	b5d2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5e4a:	46bb      	mov	fp, r7
   b5e4c:	e7d8      	b.n	b5e00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5e4e:	2701      	movs	r7, #1
   b5e50:	e7f3      	b.n	b5e3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5e52:	9b01      	ldr	r3, [sp, #4]
   b5e54:	682d      	ldr	r5, [r5, #0]
   b5e56:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5e5a:	9b06      	ldr	r3, [sp, #24]
   b5e5c:	781b      	ldrb	r3, [r3, #0]
   b5e5e:	b92b      	cbnz	r3, b5e6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5e60:	f8d8 3000 	ldr.w	r3, [r8]
   b5e64:	9a02      	ldr	r2, [sp, #8]
   b5e66:	4413      	add	r3, r2
   b5e68:	7c1b      	ldrb	r3, [r3, #16]
   b5e6a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5e6c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5e6e:	e78e      	b.n	b5d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e70:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5e72:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e74:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5e76:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e78:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e7a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5e7e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e80:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5e82:	60a2      	str	r2, [r4, #8]
   b5e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5e86:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e88:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5e8a:	60e2      	str	r2, [r4, #12]
   b5e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5e8e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5e90:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5e92:	6122      	str	r2, [r4, #16]
   b5e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5e96:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5e98:	9b03      	ldr	r3, [sp, #12]
   b5e9a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5e9c:	6162      	str	r2, [r4, #20]
   b5e9e:	7623      	strb	r3, [r4, #24]
   b5ea0:	e7cf      	b.n	b5e42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5ea4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ea6:	4604      	mov	r4, r0
   b5ea8:	b087      	sub	sp, #28
   b5eaa:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5eac:	4626      	mov	r6, r4
        stream_(&stream) {
   b5eae:	4619      	mov	r1, r3
   b5eb0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5eb2:	4617      	mov	r7, r2
        stream_(&stream) {
   b5eb4:	f7fe fa3d 	bl	b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5eb8:	4b0b      	ldr	r3, [pc, #44]	; (b5ee8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5eba:	f846 3b04 	str.w	r3, [r6], #4
   b5ebe:	4669      	mov	r1, sp
   b5ec0:	a803      	add	r0, sp, #12
   b5ec2:	f7fe fa36 	bl	b4332 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5ec6:	aa03      	add	r2, sp, #12
   b5ec8:	4639      	mov	r1, r7
   b5eca:	4630      	mov	r0, r6
   b5ecc:	f7ff fef0 	bl	b5cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5ed0:	a803      	add	r0, sp, #12
   b5ed2:	f7fe f9ed 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5ed6:	4668      	mov	r0, sp
   b5ed8:	f7fe f9ea 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5edc:	4b03      	ldr	r3, [pc, #12]	; (b5eec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5ede:	6023      	str	r3, [r4, #0]
}
   b5ee0:	4620      	mov	r0, r4
        stream_(&stream) {
   b5ee2:	6225      	str	r5, [r4, #32]
}
   b5ee4:	b007      	add	sp, #28
   b5ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5ee8:	000b8018 	.word	0x000b8018
   b5eec:	000b81c0 	.word	0x000b81c0

000b5ef0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ef2:	460f      	mov	r7, r1
   b5ef4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5ef6:	491d      	ldr	r1, [pc, #116]	; (b5f6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5ef8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5efa:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5efc:	4616      	mov	r6, r2
   b5efe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5f00:	f7fe f88c 	bl	b401c <strcmp>
   b5f04:	b9c0      	cbnz	r0, b5f38 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5f06:	b1a4      	cbz	r4, b5f32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5f08:	4629      	mov	r1, r5
   b5f0a:	a801      	add	r0, sp, #4
   b5f0c:	f7ff fcbc 	bl	b5888 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5f10:	4917      	ldr	r1, [pc, #92]	; (b5f70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5f12:	2024      	movs	r0, #36	; 0x24
   b5f14:	f001 fd42 	bl	b799c <_ZnwjRKSt9nothrow_t>
   b5f18:	4605      	mov	r5, r0
   b5f1a:	b130      	cbz	r0, b5f2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5f1c:	ab01      	add	r3, sp, #4
   b5f1e:	4632      	mov	r2, r6
   b5f20:	4621      	mov	r1, r4
   b5f22:	f7ff ffbf 	bl	b5ea4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5f26:	4b13      	ldr	r3, [pc, #76]	; (b5f74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5f28:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5f2a:	a801      	add	r0, sp, #4
   b5f2c:	f7fe f9c0 	bl	b42b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5f30:	462c      	mov	r4, r5
}
   b5f32:	4620      	mov	r0, r4
   b5f34:	b005      	add	sp, #20
   b5f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5f38:	490f      	ldr	r1, [pc, #60]	; (b5f78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5f3a:	4638      	mov	r0, r7
   b5f3c:	f7fe f86e 	bl	b401c <strcmp>
   b5f40:	b990      	cbnz	r0, b5f68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5f42:	2c00      	cmp	r4, #0
   b5f44:	d0f5      	beq.n	b5f32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5f46:	4629      	mov	r1, r5
   b5f48:	a801      	add	r0, sp, #4
   b5f4a:	f7ff fc9d 	bl	b5888 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5f4e:	4908      	ldr	r1, [pc, #32]	; (b5f70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5f50:	2024      	movs	r0, #36	; 0x24
   b5f52:	f001 fd23 	bl	b799c <_ZnwjRKSt9nothrow_t>
   b5f56:	4605      	mov	r5, r0
   b5f58:	2800      	cmp	r0, #0
   b5f5a:	d0e6      	beq.n	b5f2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5f5c:	ab01      	add	r3, sp, #4
   b5f5e:	4632      	mov	r2, r6
   b5f60:	4621      	mov	r1, r4
   b5f62:	f7ff ff9f 	bl	b5ea4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5f66:	e7e0      	b.n	b5f2a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5f68:	2400      	movs	r4, #0
   b5f6a:	e7e2      	b.n	b5f32 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5f6c:	000b8140 	.word	0x000b8140
   b5f70:	000b8420 	.word	0x000b8420
   b5f74:	000b81d8 	.word	0x000b81d8
   b5f78:	000b8144 	.word	0x000b8144

000b5f7c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5f7c:	4b01      	ldr	r3, [pc, #4]	; (b5f84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5f7e:	4a02      	ldr	r2, [pc, #8]	; (b5f88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5f80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5f82:	4770      	bx	lr
   b5f84:	2003e6ec 	.word	0x2003e6ec
   b5f88:	000b8155 	.word	0x000b8155

000b5f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f90:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5f92:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5f96:	4604      	mov	r4, r0
   b5f98:	460e      	mov	r6, r1
   b5f9a:	4617      	mov	r7, r2
   b5f9c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5f9e:	f7ff f86b 	bl	b5078 <_Z16_fetch_usbserialv>
   b5fa2:	4581      	cmp	r9, r0
   b5fa4:	d04c      	beq.n	b6040 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5fa6:	792b      	ldrb	r3, [r5, #4]
   b5fa8:	0719      	lsls	r1, r3, #28
   b5faa:	d504      	bpl.n	b5fb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5fac:	696a      	ldr	r2, [r5, #20]
   b5fae:	4954      	ldr	r1, [pc, #336]	; (b6100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	f7ff faca 	bl	b554a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5fb6:	f1b8 0f00 	cmp.w	r8, #0
   b5fba:	d00d      	beq.n	b5fd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5fbc:	215b      	movs	r1, #91	; 0x5b
   b5fbe:	4620      	mov	r0, r4
   b5fc0:	f7ff fa3e 	bl	b5440 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5fc4:	4641      	mov	r1, r8
   b5fc6:	4620      	mov	r0, r4
   b5fc8:	f7ff fa2b 	bl	b5422 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5fcc:	6823      	ldr	r3, [r4, #0]
   b5fce:	494d      	ldr	r1, [pc, #308]	; (b6104 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5fd0:	68db      	ldr	r3, [r3, #12]
   b5fd2:	2202      	movs	r2, #2
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	4798      	blx	r3
    if (attr.has_file) {
   b5fd8:	792b      	ldrb	r3, [r5, #4]
   b5fda:	07da      	lsls	r2, r3, #31
   b5fdc:	d523      	bpl.n	b6026 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5fde:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5fe2:	212f      	movs	r1, #47	; 0x2f
   b5fe4:	4640      	mov	r0, r8
   b5fe6:	f001 feae 	bl	b7d46 <strrchr>
    if (s1) {
   b5fea:	b108      	cbz	r0, b5ff0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5fec:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5ff0:	4641      	mov	r1, r8
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f7ff fa15 	bl	b5422 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5ff8:	792b      	ldrb	r3, [r5, #4]
   b5ffa:	079b      	lsls	r3, r3, #30
   b5ffc:	d508      	bpl.n	b6010 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5ffe:	213a      	movs	r1, #58	; 0x3a
   b6000:	4620      	mov	r0, r4
   b6002:	f7ff fa1d 	bl	b5440 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6006:	68ea      	ldr	r2, [r5, #12]
   b6008:	493f      	ldr	r1, [pc, #252]	; (b6108 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b600a:	4620      	mov	r0, r4
   b600c:	f7ff fa9d 	bl	b554a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6010:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6012:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6014:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6018:	68db      	ldr	r3, [r3, #12]
   b601a:	bf14      	ite	ne
   b601c:	493b      	ldrne	r1, [pc, #236]	; (b610c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b601e:	493c      	ldreq	r1, [pc, #240]	; (b6110 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6020:	2202      	movs	r2, #2
            write(": ", 2);
   b6022:	4620      	mov	r0, r4
   b6024:	4798      	blx	r3
    if (attr.has_function) {
   b6026:	792b      	ldrb	r3, [r5, #4]
   b6028:	0758      	lsls	r0, r3, #29
   b602a:	d51d      	bpl.n	b6068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b602c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b602e:	460b      	mov	r3, r1
   b6030:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6032:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6036:	b160      	cbz	r0, b6052 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6038:	2820      	cmp	r0, #32
   b603a:	d108      	bne.n	b604e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b603c:	4619      	mov	r1, r3
   b603e:	e7f7      	b.n	b6030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6040:	4834      	ldr	r0, [pc, #208]	; (b6114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6042:	f7fe fcec 	bl	b4a1e <_ZN5spark12NetworkClass9listeningEv>
   b6046:	2800      	cmp	r0, #0
   b6048:	d0ad      	beq.n	b5fa6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b604a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b604e:	2828      	cmp	r0, #40	; 0x28
   b6050:	d1ee      	bne.n	b6030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6052:	6823      	ldr	r3, [r4, #0]
   b6054:	1a52      	subs	r2, r2, r1
   b6056:	68db      	ldr	r3, [r3, #12]
   b6058:	4620      	mov	r0, r4
   b605a:	4798      	blx	r3
        write("(): ", 4);
   b605c:	6823      	ldr	r3, [r4, #0]
   b605e:	492e      	ldr	r1, [pc, #184]	; (b6118 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6060:	68db      	ldr	r3, [r3, #12]
   b6062:	2204      	movs	r2, #4
   b6064:	4620      	mov	r0, r4
   b6066:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6068:	2100      	movs	r1, #0
   b606a:	4638      	mov	r0, r7
   b606c:	f7fe fbcc 	bl	b4808 <log_level_name>
   b6070:	4601      	mov	r1, r0
    write(s);
   b6072:	4620      	mov	r0, r4
   b6074:	f7ff f9d5 	bl	b5422 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6078:	6823      	ldr	r3, [r4, #0]
   b607a:	4925      	ldr	r1, [pc, #148]	; (b6110 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b607c:	68db      	ldr	r3, [r3, #12]
   b607e:	2202      	movs	r2, #2
   b6080:	4620      	mov	r0, r4
   b6082:	4798      	blx	r3
    if (msg) {
   b6084:	b11e      	cbz	r6, b608e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6086:	4631      	mov	r1, r6
   b6088:	4620      	mov	r0, r4
   b608a:	f7ff f9ca 	bl	b5422 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b608e:	792b      	ldrb	r3, [r5, #4]
   b6090:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6094:	d02c      	beq.n	b60f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6096:	6823      	ldr	r3, [r4, #0]
   b6098:	4920      	ldr	r1, [pc, #128]	; (b611c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b609a:	68db      	ldr	r3, [r3, #12]
   b609c:	2202      	movs	r2, #2
   b609e:	4620      	mov	r0, r4
   b60a0:	4798      	blx	r3
        if (attr.has_code) {
   b60a2:	792b      	ldrb	r3, [r5, #4]
   b60a4:	06d9      	lsls	r1, r3, #27
   b60a6:	d50a      	bpl.n	b60be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b60a8:	6823      	ldr	r3, [r4, #0]
   b60aa:	491d      	ldr	r1, [pc, #116]	; (b6120 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b60ac:	68db      	ldr	r3, [r3, #12]
   b60ae:	2207      	movs	r2, #7
   b60b0:	4620      	mov	r0, r4
   b60b2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b60b4:	69aa      	ldr	r2, [r5, #24]
   b60b6:	491b      	ldr	r1, [pc, #108]	; (b6124 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b60b8:	4620      	mov	r0, r4
   b60ba:	f7ff fa46 	bl	b554a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b60be:	792b      	ldrb	r3, [r5, #4]
   b60c0:	069a      	lsls	r2, r3, #26
   b60c2:	d511      	bpl.n	b60e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b60c4:	06db      	lsls	r3, r3, #27
   b60c6:	d505      	bpl.n	b60d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b60c8:	6823      	ldr	r3, [r4, #0]
   b60ca:	4910      	ldr	r1, [pc, #64]	; (b610c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b60cc:	68db      	ldr	r3, [r3, #12]
   b60ce:	2202      	movs	r2, #2
   b60d0:	4620      	mov	r0, r4
   b60d2:	4798      	blx	r3
            write("details = ", 10);
   b60d4:	6823      	ldr	r3, [r4, #0]
   b60d6:	4914      	ldr	r1, [pc, #80]	; (b6128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b60d8:	68db      	ldr	r3, [r3, #12]
   b60da:	4620      	mov	r0, r4
   b60dc:	220a      	movs	r2, #10
   b60de:	4798      	blx	r3
            write(attr.details);
   b60e0:	69e9      	ldr	r1, [r5, #28]
   b60e2:	4620      	mov	r0, r4
   b60e4:	f7ff f99d 	bl	b5422 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b60e8:	215d      	movs	r1, #93	; 0x5d
   b60ea:	4620      	mov	r0, r4
   b60ec:	f7ff f9a8 	bl	b5440 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b60f0:	6823      	ldr	r3, [r4, #0]
   b60f2:	490e      	ldr	r1, [pc, #56]	; (b612c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b60f4:	68db      	ldr	r3, [r3, #12]
   b60f6:	4620      	mov	r0, r4
   b60f8:	2202      	movs	r2, #2
}
   b60fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b60fe:	4718      	bx	r3
   b6100:	000b8159 	.word	0x000b8159
   b6104:	000b8160 	.word	0x000b8160
   b6108:	000b7f95 	.word	0x000b7f95
   b610c:	000b8163 	.word	0x000b8163
   b6110:	000b8168 	.word	0x000b8168
   b6114:	2003e69c 	.word	0x2003e69c
   b6118:	000b8166 	.word	0x000b8166
   b611c:	000b816b 	.word	0x000b816b
   b6120:	000b816e 	.word	0x000b816e
   b6124:	000b8176 	.word	0x000b8176
   b6128:	000b8179 	.word	0x000b8179
   b612c:	000b8184 	.word	0x000b8184

000b6130 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6134:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6136:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6138:	460d      	mov	r5, r1
   b613a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b613c:	f7fe ff9c 	bl	b5078 <_Z16_fetch_usbserialv>
   b6140:	4287      	cmp	r7, r0
   b6142:	d007      	beq.n	b6154 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6144:	6a20      	ldr	r0, [r4, #32]
   b6146:	6803      	ldr	r3, [r0, #0]
   b6148:	4632      	mov	r2, r6
   b614a:	4629      	mov	r1, r5
   b614c:	68db      	ldr	r3, [r3, #12]
}
   b614e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6152:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6154:	4803      	ldr	r0, [pc, #12]	; (b6164 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6156:	f7fe fc62 	bl	b4a1e <_ZN5spark12NetworkClass9listeningEv>
   b615a:	2800      	cmp	r0, #0
   b615c:	d0f2      	beq.n	b6144 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6162:	bf00      	nop
   b6164:	2003e69c 	.word	0x2003e69c

000b6168 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b616c:	b085      	sub	sp, #20
    return stream_;
   b616e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6172:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6174:	4605      	mov	r5, r0
   b6176:	460f      	mov	r7, r1
   b6178:	4690      	mov	r8, r2
   b617a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b617c:	f7fe ff7c 	bl	b5078 <_Z16_fetch_usbserialv>
   b6180:	4581      	cmp	r9, r0
   b6182:	d105      	bne.n	b6190 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6184:	4849      	ldr	r0, [pc, #292]	; (b62ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6186:	f7fe fc4a 	bl	b4a1e <_ZN5spark12NetworkClass9listeningEv>
   b618a:	2800      	cmp	r0, #0
   b618c:	f040 808a 	bne.w	b62a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6190:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6192:	4a47      	ldr	r2, [pc, #284]	; (b62b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6194:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6196:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b619a:	a801      	add	r0, sp, #4
        strm_(stream) {
   b619c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b619e:	f88d 9008 	strb.w	r9, [sp, #8]
   b61a2:	f7fe fe58 	bl	b4e56 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b61a6:	4649      	mov	r1, r9
   b61a8:	4640      	mov	r0, r8
   b61aa:	f7fe fb2d 	bl	b4808 <log_level_name>
    json.name("l", 1).value(s);
   b61ae:	4941      	ldr	r1, [pc, #260]	; (b62b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b61b0:	4680      	mov	r8, r0
   b61b2:	2201      	movs	r2, #1
   b61b4:	a801      	add	r0, sp, #4
   b61b6:	f7fe fedd 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b61ba:	4641      	mov	r1, r8
   b61bc:	f7ff f923 	bl	b5406 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b61c0:	b13f      	cbz	r7, b61d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b61c2:	493d      	ldr	r1, [pc, #244]	; (b62b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b61c4:	2201      	movs	r2, #1
   b61c6:	a801      	add	r0, sp, #4
   b61c8:	f7fe fed4 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b61cc:	4639      	mov	r1, r7
   b61ce:	f7ff f91a 	bl	b5406 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b61d2:	b13e      	cbz	r6, b61e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b61d4:	4939      	ldr	r1, [pc, #228]	; (b62bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b61d6:	2201      	movs	r2, #1
   b61d8:	a801      	add	r0, sp, #4
   b61da:	f7fe fecb 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b61de:	4631      	mov	r1, r6
   b61e0:	f7ff f911 	bl	b5406 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b61e4:	7923      	ldrb	r3, [r4, #4]
   b61e6:	07df      	lsls	r7, r3, #31
   b61e8:	d50e      	bpl.n	b6208 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b61ea:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b61ec:	212f      	movs	r1, #47	; 0x2f
   b61ee:	4630      	mov	r0, r6
   b61f0:	f001 fda9 	bl	b7d46 <strrchr>
    if (s1) {
   b61f4:	b100      	cbz	r0, b61f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b61f6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b61f8:	4931      	ldr	r1, [pc, #196]	; (b62c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b61fa:	2201      	movs	r2, #1
   b61fc:	a801      	add	r0, sp, #4
   b61fe:	f7fe feb9 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b6202:	4631      	mov	r1, r6
   b6204:	f7ff f8ff 	bl	b5406 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6208:	7923      	ldrb	r3, [r4, #4]
   b620a:	079e      	lsls	r6, r3, #30
   b620c:	d507      	bpl.n	b621e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b620e:	492d      	ldr	r1, [pc, #180]	; (b62c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6210:	2202      	movs	r2, #2
   b6212:	a801      	add	r0, sp, #4
   b6214:	f7fe feae 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b6218:	68e1      	ldr	r1, [r4, #12]
   b621a:	f7fe fe29 	bl	b4e70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b621e:	7923      	ldrb	r3, [r4, #4]
   b6220:	0758      	lsls	r0, r3, #29
   b6222:	d514      	bpl.n	b624e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6224:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6226:	4633      	mov	r3, r6
   b6228:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b622a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b622e:	b12a      	cbz	r2, b623c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6230:	2a20      	cmp	r2, #32
   b6232:	d101      	bne.n	b6238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6234:	461e      	mov	r6, r3
   b6236:	e7f7      	b.n	b6228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6238:	2a28      	cmp	r2, #40	; 0x28
   b623a:	d1f5      	bne.n	b6228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b623c:	4922      	ldr	r1, [pc, #136]	; (b62c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b623e:	2202      	movs	r2, #2
   b6240:	a801      	add	r0, sp, #4
   b6242:	f7fe fe97 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b6246:	1bba      	subs	r2, r7, r6
   b6248:	4631      	mov	r1, r6
   b624a:	f7fe fea3 	bl	b4f94 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b624e:	7923      	ldrb	r3, [r4, #4]
   b6250:	0719      	lsls	r1, r3, #28
   b6252:	d507      	bpl.n	b6264 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6254:	491d      	ldr	r1, [pc, #116]	; (b62cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6256:	2201      	movs	r2, #1
   b6258:	a801      	add	r0, sp, #4
   b625a:	f7fe fe8b 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b625e:	6961      	ldr	r1, [r4, #20]
   b6260:	f7fe fe18 	bl	b4e94 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6264:	7923      	ldrb	r3, [r4, #4]
   b6266:	06da      	lsls	r2, r3, #27
   b6268:	d508      	bpl.n	b627c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b626a:	2204      	movs	r2, #4
   b626c:	4918      	ldr	r1, [pc, #96]	; (b62d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b626e:	eb0d 0002 	add.w	r0, sp, r2
   b6272:	f7fe fe7f 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b6276:	69a1      	ldr	r1, [r4, #24]
   b6278:	f7fe fdfa 	bl	b4e70 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b627c:	7923      	ldrb	r3, [r4, #4]
   b627e:	069b      	lsls	r3, r3, #26
   b6280:	d507      	bpl.n	b6292 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6282:	4914      	ldr	r1, [pc, #80]	; (b62d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6284:	2206      	movs	r2, #6
   b6286:	a801      	add	r0, sp, #4
   b6288:	f7fe fe74 	bl	b4f74 <_ZN5spark10JSONWriter4nameEPKcj>
   b628c:	69e1      	ldr	r1, [r4, #28]
   b628e:	f7ff f8ba 	bl	b5406 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6292:	a801      	add	r0, sp, #4
   b6294:	f7fe fdc9 	bl	b4e2a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6298:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b629a:	490f      	ldr	r1, [pc, #60]	; (b62d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b629c:	6803      	ldr	r3, [r0, #0]
   b629e:	2202      	movs	r2, #2
   b62a0:	68db      	ldr	r3, [r3, #12]
   b62a2:	4798      	blx	r3
}
   b62a4:	b005      	add	sp, #20
   b62a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b62aa:	bf00      	nop
   b62ac:	2003e69c 	.word	0x2003e69c
   b62b0:	000b81a8 	.word	0x000b81a8
   b62b4:	000b8136 	.word	0x000b8136
   b62b8:	000b8187 	.word	0x000b8187
   b62bc:	000b85a7 	.word	0x000b85a7
   b62c0:	000b7fe0 	.word	0x000b7fe0
   b62c4:	000b8189 	.word	0x000b8189
   b62c8:	000b818c 	.word	0x000b818c
   b62cc:	000b818f 	.word	0x000b818f
   b62d0:	000b8191 	.word	0x000b8191
   b62d4:	000b8196 	.word	0x000b8196
   b62d8:	000b8184 	.word	0x000b8184

000b62dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b62dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62de:	4606      	mov	r6, r0
   b62e0:	460d      	mov	r5, r1
  size_t n = 0;
   b62e2:	188f      	adds	r7, r1, r2
   b62e4:	2400      	movs	r4, #0
  while (size--) {
   b62e6:	42bd      	cmp	r5, r7
   b62e8:	d00c      	beq.n	b6304 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b62ea:	6833      	ldr	r3, [r6, #0]
   b62ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   b62f0:	689b      	ldr	r3, [r3, #8]
   b62f2:	4630      	mov	r0, r6
   b62f4:	4798      	blx	r3
     if (chunk>=0)
   b62f6:	1e03      	subs	r3, r0, #0
   b62f8:	db01      	blt.n	b62fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b62fa:	441c      	add	r4, r3
  while (size--) {
   b62fc:	e7f3      	b.n	b62e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b62fe:	2c00      	cmp	r4, #0
   b6300:	bf08      	it	eq
   b6302:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6304:	4620      	mov	r0, r4
   b6306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6308 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6308:	b513      	push	{r0, r1, r4, lr}
   b630a:	4604      	mov	r4, r0
    }
   b630c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b630e:	b159      	cbz	r1, b6328 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6310:	9101      	str	r1, [sp, #4]
   b6312:	f7fd fe8d 	bl	b4030 <strlen>
   b6316:	6823      	ldr	r3, [r4, #0]
   b6318:	9901      	ldr	r1, [sp, #4]
   b631a:	68db      	ldr	r3, [r3, #12]
   b631c:	4602      	mov	r2, r0
   b631e:	4620      	mov	r0, r4
    }
   b6320:	b002      	add	sp, #8
   b6322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6326:	4718      	bx	r3
    }
   b6328:	b002      	add	sp, #8
   b632a:	bd10      	pop	{r4, pc}

000b632c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b632c:	6803      	ldr	r3, [r0, #0]
   b632e:	689b      	ldr	r3, [r3, #8]
   b6330:	4718      	bx	r3

000b6332 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6332:	b530      	push	{r4, r5, lr}
   b6334:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6336:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6338:	2a01      	cmp	r2, #1
  *str = '\0';
   b633a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b633e:	bf98      	it	ls
   b6340:	220a      	movls	r2, #10
   b6342:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6344:	460d      	mov	r5, r1
   b6346:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b634a:	fb01 5312 	mls	r3, r1, r2, r5
   b634e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6352:	2b09      	cmp	r3, #9
   b6354:	bf94      	ite	ls
   b6356:	3330      	addls	r3, #48	; 0x30
   b6358:	3337      	addhi	r3, #55	; 0x37
   b635a:	b2db      	uxtb	r3, r3
  } while(n);
   b635c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b635e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6362:	d9ef      	bls.n	b6344 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6364:	4621      	mov	r1, r4
   b6366:	f7ff ffcf 	bl	b6308 <_ZN5Print5writeEPKc>
}
   b636a:	b00b      	add	sp, #44	; 0x2c
   b636c:	bd30      	pop	{r4, r5, pc}

000b636e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b636e:	4770      	bx	lr

000b6370 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6370:	4770      	bx	lr

000b6372 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6372:	4770      	bx	lr

000b6374 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6374:	4770      	bx	lr
	...

000b6378 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6378:	4b06      	ldr	r3, [pc, #24]	; (b6394 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b637a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b637c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b637e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6382:	d005      	beq.n	b6390 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6384:	4608      	mov	r0, r1
   b6386:	f001 fb11 	bl	b79ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b638a:	2800      	cmp	r0, #0
   b638c:	bf08      	it	eq
   b638e:	2400      	moveq	r4, #0
      }
   b6390:	4620      	mov	r0, r4
   b6392:	bd10      	pop	{r4, pc}
   b6394:	000b80b8 	.word	0x000b80b8

000b6398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6398:	4b06      	ldr	r3, [pc, #24]	; (b63b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b639a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b639c:	b510      	push	{r4, lr}
   b639e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b63a2:	d005      	beq.n	b63b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b63a4:	4608      	mov	r0, r1
   b63a6:	f001 fb01 	bl	b79ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b63aa:	2800      	cmp	r0, #0
   b63ac:	bf08      	it	eq
   b63ae:	2400      	moveq	r4, #0
      }
   b63b0:	4620      	mov	r0, r4
   b63b2:	bd10      	pop	{r4, pc}
   b63b4:	000b80b8 	.word	0x000b80b8

000b63b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b63b8:	4b06      	ldr	r3, [pc, #24]	; (b63d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b63ba:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b63bc:	b510      	push	{r4, lr}
   b63be:	f100 040c 	add.w	r4, r0, #12
	    ||
   b63c2:	d005      	beq.n	b63d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b63c4:	4608      	mov	r0, r1
   b63c6:	f001 faf1 	bl	b79ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b63ca:	2800      	cmp	r0, #0
   b63cc:	bf08      	it	eq
   b63ce:	2400      	moveq	r4, #0
      }
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}
   b63d4:	000b80b8 	.word	0x000b80b8

000b63d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b63d8:	b510      	push	{r4, lr}
   b63da:	2168      	movs	r1, #104	; 0x68
   b63dc:	4604      	mov	r4, r0
   b63de:	f7fd fe6e 	bl	b40be <_ZdlPvj>
   b63e2:	4620      	mov	r0, r4
   b63e4:	bd10      	pop	{r4, pc}

000b63e6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63e6:	b510      	push	{r4, lr}
   b63e8:	2128      	movs	r1, #40	; 0x28
   b63ea:	4604      	mov	r4, r0
   b63ec:	f7fd fe67 	bl	b40be <_ZdlPvj>
   b63f0:	4620      	mov	r0, r4
   b63f2:	bd10      	pop	{r4, pc}

000b63f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b63f4:	b510      	push	{r4, lr}
   b63f6:	2130      	movs	r1, #48	; 0x30
   b63f8:	4604      	mov	r4, r0
   b63fa:	f7fd fe60 	bl	b40be <_ZdlPvj>
   b63fe:	4620      	mov	r0, r4
   b6400:	bd10      	pop	{r4, pc}

000b6402 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6402:	2168      	movs	r1, #104	; 0x68
   b6404:	f7fd be5b 	b.w	b40be <_ZdlPvj>

000b6408 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6408:	2128      	movs	r1, #40	; 0x28
   b640a:	f7fd be58 	b.w	b40be <_ZdlPvj>

000b640e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b640e:	2130      	movs	r1, #48	; 0x30
   b6410:	f7fd be55 	b.w	b40be <_ZdlPvj>

000b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6414:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6416:	2500      	movs	r5, #0
   b6418:	1cec      	adds	r4, r5, #3
   b641a:	428c      	cmp	r4, r1
   b641c:	d80d      	bhi.n	b643a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b641e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6420:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6422:	5d87      	ldrb	r7, [r0, r6]
   b6424:	4297      	cmp	r7, r2
   b6426:	d105      	bne.n	b6434 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6428:	4426      	add	r6, r4
   b642a:	42b1      	cmp	r1, r6
   b642c:	d305      	bcc.n	b643a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b642e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6430:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6432:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6434:	3401      	adds	r4, #1
   b6436:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6438:	e7ee      	b.n	b6418 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b643a:	2000      	movs	r0, #0
   b643c:	e7f9      	b.n	b6432 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6440 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6440:	4a02      	ldr	r2, [pc, #8]	; (b644c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6442:	4903      	ldr	r1, [pc, #12]	; (b6450 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6444:	200a      	movs	r0, #10
   b6446:	f7fe b9c7 	b.w	b47d8 <panic_>
   b644a:	bf00      	nop
   b644c:	000b4799 	.word	0x000b4799
   b6450:	000b8218 	.word	0x000b8218

000b6454 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6454:	b430      	push	{r4, r5}
   b6456:	460d      	mov	r5, r1
   b6458:	4611      	mov	r1, r2
   b645a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b645c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b645e:	6809      	ldr	r1, [r1, #0]
   b6460:	6828      	ldr	r0, [r5, #0]
   b6462:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6466:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6468:	bc30      	pop	{r4, r5}
   b646a:	4760      	bx	ip

000b646c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b646c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b646e:	b538      	push	{r3, r4, r5, lr}
   b6470:	4604      	mov	r4, r0
	switch (__op)
   b6472:	d102      	bne.n	b647a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6474:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6476:	6023      	str	r3, [r4, #0]
	}
   b6478:	e003      	b.n	b6482 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b647a:	2a02      	cmp	r2, #2
   b647c:	d003      	beq.n	b6486 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b647e:	2a03      	cmp	r2, #3
   b6480:	d00d      	beq.n	b649e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6482:	2000      	movs	r0, #0
   b6484:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6486:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6488:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b648a:	f7fd fe14 	bl	b40b6 <_Znwj>
   b648e:	4603      	mov	r3, r0
   b6490:	2800      	cmp	r0, #0
   b6492:	d0f0      	beq.n	b6476 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6494:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6498:	e883 0003 	stmia.w	r3, {r0, r1}
   b649c:	e7eb      	b.n	b6476 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b649e:	6800      	ldr	r0, [r0, #0]
   b64a0:	2800      	cmp	r0, #0
   b64a2:	d0ee      	beq.n	b6482 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b64a4:	2108      	movs	r1, #8
   b64a6:	f7fd fe0a 	bl	b40be <_ZdlPvj>
   b64aa:	e7ea      	b.n	b6482 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b64ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b64ac:	b510      	push	{r4, lr}
   b64ae:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b64b0:	3058      	adds	r0, #88	; 0x58
   b64b2:	f7fe fe7f 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b64b6:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b64ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b64be:	f001 b97b 	b.w	b77b8 <_ZN6StringD1Ev>

000b64c2 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b64c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b64c6:	b2da      	uxtb	r2, r3
   b64c8:	2a09      	cmp	r2, #9
   b64ca:	d801      	bhi.n	b64d0 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b64cc:	4618      	mov	r0, r3
   b64ce:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b64d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b64d4:	2b05      	cmp	r3, #5
   b64d6:	d801      	bhi.n	b64dc <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b64d8:	3857      	subs	r0, #87	; 0x57
   b64da:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b64dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b64e0:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b64e2:	bf94      	ite	ls
   b64e4:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b64e6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b64ea:	4770      	bx	lr

000b64ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b64ec:	b510      	push	{r4, lr}
            locked_(false) {
   b64ee:	2300      	movs	r3, #0
   b64f0:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b64f2:	4b04      	ldr	r3, [pc, #16]	; (b6504 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b64f4:	4604      	mov	r4, r0
   b64f6:	6818      	ldr	r0, [r3, #0]
   b64f8:	f7fe f8bc 	bl	b4674 <os_mutex_recursive_lock>
        locked_ = true;
   b64fc:	2301      	movs	r3, #1
   b64fe:	7023      	strb	r3, [r4, #0]
    }
   b6500:	4620      	mov	r0, r4
   b6502:	bd10      	pop	{r4, pc}
   b6504:	2003e720 	.word	0x2003e720

000b6508 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6508:	b510      	push	{r4, lr}
        if (locked_) {
   b650a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b650c:	4604      	mov	r4, r0
        if (locked_) {
   b650e:	b11b      	cbz	r3, b6518 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6510:	4b02      	ldr	r3, [pc, #8]	; (b651c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6512:	6818      	ldr	r0, [r3, #0]
   b6514:	f7fe f8b6 	bl	b4684 <os_mutex_recursive_unlock>
    }
   b6518:	4620      	mov	r0, r4
   b651a:	bd10      	pop	{r4, pc}
   b651c:	2003e720 	.word	0x2003e720

000b6520 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6520:	b082      	sub	sp, #8
   b6522:	4603      	mov	r3, r0
    address_ = addr;
   b6524:	6808      	ldr	r0, [r1, #0]
   b6526:	6849      	ldr	r1, [r1, #4]
   b6528:	466a      	mov	r2, sp
   b652a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b652c:	466a      	mov	r2, sp
   b652e:	ca03      	ldmia	r2!, {r0, r1}
   b6530:	6018      	str	r0, [r3, #0]
}
   b6532:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6534:	6059      	str	r1, [r3, #4]
}
   b6536:	b002      	add	sp, #8
   b6538:	4770      	bx	lr

000b653a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b653a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b653c:	7982      	ldrb	r2, [r0, #6]
   b653e:	798b      	ldrb	r3, [r1, #6]
   b6540:	429a      	cmp	r2, r3
   b6542:	d106      	bne.n	b6552 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6544:	2206      	movs	r2, #6
   b6546:	f001 fb51 	bl	b7bec <memcmp>
   b654a:	fab0 f080 	clz	r0, r0
   b654e:	0940      	lsrs	r0, r0, #5
}
   b6550:	bd08      	pop	{r3, pc}
    return false;
   b6552:	2000      	movs	r0, #0
   b6554:	e7fc      	b.n	b6550 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6556 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b655a:	6003      	str	r3, [r0, #0]
   b655c:	8083      	strh	r3, [r0, #4]
}
   b655e:	2000      	movs	r0, #0
   b6560:	4770      	bx	lr

000b6562 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6562:	b508      	push	{r3, lr}
   b6564:	4602      	mov	r2, r0
        : address_{} {
   b6566:	2100      	movs	r1, #0
   b6568:	6001      	str	r1, [r0, #0]
   b656a:	6041      	str	r1, [r0, #4]
    clear();
   b656c:	f7ff fff3 	bl	b6556 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6570:	7191      	strb	r1, [r2, #6]
}
   b6572:	4610      	mov	r0, r2
   b6574:	bd08      	pop	{r3, pc}
	...

000b6578 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6578:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b657a:	2301      	movs	r3, #1
   b657c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b657e:	4b05      	ldr	r3, [pc, #20]	; (b6594 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6580:	4602      	mov	r2, r0
   b6582:	f103 0110 	add.w	r1, r3, #16
   b6586:	f853 4b04 	ldr.w	r4, [r3], #4
   b658a:	f842 4b04 	str.w	r4, [r2], #4
   b658e:	428b      	cmp	r3, r1
   b6590:	d1f9      	bne.n	b6586 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6592:	bd10      	pop	{r4, pc}
   b6594:	000b7f5a 	.word	0x000b7f5a

000b6598 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6598:	b510      	push	{r4, lr}
    if (uuid128) {
   b659a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b659c:	4604      	mov	r4, r0
    if (uuid128) {
   b659e:	b1b1      	cbz	r1, b65ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b65a0:	2a01      	cmp	r2, #1
   b65a2:	f101 0210 	add.w	r2, r1, #16
   b65a6:	d10a      	bne.n	b65be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b65a8:	4601      	mov	r1, r0
   b65aa:	f853 0b04 	ldr.w	r0, [r3], #4
   b65ae:	f841 0b04 	str.w	r0, [r1], #4
   b65b2:	4293      	cmp	r3, r2
   b65b4:	d1f9      	bne.n	b65aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b65b6:	2301      	movs	r3, #1
   b65b8:	6123      	str	r3, [r4, #16]
}
   b65ba:	4620      	mov	r0, r4
   b65bc:	bd10      	pop	{r4, pc}
   b65be:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b65c0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b65c4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b65c8:	429a      	cmp	r2, r3
   b65ca:	d1f9      	bne.n	b65c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b65cc:	e7f3      	b.n	b65b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b65ce:	2210      	movs	r2, #16
   b65d0:	f001 fb44 	bl	b7c5c <memset>
   b65d4:	e7f1      	b.n	b65ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b65d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b65d6:	b538      	push	{r3, r4, r5, lr}
   b65d8:	4604      	mov	r4, r0
   b65da:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b65dc:	461a      	mov	r2, r3
   b65de:	f7ff ffdb 	bl	b6598 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b65e2:	81a5      	strh	r5, [r4, #12]
}
   b65e4:	4620      	mov	r0, r4
   b65e6:	bd38      	pop	{r3, r4, r5, pc}

000b65e8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b65e8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b65ea:	6902      	ldr	r2, [r0, #16]
   b65ec:	b922      	cbnz	r2, b65f8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b65ee:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b65f0:	3800      	subs	r0, #0
   b65f2:	bf18      	it	ne
   b65f4:	2001      	movne	r0, #1
}
   b65f6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b65f8:	4902      	ldr	r1, [pc, #8]	; (b6604 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b65fa:	2210      	movs	r2, #16
   b65fc:	f001 faf6 	bl	b7bec <memcmp>
   b6600:	e7f6      	b.n	b65f0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b6602:	bf00      	nop
   b6604:	000b83a4 	.word	0x000b83a4

000b6608 <_ZNK8particle7BleUuid4typeEv>:
}
   b6608:	6900      	ldr	r0, [r0, #16]
   b660a:	4770      	bx	lr

000b660c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b660c:	b538      	push	{r3, r4, r5, lr}
   b660e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b6610:	2214      	movs	r2, #20
   b6612:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b6614:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b6616:	f001 fb21 	bl	b7c5c <memset>
    if (type_ == BleUuidType::SHORT) {
   b661a:	6923      	ldr	r3, [r4, #16]
   b661c:	b91b      	cbnz	r3, b6626 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b661e:	89a3      	ldrh	r3, [r4, #12]
   b6620:	802b      	strh	r3, [r5, #0]
}
   b6622:	4628      	mov	r0, r5
   b6624:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b6626:	2301      	movs	r3, #1
   b6628:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b662a:	4621      	mov	r1, r4
   b662c:	462b      	mov	r3, r5
   b662e:	f104 0210 	add.w	r2, r4, #16
   b6632:	f851 0b04 	ldr.w	r0, [r1], #4
   b6636:	f843 0b04 	str.w	r0, [r3], #4
   b663a:	4291      	cmp	r1, r2
   b663c:	d1f9      	bne.n	b6632 <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b663e:	e7f0      	b.n	b6622 <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b6640 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6640:	8980      	ldrh	r0, [r0, #12]
   b6642:	4770      	bx	lr

000b6644 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6644:	4770      	bx	lr

000b6646 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6646:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6648:	6902      	ldr	r2, [r0, #16]
   b664a:	690b      	ldr	r3, [r1, #16]
   b664c:	429a      	cmp	r2, r3
   b664e:	d106      	bne.n	b665e <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6650:	2210      	movs	r2, #16
   b6652:	f001 facb 	bl	b7bec <memcmp>
   b6656:	fab0 f080 	clz	r0, r0
   b665a:	0940      	lsrs	r0, r0, #5
}
   b665c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b665e:	2000      	movs	r0, #0
   b6660:	e7fc      	b.n	b665c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b6664 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6664:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6666:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b666a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b666c:	4b34      	ldr	r3, [pc, #208]	; (b6740 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b666e:	460c      	mov	r4, r1
   b6670:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6672:	4602      	mov	r2, r0
   b6674:	f103 0110 	add.w	r1, r3, #16
   b6678:	f853 0b04 	ldr.w	r0, [r3], #4
   b667c:	f842 0b04 	str.w	r0, [r2], #4
   b6680:	428b      	cmp	r3, r1
   b6682:	d1f9      	bne.n	b6678 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6684:	b344      	cbz	r4, b66d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6686:	2124      	movs	r1, #36	; 0x24
   b6688:	4620      	mov	r0, r4
   b668a:	f001 fb50 	bl	b7d2e <strnlen>
   b668e:	2804      	cmp	r0, #4
   b6690:	f04f 0500 	mov.w	r5, #0
   b6694:	d123      	bne.n	b66de <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6696:	f8ad 5004 	strh.w	r5, [sp, #4]
   b669a:	af01      	add	r7, sp, #4
   b669c:	1ca5      	adds	r5, r4, #2
   b669e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b66a0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b66a4:	f7ff ff0d 	bl	b64c2 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b66a8:	f1b0 0800 	subs.w	r8, r0, #0
   b66ac:	db12      	blt.n	b66d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b66ae:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b66b2:	f7ff ff06 	bl	b64c2 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b66b6:	2800      	cmp	r0, #0
   b66b8:	db0c      	blt.n	b66d4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b66ba:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b66bc:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b66c0:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b66c2:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b66c6:	d1eb      	bne.n	b66a0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b66c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b66cc:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b66ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b66d2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b66d4:	2300      	movs	r3, #0
   b66d6:	6133      	str	r3, [r6, #16]
}
   b66d8:	b002      	add	sp, #8
   b66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b66de:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b66e2:	2124      	movs	r1, #36	; 0x24
   b66e4:	4620      	mov	r0, r4
   b66e6:	f001 fb22 	bl	b7d2e <strnlen>
   b66ea:	42a8      	cmp	r0, r5
   b66ec:	d807      	bhi.n	b66fe <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b66ee:	4642      	mov	r2, r8
   b66f0:	2100      	movs	r1, #0
   b66f2:	4630      	mov	r0, r6
}
   b66f4:	b002      	add	sp, #8
   b66f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b66fa:	f001 baaf 	b.w	b7c5c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b66fe:	f1b8 0f00 	cmp.w	r8, #0
   b6702:	d0e9      	beq.n	b66d8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6704:	5d60      	ldrb	r0, [r4, r5]
   b6706:	f7ff fedc 	bl	b64c2 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b670a:	0603      	lsls	r3, r0, #24
   b670c:	d415      	bmi.n	b673a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b670e:	0100      	lsls	r0, r0, #4
   b6710:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6714:	b2c7      	uxtb	r7, r0
   b6716:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b671a:	2124      	movs	r1, #36	; 0x24
   b671c:	4620      	mov	r0, r4
   b671e:	f001 fb06 	bl	b7d2e <strnlen>
   b6722:	3501      	adds	r5, #1
   b6724:	42a8      	cmp	r0, r5
   b6726:	d908      	bls.n	b673a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6728:	5d60      	ldrb	r0, [r4, r5]
   b672a:	f7ff feca 	bl	b64c2 <_ZN8particle11hexToNibbleEc>
   b672e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6730:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6732:	bfa4      	itt	ge
   b6734:	4338      	orrge	r0, r7
   b6736:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b673a:	3501      	adds	r5, #1
   b673c:	e7d1      	b.n	b66e2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b673e:	bf00      	nop
   b6740:	000b7f5a 	.word	0x000b7f5a

000b6744 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6744:	b513      	push	{r0, r1, r4, lr}
   b6746:	4604      	mov	r4, r0
   b6748:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b674a:	f7ff ff15 	bl	b6578 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b674e:	4620      	mov	r0, r4
   b6750:	9901      	ldr	r1, [sp, #4]
   b6752:	f7ff ff87 	bl	b6664 <_ZN8particle7BleUuid9constructEPKc>
}
   b6756:	4620      	mov	r0, r4
   b6758:	b002      	add	sp, #8
   b675a:	bd10      	pop	{r4, pc}

000b675c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b675c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b675e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6762:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6764:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6766:	8043      	strh	r3, [r0, #2]
   b6768:	220e      	movs	r2, #14
   b676a:	4629      	mov	r1, r5
   b676c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b676e:	7105      	strb	r5, [r0, #4]
   b6770:	3006      	adds	r0, #6
   b6772:	f001 fa73 	bl	b7c5c <memset>
   b6776:	f104 0014 	add.w	r0, r4, #20
   b677a:	f7ff fefd 	bl	b6578 <_ZN8particle7BleUuidC1Ev>
   b677e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6782:	f7ff fef9 	bl	b6578 <_ZN8particle7BleUuidC1Ev>
   b6786:	4904      	ldr	r1, [pc, #16]	; (b6798 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6788:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b678c:	f001 f85f 	bl	b784e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6790:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6792:	4620      	mov	r0, r4
   b6794:	bd38      	pop	{r3, r4, r5, pc}
   b6796:	bf00      	nop
   b6798:	000b8186 	.word	0x000b8186

000b679c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b679c:	b510      	push	{r4, lr}
    return data_ + size_;
   b679e:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b67a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b67a6:	4293      	cmp	r3, r2
   b67a8:	4618      	mov	r0, r3
   b67aa:	d006      	beq.n	b67ba <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b67ac:	6804      	ldr	r4, [r0, #0]
   b67ae:	8824      	ldrh	r4, [r4, #0]
   b67b0:	428c      	cmp	r4, r1
   b67b2:	f103 0308 	add.w	r3, r3, #8
   b67b6:	d1f6      	bne.n	b67a6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b67b8:	bd10      	pop	{r4, pc}
        return nullptr;
   b67ba:	2000      	movs	r0, #0
   b67bc:	e7fc      	b.n	b67b8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b67c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b67c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67c2:	4606      	mov	r6, r0
   b67c4:	b085      	sub	sp, #20
   b67c6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b67c8:	460d      	mov	r5, r1
   b67ca:	2900      	cmp	r1, #0
   b67cc:	d050      	beq.n	b6870 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b67ce:	2a00      	cmp	r2, #0
   b67d0:	d04e      	beq.n	b6870 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b67d2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b67d4:	7823      	ldrb	r3, [r4, #0]
   b67d6:	2af4      	cmp	r2, #244	; 0xf4
   b67d8:	bf28      	it	cs
   b67da:	22f4      	movcs	r2, #244	; 0xf4
   b67dc:	b343      	cbz	r3, b6830 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b67de:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b67e0:	0798      	lsls	r0, r3, #30
   b67e2:	d509      	bpl.n	b67f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b67e4:	89a0      	ldrh	r0, [r4, #12]
   b67e6:	9203      	str	r2, [sp, #12]
   b67e8:	2300      	movs	r3, #0
   b67ea:	f7fd ff87 	bl	b46fc <hal_ble_gatt_server_set_characteristic_value>
   b67ee:	2800      	cmp	r0, #0
   b67f0:	9a03      	ldr	r2, [sp, #12]
   b67f2:	da03      	bge.n	b67fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b67f4:	b005      	add	sp, #20
   b67f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b67f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b67fc:	6834      	ldr	r4, [r6, #0]
   b67fe:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6800:	06d9      	lsls	r1, r3, #27
   b6802:	d509      	bpl.n	b6818 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6804:	2f01      	cmp	r7, #1
   b6806:	d007      	beq.n	b6818 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6808:	89a0      	ldrh	r0, [r4, #12]
   b680a:	2300      	movs	r3, #0
   b680c:	4629      	mov	r1, r5
}
   b680e:	b005      	add	sp, #20
   b6810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6814:	f7fd bfa4 	b.w	b4760 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6818:	069b      	lsls	r3, r3, #26
   b681a:	d5eb      	bpl.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b681c:	2f02      	cmp	r7, #2
   b681e:	d0e9      	beq.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6820:	89a0      	ldrh	r0, [r4, #12]
   b6822:	2300      	movs	r3, #0
   b6824:	4629      	mov	r1, r5
}
   b6826:	b005      	add	sp, #20
   b6828:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b682c:	f7fd bfa2 	b.w	b4774 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6830:	8860      	ldrh	r0, [r4, #2]
   b6832:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6836:	4288      	cmp	r0, r1
   b6838:	d01c      	beq.n	b6874 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b683a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b683c:	074e      	lsls	r6, r1, #29
   b683e:	d501      	bpl.n	b6844 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6840:	2f01      	cmp	r7, #1
   b6842:	d104      	bne.n	b684e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6844:	070b      	lsls	r3, r1, #28
   b6846:	d409      	bmi.n	b685c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6848:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b684c:	e7d2      	b.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b684e:	89a1      	ldrh	r1, [r4, #12]
   b6850:	9300      	str	r3, [sp, #0]
   b6852:	4613      	mov	r3, r2
   b6854:	462a      	mov	r2, r5
   b6856:	f7fd ff65 	bl	b4724 <hal_ble_gatt_client_write_without_response>
   b685a:	e7cb      	b.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b685c:	2f02      	cmp	r7, #2
   b685e:	d0f3      	beq.n	b6848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6860:	2300      	movs	r3, #0
   b6862:	89a1      	ldrh	r1, [r4, #12]
   b6864:	9300      	str	r3, [sp, #0]
   b6866:	4613      	mov	r3, r2
   b6868:	462a      	mov	r2, r5
   b686a:	f7fd ff51 	bl	b4710 <hal_ble_gatt_client_write_with_response>
   b686e:	e7c1      	b.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6870:	4802      	ldr	r0, [pc, #8]	; (b687c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6872:	e7bf      	b.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6874:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6878:	e7bc      	b.n	b67f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b687a:	bf00      	nop
   b687c:	fffffef2 	.word	0xfffffef2

000b6880 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b6880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6884:	2600      	movs	r6, #0
   b6886:	6006      	str	r6, [r0, #0]
   b6888:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b688a:	2028      	movs	r0, #40	; 0x28
   b688c:	460c      	mov	r4, r1
   b688e:	f7fd fc12 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6892:	1e05      	subs	r5, r0, #0
   b6894:	f105 080c 	add.w	r8, r5, #12
   b6898:	d00f      	beq.n	b68ba <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b689a:	2301      	movs	r3, #1
   b689c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b68a0:	4b08      	ldr	r3, [pc, #32]	; (b68c4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b68a2:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b68a4:	4640      	mov	r0, r8
   b68a6:	f7ff fe67 	bl	b6578 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b68aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b68ac:	622e      	str	r6, [r5, #32]
   b68ae:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b68b2:	4646      	mov	r6, r8
   b68b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b68b6:	6823      	ldr	r3, [r4, #0]
   b68b8:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b68ba:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b68be:	4638      	mov	r0, r7
   b68c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b68c4:	000b8364 	.word	0x000b8364

000b68c8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b68c8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b68ca:	2500      	movs	r5, #0
   b68cc:	6005      	str	r5, [r0, #0]
   b68ce:	4606      	mov	r6, r0
   b68d0:	2030      	movs	r0, #48	; 0x30
   b68d2:	f7fd fbf0 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b68d6:	4604      	mov	r4, r0
   b68d8:	b188      	cbz	r0, b68fe <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b68da:	2301      	movs	r3, #1
   b68dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b68e0:	4b09      	ldr	r3, [pc, #36]	; (b6908 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b68e2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b68e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b68e8:	8183      	strh	r3, [r0, #12]
   b68ea:	300e      	adds	r0, #14
   b68ec:	f7ff fe39 	bl	b6562 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b68f0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b68f4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b68f8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b68fc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b68fe:	6074      	str	r4, [r6, #4]
   b6900:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6902:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6904:	4630      	mov	r0, r6
   b6906:	bd70      	pop	{r4, r5, r6, pc}
   b6908:	000b8380 	.word	0x000b8380

000b690c <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b690c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b690e:	460d      	mov	r5, r1
   b6910:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6912:	a801      	add	r0, sp, #4
   b6914:	f7ff fdea 	bl	b64ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6918:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b691a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b691e:	6023      	str	r3, [r4, #0]
   b6920:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6924:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6926:	a801      	add	r0, sp, #4
   b6928:	f7ff fdee 	bl	b6508 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b692c:	4620      	mov	r0, r4
   b692e:	b003      	add	sp, #12
   b6930:	bd30      	pop	{r4, r5, pc}

000b6932 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6932:	b530      	push	{r4, r5, lr}
   b6934:	4605      	mov	r5, r0
   b6936:	b087      	sub	sp, #28
   b6938:	460c      	mov	r4, r1
    WiringBleLock lk;
   b693a:	a801      	add	r0, sp, #4
   b693c:	f7ff fdd6 	bl	b64ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6940:	682a      	ldr	r2, [r5, #0]
   b6942:	6823      	ldr	r3, [r4, #0]
   b6944:	8812      	ldrh	r2, [r2, #0]
   b6946:	881b      	ldrh	r3, [r3, #0]
   b6948:	429a      	cmp	r2, r3
   b694a:	d10d      	bne.n	b6968 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b694c:	4629      	mov	r1, r5
   b694e:	a802      	add	r0, sp, #8
   b6950:	f7ff ffdc 	bl	b690c <_ZNK8particle13BlePeerDevice7addressEv>
   b6954:	4621      	mov	r1, r4
   b6956:	a804      	add	r0, sp, #16
   b6958:	f7ff ffd8 	bl	b690c <_ZNK8particle13BlePeerDevice7addressEv>
   b695c:	a904      	add	r1, sp, #16
   b695e:	a802      	add	r0, sp, #8
   b6960:	f7ff fdeb 	bl	b653a <_ZNK8particle10BleAddresseqERKS0_>
   b6964:	4604      	mov	r4, r0
   b6966:	b900      	cbnz	r0, b696a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6968:	2400      	movs	r4, #0
    WiringBleLock lk;
   b696a:	a801      	add	r0, sp, #4
   b696c:	f7ff fdcc 	bl	b6508 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6970:	4620      	mov	r0, r4
   b6972:	b007      	add	sp, #28
   b6974:	bd30      	pop	{r4, r5, pc}
	...

000b6978 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6978:	b510      	push	{r4, lr}
   b697a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b697c:	2064      	movs	r0, #100	; 0x64
   b697e:	f7fd fb9a 	bl	b40b6 <_Znwj>
   b6982:	b168      	cbz	r0, b69a0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6984:	2300      	movs	r3, #0
   b6986:	e9c0 3300 	strd	r3, r3, [r0]
   b698a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b698e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6992:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6996:	6203      	str	r3, [r0, #32]
   b6998:	62c3      	str	r3, [r0, #44]	; 0x2c
   b699a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b699c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b699e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b69a0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b69a2:	b920      	cbnz	r0, b69ae <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b69a4:	4a0a      	ldr	r2, [pc, #40]	; (b69d0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b69a6:	490b      	ldr	r1, [pc, #44]	; (b69d4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b69a8:	200a      	movs	r0, #10
   b69aa:	f7fd ff15 	bl	b47d8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b69ae:	2000      	movs	r0, #0
   b69b0:	f7fd fe70 	bl	b4694 <hal_ble_stack_init>
   b69b4:	b120      	cbz	r0, b69c0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b69b6:	4a06      	ldr	r2, [pc, #24]	; (b69d0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b69b8:	4907      	ldr	r1, [pc, #28]	; (b69d8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b69ba:	200a      	movs	r0, #10
   b69bc:	f7fd ff0c 	bl	b47d8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b69c0:	6821      	ldr	r1, [r4, #0]
   b69c2:	4806      	ldr	r0, [pc, #24]	; (b69dc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b69c4:	2200      	movs	r2, #0
   b69c6:	f7fd fec1 	bl	b474c <hal_ble_set_callback_on_periph_link_events>
}
   b69ca:	4620      	mov	r0, r4
   b69cc:	bd10      	pop	{r4, pc}
   b69ce:	bf00      	nop
   b69d0:	000b4799 	.word	0x000b4799
   b69d4:	000b8218 	.word	0x000b8218
   b69d8:	000b8256 	.word	0x000b8256
   b69dc:	000b6f3d 	.word	0x000b6f3d

000b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b69e0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b69e2:	4c0a      	ldr	r4, [pc, #40]	; (b6a0c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b69e4:	7823      	ldrb	r3, [r4, #0]
   b69e6:	f3bf 8f5b 	dmb	ish
   b69ea:	07db      	lsls	r3, r3, #31
   b69ec:	d40c      	bmi.n	b6a08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b69ee:	4620      	mov	r0, r4
   b69f0:	f7fd fb74 	bl	b40dc <__cxa_guard_acquire>
   b69f4:	b140      	cbz	r0, b6a08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b69f6:	4806      	ldr	r0, [pc, #24]	; (b6a10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b69f8:	f7ff ffbe 	bl	b6978 <_ZN8particle14BleLocalDeviceC1Ev>
   b69fc:	4620      	mov	r0, r4
   b69fe:	f7fd fb72 	bl	b40e6 <__cxa_guard_release>
   b6a02:	4804      	ldr	r0, [pc, #16]	; (b6a14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6a04:	f001 f8e4 	bl	b7bd0 <atexit>
    return instance;
}
   b6a08:	4801      	ldr	r0, [pc, #4]	; (b6a10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6a0a:	bd10      	pop	{r4, pc}
   b6a0c:	2003e718 	.word	0x2003e718
   b6a10:	2003e724 	.word	0x2003e724
   b6a14:	000b6c29 	.word	0x000b6c29

000b6a18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6a18:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6a1a:	6803      	ldr	r3, [r0, #0]
   b6a1c:	3b09      	subs	r3, #9
   b6a1e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6a20:	b08d      	sub	sp, #52	; 0x34
   b6a22:	4604      	mov	r4, r0
   b6a24:	460d      	mov	r5, r1
    switch (event->type) {
   b6a26:	d811      	bhi.n	b6a4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6a28:	f7ff ffda 	bl	b69e0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6a2c:	88a1      	ldrh	r1, [r4, #4]
   b6a2e:	6800      	ldr	r0, [r0, #0]
   b6a30:	f7ff feb4 	bl	b679c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6a34:	4603      	mov	r3, r0
   b6a36:	b958      	cbnz	r0, b6a50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6a38:	2220      	movs	r2, #32
   b6a3a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6a3e:	4a0b      	ldr	r2, [pc, #44]	; (b6a6c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6a40:	9200      	str	r2, [sp, #0]
   b6a42:	490b      	ldr	r1, [pc, #44]	; (b6a70 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6a44:	aa04      	add	r2, sp, #16
   b6a46:	2032      	movs	r0, #50	; 0x32
   b6a48:	f7fd fece 	bl	b47e8 <log_message>
}
   b6a4c:	b00d      	add	sp, #52	; 0x34
   b6a4e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6a50:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6a52:	2a00      	cmp	r2, #0
   b6a54:	d0fa      	beq.n	b6a4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6a56:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a5a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6a5e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6a62:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6a64:	aa04      	add	r2, sp, #16
   b6a66:	a903      	add	r1, sp, #12
   b6a68:	47a0      	blx	r4
}
   b6a6a:	e7ef      	b.n	b6a4c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6a6c:	000b8298 	.word	0x000b8298
   b6a70:	000b822f 	.word	0x000b822f

000b6a74 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6a74:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6a76:	2000      	movs	r0, #0
   b6a78:	f7fd fe0c 	bl	b4694 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6a7c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6a80:	bd08      	pop	{r3, pc}

000b6a82 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6a82:	b919      	cbnz	r1, b6a8c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6a84:	460a      	mov	r2, r1
   b6a86:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6a88:	f7fd be0c 	b.w	b46a4 <hal_ble_gap_set_advertising_data>
   b6a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6a90:	2200      	movs	r2, #0
   b6a92:	e7f9      	b.n	b6a88 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6a94 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6a94:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6a96:	69d8      	ldr	r0, [r3, #28]
}
   b6a98:	2800      	cmp	r0, #0
   b6a9a:	bfd4      	ite	le
   b6a9c:	2000      	movle	r0, #0
   b6a9e:	2001      	movgt	r0, #1
   b6aa0:	4770      	bx	lr

000b6aa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6aa2:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6aa4:	1e14      	subs	r4, r2, #0
   b6aa6:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6aa8:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6aaa:	db02      	blt.n	b6ab2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6aac:	1862      	adds	r2, r4, r1
   b6aae:	429a      	cmp	r2, r3
   b6ab0:	dd00      	ble.n	b6ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6ab2:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6ab4:	682a      	ldr	r2, [r5, #0]
   b6ab6:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6ab8:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6aba:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6abc:	1a52      	subs	r2, r2, r1
   b6abe:	f001 f8b3 	bl	b7c28 <memmove>
    size_ -= n;
   b6ac2:	686a      	ldr	r2, [r5, #4]
   b6ac4:	1b12      	subs	r2, r2, r4
   b6ac6:	606a      	str	r2, [r5, #4]
}
   b6ac8:	bd38      	pop	{r3, r4, r5, pc}

000b6aca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6aca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b6acc:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b6ace:	4604      	mov	r4, r0
   b6ad0:	460d      	mov	r5, r1
   b6ad2:	ab01      	add	r3, sp, #4
   b6ad4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6ad8:	f7ff fc9c 	bl	b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b6adc:	4602      	mov	r2, r0
   b6ade:	b138      	cbz	r0, b6af0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b6ae0:	9901      	ldr	r1, [sp, #4]
   b6ae2:	4620      	mov	r0, r4
   b6ae4:	f7ff ffdd 	bl	b6aa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b6ae8:	4629      	mov	r1, r5
   b6aea:	4620      	mov	r0, r4
   b6aec:	f7ff ffed 	bl	b6aca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b6af0:	b003      	add	sp, #12
   b6af2:	bd30      	pop	{r4, r5, pc}

000b6af4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b6af4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b6af6:	460c      	mov	r4, r1
   b6af8:	b929      	cbnz	r1, b6b06 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b6afa:	460a      	mov	r2, r1
   b6afc:	4608      	mov	r0, r1
}
   b6afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b02:	f7fd bdd7 	b.w	b46b4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b6b06:	2101      	movs	r1, #1
   b6b08:	4620      	mov	r0, r4
   b6b0a:	f7ff ffde 	bl	b6aca <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b6b0e:	e9d4 0100 	ldrd	r0, r1, [r4]
   b6b12:	2200      	movs	r2, #0
   b6b14:	e7f3      	b.n	b6afe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b6b16 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b6b16:	b538      	push	{r3, r4, r5, lr}
   b6b18:	4604      	mov	r4, r0
   b6b1a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b6b1c:	f7ff ffb1 	bl	b6a82 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b6b20:	2800      	cmp	r0, #0
   b6b22:	db0a      	blt.n	b6b3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b6b24:	4629      	mov	r1, r5
   b6b26:	4620      	mov	r0, r4
   b6b28:	f7ff ffe4 	bl	b6af4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b6b2c:	2800      	cmp	r0, #0
   b6b2e:	db04      	blt.n	b6b3a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b6b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b6b34:	2000      	movs	r0, #0
   b6b36:	f7fd bdc5 	b.w	b46c4 <hal_ble_gap_start_advertising>
}
   b6b3a:	bd38      	pop	{r3, r4, r5, pc}

000b6b3c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6b3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6b3e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6b40:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b42:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b44:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6b46:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b48:	f7fd fab5 	bl	b40b6 <_Znwj>
   b6b4c:	b118      	cbz	r0, b6b56 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6b4e:	682b      	ldr	r3, [r5, #0]
   b6b50:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b52:	686b      	ldr	r3, [r5, #4]
   b6b54:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b56:	4b03      	ldr	r3, [pc, #12]	; (b6b64 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6b58:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b5a:	4b03      	ldr	r3, [pc, #12]	; (b6b68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b5c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b5e:	60a3      	str	r3, [r4, #8]
      }
   b6b60:	4620      	mov	r0, r4
   b6b62:	bd38      	pop	{r3, r4, r5, pc}
   b6b64:	000b6455 	.word	0x000b6455
   b6b68:	000b646d 	.word	0x000b646d

000b6b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6b6c:	680b      	ldr	r3, [r1, #0]
   b6b6e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6b70:	b113      	cbz	r3, b6b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6b72:	685a      	ldr	r2, [r3, #4]
   b6b74:	3201      	adds	r2, #1
   b6b76:	605a      	str	r2, [r3, #4]
      }
   b6b78:	4770      	bx	lr

000b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6b7a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6b7c:	f851 3b04 	ldr.w	r3, [r1], #4
   b6b80:	4604      	mov	r4, r0
   b6b82:	f840 3b04 	str.w	r3, [r0], #4
   b6b86:	f7ff fff1 	bl	b6b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6b8a:	6823      	ldr	r3, [r4, #0]
   b6b8c:	b90b      	cbnz	r3, b6b92 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6b8e:	f7ff fc57 	bl	b6440 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6b92:	4620      	mov	r0, r4
   b6b94:	bd10      	pop	{r4, pc}

000b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6b96:	b510      	push	{r4, lr}
   b6b98:	f851 3b04 	ldr.w	r3, [r1], #4
   b6b9c:	4604      	mov	r4, r0
   b6b9e:	f840 3b04 	str.w	r3, [r0], #4
   b6ba2:	f7ff ffe3 	bl	b6b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6ba6:	4620      	mov	r0, r4
   b6ba8:	bd10      	pop	{r4, pc}

000b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6baa:	b510      	push	{r4, lr}
   b6bac:	f851 3b04 	ldr.w	r3, [r1], #4
   b6bb0:	4604      	mov	r4, r0
   b6bb2:	f840 3b04 	str.w	r3, [r0], #4
   b6bb6:	f7ff ffd9 	bl	b6b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6bba:	4620      	mov	r0, r4
   b6bbc:	bd10      	pop	{r4, pc}

000b6bbe <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b6bbe:	b510      	push	{r4, lr}
   b6bc0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6bc2:	3004      	adds	r0, #4
   b6bc4:	f7fd ffe4 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6bc8:	4620      	mov	r0, r4
   b6bca:	bd10      	pop	{r4, pc}

000b6bcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6bcc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6bce:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6bd2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6bd4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6bd8:	42ae      	cmp	r6, r5
   b6bda:	d004      	beq.n	b6be6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6bdc:	1d28      	adds	r0, r5, #4
   b6bde:	f7fd ffd7 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6be2:	3508      	adds	r5, #8
   b6be4:	e7f8      	b.n	b6bd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6be6:	6820      	ldr	r0, [r4, #0]
   b6be8:	f7fd feaa 	bl	b4940 <free>
}
   b6bec:	4620      	mov	r0, r4
   b6bee:	bd70      	pop	{r4, r5, r6, pc}

000b6bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6bf0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6bf2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6bf6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6bf8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6bfc:	42ae      	cmp	r6, r5
   b6bfe:	d004      	beq.n	b6c0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6c00:	1d28      	adds	r0, r5, #4
   b6c02:	f7fd ffc5 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c06:	3508      	adds	r5, #8
   b6c08:	e7f8      	b.n	b6bfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6c0a:	6820      	ldr	r0, [r4, #0]
   b6c0c:	f7fd fe98 	bl	b4940 <free>
}
   b6c10:	4620      	mov	r0, r4
   b6c12:	bd70      	pop	{r4, r5, r6, pc}

000b6c14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6c14:	b510      	push	{r4, lr}
   b6c16:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6c18:	3024      	adds	r0, #36	; 0x24
   b6c1a:	f7ff ffe9 	bl	b6bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6c1e:	f104 0018 	add.w	r0, r4, #24
   b6c22:	f7ff ffd3 	bl	b6bcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6c26:	bd10      	pop	{r4, pc}

000b6c28 <__tcf_0>:
    static BleLocalDevice instance;
   b6c28:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6c2a:	4b17      	ldr	r3, [pc, #92]	; (b6c88 <__tcf_0+0x60>)
   b6c2c:	681c      	ldr	r4, [r3, #0]
   b6c2e:	b354      	cbz	r4, b6c86 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6c30:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6c34:	f7fe fabe 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
   b6c38:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6c3c:	f7fe faba 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
   b6c40:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6c44:	f7fe fab6 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
   b6c48:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6c4c:	f7fe fab2 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6c50:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6c54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6c58:	42ae      	cmp	r6, r5
   b6c5a:	d004      	beq.n	b6c66 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6c5c:	1d28      	adds	r0, r5, #4
   b6c5e:	f7fd ff97 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6c62:	3508      	adds	r5, #8
   b6c64:	e7f8      	b.n	b6c58 <__tcf_0+0x30>
    ::free(ptr);
   b6c66:	69a0      	ldr	r0, [r4, #24]
   b6c68:	f7fd fe6a 	bl	b4940 <free>
    ~BleLocalDeviceImpl() = default;
   b6c6c:	f104 000c 	add.w	r0, r4, #12
   b6c70:	f7ff ffbe 	bl	b6bf0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6c74:	4620      	mov	r0, r4
   b6c76:	f7ff ffa9 	bl	b6bcc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6c82:	f7fd ba1c 	b.w	b40be <_ZdlPvj>
   b6c86:	bd70      	pop	{r4, r5, r6, pc}
   b6c88:	2003e724 	.word	0x2003e724

000b6c8c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b6c8c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b6c8e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6c90:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b6c94:	e9c1 3300 	strd	r3, r3, [r1]
   b6c98:	6803      	ldr	r3, [r0, #0]
   b6c9a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c9c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6c9e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b6ca0:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b6ca2:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b6ca4:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b6ca6:	f7fd ff73 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b6caa:	b002      	add	sp, #8
   b6cac:	bd10      	pop	{r4, pc}

000b6cae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6cae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6cb0:	b510      	push	{r4, lr}
      if (_M_empty())
   b6cb2:	b90a      	cbnz	r2, b6cb8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6cb4:	f000 fe76 	bl	b79a4 <_ZSt25__throw_bad_function_callv>
    }
   b6cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6cbc:	68c3      	ldr	r3, [r0, #12]
   b6cbe:	4718      	bx	r3

000b6cc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6cc0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6cc2:	6883      	ldr	r3, [r0, #8]
   b6cc4:	428b      	cmp	r3, r1
   b6cc6:	da02      	bge.n	b6cce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6cc8:	f7fd ff78 	bl	b4bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6ccc:	bd08      	pop	{r3, pc}
    return true;
   b6cce:	2001      	movs	r0, #1
   b6cd0:	e7fc      	b.n	b6ccc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6cd2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cd6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6cd8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6cda:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6cdc:	4419      	add	r1, r3
   b6cde:	6883      	ldr	r3, [r0, #8]
   b6ce0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ce2:	4604      	mov	r4, r0
   b6ce4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ce6:	dc12      	bgt.n	b6d0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6ce8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6cea:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6cec:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6cee:	1bd2      	subs	r2, r2, r7
   b6cf0:	4631      	mov	r1, r6
   b6cf2:	1970      	adds	r0, r6, r5
   b6cf4:	f000 ff98 	bl	b7c28 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6cf8:	462a      	mov	r2, r5
   b6cfa:	4641      	mov	r1, r8
   b6cfc:	4630      	mov	r0, r6
   b6cfe:	f000 ff85 	bl	b7c0c <memcpy>
    size_ += n;
   b6d02:	6863      	ldr	r3, [r4, #4]
   b6d04:	442b      	add	r3, r5
   b6d06:	6063      	str	r3, [r4, #4]
    return true;
   b6d08:	2001      	movs	r0, #1
}
   b6d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6d0e:	f7fd ff55 	bl	b4bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6d12:	2800      	cmp	r0, #0
   b6d14:	d1e8      	bne.n	b6ce8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6d16:	e7f8      	b.n	b6d0a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6d18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d1a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6d1c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6d20:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6d22:	4604      	mov	r4, r0
   b6d24:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6d26:	da0b      	bge.n	b6d40 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6d28:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d2a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6d2c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6d2e:	1b52      	subs	r2, r2, r5
   b6d30:	1c48      	adds	r0, r1, #1
   b6d32:	f000 ff79 	bl	b7c28 <memmove>
    new(p) T(std::move(value));
   b6d36:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6d38:	6863      	ldr	r3, [r4, #4]
   b6d3a:	3301      	adds	r3, #1
   b6d3c:	6063      	str	r3, [r4, #4]
}
   b6d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6d40:	3101      	adds	r1, #1
   b6d42:	f7fd ff3b 	bl	b4bbc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6d46:	2800      	cmp	r0, #0
   b6d48:	d1ee      	bne.n	b6d28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6d4a:	e7f8      	b.n	b6d3e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6d4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6d4c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6d4e:	6841      	ldr	r1, [r0, #4]
   b6d50:	f7ff bfe2 	b.w	b6d18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6d54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6d58:	4604      	mov	r4, r0
   b6d5a:	461d      	mov	r5, r3
   b6d5c:	460f      	mov	r7, r1
   b6d5e:	ab01      	add	r3, sp, #4
   b6d60:	4690      	mov	r8, r2
   b6d62:	460a      	mov	r2, r1
   b6d64:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6d68:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6d6c:	f7ff fb52 	bl	b6414 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6d70:	1cae      	adds	r6, r5, #2
   b6d72:	6863      	ldr	r3, [r4, #4]
   b6d74:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6d76:	f1b9 0f00 	cmp.w	r9, #0
   b6d7a:	d126      	bne.n	b6dca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6d7c:	b328      	cbz	r0, b6dca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6d7e:	4433      	add	r3, r6
   b6d80:	1a1b      	subs	r3, r3, r0
   b6d82:	2bff      	cmp	r3, #255	; 0xff
   b6d84:	d809      	bhi.n	b6d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6d86:	9901      	ldr	r1, [sp, #4]
   b6d88:	4620      	mov	r0, r4
   b6d8a:	f7ff fe8a 	bl	b6aa2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6d8e:	6861      	ldr	r1, [r4, #4]
   b6d90:	4620      	mov	r0, r4
   b6d92:	4431      	add	r1, r6
   b6d94:	f7ff ff94 	bl	b6cc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6d98:	b918      	cbnz	r0, b6da2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6d9a:	6860      	ldr	r0, [r4, #4]
}
   b6d9c:	b003      	add	sp, #12
   b6d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6da2:	1c6a      	adds	r2, r5, #1
   b6da4:	9901      	ldr	r1, [sp, #4]
   b6da6:	b2d2      	uxtb	r2, r2
   b6da8:	4620      	mov	r0, r4
   b6daa:	f7ff ffb5 	bl	b6d18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6dae:	9901      	ldr	r1, [sp, #4]
   b6db0:	463a      	mov	r2, r7
   b6db2:	3101      	adds	r1, #1
   b6db4:	4620      	mov	r0, r4
   b6db6:	f7ff ffaf 	bl	b6d18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6dba:	9901      	ldr	r1, [sp, #4]
   b6dbc:	462b      	mov	r3, r5
   b6dbe:	4642      	mov	r2, r8
   b6dc0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	f7ff ff85 	bl	b6cd2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6dc8:	e7e7      	b.n	b6d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6dca:	18f1      	adds	r1, r6, r3
   b6dcc:	29ff      	cmp	r1, #255	; 0xff
   b6dce:	d8e4      	bhi.n	b6d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6dd0:	4620      	mov	r0, r4
   b6dd2:	f7ff ff75 	bl	b6cc0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6dd6:	2800      	cmp	r0, #0
   b6dd8:	d0df      	beq.n	b6d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6dda:	1c69      	adds	r1, r5, #1
   b6ddc:	b2c9      	uxtb	r1, r1
   b6dde:	4620      	mov	r0, r4
   b6de0:	f7ff ffb4 	bl	b6d4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6de4:	4639      	mov	r1, r7
   b6de6:	4620      	mov	r0, r4
   b6de8:	f7ff ffb0 	bl	b6d4c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6dec:	6861      	ldr	r1, [r4, #4]
   b6dee:	462b      	mov	r3, r5
   b6df0:	4642      	mov	r2, r8
   b6df2:	e7e6      	b.n	b6dc2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6df4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6df4:	b430      	push	{r4, r5}
   b6df6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6dfa:	b11a      	cbz	r2, b6e04 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6dfc:	9502      	str	r5, [sp, #8]
}
   b6dfe:	bc30      	pop	{r4, r5}
   b6e00:	f7ff bfa8 	b.w	b6d54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6e04:	6840      	ldr	r0, [r0, #4]
}
   b6e06:	bc30      	pop	{r4, r5}
   b6e08:	4770      	bx	lr

000b6e0a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6e0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6e0c:	2300      	movs	r3, #0
   b6e0e:	e9c0 3300 	strd	r3, r3, [r0]
   b6e12:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6e14:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6e16:	9300      	str	r3, [sp, #0]
   b6e18:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6e1a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6e1e:	4619      	mov	r1, r3
   b6e20:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6e24:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6e26:	f7ff ffe5 	bl	b6df4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6e2a:	4620      	mov	r0, r4
   b6e2c:	b004      	add	sp, #16
   b6e2e:	bd10      	pop	{r4, pc}

000b6e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6e30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e34:	4604      	mov	r4, r0
   b6e36:	460d      	mov	r5, r1
   b6e38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6e3a:	d914      	bls.n	b6e66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6e3c:	4290      	cmp	r0, r2
   b6e3e:	d213      	bcs.n	b6e68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6e40:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6e44:	1a75      	subs	r5, r6, r1
   b6e46:	f1a1 0708 	sub.w	r7, r1, #8
   b6e4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6e4c:	42b7      	cmp	r7, r6
   b6e4e:	d018      	beq.n	b6e82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6e50:	b11c      	cbz	r4, b6e5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6e52:	4631      	mov	r1, r6
   b6e54:	4620      	mov	r0, r4
   b6e56:	f7ff fea8 	bl	b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6e5a:	1d30      	adds	r0, r6, #4
   b6e5c:	f7fd fe98 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6e60:	3e08      	subs	r6, #8
   b6e62:	3c08      	subs	r4, #8
   b6e64:	e7f2      	b.n	b6e4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6e66:	d00c      	beq.n	b6e82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6e68:	42b5      	cmp	r5, r6
   b6e6a:	d00a      	beq.n	b6e82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6e6c:	b11c      	cbz	r4, b6e76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6e6e:	4629      	mov	r1, r5
   b6e70:	4620      	mov	r0, r4
   b6e72:	f7ff fe9a 	bl	b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6e76:	1d28      	adds	r0, r5, #4
   b6e78:	f7fd fe8a 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6e7c:	3508      	adds	r5, #8
   b6e7e:	3408      	adds	r4, #8
   b6e80:	e7f2      	b.n	b6e68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6e86:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6e88:	6846      	ldr	r6, [r0, #4]
   b6e8a:	4668      	mov	r0, sp
   b6e8c:	f7ff fe8d 	bl	b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e90:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6e94:	429f      	cmp	r7, r3
   b6e96:	db12      	blt.n	b6ebe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6e98:	3701      	adds	r7, #1
        if (n > 0) {
   b6e9a:	2f00      	cmp	r7, #0
   b6e9c:	dd29      	ble.n	b6ef2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6e9e:	00f8      	lsls	r0, r7, #3
   b6ea0:	f7fd fd46 	bl	b4930 <malloc>
            if (!d) {
   b6ea4:	4605      	mov	r5, r0
   b6ea6:	b1f0      	cbz	r0, b6ee6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6ea8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6eac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6eb0:	f7ff ffbe 	bl	b6e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6eb4:	6820      	ldr	r0, [r4, #0]
   b6eb6:	f7fd fd43 	bl	b4940 <free>
        data_ = d;
   b6eba:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6ebc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6ebe:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6ec0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ec2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6ec6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6eca:	4631      	mov	r1, r6
   b6ecc:	f106 0008 	add.w	r0, r6, #8
   b6ed0:	f7ff ffae 	bl	b6e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6ed4:	b11e      	cbz	r6, b6ede <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6ed6:	4669      	mov	r1, sp
   b6ed8:	4630      	mov	r0, r6
   b6eda:	f7ff fe66 	bl	b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6ede:	6863      	ldr	r3, [r4, #4]
   b6ee0:	3301      	adds	r3, #1
   b6ee2:	6063      	str	r3, [r4, #4]
    return true;
   b6ee4:	2501      	movs	r5, #1
   b6ee6:	a801      	add	r0, sp, #4
   b6ee8:	f7fd fe52 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6eec:	4628      	mov	r0, r5
   b6eee:	b003      	add	sp, #12
   b6ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6ef2:	2500      	movs	r5, #0
   b6ef4:	e7de      	b.n	b6eb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6ef6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6ef8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6efc:	4605      	mov	r5, r0
   b6efe:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6f00:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6f04:	42a6      	cmp	r6, r4
   b6f06:	d005      	beq.n	b6f14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6f08:	4639      	mov	r1, r7
   b6f0a:	4620      	mov	r0, r4
   b6f0c:	f7ff fd11 	bl	b6932 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6f10:	b108      	cbz	r0, b6f16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6f12:	b914      	cbnz	r4, b6f1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6f16:	3408      	adds	r4, #8
   b6f18:	e7f4      	b.n	b6f04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6f1a:	1d20      	adds	r0, r4, #4
   b6f1c:	f7fd fe38 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6f20:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6f24:	f104 0108 	add.w	r1, r4, #8
   b6f28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6f2c:	4620      	mov	r0, r4
   b6f2e:	f7ff ff7f 	bl	b6e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6f32:	686b      	ldr	r3, [r5, #4]
   b6f34:	3b01      	subs	r3, #1
   b6f36:	606b      	str	r3, [r5, #4]
    return true;
   b6f38:	e7ec      	b.n	b6f14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6f3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f40:	4605      	mov	r5, r0
   b6f42:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6f44:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6f46:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6f48:	f7ff fad0 	bl	b64ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6f4c:	682e      	ldr	r6, [r5, #0]
   b6f4e:	1ef3      	subs	r3, r6, #3
   b6f50:	2b0d      	cmp	r3, #13
   b6f52:	d83c      	bhi.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6f54:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6f58:	0057000e 	.word	0x0057000e
   b6f5c:	00d3003b 	.word	0x00d3003b
   b6f60:	003b003b 	.word	0x003b003b
   b6f64:	003b003b 	.word	0x003b003b
   b6f68:	009d003b 	.word	0x009d003b
   b6f6c:	009d009d 	.word	0x009d009d
   b6f70:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b6f74:	a804      	add	r0, sp, #16
   b6f76:	f7ff fca7 	bl	b68c8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b6f7a:	9b04      	ldr	r3, [sp, #16]
   b6f7c:	89aa      	ldrh	r2, [r5, #12]
   b6f7e:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b6f80:	6869      	ldr	r1, [r5, #4]
   b6f82:	9804      	ldr	r0, [sp, #16]
   b6f84:	3108      	adds	r1, #8
   b6f86:	3002      	adds	r0, #2
   b6f88:	f7ff faca 	bl	b6520 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6f8c:	a904      	add	r1, sp, #16
   b6f8e:	a806      	add	r0, sp, #24
   b6f90:	f7ff fe0b 	bl	b6baa <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6f94:	a906      	add	r1, sp, #24
   b6f96:	f104 0018 	add.w	r0, r4, #24
   b6f9a:	f7ff ff73 	bl	b6e84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6f9e:	4605      	mov	r5, r0
   b6fa0:	a807      	add	r0, sp, #28
   b6fa2:	f7fd fdf5 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6fa6:	b9c5      	cbnz	r5, b6fda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6fa8:	2320      	movs	r3, #32
   b6faa:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b6fae:	4b5e      	ldr	r3, [pc, #376]	; (b7128 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6fb0:	495e      	ldr	r1, [pc, #376]	; (b712c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6fb2:	9300      	str	r3, [sp, #0]
   b6fb4:	aa06      	add	r2, sp, #24
   b6fb6:	462b      	mov	r3, r5
   b6fb8:	2001      	movs	r0, #1
   b6fba:	f7fd fc15 	bl	b47e8 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6fbe:	9b04      	ldr	r3, [sp, #16]
   b6fc0:	4629      	mov	r1, r5
   b6fc2:	8818      	ldrh	r0, [r3, #0]
   b6fc4:	f7fd fb86 	bl	b46d4 <hal_ble_gap_disconnect>
   b6fc8:	a805      	add	r0, sp, #20
   b6fca:	f7fd fde1 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b6fce:	a803      	add	r0, sp, #12
   b6fd0:	f7ff fa9a 	bl	b6508 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6fd4:	b00e      	add	sp, #56	; 0x38
   b6fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6fdc:	b123      	cbz	r3, b6fe8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b6fde:	a904      	add	r1, sp, #16
   b6fe0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6fe4:	f7ff fe63 	bl	b6cae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6fe8:	a805      	add	r0, sp, #20
   b6fea:	f7fd fdd1 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b6fee:	2120      	movs	r1, #32
   b6ff0:	2300      	movs	r3, #0
   b6ff2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b6ff6:	4a4e      	ldr	r2, [pc, #312]	; (b7130 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b6ff8:	9200      	str	r2, [sp, #0]
   b6ffa:	494c      	ldr	r1, [pc, #304]	; (b712c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6ffc:	aa06      	add	r2, sp, #24
   b6ffe:	2001      	movs	r0, #1
   b7000:	f7fd fbf2 	bl	b47e8 <log_message>
   b7004:	e7e3      	b.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7006:	89a9      	ldrh	r1, [r5, #12]
   b7008:	4620      	mov	r0, r4
   b700a:	f7ff fbc7 	bl	b679c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b700e:	4606      	mov	r6, r0
   b7010:	2800      	cmp	r0, #0
   b7012:	d0dc      	beq.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7014:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7016:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b701a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b701e:	8029      	strh	r1, [r5, #0]
   b7020:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7024:	429a      	cmp	r2, r3
   b7026:	d003      	beq.n	b7030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7028:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b702c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b702e:	e7f9      	b.n	b7024 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7030:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7034:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7038:	45b8      	cmp	r8, r7
   b703a:	d004      	beq.n	b7046 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b703c:	1d38      	adds	r0, r7, #4
   b703e:	f7fd fda7 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7042:	3708      	adds	r7, #8
   b7044:	e7f8      	b.n	b7038 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b7046:	2300      	movs	r3, #0
   b7048:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b704a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b704e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7052:	45b8      	cmp	r8, r7
   b7054:	d004      	beq.n	b7060 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b7056:	1d38      	adds	r0, r7, #4
   b7058:	f7fd fd9a 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b705c:	3708      	adds	r7, #8
   b705e:	e7f8      	b.n	b7052 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7060:	2300      	movs	r3, #0
   b7062:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7064:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b7066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7068:	b123      	cbz	r3, b7074 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b706a:	4631      	mov	r1, r6
   b706c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7070:	f7ff fe1d 	bl	b6cae <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7074:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7076:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b707a:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b707c:	4631      	mov	r1, r6
   b707e:	f104 0018 	add.w	r0, r4, #24
   b7082:	f7ff ff38 	bl	b6ef6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7086:	2220      	movs	r2, #32
   b7088:	2300      	movs	r3, #0
   b708a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b708e:	4a29      	ldr	r2, [pc, #164]	; (b7134 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7090:	e7b2      	b.n	b6ff8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7092:	89a9      	ldrh	r1, [r5, #12]
   b7094:	4620      	mov	r0, r4
   b7096:	f7ff fb81 	bl	b679c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b709a:	2800      	cmp	r0, #0
   b709c:	d097      	beq.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b709e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b70a0:	2b00      	cmp	r3, #0
   b70a2:	d094      	beq.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b70a4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b70a6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b70a8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b70ac:	d001      	beq.n	b70b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b70ae:	2e10      	cmp	r6, #16
   b70b0:	d117      	bne.n	b70e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b70b2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b70b4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b70b6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b70b8:	2506      	movs	r5, #6
                        };
   b70ba:	f88d 3015 	strb.w	r3, [sp, #21]
   b70be:	9104      	str	r1, [sp, #16]
   b70c0:	f88d 2014 	strb.w	r2, [sp, #20]
   b70c4:	9006      	str	r0, [sp, #24]
   b70c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b70ca:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b70cc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b70d0:	9508      	str	r5, [sp, #32]
   b70d2:	e883 0003 	stmia.w	r3, {r0, r1}
   b70d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b70d8:	a906      	add	r1, sp, #24
   b70da:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b70de:	4798      	blx	r3
   b70e0:	e775      	b.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b70e2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b70e4:	bf01      	itttt	eq
   b70e6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b70e8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b70ea:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b70ee:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b70f0:	bf0f      	iteee	eq
   b70f2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b70f6:	461a      	movne	r2, r3
   b70f8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b70fa:	461d      	movne	r5, r3
   b70fc:	e7dd      	b.n	b70ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b70fe:	89a9      	ldrh	r1, [r5, #12]
   b7100:	4620      	mov	r0, r4
   b7102:	f7ff fb4b 	bl	b679c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7106:	4601      	mov	r1, r0
   b7108:	2800      	cmp	r0, #0
   b710a:	f43f af60 	beq.w	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b710e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7110:	2b00      	cmp	r3, #0
   b7112:	f43f af5c 	beq.w	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7116:	686b      	ldr	r3, [r5, #4]
   b7118:	9306      	str	r3, [sp, #24]
   b711a:	aa06      	add	r2, sp, #24
   b711c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b711e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7122:	4798      	blx	r3
   b7124:	e753      	b.n	b6fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7126:	bf00      	nop
   b7128:	000b82b0 	.word	0x000b82b0
   b712c:	000b822f 	.word	0x000b822f
   b7130:	000b82d6 	.word	0x000b82d6
   b7134:	000b82e0 	.word	0x000b82e0

000b7138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7138:	b538      	push	{r3, r4, r5, lr}
   b713a:	4605      	mov	r5, r0
   b713c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b713e:	f7fe f842 	bl	b51c6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7142:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7144:	68a2      	ldr	r2, [r4, #8]
   b7146:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7148:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b714a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b714c:	68e2      	ldr	r2, [r4, #12]
   b714e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7150:	60e3      	str	r3, [r4, #12]
      }
   b7152:	bd38      	pop	{r3, r4, r5, pc}

000b7154 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7154:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7156:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7158:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b715a:	344c      	adds	r4, #76	; 0x4c
   b715c:	b1b9      	cbz	r1, b718e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b715e:	e9cd 1200 	strd	r1, r2, [sp]
   b7162:	a802      	add	r0, sp, #8
   b7164:	4669      	mov	r1, sp
   b7166:	f7ff fce9 	bl	b6b3c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b716a:	2300      	movs	r3, #0
	__x.swap(*this);
   b716c:	a906      	add	r1, sp, #24
   b716e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7170:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7172:	f7ff ffe1 	bl	b7138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7176:	4621      	mov	r1, r4
   b7178:	a806      	add	r0, sp, #24
   b717a:	f7ff ffdd 	bl	b7138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b717e:	a806      	add	r0, sp, #24
   b7180:	f7fe f818 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
   b7184:	a802      	add	r0, sp, #8
   b7186:	f7fe f815 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
}
   b718a:	b00a      	add	sp, #40	; 0x28
   b718c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b718e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7190:	e7eb      	b.n	b716a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b7192 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7192:	b570      	push	{r4, r5, r6, lr}
   b7194:	4604      	mov	r4, r0
   b7196:	b08c      	sub	sp, #48	; 0x30
   b7198:	460e      	mov	r6, r1
   b719a:	9201      	str	r2, [sp, #4]
   b719c:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b719e:	f7ff fadd 	bl	b675c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b71a2:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b71a4:	9901      	ldr	r1, [sp, #4]
   b71a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b71aa:	f000 fba6 	bl	b78fa <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b71ae:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b71b2:	b1cd      	cbz	r5, b71e8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b71b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b71b6:	9502      	str	r5, [sp, #8]
   b71b8:	a902      	add	r1, sp, #8
   b71ba:	a804      	add	r0, sp, #16
   b71bc:	9303      	str	r3, [sp, #12]
   b71be:	f7ff fcbd 	bl	b6b3c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b71c2:	2300      	movs	r3, #0
	__x.swap(*this);
   b71c4:	a908      	add	r1, sp, #32
   b71c6:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b71c8:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b71ca:	f7ff ffb5 	bl	b7138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b71ce:	4631      	mov	r1, r6
   b71d0:	a808      	add	r0, sp, #32
   b71d2:	f7ff ffb1 	bl	b7138 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b71d6:	a808      	add	r0, sp, #32
   b71d8:	f7fd ffec 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
   b71dc:	a804      	add	r0, sp, #16
   b71de:	f7fd ffe9 	bl	b51b4 <_ZNSt14_Function_baseD1Ev>
    }
   b71e2:	4620      	mov	r0, r4
   b71e4:	b00c      	add	sp, #48	; 0x30
   b71e6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b71e8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b71ea:	e7ea      	b.n	b71c2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b71ec <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b71ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b71f0:	b087      	sub	sp, #28
   b71f2:	461d      	mov	r5, r3
   b71f4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b71f8:	4680      	mov	r8, r0
   b71fa:	468b      	mov	fp, r1
   b71fc:	4692      	mov	sl, r2
   b71fe:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7200:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7202:	2200      	movs	r2, #0
   b7204:	2068      	movs	r0, #104	; 0x68
   b7206:	9102      	str	r1, [sp, #8]
   b7208:	9204      	str	r2, [sp, #16]
   b720a:	f7fc ff54 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b720e:	1e06      	subs	r6, r0, #0
   b7210:	f106 090c 	add.w	r9, r6, #12
   b7214:	d018      	beq.n	b7248 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7216:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7218:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b721a:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b721e:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7220:	4a15      	ldr	r2, [pc, #84]	; (b7278 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7222:	f847 2b20 	str.w	r2, [r7], #32
   b7226:	9b03      	ldr	r3, [sp, #12]
   b7228:	9100      	str	r1, [sp, #0]
   b722a:	465a      	mov	r2, fp
   b722c:	4651      	mov	r1, sl
   b722e:	4648      	mov	r0, r9
   b7230:	f7ff ffaf 	bl	b7192 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7236:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7238:	682b      	ldr	r3, [r5, #0]
   b723a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b723c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b723e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7244:	6823      	ldr	r3, [r4, #0]
   b7246:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7248:	a904      	add	r1, sp, #16
   b724a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b724c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7250:	f7ff fd1c 	bl	b6c8c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7254:	a805      	add	r0, sp, #20
   b7256:	f7fd fc9b 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b725a:	f8d8 3000 	ldr.w	r3, [r8]
   b725e:	b93b      	cbnz	r3, b7270 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7260:	4a06      	ldr	r2, [pc, #24]	; (b727c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7262:	4907      	ldr	r1, [pc, #28]	; (b7280 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7264:	200a      	movs	r0, #10
}
   b7266:	b007      	add	sp, #28
   b7268:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b726c:	f7fd bab4 	b.w	b47d8 <panic_>
}
   b7270:	b007      	add	sp, #28
   b7272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7276:	bf00      	nop
   b7278:	000b8348 	.word	0x000b8348
   b727c:	000b4799 	.word	0x000b4799
   b7280:	000b8218 	.word	0x000b8218

000b7284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7284:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7288:	4604      	mov	r4, r0
   b728a:	460d      	mov	r5, r1
   b728c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b728e:	d914      	bls.n	b72ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7290:	4290      	cmp	r0, r2
   b7292:	d213      	bcs.n	b72bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7294:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7298:	1a75      	subs	r5, r6, r1
   b729a:	f1a1 0708 	sub.w	r7, r1, #8
   b729e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b72a0:	42b7      	cmp	r7, r6
   b72a2:	d018      	beq.n	b72d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b72a4:	b11c      	cbz	r4, b72ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b72a6:	4631      	mov	r1, r6
   b72a8:	4620      	mov	r0, r4
   b72aa:	f7ff fc74 	bl	b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b72ae:	1d30      	adds	r0, r6, #4
   b72b0:	f7fd fc6e 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b72b4:	3e08      	subs	r6, #8
   b72b6:	3c08      	subs	r4, #8
   b72b8:	e7f2      	b.n	b72a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b72ba:	d00c      	beq.n	b72d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b72bc:	42b5      	cmp	r5, r6
   b72be:	d00a      	beq.n	b72d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b72c0:	b11c      	cbz	r4, b72ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b72c2:	4629      	mov	r1, r5
   b72c4:	4620      	mov	r0, r4
   b72c6:	f7ff fc66 	bl	b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b72ca:	1d28      	adds	r0, r5, #4
   b72cc:	f7fd fc60 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b72d0:	3508      	adds	r5, #8
   b72d2:	3408      	adds	r4, #8
   b72d4:	e7f2      	b.n	b72bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b72d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b72d8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b72da:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b72dc:	4605      	mov	r5, r0
        if (n > 0) {
   b72de:	dd11      	ble.n	b7304 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b72e0:	00f0      	lsls	r0, r6, #3
   b72e2:	f7fd fb25 	bl	b4930 <malloc>
            if (!d) {
   b72e6:	4604      	mov	r4, r0
   b72e8:	b158      	cbz	r0, b7302 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b72ea:	e9d5 1200 	ldrd	r1, r2, [r5]
   b72ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b72f2:	f7ff ffc7 	bl	b7284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b72f6:	6828      	ldr	r0, [r5, #0]
   b72f8:	f7fd fb22 	bl	b4940 <free>
        data_ = d;
   b72fc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b72fe:	60ae      	str	r6, [r5, #8]
        return true;
   b7300:	2001      	movs	r0, #1
    }
   b7302:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7304:	2400      	movs	r4, #0
   b7306:	e7f6      	b.n	b72f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7308 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7308:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b730a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b730c:	6845      	ldr	r5, [r0, #4]
   b730e:	4668      	mov	r0, sp
   b7310:	f7ff fc41 	bl	b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7314:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7318:	4299      	cmp	r1, r3
   b731a:	da10      	bge.n	b733e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b731c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b731e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7320:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7324:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7328:	4629      	mov	r1, r5
   b732a:	f105 0008 	add.w	r0, r5, #8
   b732e:	f7ff ffa9 	bl	b7284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7332:	b98d      	cbnz	r5, b7358 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7334:	6863      	ldr	r3, [r4, #4]
   b7336:	3301      	adds	r3, #1
   b7338:	6063      	str	r3, [r4, #4]
    return true;
   b733a:	2601      	movs	r6, #1
   b733c:	e006      	b.n	b734c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b733e:	3101      	adds	r1, #1
   b7340:	4620      	mov	r0, r4
   b7342:	f7ff ffc9 	bl	b72d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7346:	4606      	mov	r6, r0
   b7348:	2800      	cmp	r0, #0
   b734a:	d1e7      	bne.n	b731c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b734c:	a801      	add	r0, sp, #4
   b734e:	f7fd fc1f 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7352:	4630      	mov	r0, r6
   b7354:	b002      	add	sp, #8
   b7356:	bd70      	pop	{r4, r5, r6, pc}
   b7358:	4669      	mov	r1, sp
   b735a:	4628      	mov	r0, r5
   b735c:	f7ff fc1b 	bl	b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7360:	e7e8      	b.n	b7334 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7362:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7366:	4604      	mov	r4, r0
   b7368:	460d      	mov	r5, r1
   b736a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b736c:	d914      	bls.n	b7398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b736e:	4290      	cmp	r0, r2
   b7370:	d213      	bcs.n	b739a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7372:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7376:	1a75      	subs	r5, r6, r1
   b7378:	f1a1 0708 	sub.w	r7, r1, #8
   b737c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b737e:	42b7      	cmp	r7, r6
   b7380:	d018      	beq.n	b73b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7382:	b11c      	cbz	r4, b738c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7384:	4631      	mov	r1, r6
   b7386:	4620      	mov	r0, r4
   b7388:	f7ff fbf7 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b738c:	1d30      	adds	r0, r6, #4
   b738e:	f7fd fbff 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7392:	3e08      	subs	r6, #8
   b7394:	3c08      	subs	r4, #8
   b7396:	e7f2      	b.n	b737e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7398:	d00c      	beq.n	b73b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b739a:	42b5      	cmp	r5, r6
   b739c:	d00a      	beq.n	b73b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b739e:	b11c      	cbz	r4, b73a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b73a0:	4629      	mov	r1, r5
   b73a2:	4620      	mov	r0, r4
   b73a4:	f7ff fbe9 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b73a8:	1d28      	adds	r0, r5, #4
   b73aa:	f7fd fbf1 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b73ae:	3508      	adds	r5, #8
   b73b0:	3408      	adds	r4, #8
   b73b2:	e7f2      	b.n	b739a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b73b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b73b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b73b6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b73b8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b73ba:	4605      	mov	r5, r0
        if (n > 0) {
   b73bc:	dd11      	ble.n	b73e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b73be:	00f0      	lsls	r0, r6, #3
   b73c0:	f7fd fab6 	bl	b4930 <malloc>
            if (!d) {
   b73c4:	4604      	mov	r4, r0
   b73c6:	b158      	cbz	r0, b73e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b73c8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b73cc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b73d0:	f7ff ffc7 	bl	b7362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b73d4:	6828      	ldr	r0, [r5, #0]
   b73d6:	f7fd fab3 	bl	b4940 <free>
        data_ = d;
   b73da:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b73dc:	60ae      	str	r6, [r5, #8]
        return true;
   b73de:	2001      	movs	r0, #1
    }
   b73e0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b73e2:	2400      	movs	r4, #0
   b73e4:	e7f6      	b.n	b73d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b73e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b73e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73e8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b73ea:	6845      	ldr	r5, [r0, #4]
   b73ec:	4668      	mov	r0, sp
   b73ee:	f7ff fbc4 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b73f2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b73f6:	4299      	cmp	r1, r3
   b73f8:	da10      	bge.n	b741c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b73fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b73fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b73fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7402:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7406:	4629      	mov	r1, r5
   b7408:	f105 0008 	add.w	r0, r5, #8
   b740c:	f7ff ffa9 	bl	b7362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7410:	b98d      	cbnz	r5, b7436 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7412:	6863      	ldr	r3, [r4, #4]
   b7414:	3301      	adds	r3, #1
   b7416:	6063      	str	r3, [r4, #4]
    return true;
   b7418:	2601      	movs	r6, #1
   b741a:	e006      	b.n	b742a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b741c:	3101      	adds	r1, #1
   b741e:	4620      	mov	r0, r4
   b7420:	f7ff ffc9 	bl	b73b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7424:	4606      	mov	r6, r0
   b7426:	2800      	cmp	r0, #0
   b7428:	d1e7      	bne.n	b73fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b742a:	a801      	add	r0, sp, #4
   b742c:	f7fd fbb0 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7430:	4630      	mov	r0, r6
   b7432:	b002      	add	sp, #8
   b7434:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7436:	4669      	mov	r1, sp
   b7438:	4628      	mov	r0, r5
   b743a:	f7ff fb9e 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b743e:	e7e8      	b.n	b7412 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7440 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b7440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7444:	4617      	mov	r7, r2
   b7446:	b0a1      	sub	sp, #132	; 0x84
   b7448:	4680      	mov	r8, r0
    WiringBleLock lk;
   b744a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b744c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b744e:	f7ff f84d 	bl	b64ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7452:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b7454:	7923      	ldrb	r3, [r4, #4]
   b7456:	b953      	cbnz	r3, b746e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b7458:	4639      	mov	r1, r7
   b745a:	4640      	mov	r0, r8
   b745c:	f7ff fb8d 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b7460:	a80a      	add	r0, sp, #40	; 0x28
   b7462:	f7ff f851 	bl	b6508 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b7466:	4640      	mov	r0, r8
   b7468:	b021      	add	sp, #132	; 0x84
   b746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b746e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b7470:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b7474:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b7478:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b747a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b747e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b7482:	9b03      	ldr	r3, [sp, #12]
   b7484:	429d      	cmp	r5, r3
   b7486:	d021      	beq.n	b74cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b7488:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b748c:	4658      	mov	r0, fp
   b748e:	f109 0114 	add.w	r1, r9, #20
   b7492:	f7ff f8d8 	bl	b6646 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b7496:	b1b8      	cbz	r0, b74c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b7498:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b749c:	4650      	mov	r0, sl
   b749e:	f7ff f8d2 	bl	b6646 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b74a2:	b188      	cbz	r0, b74c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b74a4:	6823      	ldr	r3, [r4, #0]
   b74a6:	f8d9 2000 	ldr.w	r2, [r9]
   b74aa:	4053      	eors	r3, r2
   b74ac:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b74b0:	d10a      	bne.n	b74c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b74b2:	2220      	movs	r2, #32
   b74b4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b74b8:	4a5e      	ldr	r2, [pc, #376]	; (b7634 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b74ba:	9200      	str	r2, [sp, #0]
   b74bc:	aa15      	add	r2, sp, #84	; 0x54
   b74be:	495e      	ldr	r1, [pc, #376]	; (b7638 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b74c0:	2032      	movs	r0, #50	; 0x32
   b74c2:	f7fd f991 	bl	b47e8 <log_message>
   b74c6:	e7c7      	b.n	b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b74c8:	3508      	adds	r5, #8
   b74ca:	e7da      	b.n	b7482 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b74cc:	4650      	mov	r0, sl
   b74ce:	f7ff f88b 	bl	b65e8 <_ZNK8particle7BleUuid7isValidEv>
   b74d2:	b960      	cbnz	r0, b74ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b74d4:	4959      	ldr	r1, [pc, #356]	; (b763c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b74d6:	2201      	movs	r2, #1
   b74d8:	a815      	add	r0, sp, #84	; 0x54
   b74da:	ad15      	add	r5, sp, #84	; 0x54
   b74dc:	f7ff f85c 	bl	b6598 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b74e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74e2:	46d4      	mov	ip, sl
   b74e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b74e8:	682b      	ldr	r3, [r5, #0]
   b74ea:	f8cc 3000 	str.w	r3, [ip]
   b74ee:	6833      	ldr	r3, [r6, #0]
   b74f0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b74f4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b74f8:	455d      	cmp	r5, fp
   b74fa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b74fc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b74fe:	d06e      	beq.n	b75de <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b7500:	f855 0b08 	ldr.w	r0, [r5], #8
   b7504:	f7ff f89f 	bl	b6646 <_ZNK8particle7BleUuideqERKS0_>
   b7508:	2800      	cmp	r0, #0
   b750a:	d0f5      	beq.n	b74f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b750c:	f104 0a14 	add.w	sl, r4, #20
   b7510:	4650      	mov	r0, sl
   b7512:	f7ff f869 	bl	b65e8 <_ZNK8particle7BleUuid7isValidEv>
   b7516:	b988      	cbnz	r0, b753c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b7518:	4b49      	ldr	r3, [pc, #292]	; (b7640 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b751a:	4948      	ldr	r1, [pc, #288]	; (b763c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b751c:	881a      	ldrh	r2, [r3, #0]
   b751e:	3201      	adds	r2, #1
   b7520:	b292      	uxth	r2, r2
   b7522:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b7524:	a815      	add	r0, sp, #84	; 0x54
   b7526:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b7528:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b752a:	f7ff f854 	bl	b65d6 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b752e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7530:	46d4      	mov	ip, sl
   b7532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7536:	682b      	ldr	r3, [r5, #0]
   b7538:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b753c:	4b41      	ldr	r3, [pc, #260]	; (b7644 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b753e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b7540:	2228      	movs	r2, #40	; 0x28
   b7542:	2100      	movs	r1, #0
   b7544:	a816      	add	r0, sp, #88	; 0x58
   b7546:	f000 fb89 	bl	b7c5c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b754a:	4651      	mov	r1, sl
   b754c:	a804      	add	r0, sp, #16
   b754e:	f7ff f85d 	bl	b660c <_ZN8particle7BleUuid7halUUIDEv>
   b7552:	ab04      	add	r3, sp, #16
   b7554:	aa18      	add	r2, sp, #96	; 0x60
   b7556:	f10d 0c20 	add.w	ip, sp, #32
   b755a:	6818      	ldr	r0, [r3, #0]
   b755c:	6859      	ldr	r1, [r3, #4]
   b755e:	4615      	mov	r5, r2
   b7560:	c503      	stmia	r5!, {r0, r1}
   b7562:	3308      	adds	r3, #8
   b7564:	4563      	cmp	r3, ip
   b7566:	462a      	mov	r2, r5
   b7568:	d1f7      	bne.n	b755a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b756a:	6818      	ldr	r0, [r3, #0]
   b756c:	6028      	str	r0, [r5, #0]
    return value_;
   b756e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b7570:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b7574:	f8d9 3000 	ldr.w	r3, [r9]
   b7578:	8a9b      	ldrh	r3, [r3, #20]
   b757a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b757e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7580:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b7582:	4b31      	ldr	r3, [pc, #196]	; (b7648 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b7584:	2200      	movs	r2, #0
   b7586:	1da1      	adds	r1, r4, #6
   b7588:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b758a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b758e:	f7fd f8d3 	bl	b4738 <hal_ble_gatt_server_add_characteristic>
   b7592:	2800      	cmp	r0, #0
   b7594:	f47f af60 	bne.w	b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b7598:	2301      	movs	r3, #1
   b759a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b759c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b759e:	4639      	mov	r1, r7
        return characteristics_;
   b75a0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b75a2:	a80d      	add	r0, sp, #52	; 0x34
   b75a4:	f7ff fae9 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b75a8:	4620      	mov	r0, r4
   b75aa:	a90d      	add	r1, sp, #52	; 0x34
   b75ac:	f7ff ff1b 	bl	b73e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b75b0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b75b2:	a80e      	add	r0, sp, #56	; 0x38
   b75b4:	f7fd faec 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75b8:	2c00      	cmp	r4, #0
   b75ba:	f47f af4d 	bne.w	b7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b75be:	2320      	movs	r3, #32
   b75c0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b75c4:	4b21      	ldr	r3, [pc, #132]	; (b764c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b75c6:	9300      	str	r3, [sp, #0]
   b75c8:	aa0d      	add	r2, sp, #52	; 0x34
   b75ca:	4623      	mov	r3, r4
   b75cc:	e777      	b.n	b74be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b75ce:	4639      	mov	r1, r7
   b75d0:	4640      	mov	r0, r8
   b75d2:	f7ff fad2 	bl	b6b7a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b75d6:	a80c      	add	r0, sp, #48	; 0x30
   b75d8:	f7fd fada 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75dc:	e740      	b.n	b7460 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b75de:	a80b      	add	r0, sp, #44	; 0x2c
   b75e0:	f7ff f94e 	bl	b6880 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b75e4:	4651      	mov	r1, sl
   b75e6:	a815      	add	r0, sp, #84	; 0x54
   b75e8:	f7ff f810 	bl	b660c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b75ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b75ee:	2300      	movs	r3, #0
   b75f0:	3214      	adds	r2, #20
   b75f2:	a915      	add	r1, sp, #84	; 0x54
   b75f4:	2001      	movs	r0, #1
   b75f6:	f7fd f877 	bl	b46e8 <hal_ble_gatt_server_add_service>
   b75fa:	2800      	cmp	r0, #0
   b75fc:	d1e7      	bne.n	b75ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b75fe:	6835      	ldr	r5, [r6, #0]
   b7600:	a90b      	add	r1, sp, #44	; 0x2c
   b7602:	a80d      	add	r0, sp, #52	; 0x34
   b7604:	f7ff fac7 	bl	b6b96 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b7608:	4628      	mov	r0, r5
   b760a:	a90d      	add	r1, sp, #52	; 0x34
   b760c:	f7ff fe7c 	bl	b7308 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7610:	4605      	mov	r5, r0
   b7612:	a80e      	add	r0, sp, #56	; 0x38
   b7614:	f7fd fabc 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7618:	2d00      	cmp	r5, #0
   b761a:	d0d8      	beq.n	b75ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b761c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b761e:	6853      	ldr	r3, [r2, #4]
   b7620:	6812      	ldr	r2, [r2, #0]
   b7622:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b7626:	3b01      	subs	r3, #1
   b7628:	a80c      	add	r0, sp, #48	; 0x30
   b762a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b762e:	f7fd faaf 	bl	b4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7632:	e76b      	b.n	b750c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b7634:	000b82ed 	.word	0x000b82ed
   b7638:	000b822f 	.word	0x000b822f
   b763c:	000b8394 	.word	0x000b8394
   b7640:	2003e71c 	.word	0x2003e71c
   b7644:	002c0003 	.word	0x002c0003
   b7648:	000b6a19 	.word	0x000b6a19
   b764c:	000b8318 	.word	0x000b8318

000b7650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7650:	4802      	ldr	r0, [pc, #8]	; (b765c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7652:	2300      	movs	r3, #0
   b7654:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7656:	f7fc bffd 	b.w	b4654 <os_mutex_recursive_create>
   b765a:	bf00      	nop
   b765c:	2003e720 	.word	0x2003e720

000b7660 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7660:	4770      	bx	lr

000b7662 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7662:	7441      	strb	r1, [r0, #17]
}
   b7664:	4770      	bx	lr

000b7666 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7666:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7668:	7c00      	ldrb	r0, [r0, #16]
   b766a:	f7fc ffd3 	bl	b4614 <hal_usart_available_data_for_write>
}
   b766e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7672:	bd08      	pop	{r3, pc}

000b7674 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7674:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7676:	7c00      	ldrb	r0, [r0, #16]
   b7678:	f7fc ffac 	bl	b45d4 <hal_usart_available>
}
   b767c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7680:	bd08      	pop	{r3, pc}

000b7682 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7682:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7684:	7c00      	ldrb	r0, [r0, #16]
   b7686:	f7fc ffb5 	bl	b45f4 <hal_usart_peek>
}
   b768a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b768e:	bd08      	pop	{r3, pc}

000b7690 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7690:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7692:	7c00      	ldrb	r0, [r0, #16]
   b7694:	f7fc ffa6 	bl	b45e4 <hal_usart_read>
}
   b7698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b769c:	bd08      	pop	{r3, pc}

000b769e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b769e:	7c00      	ldrb	r0, [r0, #16]
   b76a0:	f7fc bfb0 	b.w	b4604 <hal_usart_flush>

000b76a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b76a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76a6:	7c45      	ldrb	r5, [r0, #17]
{
   b76a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76aa:	b12d      	cbz	r5, b76b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b76ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b76ae:	b003      	add	sp, #12
   b76b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b76b4:	f7fc bf86 	b.w	b45c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76b8:	7c00      	ldrb	r0, [r0, #16]
   b76ba:	9101      	str	r1, [sp, #4]
   b76bc:	f7fc ffaa 	bl	b4614 <hal_usart_available_data_for_write>
   b76c0:	2800      	cmp	r0, #0
   b76c2:	9901      	ldr	r1, [sp, #4]
   b76c4:	dcf2      	bgt.n	b76ac <_ZN11USARTSerial5writeEh+0x8>
}
   b76c6:	4628      	mov	r0, r5
   b76c8:	b003      	add	sp, #12
   b76ca:	bd30      	pop	{r4, r5, pc}

000b76cc <_ZN11USARTSerialD0Ev>:
   b76cc:	b510      	push	{r4, lr}
   b76ce:	2114      	movs	r1, #20
   b76d0:	4604      	mov	r4, r0
   b76d2:	f7fc fcf4 	bl	b40be <_ZdlPvj>
   b76d6:	4620      	mov	r0, r4
   b76d8:	bd10      	pop	{r4, pc}
	...

000b76dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b76dc:	b510      	push	{r4, lr}
   b76de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76e2:	4604      	mov	r4, r0
   b76e4:	4608      	mov	r0, r1
   b76e6:	4611      	mov	r1, r2
   b76e8:	2200      	movs	r2, #0
   b76ea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b76ee:	4b04      	ldr	r3, [pc, #16]	; (b7700 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b76f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b76f2:	2301      	movs	r3, #1
  _serial = serial;
   b76f4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b76f6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b76f8:	f7fc ff9c 	bl	b4634 <hal_usart_init_ex>
}
   b76fc:	4620      	mov	r0, r4
   b76fe:	bd10      	pop	{r4, pc}
   b7700:	000b83bc 	.word	0x000b83bc

000b7704 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7704:	7c00      	ldrb	r0, [r0, #16]
   b7706:	2300      	movs	r3, #0
   b7708:	f7fc bf8c 	b.w	b4624 <hal_usart_begin_config>

000b770c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b770c:	2200      	movs	r2, #0
   b770e:	f7ff bff9 	b.w	b7704 <_ZN11USARTSerial5beginEmm>

000b7712 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7712:	7c00      	ldrb	r0, [r0, #16]
   b7714:	f7fc bf4e 	b.w	b45b4 <hal_usart_end>

000b7718 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7718:	4b05      	ldr	r3, [pc, #20]	; (b7730 <_GLOBAL__sub_I_System+0x18>)
   b771a:	2202      	movs	r2, #2
   b771c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b771e:	4b05      	ldr	r3, [pc, #20]	; (b7734 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7720:	4a05      	ldr	r2, [pc, #20]	; (b7738 <_GLOBAL__sub_I_System+0x20>)
   b7722:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7724:	2000      	movs	r0, #0
   b7726:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b772a:	f7fd b8e5 	b.w	b48f8 <set_system_mode>
   b772e:	bf00      	nop
   b7730:	2003e734 	.word	0x2003e734
   b7734:	2003e728 	.word	0x2003e728
   b7738:	ffff0000 	.word	0xffff0000

000b773c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b773c:	2200      	movs	r2, #0
   b773e:	6840      	ldr	r0, [r0, #4]
   b7740:	4611      	mov	r1, r2
   b7742:	f7fd b8b1 	b.w	b48a8 <network_listening>

000b7746 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7746:	2200      	movs	r2, #0
   b7748:	6840      	ldr	r0, [r0, #4]
   b774a:	4611      	mov	r1, r2
   b774c:	f7fd b8bc 	b.w	b48c8 <network_get_listen_timeout>

000b7750 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7750:	6840      	ldr	r0, [r0, #4]
   b7752:	2200      	movs	r2, #0
   b7754:	f7fd b8b0 	b.w	b48b8 <network_set_listen_timeout>

000b7758 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7758:	6840      	ldr	r0, [r0, #4]
   b775a:	2200      	movs	r2, #0
   b775c:	f081 0101 	eor.w	r1, r1, #1
   b7760:	f7fd b89a 	b.w	b4898 <network_listen>

000b7764 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7764:	2300      	movs	r3, #0
   b7766:	6840      	ldr	r0, [r0, #4]
   b7768:	461a      	mov	r2, r3
   b776a:	4619      	mov	r1, r3
   b776c:	f7fd b88c 	b.w	b4888 <network_off>

000b7770 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7770:	2300      	movs	r3, #0
   b7772:	6840      	ldr	r0, [r0, #4]
   b7774:	461a      	mov	r2, r3
   b7776:	4619      	mov	r1, r3
   b7778:	f7fd b87e 	b.w	b4878 <network_on>

000b777c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b777c:	2200      	movs	r2, #0
   b777e:	6840      	ldr	r0, [r0, #4]
   b7780:	4611      	mov	r1, r2
   b7782:	f7fd b871 	b.w	b4868 <network_ready>

000b7786 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7786:	2200      	movs	r2, #0
   b7788:	6840      	ldr	r0, [r0, #4]
   b778a:	4611      	mov	r1, r2
   b778c:	f7fd b85c 	b.w	b4848 <network_connecting>

000b7790 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7790:	6840      	ldr	r0, [r0, #4]
   b7792:	2200      	movs	r2, #0
   b7794:	2102      	movs	r1, #2
   b7796:	f7fd b85f 	b.w	b4858 <network_disconnect>

000b779a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b779a:	2300      	movs	r3, #0
   b779c:	6840      	ldr	r0, [r0, #4]
   b779e:	461a      	mov	r2, r3
   b77a0:	f7fd b84a 	b.w	b4838 <network_connect>

000b77a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b77a4:	4b02      	ldr	r3, [pc, #8]	; (b77b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b77a6:	2203      	movs	r2, #3
   b77a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b77aa:	4a02      	ldr	r2, [pc, #8]	; (b77b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b77ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b77ae:	4770      	bx	lr
   b77b0:	2003e738 	.word	0x2003e738
   b77b4:	000b83ec 	.word	0x000b83ec

000b77b8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b77b8:	b510      	push	{r4, lr}
   b77ba:	4604      	mov	r4, r0
{
	free(buffer);
   b77bc:	6800      	ldr	r0, [r0, #0]
   b77be:	f7fd f8bf 	bl	b4940 <free>
}
   b77c2:	4620      	mov	r0, r4
   b77c4:	bd10      	pop	{r4, pc}

000b77c6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b77c6:	b510      	push	{r4, lr}
   b77c8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b77ca:	6800      	ldr	r0, [r0, #0]
   b77cc:	b108      	cbz	r0, b77d2 <_ZN6String10invalidateEv+0xc>
   b77ce:	f7fd f8b7 	bl	b4940 <free>
	buffer = NULL;
   b77d2:	2300      	movs	r3, #0
	capacity = len = 0;
   b77d4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b77d8:	6023      	str	r3, [r4, #0]
}
   b77da:	bd10      	pop	{r4, pc}

000b77dc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b77dc:	b538      	push	{r3, r4, r5, lr}
   b77de:	4604      	mov	r4, r0
   b77e0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b77e2:	6800      	ldr	r0, [r0, #0]
   b77e4:	3101      	adds	r1, #1
   b77e6:	f7fd f8b3 	bl	b4950 <realloc>
	if (newbuffer) {
   b77ea:	b110      	cbz	r0, b77f2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b77ec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b77f0:	2001      	movs	r0, #1
	}
	return 0;
}
   b77f2:	bd38      	pop	{r3, r4, r5, pc}

000b77f4 <_ZN6String7reserveEj>:
{
   b77f4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b77f6:	6803      	ldr	r3, [r0, #0]
{
   b77f8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b77fa:	b123      	cbz	r3, b7806 <_ZN6String7reserveEj+0x12>
   b77fc:	6843      	ldr	r3, [r0, #4]
   b77fe:	428b      	cmp	r3, r1
   b7800:	d301      	bcc.n	b7806 <_ZN6String7reserveEj+0x12>
   b7802:	2001      	movs	r0, #1
}
   b7804:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7806:	4620      	mov	r0, r4
   b7808:	f7ff ffe8 	bl	b77dc <_ZN6String12changeBufferEj>
   b780c:	2800      	cmp	r0, #0
   b780e:	d0f9      	beq.n	b7804 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7810:	68a3      	ldr	r3, [r4, #8]
   b7812:	2b00      	cmp	r3, #0
   b7814:	d1f5      	bne.n	b7802 <_ZN6String7reserveEj+0xe>
   b7816:	6822      	ldr	r2, [r4, #0]
   b7818:	7013      	strb	r3, [r2, #0]
   b781a:	e7f2      	b.n	b7802 <_ZN6String7reserveEj+0xe>

000b781c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b781c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b781e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7820:	4611      	mov	r1, r2
   b7822:	9201      	str	r2, [sp, #4]
{
   b7824:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7826:	f7ff ffe5 	bl	b77f4 <_ZN6String7reserveEj>
   b782a:	9a01      	ldr	r2, [sp, #4]
   b782c:	b928      	cbnz	r0, b783a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b782e:	4620      	mov	r0, r4
   b7830:	f7ff ffc9 	bl	b77c6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7834:	4620      	mov	r0, r4
   b7836:	b003      	add	sp, #12
   b7838:	bd30      	pop	{r4, r5, pc}
	len = length;
   b783a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b783c:	4629      	mov	r1, r5
   b783e:	6820      	ldr	r0, [r4, #0]
   b7840:	f000 f9e4 	bl	b7c0c <memcpy>
	buffer[len] = 0;
   b7844:	6822      	ldr	r2, [r4, #0]
   b7846:	68a3      	ldr	r3, [r4, #8]
   b7848:	2100      	movs	r1, #0
   b784a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b784c:	e7f2      	b.n	b7834 <_ZN6String4copyEPKcj+0x18>

000b784e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b784e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7850:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7852:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7856:	4604      	mov	r4, r0
	len = 0;
   b7858:	6083      	str	r3, [r0, #8]
	flags = 0;
   b785a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b785c:	b141      	cbz	r1, b7870 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b785e:	4608      	mov	r0, r1
   b7860:	9101      	str	r1, [sp, #4]
   b7862:	f7fc fbe5 	bl	b4030 <strlen>
   b7866:	9901      	ldr	r1, [sp, #4]
   b7868:	4602      	mov	r2, r0
   b786a:	4620      	mov	r0, r4
   b786c:	f7ff ffd6 	bl	b781c <_ZN6String4copyEPKcj>
}
   b7870:	4620      	mov	r0, r4
   b7872:	b002      	add	sp, #8
   b7874:	bd10      	pop	{r4, pc}

000b7876 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7876:	b538      	push	{r3, r4, r5, lr}
   b7878:	4605      	mov	r5, r0
	if (buffer) {
   b787a:	6800      	ldr	r0, [r0, #0]
{
   b787c:	460c      	mov	r4, r1
	if (buffer) {
   b787e:	b168      	cbz	r0, b789c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7880:	686a      	ldr	r2, [r5, #4]
   b7882:	688b      	ldr	r3, [r1, #8]
   b7884:	429a      	cmp	r2, r3
   b7886:	d307      	bcc.n	b7898 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7888:	6809      	ldr	r1, [r1, #0]
   b788a:	f000 fa34 	bl	b7cf6 <strcpy>
			len = rhs.len;
   b788e:	68a3      	ldr	r3, [r4, #8]
   b7890:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7892:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7894:	60a3      	str	r3, [r4, #8]
}
   b7896:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7898:	f7fd f852 	bl	b4940 <free>
	buffer = rhs.buffer;
   b789c:	6823      	ldr	r3, [r4, #0]
   b789e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b78a0:	6863      	ldr	r3, [r4, #4]
   b78a2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b78a4:	68a3      	ldr	r3, [r4, #8]
   b78a6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b78a8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b78aa:	e9c4 3300 	strd	r3, r3, [r4]
   b78ae:	e7f1      	b.n	b7894 <_ZN6String4moveERS_+0x1e>

000b78b0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b78b0:	b510      	push	{r4, lr}
	buffer = NULL;
   b78b2:	2300      	movs	r3, #0
	capacity = 0;
   b78b4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b78b8:	4604      	mov	r4, r0
	len = 0;
   b78ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78bc:	7303      	strb	r3, [r0, #12]
	move(rval);
   b78be:	f7ff ffda 	bl	b7876 <_ZN6String4moveERS_>
}
   b78c2:	4620      	mov	r0, r4
   b78c4:	bd10      	pop	{r4, pc}

000b78c6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b78c6:	4288      	cmp	r0, r1
{
   b78c8:	b510      	push	{r4, lr}
   b78ca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b78cc:	d005      	beq.n	b78da <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b78ce:	680b      	ldr	r3, [r1, #0]
   b78d0:	b12b      	cbz	r3, b78de <_ZN6StringaSERKS_+0x18>
   b78d2:	688a      	ldr	r2, [r1, #8]
   b78d4:	4619      	mov	r1, r3
   b78d6:	f7ff ffa1 	bl	b781c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b78da:	4620      	mov	r0, r4
   b78dc:	bd10      	pop	{r4, pc}
	else invalidate();
   b78de:	f7ff ff72 	bl	b77c6 <_ZN6String10invalidateEv>
   b78e2:	e7fa      	b.n	b78da <_ZN6StringaSERKS_+0x14>

000b78e4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b78e4:	b510      	push	{r4, lr}
	buffer = NULL;
   b78e6:	2300      	movs	r3, #0
String::String(const String &value)
   b78e8:	4604      	mov	r4, r0
	capacity = 0;
   b78ea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b78ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78f0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b78f2:	f7ff ffe8 	bl	b78c6 <_ZN6StringaSERKS_>
}
   b78f6:	4620      	mov	r0, r4
   b78f8:	bd10      	pop	{r4, pc}

000b78fa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b78fa:	b513      	push	{r0, r1, r4, lr}
   b78fc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b78fe:	b159      	cbz	r1, b7918 <_ZN6StringaSEPKc+0x1e>
   b7900:	4608      	mov	r0, r1
   b7902:	9101      	str	r1, [sp, #4]
   b7904:	f7fc fb94 	bl	b4030 <strlen>
   b7908:	9901      	ldr	r1, [sp, #4]
   b790a:	4602      	mov	r2, r0
   b790c:	4620      	mov	r0, r4
   b790e:	f7ff ff85 	bl	b781c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7912:	4620      	mov	r0, r4
   b7914:	b002      	add	sp, #8
   b7916:	bd10      	pop	{r4, pc}
	else invalidate();
   b7918:	f7ff ff55 	bl	b77c6 <_ZN6String10invalidateEv>
   b791c:	e7f9      	b.n	b7912 <_ZN6StringaSEPKc+0x18>

000b791e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b791e:	4770      	bx	lr

000b7920 <_Z20acquireSerial1Bufferv>:
{
   b7920:	b538      	push	{r3, r4, r5, lr}
   b7922:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7924:	2514      	movs	r5, #20
   b7926:	462a      	mov	r2, r5
   b7928:	2100      	movs	r1, #0
   b792a:	f000 f997 	bl	b7c5c <memset>
   b792e:	8025      	strh	r5, [r4, #0]
   b7930:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7932:	4907      	ldr	r1, [pc, #28]	; (b7950 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7934:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7936:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7938:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b793a:	f000 f831 	bl	b79a0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b793e:	4904      	ldr	r1, [pc, #16]	; (b7950 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7940:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7942:	4628      	mov	r0, r5
   b7944:	f000 f82c 	bl	b79a0 <_ZnajRKSt9nothrow_t>
    };
   b7948:	60e0      	str	r0, [r4, #12]
}
   b794a:	4620      	mov	r0, r4
   b794c:	bd38      	pop	{r3, r4, r5, pc}
   b794e:	bf00      	nop
   b7950:	000b8420 	.word	0x000b8420

000b7954 <_Z22__fetch_global_Serial1v>:
{
   b7954:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7956:	4d0e      	ldr	r5, [pc, #56]	; (b7990 <_Z22__fetch_global_Serial1v+0x3c>)
   b7958:	7829      	ldrb	r1, [r5, #0]
   b795a:	f3bf 8f5b 	dmb	ish
   b795e:	f011 0401 	ands.w	r4, r1, #1
{
   b7962:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7964:	d111      	bne.n	b798a <_Z22__fetch_global_Serial1v+0x36>
   b7966:	4628      	mov	r0, r5
   b7968:	f7fc fbb8 	bl	b40dc <__cxa_guard_acquire>
   b796c:	b168      	cbz	r0, b798a <_Z22__fetch_global_Serial1v+0x36>
   b796e:	a801      	add	r0, sp, #4
   b7970:	f7ff ffd6 	bl	b7920 <_Z20acquireSerial1Bufferv>
   b7974:	aa01      	add	r2, sp, #4
   b7976:	4621      	mov	r1, r4
   b7978:	4806      	ldr	r0, [pc, #24]	; (b7994 <_Z22__fetch_global_Serial1v+0x40>)
   b797a:	f7ff feaf 	bl	b76dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b797e:	4628      	mov	r0, r5
   b7980:	f7fc fbb1 	bl	b40e6 <__cxa_guard_release>
   b7984:	4804      	ldr	r0, [pc, #16]	; (b7998 <_Z22__fetch_global_Serial1v+0x44>)
   b7986:	f000 f923 	bl	b7bd0 <atexit>
    return serial1;
}
   b798a:	4802      	ldr	r0, [pc, #8]	; (b7994 <_Z22__fetch_global_Serial1v+0x40>)
   b798c:	b007      	add	sp, #28
   b798e:	bd30      	pop	{r4, r5, pc}
   b7990:	2003e744 	.word	0x2003e744
   b7994:	2003e748 	.word	0x2003e748
   b7998:	000b791f 	.word	0x000b791f

000b799c <_ZnwjRKSt9nothrow_t>:
   b799c:	f7fc bb8b 	b.w	b40b6 <_Znwj>

000b79a0 <_ZnajRKSt9nothrow_t>:
   b79a0:	f7fc bb8b 	b.w	b40ba <_Znaj>

000b79a4 <_ZSt25__throw_bad_function_callv>:
   b79a4:	b508      	push	{r3, lr}
   b79a6:	f7fc ffe3 	bl	b4970 <abort>
	...

000b79ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b79ac:	4901      	ldr	r1, [pc, #4]	; (b79b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b79ae:	f000 b8f9 	b.w	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b79b2:	bf00      	nop
   b79b4:	000b843c 	.word	0x000b843c

000b79b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b79b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b79ba:	2400      	movs	r4, #0
   b79bc:	2310      	movs	r3, #16
   b79be:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b79c2:	6803      	ldr	r3, [r0, #0]
   b79c4:	4615      	mov	r5, r2
   b79c6:	699e      	ldr	r6, [r3, #24]
   b79c8:	6812      	ldr	r2, [r2, #0]
   b79ca:	466b      	mov	r3, sp
   b79cc:	e9cd 4400 	strd	r4, r4, [sp]
   b79d0:	47b0      	blx	r6
   b79d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b79d6:	f003 0306 	and.w	r3, r3, #6
   b79da:	2b06      	cmp	r3, #6
   b79dc:	bf03      	ittte	eq
   b79de:	9b00      	ldreq	r3, [sp, #0]
   b79e0:	602b      	streq	r3, [r5, #0]
   b79e2:	2001      	moveq	r0, #1
   b79e4:	4620      	movne	r0, r4
   b79e6:	b004      	add	sp, #16
   b79e8:	bd70      	pop	{r4, r5, r6, pc}

000b79ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b79ea:	9800      	ldr	r0, [sp, #0]
   b79ec:	4290      	cmp	r0, r2
   b79ee:	bf14      	ite	ne
   b79f0:	2001      	movne	r0, #1
   b79f2:	2006      	moveq	r0, #6
   b79f4:	4770      	bx	lr
	...

000b79f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b79f8:	b510      	push	{r4, lr}
   b79fa:	4b03      	ldr	r3, [pc, #12]	; (b7a08 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b79fc:	6003      	str	r3, [r0, #0]
   b79fe:	4604      	mov	r4, r0
   b7a00:	f000 f8cd 	bl	b7b9e <_ZNSt9type_infoD1Ev>
   b7a04:	4620      	mov	r0, r4
   b7a06:	bd10      	pop	{r4, pc}
   b7a08:	000b847c 	.word	0x000b847c

000b7a0c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7a0c:	b510      	push	{r4, lr}
   b7a0e:	4604      	mov	r4, r0
   b7a10:	f7ff fff2 	bl	b79f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a14:	4620      	mov	r0, r4
   b7a16:	2108      	movs	r1, #8
   b7a18:	f7fc fb51 	bl	b40be <_ZdlPvj>
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	bd10      	pop	{r4, pc}

000b7a20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a24:	461f      	mov	r7, r3
   b7a26:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7a2a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7a2e:	4598      	cmp	r8, r3
   b7a30:	4606      	mov	r6, r0
   b7a32:	4615      	mov	r5, r2
   b7a34:	d107      	bne.n	b7a46 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a36:	9907      	ldr	r1, [sp, #28]
   b7a38:	f000 f8b4 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7a3c:	b118      	cbz	r0, b7a46 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7a3e:	7165      	strb	r5, [r4, #5]
   b7a40:	2000      	movs	r0, #0
   b7a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7a46:	4639      	mov	r1, r7
   b7a48:	4630      	mov	r0, r6
   b7a4a:	f000 f8ab 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7a4e:	2800      	cmp	r0, #0
   b7a50:	d0f6      	beq.n	b7a40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7a52:	2301      	movs	r3, #1
   b7a54:	f8c4 8000 	str.w	r8, [r4]
   b7a58:	7125      	strb	r5, [r4, #4]
   b7a5a:	71a3      	strb	r3, [r4, #6]
   b7a5c:	e7f0      	b.n	b7a40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7a5e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7a5e:	b538      	push	{r3, r4, r5, lr}
   b7a60:	4615      	mov	r5, r2
   b7a62:	461c      	mov	r4, r3
   b7a64:	f000 f89e 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7a68:	b120      	cbz	r0, b7a74 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7a6a:	2308      	movs	r3, #8
   b7a6c:	60e3      	str	r3, [r4, #12]
   b7a6e:	2306      	movs	r3, #6
   b7a70:	6025      	str	r5, [r4, #0]
   b7a72:	7123      	strb	r3, [r4, #4]
   b7a74:	bd38      	pop	{r3, r4, r5, pc}

000b7a76 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a78:	4605      	mov	r5, r0
   b7a7a:	460c      	mov	r4, r1
   b7a7c:	9201      	str	r2, [sp, #4]
   b7a7e:	461e      	mov	r6, r3
   b7a80:	f000 f890 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7a84:	b950      	cbnz	r0, b7a9c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a86:	2e03      	cmp	r6, #3
   b7a88:	d808      	bhi.n	b7a9c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7a8a:	6823      	ldr	r3, [r4, #0]
   b7a8c:	9a01      	ldr	r2, [sp, #4]
   b7a8e:	695b      	ldr	r3, [r3, #20]
   b7a90:	4629      	mov	r1, r5
   b7a92:	4620      	mov	r0, r4
   b7a94:	b002      	add	sp, #8
   b7a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7a9a:	4718      	bx	r3
   b7a9c:	b002      	add	sp, #8
   b7a9e:	bd70      	pop	{r4, r5, r6, pc}

000b7aa0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7aa0:	b510      	push	{r4, lr}
   b7aa2:	4b03      	ldr	r3, [pc, #12]	; (b7ab0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7aa4:	6003      	str	r3, [r0, #0]
   b7aa6:	4604      	mov	r4, r0
   b7aa8:	f7ff ffa6 	bl	b79f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7aac:	4620      	mov	r0, r4
   b7aae:	bd10      	pop	{r4, pc}
   b7ab0:	000b84dc 	.word	0x000b84dc

000b7ab4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7ab4:	b510      	push	{r4, lr}
   b7ab6:	4604      	mov	r4, r0
   b7ab8:	f7ff fff2 	bl	b7aa0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7abc:	4620      	mov	r0, r4
   b7abe:	210c      	movs	r1, #12
   b7ac0:	f7fc fafd 	bl	b40be <_ZdlPvj>
   b7ac4:	4620      	mov	r0, r4
   b7ac6:	bd10      	pop	{r4, pc}

000b7ac8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7aca:	9f08      	ldr	r7, [sp, #32]
   b7acc:	4297      	cmp	r7, r2
   b7ace:	4605      	mov	r5, r0
   b7ad0:	460e      	mov	r6, r1
   b7ad2:	4614      	mov	r4, r2
   b7ad4:	d00a      	beq.n	b7aec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7ad6:	68a8      	ldr	r0, [r5, #8]
   b7ad8:	6802      	ldr	r2, [r0, #0]
   b7ada:	9708      	str	r7, [sp, #32]
   b7adc:	6a15      	ldr	r5, [r2, #32]
   b7ade:	4631      	mov	r1, r6
   b7ae0:	4622      	mov	r2, r4
   b7ae2:	46ac      	mov	ip, r5
   b7ae4:	b003      	add	sp, #12
   b7ae6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7aea:	4760      	bx	ip
   b7aec:	4619      	mov	r1, r3
   b7aee:	9301      	str	r3, [sp, #4]
   b7af0:	f000 f858 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7af4:	9b01      	ldr	r3, [sp, #4]
   b7af6:	2800      	cmp	r0, #0
   b7af8:	d0ed      	beq.n	b7ad6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7afa:	2006      	movs	r0, #6
   b7afc:	b003      	add	sp, #12
   b7afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7b00 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7b00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b04:	460d      	mov	r5, r1
   b7b06:	4619      	mov	r1, r3
   b7b08:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7b0c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7b10:	4681      	mov	r9, r0
   b7b12:	4617      	mov	r7, r2
   b7b14:	4698      	mov	r8, r3
   b7b16:	f000 f845 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7b1a:	b190      	cbz	r0, b7b42 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7b1c:	2d00      	cmp	r5, #0
   b7b1e:	6034      	str	r4, [r6, #0]
   b7b20:	7137      	strb	r7, [r6, #4]
   b7b22:	db09      	blt.n	b7b38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7b24:	1961      	adds	r1, r4, r5
   b7b26:	458a      	cmp	sl, r1
   b7b28:	bf0c      	ite	eq
   b7b2a:	2106      	moveq	r1, #6
   b7b2c:	2101      	movne	r1, #1
   b7b2e:	71b1      	strb	r1, [r6, #6]
   b7b30:	2000      	movs	r0, #0
   b7b32:	b001      	add	sp, #4
   b7b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b38:	3502      	adds	r5, #2
   b7b3a:	d1f9      	bne.n	b7b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b3c:	2301      	movs	r3, #1
   b7b3e:	71b3      	strb	r3, [r6, #6]
   b7b40:	e7f6      	b.n	b7b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b42:	4554      	cmp	r4, sl
   b7b44:	d106      	bne.n	b7b54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b46:	4659      	mov	r1, fp
   b7b48:	4648      	mov	r0, r9
   b7b4a:	f000 f82b 	bl	b7ba4 <_ZNKSt9type_infoeqERKS_>
   b7b4e:	b108      	cbz	r0, b7b54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7b50:	7177      	strb	r7, [r6, #5]
   b7b52:	e7ed      	b.n	b7b30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7b54:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7b58:	6803      	ldr	r3, [r0, #0]
   b7b5a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7b5e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7b62:	69dc      	ldr	r4, [r3, #28]
   b7b64:	463a      	mov	r2, r7
   b7b66:	4643      	mov	r3, r8
   b7b68:	4629      	mov	r1, r5
   b7b6a:	46a4      	mov	ip, r4
   b7b6c:	b001      	add	sp, #4
   b7b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b72:	4760      	bx	ip

000b7b74 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b78:	4607      	mov	r7, r0
   b7b7a:	460c      	mov	r4, r1
   b7b7c:	4615      	mov	r5, r2
   b7b7e:	461e      	mov	r6, r3
   b7b80:	f7ff ff6d 	bl	b7a5e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7b84:	b948      	cbnz	r0, b7b9a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7b86:	68b8      	ldr	r0, [r7, #8]
   b7b88:	6803      	ldr	r3, [r0, #0]
   b7b8a:	699f      	ldr	r7, [r3, #24]
   b7b8c:	462a      	mov	r2, r5
   b7b8e:	4633      	mov	r3, r6
   b7b90:	4621      	mov	r1, r4
   b7b92:	46bc      	mov	ip, r7
   b7b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7b98:	4760      	bx	ip
   b7b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7b9e <_ZNSt9type_infoD1Ev>:
   b7b9e:	4770      	bx	lr

000b7ba0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7ba0:	2000      	movs	r0, #0
   b7ba2:	4770      	bx	lr

000b7ba4 <_ZNKSt9type_infoeqERKS_>:
   b7ba4:	4281      	cmp	r1, r0
   b7ba6:	b508      	push	{r3, lr}
   b7ba8:	d00e      	beq.n	b7bc8 <_ZNKSt9type_infoeqERKS_+0x24>
   b7baa:	6840      	ldr	r0, [r0, #4]
   b7bac:	7803      	ldrb	r3, [r0, #0]
   b7bae:	2b2a      	cmp	r3, #42	; 0x2a
   b7bb0:	d00c      	beq.n	b7bcc <_ZNKSt9type_infoeqERKS_+0x28>
   b7bb2:	6849      	ldr	r1, [r1, #4]
   b7bb4:	780b      	ldrb	r3, [r1, #0]
   b7bb6:	2b2a      	cmp	r3, #42	; 0x2a
   b7bb8:	bf08      	it	eq
   b7bba:	3101      	addeq	r1, #1
   b7bbc:	f7fc fa2e 	bl	b401c <strcmp>
   b7bc0:	fab0 f080 	clz	r0, r0
   b7bc4:	0940      	lsrs	r0, r0, #5
   b7bc6:	bd08      	pop	{r3, pc}
   b7bc8:	2001      	movs	r0, #1
   b7bca:	e7fc      	b.n	b7bc6 <_ZNKSt9type_infoeqERKS_+0x22>
   b7bcc:	2000      	movs	r0, #0
   b7bce:	e7fa      	b.n	b7bc6 <_ZNKSt9type_infoeqERKS_+0x22>

000b7bd0 <atexit>:
   b7bd0:	2300      	movs	r3, #0
   b7bd2:	4601      	mov	r1, r0
   b7bd4:	461a      	mov	r2, r3
   b7bd6:	4618      	mov	r0, r3
   b7bd8:	f000 b956 	b.w	b7e88 <__register_exitproc>

000b7bdc <isprint>:
   b7bdc:	4b02      	ldr	r3, [pc, #8]	; (b7be8 <isprint+0xc>)
   b7bde:	4418      	add	r0, r3
   b7be0:	7840      	ldrb	r0, [r0, #1]
   b7be2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7be6:	4770      	bx	lr
   b7be8:	000b85a9 	.word	0x000b85a9

000b7bec <memcmp>:
   b7bec:	b510      	push	{r4, lr}
   b7bee:	3901      	subs	r1, #1
   b7bf0:	4402      	add	r2, r0
   b7bf2:	4290      	cmp	r0, r2
   b7bf4:	d101      	bne.n	b7bfa <memcmp+0xe>
   b7bf6:	2000      	movs	r0, #0
   b7bf8:	e005      	b.n	b7c06 <memcmp+0x1a>
   b7bfa:	7803      	ldrb	r3, [r0, #0]
   b7bfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7c00:	42a3      	cmp	r3, r4
   b7c02:	d001      	beq.n	b7c08 <memcmp+0x1c>
   b7c04:	1b18      	subs	r0, r3, r4
   b7c06:	bd10      	pop	{r4, pc}
   b7c08:	3001      	adds	r0, #1
   b7c0a:	e7f2      	b.n	b7bf2 <memcmp+0x6>

000b7c0c <memcpy>:
   b7c0c:	440a      	add	r2, r1
   b7c0e:	4291      	cmp	r1, r2
   b7c10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7c14:	d100      	bne.n	b7c18 <memcpy+0xc>
   b7c16:	4770      	bx	lr
   b7c18:	b510      	push	{r4, lr}
   b7c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7c22:	4291      	cmp	r1, r2
   b7c24:	d1f9      	bne.n	b7c1a <memcpy+0xe>
   b7c26:	bd10      	pop	{r4, pc}

000b7c28 <memmove>:
   b7c28:	4288      	cmp	r0, r1
   b7c2a:	b510      	push	{r4, lr}
   b7c2c:	eb01 0402 	add.w	r4, r1, r2
   b7c30:	d902      	bls.n	b7c38 <memmove+0x10>
   b7c32:	4284      	cmp	r4, r0
   b7c34:	4623      	mov	r3, r4
   b7c36:	d807      	bhi.n	b7c48 <memmove+0x20>
   b7c38:	1e43      	subs	r3, r0, #1
   b7c3a:	42a1      	cmp	r1, r4
   b7c3c:	d008      	beq.n	b7c50 <memmove+0x28>
   b7c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7c42:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7c46:	e7f8      	b.n	b7c3a <memmove+0x12>
   b7c48:	4402      	add	r2, r0
   b7c4a:	4601      	mov	r1, r0
   b7c4c:	428a      	cmp	r2, r1
   b7c4e:	d100      	bne.n	b7c52 <memmove+0x2a>
   b7c50:	bd10      	pop	{r4, pc}
   b7c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7c5a:	e7f7      	b.n	b7c4c <memmove+0x24>

000b7c5c <memset>:
   b7c5c:	4402      	add	r2, r0
   b7c5e:	4603      	mov	r3, r0
   b7c60:	4293      	cmp	r3, r2
   b7c62:	d100      	bne.n	b7c66 <memset+0xa>
   b7c64:	4770      	bx	lr
   b7c66:	f803 1b01 	strb.w	r1, [r3], #1
   b7c6a:	e7f9      	b.n	b7c60 <memset+0x4>

000b7c6c <srand>:
   b7c6c:	b538      	push	{r3, r4, r5, lr}
   b7c6e:	4b10      	ldr	r3, [pc, #64]	; (b7cb0 <srand+0x44>)
   b7c70:	681d      	ldr	r5, [r3, #0]
   b7c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7c74:	4604      	mov	r4, r0
   b7c76:	b9b3      	cbnz	r3, b7ca6 <srand+0x3a>
   b7c78:	2018      	movs	r0, #24
   b7c7a:	f7fc fe59 	bl	b4930 <malloc>
   b7c7e:	4602      	mov	r2, r0
   b7c80:	63a8      	str	r0, [r5, #56]	; 0x38
   b7c82:	b920      	cbnz	r0, b7c8e <srand+0x22>
   b7c84:	4b0b      	ldr	r3, [pc, #44]	; (b7cb4 <srand+0x48>)
   b7c86:	480c      	ldr	r0, [pc, #48]	; (b7cb8 <srand+0x4c>)
   b7c88:	2142      	movs	r1, #66	; 0x42
   b7c8a:	f7fc fe81 	bl	b4990 <__assert_func>
   b7c8e:	490b      	ldr	r1, [pc, #44]	; (b7cbc <srand+0x50>)
   b7c90:	4b0b      	ldr	r3, [pc, #44]	; (b7cc0 <srand+0x54>)
   b7c92:	e9c0 1300 	strd	r1, r3, [r0]
   b7c96:	4b0b      	ldr	r3, [pc, #44]	; (b7cc4 <srand+0x58>)
   b7c98:	6083      	str	r3, [r0, #8]
   b7c9a:	230b      	movs	r3, #11
   b7c9c:	8183      	strh	r3, [r0, #12]
   b7c9e:	2100      	movs	r1, #0
   b7ca0:	2001      	movs	r0, #1
   b7ca2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7ca6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ca8:	2200      	movs	r2, #0
   b7caa:	611c      	str	r4, [r3, #16]
   b7cac:	615a      	str	r2, [r3, #20]
   b7cae:	bd38      	pop	{r3, r4, r5, pc}
   b7cb0:	2003e5c0 	.word	0x2003e5c0
   b7cb4:	000b8515 	.word	0x000b8515
   b7cb8:	000b852c 	.word	0x000b852c
   b7cbc:	abcd330e 	.word	0xabcd330e
   b7cc0:	e66d1234 	.word	0xe66d1234
   b7cc4:	0005deec 	.word	0x0005deec

000b7cc8 <strchr>:
   b7cc8:	b2c9      	uxtb	r1, r1
   b7cca:	4603      	mov	r3, r0
   b7ccc:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7cd0:	b11a      	cbz	r2, b7cda <strchr+0x12>
   b7cd2:	428a      	cmp	r2, r1
   b7cd4:	d1f9      	bne.n	b7cca <strchr+0x2>
   b7cd6:	4618      	mov	r0, r3
   b7cd8:	4770      	bx	lr
   b7cda:	2900      	cmp	r1, #0
   b7cdc:	bf18      	it	ne
   b7cde:	2300      	movne	r3, #0
   b7ce0:	e7f9      	b.n	b7cd6 <strchr+0xe>

000b7ce2 <strchrnul>:
   b7ce2:	b510      	push	{r4, lr}
   b7ce4:	4604      	mov	r4, r0
   b7ce6:	f7ff ffef 	bl	b7cc8 <strchr>
   b7cea:	b918      	cbnz	r0, b7cf4 <strchrnul+0x12>
   b7cec:	4620      	mov	r0, r4
   b7cee:	f7fc f99f 	bl	b4030 <strlen>
   b7cf2:	4420      	add	r0, r4
   b7cf4:	bd10      	pop	{r4, pc}

000b7cf6 <strcpy>:
   b7cf6:	4603      	mov	r3, r0
   b7cf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7cfc:	f803 2b01 	strb.w	r2, [r3], #1
   b7d00:	2a00      	cmp	r2, #0
   b7d02:	d1f9      	bne.n	b7cf8 <strcpy+0x2>
   b7d04:	4770      	bx	lr

000b7d06 <strncmp>:
   b7d06:	b510      	push	{r4, lr}
   b7d08:	b17a      	cbz	r2, b7d2a <strncmp+0x24>
   b7d0a:	4603      	mov	r3, r0
   b7d0c:	3901      	subs	r1, #1
   b7d0e:	1884      	adds	r4, r0, r2
   b7d10:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7d14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7d18:	4290      	cmp	r0, r2
   b7d1a:	d101      	bne.n	b7d20 <strncmp+0x1a>
   b7d1c:	42a3      	cmp	r3, r4
   b7d1e:	d101      	bne.n	b7d24 <strncmp+0x1e>
   b7d20:	1a80      	subs	r0, r0, r2
   b7d22:	bd10      	pop	{r4, pc}
   b7d24:	2800      	cmp	r0, #0
   b7d26:	d1f3      	bne.n	b7d10 <strncmp+0xa>
   b7d28:	e7fa      	b.n	b7d20 <strncmp+0x1a>
   b7d2a:	4610      	mov	r0, r2
   b7d2c:	e7f9      	b.n	b7d22 <strncmp+0x1c>

000b7d2e <strnlen>:
   b7d2e:	b510      	push	{r4, lr}
   b7d30:	4602      	mov	r2, r0
   b7d32:	4401      	add	r1, r0
   b7d34:	428a      	cmp	r2, r1
   b7d36:	4613      	mov	r3, r2
   b7d38:	d003      	beq.n	b7d42 <strnlen+0x14>
   b7d3a:	781c      	ldrb	r4, [r3, #0]
   b7d3c:	3201      	adds	r2, #1
   b7d3e:	2c00      	cmp	r4, #0
   b7d40:	d1f8      	bne.n	b7d34 <strnlen+0x6>
   b7d42:	1a18      	subs	r0, r3, r0
   b7d44:	bd10      	pop	{r4, pc}

000b7d46 <strrchr>:
   b7d46:	b538      	push	{r3, r4, r5, lr}
   b7d48:	4603      	mov	r3, r0
   b7d4a:	460c      	mov	r4, r1
   b7d4c:	b969      	cbnz	r1, b7d6a <strrchr+0x24>
   b7d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7d52:	f7ff bfb9 	b.w	b7cc8 <strchr>
   b7d56:	1c43      	adds	r3, r0, #1
   b7d58:	4605      	mov	r5, r0
   b7d5a:	4621      	mov	r1, r4
   b7d5c:	4618      	mov	r0, r3
   b7d5e:	f7ff ffb3 	bl	b7cc8 <strchr>
   b7d62:	2800      	cmp	r0, #0
   b7d64:	d1f7      	bne.n	b7d56 <strrchr+0x10>
   b7d66:	4628      	mov	r0, r5
   b7d68:	bd38      	pop	{r3, r4, r5, pc}
   b7d6a:	2500      	movs	r5, #0
   b7d6c:	e7f5      	b.n	b7d5a <strrchr+0x14>
	...

000b7d70 <_strtol_l.constprop.0>:
   b7d70:	2b01      	cmp	r3, #1
   b7d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7d76:	d001      	beq.n	b7d7c <_strtol_l.constprop.0+0xc>
   b7d78:	2b24      	cmp	r3, #36	; 0x24
   b7d7a:	d906      	bls.n	b7d8a <_strtol_l.constprop.0+0x1a>
   b7d7c:	f7fc fe00 	bl	b4980 <__errno>
   b7d80:	2316      	movs	r3, #22
   b7d82:	6003      	str	r3, [r0, #0]
   b7d84:	2000      	movs	r0, #0
   b7d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7d8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7e70 <_strtol_l.constprop.0+0x100>
   b7d8e:	460d      	mov	r5, r1
   b7d90:	462e      	mov	r6, r5
   b7d92:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7d96:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7d9a:	f017 0708 	ands.w	r7, r7, #8
   b7d9e:	d1f7      	bne.n	b7d90 <_strtol_l.constprop.0+0x20>
   b7da0:	2c2d      	cmp	r4, #45	; 0x2d
   b7da2:	d132      	bne.n	b7e0a <_strtol_l.constprop.0+0x9a>
   b7da4:	782c      	ldrb	r4, [r5, #0]
   b7da6:	2701      	movs	r7, #1
   b7da8:	1cb5      	adds	r5, r6, #2
   b7daa:	2b00      	cmp	r3, #0
   b7dac:	d05b      	beq.n	b7e66 <_strtol_l.constprop.0+0xf6>
   b7dae:	2b10      	cmp	r3, #16
   b7db0:	d109      	bne.n	b7dc6 <_strtol_l.constprop.0+0x56>
   b7db2:	2c30      	cmp	r4, #48	; 0x30
   b7db4:	d107      	bne.n	b7dc6 <_strtol_l.constprop.0+0x56>
   b7db6:	782c      	ldrb	r4, [r5, #0]
   b7db8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7dbc:	2c58      	cmp	r4, #88	; 0x58
   b7dbe:	d14d      	bne.n	b7e5c <_strtol_l.constprop.0+0xec>
   b7dc0:	786c      	ldrb	r4, [r5, #1]
   b7dc2:	2310      	movs	r3, #16
   b7dc4:	3502      	adds	r5, #2
   b7dc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7dca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7dce:	f04f 0c00 	mov.w	ip, #0
   b7dd2:	fbb8 f9f3 	udiv	r9, r8, r3
   b7dd6:	4666      	mov	r6, ip
   b7dd8:	fb03 8a19 	mls	sl, r3, r9, r8
   b7ddc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7de0:	f1be 0f09 	cmp.w	lr, #9
   b7de4:	d816      	bhi.n	b7e14 <_strtol_l.constprop.0+0xa4>
   b7de6:	4674      	mov	r4, lr
   b7de8:	42a3      	cmp	r3, r4
   b7dea:	dd24      	ble.n	b7e36 <_strtol_l.constprop.0+0xc6>
   b7dec:	f1bc 0f00 	cmp.w	ip, #0
   b7df0:	db1e      	blt.n	b7e30 <_strtol_l.constprop.0+0xc0>
   b7df2:	45b1      	cmp	r9, r6
   b7df4:	d31c      	bcc.n	b7e30 <_strtol_l.constprop.0+0xc0>
   b7df6:	d101      	bne.n	b7dfc <_strtol_l.constprop.0+0x8c>
   b7df8:	45a2      	cmp	sl, r4
   b7dfa:	db19      	blt.n	b7e30 <_strtol_l.constprop.0+0xc0>
   b7dfc:	fb06 4603 	mla	r6, r6, r3, r4
   b7e00:	f04f 0c01 	mov.w	ip, #1
   b7e04:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7e08:	e7e8      	b.n	b7ddc <_strtol_l.constprop.0+0x6c>
   b7e0a:	2c2b      	cmp	r4, #43	; 0x2b
   b7e0c:	bf04      	itt	eq
   b7e0e:	782c      	ldrbeq	r4, [r5, #0]
   b7e10:	1cb5      	addeq	r5, r6, #2
   b7e12:	e7ca      	b.n	b7daa <_strtol_l.constprop.0+0x3a>
   b7e14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7e18:	f1be 0f19 	cmp.w	lr, #25
   b7e1c:	d801      	bhi.n	b7e22 <_strtol_l.constprop.0+0xb2>
   b7e1e:	3c37      	subs	r4, #55	; 0x37
   b7e20:	e7e2      	b.n	b7de8 <_strtol_l.constprop.0+0x78>
   b7e22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7e26:	f1be 0f19 	cmp.w	lr, #25
   b7e2a:	d804      	bhi.n	b7e36 <_strtol_l.constprop.0+0xc6>
   b7e2c:	3c57      	subs	r4, #87	; 0x57
   b7e2e:	e7db      	b.n	b7de8 <_strtol_l.constprop.0+0x78>
   b7e30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7e34:	e7e6      	b.n	b7e04 <_strtol_l.constprop.0+0x94>
   b7e36:	f1bc 0f00 	cmp.w	ip, #0
   b7e3a:	da05      	bge.n	b7e48 <_strtol_l.constprop.0+0xd8>
   b7e3c:	2322      	movs	r3, #34	; 0x22
   b7e3e:	6003      	str	r3, [r0, #0]
   b7e40:	4646      	mov	r6, r8
   b7e42:	b942      	cbnz	r2, b7e56 <_strtol_l.constprop.0+0xe6>
   b7e44:	4630      	mov	r0, r6
   b7e46:	e79e      	b.n	b7d86 <_strtol_l.constprop.0+0x16>
   b7e48:	b107      	cbz	r7, b7e4c <_strtol_l.constprop.0+0xdc>
   b7e4a:	4276      	negs	r6, r6
   b7e4c:	2a00      	cmp	r2, #0
   b7e4e:	d0f9      	beq.n	b7e44 <_strtol_l.constprop.0+0xd4>
   b7e50:	f1bc 0f00 	cmp.w	ip, #0
   b7e54:	d000      	beq.n	b7e58 <_strtol_l.constprop.0+0xe8>
   b7e56:	1e69      	subs	r1, r5, #1
   b7e58:	6011      	str	r1, [r2, #0]
   b7e5a:	e7f3      	b.n	b7e44 <_strtol_l.constprop.0+0xd4>
   b7e5c:	2430      	movs	r4, #48	; 0x30
   b7e5e:	2b00      	cmp	r3, #0
   b7e60:	d1b1      	bne.n	b7dc6 <_strtol_l.constprop.0+0x56>
   b7e62:	2308      	movs	r3, #8
   b7e64:	e7af      	b.n	b7dc6 <_strtol_l.constprop.0+0x56>
   b7e66:	2c30      	cmp	r4, #48	; 0x30
   b7e68:	d0a5      	beq.n	b7db6 <_strtol_l.constprop.0+0x46>
   b7e6a:	230a      	movs	r3, #10
   b7e6c:	e7ab      	b.n	b7dc6 <_strtol_l.constprop.0+0x56>
   b7e6e:	bf00      	nop
   b7e70:	000b85aa 	.word	0x000b85aa

000b7e74 <strtol>:
   b7e74:	4613      	mov	r3, r2
   b7e76:	460a      	mov	r2, r1
   b7e78:	4601      	mov	r1, r0
   b7e7a:	4802      	ldr	r0, [pc, #8]	; (b7e84 <strtol+0x10>)
   b7e7c:	6800      	ldr	r0, [r0, #0]
   b7e7e:	f7ff bf77 	b.w	b7d70 <_strtol_l.constprop.0>
   b7e82:	bf00      	nop
   b7e84:	2003e5c0 	.word	0x2003e5c0

000b7e88 <__register_exitproc>:
   b7e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7e8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7f48 <__register_exitproc+0xc0>
   b7e90:	4606      	mov	r6, r0
   b7e92:	f8d8 0000 	ldr.w	r0, [r8]
   b7e96:	461f      	mov	r7, r3
   b7e98:	460d      	mov	r5, r1
   b7e9a:	4691      	mov	r9, r2
   b7e9c:	f000 f856 	bl	b7f4c <__retarget_lock_acquire_recursive>
   b7ea0:	4b25      	ldr	r3, [pc, #148]	; (b7f38 <__register_exitproc+0xb0>)
   b7ea2:	681c      	ldr	r4, [r3, #0]
   b7ea4:	b934      	cbnz	r4, b7eb4 <__register_exitproc+0x2c>
   b7ea6:	4c25      	ldr	r4, [pc, #148]	; (b7f3c <__register_exitproc+0xb4>)
   b7ea8:	601c      	str	r4, [r3, #0]
   b7eaa:	4b25      	ldr	r3, [pc, #148]	; (b7f40 <__register_exitproc+0xb8>)
   b7eac:	b113      	cbz	r3, b7eb4 <__register_exitproc+0x2c>
   b7eae:	681b      	ldr	r3, [r3, #0]
   b7eb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7eb4:	6863      	ldr	r3, [r4, #4]
   b7eb6:	2b1f      	cmp	r3, #31
   b7eb8:	dd07      	ble.n	b7eca <__register_exitproc+0x42>
   b7eba:	f8d8 0000 	ldr.w	r0, [r8]
   b7ebe:	f000 f847 	bl	b7f50 <__retarget_lock_release_recursive>
   b7ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7eca:	b34e      	cbz	r6, b7f20 <__register_exitproc+0x98>
   b7ecc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7ed0:	b988      	cbnz	r0, b7ef6 <__register_exitproc+0x6e>
   b7ed2:	4b1c      	ldr	r3, [pc, #112]	; (b7f44 <__register_exitproc+0xbc>)
   b7ed4:	b923      	cbnz	r3, b7ee0 <__register_exitproc+0x58>
   b7ed6:	f8d8 0000 	ldr.w	r0, [r8]
   b7eda:	f000 f838 	bl	b7f4e <__retarget_lock_release>
   b7ede:	e7f0      	b.n	b7ec2 <__register_exitproc+0x3a>
   b7ee0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7ee4:	f7fc fd24 	bl	b4930 <malloc>
   b7ee8:	2800      	cmp	r0, #0
   b7eea:	d0f4      	beq.n	b7ed6 <__register_exitproc+0x4e>
   b7eec:	2300      	movs	r3, #0
   b7eee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7ef2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7ef6:	6863      	ldr	r3, [r4, #4]
   b7ef8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7efc:	2201      	movs	r2, #1
   b7efe:	409a      	lsls	r2, r3
   b7f00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7f04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7f08:	4313      	orrs	r3, r2
   b7f0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7f0e:	2e02      	cmp	r6, #2
   b7f10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7f14:	bf02      	ittt	eq
   b7f16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7f1a:	4313      	orreq	r3, r2
   b7f1c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7f20:	6863      	ldr	r3, [r4, #4]
   b7f22:	f8d8 0000 	ldr.w	r0, [r8]
   b7f26:	1c5a      	adds	r2, r3, #1
   b7f28:	3302      	adds	r3, #2
   b7f2a:	6062      	str	r2, [r4, #4]
   b7f2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7f30:	f000 f80e 	bl	b7f50 <__retarget_lock_release_recursive>
   b7f34:	2000      	movs	r0, #0
   b7f36:	e7c6      	b.n	b7ec6 <__register_exitproc+0x3e>
   b7f38:	2003e7e8 	.word	0x2003e7e8
   b7f3c:	2003e75c 	.word	0x2003e75c
   b7f40:	00000000 	.word	0x00000000
   b7f44:	000b4931 	.word	0x000b4931
   b7f48:	2003e624 	.word	0x2003e624

000b7f4c <__retarget_lock_acquire_recursive>:
   b7f4c:	4770      	bx	lr

000b7f4e <__retarget_lock_release>:
   b7f4e:	4770      	bx	lr

000b7f50 <__retarget_lock_release_recursive>:
   b7f50:	4770      	bx	lr

000b7f52 <link_code_end>:
	...

000b7f54 <link_const_data_start>:
   b7f54:	00000000 	.word	0x00000000
   b7f58:	34fb0000 	.word	0x34fb0000
   b7f5c:	00805f9b 	.word	0x00805f9b
   b7f60:	10008000 	.word	0x10008000
	...

000b7f6c <dynalib_user>:
   b7f6c:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b7f7c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b7f8c:	72697620 6c617574 00642500 38323837      virtual.%d.7828
   b7f9c:	64353566 3430632d 39342d63 382d3865     f55d-c04c-49e8-8
   b7fac:	2d396536 33316638 35373236 37636435     6e9-8f1362755dc7
   b7fbc:	63353700 34643431 62312d34 342d3131     .75c14d44-1b11-4
   b7fcc:	2d343135 31323262 3166642d 38636635     514-b221-df15fc8
   b7fdc:	30353038 30310066 38646366 382d6137     8050f.10fcd87a-8
   b7fec:	2d313036 65343834 3932382d 31642d64     601-484e-829d-d1
   b7ffc:	34613431 62386130 74003661 78720078     14a40a8ba6.tx.rx
   b800c:	00000000                                ....

000b8010 <_ZTVN5spark10LogHandlerE>:
	...
   b8020:	000b40c5 000b40ed                       .@...@..

000b8028 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8030:	000b40f1 000b4125 000b5f8d 000b6131     .@..%A..._..1a..

000b8040 <_ZTVN5spark12NetworkClassE>:
	...
   b8048:	000b49b1 000b49bb 000b49c5 000b49cf     .I...I...I...I..
   b8058:	000b49d9 000b49e5 000b49f1 000b49f9     .I...I...I...I..
   b8068:	000b4a01 000b4a0d 000b4a15 000b4a1f     .J...J...J...J..
   b8078:	000b4a29                                )J..

000b807c <_ZTVN5spark9WiFiClassE>:
	...
   b8084:	000b4b73 000b4b69 000b4b5f 000b4b15     sK..iK.._K...K..
   b8094:	000b4b53 000b4b47 000b49f1 000b49f9     SK..GK...I...I..
   b80a4:	000b4b3b 000b4b33 000b4b29 000b4b1f     ;K..3K..)K...K..
   b80b4:	000b4a29                                )J..

000b80b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b80c0:	75007525 78343025 00000000              %u.u%04x....

000b80cc <_ZTV9USBSerial>:
	...
   b80d4:	000b4fbb 000b5023 000b4ff9 000b62dd     .O..#P...O...b..
   b80e4:	000b4feb 000b4fbd 000b4fcd 000b501d     .O...O...O...P..
   b80f4:	000b4fdd 000b4fb5                       .O...O..

000b80fc <_ZTV9IPAddress>:
	...
   b8104:	000b50d5 000b50c5 000b50c7 252d5925     .P...P...P..%Y-%
   b8114:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b8124:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
   b8134:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   b8144:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   b8154:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   b8164:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   b8174:	69250020 74656400 736c6961 00203d20      .%i.details = .
   b8184:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
   b8194:	65640065 6c696174 00000000              e.detail....

000b81a0 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b81a8:	000b5361 000b5387 000b5345 000b4c0b     aS...S..ES...L..

000b81b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b81c0:	000b5835 000b584d 000b5f8d 000b6131     5X..MX..._..1a..

000b81d0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b81d8:	000b5861 000b5875 000b6169 000b534d     aX..uX..ia..MS..

000b81e8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b81f0:	000b535f 000b5395 000b5ef1 000b534f     _S...S...^..OS..

000b8200 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8208:	000b535d 000b53a3 000b5779 000b53c5     ]S...S..yW...S..
   b8218:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   b8228:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   b8238:	74530065 20747261 63736964 7265766f     e.Start discover
   b8248:	20676e69 76726573 73656369 7341002e     ing services..As
   b8258:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   b8268:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   b8278:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   b8288:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   b8298:	72656550 76656420 20656369 6d207369     Peer device is m
   b82a8:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   b82b8:	7061206f 646e6570 65657020 65432072     o append peer Ce
   b82c8:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   b82d8:	63656e6e 00646574 63736944 656e6e6f     nnected.Disconne
   b82e8:	64657463 70754400 6163696c 20646574     cted.Duplicated 
   b82f8:	72616863 65746361 74736972 63206369     characteristic c
   b8308:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   b8318:	6c696146 74206465 7061206f 646e6570     Failed to append
   b8328:	636f6c20 63206c61 61726168 72657463      local character
   b8338:	69747369 00002e63                       istic...

000b8340 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8348:	000b6375 000b63d9 000b64ad 000b6403     uc...c...d...d..
   b8358:	000b6379                                yc..

000b835c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8364:	000b6371 000b63e7 000b6373 000b6409     qc...c..sc...d..
   b8374:	000b6399                                .c..

000b8378 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8380:	000b636f 000b63f5 000b6c15 000b640f     oc...c...l...d..
   b8390:	000b63b9                                .c..

000b8394 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b8394:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000b83a4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b83a4:	5f9b34fb 80000080 00001000 00000000     .4._............

000b83b4 <_ZTV11USARTSerial>:
	...
   b83bc:	000b7661 000b76cd 000b76a5 000b62dd     av...v...v...b..
   b83cc:	000b7675 000b7691 000b7683 000b769f     uv...v...v...v..
   b83dc:	000b7663 000b7667                       cv..gv..

000b83e4 <_ZTVN5spark13EthernetClassE>:
	...
   b83ec:	000b779b 000b7791 000b7787 000b777d     .w...w...w..}w..
   b83fc:	000b7771 000b7765 000b49f1 000b49f9     qw..ew...I...I..
   b840c:	000b7759 000b7751 000b7747 000b773d     Yw..Qw..Gw..=w..
   b841c:	000b4a29                                )J..

000b8420 <_ZSt7nothrow>:
	...

000b8421 <_ZTSSt19_Sp_make_shared_tag>:
   b8421:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b8431:	5f646572 00676174                        red_tag....

000b843c <_ZTISt19_Sp_make_shared_tag>:
   b843c:	000b847c 000b8421                       |...!...

000b8444 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8444:	000b84dc 000b8450 000b8500              ....P.......

000b8450 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8450:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b8460:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b8470:	00000045                                E...

000b8474 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8474:	00000000 000b8444 000b79f9 000b7a0d     ....D....y...z..
   b8484:	000b7ba1 000b7ba1 000b7a77 000b79b9     .{...{..wz...y..
   b8494:	000b7a5f 000b7a21 000b79eb              _z..!z...y..

000b84a0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b84a0:	000b84dc 000b84ac 000b8444              ........D...

000b84ac <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b84ac:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b84bc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b84cc:	456f666e 00000000                       nfoE....

000b84d4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b84d4:	00000000 000b84a0 000b7aa1 000b7ab5     .........z...z..
   b84e4:	000b7ba1 000b7ba1 000b7a77 000b79b9     .{...{..wz...y..
   b84f4:	000b7b75 000b7b01 000b7ac9              u{...{...z..

000b8500 <_ZTISt9type_info>:
   b8500:	000b847c 000b8508                       |.......

000b8508 <_ZTSSt9type_info>:
   b8508:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8518:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8528:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b8538:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b8548:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b8558:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b8568:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b8578:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b8588:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b8598:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b85a9 <_ctype_>:
   b85a9:	20202000 20202020 28282020 20282828     .         ((((( 
   b85b9:	20202020 20202020 20202020 20202020                     
   b85c9:	10108820 10101010 10101010 10101010      ...............
   b85d9:	04040410 04040404 10040404 10101010     ................
   b85e9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b85f9:	01010101 01010101 01010101 10101010     ................
   b8609:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b8619:	02020202 02020202 02020202 10101010     ................
   b8629:	00000020 00000000 00000000 00000000      ...............
	...

000b86aa <link_const_data_end>:
	...

000b86ac <link_constructors_location>:
   b86ac:	000b4399 	.word	0x000b4399
   b86b0:	000b4b01 	.word	0x000b4b01
   b86b4:	000b4b7d 	.word	0x000b4b7d
   b86b8:	000b5325 	.word	0x000b5325
   b86bc:	000b5331 	.word	0x000b5331
   b86c0:	000b5f7d 	.word	0x000b5f7d
   b86c4:	000b7651 	.word	0x000b7651
   b86c8:	000b7719 	.word	0x000b7719
   b86cc:	000b77a5 	.word	0x000b77a5
