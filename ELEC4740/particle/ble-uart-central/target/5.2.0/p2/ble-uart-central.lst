
/home/elec4740/Documents/particle/ble-uart-central/target/5.2.0/p2/ble-uart-central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f9000  085f9000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085f9018  085f9018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa068  085f9088  0000a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005f88  023fa070  085f9090  0000a070  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007aaa0  085ff018  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d0  1007ab18  1007ab18  0002ab18  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff090  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000f24  085ff094  085ff094  0001f094  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f094  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0010d019  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000104d1  00000000  00000000  0012d019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b08  00000000  00000000  0013d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e393  00000000  00000000  0013fff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003532b  00000000  00000000  0015e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5d0d  00000000  00000000  001936b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0003b336  00000000  00000000  002593bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000b080  00000000  00000000  002946f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007dd0  00000000  00000000  0029f774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f9018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f9018:	480e      	ldr	r0, [pc, #56]	; (85f9054 <module_user_pre_init+0x3c>)
 85f901a:	490f      	ldr	r1, [pc, #60]	; (85f9058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f901c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f901e:	4288      	cmp	r0, r1
 85f9020:	d005      	beq.n	85f902e <module_user_pre_init+0x16>
 85f9022:	4a0e      	ldr	r2, [pc, #56]	; (85f905c <module_user_pre_init+0x44>)
 85f9024:	4282      	cmp	r2, r0
 85f9026:	d002      	beq.n	85f902e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f9028:	4b0d      	ldr	r3, [pc, #52]	; (85f9060 <module_user_pre_init+0x48>)
 85f902a:	1a12      	subs	r2, r2, r0
 85f902c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f902e:	480d      	ldr	r0, [pc, #52]	; (85f9064 <module_user_pre_init+0x4c>)
 85f9030:	4a0d      	ldr	r2, [pc, #52]	; (85f9068 <module_user_pre_init+0x50>)
 85f9032:	2100      	movs	r1, #0
 85f9034:	4b0d      	ldr	r3, [pc, #52]	; (85f906c <module_user_pre_init+0x54>)
 85f9036:	1a12      	subs	r2, r2, r0
 85f9038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f903a:	480d      	ldr	r0, [pc, #52]	; (85f9070 <module_user_pre_init+0x58>)
 85f903c:	490d      	ldr	r1, [pc, #52]	; (85f9074 <module_user_pre_init+0x5c>)
 85f903e:	4288      	cmp	r0, r1
 85f9040:	d005      	beq.n	85f904e <module_user_pre_init+0x36>
 85f9042:	4a0d      	ldr	r2, [pc, #52]	; (85f9078 <module_user_pre_init+0x60>)
 85f9044:	4282      	cmp	r2, r0
 85f9046:	d002      	beq.n	85f904e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f9048:	4b05      	ldr	r3, [pc, #20]	; (85f9060 <module_user_pre_init+0x48>)
 85f904a:	1a12      	subs	r2, r2, r0
 85f904c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f904e:	4801      	ldr	r0, [pc, #4]	; (85f9054 <module_user_pre_init+0x3c>)
 85f9050:	bd08      	pop	{r3, pc}
 85f9052:	bf00      	nop
 85f9054:	1007aaa0 	.word	0x1007aaa0
 85f9058:	085ff018 	.word	0x085ff018
 85f905c:	1007ab18 	.word	0x1007ab18
 85f9060:	10110d2d 	.word	0x10110d2d
 85f9064:	1007ab18 	.word	0x1007ab18
 85f9068:	1007afe8 	.word	0x1007afe8
 85f906c:	10110ea1 	.word	0x10110ea1
 85f9070:	023fa068 	.word	0x023fa068
 85f9074:	085f9088 	.word	0x085f9088
 85f9078:	023ffff8 	.word	0x023ffff8

085f907c <dynalib_preinit>:
 85f907c:	085f9019 00000000                       .._.....

Disassembly of section .psram_text:

023fa070 <strcmp>:
 23fa070:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fa074:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fa078:	2a01      	cmp	r2, #1
 23fa07a:	bf28      	it	cs
 23fa07c:	429a      	cmpcs	r2, r3
 23fa07e:	d0f7      	beq.n	23fa070 <strcmp>
 23fa080:	1ad0      	subs	r0, r2, r3
 23fa082:	4770      	bx	lr

023fa084 <strlen>:
 23fa084:	4603      	mov	r3, r0
 23fa086:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa08a:	2a00      	cmp	r2, #0
 23fa08c:	d1fb      	bne.n	23fa086 <strlen+0x2>
 23fa08e:	1a18      	subs	r0, r3, r0
 23fa090:	3801      	subs	r0, #1
 23fa092:	4770      	bx	lr

023fa094 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa094:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa096:	f001 fa87 	bl	23fb5a8 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa09a:	2500      	movs	r5, #0
 23fa09c:	4e05      	ldr	r6, [pc, #20]	; (23fa0b4 <module_user_init+0x20>)
 23fa09e:	4c06      	ldr	r4, [pc, #24]	; (23fa0b8 <module_user_init+0x24>)
 23fa0a0:	1ba4      	subs	r4, r4, r6
 23fa0a2:	08a4      	lsrs	r4, r4, #2
 23fa0a4:	42ac      	cmp	r4, r5
 23fa0a6:	d100      	bne.n	23fa0aa <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa0a8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa0aa:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa0ae:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa0b0:	3501      	adds	r5, #1
 23fa0b2:	e7f7      	b.n	23fa0a4 <module_user_init+0x10>
 23fa0b4:	023fffd4 	.word	0x023fffd4
 23fa0b8:	023ffff8 	.word	0x023ffff8

023fa0bc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa0bc:	f000 b870 	b.w	23fa1a0 <setup>

023fa0c0 <module_user_loop>:
}

void module_user_loop() {
 23fa0c0:	b508      	push	{r3, lr}
    loop();
 23fa0c2:	f000 f883 	bl	23fa1cc <loop>
    _post_loop();
}
 23fa0c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa0ca:	f001 ba25 	b.w	23fb518 <_post_loop>

023fa0ce <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa0ce:	f000 bd87 	b.w	23fabe0 <malloc>

023fa0d2 <_Znaj>:
 23fa0d2:	f000 bd85 	b.w	23fabe0 <malloc>

023fa0d6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa0d6:	f000 bd91 	b.w	23fabfc <free>
	...

023fa0dc <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa0dc:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa0de:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa0e0:	4a02      	ldr	r2, [pc, #8]	; (23fa0ec <__cxa_pure_virtual+0x10>)
 23fa0e2:	4903      	ldr	r1, [pc, #12]	; (23fa0f0 <__cxa_pure_virtual+0x14>)
 23fa0e4:	f000 fc56 	bl	23fa994 <panic_>
  while (1);
 23fa0e8:	e7fe      	b.n	23fa0e8 <__cxa_pure_virtual+0xc>
 23fa0ea:	bf00      	nop
 23fa0ec:	023fa925 	.word	0x023fa925
 23fa0f0:	023ff7f8 	.word	0x023ff7f8

023fa0f4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa0f4:	7800      	ldrb	r0, [r0, #0]
 23fa0f6:	fab0 f080 	clz	r0, r0
 23fa0fa:	0940      	lsrs	r0, r0, #5
 23fa0fc:	4770      	bx	lr

023fa0fe <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa0fe:	2301      	movs	r3, #1
 23fa100:	7003      	strb	r3, [r0, #0]
 23fa102:	4770      	bx	lr

023fa104 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fa104:	4770      	bx	lr
	...

023fa108 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fa108:	b510      	push	{r4, lr}
 23fa10a:	4604      	mov	r4, r0
 23fa10c:	4b09      	ldr	r3, [pc, #36]	; (23fa134 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fa10e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fa110:	f001 fc14 	bl	23fb93c <_ZN5spark10LogManager8instanceEv>
 23fa114:	4621      	mov	r1, r4
 23fa116:	f001 fe5d 	bl	23fbdd4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fa11a:	f001 f917 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fa11e:	f001 f909 	bl	23fb334 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fa122:	4620      	mov	r0, r4
 23fa124:	4b04      	ldr	r3, [pc, #16]	; (23fa138 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fa126:	f840 3b04 	str.w	r3, [r0], #4
 23fa12a:	f001 fcef 	bl	23fbb0c <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fa12e:	4620      	mov	r0, r4
 23fa130:	bd10      	pop	{r4, pc}
 23fa132:	bf00      	nop
 23fa134:	023ff8a0 	.word	0x023ff8a0
 23fa138:	023ff888 	.word	0x023ff888

023fa13c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fa13c:	b510      	push	{r4, lr}
 23fa13e:	4604      	mov	r4, r0
    }
 23fa140:	f7ff ffe2 	bl	23fa108 <_ZN5spark16SerialLogHandlerD1Ev>
 23fa144:	4620      	mov	r0, r4
 23fa146:	2124      	movs	r1, #36	; 0x24
 23fa148:	f7ff ffc5 	bl	23fa0d6 <_ZdlPvj>
 23fa14c:	4620      	mov	r0, r4
 23fa14e:	bd10      	pop	{r4, pc}

023fa150 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fa150:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fa152:	f04f 0c20 	mov.w	ip, #32
 23fa156:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fa158:	b500      	push	{lr}
 23fa15a:	b08c      	sub	sp, #48	; 0x30
 23fa15c:	aa0d      	add	r2, sp, #52	; 0x34
 23fa15e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fa162:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa166:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fa16a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fa16c:	6801      	ldr	r1, [r0, #0]
 23fa16e:	aa04      	add	r2, sp, #16
 23fa170:	201e      	movs	r0, #30
 23fa172:	f000 fc2b 	bl	23fa9cc <log_message_v>
}
 23fa176:	b00c      	add	sp, #48	; 0x30
 23fa178:	f85d eb04 	ldr.w	lr, [sp], #4
 23fa17c:	b003      	add	sp, #12
 23fa17e:	4770      	bx	lr

023fa180 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
uint16_t counting;

const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
 23fa180:	b508      	push	{r3, lr}
    // for (size_t ii = 0; ii < len; ii++) {
    //     Serial.write(data[ii]);
    // }
	memcpy(&counting,&data[0],2);
 23fa182:	4b04      	ldr	r3, [pc, #16]	; (23fa194 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
 23fa184:	8802      	ldrh	r2, [r0, #0]
	Log.info("%d",counting);
 23fa186:	4904      	ldr	r1, [pc, #16]	; (23fa198 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
 23fa188:	4804      	ldr	r0, [pc, #16]	; (23fa19c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
	memcpy(&counting,&data[0],2);
 23fa18a:	801a      	strh	r2, [r3, #0]
	Log.info("%d",counting);
 23fa18c:	f7ff ffe0 	bl	23fa150 <_ZNK5spark6Logger4infoEPKcz>
}
 23fa190:	bd08      	pop	{r3, pc}
 23fa192:	bf00      	nop
 23fa194:	1007ab78 	.word	0x1007ab78
 23fa198:	023ff80d 	.word	0x023ff80d
 23fa19c:	1007aeb8 	.word	0x1007aeb8

023fa1a0 <setup>:

void setup() {
 23fa1a0:	b508      	push	{r3, lr}
    Serial.begin();
 23fa1a2:	f001 f8d3 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fa1a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa1aa:	f001 f8bf 	bl	23fb32c <_ZN9USBSerial5beginEl>
	BLE.on();
 23fa1ae:	f002 ffd3 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fa1b2:	f003 f81b 	bl	23fd1ec <_ZNK8particle14BleLocalDevice2onEv>
	// This is required with 3.1.0 only
	BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
#endif

    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
}
 23fa1b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
 23fa1ba:	4a02      	ldr	r2, [pc, #8]	; (23fa1c4 <setup+0x24>)
 23fa1bc:	4902      	ldr	r1, [pc, #8]	; (23fa1c8 <setup+0x28>)
 23fa1be:	4610      	mov	r0, r2
 23fa1c0:	f004 b82a 	b.w	23fe218 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
 23fa1c4:	1007ab90 	.word	0x1007ab90
 23fa1c8:	023fa181 	.word	0x023fa181

023fa1cc <loop>:

void loop() {
 23fa1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa1d0:	b088      	sub	sp, #32
    if (BLE.connected()) {
 23fa1d2:	f002 ffc1 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fa1d6:	f003 f84f 	bl	23fd278 <_ZNK8particle14BleLocalDevice9connectedEv>
 23fa1da:	4604      	mov	r4, r0
 23fa1dc:	b178      	cbz	r0, 23fa1fe <loop+0x32>
		uint8_t txBuf[UART_TX_BUF_SIZE];
		size_t txLen = 0;
		counting++;
 23fa1de:	4a3c      	ldr	r2, [pc, #240]	; (23fa2d0 <loop+0x104>)
		counting++;
		memcpy(&txBuf[0], &counting,2);
        peerRxCharacteristic.setValue(txBuf,2);
 23fa1e0:	483c      	ldr	r0, [pc, #240]	; (23fa2d4 <loop+0x108>)
		counting++;
 23fa1e2:	8813      	ldrh	r3, [r2, #0]
        peerRxCharacteristic.setValue(txBuf,2);
 23fa1e4:	a903      	add	r1, sp, #12
		counting++;
 23fa1e6:	3302      	adds	r3, #2
 23fa1e8:	b29b      	uxth	r3, r3
 23fa1ea:	8013      	strh	r3, [r2, #0]
		memcpy(&txBuf[0], &counting,2);
 23fa1ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        peerRxCharacteristic.setValue(txBuf,2);
 23fa1f0:	2202      	movs	r2, #2
 23fa1f2:	2300      	movs	r3, #0
 23fa1f4:	f002 fe40 	bl	23fce78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
				}
			}
    	}

    }
}
 23fa1f8:	b008      	add	sp, #32
 23fa1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fa1fe:	f000 fb9f 	bl	23fa940 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
 23fa202:	4d35      	ldr	r5, [pc, #212]	; (23fa2d8 <loop+0x10c>)
 23fa204:	682b      	ldr	r3, [r5, #0]
 23fa206:	1ac0      	subs	r0, r0, r3
 23fa208:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23fa20c:	d3f4      	bcc.n	23fa1f8 <loop+0x2c>
 23fa20e:	f000 fb97 	bl	23fa940 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
 23fa212:	6028      	str	r0, [r5, #0]
    		int count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
 23fa214:	f002 ffa0 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fa218:	2214      	movs	r2, #20
 23fa21a:	4930      	ldr	r1, [pc, #192]	; (23fa2dc <loop+0x110>)
 23fa21c:	f003 f864 	bl	23fd2e8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
 23fa220:	1e07      	subs	r7, r0, #0
 23fa222:	dde9      	ble.n	23fa1f8 <loop+0x2c>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
 23fa224:	4e2d      	ldr	r6, [pc, #180]	; (23fa2dc <loop+0x110>)
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23fa226:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 23fa2f0 <loop+0x124>
				for (uint8_t ii = 0; ii < count; ii++) {
 23fa22a:	b2e5      	uxtb	r5, r4
 23fa22c:	42af      	cmp	r7, r5
 23fa22e:	dde3      	ble.n	23fa1f8 <loop+0x2c>
					BleUuid foundServiceUuid;
 23fa230:	a803      	add	r0, sp, #12
 23fa232:	f002 fbf1 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
 23fa236:	2324      	movs	r3, #36	; 0x24
 23fa238:	435d      	muls	r5, r3
 23fa23a:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
 23fa23e:	2201      	movs	r2, #1
 23fa240:	a903      	add	r1, sp, #12
 23fa242:	4430      	add	r0, r6
 23fa244:	f003 ff04 	bl	23fe050 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23fa248:	2800      	cmp	r0, #0
 23fa24a:	d03e      	beq.n	23fa2ca <loop+0xfe>
 23fa24c:	4641      	mov	r1, r8
 23fa24e:	a803      	add	r0, sp, #12
 23fa250:	f002 fc3d 	bl	23fcace <_ZNK8particle7BleUuideqERKS0_>
 23fa254:	2800      	cmp	r0, #0
 23fa256:	d038      	beq.n	23fa2ca <loop+0xfe>
						peer = BLE.connect(scanResults[ii].address());
 23fa258:	f002 ff7e 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fa25c:	1972      	adds	r2, r6, r5
 23fa25e:	4601      	mov	r1, r0
 23fa260:	2301      	movs	r3, #1
 23fa262:	a801      	add	r0, sp, #4
 23fa264:	f004 fb2a 	bl	23fe8bc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fa268:	4e1d      	ldr	r6, [pc, #116]	; (23fa2e0 <loop+0x114>)
 23fa26a:	9b01      	ldr	r3, [sp, #4]
 23fa26c:	9d02      	ldr	r5, [sp, #8]
 23fa26e:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
 23fa270:	6873      	ldr	r3, [r6, #4]
 23fa272:	429d      	cmp	r5, r3
 23fa274:	d016      	beq.n	23fa2a4 <loop+0xd8>
	    if (__tmp != 0)
 23fa276:	b115      	cbz	r5, 23fa27e <loop+0xb2>
    { ++_M_use_count; }
 23fa278:	686b      	ldr	r3, [r5, #4]
 23fa27a:	3301      	adds	r3, #1
 23fa27c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fa27e:	6874      	ldr	r4, [r6, #4]
 23fa280:	b17c      	cbz	r4, 23fa2a2 <loop+0xd6>
      if (--_M_use_count == 0)
 23fa282:	6863      	ldr	r3, [r4, #4]
 23fa284:	3b01      	subs	r3, #1
 23fa286:	6063      	str	r3, [r4, #4]
 23fa288:	b95b      	cbnz	r3, 23fa2a2 <loop+0xd6>
          _M_dispose();
 23fa28a:	6823      	ldr	r3, [r4, #0]
 23fa28c:	4620      	mov	r0, r4
 23fa28e:	689b      	ldr	r3, [r3, #8]
 23fa290:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa292:	68a3      	ldr	r3, [r4, #8]
 23fa294:	3b01      	subs	r3, #1
 23fa296:	60a3      	str	r3, [r4, #8]
 23fa298:	b91b      	cbnz	r3, 23fa2a2 <loop+0xd6>
            _M_destroy();
 23fa29a:	6823      	ldr	r3, [r4, #0]
 23fa29c:	4620      	mov	r0, r4
 23fa29e:	68db      	ldr	r3, [r3, #12]
 23fa2a0:	4798      	blx	r3
	    _M_pi = __tmp;
 23fa2a2:	6075      	str	r5, [r6, #4]
 23fa2a4:	a801      	add	r0, sp, #4
 23fa2a6:	f003 f88e 	bl	23fd3c6 <_ZN8particle13BlePeerDeviceD1Ev>
						if (peer.connected()) {
 23fa2aa:	480d      	ldr	r0, [pc, #52]	; (23fa2e0 <loop+0x114>)
 23fa2ac:	f002 febe 	bl	23fd02c <_ZNK8particle13BlePeerDevice9connectedEv>
 23fa2b0:	2800      	cmp	r0, #0
 23fa2b2:	d0a1      	beq.n	23fa1f8 <loop+0x2c>
							peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
 23fa2b4:	4a0b      	ldr	r2, [pc, #44]	; (23fa2e4 <loop+0x118>)
 23fa2b6:	490c      	ldr	r1, [pc, #48]	; (23fa2e8 <loop+0x11c>)
 23fa2b8:	4809      	ldr	r0, [pc, #36]	; (23fa2e0 <loop+0x114>)
 23fa2ba:	f003 ff83 	bl	23fe1c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
 23fa2be:	4a0b      	ldr	r2, [pc, #44]	; (23fa2ec <loop+0x120>)
 23fa2c0:	4904      	ldr	r1, [pc, #16]	; (23fa2d4 <loop+0x108>)
 23fa2c2:	4807      	ldr	r0, [pc, #28]	; (23fa2e0 <loop+0x114>)
 23fa2c4:	f003 ff7e 	bl	23fe1c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
}
 23fa2c8:	e796      	b.n	23fa1f8 <loop+0x2c>
				for (uint8_t ii = 0; ii < count; ii++) {
 23fa2ca:	3401      	adds	r4, #1
 23fa2cc:	e7ad      	b.n	23fa22a <loop+0x5e>
 23fa2ce:	bf00      	nop
 23fa2d0:	1007ab78 	.word	0x1007ab78
 23fa2d4:	1007ab88 	.word	0x1007ab88
 23fa2d8:	1007ab7c 	.word	0x1007ab7c
 23fa2dc:	1007ab98 	.word	0x1007ab98
 23fa2e0:	1007ab80 	.word	0x1007ab80
 23fa2e4:	1007ab64 	.word	0x1007ab64
 23fa2e8:	1007ab90 	.word	0x1007ab90
 23fa2ec:	1007ab50 	.word	0x1007ab50
 23fa2f0:	1007ab3c 	.word	0x1007ab3c

023fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa2f6:	2614      	movs	r6, #20
 23fa2f8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa2fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa302:	42ae      	cmp	r6, r5
 23fa304:	d004      	beq.n	23fa310 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fa306:	4628      	mov	r0, r5
 23fa308:	f004 fdcc 	bl	23feea4 <_ZN6StringD1Ev>
 23fa30c:	3514      	adds	r5, #20
 23fa30e:	e7f8      	b.n	23fa302 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa310:	6820      	ldr	r0, [r4, #0]
 23fa312:	f000 fc73 	bl	23fabfc <free>
    AllocatorT::free(data_);
}
 23fa316:	4620      	mov	r0, r4
 23fa318:	bd70      	pop	{r4, r5, r6, pc}

023fa31a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa31a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa31e:	4604      	mov	r4, r0
 23fa320:	460d      	mov	r5, r1
 23fa322:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa324:	d916      	bls.n	23fa354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fa326:	4290      	cmp	r0, r2
 23fa328:	d215      	bcs.n	23fa356 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fa32a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa32e:	1a75      	subs	r5, r6, r1
 23fa330:	f1a1 0714 	sub.w	r7, r1, #20
 23fa334:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa336:	42b7      	cmp	r7, r6
 23fa338:	d01c      	beq.n	23fa374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fa33a:	b12c      	cbz	r4, 23fa348 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fa33c:	4631      	mov	r1, r6
 23fa33e:	4620      	mov	r0, r4
 23fa340:	f004 fe2c 	bl	23fef9c <_ZN6StringC1EOS_>
 23fa344:	7c33      	ldrb	r3, [r6, #16]
 23fa346:	7423      	strb	r3, [r4, #16]
 23fa348:	4630      	mov	r0, r6
 23fa34a:	f004 fdab 	bl	23feea4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa34e:	3e14      	subs	r6, #20
 23fa350:	3c14      	subs	r4, #20
 23fa352:	e7f0      	b.n	23fa336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa354:	d00e      	beq.n	23fa374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fa356:	42b5      	cmp	r5, r6
 23fa358:	d00c      	beq.n	23fa374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fa35a:	b12c      	cbz	r4, 23fa368 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fa35c:	4629      	mov	r1, r5
 23fa35e:	4620      	mov	r0, r4
 23fa360:	f004 fe1c 	bl	23fef9c <_ZN6StringC1EOS_>
 23fa364:	7c2b      	ldrb	r3, [r5, #16]
 23fa366:	7423      	strb	r3, [r4, #16]
 23fa368:	4628      	mov	r0, r5
 23fa36a:	f004 fd9b 	bl	23feea4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fa36e:	3514      	adds	r5, #20
 23fa370:	3414      	adds	r4, #20
 23fa372:	e7f0      	b.n	23fa356 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fa374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fa376:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fa37c:	e9c0 3300 	strd	r3, r3, [r0]
 23fa380:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa382:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa384:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa386:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa388:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa38a:	dd24      	ble.n	23fa3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fa38c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fa390:	fb08 f007 	mul.w	r0, r8, r7
 23fa394:	f000 fc24 	bl	23fabe0 <malloc>
            if (!d) {
 23fa398:	4605      	mov	r5, r0
 23fa39a:	b1e0      	cbz	r0, 23fa3d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fa39c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fa3a0:	fb08 1202 	mla	r2, r8, r2, r1
 23fa3a4:	f7ff ffb9 	bl	23fa31a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fa3a8:	6820      	ldr	r0, [r4, #0]
 23fa3aa:	f000 fc27 	bl	23fabfc <free>
        data_ = d;
 23fa3ae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fa3b0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fa3b2:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fa3b6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fa3ba:	45b8      	cmp	r8, r7
 23fa3bc:	d009      	beq.n	23fa3d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fa3be:	4639      	mov	r1, r7
 23fa3c0:	4628      	mov	r0, r5
 23fa3c2:	f004 fe05 	bl	23fefd0 <_ZN6StringC1ERKS_>
 23fa3c6:	7c3b      	ldrb	r3, [r7, #16]
 23fa3c8:	3514      	adds	r5, #20
 23fa3ca:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fa3ce:	3714      	adds	r7, #20
 23fa3d0:	e7f3      	b.n	23fa3ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fa3d2:	6873      	ldr	r3, [r6, #4]
 23fa3d4:	6063      	str	r3, [r4, #4]
}
 23fa3d6:	4620      	mov	r0, r4
 23fa3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fa3dc <_GLOBAL__sub_I_LogHandler>:
        capacity_(0) {
 23fa3dc:	2300      	movs	r3, #0
}
 23fa3de:	b570      	push	{r4, r5, r6, lr}
 23fa3e0:	b08c      	sub	sp, #48	; 0x30
 23fa3e2:	e9cd 3300 	strd	r3, r3, [sp]
 23fa3e6:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fa3e8:	f000 ffb0 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fa3ec:	4605      	mov	r5, r0
 23fa3ee:	4669      	mov	r1, sp
 23fa3f0:	a803      	add	r0, sp, #12
 23fa3f2:	f7ff ffc0 	bl	23fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fa3f6:	a903      	add	r1, sp, #12
 23fa3f8:	a806      	add	r0, sp, #24
        filter_(level, filters) {
 23fa3fa:	4c2b      	ldr	r4, [pc, #172]	; (23fa4a8 <_GLOBAL__sub_I_LogHandler+0xcc>)
        stream_(&stream) {
 23fa3fc:	f7ff ffbb 	bl	23fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa400:	4b2a      	ldr	r3, [pc, #168]	; (23fa4ac <_GLOBAL__sub_I_LogHandler+0xd0>)
 23fa402:	a906      	add	r1, sp, #24
 23fa404:	6023      	str	r3, [r4, #0]
 23fa406:	a809      	add	r0, sp, #36	; 0x24
 23fa408:	f7ff ffb5 	bl	23fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa40c:	aa09      	add	r2, sp, #36	; 0x24
 23fa40e:	211e      	movs	r1, #30
 23fa410:	1d20      	adds	r0, r4, #4
 23fa412:	f001 fdc1 	bl	23fbf98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa416:	a809      	add	r0, sp, #36	; 0x24
 23fa418:	f7ff ff6c 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa41c:	a806      	add	r0, sp, #24
 23fa41e:	f7ff ff69 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa422:	4b23      	ldr	r3, [pc, #140]	; (23fa4b0 <_GLOBAL__sub_I_LogHandler+0xd4>)
 23fa424:	6225      	str	r5, [r4, #32]
 23fa426:	6023      	str	r3, [r4, #0]
 23fa428:	a803      	add	r0, sp, #12
 23fa42a:	f7ff ff63 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa42e:	4b21      	ldr	r3, [pc, #132]	; (23fa4b4 <_GLOBAL__sub_I_LogHandler+0xd8>)
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
 23fa430:	2514      	movs	r5, #20
 23fa432:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fa434:	f000 ff8a 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fa438:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa43c:	f000 ff76 	bl	23fb32c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fa440:	f001 fa7c 	bl	23fb93c <_ZN5spark10LogManager8instanceEv>
 23fa444:	4621      	mov	r1, r4
 23fa446:	f001 fc7f 	bl	23fbd48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler LogHandler;
 23fa44a:	4668      	mov	r0, sp
 23fa44c:	f7ff ff52 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
const BleUuid serviceUuid("7828f55d-c04c-49e8-86e9-8f1362755dc7");
 23fa450:	4919      	ldr	r1, [pc, #100]	; (23fa4b8 <_GLOBAL__sub_I_LogHandler+0xdc>)
 23fa452:	481a      	ldr	r0, [pc, #104]	; (23fa4bc <_GLOBAL__sub_I_LogHandler+0xe0>)
 23fa454:	f002 fbba 	bl	23fcbcc <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("75c14d44-1b11-4514-b221-df15fc88050f");
 23fa458:	4919      	ldr	r1, [pc, #100]	; (23fa4c0 <_GLOBAL__sub_I_LogHandler+0xe4>)
 23fa45a:	481a      	ldr	r0, [pc, #104]	; (23fa4c4 <_GLOBAL__sub_I_LogHandler+0xe8>)
 23fa45c:	f002 fbb6 	bl	23fcbcc <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("10fcd87a-8601-484e-829d-d114a40a8ba6");
 23fa460:	4919      	ldr	r1, [pc, #100]	; (23fa4c8 <_GLOBAL__sub_I_LogHandler+0xec>)
 23fa462:	481a      	ldr	r0, [pc, #104]	; (23fa4cc <_GLOBAL__sub_I_LogHandler+0xf0>)
 23fa464:	f002 fbb2 	bl	23fcbcc <_ZN8particle7BleUuidC1EPKc>
            : rssi_(BLE_RSSI_INVALID) {
 23fa468:	267f      	movs	r6, #127	; 0x7f
 23fa46a:	4c19      	ldr	r4, [pc, #100]	; (23fa4d0 <_GLOBAL__sub_I_LogHandler+0xf4>)
 23fa46c:	4620      	mov	r0, r4
 23fa46e:	f002 fac9 	bl	23fca04 <_ZN8particle10BleAddressC1Ev>
 23fa472:	f104 0008 	add.w	r0, r4, #8
 23fa476:	f003 fa92 	bl	23fd99e <_ZN8particle18BleAdvertisingDataC1Ev>
 23fa47a:	f104 0014 	add.w	r0, r4, #20
 23fa47e:	f003 fa8e 	bl	23fd99e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
 23fa482:	3d01      	subs	r5, #1
 23fa484:	f884 6020 	strb.w	r6, [r4, #32]
 23fa488:	f104 0424 	add.w	r4, r4, #36	; 0x24
 23fa48c:	d1ee      	bne.n	23fa46c <_GLOBAL__sub_I_LogHandler+0x90>
BleCharacteristic peerTxCharacteristic;
 23fa48e:	4811      	ldr	r0, [pc, #68]	; (23fa4d4 <_GLOBAL__sub_I_LogHandler+0xf8>)
 23fa490:	f002 fccc 	bl	23fce2c <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
 23fa494:	4810      	ldr	r0, [pc, #64]	; (23fa4d8 <_GLOBAL__sub_I_LogHandler+0xfc>)
 23fa496:	f002 fcc9 	bl	23fce2c <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
 23fa49a:	4810      	ldr	r0, [pc, #64]	; (23fa4dc <_GLOBAL__sub_I_LogHandler+0x100>)
}
 23fa49c:	b00c      	add	sp, #48	; 0x30
 23fa49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlePeerDevice peer;
 23fa4a2:	f002 bd9f 	b.w	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
 23fa4a6:	bf00      	nop
 23fa4a8:	1007ab18 	.word	0x1007ab18
 23fa4ac:	023ff888 	.word	0x023ff888
 23fa4b0:	023ffa30 	.word	0x023ffa30
 23fa4b4:	023ff8a0 	.word	0x023ff8a0
 23fa4b8:	023ff810 	.word	0x023ff810
 23fa4bc:	1007ab3c 	.word	0x1007ab3c
 23fa4c0:	023ff835 	.word	0x023ff835
 23fa4c4:	1007ab50 	.word	0x1007ab50
 23fa4c8:	023ff85a 	.word	0x023ff85a
 23fa4cc:	1007ab64 	.word	0x1007ab64
 23fa4d0:	1007ab98 	.word	0x1007ab98
 23fa4d4:	1007ab90 	.word	0x1007ab90
 23fa4d8:	1007ab88 	.word	0x1007ab88
 23fa4dc:	1007ab80 	.word	0x1007ab80

023fa4e0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fa4e0:	b509      	push	{r0, r3, lr}
 23fa4e2:	4804      	ldr	r0, [pc, #16]	; (23fa4f4 <HAL_USB_USART_Init+0x14>)
 23fa4e4:	6800      	ldr	r0, [r0, #0]
 23fa4e6:	4b04      	ldr	r3, [pc, #16]	; (23fa4f8 <HAL_USB_USART_Init+0x18>)
 23fa4e8:	4403      	add	r3, r0
 23fa4ea:	681b      	ldr	r3, [r3, #0]
 23fa4ec:	681b      	ldr	r3, [r3, #0]
 23fa4ee:	9302      	str	r3, [sp, #8]
 23fa4f0:	bd09      	pop	{r0, r3, pc}
 23fa4f2:	0000      	.short	0x0000
 23fa4f4:	1007aaa0 	.word	0x1007aaa0
 23fa4f8:	00000034 	.word	0x00000034

023fa4fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fa4fc:	b509      	push	{r0, r3, lr}
 23fa4fe:	4804      	ldr	r0, [pc, #16]	; (23fa510 <HAL_USB_USART_Begin+0x14>)
 23fa500:	6800      	ldr	r0, [r0, #0]
 23fa502:	4b04      	ldr	r3, [pc, #16]	; (23fa514 <HAL_USB_USART_Begin+0x18>)
 23fa504:	4403      	add	r3, r0
 23fa506:	681b      	ldr	r3, [r3, #0]
 23fa508:	685b      	ldr	r3, [r3, #4]
 23fa50a:	9302      	str	r3, [sp, #8]
 23fa50c:	bd09      	pop	{r0, r3, pc}
 23fa50e:	0000      	.short	0x0000
 23fa510:	1007aaa0 	.word	0x1007aaa0
 23fa514:	00000034 	.word	0x00000034

023fa518 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fa518:	b509      	push	{r0, r3, lr}
 23fa51a:	4804      	ldr	r0, [pc, #16]	; (23fa52c <HAL_USB_USART_End+0x14>)
 23fa51c:	6800      	ldr	r0, [r0, #0]
 23fa51e:	4b04      	ldr	r3, [pc, #16]	; (23fa530 <HAL_USB_USART_End+0x18>)
 23fa520:	4403      	add	r3, r0
 23fa522:	681b      	ldr	r3, [r3, #0]
 23fa524:	689b      	ldr	r3, [r3, #8]
 23fa526:	9302      	str	r3, [sp, #8]
 23fa528:	bd09      	pop	{r0, r3, pc}
 23fa52a:	0000      	.short	0x0000
 23fa52c:	1007aaa0 	.word	0x1007aaa0
 23fa530:	00000034 	.word	0x00000034

023fa534 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fa534:	b509      	push	{r0, r3, lr}
 23fa536:	4804      	ldr	r0, [pc, #16]	; (23fa548 <HAL_USB_USART_Available_Data+0x14>)
 23fa538:	6800      	ldr	r0, [r0, #0]
 23fa53a:	4b04      	ldr	r3, [pc, #16]	; (23fa54c <HAL_USB_USART_Available_Data+0x18>)
 23fa53c:	4403      	add	r3, r0
 23fa53e:	681b      	ldr	r3, [r3, #0]
 23fa540:	691b      	ldr	r3, [r3, #16]
 23fa542:	9302      	str	r3, [sp, #8]
 23fa544:	bd09      	pop	{r0, r3, pc}
 23fa546:	0000      	.short	0x0000
 23fa548:	1007aaa0 	.word	0x1007aaa0
 23fa54c:	00000034 	.word	0x00000034

023fa550 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fa550:	b509      	push	{r0, r3, lr}
 23fa552:	4804      	ldr	r0, [pc, #16]	; (23fa564 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fa554:	6800      	ldr	r0, [r0, #0]
 23fa556:	4b04      	ldr	r3, [pc, #16]	; (23fa568 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fa558:	4403      	add	r3, r0
 23fa55a:	681b      	ldr	r3, [r3, #0]
 23fa55c:	695b      	ldr	r3, [r3, #20]
 23fa55e:	9302      	str	r3, [sp, #8]
 23fa560:	bd09      	pop	{r0, r3, pc}
 23fa562:	0000      	.short	0x0000
 23fa564:	1007aaa0 	.word	0x1007aaa0
 23fa568:	00000034 	.word	0x00000034

023fa56c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fa56c:	b509      	push	{r0, r3, lr}
 23fa56e:	4804      	ldr	r0, [pc, #16]	; (23fa580 <HAL_USB_USART_Receive_Data+0x14>)
 23fa570:	6800      	ldr	r0, [r0, #0]
 23fa572:	4b04      	ldr	r3, [pc, #16]	; (23fa584 <HAL_USB_USART_Receive_Data+0x18>)
 23fa574:	4403      	add	r3, r0
 23fa576:	681b      	ldr	r3, [r3, #0]
 23fa578:	699b      	ldr	r3, [r3, #24]
 23fa57a:	9302      	str	r3, [sp, #8]
 23fa57c:	bd09      	pop	{r0, r3, pc}
 23fa57e:	0000      	.short	0x0000
 23fa580:	1007aaa0 	.word	0x1007aaa0
 23fa584:	00000034 	.word	0x00000034

023fa588 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fa588:	b509      	push	{r0, r3, lr}
 23fa58a:	4804      	ldr	r0, [pc, #16]	; (23fa59c <HAL_USB_USART_Send_Data+0x14>)
 23fa58c:	6800      	ldr	r0, [r0, #0]
 23fa58e:	4b04      	ldr	r3, [pc, #16]	; (23fa5a0 <HAL_USB_USART_Send_Data+0x18>)
 23fa590:	4403      	add	r3, r0
 23fa592:	681b      	ldr	r3, [r3, #0]
 23fa594:	69db      	ldr	r3, [r3, #28]
 23fa596:	9302      	str	r3, [sp, #8]
 23fa598:	bd09      	pop	{r0, r3, pc}
 23fa59a:	0000      	.short	0x0000
 23fa59c:	1007aaa0 	.word	0x1007aaa0
 23fa5a0:	00000034 	.word	0x00000034

023fa5a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fa5a4:	b509      	push	{r0, r3, lr}
 23fa5a6:	4804      	ldr	r0, [pc, #16]	; (23fa5b8 <HAL_USB_USART_Flush_Data+0x14>)
 23fa5a8:	6800      	ldr	r0, [r0, #0]
 23fa5aa:	4b04      	ldr	r3, [pc, #16]	; (23fa5bc <HAL_USB_USART_Flush_Data+0x18>)
 23fa5ac:	4403      	add	r3, r0
 23fa5ae:	681b      	ldr	r3, [r3, #0]
 23fa5b0:	6a1b      	ldr	r3, [r3, #32]
 23fa5b2:	9302      	str	r3, [sp, #8]
 23fa5b4:	bd09      	pop	{r0, r3, pc}
 23fa5b6:	0000      	.short	0x0000
 23fa5b8:	1007aaa0 	.word	0x1007aaa0
 23fa5bc:	00000034 	.word	0x00000034

023fa5c0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fa5c0:	b509      	push	{r0, r3, lr}
 23fa5c2:	4804      	ldr	r0, [pc, #16]	; (23fa5d4 <hal_usart_end+0x14>)
 23fa5c4:	6800      	ldr	r0, [r0, #0]
 23fa5c6:	4b04      	ldr	r3, [pc, #16]	; (23fa5d8 <hal_usart_end+0x18>)
 23fa5c8:	4403      	add	r3, r0
 23fa5ca:	681b      	ldr	r3, [r3, #0]
 23fa5cc:	689b      	ldr	r3, [r3, #8]
 23fa5ce:	9302      	str	r3, [sp, #8]
 23fa5d0:	bd09      	pop	{r0, r3, pc}
 23fa5d2:	0000      	.short	0x0000
 23fa5d4:	1007aaa0 	.word	0x1007aaa0
 23fa5d8:	00000024 	.word	0x00000024

023fa5dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fa5dc:	b509      	push	{r0, r3, lr}
 23fa5de:	4804      	ldr	r0, [pc, #16]	; (23fa5f0 <hal_usart_write+0x14>)
 23fa5e0:	6800      	ldr	r0, [r0, #0]
 23fa5e2:	4b04      	ldr	r3, [pc, #16]	; (23fa5f4 <hal_usart_write+0x18>)
 23fa5e4:	4403      	add	r3, r0
 23fa5e6:	681b      	ldr	r3, [r3, #0]
 23fa5e8:	68db      	ldr	r3, [r3, #12]
 23fa5ea:	9302      	str	r3, [sp, #8]
 23fa5ec:	bd09      	pop	{r0, r3, pc}
 23fa5ee:	0000      	.short	0x0000
 23fa5f0:	1007aaa0 	.word	0x1007aaa0
 23fa5f4:	00000024 	.word	0x00000024

023fa5f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fa5f8:	b509      	push	{r0, r3, lr}
 23fa5fa:	4804      	ldr	r0, [pc, #16]	; (23fa60c <hal_usart_available+0x14>)
 23fa5fc:	6800      	ldr	r0, [r0, #0]
 23fa5fe:	4b04      	ldr	r3, [pc, #16]	; (23fa610 <hal_usart_available+0x18>)
 23fa600:	4403      	add	r3, r0
 23fa602:	681b      	ldr	r3, [r3, #0]
 23fa604:	691b      	ldr	r3, [r3, #16]
 23fa606:	9302      	str	r3, [sp, #8]
 23fa608:	bd09      	pop	{r0, r3, pc}
 23fa60a:	0000      	.short	0x0000
 23fa60c:	1007aaa0 	.word	0x1007aaa0
 23fa610:	00000024 	.word	0x00000024

023fa614 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fa614:	b509      	push	{r0, r3, lr}
 23fa616:	4804      	ldr	r0, [pc, #16]	; (23fa628 <hal_usart_read+0x14>)
 23fa618:	6800      	ldr	r0, [r0, #0]
 23fa61a:	4b04      	ldr	r3, [pc, #16]	; (23fa62c <hal_usart_read+0x18>)
 23fa61c:	4403      	add	r3, r0
 23fa61e:	681b      	ldr	r3, [r3, #0]
 23fa620:	695b      	ldr	r3, [r3, #20]
 23fa622:	9302      	str	r3, [sp, #8]
 23fa624:	bd09      	pop	{r0, r3, pc}
 23fa626:	0000      	.short	0x0000
 23fa628:	1007aaa0 	.word	0x1007aaa0
 23fa62c:	00000024 	.word	0x00000024

023fa630 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fa630:	b509      	push	{r0, r3, lr}
 23fa632:	4804      	ldr	r0, [pc, #16]	; (23fa644 <hal_usart_peek+0x14>)
 23fa634:	6800      	ldr	r0, [r0, #0]
 23fa636:	4b04      	ldr	r3, [pc, #16]	; (23fa648 <hal_usart_peek+0x18>)
 23fa638:	4403      	add	r3, r0
 23fa63a:	681b      	ldr	r3, [r3, #0]
 23fa63c:	699b      	ldr	r3, [r3, #24]
 23fa63e:	9302      	str	r3, [sp, #8]
 23fa640:	bd09      	pop	{r0, r3, pc}
 23fa642:	0000      	.short	0x0000
 23fa644:	1007aaa0 	.word	0x1007aaa0
 23fa648:	00000024 	.word	0x00000024

023fa64c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fa64c:	b509      	push	{r0, r3, lr}
 23fa64e:	4804      	ldr	r0, [pc, #16]	; (23fa660 <hal_usart_flush+0x14>)
 23fa650:	6800      	ldr	r0, [r0, #0]
 23fa652:	4b04      	ldr	r3, [pc, #16]	; (23fa664 <hal_usart_flush+0x18>)
 23fa654:	4403      	add	r3, r0
 23fa656:	681b      	ldr	r3, [r3, #0]
 23fa658:	69db      	ldr	r3, [r3, #28]
 23fa65a:	9302      	str	r3, [sp, #8]
 23fa65c:	bd09      	pop	{r0, r3, pc}
 23fa65e:	0000      	.short	0x0000
 23fa660:	1007aaa0 	.word	0x1007aaa0
 23fa664:	00000024 	.word	0x00000024

023fa668 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fa668:	b509      	push	{r0, r3, lr}
 23fa66a:	4804      	ldr	r0, [pc, #16]	; (23fa67c <hal_usart_is_enabled+0x14>)
 23fa66c:	6800      	ldr	r0, [r0, #0]
 23fa66e:	4b04      	ldr	r3, [pc, #16]	; (23fa680 <hal_usart_is_enabled+0x18>)
 23fa670:	4403      	add	r3, r0
 23fa672:	681b      	ldr	r3, [r3, #0]
 23fa674:	6a1b      	ldr	r3, [r3, #32]
 23fa676:	9302      	str	r3, [sp, #8]
 23fa678:	bd09      	pop	{r0, r3, pc}
 23fa67a:	0000      	.short	0x0000
 23fa67c:	1007aaa0 	.word	0x1007aaa0
 23fa680:	00000024 	.word	0x00000024

023fa684 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fa684:	b509      	push	{r0, r3, lr}
 23fa686:	4804      	ldr	r0, [pc, #16]	; (23fa698 <hal_usart_available_data_for_write+0x14>)
 23fa688:	6800      	ldr	r0, [r0, #0]
 23fa68a:	4b04      	ldr	r3, [pc, #16]	; (23fa69c <hal_usart_available_data_for_write+0x18>)
 23fa68c:	4403      	add	r3, r0
 23fa68e:	681b      	ldr	r3, [r3, #0]
 23fa690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fa692:	9302      	str	r3, [sp, #8]
 23fa694:	bd09      	pop	{r0, r3, pc}
 23fa696:	0000      	.short	0x0000
 23fa698:	1007aaa0 	.word	0x1007aaa0
 23fa69c:	00000024 	.word	0x00000024

023fa6a0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fa6a0:	b509      	push	{r0, r3, lr}
 23fa6a2:	4804      	ldr	r0, [pc, #16]	; (23fa6b4 <hal_usart_begin_config+0x14>)
 23fa6a4:	6800      	ldr	r0, [r0, #0]
 23fa6a6:	4b04      	ldr	r3, [pc, #16]	; (23fa6b8 <hal_usart_begin_config+0x18>)
 23fa6a8:	4403      	add	r3, r0
 23fa6aa:	681b      	ldr	r3, [r3, #0]
 23fa6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fa6ae:	9302      	str	r3, [sp, #8]
 23fa6b0:	bd09      	pop	{r0, r3, pc}
 23fa6b2:	0000      	.short	0x0000
 23fa6b4:	1007aaa0 	.word	0x1007aaa0
 23fa6b8:	00000024 	.word	0x00000024

023fa6bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fa6bc:	b509      	push	{r0, r3, lr}
 23fa6be:	4804      	ldr	r0, [pc, #16]	; (23fa6d0 <hal_usart_init_ex+0x14>)
 23fa6c0:	6800      	ldr	r0, [r0, #0]
 23fa6c2:	4b04      	ldr	r3, [pc, #16]	; (23fa6d4 <hal_usart_init_ex+0x18>)
 23fa6c4:	4403      	add	r3, r0
 23fa6c6:	681b      	ldr	r3, [r3, #0]
 23fa6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fa6ca:	9302      	str	r3, [sp, #8]
 23fa6cc:	bd09      	pop	{r0, r3, pc}
 23fa6ce:	0000      	.short	0x0000
 23fa6d0:	1007aaa0 	.word	0x1007aaa0
 23fa6d4:	00000024 	.word	0x00000024

023fa6d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fa6d8:	b509      	push	{r0, r3, lr}
 23fa6da:	4804      	ldr	r0, [pc, #16]	; (23fa6ec <inet_inet_ntop+0x14>)
 23fa6dc:	6800      	ldr	r0, [r0, #0]
 23fa6de:	4b04      	ldr	r3, [pc, #16]	; (23fa6f0 <inet_inet_ntop+0x18>)
 23fa6e0:	4403      	add	r3, r0
 23fa6e2:	681b      	ldr	r3, [r3, #0]
 23fa6e4:	695b      	ldr	r3, [r3, #20]
 23fa6e6:	9302      	str	r3, [sp, #8]
 23fa6e8:	bd09      	pop	{r0, r3, pc}
 23fa6ea:	0000      	.short	0x0000
 23fa6ec:	1007aaa0 	.word	0x1007aaa0
 23fa6f0:	0000004c 	.word	0x0000004c

023fa6f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fa6f4:	b509      	push	{r0, r3, lr}
 23fa6f6:	4804      	ldr	r0, [pc, #16]	; (23fa708 <os_mutex_recursive_create+0x14>)
 23fa6f8:	6800      	ldr	r0, [r0, #0]
 23fa6fa:	4b04      	ldr	r3, [pc, #16]	; (23fa70c <os_mutex_recursive_create+0x18>)
 23fa6fc:	4403      	add	r3, r0
 23fa6fe:	681b      	ldr	r3, [r3, #0]
 23fa700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa702:	9302      	str	r3, [sp, #8]
 23fa704:	bd09      	pop	{r0, r3, pc}
 23fa706:	0000      	.short	0x0000
 23fa708:	1007aaa0 	.word	0x1007aaa0
 23fa70c:	00000030 	.word	0x00000030

023fa710 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fa710:	b509      	push	{r0, r3, lr}
 23fa712:	4804      	ldr	r0, [pc, #16]	; (23fa724 <os_mutex_recursive_destroy+0x14>)
 23fa714:	6800      	ldr	r0, [r0, #0]
 23fa716:	4b04      	ldr	r3, [pc, #16]	; (23fa728 <os_mutex_recursive_destroy+0x18>)
 23fa718:	4403      	add	r3, r0
 23fa71a:	681b      	ldr	r3, [r3, #0]
 23fa71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fa71e:	9302      	str	r3, [sp, #8]
 23fa720:	bd09      	pop	{r0, r3, pc}
 23fa722:	0000      	.short	0x0000
 23fa724:	1007aaa0 	.word	0x1007aaa0
 23fa728:	00000030 	.word	0x00000030

023fa72c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fa72c:	b509      	push	{r0, r3, lr}
 23fa72e:	4804      	ldr	r0, [pc, #16]	; (23fa740 <os_mutex_recursive_lock+0x14>)
 23fa730:	6800      	ldr	r0, [r0, #0]
 23fa732:	4b04      	ldr	r3, [pc, #16]	; (23fa744 <os_mutex_recursive_lock+0x18>)
 23fa734:	4403      	add	r3, r0
 23fa736:	681b      	ldr	r3, [r3, #0]
 23fa738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fa73a:	9302      	str	r3, [sp, #8]
 23fa73c:	bd09      	pop	{r0, r3, pc}
 23fa73e:	0000      	.short	0x0000
 23fa740:	1007aaa0 	.word	0x1007aaa0
 23fa744:	00000030 	.word	0x00000030

023fa748 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fa748:	b509      	push	{r0, r3, lr}
 23fa74a:	4804      	ldr	r0, [pc, #16]	; (23fa75c <os_mutex_recursive_unlock+0x14>)
 23fa74c:	6800      	ldr	r0, [r0, #0]
 23fa74e:	4b04      	ldr	r3, [pc, #16]	; (23fa760 <os_mutex_recursive_unlock+0x18>)
 23fa750:	4403      	add	r3, r0
 23fa752:	681b      	ldr	r3, [r3, #0]
 23fa754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fa756:	9302      	str	r3, [sp, #8]
 23fa758:	bd09      	pop	{r0, r3, pc}
 23fa75a:	0000      	.short	0x0000
 23fa75c:	1007aaa0 	.word	0x1007aaa0
 23fa760:	00000030 	.word	0x00000030

023fa764 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23fa764:	b509      	push	{r0, r3, lr}
 23fa766:	4804      	ldr	r0, [pc, #16]	; (23fa778 <hal_ble_stack_init+0x14>)
 23fa768:	6800      	ldr	r0, [r0, #0]
 23fa76a:	4b04      	ldr	r3, [pc, #16]	; (23fa77c <hal_ble_stack_init+0x18>)
 23fa76c:	4403      	add	r3, r0
 23fa76e:	681b      	ldr	r3, [r3, #0]
 23fa770:	689b      	ldr	r3, [r3, #8]
 23fa772:	9302      	str	r3, [sp, #8]
 23fa774:	bd09      	pop	{r0, r3, pc}
 23fa776:	0000      	.short	0x0000
 23fa778:	1007aaa0 	.word	0x1007aaa0
 23fa77c:	00000060 	.word	0x00000060

023fa780 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23fa780:	b509      	push	{r0, r3, lr}
 23fa782:	4804      	ldr	r0, [pc, #16]	; (23fa794 <hal_ble_gap_start_scan+0x14>)
 23fa784:	6800      	ldr	r0, [r0, #0]
 23fa786:	4b04      	ldr	r3, [pc, #16]	; (23fa798 <hal_ble_gap_start_scan+0x18>)
 23fa788:	4403      	add	r3, r0
 23fa78a:	681b      	ldr	r3, [r3, #0]
 23fa78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fa78e:	9302      	str	r3, [sp, #8]
 23fa790:	bd09      	pop	{r0, r3, pc}
 23fa792:	0000      	.short	0x0000
 23fa794:	1007aaa0 	.word	0x1007aaa0
 23fa798:	00000060 	.word	0x00000060

023fa79c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23fa79c:	b509      	push	{r0, r3, lr}
 23fa79e:	4804      	ldr	r0, [pc, #16]	; (23fa7b0 <hal_ble_gap_stop_scan+0x14>)
 23fa7a0:	6800      	ldr	r0, [r0, #0]
 23fa7a2:	4b04      	ldr	r3, [pc, #16]	; (23fa7b4 <hal_ble_gap_stop_scan+0x18>)
 23fa7a4:	4403      	add	r3, r0
 23fa7a6:	681b      	ldr	r3, [r3, #0]
 23fa7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23fa7ac:	9302      	str	r3, [sp, #8]
 23fa7ae:	bd09      	pop	{r0, r3, pc}
 23fa7b0:	1007aaa0 	.word	0x1007aaa0
 23fa7b4:	00000060 	.word	0x00000060

023fa7b8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23fa7b8:	b509      	push	{r0, r3, lr}
 23fa7ba:	4804      	ldr	r0, [pc, #16]	; (23fa7cc <hal_ble_gap_disconnect+0x14>)
 23fa7bc:	6800      	ldr	r0, [r0, #0]
 23fa7be:	4b04      	ldr	r3, [pc, #16]	; (23fa7d0 <hal_ble_gap_disconnect+0x18>)
 23fa7c0:	4403      	add	r3, r0
 23fa7c2:	681b      	ldr	r3, [r3, #0]
 23fa7c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fa7c8:	9302      	str	r3, [sp, #8]
 23fa7ca:	bd09      	pop	{r0, r3, pc}
 23fa7cc:	1007aaa0 	.word	0x1007aaa0
 23fa7d0:	00000060 	.word	0x00000060

023fa7d4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fa7d4:	b509      	push	{r0, r3, lr}
 23fa7d6:	4804      	ldr	r0, [pc, #16]	; (23fa7e8 <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23fa7d8:	6800      	ldr	r0, [r0, #0]
 23fa7da:	4b04      	ldr	r3, [pc, #16]	; (23fa7ec <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23fa7dc:	4403      	add	r3, r0
 23fa7de:	681b      	ldr	r3, [r3, #0]
 23fa7e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23fa7e4:	9302      	str	r3, [sp, #8]
 23fa7e6:	bd09      	pop	{r0, r3, pc}
 23fa7e8:	1007aaa0 	.word	0x1007aaa0
 23fa7ec:	00000060 	.word	0x00000060

023fa7f0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
 23fa7f0:	b509      	push	{r0, r3, lr}
 23fa7f2:	4804      	ldr	r0, [pc, #16]	; (23fa804 <hal_ble_gatt_client_discover_all_services+0x14>)
 23fa7f4:	6800      	ldr	r0, [r0, #0]
 23fa7f6:	4b04      	ldr	r3, [pc, #16]	; (23fa808 <hal_ble_gatt_client_discover_all_services+0x18>)
 23fa7f8:	4403      	add	r3, r0
 23fa7fa:	681b      	ldr	r3, [r3, #0]
 23fa7fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23fa800:	9302      	str	r3, [sp, #8]
 23fa802:	bd09      	pop	{r0, r3, pc}
 23fa804:	1007aaa0 	.word	0x1007aaa0
 23fa808:	00000060 	.word	0x00000060

023fa80c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
 23fa80c:	b509      	push	{r0, r3, lr}
 23fa80e:	4804      	ldr	r0, [pc, #16]	; (23fa820 <hal_ble_gatt_client_discover_characteristics+0x14>)
 23fa810:	6800      	ldr	r0, [r0, #0]
 23fa812:	4b04      	ldr	r3, [pc, #16]	; (23fa824 <hal_ble_gatt_client_discover_characteristics+0x18>)
 23fa814:	4403      	add	r3, r0
 23fa816:	681b      	ldr	r3, [r3, #0]
 23fa818:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 23fa81c:	9302      	str	r3, [sp, #8]
 23fa81e:	bd09      	pop	{r0, r3, pc}
 23fa820:	1007aaa0 	.word	0x1007aaa0
 23fa824:	00000060 	.word	0x00000060

023fa828 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fa828:	b509      	push	{r0, r3, lr}
 23fa82a:	4804      	ldr	r0, [pc, #16]	; (23fa83c <hal_ble_gatt_client_write_with_response+0x14>)
 23fa82c:	6800      	ldr	r0, [r0, #0]
 23fa82e:	4b04      	ldr	r3, [pc, #16]	; (23fa840 <hal_ble_gatt_client_write_with_response+0x18>)
 23fa830:	4403      	add	r3, r0
 23fa832:	681b      	ldr	r3, [r3, #0]
 23fa834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23fa838:	9302      	str	r3, [sp, #8]
 23fa83a:	bd09      	pop	{r0, r3, pc}
 23fa83c:	1007aaa0 	.word	0x1007aaa0
 23fa840:	00000060 	.word	0x00000060

023fa844 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fa844:	b509      	push	{r0, r3, lr}
 23fa846:	4804      	ldr	r0, [pc, #16]	; (23fa858 <hal_ble_gatt_client_write_without_response+0x14>)
 23fa848:	6800      	ldr	r0, [r0, #0]
 23fa84a:	4b04      	ldr	r3, [pc, #16]	; (23fa85c <hal_ble_gatt_client_write_without_response+0x18>)
 23fa84c:	4403      	add	r3, r0
 23fa84e:	681b      	ldr	r3, [r3, #0]
 23fa850:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23fa854:	9302      	str	r3, [sp, #8]
 23fa856:	bd09      	pop	{r0, r3, pc}
 23fa858:	1007aaa0 	.word	0x1007aaa0
 23fa85c:	00000060 	.word	0x00000060

023fa860 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
 23fa860:	b509      	push	{r0, r3, lr}
 23fa862:	4804      	ldr	r0, [pc, #16]	; (23fa874 <hal_ble_gatt_client_read+0x14>)
 23fa864:	6800      	ldr	r0, [r0, #0]
 23fa866:	4b04      	ldr	r3, [pc, #16]	; (23fa878 <hal_ble_gatt_client_read+0x18>)
 23fa868:	4403      	add	r3, r0
 23fa86a:	681b      	ldr	r3, [r3, #0]
 23fa86c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 23fa870:	9302      	str	r3, [sp, #8]
 23fa872:	bd09      	pop	{r0, r3, pc}
 23fa874:	1007aaa0 	.word	0x1007aaa0
 23fa878:	00000060 	.word	0x00000060

023fa87c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
 23fa87c:	b509      	push	{r0, r3, lr}
 23fa87e:	4804      	ldr	r0, [pc, #16]	; (23fa890 <hal_ble_gap_connect+0x14>)
 23fa880:	6800      	ldr	r0, [r0, #0]
 23fa882:	4b04      	ldr	r3, [pc, #16]	; (23fa894 <hal_ble_gap_connect+0x18>)
 23fa884:	4403      	add	r3, r0
 23fa886:	681b      	ldr	r3, [r3, #0]
 23fa888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 23fa88c:	9302      	str	r3, [sp, #8]
 23fa88e:	bd09      	pop	{r0, r3, pc}
 23fa890:	1007aaa0 	.word	0x1007aaa0
 23fa894:	00000060 	.word	0x00000060

023fa898 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23fa898:	b509      	push	{r0, r3, lr}
 23fa89a:	4804      	ldr	r0, [pc, #16]	; (23fa8ac <hal_ble_set_callback_on_periph_link_events+0x14>)
 23fa89c:	6800      	ldr	r0, [r0, #0]
 23fa89e:	4b04      	ldr	r3, [pc, #16]	; (23fa8b0 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23fa8a0:	4403      	add	r3, r0
 23fa8a2:	681b      	ldr	r3, [r3, #0]
 23fa8a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23fa8a8:	9302      	str	r3, [sp, #8]
 23fa8aa:	bd09      	pop	{r0, r3, pc}
 23fa8ac:	1007aaa0 	.word	0x1007aaa0
 23fa8b0:	00000060 	.word	0x00000060

023fa8b4 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
 23fa8b4:	b509      	push	{r0, r3, lr}
 23fa8b6:	4804      	ldr	r0, [pc, #16]	; (23fa8c8 <hal_ble_gatt_client_configure_cccd+0x14>)
 23fa8b8:	6800      	ldr	r0, [r0, #0]
 23fa8ba:	4b04      	ldr	r3, [pc, #16]	; (23fa8cc <hal_ble_gatt_client_configure_cccd+0x18>)
 23fa8bc:	4403      	add	r3, r0
 23fa8be:	681b      	ldr	r3, [r3, #0]
 23fa8c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 23fa8c4:	9302      	str	r3, [sp, #8]
 23fa8c6:	bd09      	pop	{r0, r3, pc}
 23fa8c8:	1007aaa0 	.word	0x1007aaa0
 23fa8cc:	00000060 	.word	0x00000060

023fa8d0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fa8d0:	b509      	push	{r0, r3, lr}
 23fa8d2:	4804      	ldr	r0, [pc, #16]	; (23fa8e4 <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23fa8d4:	6800      	ldr	r0, [r0, #0]
 23fa8d6:	4b04      	ldr	r3, [pc, #16]	; (23fa8e8 <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23fa8d8:	4403      	add	r3, r0
 23fa8da:	681b      	ldr	r3, [r3, #0]
 23fa8dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23fa8e0:	9302      	str	r3, [sp, #8]
 23fa8e2:	bd09      	pop	{r0, r3, pc}
 23fa8e4:	1007aaa0 	.word	0x1007aaa0
 23fa8e8:	00000060 	.word	0x00000060

023fa8ec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fa8ec:	b509      	push	{r0, r3, lr}
 23fa8ee:	4804      	ldr	r0, [pc, #16]	; (23fa900 <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23fa8f0:	6800      	ldr	r0, [r0, #0]
 23fa8f2:	4b04      	ldr	r3, [pc, #16]	; (23fa904 <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23fa8f4:	4403      	add	r3, r0
 23fa8f6:	681b      	ldr	r3, [r3, #0]
 23fa8f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23fa8fc:	9302      	str	r3, [sp, #8]
 23fa8fe:	bd09      	pop	{r0, r3, pc}
 23fa900:	1007aaa0 	.word	0x1007aaa0
 23fa904:	00000060 	.word	0x00000060

023fa908 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fa908:	b509      	push	{r0, r3, lr}
 23fa90a:	4804      	ldr	r0, [pc, #16]	; (23fa91c <HAL_RNG_GetRandomNumber+0x14>)
 23fa90c:	6800      	ldr	r0, [r0, #0]
 23fa90e:	4b04      	ldr	r3, [pc, #16]	; (23fa920 <HAL_RNG_GetRandomNumber+0x18>)
 23fa910:	4403      	add	r3, r0
 23fa912:	681b      	ldr	r3, [r3, #0]
 23fa914:	685b      	ldr	r3, [r3, #4]
 23fa916:	9302      	str	r3, [sp, #8]
 23fa918:	bd09      	pop	{r0, r3, pc}
 23fa91a:	0000      	.short	0x0000
 23fa91c:	1007aaa0 	.word	0x1007aaa0
 23fa920:	00000000 	.word	0x00000000

023fa924 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fa924:	b509      	push	{r0, r3, lr}
 23fa926:	4804      	ldr	r0, [pc, #16]	; (23fa938 <HAL_Delay_Microseconds+0x14>)
 23fa928:	6800      	ldr	r0, [r0, #0]
 23fa92a:	4b04      	ldr	r3, [pc, #16]	; (23fa93c <HAL_Delay_Microseconds+0x18>)
 23fa92c:	4403      	add	r3, r0
 23fa92e:	681b      	ldr	r3, [r3, #0]
 23fa930:	68db      	ldr	r3, [r3, #12]
 23fa932:	9302      	str	r3, [sp, #8]
 23fa934:	bd09      	pop	{r0, r3, pc}
 23fa936:	0000      	.short	0x0000
 23fa938:	1007aaa0 	.word	0x1007aaa0
 23fa93c:	00000000 	.word	0x00000000

023fa940 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fa940:	b509      	push	{r0, r3, lr}
 23fa942:	4804      	ldr	r0, [pc, #16]	; (23fa954 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fa944:	6800      	ldr	r0, [r0, #0]
 23fa946:	4b04      	ldr	r3, [pc, #16]	; (23fa958 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fa948:	4403      	add	r3, r0
 23fa94a:	681b      	ldr	r3, [r3, #0]
 23fa94c:	695b      	ldr	r3, [r3, #20]
 23fa94e:	9302      	str	r3, [sp, #8]
 23fa950:	bd09      	pop	{r0, r3, pc}
 23fa952:	0000      	.short	0x0000
 23fa954:	1007aaa0 	.word	0x1007aaa0
 23fa958:	00000000 	.word	0x00000000

023fa95c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fa95c:	b509      	push	{r0, r3, lr}
 23fa95e:	4804      	ldr	r0, [pc, #16]	; (23fa970 <netdb_freeaddrinfo+0x14>)
 23fa960:	6800      	ldr	r0, [r0, #0]
 23fa962:	4b04      	ldr	r3, [pc, #16]	; (23fa974 <netdb_freeaddrinfo+0x18>)
 23fa964:	4403      	add	r3, r0
 23fa966:	681b      	ldr	r3, [r3, #0]
 23fa968:	689b      	ldr	r3, [r3, #8]
 23fa96a:	9302      	str	r3, [sp, #8]
 23fa96c:	bd09      	pop	{r0, r3, pc}
 23fa96e:	0000      	.short	0x0000
 23fa970:	1007aaa0 	.word	0x1007aaa0
 23fa974:	00000050 	.word	0x00000050

023fa978 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fa978:	b509      	push	{r0, r3, lr}
 23fa97a:	4804      	ldr	r0, [pc, #16]	; (23fa98c <netdb_getaddrinfo+0x14>)
 23fa97c:	6800      	ldr	r0, [r0, #0]
 23fa97e:	4b04      	ldr	r3, [pc, #16]	; (23fa990 <netdb_getaddrinfo+0x18>)
 23fa980:	4403      	add	r3, r0
 23fa982:	681b      	ldr	r3, [r3, #0]
 23fa984:	68db      	ldr	r3, [r3, #12]
 23fa986:	9302      	str	r3, [sp, #8]
 23fa988:	bd09      	pop	{r0, r3, pc}
 23fa98a:	0000      	.short	0x0000
 23fa98c:	1007aaa0 	.word	0x1007aaa0
 23fa990:	00000050 	.word	0x00000050

023fa994 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fa994:	b509      	push	{r0, r3, lr}
 23fa996:	4804      	ldr	r0, [pc, #16]	; (23fa9a8 <panic_+0x14>)
 23fa998:	6800      	ldr	r0, [r0, #0]
 23fa99a:	4b04      	ldr	r3, [pc, #16]	; (23fa9ac <panic_+0x18>)
 23fa99c:	4403      	add	r3, r0
 23fa99e:	681b      	ldr	r3, [r3, #0]
 23fa9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fa9a2:	9302      	str	r3, [sp, #8]
 23fa9a4:	bd09      	pop	{r0, r3, pc}
 23fa9a6:	0000      	.short	0x0000
 23fa9a8:	1007aaa0 	.word	0x1007aaa0
 23fa9ac:	00000048 	.word	0x00000048

023fa9b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fa9b0:	b509      	push	{r0, r3, lr}
 23fa9b2:	4804      	ldr	r0, [pc, #16]	; (23fa9c4 <log_message+0x14>)
 23fa9b4:	6800      	ldr	r0, [r0, #0]
 23fa9b6:	4b04      	ldr	r3, [pc, #16]	; (23fa9c8 <log_message+0x18>)
 23fa9b8:	4403      	add	r3, r0
 23fa9ba:	681b      	ldr	r3, [r3, #0]
 23fa9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fa9be:	9302      	str	r3, [sp, #8]
 23fa9c0:	bd09      	pop	{r0, r3, pc}
 23fa9c2:	0000      	.short	0x0000
 23fa9c4:	1007aaa0 	.word	0x1007aaa0
 23fa9c8:	00000048 	.word	0x00000048

023fa9cc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fa9cc:	b509      	push	{r0, r3, lr}
 23fa9ce:	4804      	ldr	r0, [pc, #16]	; (23fa9e0 <log_message_v+0x14>)
 23fa9d0:	6800      	ldr	r0, [r0, #0]
 23fa9d2:	4b04      	ldr	r3, [pc, #16]	; (23fa9e4 <log_message_v+0x18>)
 23fa9d4:	4403      	add	r3, r0
 23fa9d6:	681b      	ldr	r3, [r3, #0]
 23fa9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fa9da:	9302      	str	r3, [sp, #8]
 23fa9dc:	bd09      	pop	{r0, r3, pc}
 23fa9de:	0000      	.short	0x0000
 23fa9e0:	1007aaa0 	.word	0x1007aaa0
 23fa9e4:	00000048 	.word	0x00000048

023fa9e8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fa9e8:	b509      	push	{r0, r3, lr}
 23fa9ea:	4804      	ldr	r0, [pc, #16]	; (23fa9fc <log_level_name+0x14>)
 23fa9ec:	6800      	ldr	r0, [r0, #0]
 23fa9ee:	4b04      	ldr	r3, [pc, #16]	; (23faa00 <log_level_name+0x18>)
 23fa9f0:	4403      	add	r3, r0
 23fa9f2:	681b      	ldr	r3, [r3, #0]
 23fa9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fa9f6:	9302      	str	r3, [sp, #8]
 23fa9f8:	bd09      	pop	{r0, r3, pc}
 23fa9fa:	0000      	.short	0x0000
 23fa9fc:	1007aaa0 	.word	0x1007aaa0
 23faa00:	00000048 	.word	0x00000048

023faa04 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23faa04:	b509      	push	{r0, r3, lr}
 23faa06:	4804      	ldr	r0, [pc, #16]	; (23faa18 <log_set_callbacks+0x14>)
 23faa08:	6800      	ldr	r0, [r0, #0]
 23faa0a:	4b04      	ldr	r3, [pc, #16]	; (23faa1c <log_set_callbacks+0x18>)
 23faa0c:	4403      	add	r3, r0
 23faa0e:	681b      	ldr	r3, [r3, #0]
 23faa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23faa12:	9302      	str	r3, [sp, #8]
 23faa14:	bd09      	pop	{r0, r3, pc}
 23faa16:	0000      	.short	0x0000
 23faa18:	1007aaa0 	.word	0x1007aaa0
 23faa1c:	00000048 	.word	0x00000048

023faa20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23faa20:	b509      	push	{r0, r3, lr}
 23faa22:	4804      	ldr	r0, [pc, #16]	; (23faa34 <spark_set_random_seed_from_cloud_handler+0x14>)
 23faa24:	6800      	ldr	r0, [r0, #0]
 23faa26:	4b04      	ldr	r3, [pc, #16]	; (23faa38 <spark_set_random_seed_from_cloud_handler+0x18>)
 23faa28:	4403      	add	r3, r0
 23faa2a:	681b      	ldr	r3, [r3, #0]
 23faa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23faa2e:	9302      	str	r3, [sp, #8]
 23faa30:	bd09      	pop	{r0, r3, pc}
 23faa32:	0000      	.short	0x0000
 23faa34:	1007aaa0 	.word	0x1007aaa0
 23faa38:	0000002c 	.word	0x0000002c

023faa3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23faa3c:	b509      	push	{r0, r3, lr}
 23faa3e:	4804      	ldr	r0, [pc, #16]	; (23faa50 <network_connect+0x14>)
 23faa40:	6800      	ldr	r0, [r0, #0]
 23faa42:	4b04      	ldr	r3, [pc, #16]	; (23faa54 <network_connect+0x18>)
 23faa44:	4403      	add	r3, r0
 23faa46:	681b      	ldr	r3, [r3, #0]
 23faa48:	685b      	ldr	r3, [r3, #4]
 23faa4a:	9302      	str	r3, [sp, #8]
 23faa4c:	bd09      	pop	{r0, r3, pc}
 23faa4e:	0000      	.short	0x0000
 23faa50:	1007aaa0 	.word	0x1007aaa0
 23faa54:	00000028 	.word	0x00000028

023faa58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23faa58:	b509      	push	{r0, r3, lr}
 23faa5a:	4804      	ldr	r0, [pc, #16]	; (23faa6c <network_connecting+0x14>)
 23faa5c:	6800      	ldr	r0, [r0, #0]
 23faa5e:	4b04      	ldr	r3, [pc, #16]	; (23faa70 <network_connecting+0x18>)
 23faa60:	4403      	add	r3, r0
 23faa62:	681b      	ldr	r3, [r3, #0]
 23faa64:	689b      	ldr	r3, [r3, #8]
 23faa66:	9302      	str	r3, [sp, #8]
 23faa68:	bd09      	pop	{r0, r3, pc}
 23faa6a:	0000      	.short	0x0000
 23faa6c:	1007aaa0 	.word	0x1007aaa0
 23faa70:	00000028 	.word	0x00000028

023faa74 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23faa74:	b509      	push	{r0, r3, lr}
 23faa76:	4804      	ldr	r0, [pc, #16]	; (23faa88 <network_disconnect+0x14>)
 23faa78:	6800      	ldr	r0, [r0, #0]
 23faa7a:	4b04      	ldr	r3, [pc, #16]	; (23faa8c <network_disconnect+0x18>)
 23faa7c:	4403      	add	r3, r0
 23faa7e:	681b      	ldr	r3, [r3, #0]
 23faa80:	68db      	ldr	r3, [r3, #12]
 23faa82:	9302      	str	r3, [sp, #8]
 23faa84:	bd09      	pop	{r0, r3, pc}
 23faa86:	0000      	.short	0x0000
 23faa88:	1007aaa0 	.word	0x1007aaa0
 23faa8c:	00000028 	.word	0x00000028

023faa90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23faa90:	b509      	push	{r0, r3, lr}
 23faa92:	4804      	ldr	r0, [pc, #16]	; (23faaa4 <network_ready+0x14>)
 23faa94:	6800      	ldr	r0, [r0, #0]
 23faa96:	4b04      	ldr	r3, [pc, #16]	; (23faaa8 <network_ready+0x18>)
 23faa98:	4403      	add	r3, r0
 23faa9a:	681b      	ldr	r3, [r3, #0]
 23faa9c:	691b      	ldr	r3, [r3, #16]
 23faa9e:	9302      	str	r3, [sp, #8]
 23faaa0:	bd09      	pop	{r0, r3, pc}
 23faaa2:	0000      	.short	0x0000
 23faaa4:	1007aaa0 	.word	0x1007aaa0
 23faaa8:	00000028 	.word	0x00000028

023faaac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23faaac:	b509      	push	{r0, r3, lr}
 23faaae:	4804      	ldr	r0, [pc, #16]	; (23faac0 <network_on+0x14>)
 23faab0:	6800      	ldr	r0, [r0, #0]
 23faab2:	4b04      	ldr	r3, [pc, #16]	; (23faac4 <network_on+0x18>)
 23faab4:	4403      	add	r3, r0
 23faab6:	681b      	ldr	r3, [r3, #0]
 23faab8:	695b      	ldr	r3, [r3, #20]
 23faaba:	9302      	str	r3, [sp, #8]
 23faabc:	bd09      	pop	{r0, r3, pc}
 23faabe:	0000      	.short	0x0000
 23faac0:	1007aaa0 	.word	0x1007aaa0
 23faac4:	00000028 	.word	0x00000028

023faac8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23faac8:	b509      	push	{r0, r3, lr}
 23faaca:	4804      	ldr	r0, [pc, #16]	; (23faadc <network_off+0x14>)
 23faacc:	6800      	ldr	r0, [r0, #0]
 23faace:	4b04      	ldr	r3, [pc, #16]	; (23faae0 <network_off+0x18>)
 23faad0:	4403      	add	r3, r0
 23faad2:	681b      	ldr	r3, [r3, #0]
 23faad4:	699b      	ldr	r3, [r3, #24]
 23faad6:	9302      	str	r3, [sp, #8]
 23faad8:	bd09      	pop	{r0, r3, pc}
 23faada:	0000      	.short	0x0000
 23faadc:	1007aaa0 	.word	0x1007aaa0
 23faae0:	00000028 	.word	0x00000028

023faae4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23faae4:	b509      	push	{r0, r3, lr}
 23faae6:	4804      	ldr	r0, [pc, #16]	; (23faaf8 <network_listen+0x14>)
 23faae8:	6800      	ldr	r0, [r0, #0]
 23faaea:	4b04      	ldr	r3, [pc, #16]	; (23faafc <network_listen+0x18>)
 23faaec:	4403      	add	r3, r0
 23faaee:	681b      	ldr	r3, [r3, #0]
 23faaf0:	69db      	ldr	r3, [r3, #28]
 23faaf2:	9302      	str	r3, [sp, #8]
 23faaf4:	bd09      	pop	{r0, r3, pc}
 23faaf6:	0000      	.short	0x0000
 23faaf8:	1007aaa0 	.word	0x1007aaa0
 23faafc:	00000028 	.word	0x00000028

023fab00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fab00:	b509      	push	{r0, r3, lr}
 23fab02:	4804      	ldr	r0, [pc, #16]	; (23fab14 <network_listening+0x14>)
 23fab04:	6800      	ldr	r0, [r0, #0]
 23fab06:	4b04      	ldr	r3, [pc, #16]	; (23fab18 <network_listening+0x18>)
 23fab08:	4403      	add	r3, r0
 23fab0a:	681b      	ldr	r3, [r3, #0]
 23fab0c:	6a1b      	ldr	r3, [r3, #32]
 23fab0e:	9302      	str	r3, [sp, #8]
 23fab10:	bd09      	pop	{r0, r3, pc}
 23fab12:	0000      	.short	0x0000
 23fab14:	1007aaa0 	.word	0x1007aaa0
 23fab18:	00000028 	.word	0x00000028

023fab1c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fab1c:	b509      	push	{r0, r3, lr}
 23fab1e:	4804      	ldr	r0, [pc, #16]	; (23fab30 <network_set_listen_timeout+0x14>)
 23fab20:	6800      	ldr	r0, [r0, #0]
 23fab22:	4b04      	ldr	r3, [pc, #16]	; (23fab34 <network_set_listen_timeout+0x18>)
 23fab24:	4403      	add	r3, r0
 23fab26:	681b      	ldr	r3, [r3, #0]
 23fab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fab2a:	9302      	str	r3, [sp, #8]
 23fab2c:	bd09      	pop	{r0, r3, pc}
 23fab2e:	0000      	.short	0x0000
 23fab30:	1007aaa0 	.word	0x1007aaa0
 23fab34:	00000028 	.word	0x00000028

023fab38 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fab38:	b509      	push	{r0, r3, lr}
 23fab3a:	4804      	ldr	r0, [pc, #16]	; (23fab4c <network_get_listen_timeout+0x14>)
 23fab3c:	6800      	ldr	r0, [r0, #0]
 23fab3e:	4b04      	ldr	r3, [pc, #16]	; (23fab50 <network_get_listen_timeout+0x18>)
 23fab40:	4403      	add	r3, r0
 23fab42:	681b      	ldr	r3, [r3, #0]
 23fab44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fab46:	9302      	str	r3, [sp, #8]
 23fab48:	bd09      	pop	{r0, r3, pc}
 23fab4a:	0000      	.short	0x0000
 23fab4c:	1007aaa0 	.word	0x1007aaa0
 23fab50:	00000028 	.word	0x00000028

023fab54 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fab54:	b509      	push	{r0, r3, lr}
 23fab56:	4804      	ldr	r0, [pc, #16]	; (23fab68 <network_is_on+0x14>)
 23fab58:	6800      	ldr	r0, [r0, #0]
 23fab5a:	4b04      	ldr	r3, [pc, #16]	; (23fab6c <network_is_on+0x18>)
 23fab5c:	4403      	add	r3, r0
 23fab5e:	681b      	ldr	r3, [r3, #0]
 23fab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fab62:	9302      	str	r3, [sp, #8]
 23fab64:	bd09      	pop	{r0, r3, pc}
 23fab66:	0000      	.short	0x0000
 23fab68:	1007aaa0 	.word	0x1007aaa0
 23fab6c:	00000028 	.word	0x00000028

023fab70 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fab70:	b509      	push	{r0, r3, lr}
 23fab72:	4804      	ldr	r0, [pc, #16]	; (23fab84 <network_is_off+0x14>)
 23fab74:	6800      	ldr	r0, [r0, #0]
 23fab76:	4b04      	ldr	r3, [pc, #16]	; (23fab88 <network_is_off+0x18>)
 23fab78:	4403      	add	r3, r0
 23fab7a:	681b      	ldr	r3, [r3, #0]
 23fab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fab7e:	9302      	str	r3, [sp, #8]
 23fab80:	bd09      	pop	{r0, r3, pc}
 23fab82:	0000      	.short	0x0000
 23fab84:	1007aaa0 	.word	0x1007aaa0
 23fab88:	00000028 	.word	0x00000028

023fab8c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fab8c:	b509      	push	{r0, r3, lr}
 23fab8e:	4804      	ldr	r0, [pc, #16]	; (23faba0 <set_system_mode+0x14>)
 23fab90:	6800      	ldr	r0, [r0, #0]
 23fab92:	4b04      	ldr	r3, [pc, #16]	; (23faba4 <set_system_mode+0x18>)
 23fab94:	4403      	add	r3, r0
 23fab96:	681b      	ldr	r3, [r3, #0]
 23fab98:	685b      	ldr	r3, [r3, #4]
 23fab9a:	9302      	str	r3, [sp, #8]
 23fab9c:	bd09      	pop	{r0, r3, pc}
 23fab9e:	0000      	.short	0x0000
 23faba0:	1007aaa0 	.word	0x1007aaa0
 23faba4:	00000008 	.word	0x00000008

023faba8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23faba8:	b509      	push	{r0, r3, lr}
 23fabaa:	4804      	ldr	r0, [pc, #16]	; (23fabbc <system_ctrl_set_app_request_handler+0x14>)
 23fabac:	6800      	ldr	r0, [r0, #0]
 23fabae:	4b04      	ldr	r3, [pc, #16]	; (23fabc0 <system_ctrl_set_app_request_handler+0x18>)
 23fabb0:	4403      	add	r3, r0
 23fabb2:	681b      	ldr	r3, [r3, #0]
 23fabb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fabb8:	9302      	str	r3, [sp, #8]
 23fabba:	bd09      	pop	{r0, r3, pc}
 23fabbc:	1007aaa0 	.word	0x1007aaa0
 23fabc0:	00000008 	.word	0x00000008

023fabc4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fabc4:	b509      	push	{r0, r3, lr}
 23fabc6:	4804      	ldr	r0, [pc, #16]	; (23fabd8 <system_ctrl_set_result+0x14>)
 23fabc8:	6800      	ldr	r0, [r0, #0]
 23fabca:	4b04      	ldr	r3, [pc, #16]	; (23fabdc <system_ctrl_set_result+0x18>)
 23fabcc:	4403      	add	r3, r0
 23fabce:	681b      	ldr	r3, [r3, #0]
 23fabd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fabd4:	9302      	str	r3, [sp, #8]
 23fabd6:	bd09      	pop	{r0, r3, pc}
 23fabd8:	1007aaa0 	.word	0x1007aaa0
 23fabdc:	00000008 	.word	0x00000008

023fabe0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fabe0:	b509      	push	{r0, r3, lr}
 23fabe2:	4804      	ldr	r0, [pc, #16]	; (23fabf4 <malloc+0x14>)
 23fabe4:	6800      	ldr	r0, [r0, #0]
 23fabe6:	4b04      	ldr	r3, [pc, #16]	; (23fabf8 <malloc+0x18>)
 23fabe8:	4403      	add	r3, r0
 23fabea:	681b      	ldr	r3, [r3, #0]
 23fabec:	681b      	ldr	r3, [r3, #0]
 23fabee:	9302      	str	r3, [sp, #8]
 23fabf0:	bd09      	pop	{r0, r3, pc}
 23fabf2:	0000      	.short	0x0000
 23fabf4:	1007aaa0 	.word	0x1007aaa0
 23fabf8:	00000004 	.word	0x00000004

023fabfc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fabfc:	b509      	push	{r0, r3, lr}
 23fabfe:	4804      	ldr	r0, [pc, #16]	; (23fac10 <free+0x14>)
 23fac00:	6800      	ldr	r0, [r0, #0]
 23fac02:	4b04      	ldr	r3, [pc, #16]	; (23fac14 <free+0x18>)
 23fac04:	4403      	add	r3, r0
 23fac06:	681b      	ldr	r3, [r3, #0]
 23fac08:	685b      	ldr	r3, [r3, #4]
 23fac0a:	9302      	str	r3, [sp, #8]
 23fac0c:	bd09      	pop	{r0, r3, pc}
 23fac0e:	0000      	.short	0x0000
 23fac10:	1007aaa0 	.word	0x1007aaa0
 23fac14:	00000004 	.word	0x00000004

023fac18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fac18:	b509      	push	{r0, r3, lr}
 23fac1a:	4804      	ldr	r0, [pc, #16]	; (23fac2c <realloc+0x14>)
 23fac1c:	6800      	ldr	r0, [r0, #0]
 23fac1e:	4b04      	ldr	r3, [pc, #16]	; (23fac30 <realloc+0x18>)
 23fac20:	4403      	add	r3, r0
 23fac22:	681b      	ldr	r3, [r3, #0]
 23fac24:	689b      	ldr	r3, [r3, #8]
 23fac26:	9302      	str	r3, [sp, #8]
 23fac28:	bd09      	pop	{r0, r3, pc}
 23fac2a:	0000      	.short	0x0000
 23fac2c:	1007aaa0 	.word	0x1007aaa0
 23fac30:	00000004 	.word	0x00000004

023fac34 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fac34:	b509      	push	{r0, r3, lr}
 23fac36:	4804      	ldr	r0, [pc, #16]	; (23fac48 <vsnprintf+0x14>)
 23fac38:	6800      	ldr	r0, [r0, #0]
 23fac3a:	4b04      	ldr	r3, [pc, #16]	; (23fac4c <vsnprintf+0x18>)
 23fac3c:	4403      	add	r3, r0
 23fac3e:	681b      	ldr	r3, [r3, #0]
 23fac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fac42:	9302      	str	r3, [sp, #8]
 23fac44:	bd09      	pop	{r0, r3, pc}
 23fac46:	0000      	.short	0x0000
 23fac48:	1007aaa0 	.word	0x1007aaa0
 23fac4c:	00000004 	.word	0x00000004

023fac50 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fac50:	b509      	push	{r0, r3, lr}
 23fac52:	4804      	ldr	r0, [pc, #16]	; (23fac64 <abort+0x14>)
 23fac54:	6800      	ldr	r0, [r0, #0]
 23fac56:	4b04      	ldr	r3, [pc, #16]	; (23fac68 <abort+0x18>)
 23fac58:	4403      	add	r3, r0
 23fac5a:	681b      	ldr	r3, [r3, #0]
 23fac5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fac5e:	9302      	str	r3, [sp, #8]
 23fac60:	bd09      	pop	{r0, r3, pc}
 23fac62:	0000      	.short	0x0000
 23fac64:	1007aaa0 	.word	0x1007aaa0
 23fac68:	00000004 	.word	0x00000004

023fac6c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fac6c:	b509      	push	{r0, r3, lr}
 23fac6e:	4804      	ldr	r0, [pc, #16]	; (23fac80 <__errno+0x14>)
 23fac70:	6800      	ldr	r0, [r0, #0]
 23fac72:	4b04      	ldr	r3, [pc, #16]	; (23fac84 <__errno+0x18>)
 23fac74:	4403      	add	r3, r0
 23fac76:	681b      	ldr	r3, [r3, #0]
 23fac78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fac7a:	9302      	str	r3, [sp, #8]
 23fac7c:	bd09      	pop	{r0, r3, pc}
 23fac7e:	0000      	.short	0x0000
 23fac80:	1007aaa0 	.word	0x1007aaa0
 23fac84:	00000004 	.word	0x00000004

023fac88 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fac88:	b509      	push	{r0, r3, lr}
 23fac8a:	4804      	ldr	r0, [pc, #16]	; (23fac9c <__assert_func+0x14>)
 23fac8c:	6800      	ldr	r0, [r0, #0]
 23fac8e:	4b04      	ldr	r3, [pc, #16]	; (23faca0 <__assert_func+0x18>)
 23fac90:	4403      	add	r3, r0
 23fac92:	681b      	ldr	r3, [r3, #0]
 23fac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fac96:	9302      	str	r3, [sp, #8]
 23fac98:	bd09      	pop	{r0, r3, pc}
 23fac9a:	0000      	.short	0x0000
 23fac9c:	1007aaa0 	.word	0x1007aaa0
 23faca0:	00000004 	.word	0x00000004

023faca4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23faca4:	b509      	push	{r0, r3, lr}
 23faca6:	4804      	ldr	r0, [pc, #16]	; (23facb8 <newlib_impure_ptr_callback+0x14>)
 23faca8:	6800      	ldr	r0, [r0, #0]
 23facaa:	4b04      	ldr	r3, [pc, #16]	; (23facbc <newlib_impure_ptr_callback+0x18>)
 23facac:	4403      	add	r3, r0
 23facae:	681b      	ldr	r3, [r3, #0]
 23facb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23facb2:	9302      	str	r3, [sp, #8]
 23facb4:	bd09      	pop	{r0, r3, pc}
 23facb6:	0000      	.short	0x0000
 23facb8:	1007aaa0 	.word	0x1007aaa0
 23facbc:	00000004 	.word	0x00000004

023facc0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23facc0:	2300      	movs	r3, #0
 23facc2:	6840      	ldr	r0, [r0, #4]
 23facc4:	461a      	mov	r2, r3
 23facc6:	f7ff beb9 	b.w	23faa3c <network_connect>

023facca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23facca:	2200      	movs	r2, #0
 23faccc:	2102      	movs	r1, #2
 23facce:	6840      	ldr	r0, [r0, #4]
 23facd0:	f7ff bed0 	b.w	23faa74 <network_disconnect>

023facd4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23facd4:	2200      	movs	r2, #0
 23facd6:	6840      	ldr	r0, [r0, #4]
 23facd8:	4611      	mov	r1, r2
 23facda:	f7ff bebd 	b.w	23faa58 <network_connecting>

023facde <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23facde:	2200      	movs	r2, #0
 23face0:	6840      	ldr	r0, [r0, #4]
 23face2:	4611      	mov	r1, r2
 23face4:	f7ff bed4 	b.w	23faa90 <network_ready>

023face8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23face8:	2300      	movs	r3, #0
 23facea:	6840      	ldr	r0, [r0, #4]
 23facec:	461a      	mov	r2, r3
 23facee:	4619      	mov	r1, r3
 23facf0:	f7ff bedc 	b.w	23faaac <network_on>

023facf4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23facf4:	2300      	movs	r3, #0
 23facf6:	6840      	ldr	r0, [r0, #4]
 23facf8:	461a      	mov	r2, r3
 23facfa:	4619      	mov	r1, r3
 23facfc:	f7ff bee4 	b.w	23faac8 <network_off>

023fad00 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fad00:	2100      	movs	r1, #0
 23fad02:	6840      	ldr	r0, [r0, #4]
 23fad04:	f7ff bf26 	b.w	23fab54 <network_is_on>

023fad08 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fad08:	2100      	movs	r1, #0
 23fad0a:	6840      	ldr	r0, [r0, #4]
 23fad0c:	f7ff bf30 	b.w	23fab70 <network_is_off>

023fad10 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fad10:	2200      	movs	r2, #0
 23fad12:	6840      	ldr	r0, [r0, #4]
 23fad14:	f081 0101 	eor.w	r1, r1, #1
 23fad18:	f7ff bee4 	b.w	23faae4 <network_listen>

023fad1c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fad1c:	2200      	movs	r2, #0
 23fad1e:	6840      	ldr	r0, [r0, #4]
 23fad20:	f7ff befc 	b.w	23fab1c <network_set_listen_timeout>

023fad24 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fad24:	2200      	movs	r2, #0
 23fad26:	6840      	ldr	r0, [r0, #4]
 23fad28:	4611      	mov	r1, r2
 23fad2a:	f7ff bf05 	b.w	23fab38 <network_get_listen_timeout>

023fad2e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fad2e:	2200      	movs	r2, #0
 23fad30:	6840      	ldr	r0, [r0, #4]
 23fad32:	4611      	mov	r1, r2
 23fad34:	f7ff bee4 	b.w	23fab00 <network_listening>

023fad38 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fad3c:	b095      	sub	sp, #84	; 0x54
 23fad3e:	4614      	mov	r4, r2
 23fad40:	460d      	mov	r5, r1
 23fad42:	4607      	mov	r7, r0
    IPAddress addr;
 23fad44:	f000 fb60 	bl	23fb408 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fad48:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fad4a:	221c      	movs	r2, #28
 23fad4c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fad4e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fad50:	f004 fbbf 	bl	23ff4d2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fad54:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fad56:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fad58:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fad5a:	2100      	movs	r1, #0
 23fad5c:	466b      	mov	r3, sp
 23fad5e:	aa0c      	add	r2, sp, #48	; 0x30
 23fad60:	f7ff fe0a 	bl	23fa978 <netdb_getaddrinfo>
    if (!r) {
 23fad64:	4604      	mov	r4, r0
 23fad66:	2800      	cmp	r0, #0
 23fad68:	d14b      	bne.n	23fae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fad6a:	4602      	mov	r2, r0
 23fad6c:	2101      	movs	r1, #1
 23fad6e:	6868      	ldr	r0, [r5, #4]
 23fad70:	f7ff fe8e 	bl	23faa90 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fad74:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fad76:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fad78:	4622      	mov	r2, r4
 23fad7a:	6868      	ldr	r0, [r5, #4]
 23fad7c:	f7ff fe88 	bl	23faa90 <network_ready>
        bool ok = false;
 23fad80:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fad82:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fad84:	9e00      	ldr	r6, [sp, #0]
 23fad86:	2e00      	cmp	r6, #0
 23fad88:	d03b      	beq.n	23fae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fad8a:	2900      	cmp	r1, #0
 23fad8c:	d139      	bne.n	23fae02 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fad8e:	6873      	ldr	r3, [r6, #4]
 23fad90:	2b02      	cmp	r3, #2
 23fad92:	d003      	beq.n	23fad9c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fad94:	2b0a      	cmp	r3, #10
 23fad96:	d011      	beq.n	23fadbc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fad98:	69f6      	ldr	r6, [r6, #28]
 23fad9a:	e7f4      	b.n	23fad86 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fad9c:	f1b8 0f00 	cmp.w	r8, #0
 23fada0:	d0fa      	beq.n	23fad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fada2:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fada4:	a806      	add	r0, sp, #24
 23fada6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fada8:	1d3c      	adds	r4, r7, #4
 23fadaa:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fadac:	f000 fb5a 	bl	23fb464 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fadb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fadb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fadb4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fadb6:	4641      	mov	r1, r8
 23fadb8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fadba:	e7ed      	b.n	23fad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fadbc:	f1b9 0f00 	cmp.w	r9, #0
 23fadc0:	d0ea      	beq.n	23fad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fadc2:	2210      	movs	r2, #16
 23fadc4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fadc6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fadc8:	f004 fb83 	bl	23ff4d2 <memset>
                    a.v = 6;
 23fadcc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fadce:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fadd0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fadd4:	f104 0308 	add.w	r3, r4, #8
 23fadd8:	3418      	adds	r4, #24
 23fadda:	462a      	mov	r2, r5
 23faddc:	6818      	ldr	r0, [r3, #0]
 23fadde:	6859      	ldr	r1, [r3, #4]
 23fade0:	3308      	adds	r3, #8
 23fade2:	c203      	stmia	r2!, {r0, r1}
 23fade4:	42a3      	cmp	r3, r4
 23fade6:	4615      	mov	r5, r2
 23fade8:	d1f7      	bne.n	23fadda <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fadea:	a901      	add	r1, sp, #4
 23fadec:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fadee:	1d3c      	adds	r4, r7, #4
 23fadf0:	ad07      	add	r5, sp, #28
 23fadf2:	f000 fb17 	bl	23fb424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fadf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fadf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fadfa:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fadfc:	4649      	mov	r1, r9
 23fadfe:	7023      	strb	r3, [r4, #0]
                    break;
 23fae00:	e7ca      	b.n	23fad98 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fae02:	9800      	ldr	r0, [sp, #0]
 23fae04:	f7ff fdaa 	bl	23fa95c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fae08:	4638      	mov	r0, r7
 23fae0a:	b015      	add	sp, #84	; 0x54
 23fae0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fae10 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fae10:	4b02      	ldr	r3, [pc, #8]	; (23fae1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fae12:	4a03      	ldr	r2, [pc, #12]	; (23fae20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fae14:	601a      	str	r2, [r3, #0]
 23fae16:	2200      	movs	r2, #0
 23fae18:	605a      	str	r2, [r3, #4]

} // spark
 23fae1a:	4770      	bx	lr
 23fae1c:	1007ae68 	.word	0x1007ae68
 23fae20:	023ff8b8 	.word	0x023ff8b8

023fae24 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fae24:	2200      	movs	r2, #0
 23fae26:	6840      	ldr	r0, [r0, #4]
 23fae28:	4611      	mov	r1, r2
 23fae2a:	f7ff be31 	b.w	23faa90 <network_ready>

023fae2e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fae2e:	2200      	movs	r2, #0
 23fae30:	6840      	ldr	r0, [r0, #4]
 23fae32:	4611      	mov	r1, r2
 23fae34:	f7ff be64 	b.w	23fab00 <network_listening>

023fae38 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fae38:	2200      	movs	r2, #0
 23fae3a:	6840      	ldr	r0, [r0, #4]
 23fae3c:	4611      	mov	r1, r2
 23fae3e:	f7ff be7b 	b.w	23fab38 <network_get_listen_timeout>

023fae42 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fae42:	2200      	movs	r2, #0
 23fae44:	6840      	ldr	r0, [r0, #4]
 23fae46:	f7ff be69 	b.w	23fab1c <network_set_listen_timeout>

023fae4a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fae4a:	2200      	movs	r2, #0
 23fae4c:	6840      	ldr	r0, [r0, #4]
 23fae4e:	f081 0101 	eor.w	r1, r1, #1
 23fae52:	f7ff be47 	b.w	23faae4 <network_listen>

023fae56 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fae56:	2300      	movs	r3, #0
 23fae58:	6840      	ldr	r0, [r0, #4]
 23fae5a:	461a      	mov	r2, r3
 23fae5c:	4619      	mov	r1, r3
 23fae5e:	f7ff be33 	b.w	23faac8 <network_off>

023fae62 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fae62:	2300      	movs	r3, #0
 23fae64:	6840      	ldr	r0, [r0, #4]
 23fae66:	461a      	mov	r2, r3
 23fae68:	4619      	mov	r1, r3
 23fae6a:	f7ff be1f 	b.w	23faaac <network_on>

023fae6e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fae6e:	2200      	movs	r2, #0
 23fae70:	6840      	ldr	r0, [r0, #4]
 23fae72:	4611      	mov	r1, r2
 23fae74:	f7ff bdf0 	b.w	23faa58 <network_connecting>

023fae78 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fae78:	2200      	movs	r2, #0
 23fae7a:	2102      	movs	r1, #2
 23fae7c:	6840      	ldr	r0, [r0, #4]
 23fae7e:	f7ff bdf9 	b.w	23faa74 <network_disconnect>

023fae82 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fae82:	2300      	movs	r3, #0
 23fae84:	6840      	ldr	r0, [r0, #4]
 23fae86:	461a      	mov	r2, r3
 23fae88:	f7ff bdd8 	b.w	23faa3c <network_connect>

023fae8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fae8c:	2204      	movs	r2, #4
 23fae8e:	4b02      	ldr	r3, [pc, #8]	; (23fae98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fae90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fae92:	4a02      	ldr	r2, [pc, #8]	; (23fae9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fae94:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fae96:	4770      	bx	lr
 23fae98:	1007ae70 	.word	0x1007ae70
 23fae9c:	023ff8f4 	.word	0x023ff8f4

023faea0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23faea0:	2201      	movs	r2, #1
 23faea2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23faea6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23faeaa:	4618      	mov	r0, r3
 23faeac:	2901      	cmp	r1, #1
 23faeae:	d108      	bne.n	23faec2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23faeb0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23faeb4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23faeb8:	3a01      	subs	r2, #1
 23faeba:	f103 0310 	add.w	r3, r3, #16
 23faebe:	d1f2      	bne.n	23faea6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23faec0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23faec2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23faec4:	bf04      	itt	eq
 23faec6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23faeca:	1852      	addeq	r2, r2, r1
 23faecc:	e7f4      	b.n	23faeb8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023faece <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23faece:	b40e      	push	{r1, r2, r3}
 23faed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23faed2:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faed4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23faed6:	af00      	add	r7, sp, #0
 23faed8:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23faedc:	f855 2b04 	ldr.w	r2, [r5], #4
 23faee0:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faee2:	462b      	mov	r3, r5
 23faee4:	1878      	adds	r0, r7, r1
 23faee6:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23faee8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faeea:	f7ff fea3 	bl	23fac34 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23faeee:	280f      	cmp	r0, #15
 23faef0:	687a      	ldr	r2, [r7, #4]
 23faef2:	d91a      	bls.n	23faf2a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23faef4:	f100 0308 	add.w	r3, r0, #8
 23faef8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23faefc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23faefe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faf02:	1c41      	adds	r1, r0, #1
 23faf04:	462b      	mov	r3, r5
 23faf06:	4668      	mov	r0, sp
        va_start(args, fmt);
 23faf08:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23faf0a:	f7ff fe93 	bl	23fac34 <vsnprintf>
        if (n > 0) {
 23faf0e:	1e02      	subs	r2, r0, #0
 23faf10:	dd04      	ble.n	23faf1c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23faf12:	6823      	ldr	r3, [r4, #0]
 23faf14:	4669      	mov	r1, sp
 23faf16:	4620      	mov	r0, r4
 23faf18:	689b      	ldr	r3, [r3, #8]
 23faf1a:	4798      	blx	r3
 23faf1c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23faf1e:	3720      	adds	r7, #32
 23faf20:	46bd      	mov	sp, r7
 23faf22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23faf26:	b003      	add	sp, #12
 23faf28:	4770      	bx	lr
    } else if (n > 0) {
 23faf2a:	2800      	cmp	r0, #0
 23faf2c:	d0f7      	beq.n	23faf1e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23faf2e:	6823      	ldr	r3, [r4, #0]
 23faf30:	4602      	mov	r2, r0
 23faf32:	689b      	ldr	r3, [r3, #8]
 23faf34:	4620      	mov	r0, r4
 23faf36:	f107 0110 	add.w	r1, r7, #16
 23faf3a:	4798      	blx	r3
}
 23faf3c:	e7ef      	b.n	23faf1e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023faf3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23faf3e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23faf40:	6843      	ldr	r3, [r0, #4]
    {
 23faf42:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23faf44:	3b01      	subs	r3, #1
 23faf46:	6043      	str	r3, [r0, #4]
 23faf48:	b963      	cbnz	r3, 23faf64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23faf4a:	6803      	ldr	r3, [r0, #0]
 23faf4c:	689b      	ldr	r3, [r3, #8]
 23faf4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23faf50:	68a3      	ldr	r3, [r4, #8]
 23faf52:	3b01      	subs	r3, #1
 23faf54:	60a3      	str	r3, [r4, #8]
 23faf56:	b92b      	cbnz	r3, 23faf64 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23faf58:	6823      	ldr	r3, [r4, #0]
 23faf5a:	4620      	mov	r0, r4
    }
 23faf5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23faf60:	68db      	ldr	r3, [r3, #12]
 23faf62:	4718      	bx	r3
    }
 23faf64:	bd10      	pop	{r4, pc}

023faf66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23faf66:	b538      	push	{r3, r4, r5, lr}
 23faf68:	680b      	ldr	r3, [r1, #0]
 23faf6a:	4604      	mov	r4, r0
 23faf6c:	6003      	str	r3, [r0, #0]
 23faf6e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23faf70:	6843      	ldr	r3, [r0, #4]
 23faf72:	429d      	cmp	r5, r3
 23faf74:	d008      	beq.n	23faf88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23faf76:	b115      	cbz	r5, 23faf7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23faf78:	686b      	ldr	r3, [r5, #4]
 23faf7a:	3301      	adds	r3, #1
 23faf7c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23faf7e:	6860      	ldr	r0, [r4, #4]
 23faf80:	b108      	cbz	r0, 23faf86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23faf82:	f7ff ffdc 	bl	23faf3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23faf86:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23faf88:	bd38      	pop	{r3, r4, r5, pc}

023faf8a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23faf8a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23faf8c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23faf8e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23faf92:	2201      	movs	r2, #1
 23faf94:	689b      	ldr	r3, [r3, #8]
 23faf96:	f10d 0107 	add.w	r1, sp, #7
 23faf9a:	4798      	blx	r3
}
 23faf9c:	b003      	add	sp, #12
 23faf9e:	f85d fb04 	ldr.w	pc, [sp], #4

023fafa2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fafa2:	460b      	mov	r3, r1
 23fafa4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fafa6:	2200      	movs	r2, #0
 23fafa8:	b510      	push	{r4, lr}
 23fafaa:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fafac:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fafb0:	6083      	str	r3, [r0, #8]
    if (t) {
 23fafb2:	b90b      	cbnz	r3, 23fafb8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fafb4:	4620      	mov	r0, r4
 23fafb6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fafb8:	f7ff ffd5 	bl	23faf66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fafbc:	e7fa      	b.n	23fafb4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fafbe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fafbe:	6883      	ldr	r3, [r0, #8]
 23fafc0:	b1eb      	cbz	r3, 23faffe <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fafc2:	781a      	ldrb	r2, [r3, #0]
 23fafc4:	2a03      	cmp	r2, #3
 23fafc6:	d81a      	bhi.n	23faffe <_ZNK5spark9JSONValue4typeEv+0x40>
 23fafc8:	e8df f002 	tbb	[pc, r2]
 23fafcc:	1b021704 	.word	0x1b021704
 23fafd0:	2005      	movs	r0, #5
 23fafd2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fafd4:	6802      	ldr	r2, [r0, #0]
 23fafd6:	685b      	ldr	r3, [r3, #4]
 23fafd8:	6852      	ldr	r2, [r2, #4]
 23fafda:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fafdc:	282d      	cmp	r0, #45	; 0x2d
 23fafde:	d012      	beq.n	23fb006 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fafe0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fafe4:	2b09      	cmp	r3, #9
 23fafe6:	d90e      	bls.n	23fb006 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fafe8:	2874      	cmp	r0, #116	; 0x74
 23fafea:	d00e      	beq.n	23fb00a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fafec:	2866      	cmp	r0, #102	; 0x66
 23fafee:	d00c      	beq.n	23fb00a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23faff0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23faff4:	4258      	negs	r0, r3
 23faff6:	4158      	adcs	r0, r3
 23faff8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23faffa:	2006      	movs	r0, #6
 23faffc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23faffe:	2000      	movs	r0, #0
 23fb000:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fb002:	2004      	movs	r0, #4
 23fb004:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fb006:	2003      	movs	r0, #3
 23fb008:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fb00a:	2002      	movs	r0, #2
}
 23fb00c:	4770      	bx	lr

023fb00e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fb00e:	b510      	push	{r4, lr}
 23fb010:	4604      	mov	r4, r0
    switch (type()) {
 23fb012:	f7ff ffd4 	bl	23fafbe <_ZNK5spark9JSONValue4typeEv>
 23fb016:	2802      	cmp	r0, #2
 23fb018:	d00e      	beq.n	23fb038 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fb01a:	1ec3      	subs	r3, r0, #3
 23fb01c:	b2db      	uxtb	r3, r3
 23fb01e:	2b01      	cmp	r3, #1
 23fb020:	d814      	bhi.n	23fb04c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fb022:	6822      	ldr	r2, [r4, #0]
 23fb024:	68a3      	ldr	r3, [r4, #8]
 23fb026:	6850      	ldr	r0, [r2, #4]
 23fb028:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fb02a:	220a      	movs	r2, #10
}
 23fb02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fb030:	2100      	movs	r1, #0
 23fb032:	4418      	add	r0, r3
 23fb034:	f004 bb5a 	b.w	23ff6ec <strtol>
        const char* const s = d_->json + t_->start;
 23fb038:	6822      	ldr	r2, [r4, #0]
 23fb03a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fb03c:	6852      	ldr	r2, [r2, #4]
 23fb03e:	685b      	ldr	r3, [r3, #4]
 23fb040:	5cd0      	ldrb	r0, [r2, r3]
 23fb042:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fb046:	4258      	negs	r0, r3
 23fb048:	4158      	adcs	r0, r3
}
 23fb04a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fb04c:	2000      	movs	r0, #0
 23fb04e:	e7fc      	b.n	23fb04a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fb050 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fb050:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fb052:	2300      	movs	r3, #0
 23fb054:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fb056:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fb05a:	480e      	ldr	r0, [pc, #56]	; (23fb094 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fb05c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fb060:	b1a9      	cbz	r1, 23fb08e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fb062:	780b      	ldrb	r3, [r1, #0]
 23fb064:	2b03      	cmp	r3, #3
 23fb066:	d006      	beq.n	23fb076 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fb068:	b98b      	cbnz	r3, 23fb08e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fb06a:	6813      	ldr	r3, [r2, #0]
 23fb06c:	6858      	ldr	r0, [r3, #4]
 23fb06e:	684b      	ldr	r3, [r1, #4]
 23fb070:	5cc3      	ldrb	r3, [r0, r3]
 23fb072:	2b6e      	cmp	r3, #110	; 0x6e
 23fb074:	d007      	beq.n	23fb086 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fb076:	6813      	ldr	r3, [r2, #0]
 23fb078:	684d      	ldr	r5, [r1, #4]
 23fb07a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fb07c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fb07e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fb080:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fb082:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fb084:	60e3      	str	r3, [r4, #12]
 23fb086:	4611      	mov	r1, r2
 23fb088:	4620      	mov	r0, r4
 23fb08a:	f7ff ff6c 	bl	23faf66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fb08e:	4620      	mov	r0, r4
 23fb090:	bd38      	pop	{r3, r4, r5, pc}
 23fb092:	bf00      	nop
 23fb094:	023ff9f6 	.word	0x023ff9f6

023fb098 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fb098:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fb09a:	2500      	movs	r5, #0
 23fb09c:	460b      	mov	r3, r1
 23fb09e:	4604      	mov	r4, r0
 23fb0a0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fb0a2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fb0a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fb0aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fb0ae:	b14b      	cbz	r3, 23fb0c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fb0b0:	781a      	ldrb	r2, [r3, #0]
 23fb0b2:	2a01      	cmp	r2, #1
 23fb0b4:	d106      	bne.n	23fb0c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fb0b6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fb0ba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fb0bc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fb0be:	6143      	str	r3, [r0, #20]
 23fb0c0:	f7ff ff51 	bl	23faf66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fb0c4:	4620      	mov	r0, r4
 23fb0c6:	bd38      	pop	{r3, r4, r5, pc}

023fb0c8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fb0c8:	b510      	push	{r4, lr}
    if (!n_) {
 23fb0ca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fb0cc:	4604      	mov	r4, r0
    if (!n_) {
 23fb0ce:	b163      	cbz	r3, 23fb0ea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fb0d0:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fb0d2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fb0d4:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fb0d6:	3010      	adds	r0, #16
 23fb0d8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fb0da:	6120      	str	r0, [r4, #16]
    --n_;
 23fb0dc:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fb0de:	b113      	cbz	r3, 23fb0e6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fb0e0:	f7ff fede 	bl	23faea0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fb0e4:	60a0      	str	r0, [r4, #8]
    return true;
 23fb0e6:	2001      	movs	r0, #1
 23fb0e8:	e000      	b.n	23fb0ec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fb0ea:	4618      	mov	r0, r3
}
 23fb0ec:	bd10      	pop	{r4, pc}

023fb0ee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fb0ee:	b510      	push	{r4, lr}
    write('}');
 23fb0f0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fb0f2:	4604      	mov	r4, r0
    write('}');
 23fb0f4:	f7ff ff49 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fb0f8:	2301      	movs	r3, #1
}
 23fb0fa:	4620      	mov	r0, r4
    state_ = NEXT;
 23fb0fc:	7123      	strb	r3, [r4, #4]
}
 23fb0fe:	bd10      	pop	{r4, pc}

023fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fb100:	b508      	push	{r3, lr}
    switch (state_) {
 23fb102:	7903      	ldrb	r3, [r0, #4]
 23fb104:	2b01      	cmp	r3, #1
 23fb106:	d002      	beq.n	23fb10e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fb108:	2b02      	cmp	r3, #2
 23fb10a:	d004      	beq.n	23fb116 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fb10c:	bd08      	pop	{r3, pc}
        write(',');
 23fb10e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fb110:	f7ff ff3b 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
}
 23fb114:	e7fa      	b.n	23fb10c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fb116:	213a      	movs	r1, #58	; 0x3a
 23fb118:	e7fa      	b.n	23fb110 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fb11a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fb11a:	b510      	push	{r4, lr}
 23fb11c:	4604      	mov	r4, r0
    writeSeparator();
 23fb11e:	f7ff ffef 	bl	23fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fb122:	4620      	mov	r0, r4
 23fb124:	217b      	movs	r1, #123	; 0x7b
 23fb126:	f7ff ff30 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fb12a:	2300      	movs	r3, #0
}
 23fb12c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fb12e:	7123      	strb	r3, [r4, #4]
}
 23fb130:	bd10      	pop	{r4, pc}
	...

023fb134 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fb134:	b513      	push	{r0, r1, r4, lr}
 23fb136:	4604      	mov	r4, r0
 23fb138:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fb13a:	f7ff ffe1 	bl	23fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fb13e:	6823      	ldr	r3, [r4, #0]
 23fb140:	4620      	mov	r0, r4
 23fb142:	68db      	ldr	r3, [r3, #12]
 23fb144:	9a01      	ldr	r2, [sp, #4]
 23fb146:	4903      	ldr	r1, [pc, #12]	; (23fb154 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fb148:	4798      	blx	r3
    state_ = NEXT;
 23fb14a:	2301      	movs	r3, #1
}
 23fb14c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fb14e:	7123      	strb	r3, [r4, #4]
}
 23fb150:	b002      	add	sp, #8
 23fb152:	bd10      	pop	{r4, pc}
 23fb154:	023ff80d 	.word	0x023ff80d

023fb158 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fb158:	b513      	push	{r0, r1, r4, lr}
 23fb15a:	4604      	mov	r4, r0
 23fb15c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fb15e:	f7ff ffcf 	bl	23fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fb162:	6823      	ldr	r3, [r4, #0]
 23fb164:	4620      	mov	r0, r4
 23fb166:	68db      	ldr	r3, [r3, #12]
 23fb168:	9a01      	ldr	r2, [sp, #4]
 23fb16a:	4903      	ldr	r1, [pc, #12]	; (23fb178 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fb16c:	4798      	blx	r3
    state_ = NEXT;
 23fb16e:	2301      	movs	r3, #1
}
 23fb170:	4620      	mov	r0, r4
    state_ = NEXT;
 23fb172:	7123      	strb	r3, [r4, #4]
}
 23fb174:	b002      	add	sp, #8
 23fb176:	bd10      	pop	{r4, pc}
 23fb178:	023ff930 	.word	0x023ff930

023fb17c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fb17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb180:	460d      	mov	r5, r1
 23fb182:	4690      	mov	r8, r2
    write('"');
 23fb184:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fb186:	4604      	mov	r4, r0
 23fb188:	462f      	mov	r7, r5
    write('"');
 23fb18a:	f7ff fefe 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fb18e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fb234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fb192:	44a8      	add	r8, r5
    while (s != end) {
 23fb194:	4547      	cmp	r7, r8
 23fb196:	46ba      	mov	sl, r7
 23fb198:	d03d      	beq.n	23fb216 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fb19a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fb19e:	2e22      	cmp	r6, #34	; 0x22
 23fb1a0:	d006      	beq.n	23fb1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fb1a2:	2e5c      	cmp	r6, #92	; 0x5c
 23fb1a4:	d004      	beq.n	23fb1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fb1a6:	4630      	mov	r0, r6
 23fb1a8:	f004 f954 	bl	23ff454 <isprint>
 23fb1ac:	2800      	cmp	r0, #0
 23fb1ae:	d1f1      	bne.n	23fb194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fb1b0:	6823      	ldr	r3, [r4, #0]
 23fb1b2:	4629      	mov	r1, r5
 23fb1b4:	4620      	mov	r0, r4
 23fb1b6:	689b      	ldr	r3, [r3, #8]
 23fb1b8:	ebaa 0205 	sub.w	r2, sl, r5
 23fb1bc:	4798      	blx	r3
            write('\\');
 23fb1be:	215c      	movs	r1, #92	; 0x5c
 23fb1c0:	4620      	mov	r0, r4
 23fb1c2:	f7ff fee2 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fb1c6:	2e0d      	cmp	r6, #13
 23fb1c8:	d80a      	bhi.n	23fb1e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fb1ca:	2e07      	cmp	r6, #7
 23fb1cc:	d91c      	bls.n	23fb208 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fb1ce:	f1a6 0308 	sub.w	r3, r6, #8
 23fb1d2:	2b05      	cmp	r3, #5
 23fb1d4:	d818      	bhi.n	23fb208 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fb1d6:	e8df f003 	tbb	[pc, r3]
 23fb1da:	0f0d      	.short	0x0f0d
 23fb1dc:	15131711 	.word	0x15131711
 23fb1e0:	2e22      	cmp	r6, #34	; 0x22
 23fb1e2:	d001      	beq.n	23fb1e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fb1e4:	2e5c      	cmp	r6, #92	; 0x5c
 23fb1e6:	d10f      	bne.n	23fb208 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fb1e8:	4631      	mov	r1, r6
                write('b');
 23fb1ea:	4620      	mov	r0, r4
 23fb1ec:	f7ff fecd 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fb1f0:	463d      	mov	r5, r7
    while (s != end) {
 23fb1f2:	e7cf      	b.n	23fb194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fb1f4:	2162      	movs	r1, #98	; 0x62
 23fb1f6:	e7f8      	b.n	23fb1ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fb1f8:	2174      	movs	r1, #116	; 0x74
 23fb1fa:	e7f6      	b.n	23fb1ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fb1fc:	216e      	movs	r1, #110	; 0x6e
 23fb1fe:	e7f4      	b.n	23fb1ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fb200:	2166      	movs	r1, #102	; 0x66
 23fb202:	e7f2      	b.n	23fb1ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fb204:	2172      	movs	r1, #114	; 0x72
 23fb206:	e7f0      	b.n	23fb1ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fb208:	6823      	ldr	r3, [r4, #0]
 23fb20a:	4632      	mov	r2, r6
 23fb20c:	4649      	mov	r1, r9
 23fb20e:	4620      	mov	r0, r4
 23fb210:	68db      	ldr	r3, [r3, #12]
 23fb212:	4798      	blx	r3
                break;
 23fb214:	e7ec      	b.n	23fb1f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fb216:	42bd      	cmp	r5, r7
 23fb218:	d005      	beq.n	23fb226 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fb21a:	6823      	ldr	r3, [r4, #0]
 23fb21c:	4629      	mov	r1, r5
 23fb21e:	4620      	mov	r0, r4
 23fb220:	689b      	ldr	r3, [r3, #8]
 23fb222:	1b7a      	subs	r2, r7, r5
 23fb224:	4798      	blx	r3
    }
    write('"');
 23fb226:	2122      	movs	r1, #34	; 0x22
 23fb228:	4620      	mov	r0, r4
 23fb22a:	f7ff feae 	bl	23faf8a <_ZN5spark10JSONWriter5writeEc>
}
 23fb22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fb232:	bf00      	nop
 23fb234:	023ff933 	.word	0x023ff933

023fb238 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fb238:	b513      	push	{r0, r1, r4, lr}
 23fb23a:	4604      	mov	r4, r0
 23fb23c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fb240:	f7ff ff5e 	bl	23fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fb244:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fb248:	4620      	mov	r0, r4
 23fb24a:	f7ff ff97 	bl	23fb17c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fb24e:	2302      	movs	r3, #2
}
 23fb250:	4620      	mov	r0, r4
    state_ = VALUE;
 23fb252:	7123      	strb	r3, [r4, #4]
}
 23fb254:	b002      	add	sp, #8
 23fb256:	bd10      	pop	{r4, pc}

023fb258 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fb258:	b513      	push	{r0, r1, r4, lr}
 23fb25a:	4604      	mov	r4, r0
 23fb25c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fb260:	f7ff ff4e 	bl	23fb100 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fb264:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fb268:	4620      	mov	r0, r4
 23fb26a:	f7ff ff87 	bl	23fb17c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fb26e:	2301      	movs	r3, #1
}
 23fb270:	4620      	mov	r0, r4
    state_ = NEXT;
 23fb272:	7123      	strb	r3, [r4, #4]
}
 23fb274:	b002      	add	sp, #8
 23fb276:	bd10      	pop	{r4, pc}

023fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fb278:	b510      	push	{r4, lr}
 23fb27a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fb27c:	6800      	ldr	r0, [r0, #0]
 23fb27e:	b108      	cbz	r0, 23fb284 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fb280:	f7ff fe5d 	bl	23faf3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fb284:	4620      	mov	r0, r4
 23fb286:	bd10      	pop	{r4, pc}

023fb288 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fb288:	7441      	strb	r1, [r0, #17]
}
 23fb28a:	4770      	bx	lr

023fb28c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb28c:	4770      	bx	lr

023fb28e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fb28e:	4770      	bx	lr

023fb290 <_ZN9USBSerial4readEv>:
{
 23fb290:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fb292:	2100      	movs	r1, #0
 23fb294:	7c00      	ldrb	r0, [r0, #16]
 23fb296:	f7ff f969 	bl	23fa56c <HAL_USB_USART_Receive_Data>
}
 23fb29a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb29e:	bd08      	pop	{r3, pc}

023fb2a0 <_ZN9USBSerial4peekEv>:
{
 23fb2a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fb2a2:	2101      	movs	r1, #1
 23fb2a4:	7c00      	ldrb	r0, [r0, #16]
 23fb2a6:	f7ff f961 	bl	23fa56c <HAL_USB_USART_Receive_Data>
}
 23fb2aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fb2ae:	bd08      	pop	{r3, pc}

023fb2b0 <_ZN9USBSerial17availableForWriteEv>:
{
 23fb2b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fb2b2:	7c00      	ldrb	r0, [r0, #16]
 23fb2b4:	f7ff f94c 	bl	23fa550 <HAL_USB_USART_Available_Data_For_Write>
}
 23fb2b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb2bc:	bd08      	pop	{r3, pc}

023fb2be <_ZN9USBSerial9availableEv>:
{
 23fb2be:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fb2c0:	7c00      	ldrb	r0, [r0, #16]
 23fb2c2:	f7ff f937 	bl	23fa534 <HAL_USB_USART_Available_Data>
}
 23fb2c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fb2ca:	bd08      	pop	{r3, pc}

023fb2cc <_ZN9USBSerial5writeEh>:
{
 23fb2cc:	b513      	push	{r0, r1, r4, lr}
 23fb2ce:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb2d0:	7c00      	ldrb	r0, [r0, #16]
{
 23fb2d2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fb2d4:	f7ff f93c 	bl	23fa550 <HAL_USB_USART_Available_Data_For_Write>
 23fb2d8:	2800      	cmp	r0, #0
 23fb2da:	9901      	ldr	r1, [sp, #4]
 23fb2dc:	dc01      	bgt.n	23fb2e2 <_ZN9USBSerial5writeEh+0x16>
 23fb2de:	7c60      	ldrb	r0, [r4, #17]
 23fb2e0:	b120      	cbz	r0, 23fb2ec <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fb2e2:	7c20      	ldrb	r0, [r4, #16]
 23fb2e4:	f7ff f950 	bl	23fa588 <HAL_USB_USART_Send_Data>
 23fb2e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fb2ec:	b002      	add	sp, #8
 23fb2ee:	bd10      	pop	{r4, pc}

023fb2f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fb2f0:	7c00      	ldrb	r0, [r0, #16]
 23fb2f2:	f7ff b957 	b.w	23fa5a4 <HAL_USB_USART_Flush_Data>

023fb2f6 <_ZN9USBSerialD0Ev>:
 23fb2f6:	b510      	push	{r4, lr}
 23fb2f8:	4604      	mov	r4, r0
 23fb2fa:	2114      	movs	r1, #20
 23fb2fc:	f7fe feeb 	bl	23fa0d6 <_ZdlPvj>
 23fb300:	4620      	mov	r0, r4
 23fb302:	bd10      	pop	{r4, pc}

023fb304 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb304:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fb306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fb30a:	4604      	mov	r4, r0
 23fb30c:	4608      	mov	r0, r1
 23fb30e:	2100      	movs	r1, #0
 23fb310:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fb314:	4b04      	ldr	r3, [pc, #16]	; (23fb328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fb316:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fb318:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fb31a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fb31c:	4611      	mov	r1, r2
  _blocking = true;
 23fb31e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fb320:	f7ff f8de 	bl	23fa4e0 <HAL_USB_USART_Init>
}
 23fb324:	4620      	mov	r0, r4
 23fb326:	bd10      	pop	{r4, pc}
 23fb328:	023ff944 	.word	0x023ff944

023fb32c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fb32c:	2200      	movs	r2, #0
 23fb32e:	7c00      	ldrb	r0, [r0, #16]
 23fb330:	f7ff b8e4 	b.w	23fa4fc <HAL_USB_USART_Begin>

023fb334 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fb334:	7c00      	ldrb	r0, [r0, #16]
 23fb336:	f7ff b8ef 	b.w	23fa518 <HAL_USB_USART_End>

023fb33a <_Z19acquireSerialBufferv>:
{
 23fb33a:	b510      	push	{r4, lr}
 23fb33c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fb33e:	2214      	movs	r2, #20
 23fb340:	2100      	movs	r1, #0
 23fb342:	f004 f8c6 	bl	23ff4d2 <memset>
}
 23fb346:	4620      	mov	r0, r4
 23fb348:	bd10      	pop	{r4, pc}
	...

023fb34c <_Z16_fetch_usbserialv>:
{
 23fb34c:	b510      	push	{r4, lr}
 23fb34e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fb350:	a803      	add	r0, sp, #12
 23fb352:	f7ff fff2 	bl	23fb33a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fb356:	4c0c      	ldr	r4, [pc, #48]	; (23fb388 <_Z16_fetch_usbserialv+0x3c>)
 23fb358:	e8d4 1f8f 	ldab	r1, [r4]
 23fb35c:	f011 0101 	ands.w	r1, r1, #1
 23fb360:	d10f      	bne.n	23fb382 <_Z16_fetch_usbserialv+0x36>
 23fb362:	4620      	mov	r0, r4
 23fb364:	9101      	str	r1, [sp, #4]
 23fb366:	f7fe fec5 	bl	23fa0f4 <__cxa_guard_acquire>
 23fb36a:	9901      	ldr	r1, [sp, #4]
 23fb36c:	b148      	cbz	r0, 23fb382 <_Z16_fetch_usbserialv+0x36>
 23fb36e:	aa03      	add	r2, sp, #12
 23fb370:	4806      	ldr	r0, [pc, #24]	; (23fb38c <_Z16_fetch_usbserialv+0x40>)
 23fb372:	f7ff ffc7 	bl	23fb304 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fb376:	4620      	mov	r0, r4
 23fb378:	f7fe fec1 	bl	23fa0fe <__cxa_guard_release>
 23fb37c:	4804      	ldr	r0, [pc, #16]	; (23fb390 <_Z16_fetch_usbserialv+0x44>)
 23fb37e:	f004 f863 	bl	23ff448 <atexit>
	return _usbserial;
}
 23fb382:	4802      	ldr	r0, [pc, #8]	; (23fb38c <_Z16_fetch_usbserialv+0x40>)
 23fb384:	b008      	add	sp, #32
 23fb386:	bd10      	pop	{r4, pc}
 23fb388:	1007ae78 	.word	0x1007ae78
 23fb38c:	1007ae7c 	.word	0x1007ae7c
 23fb390:	023fb28d 	.word	0x023fb28d

023fb394 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fb394:	4770      	bx	lr

023fb396 <_ZN9IPAddressD0Ev>:
 23fb396:	b510      	push	{r4, lr}
 23fb398:	4604      	mov	r4, r0
 23fb39a:	2118      	movs	r1, #24
 23fb39c:	f7fe fe9b 	bl	23fa0d6 <_ZdlPvj>
 23fb3a0:	4620      	mov	r0, r4
 23fb3a2:	bd10      	pop	{r4, pc}

023fb3a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fb3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fb3a6:	7d03      	ldrb	r3, [r0, #20]
{
 23fb3a8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fb3aa:	2b06      	cmp	r3, #6
 23fb3ac:	f04f 0400 	mov.w	r4, #0
{
 23fb3b0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fb3b2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fb3b6:	d012      	beq.n	23fb3de <_ZNK9IPAddress7printToER5Print+0x3a>
 23fb3b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fb3bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fb3c0:	220a      	movs	r2, #10
 23fb3c2:	4630      	mov	r0, r6
 23fb3c4:	f001 f92b 	bl	23fc61e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fb3c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fb3ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fb3cc:	d019      	beq.n	23fb402 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fb3ce:	2c00      	cmp	r4, #0
 23fb3d0:	d0f4      	beq.n	23fb3bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fb3d2:	212e      	movs	r1, #46	; 0x2e
 23fb3d4:	4630      	mov	r0, r6
 23fb3d6:	f001 f91f 	bl	23fc618 <_ZN5Print5printEc>
 23fb3da:	4404      	add	r4, r0
 23fb3dc:	e7ee      	b.n	23fb3bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fb3de:	232f      	movs	r3, #47	; 0x2f
 23fb3e0:	466a      	mov	r2, sp
 23fb3e2:	4639      	mov	r1, r7
 23fb3e4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fb3e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fb3ea:	f7ff f975 	bl	23fa6d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fb3ee:	4668      	mov	r0, sp
 23fb3f0:	f7fe fe48 	bl	23fa084 <strlen>
 23fb3f4:	6833      	ldr	r3, [r6, #0]
 23fb3f6:	4602      	mov	r2, r0
 23fb3f8:	4669      	mov	r1, sp
 23fb3fa:	4630      	mov	r0, r6
 23fb3fc:	68db      	ldr	r3, [r3, #12]
 23fb3fe:	4798      	blx	r3
 23fb400:	4604      	mov	r4, r0
    }
    return n;
}
 23fb402:	4620      	mov	r0, r4
 23fb404:	b00d      	add	sp, #52	; 0x34
 23fb406:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fb408 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fb408:	b510      	push	{r4, lr}
 23fb40a:	4604      	mov	r4, r0
 23fb40c:	4b04      	ldr	r3, [pc, #16]	; (23fb420 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fb40e:	2211      	movs	r2, #17
 23fb410:	2100      	movs	r1, #0
 23fb412:	f840 3b04 	str.w	r3, [r0], #4
 23fb416:	f004 f85c 	bl	23ff4d2 <memset>
}
 23fb41a:	4620      	mov	r0, r4
 23fb41c:	bd10      	pop	{r4, pc}
 23fb41e:	bf00      	nop
 23fb420:	023ff974 	.word	0x023ff974

023fb424 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fb424:	4603      	mov	r3, r0
 23fb426:	4a07      	ldr	r2, [pc, #28]	; (23fb444 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fb428:	b510      	push	{r4, lr}
 23fb42a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fb42e:	f101 0210 	add.w	r2, r1, #16
 23fb432:	f851 4b04 	ldr.w	r4, [r1], #4
 23fb436:	4291      	cmp	r1, r2
 23fb438:	f843 4b04 	str.w	r4, [r3], #4
 23fb43c:	d1f9      	bne.n	23fb432 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fb43e:	780a      	ldrb	r2, [r1, #0]
 23fb440:	701a      	strb	r2, [r3, #0]
}
 23fb442:	bd10      	pop	{r4, pc}
 23fb444:	023ff974 	.word	0x023ff974

023fb448 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fb448:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fb44a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fb44e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fb452:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fb456:	2304      	movs	r3, #4
 23fb458:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fb45c:	6041      	str	r1, [r0, #4]
 23fb45e:	7503      	strb	r3, [r0, #20]
}
 23fb460:	bd10      	pop	{r4, pc}
	...

023fb464 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fb464:	b507      	push	{r0, r1, r2, lr}
 23fb466:	4b06      	ldr	r3, [pc, #24]	; (23fb480 <_ZN9IPAddressC1EPKh+0x1c>)
 23fb468:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fb46a:	78cb      	ldrb	r3, [r1, #3]
 23fb46c:	9300      	str	r3, [sp, #0]
 23fb46e:	788b      	ldrb	r3, [r1, #2]
 23fb470:	784a      	ldrb	r2, [r1, #1]
 23fb472:	7809      	ldrb	r1, [r1, #0]
 23fb474:	f7ff ffe8 	bl	23fb448 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fb478:	b003      	add	sp, #12
 23fb47a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fb47e:	bf00      	nop
 23fb480:	023ff974 	.word	0x023ff974

023fb484 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fb484:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fb486:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fb488:	4604      	mov	r4, r0
      if (_M_manager)
 23fb48a:	b113      	cbz	r3, 23fb492 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb48c:	2203      	movs	r2, #3
 23fb48e:	4601      	mov	r1, r0
 23fb490:	4798      	blx	r3
    }
 23fb492:	4620      	mov	r0, r4
 23fb494:	bd10      	pop	{r4, pc}

023fb496 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fb496:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb498:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fb49a:	460b      	mov	r3, r1
 23fb49c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb49e:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fb4a2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fb4a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fb4aa:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fb4ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fb4b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fb4b6:	b002      	add	sp, #8
 23fb4b8:	bd10      	pop	{r4, pc}
	...

023fb4bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fb4bc:	4b01      	ldr	r3, [pc, #4]	; (23fb4c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fb4be:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fb4c0:	4770      	bx	lr
 23fb4c2:	bf00      	nop
 23fb4c4:	1007aab0 	.word	0x1007aab0

023fb4c8 <serialEventRun>:
{
 23fb4c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fb4ca:	4b0f      	ldr	r3, [pc, #60]	; (23fb508 <serialEventRun+0x40>)
 23fb4cc:	b143      	cbz	r3, 23fb4e0 <serialEventRun+0x18>
 23fb4ce:	f7ff ff3d 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fb4d2:	6803      	ldr	r3, [r0, #0]
 23fb4d4:	691b      	ldr	r3, [r3, #16]
 23fb4d6:	4798      	blx	r3
 23fb4d8:	2800      	cmp	r0, #0
 23fb4da:	dd01      	ble.n	23fb4e0 <serialEventRun+0x18>
        serialEvent();
 23fb4dc:	e000      	b.n	23fb4e0 <serialEventRun+0x18>
 23fb4de:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fb4e0:	4b0a      	ldr	r3, [pc, #40]	; (23fb50c <serialEventRun+0x44>)
 23fb4e2:	b143      	cbz	r3, 23fb4f6 <serialEventRun+0x2e>
 23fb4e4:	f003 fe06 	bl	23ff0f4 <_Z22__fetch_global_Serial1v>
 23fb4e8:	6803      	ldr	r3, [r0, #0]
 23fb4ea:	691b      	ldr	r3, [r3, #16]
 23fb4ec:	4798      	blx	r3
 23fb4ee:	2800      	cmp	r0, #0
 23fb4f0:	dd01      	ble.n	23fb4f6 <serialEventRun+0x2e>
        serialEvent1();
 23fb4f2:	e000      	b.n	23fb4f6 <serialEventRun+0x2e>
 23fb4f4:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fb4f6:	4b06      	ldr	r3, [pc, #24]	; (23fb510 <serialEventRun+0x48>)
 23fb4f8:	b10b      	cbz	r3, 23fb4fe <serialEventRun+0x36>
 23fb4fa:	f003 fe41 	bl	23ff180 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fb4fe:	4b05      	ldr	r3, [pc, #20]	; (23fb514 <serialEventRun+0x4c>)
 23fb500:	b10b      	cbz	r3, 23fb506 <serialEventRun+0x3e>
 23fb502:	f003 fe73 	bl	23ff1ec <_Z15serialEventRun3v>
}
 23fb506:	bd08      	pop	{r3, pc}
	...

023fb518 <_post_loop>:
{
 23fb518:	b508      	push	{r3, lr}
	serialEventRun();
 23fb51a:	f7ff ffd5 	bl	23fb4c8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fb51e:	f7ff fa0f 	bl	23fa940 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fb522:	4b01      	ldr	r3, [pc, #4]	; (23fb528 <_post_loop+0x10>)
 23fb524:	6018      	str	r0, [r3, #0]
}
 23fb526:	bd08      	pop	{r3, pc}
 23fb528:	1007af08 	.word	0x1007af08

023fb52c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fb52c:	4805      	ldr	r0, [pc, #20]	; (23fb544 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fb52e:	4a06      	ldr	r2, [pc, #24]	; (23fb548 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fb530:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fb532:	1a12      	subs	r2, r2, r0
 23fb534:	4905      	ldr	r1, [pc, #20]	; (23fb54c <_Z33system_initialize_user_backup_ramv+0x20>)
 23fb536:	f003 ffa5 	bl	23ff484 <memcpy>
    __backup_sram_signature = signature;
 23fb53a:	4b05      	ldr	r3, [pc, #20]	; (23fb550 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fb53c:	4a05      	ldr	r2, [pc, #20]	; (23fb554 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fb53e:	601a      	str	r2, [r3, #0]
}
 23fb540:	bd08      	pop	{r3, pc}
 23fb542:	bf00      	nop
 23fb544:	1007b400 	.word	0x1007b400
 23fb548:	1007b404 	.word	0x1007b404
 23fb54c:	085ff090 	.word	0x085ff090
 23fb550:	1007b400 	.word	0x1007b400
 23fb554:	9a271c1e 	.word	0x9a271c1e

023fb558 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb558:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fb55a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb55c:	461a      	mov	r2, r3
 23fb55e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fb562:	9300      	str	r3, [sp, #0]
 23fb564:	f7ff fb2e 	bl	23fabc4 <system_ctrl_set_result>
}
 23fb568:	b003      	add	sp, #12
 23fb56a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fb570 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fb570:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fb572:	8843      	ldrh	r3, [r0, #2]
 23fb574:	2b0a      	cmp	r3, #10
 23fb576:	d008      	beq.n	23fb58a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fb578:	2b50      	cmp	r3, #80	; 0x50
 23fb57a:	d10b      	bne.n	23fb594 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fb57c:	4b09      	ldr	r3, [pc, #36]	; (23fb5a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fb57e:	681b      	ldr	r3, [r3, #0]
 23fb580:	b14b      	cbz	r3, 23fb596 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fb582:	b003      	add	sp, #12
 23fb584:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fb588:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fb58a:	f7ff ffe5 	bl	23fb558 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fb58e:	b003      	add	sp, #12
 23fb590:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fb594:	2300      	movs	r3, #0
 23fb596:	461a      	mov	r2, r3
 23fb598:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fb59c:	9300      	str	r3, [sp, #0]
 23fb59e:	f7ff fb11 	bl	23fabc4 <system_ctrl_set_result>
}
 23fb5a2:	e7f4      	b.n	23fb58e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fb5a4:	1007ae94 	.word	0x1007ae94

023fb5a8 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fb5a8:	2100      	movs	r1, #0
{
 23fb5aa:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fb5ac:	4811      	ldr	r0, [pc, #68]	; (23fb5f4 <module_user_init_hook+0x4c>)
 23fb5ae:	f7ff fb79 	bl	23faca4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fb5b2:	4b11      	ldr	r3, [pc, #68]	; (23fb5f8 <module_user_init_hook+0x50>)
 23fb5b4:	681a      	ldr	r2, [r3, #0]
 23fb5b6:	4b11      	ldr	r3, [pc, #68]	; (23fb5fc <module_user_init_hook+0x54>)
 23fb5b8:	429a      	cmp	r2, r3
 23fb5ba:	bf0c      	ite	eq
 23fb5bc:	2201      	moveq	r2, #1
 23fb5be:	2200      	movne	r2, #0
 23fb5c0:	4b0f      	ldr	r3, [pc, #60]	; (23fb600 <module_user_init_hook+0x58>)
 23fb5c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fb5c4:	d001      	beq.n	23fb5ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fb5c6:	f7ff ffb1 	bl	23fb52c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fb5ca:	f7ff f99d 	bl	23fa908 <HAL_RNG_GetRandomNumber>
 23fb5ce:	4604      	mov	r4, r0
    srand(seed);
 23fb5d0:	f003 ff88 	bl	23ff4e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fb5d4:	4b0b      	ldr	r3, [pc, #44]	; (23fb604 <module_user_init_hook+0x5c>)
 23fb5d6:	b113      	cbz	r3, 23fb5de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fb5d8:	4620      	mov	r0, r4
 23fb5da:	e000      	b.n	23fb5de <module_user_init_hook+0x36>
 23fb5dc:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fb5de:	2100      	movs	r1, #0
 23fb5e0:	4808      	ldr	r0, [pc, #32]	; (23fb604 <module_user_init_hook+0x5c>)
 23fb5e2:	f7ff fa1d 	bl	23faa20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fb5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fb5ea:	2100      	movs	r1, #0
 23fb5ec:	4806      	ldr	r0, [pc, #24]	; (23fb608 <module_user_init_hook+0x60>)
 23fb5ee:	f7ff badb 	b.w	23faba8 <system_ctrl_set_app_request_handler>
 23fb5f2:	bf00      	nop
 23fb5f4:	023fb4bd 	.word	0x023fb4bd
 23fb5f8:	1007b400 	.word	0x1007b400
 23fb5fc:	9a271c1e 	.word	0x9a271c1e
 23fb600:	1007ae90 	.word	0x1007ae90
 23fb604:	00000000 	.word	0x00000000
 23fb608:	023fb571 	.word	0x023fb571

023fb60c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fb60c:	2200      	movs	r2, #0
 23fb60e:	4b01      	ldr	r3, [pc, #4]	; (23fb614 <_GLOBAL__sub_I_RGB+0x8>)
 23fb610:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fb612:	4770      	bx	lr
 23fb614:	1007ae98 	.word	0x1007ae98

023fb618 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fb618:	4b02      	ldr	r3, [pc, #8]	; (23fb624 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fb61a:	681a      	ldr	r2, [r3, #0]
 23fb61c:	4b02      	ldr	r3, [pc, #8]	; (23fb628 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fb61e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fb620:	4770      	bx	lr
 23fb622:	bf00      	nop
 23fb624:	1007aaa4 	.word	0x1007aaa4
 23fb628:	1007aea8 	.word	0x1007aea8

023fb62c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fb62c:	6880      	ldr	r0, [r0, #8]
 23fb62e:	6803      	ldr	r3, [r0, #0]
 23fb630:	68db      	ldr	r3, [r3, #12]
 23fb632:	4718      	bx	r3

023fb634 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fb634:	4770      	bx	lr

023fb636 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fb636:	4608      	mov	r0, r1
 23fb638:	b111      	cbz	r1, 23fb640 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fb63a:	680b      	ldr	r3, [r1, #0]
 23fb63c:	685b      	ldr	r3, [r3, #4]
 23fb63e:	4718      	bx	r3
}
 23fb640:	4770      	bx	lr

023fb642 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fb642:	4770      	bx	lr

023fb644 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fb644:	4770      	bx	lr

023fb646 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fb646:	4770      	bx	lr

023fb648 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fb648:	4770      	bx	lr

023fb64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fb64a:	b538      	push	{r3, r4, r5, lr}
 23fb64c:	4604      	mov	r4, r0
 23fb64e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fb650:	6800      	ldr	r0, [r0, #0]
 23fb652:	212e      	movs	r1, #46	; 0x2e
 23fb654:	f003 ff81 	bl	23ff55a <strchrnul>
    size = s - category;
 23fb658:	6823      	ldr	r3, [r4, #0]
 23fb65a:	1ac3      	subs	r3, r0, r3
 23fb65c:	602b      	str	r3, [r5, #0]
    if (size) {
 23fb65e:	b123      	cbz	r3, 23fb66a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fb660:	7803      	ldrb	r3, [r0, #0]
 23fb662:	b103      	cbz	r3, 23fb666 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fb664:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fb666:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb668:	6020      	str	r0, [r4, #0]
}
 23fb66a:	4618      	mov	r0, r3
 23fb66c:	bd38      	pop	{r3, r4, r5, pc}

023fb66e <_ZN5spark16JSONStreamWriterD0Ev>:
 23fb66e:	b510      	push	{r4, lr}
 23fb670:	4604      	mov	r4, r0
 23fb672:	210c      	movs	r1, #12
 23fb674:	f7fe fd2f 	bl	23fa0d6 <_ZdlPvj>
 23fb678:	4620      	mov	r0, r4
 23fb67a:	bd10      	pop	{r4, pc}

023fb67c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fb67c:	b510      	push	{r4, lr}
 23fb67e:	4604      	mov	r4, r0
 23fb680:	2104      	movs	r1, #4
 23fb682:	f7fe fd28 	bl	23fa0d6 <_ZdlPvj>
 23fb686:	4620      	mov	r0, r4
 23fb688:	bd10      	pop	{r4, pc}

023fb68a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fb68a:	b510      	push	{r4, lr}
 23fb68c:	4604      	mov	r4, r0
 23fb68e:	2104      	movs	r1, #4
 23fb690:	f7fe fd21 	bl	23fa0d6 <_ZdlPvj>
 23fb694:	4620      	mov	r0, r4
 23fb696:	bd10      	pop	{r4, pc}

023fb698 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fb698:	f7ff b848 	b.w	23fa72c <os_mutex_recursive_lock>

023fb69c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fb69c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fb69e:	f7fe fce7 	bl	23fa070 <strcmp>
}
 23fb6a2:	fab0 f080 	clz	r0, r0
 23fb6a6:	0940      	lsrs	r0, r0, #5
 23fb6a8:	bd08      	pop	{r3, pc}

023fb6aa <__tcf_1>:
 23fb6aa:	4770      	bx	lr

023fb6ac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fb6ac:	b510      	push	{r4, lr}
 23fb6ae:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fb6b0:	f7ff fe4c 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fb6b4:	4284      	cmp	r4, r0
 23fb6b6:	d105      	bne.n	23fb6c4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fb6b8:	f7ff fe48 	bl	23fb34c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fb6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fb6c0:	f7ff be38 	b.w	23fb334 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fb6c4:	f003 fd16 	bl	23ff0f4 <_Z22__fetch_global_Serial1v>
 23fb6c8:	4284      	cmp	r4, r0
 23fb6ca:	d105      	bne.n	23fb6d8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fb6cc:	f003 fd12 	bl	23ff0f4 <_Z22__fetch_global_Serial1v>
}
 23fb6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fb6d4:	f003 bb8f 	b.w	23fedf6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fb6d8:	b12c      	cbz	r4, 23fb6e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fb6da:	6823      	ldr	r3, [r4, #0]
 23fb6dc:	4620      	mov	r0, r4
}
 23fb6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb6e2:	685b      	ldr	r3, [r3, #4]
 23fb6e4:	4718      	bx	r3
 23fb6e6:	bd10      	pop	{r4, pc}

023fb6e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb6e8:	680b      	ldr	r3, [r1, #0]
 23fb6ea:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fb6ec:	684b      	ldr	r3, [r1, #4]
 23fb6ee:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fb6f0:	b113      	cbz	r3, 23fb6f8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fb6f2:	685a      	ldr	r2, [r3, #4]
 23fb6f4:	3201      	adds	r2, #1
 23fb6f6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb6f8:	4770      	bx	lr

023fb6fa <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fb6fa:	b513      	push	{r0, r1, r4, lr}
 23fb6fc:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fb6fe:	4608      	mov	r0, r1
 23fb700:	9101      	str	r1, [sp, #4]
 23fb702:	f7fe fcbf 	bl	23fa084 <strlen>
 23fb706:	4602      	mov	r2, r0
 23fb708:	4620      	mov	r0, r4
 23fb70a:	9901      	ldr	r1, [sp, #4]
}
 23fb70c:	b002      	add	sp, #8
 23fb70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fb712:	f7ff bda1 	b.w	23fb258 <_ZN5spark10JSONWriter5valueEPKcj>

023fb716 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fb716:	b513      	push	{r0, r1, r4, lr}
 23fb718:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fb71a:	4608      	mov	r0, r1
 23fb71c:	9101      	str	r1, [sp, #4]
 23fb71e:	f7fe fcb1 	bl	23fa084 <strlen>
 23fb722:	4602      	mov	r2, r0
 23fb724:	4620      	mov	r0, r4
 23fb726:	6823      	ldr	r3, [r4, #0]
 23fb728:	9901      	ldr	r1, [sp, #4]
 23fb72a:	68db      	ldr	r3, [r3, #12]
}
 23fb72c:	b002      	add	sp, #8
 23fb72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fb732:	4718      	bx	r3

023fb734 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fb734:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fb736:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fb738:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fb73c:	2201      	movs	r2, #1
 23fb73e:	68db      	ldr	r3, [r3, #12]
 23fb740:	f10d 0107 	add.w	r1, sp, #7
 23fb744:	4798      	blx	r3
}
 23fb746:	b003      	add	sp, #12
 23fb748:	f85d fb04 	ldr.w	pc, [sp], #4

023fb74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fb74c:	680a      	ldr	r2, [r1, #0]
 23fb74e:	b510      	push	{r4, lr}
 23fb750:	6002      	str	r2, [r0, #0]
 23fb752:	684a      	ldr	r2, [r1, #4]
 23fb754:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fb756:	2200      	movs	r2, #0
 23fb758:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fb75c:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb75e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb760:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb762:	6084      	str	r4, [r0, #8]
 23fb764:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb766:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fb768:	60c4      	str	r4, [r0, #12]
 23fb76a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb76c:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fb76e:	6104      	str	r4, [r0, #16]
 23fb770:	bd10      	pop	{r4, pc}
	...

023fb774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fb774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fb778:	f04f 0a14 	mov.w	sl, #20
 23fb77c:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fb780:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fb782:	4645      	mov	r5, r8
 23fb784:	fb0a f404 	mul.w	r4, sl, r4
 23fb788:	9300      	str	r3, [sp, #0]
 23fb78a:	4b17      	ldr	r3, [pc, #92]	; (23fb7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fb78c:	10a4      	asrs	r4, r4, #2
 23fb78e:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fb790:	2c00      	cmp	r4, #0
 23fb792:	dd21      	ble.n	23fb7d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fb794:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fb796:	fb0a f006 	mul.w	r0, sl, r6
 23fb79a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fb79e:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fb7a2:	463a      	mov	r2, r7
 23fb7a4:	455f      	cmp	r7, fp
 23fb7a6:	bf28      	it	cs
 23fb7a8:	465a      	movcs	r2, fp
 23fb7aa:	5828      	ldr	r0, [r5, r0]
 23fb7ac:	9101      	str	r1, [sp, #4]
 23fb7ae:	f003 fee6 	bl	23ff57e <strncmp>
                if (cmp == 0) {
 23fb7b2:	2800      	cmp	r0, #0
 23fb7b4:	f04f 0301 	mov.w	r3, #1
 23fb7b8:	9901      	ldr	r1, [sp, #4]
 23fb7ba:	d10b      	bne.n	23fb7d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fb7bc:	455f      	cmp	r7, fp
 23fb7be:	d103      	bne.n	23fb7c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fb7c0:	9a00      	ldr	r2, [sp, #0]
 23fb7c2:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fb7c4:	4634      	mov	r4, r6
 23fb7c6:	e7e3      	b.n	23fb790 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fb7c8:	d9fc      	bls.n	23fb7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fb7ca:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fb7cc:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fb7d0:	3e01      	subs	r6, #1
 23fb7d2:	e7f7      	b.n	23fb7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fb7d4:	dbf9      	blt.n	23fb7ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fb7d6:	e7f5      	b.n	23fb7c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fb7d8:	eba5 0508 	sub.w	r5, r5, r8
}
 23fb7dc:	4802      	ldr	r0, [pc, #8]	; (23fb7e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fb7de:	10ad      	asrs	r5, r5, #2
 23fb7e0:	4368      	muls	r0, r5
 23fb7e2:	b003      	add	sp, #12
 23fb7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fb7e8:	cccccccd 	.word	0xcccccccd

023fb7ec <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fb7ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fb7ee:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fb7f0:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fb7f2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fb7f4:	b303      	cbz	r3, 23fb838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fb7f6:	b1f9      	cbz	r1, 23fb838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fb7f8:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fb7fa:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fb7fe:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fb800:	a903      	add	r1, sp, #12
 23fb802:	a801      	add	r0, sp, #4
 23fb804:	f7ff ff21 	bl	23fb64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fb808:	4601      	mov	r1, r0
 23fb80a:	b1a8      	cbz	r0, 23fb838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb80c:	f10d 030b 	add.w	r3, sp, #11
 23fb810:	4620      	mov	r0, r4
 23fb812:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fb814:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fb818:	f7ff ffac 	bl	23fb774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fb81c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fb820:	b153      	cbz	r3, 23fb838 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fb822:	6823      	ldr	r3, [r4, #0]
 23fb824:	2414      	movs	r4, #20
 23fb826:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fb82a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fb82e:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fb830:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fb832:	bfa8      	it	ge
 23fb834:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fb836:	e7e3      	b.n	23fb800 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fb838:	4628      	mov	r0, r5
 23fb83a:	b004      	add	sp, #16
 23fb83c:	bd70      	pop	{r4, r5, r6, pc}

023fb83e <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fb83e:	b40e      	push	{r1, r2, r3}
 23fb840:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb842:	b08c      	sub	sp, #48	; 0x30
 23fb844:	af00      	add	r7, sp, #0
 23fb846:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fb84a:	f855 2b04 	ldr.w	r2, [r5], #4
 23fb84e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fb850:	462b      	mov	r3, r5
 23fb852:	2120      	movs	r1, #32
 23fb854:	f107 0010 	add.w	r0, r7, #16
 23fb858:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fb85a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fb85c:	f7ff f9ea 	bl	23fac34 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fb860:	281f      	cmp	r0, #31
 23fb862:	687a      	ldr	r2, [r7, #4]
 23fb864:	d91a      	bls.n	23fb89c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fb866:	f100 0308 	add.w	r3, r0, #8
 23fb86a:	f023 0307 	bic.w	r3, r3, #7
        }
 23fb86e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fb870:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fb874:	1c41      	adds	r1, r0, #1
 23fb876:	462b      	mov	r3, r5
 23fb878:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fb87a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fb87c:	f7ff f9da 	bl	23fac34 <vsnprintf>
        if (n > 0) {
 23fb880:	1e02      	subs	r2, r0, #0
 23fb882:	dd04      	ble.n	23fb88e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fb884:	6823      	ldr	r3, [r4, #0]
 23fb886:	4669      	mov	r1, sp
 23fb888:	4620      	mov	r0, r4
 23fb88a:	68db      	ldr	r3, [r3, #12]
 23fb88c:	4798      	blx	r3
 23fb88e:	46b5      	mov	sp, r6
}
 23fb890:	3730      	adds	r7, #48	; 0x30
 23fb892:	46bd      	mov	sp, r7
 23fb894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fb898:	b003      	add	sp, #12
 23fb89a:	4770      	bx	lr
    } else if (n > 0) {
 23fb89c:	2800      	cmp	r0, #0
 23fb89e:	d0f7      	beq.n	23fb890 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fb8a0:	6823      	ldr	r3, [r4, #0]
 23fb8a2:	4602      	mov	r2, r0
 23fb8a4:	68db      	ldr	r3, [r3, #12]
 23fb8a6:	4620      	mov	r0, r4
 23fb8a8:	f107 0110 	add.w	r1, r7, #16
 23fb8ac:	4798      	blx	r3
}
 23fb8ae:	e7ef      	b.n	23fb890 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fb8b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fb8b0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fb8b2:	4c08      	ldr	r4, [pc, #32]	; (23fb8d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fb8b4:	e8d4 3f8f 	ldab	r3, [r4]
 23fb8b8:	07db      	lsls	r3, r3, #31
 23fb8ba:	d409      	bmi.n	23fb8d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fb8bc:	4620      	mov	r0, r4
 23fb8be:	f7fe fc19 	bl	23fa0f4 <__cxa_guard_acquire>
 23fb8c2:	b128      	cbz	r0, 23fb8d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fb8c4:	4620      	mov	r0, r4
 23fb8c6:	f7fe fc1a 	bl	23fa0fe <__cxa_guard_release>
 23fb8ca:	4803      	ldr	r0, [pc, #12]	; (23fb8d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fb8cc:	f003 fdbc 	bl	23ff448 <atexit>
}
 23fb8d0:	4802      	ldr	r0, [pc, #8]	; (23fb8dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fb8d2:	bd10      	pop	{r4, pc}
 23fb8d4:	1007aeb0 	.word	0x1007aeb0
 23fb8d8:	023fb643 	.word	0x023fb643
 23fb8dc:	1007aaa8 	.word	0x1007aaa8

023fb8e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fb8e0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fb8e2:	4c08      	ldr	r4, [pc, #32]	; (23fb904 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fb8e4:	e8d4 3f8f 	ldab	r3, [r4]
 23fb8e8:	07db      	lsls	r3, r3, #31
 23fb8ea:	d409      	bmi.n	23fb900 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fb8ec:	4620      	mov	r0, r4
 23fb8ee:	f7fe fc01 	bl	23fa0f4 <__cxa_guard_acquire>
 23fb8f2:	b128      	cbz	r0, 23fb900 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fb8f4:	4620      	mov	r0, r4
 23fb8f6:	f7fe fc02 	bl	23fa0fe <__cxa_guard_release>
 23fb8fa:	4803      	ldr	r0, [pc, #12]	; (23fb908 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fb8fc:	f003 fda4 	bl	23ff448 <atexit>
    return &factory;
}
 23fb900:	4802      	ldr	r0, [pc, #8]	; (23fb90c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fb902:	bd10      	pop	{r4, pc}
 23fb904:	1007aeb4 	.word	0x1007aeb4
 23fb908:	023fb6ab 	.word	0x023fb6ab
 23fb90c:	1007aaac 	.word	0x1007aaac

023fb910 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fb910:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fb912:	2500      	movs	r5, #0
 23fb914:	4604      	mov	r4, r0
 23fb916:	e9c0 5500 	strd	r5, r5, [r0]
 23fb91a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fb91e:	6085      	str	r5, [r0, #8]
 23fb920:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fb922:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fb926:	f7fe fee5 	bl	23fa6f4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fb92a:	f7ff ffc1 	bl	23fb8b0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fb92e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fb930:	f7ff ffd6 	bl	23fb8e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fb934:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fb936:	6220      	str	r0, [r4, #32]
}
 23fb938:	4620      	mov	r0, r4
 23fb93a:	bd38      	pop	{r3, r4, r5, pc}

023fb93c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fb93c:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fb93e:	4c0a      	ldr	r4, [pc, #40]	; (23fb968 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fb940:	e8d4 3f8f 	ldab	r3, [r4]
 23fb944:	07db      	lsls	r3, r3, #31
 23fb946:	d40c      	bmi.n	23fb962 <_ZN5spark10LogManager8instanceEv+0x26>
 23fb948:	4620      	mov	r0, r4
 23fb94a:	f7fe fbd3 	bl	23fa0f4 <__cxa_guard_acquire>
 23fb94e:	b140      	cbz	r0, 23fb962 <_ZN5spark10LogManager8instanceEv+0x26>
 23fb950:	4806      	ldr	r0, [pc, #24]	; (23fb96c <_ZN5spark10LogManager8instanceEv+0x30>)
 23fb952:	f7ff ffdd 	bl	23fb910 <_ZN5spark10LogManagerC1Ev>
 23fb956:	4620      	mov	r0, r4
 23fb958:	f7fe fbd1 	bl	23fa0fe <__cxa_guard_release>
 23fb95c:	4804      	ldr	r0, [pc, #16]	; (23fb970 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fb95e:	f003 fd73 	bl	23ff448 <atexit>
    return &mgr;
}
 23fb962:	4802      	ldr	r0, [pc, #8]	; (23fb96c <_ZN5spark10LogManager8instanceEv+0x30>)
 23fb964:	bd10      	pop	{r4, pc}
 23fb966:	bf00      	nop
 23fb968:	1007aeac 	.word	0x1007aeac
 23fb96c:	1007aebc 	.word	0x1007aebc
 23fb970:	023fbeb1 	.word	0x023fbeb1

023fb974 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fb974:	2300      	movs	r3, #0
 23fb976:	4a02      	ldr	r2, [pc, #8]	; (23fb980 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fb978:	4902      	ldr	r1, [pc, #8]	; (23fb984 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fb97a:	4803      	ldr	r0, [pc, #12]	; (23fb988 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fb97c:	f7ff b842 	b.w	23faa04 <log_set_callbacks>
 23fb980:	023fbc99 	.word	0x023fbc99
 23fb984:	023fbc25 	.word	0x023fbc25
 23fb988:	023fbba5 	.word	0x023fbba5

023fb98c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fb98c:	2300      	movs	r3, #0
 23fb98e:	461a      	mov	r2, r3
 23fb990:	4619      	mov	r1, r3
 23fb992:	4618      	mov	r0, r3
 23fb994:	f7ff b836 	b.w	23faa04 <log_set_callbacks>

023fb998 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fb998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb99a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fb99c:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fb99e:	4668      	mov	r0, sp
 23fb9a0:	f7ff fea2 	bl	23fb6e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fb9a4:	466a      	mov	r2, sp
 23fb9a6:	4629      	mov	r1, r5
 23fb9a8:	4620      	mov	r0, r4
 23fb9aa:	f7ff fb75 	bl	23fb098 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fb9ae:	a801      	add	r0, sp, #4
 23fb9b0:	f7ff fc62 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb9b4:	4620      	mov	r0, r4
 23fb9b6:	b003      	add	sp, #12
 23fb9b8:	bd30      	pop	{r4, r5, pc}

023fb9ba <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fb9ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb9bc:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fb9be:	68cd      	ldr	r5, [r1, #12]
 23fb9c0:	4668      	mov	r0, sp
 23fb9c2:	f7ff fe91 	bl	23fb6e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fb9c6:	466a      	mov	r2, sp
 23fb9c8:	4629      	mov	r1, r5
 23fb9ca:	4620      	mov	r0, r4
 23fb9cc:	f7ff fb40 	bl	23fb050 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fb9d0:	a801      	add	r0, sp, #4
 23fb9d2:	f7ff fc51 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb9d6:	4620      	mov	r0, r4
 23fb9d8:	b003      	add	sp, #12
 23fb9da:	bd30      	pop	{r4, r5, pc}

023fb9dc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fb9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fb9de:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fb9e0:	690d      	ldr	r5, [r1, #16]
 23fb9e2:	4668      	mov	r0, sp
 23fb9e4:	f7ff fe80 	bl	23fb6e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fb9e8:	466a      	mov	r2, sp
 23fb9ea:	4629      	mov	r1, r5
 23fb9ec:	4620      	mov	r0, r4
 23fb9ee:	f7ff fad8 	bl	23fafa2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fb9f2:	a801      	add	r0, sp, #4
 23fb9f4:	f7ff fc40 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fb9f8:	4620      	mov	r0, r4
 23fb9fa:	b003      	add	sp, #12
 23fb9fc:	bd30      	pop	{r4, r5, pc}
	...

023fba00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fba00:	b570      	push	{r4, r5, r6, lr}
 23fba02:	b08a      	sub	sp, #40	; 0x28
 23fba04:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fba06:	4601      	mov	r1, r0
 23fba08:	a804      	add	r0, sp, #16
 23fba0a:	f7ff ffc5 	bl	23fb998 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fba0e:	4e14      	ldr	r6, [pc, #80]	; (23fba60 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fba10:	a804      	add	r0, sp, #16
 23fba12:	f7ff fb59 	bl	23fb0c8 <_ZN5spark18JSONObjectIterator4nextEv>
 23fba16:	b1e8      	cbz	r0, 23fba54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fba18:	4668      	mov	r0, sp
 23fba1a:	a904      	add	r1, sp, #16
 23fba1c:	f7ff ffcd 	bl	23fb9ba <_ZNK5spark18JSONObjectIterator4nameEv>
 23fba20:	4631      	mov	r1, r6
 23fba22:	9802      	ldr	r0, [sp, #8]
 23fba24:	f7ff fe3a 	bl	23fb69c <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fba28:	4604      	mov	r4, r0
 23fba2a:	b110      	cbz	r0, 23fba32 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fba2c:	1e2c      	subs	r4, r5, #0
 23fba2e:	bf18      	it	ne
 23fba30:	2401      	movne	r4, #1
 23fba32:	a801      	add	r0, sp, #4
 23fba34:	f7ff fc20 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fba38:	2c00      	cmp	r4, #0
 23fba3a:	d0e9      	beq.n	23fba10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fba3c:	4668      	mov	r0, sp
 23fba3e:	a904      	add	r1, sp, #16
 23fba40:	f7ff ffcc 	bl	23fb9dc <_ZNK5spark18JSONObjectIterator5valueEv>
 23fba44:	4668      	mov	r0, sp
 23fba46:	f7ff fae2 	bl	23fb00e <_ZNK5spark9JSONValue5toIntEv>
 23fba4a:	6028      	str	r0, [r5, #0]
 23fba4c:	a801      	add	r0, sp, #4
 23fba4e:	f7ff fc13 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fba52:	e7dd      	b.n	23fba10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fba54:	a805      	add	r0, sp, #20
 23fba56:	f7ff fc0f 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fba5a:	b00a      	add	sp, #40	; 0x28
 23fba5c:	bd70      	pop	{r4, r5, r6, pc}
 23fba5e:	bf00      	nop
 23fba60:	023ff99c 	.word	0x023ff99c

023fba64 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fba64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fba66:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fba68:	4913      	ldr	r1, [pc, #76]	; (23fbab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fba6a:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fba6c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fba6e:	f7fe faff 	bl	23fa070 <strcmp>
 23fba72:	b950      	cbnz	r0, 23fba8a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fba74:	f7ff fc6a 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fba78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fba7c:	f7ff fc56 	bl	23fb32c <_ZN9USBSerial5beginEl>
}
 23fba80:	b003      	add	sp, #12
 23fba82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fba86:	f7ff bc61 	b.w	23fb34c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fba8a:	4620      	mov	r0, r4
 23fba8c:	490b      	ldr	r1, [pc, #44]	; (23fbabc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fba8e:	f7fe faef 	bl	23fa070 <strcmp>
 23fba92:	b978      	cbnz	r0, 23fbab4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fba94:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fba98:	a901      	add	r1, sp, #4
 23fba9a:	4628      	mov	r0, r5
        int baud = 9600;
 23fba9c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fba9e:	f7ff ffaf 	bl	23fba00 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fbaa2:	f003 fb27 	bl	23ff0f4 <_Z22__fetch_global_Serial1v>
 23fbaa6:	9901      	ldr	r1, [sp, #4]
 23fbaa8:	f003 f9a2 	bl	23fedf0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fbaac:	f003 fb22 	bl	23ff0f4 <_Z22__fetch_global_Serial1v>
}
 23fbab0:	b003      	add	sp, #12
 23fbab2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fbab4:	2000      	movs	r0, #0
 23fbab6:	e7fb      	b.n	23fbab0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fbab8:	023ff9a1 	.word	0x023ff9a1
 23fbabc:	023ff9a8 	.word	0x023ff9a8

023fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbac0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbac2:	2614      	movs	r6, #20
 23fbac4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbac8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbaca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbace:	42ae      	cmp	r6, r5
 23fbad0:	d005      	beq.n	23fbade <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fbad2:	f105 0008 	add.w	r0, r5, #8
 23fbad6:	f7ff fff3 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fbada:	3514      	adds	r5, #20
 23fbadc:	e7f7      	b.n	23fbace <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbade:	6820      	ldr	r0, [r4, #0]
 23fbae0:	f7ff f88c 	bl	23fabfc <free>
}
 23fbae4:	4620      	mov	r0, r4
 23fbae6:	bd70      	pop	{r4, r5, r6, pc}

023fbae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbae8:	b570      	push	{r4, r5, r6, lr}
 23fbaea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbaec:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fbaf0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fbaf4:	42ae      	cmp	r6, r5
 23fbaf6:	d004      	beq.n	23fbb02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fbaf8:	4628      	mov	r0, r5
 23fbafa:	f003 f9d3 	bl	23feea4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fbafe:	3510      	adds	r5, #16
 23fbb00:	e7f8      	b.n	23fbaf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fbb02:	6820      	ldr	r0, [r4, #0]
 23fbb04:	f7ff f87a 	bl	23fabfc <free>
}
 23fbb08:	4620      	mov	r0, r4
 23fbb0a:	bd70      	pop	{r4, r5, r6, pc}

023fbb0c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fbb0c:	b510      	push	{r4, lr}
 23fbb0e:	4604      	mov	r4, r0
 23fbb10:	300c      	adds	r0, #12
 23fbb12:	f7ff ffd5 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fbb16:	4620      	mov	r0, r4
 23fbb18:	f7ff ffe6 	bl	23fbae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fbb1c:	4620      	mov	r0, r4
 23fbb1e:	bd10      	pop	{r4, pc}

023fbb20 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fbb20:	b510      	push	{r4, lr}
 23fbb22:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fbb24:	4b03      	ldr	r3, [pc, #12]	; (23fbb34 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fbb26:	f840 3b04 	str.w	r3, [r0], #4
 23fbb2a:	f7ff ffef 	bl	23fbb0c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fbb2e:	4620      	mov	r0, r4
 23fbb30:	bd10      	pop	{r4, pc}
 23fbb32:	bf00      	nop
 23fbb34:	023ff888 	.word	0x023ff888

023fbb38 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fbb38:	b510      	push	{r4, lr}
 23fbb3a:	4604      	mov	r4, r0
 23fbb3c:	f7ff fff0 	bl	23fbb20 <_ZN5spark16StreamLogHandlerD1Ev>
 23fbb40:	4620      	mov	r0, r4
 23fbb42:	2124      	movs	r1, #36	; 0x24
 23fbb44:	f7fe fac7 	bl	23fa0d6 <_ZdlPvj>
 23fbb48:	4620      	mov	r0, r4
 23fbb4a:	bd10      	pop	{r4, pc}

023fbb4c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fbb4c:	b510      	push	{r4, lr}
 23fbb4e:	4604      	mov	r4, r0
 23fbb50:	4b02      	ldr	r3, [pc, #8]	; (23fbb5c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fbb52:	6003      	str	r3, [r0, #0]
 23fbb54:	f7ff ffe4 	bl	23fbb20 <_ZN5spark16StreamLogHandlerD1Ev>
 23fbb58:	4620      	mov	r0, r4
 23fbb5a:	bd10      	pop	{r4, pc}
 23fbb5c:	023ffa48 	.word	0x023ffa48

023fbb60 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fbb60:	b510      	push	{r4, lr}
 23fbb62:	4604      	mov	r4, r0
 23fbb64:	f7ff fff2 	bl	23fbb4c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fbb68:	4620      	mov	r0, r4
 23fbb6a:	2124      	movs	r1, #36	; 0x24
 23fbb6c:	f7fe fab3 	bl	23fa0d6 <_ZdlPvj>
 23fbb70:	4620      	mov	r0, r4
 23fbb72:	bd10      	pop	{r4, pc}

023fbb74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fbb74:	2200      	movs	r2, #0
 23fbb76:	e9c0 2200 	strd	r2, r2, [r0]
 23fbb7a:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fbb7c:	b510      	push	{r4, lr}
 23fbb7e:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbb80:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fbb82:	6004      	str	r4, [r0, #0]
 23fbb84:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbb86:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fbb88:	6044      	str	r4, [r0, #4]
 23fbb8a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbb8c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbb8e:	6084      	str	r4, [r0, #8]
}
 23fbb90:	bd10      	pop	{r4, pc}

023fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fbb92:	b510      	push	{r4, lr}
 23fbb94:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fbb96:	6803      	ldr	r3, [r0, #0]
 23fbb98:	6818      	ldr	r0, [r3, #0]
 23fbb9a:	f7fe fdd5 	bl	23fa748 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fbb9e:	4620      	mov	r0, r4
 23fbba0:	bd10      	pop	{r4, pc}
	...

023fbba4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fbba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbba8:	b087      	sub	sp, #28
 23fbbaa:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fbbac:	4b1c      	ldr	r3, [pc, #112]	; (23fbc20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fbbae:	4680      	mov	r8, r0
 23fbbb0:	685b      	ldr	r3, [r3, #4]
 23fbbb2:	4689      	mov	r9, r1
 23fbbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fbbb8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fbbba:	b96b      	cbnz	r3, 23fbbd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fbbbc:	f7ff febe 	bl	23fb93c <_ZN5spark10LogManager8instanceEv>
 23fbbc0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fbbc2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fbbc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbbc8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fbbca:	f7ff fd65 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fbbce:	7b23      	ldrb	r3, [r4, #12]
 23fbbd0:	b12b      	cbz	r3, 23fbbde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fbbd2:	a805      	add	r0, sp, #20
 23fbbd4:	f7ff ffdd 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fbbd8:	b007      	add	sp, #28
 23fbbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fbbde:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fbbe0:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fbbe4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fbbe6:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fbbea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fbbee:	45aa      	cmp	sl, r5
 23fbbf0:	d012      	beq.n	23fbc18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fbbf2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fbbf6:	4631      	mov	r1, r6
 23fbbf8:	1d38      	adds	r0, r7, #4
 23fbbfa:	f7ff fdf7 	bl	23fb7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fbbfe:	4581      	cmp	r9, r0
 23fbc00:	d3f5      	bcc.n	23fbbee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fbc02:	9a03      	ldr	r2, [sp, #12]
 23fbc04:	683b      	ldr	r3, [r7, #0]
 23fbc06:	9200      	str	r2, [sp, #0]
 23fbc08:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fbc0c:	464a      	mov	r2, r9
 23fbc0e:	4633      	mov	r3, r6
 23fbc10:	4641      	mov	r1, r8
 23fbc12:	4638      	mov	r0, r7
 23fbc14:	47d8      	blx	fp
 23fbc16:	e7ea      	b.n	23fbbee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fbc18:	2300      	movs	r3, #0
 23fbc1a:	7323      	strb	r3, [r4, #12]
 23fbc1c:	e7d9      	b.n	23fbbd2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fbc1e:	bf00      	nop
 23fbc20:	e000ed00 	.word	0xe000ed00

023fbc24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fbc24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbc28:	469b      	mov	fp, r3
 23fbc2a:	4b1a      	ldr	r3, [pc, #104]	; (23fbc94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fbc2c:	4680      	mov	r8, r0
 23fbc2e:	685b      	ldr	r3, [r3, #4]
 23fbc30:	4689      	mov	r9, r1
 23fbc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fbc36:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fbc38:	b96b      	cbnz	r3, 23fbc56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fbc3a:	f7ff fe7f 	bl	23fb93c <_ZN5spark10LogManager8instanceEv>
 23fbc3e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fbc40:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fbc44:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbc46:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fbc48:	f7ff fd26 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fbc4c:	7b23      	ldrb	r3, [r4, #12]
 23fbc4e:	b12b      	cbz	r3, 23fbc5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fbc50:	a801      	add	r0, sp, #4
 23fbc52:	f7ff ff9e 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fbc56:	b003      	add	sp, #12
 23fbc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fbc5c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fbc5e:	b2f6      	uxtb	r6, r6
 23fbc60:	7323      	strb	r3, [r4, #12]
 23fbc62:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fbc66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fbc6a:	4555      	cmp	r5, sl
 23fbc6c:	d00e      	beq.n	23fbc8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fbc6e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fbc72:	4659      	mov	r1, fp
 23fbc74:	1d38      	adds	r0, r7, #4
 23fbc76:	f7ff fdb9 	bl	23fb7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fbc7a:	4286      	cmp	r6, r0
 23fbc7c:	d3f5      	bcc.n	23fbc6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fbc7e:	683b      	ldr	r3, [r7, #0]
 23fbc80:	464a      	mov	r2, r9
 23fbc82:	4641      	mov	r1, r8
 23fbc84:	4638      	mov	r0, r7
 23fbc86:	68db      	ldr	r3, [r3, #12]
 23fbc88:	4798      	blx	r3
 23fbc8a:	e7ee      	b.n	23fbc6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fbc8c:	2300      	movs	r3, #0
 23fbc8e:	7323      	strb	r3, [r4, #12]
 23fbc90:	e7de      	b.n	23fbc50 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fbc92:	bf00      	nop
 23fbc94:	e000ed00 	.word	0xe000ed00

023fbc98 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fbc98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fbc9c:	4b16      	ldr	r3, [pc, #88]	; (23fbcf8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fbc9e:	4605      	mov	r5, r0
 23fbca0:	685b      	ldr	r3, [r3, #4]
 23fbca2:	460f      	mov	r7, r1
 23fbca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fbca8:	bb1b      	cbnz	r3, 23fbcf2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fbcaa:	f7ff fe47 	bl	23fb93c <_ZN5spark10LogManager8instanceEv>
 23fbcae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fbcb0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fbcb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbcb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fbcb8:	f7ff fcee 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fbcbc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fbcc0:	2446      	movs	r4, #70	; 0x46
 23fbcc2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fbcc6:	45b0      	cmp	r8, r6
 23fbcc8:	d109      	bne.n	23fbcde <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fbcca:	a801      	add	r0, sp, #4
 23fbccc:	f7ff ff61 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fbcd0:	42a5      	cmp	r5, r4
 23fbcd2:	bfb4      	ite	lt
 23fbcd4:	2000      	movlt	r0, #0
 23fbcd6:	2001      	movge	r0, #1
}
 23fbcd8:	b002      	add	sp, #8
 23fbcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fbcde:	f856 0b04 	ldr.w	r0, [r6], #4
 23fbce2:	4639      	mov	r1, r7
 23fbce4:	3004      	adds	r0, #4
 23fbce6:	f7ff fd81 	bl	23fb7ec <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fbcea:	4284      	cmp	r4, r0
 23fbcec:	bfa8      	it	ge
 23fbcee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fbcf0:	e7e9      	b.n	23fbcc6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fbcf2:	2000      	movs	r0, #0
 23fbcf4:	e7f0      	b.n	23fbcd8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fbcf6:	bf00      	nop
 23fbcf8:	e000ed00 	.word	0xe000ed00

023fbcfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbcfe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fbd02:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fbd04:	4604      	mov	r4, r0
 23fbd06:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbd08:	db0d      	blt.n	23fbd26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fbd0a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fbd0c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fbd0e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fbd10:	dd04      	ble.n	23fbd1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fbd12:	00b9      	lsls	r1, r7, #2
 23fbd14:	f7fe ff80 	bl	23fac18 <realloc>
            if (!d) {
 23fbd18:	b918      	cbnz	r0, 23fbd22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fbd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fbd1c:	f7fe ff6e 	bl	23fabfc <free>
        T* d = nullptr;
 23fbd20:	2000      	movs	r0, #0
        data_ = d;
 23fbd22:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fbd24:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fbd26:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fbd28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fbd2a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fbd2e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbd30:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fbd34:	1d08      	adds	r0, r1, #4
 23fbd36:	f003 fbb2 	bl	23ff49e <memmove>
    new(p) T(std::move(value));
 23fbd3a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fbd3e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fbd40:	2001      	movs	r0, #1
    ++size_;
 23fbd42:	3301      	adds	r3, #1
 23fbd44:	6063      	str	r3, [r4, #4]
    return true;
 23fbd46:	e7e8      	b.n	23fbd1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fbd48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fbd48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbd4a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fbd4c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fbd50:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbd52:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fbd54:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fbd56:	f7ff fc9f 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fbd5a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fbd5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fbd62:	4293      	cmp	r3, r2
 23fbd64:	4619      	mov	r1, r3
 23fbd66:	d00a      	beq.n	23fbd7e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fbd68:	6809      	ldr	r1, [r1, #0]
 23fbd6a:	3304      	adds	r3, #4
 23fbd6c:	42a9      	cmp	r1, r5
 23fbd6e:	d1f8      	bne.n	23fbd62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fbd70:	a801      	add	r0, sp, #4
 23fbd72:	f7ff ff0e 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fbd76:	2500      	movs	r5, #0
}
 23fbd78:	4628      	mov	r0, r5
 23fbd7a:	b003      	add	sp, #12
 23fbd7c:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fbd7e:	4629      	mov	r1, r5
 23fbd80:	4620      	mov	r0, r4
 23fbd82:	f7ff ffbb 	bl	23fbcfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fbd86:	4605      	mov	r5, r0
 23fbd88:	2800      	cmp	r0, #0
 23fbd8a:	d0f1      	beq.n	23fbd70 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fbd8c:	6863      	ldr	r3, [r4, #4]
 23fbd8e:	2b01      	cmp	r3, #1
 23fbd90:	d101      	bne.n	23fbd96 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fbd92:	f7ff fdef 	bl	23fb974 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fbd96:	a801      	add	r0, sp, #4
 23fbd98:	f7ff fefb 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fbd9c:	e7ec      	b.n	23fbd78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fbd9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fbd9e:	460b      	mov	r3, r1
 23fbda0:	b570      	push	{r4, r5, r6, lr}
 23fbda2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fbda4:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fbda8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fbdac:	4282      	cmp	r2, r0
 23fbdae:	d00f      	beq.n	23fbdd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fbdb0:	4601      	mov	r1, r0
            if (*p == value) {
 23fbdb2:	681d      	ldr	r5, [r3, #0]
 23fbdb4:	f851 6b04 	ldr.w	r6, [r1], #4
 23fbdb8:	42ae      	cmp	r6, r5
 23fbdba:	d107      	bne.n	23fbdcc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fbdbc:	1a52      	subs	r2, r2, r1
 23fbdbe:	f003 fb6e 	bl	23ff49e <memmove>
    return true;
 23fbdc2:	2001      	movs	r0, #1
    --size_;
 23fbdc4:	6863      	ldr	r3, [r4, #4]
 23fbdc6:	3b01      	subs	r3, #1
 23fbdc8:	6063      	str	r3, [r4, #4]
}
 23fbdca:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fbdcc:	4608      	mov	r0, r1
 23fbdce:	e7ed      	b.n	23fbdac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fbdd0:	2000      	movs	r0, #0
 23fbdd2:	e7fa      	b.n	23fbdca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fbdd4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fbdd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fbdd6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fbdd8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fbddc:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fbdde:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbde0:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fbde2:	f7ff fc59 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fbde6:	4620      	mov	r0, r4
 23fbde8:	a901      	add	r1, sp, #4
 23fbdea:	f7ff ffd8 	bl	23fbd9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fbdee:	b118      	cbz	r0, 23fbdf8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fbdf0:	6863      	ldr	r3, [r4, #4]
 23fbdf2:	b90b      	cbnz	r3, 23fbdf8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fbdf4:	f7ff fdca 	bl	23fb98c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fbdf8:	a803      	add	r0, sp, #12
 23fbdfa:	f7ff feca 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fbdfe:	b004      	add	sp, #16
 23fbe00:	bd10      	pop	{r4, pc}

023fbe02 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fbe02:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fbe04:	b570      	push	{r4, r5, r6, lr}
 23fbe06:	4604      	mov	r4, r0
 23fbe08:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fbe0c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fbe10:	42ae      	cmp	r6, r5
 23fbe12:	d015      	beq.n	23fbe40 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fbe14:	4620      	mov	r0, r4
 23fbe16:	f105 0110 	add.w	r1, r5, #16
 23fbe1a:	f7ff ffc0 	bl	23fbd9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fbe1e:	6863      	ldr	r3, [r4, #4]
 23fbe20:	b90b      	cbnz	r3, 23fbe26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fbe22:	f7ff fdb3 	bl	23fb98c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fbe26:	69e0      	ldr	r0, [r4, #28]
 23fbe28:	6929      	ldr	r1, [r5, #16]
 23fbe2a:	6803      	ldr	r3, [r0, #0]
 23fbe2c:	68db      	ldr	r3, [r3, #12]
 23fbe2e:	4798      	blx	r3
        if (h.stream) {
 23fbe30:	6969      	ldr	r1, [r5, #20]
 23fbe32:	b119      	cbz	r1, 23fbe3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fbe34:	6a20      	ldr	r0, [r4, #32]
 23fbe36:	6803      	ldr	r3, [r0, #0]
 23fbe38:	68db      	ldr	r3, [r3, #12]
 23fbe3a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fbe3c:	3518      	adds	r5, #24
 23fbe3e:	e7e7      	b.n	23fbe10 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fbe40:	2618      	movs	r6, #24
 23fbe42:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fbe46:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbe4a:	42ae      	cmp	r6, r5
 23fbe4c:	d004      	beq.n	23fbe58 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fbe4e:	4628      	mov	r0, r5
 23fbe50:	f003 f828 	bl	23feea4 <_ZN6StringD1Ev>
 23fbe54:	3518      	adds	r5, #24
 23fbe56:	e7f8      	b.n	23fbe4a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fbe58:	2300      	movs	r3, #0
 23fbe5a:	6163      	str	r3, [r4, #20]
}
 23fbe5c:	bd70      	pop	{r4, r5, r6, pc}

023fbe5e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fbe5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fbe60:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fbe62:	f7ff fd93 	bl	23fb98c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fbe66:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fbe6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fbe6c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fbe6e:	f7ff fc13 	bl	23fb698 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fbe72:	4620      	mov	r0, r4
 23fbe74:	f7ff ffc5 	bl	23fbe02 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fbe78:	a801      	add	r0, sp, #4
 23fbe7a:	f7ff fe8a 	bl	23fbb92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fbe7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fbe80:	b108      	cbz	r0, 23fbe86 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fbe82:	f7fe fc45 	bl	23fa710 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fbe86:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fbe8a:	2618      	movs	r6, #24
 23fbe8c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbe90:	42ae      	cmp	r6, r5
 23fbe92:	d004      	beq.n	23fbe9e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fbe94:	4628      	mov	r0, r5
 23fbe96:	f003 f805 	bl	23feea4 <_ZN6StringD1Ev>
 23fbe9a:	3518      	adds	r5, #24
 23fbe9c:	e7f8      	b.n	23fbe90 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fbe9e:	6920      	ldr	r0, [r4, #16]
 23fbea0:	f7fe feac 	bl	23fabfc <free>
 23fbea4:	6820      	ldr	r0, [r4, #0]
 23fbea6:	f7fe fea9 	bl	23fabfc <free>
}
 23fbeaa:	4620      	mov	r0, r4
 23fbeac:	b002      	add	sp, #8
 23fbeae:	bd70      	pop	{r4, r5, r6, pc}

023fbeb0 <__tcf_2>:
    static LogManager mgr;
 23fbeb0:	4801      	ldr	r0, [pc, #4]	; (23fbeb8 <__tcf_2+0x8>)
 23fbeb2:	f7ff bfd4 	b.w	23fbe5e <_ZN5spark10LogManagerD1Ev>
 23fbeb6:	bf00      	nop
 23fbeb8:	1007aebc 	.word	0x1007aebc

023fbebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fbebc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbec0:	4604      	mov	r4, r0
 23fbec2:	460d      	mov	r5, r1
 23fbec4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbec6:	d915      	bls.n	23fbef4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fbec8:	4290      	cmp	r0, r2
 23fbeca:	d214      	bcs.n	23fbef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fbecc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fbed0:	1a75      	subs	r5, r6, r1
 23fbed2:	f1a1 0714 	sub.w	r7, r1, #20
 23fbed6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbed8:	42b7      	cmp	r7, r6
 23fbeda:	d01a      	beq.n	23fbf12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fbedc:	b11c      	cbz	r4, 23fbee6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fbede:	4631      	mov	r1, r6
 23fbee0:	4620      	mov	r0, r4
 23fbee2:	f7ff fc33 	bl	23fb74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fbee6:	f106 0008 	add.w	r0, r6, #8
 23fbeea:	f7ff fde9 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fbeee:	3e14      	subs	r6, #20
 23fbef0:	3c14      	subs	r4, #20
 23fbef2:	e7f1      	b.n	23fbed8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fbef4:	d00d      	beq.n	23fbf12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fbef6:	42b5      	cmp	r5, r6
 23fbef8:	d00b      	beq.n	23fbf12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fbefa:	b11c      	cbz	r4, 23fbf04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fbefc:	4629      	mov	r1, r5
 23fbefe:	4620      	mov	r0, r4
 23fbf00:	f7ff fc24 	bl	23fb74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fbf04:	f105 0008 	add.w	r0, r5, #8
 23fbf08:	f7ff fdda 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf0c:	3514      	adds	r5, #20
 23fbf0e:	3414      	adds	r4, #20
 23fbf10:	e7f1      	b.n	23fbef6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fbf12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fbf14:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbf16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbf18:	4604      	mov	r4, r0
 23fbf1a:	460d      	mov	r5, r1
 23fbf1c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbf1e:	d914      	bls.n	23fbf4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fbf20:	4290      	cmp	r0, r2
 23fbf22:	d213      	bcs.n	23fbf4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fbf24:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fbf28:	1a75      	subs	r5, r6, r1
 23fbf2a:	f1a1 0710 	sub.w	r7, r1, #16
 23fbf2e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbf30:	42b7      	cmp	r7, r6
 23fbf32:	d018      	beq.n	23fbf66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fbf34:	b11c      	cbz	r4, 23fbf3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fbf36:	4631      	mov	r1, r6
 23fbf38:	4620      	mov	r0, r4
 23fbf3a:	f003 f82f 	bl	23fef9c <_ZN6StringC1EOS_>
                end->~T();
 23fbf3e:	4630      	mov	r0, r6
 23fbf40:	f002 ffb0 	bl	23feea4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fbf44:	3e10      	subs	r6, #16
 23fbf46:	3c10      	subs	r4, #16
 23fbf48:	e7f2      	b.n	23fbf30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fbf4a:	d00c      	beq.n	23fbf66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fbf4c:	42b5      	cmp	r5, r6
 23fbf4e:	d00a      	beq.n	23fbf66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fbf50:	b11c      	cbz	r4, 23fbf5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fbf52:	4629      	mov	r1, r5
 23fbf54:	4620      	mov	r0, r4
 23fbf56:	f003 f821 	bl	23fef9c <_ZN6StringC1EOS_>
                p->~T();
 23fbf5a:	4628      	mov	r0, r5
 23fbf5c:	f002 ffa2 	bl	23feea4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf60:	3510      	adds	r5, #16
 23fbf62:	3410      	adds	r4, #16
 23fbf64:	e7f2      	b.n	23fbf4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fbf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fbf68:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fbf6a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fbf6c:	4605      	mov	r5, r0
        if (n > 0) {
 23fbf6e:	dd11      	ble.n	23fbf94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fbf70:	0130      	lsls	r0, r6, #4
 23fbf72:	f7fe fe35 	bl	23fabe0 <malloc>
            if (!d) {
 23fbf76:	4604      	mov	r4, r0
 23fbf78:	b158      	cbz	r0, 23fbf92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fbf7a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fbf7e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fbf82:	f7ff ffc7 	bl	23fbf14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fbf86:	6828      	ldr	r0, [r5, #0]
 23fbf88:	f7fe fe38 	bl	23fabfc <free>
        return true;
 23fbf8c:	2001      	movs	r0, #1
        data_ = d;
 23fbf8e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fbf90:	60ae      	str	r6, [r5, #8]
    }
 23fbf92:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fbf94:	2400      	movs	r4, #0
 23fbf96:	e7f6      	b.n	23fbf86 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fbf98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fbf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbf9c:	4690      	mov	r8, r2
        capacity_(0) {
 23fbf9e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fbfa0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fbfa2:	b095      	sub	sp, #84	; 0x54
 23fbfa4:	9103      	str	r1, [sp, #12]
    return size_;
 23fbfa6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fbfaa:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fbfac:	4299      	cmp	r1, r3
        capacity_(0) {
 23fbfae:	e9c0 3300 	strd	r3, r3, [r0]
 23fbfb2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fbfb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fbfba:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fbfbe:	7602      	strb	r2, [r0, #24]
 23fbfc0:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fbfc2:	dc23      	bgt.n	23fc00c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fbfc4:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fbfc8:	2314      	movs	r3, #20
 23fbfca:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fbfce:	42af      	cmp	r7, r5
 23fbfd0:	d03b      	beq.n	23fc04a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fbfd2:	4629      	mov	r1, r5
 23fbfd4:	a80b      	add	r0, sp, #44	; 0x2c
 23fbfd6:	f002 ffe1 	bl	23fef9c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fbfda:	a90b      	add	r1, sp, #44	; 0x2c
 23fbfdc:	a80f      	add	r0, sp, #60	; 0x3c
 23fbfde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fbfe0:	f002 ffdc 	bl	23fef9c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbfe4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fbfe8:	4299      	cmp	r1, r3
 23fbfea:	da1b      	bge.n	23fc024 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fbfec:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fbfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fbff0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fbff4:	4631      	mov	r1, r6
 23fbff6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fbffa:	f106 0010 	add.w	r0, r6, #16
 23fbffe:	f7ff ff89 	bl	23fbf14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fc002:	b9ee      	cbnz	r6, 23fc040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fc004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fc006:	3301      	adds	r3, #1
 23fc008:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fc00a:	e011      	b.n	23fc030 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fc00c:	a808      	add	r0, sp, #32
 23fc00e:	f7ff ffab 	bl	23fbf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fc012:	2800      	cmp	r0, #0
 23fc014:	d1d6      	bne.n	23fbfc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fc016:	a808      	add	r0, sp, #32
 23fc018:	f7ff fd66 	bl	23fbae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fc01c:	4620      	mov	r0, r4
 23fc01e:	b015      	add	sp, #84	; 0x54
 23fc020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc024:	3101      	adds	r1, #1
 23fc026:	a808      	add	r0, sp, #32
 23fc028:	f7ff ff9e 	bl	23fbf68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fc02c:	2800      	cmp	r0, #0
 23fc02e:	d1dd      	bne.n	23fbfec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fc030:	a80f      	add	r0, sp, #60	; 0x3c
 23fc032:	f002 ff37 	bl	23feea4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fc036:	a80b      	add	r0, sp, #44	; 0x2c
 23fc038:	f002 ff34 	bl	23feea4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fc03c:	3514      	adds	r5, #20
 23fc03e:	e7c6      	b.n	23fbfce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fc040:	4630      	mov	r0, r6
 23fc042:	a90f      	add	r1, sp, #60	; 0x3c
 23fc044:	f002 ffaa 	bl	23fef9c <_ZN6StringC1EOS_>
 23fc048:	e7dc      	b.n	23fc004 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fc04a:	2600      	movs	r6, #0
 23fc04c:	f04f 0914 	mov.w	r9, #20
 23fc050:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fc054:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fc056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fc05a:	429e      	cmp	r6, r3
 23fc05c:	da7c      	bge.n	23fc158 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fc05e:	0133      	lsls	r3, r6, #4
 23fc060:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fc062:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fc064:	b90b      	cbnz	r3, 23fc06a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fc066:	3601      	adds	r6, #1
 23fc068:	e7f5      	b.n	23fc056 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fc06a:	2300      	movs	r3, #0
 23fc06c:	9307      	str	r3, [sp, #28]
 23fc06e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fc072:	ad0b      	add	r5, sp, #44	; 0x2c
 23fc074:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fc076:	a907      	add	r1, sp, #28
 23fc078:	a806      	add	r0, sp, #24
 23fc07a:	f7ff fae6 	bl	23fb64a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc07e:	4682      	mov	sl, r0
 23fc080:	2800      	cmp	r0, #0
 23fc082:	d0f0      	beq.n	23fc066 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fc084:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc088:	4601      	mov	r1, r0
            bool found = false;
 23fc08a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc08e:	4628      	mov	r0, r5
 23fc090:	9a07      	ldr	r2, [sp, #28]
 23fc092:	f10d 0317 	add.w	r3, sp, #23
 23fc096:	f7ff fb6d 	bl	23fb774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fc09a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc09e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fc0a0:	2f00      	cmp	r7, #0
 23fc0a2:	d14a      	bne.n	23fc13a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fc0a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fc0a8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fc0ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fc0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fc0b4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fc0b8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fc0bc:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc0be:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fc0c2:	4293      	cmp	r3, r2
 23fc0c4:	db17      	blt.n	23fc0f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fc0c6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fc0ca:	f1ba 0f00 	cmp.w	sl, #0
 23fc0ce:	dd30      	ble.n	23fc132 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fc0d0:	fb09 f00a 	mul.w	r0, r9, sl
 23fc0d4:	f7fe fd84 	bl	23fabe0 <malloc>
            if (!d) {
 23fc0d8:	4683      	mov	fp, r0
 23fc0da:	b360      	cbz	r0, 23fc136 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fc0dc:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc0e0:	fb09 1202 	mla	r2, r9, r2, r1
 23fc0e4:	f7ff feea 	bl	23fbebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fc0e8:	6828      	ldr	r0, [r5, #0]
 23fc0ea:	f7fe fd87 	bl	23fabfc <free>
        data_ = d;
 23fc0ee:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fc0f2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fc0f6:	682b      	ldr	r3, [r5, #0]
 23fc0f8:	9a01      	ldr	r2, [sp, #4]
 23fc0fa:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fc0fe:	686a      	ldr	r2, [r5, #4]
 23fc100:	4651      	mov	r1, sl
 23fc102:	fb09 3202 	mla	r2, r9, r2, r3
 23fc106:	f10a 0014 	add.w	r0, sl, #20
 23fc10a:	f7ff fed7 	bl	23fbebc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fc10e:	f1ba 0f00 	cmp.w	sl, #0
 23fc112:	d003      	beq.n	23fc11c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fc114:	4650      	mov	r0, sl
 23fc116:	a90f      	add	r1, sp, #60	; 0x3c
 23fc118:	f7ff fb18 	bl	23fb74c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fc11c:	686b      	ldr	r3, [r5, #4]
 23fc11e:	3301      	adds	r3, #1
 23fc120:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fc122:	a811      	add	r0, sp, #68	; 0x44
 23fc124:	f7ff fccc 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fc128:	b13f      	cbz	r7, 23fc13a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fc12a:	a80b      	add	r0, sp, #44	; 0x2c
 23fc12c:	f7ff fcc8 	bl	23fbac0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc130:	e771      	b.n	23fc016 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fc132:	46bb      	mov	fp, r7
 23fc134:	e7d8      	b.n	23fc0e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fc136:	2701      	movs	r7, #1
 23fc138:	e7f3      	b.n	23fc122 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fc13a:	9b01      	ldr	r3, [sp, #4]
 23fc13c:	682d      	ldr	r5, [r5, #0]
 23fc13e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fc142:	9b06      	ldr	r3, [sp, #24]
 23fc144:	781b      	ldrb	r3, [r3, #0]
 23fc146:	b92b      	cbnz	r3, 23fc154 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fc148:	f8d8 3000 	ldr.w	r3, [r8]
 23fc14c:	9a02      	ldr	r2, [sp, #8]
 23fc14e:	4413      	add	r3, r2
 23fc150:	7c1b      	ldrb	r3, [r3, #16]
 23fc152:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fc154:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fc156:	e78e      	b.n	23fc076 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc158:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc15a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc15c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc15e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc160:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc162:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fc164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fc166:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc168:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc16a:	60a2      	str	r2, [r4, #8]
 23fc16c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fc16e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc170:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc172:	60e2      	str	r2, [r4, #12]
 23fc174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fc176:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc178:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fc17a:	6122      	str	r2, [r4, #16]
 23fc17c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fc17e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fc180:	9b03      	ldr	r3, [sp, #12]
 23fc182:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fc184:	6162      	str	r2, [r4, #20]
 23fc186:	7623      	strb	r3, [r4, #24]
 23fc188:	e7cf      	b.n	23fc12a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fc18c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fc18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc18e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fc190:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fc192:	4617      	mov	r7, r2
 23fc194:	b087      	sub	sp, #28
 23fc196:	460d      	mov	r5, r1
        stream_(&stream) {
 23fc198:	4668      	mov	r0, sp
 23fc19a:	4619      	mov	r1, r3
 23fc19c:	f7fe f8eb 	bl	23fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc1a0:	4b0b      	ldr	r3, [pc, #44]	; (23fc1d0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fc1a2:	4669      	mov	r1, sp
 23fc1a4:	f846 3b04 	str.w	r3, [r6], #4
 23fc1a8:	a803      	add	r0, sp, #12
 23fc1aa:	f7fe f8e4 	bl	23fa376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc1ae:	4639      	mov	r1, r7
 23fc1b0:	aa03      	add	r2, sp, #12
 23fc1b2:	4630      	mov	r0, r6
 23fc1b4:	f7ff fef0 	bl	23fbf98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc1b8:	a803      	add	r0, sp, #12
 23fc1ba:	f7fe f89b 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc1be:	4668      	mov	r0, sp
 23fc1c0:	f7fe f898 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fc1c4:	4620      	mov	r0, r4
        stream_(&stream) {
 23fc1c6:	4b03      	ldr	r3, [pc, #12]	; (23fc1d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fc1c8:	6225      	str	r5, [r4, #32]
 23fc1ca:	6023      	str	r3, [r4, #0]
}
 23fc1cc:	b007      	add	sp, #28
 23fc1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc1d0:	023ff888 	.word	0x023ff888
 23fc1d4:	023ffa30 	.word	0x023ffa30

023fc1d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fc1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc1da:	460f      	mov	r7, r1
 23fc1dc:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fc1de:	4638      	mov	r0, r7
 23fc1e0:	491c      	ldr	r1, [pc, #112]	; (23fc254 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fc1e2:	4616      	mov	r6, r2
 23fc1e4:	461d      	mov	r5, r3
 23fc1e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fc1e8:	f7fd ff42 	bl	23fa070 <strcmp>
 23fc1ec:	b9c0      	cbnz	r0, 23fc220 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fc1ee:	b1a4      	cbz	r4, 23fc21a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fc1f0:	4629      	mov	r1, r5
 23fc1f2:	a801      	add	r0, sp, #4
 23fc1f4:	f7ff fcbe 	bl	23fbb74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fc1f8:	2024      	movs	r0, #36	; 0x24
 23fc1fa:	4917      	ldr	r1, [pc, #92]	; (23fc258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fc1fc:	f003 f80a 	bl	23ff214 <_ZnwjRKSt9nothrow_t>
 23fc200:	4605      	mov	r5, r0
 23fc202:	b130      	cbz	r0, 23fc212 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fc204:	ab01      	add	r3, sp, #4
 23fc206:	4632      	mov	r2, r6
 23fc208:	4621      	mov	r1, r4
 23fc20a:	f7ff ffbf 	bl	23fc18c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc20e:	4b13      	ldr	r3, [pc, #76]	; (23fc25c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fc210:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fc212:	a801      	add	r0, sp, #4
 23fc214:	f7fe f86e 	bl	23fa2f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc218:	462c      	mov	r4, r5
}
 23fc21a:	4620      	mov	r0, r4
 23fc21c:	b005      	add	sp, #20
 23fc21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fc220:	4638      	mov	r0, r7
 23fc222:	490f      	ldr	r1, [pc, #60]	; (23fc260 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fc224:	f7fd ff24 	bl	23fa070 <strcmp>
 23fc228:	b990      	cbnz	r0, 23fc250 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fc22a:	2c00      	cmp	r4, #0
 23fc22c:	d0f5      	beq.n	23fc21a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fc22e:	4629      	mov	r1, r5
 23fc230:	a801      	add	r0, sp, #4
 23fc232:	f7ff fc9f 	bl	23fbb74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fc236:	2024      	movs	r0, #36	; 0x24
 23fc238:	4907      	ldr	r1, [pc, #28]	; (23fc258 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fc23a:	f002 ffeb 	bl	23ff214 <_ZnwjRKSt9nothrow_t>
 23fc23e:	4605      	mov	r5, r0
 23fc240:	2800      	cmp	r0, #0
 23fc242:	d0e6      	beq.n	23fc212 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fc244:	4632      	mov	r2, r6
 23fc246:	4621      	mov	r1, r4
 23fc248:	ab01      	add	r3, sp, #4
 23fc24a:	f7ff ff9f 	bl	23fc18c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc24e:	e7e0      	b.n	23fc212 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fc250:	2400      	movs	r4, #0
 23fc252:	e7e2      	b.n	23fc21a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fc254:	023ff9b0 	.word	0x023ff9b0
 23fc258:	023ffd48 	.word	0x023ffd48
 23fc25c:	023ffa48 	.word	0x023ffa48
 23fc260:	023ff9b4 	.word	0x023ff9b4

023fc264 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fc264:	4b01      	ldr	r3, [pc, #4]	; (23fc26c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fc266:	4a02      	ldr	r2, [pc, #8]	; (23fc270 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fc268:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fc26a:	4770      	bx	lr
 23fc26c:	1007aeb8 	.word	0x1007aeb8
 23fc270:	023ff9c5 	.word	0x023ff9c5

023fc274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fc274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc278:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fc27a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fc27e:	4604      	mov	r4, r0
 23fc280:	460e      	mov	r6, r1
 23fc282:	4617      	mov	r7, r2
 23fc284:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fc286:	f7ff f861 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fc28a:	4581      	cmp	r9, r0
 23fc28c:	d04d      	beq.n	23fc32a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fc28e:	792b      	ldrb	r3, [r5, #4]
 23fc290:	0719      	lsls	r1, r3, #28
 23fc292:	d504      	bpl.n	23fc29e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fc294:	4620      	mov	r0, r4
 23fc296:	696a      	ldr	r2, [r5, #20]
 23fc298:	4954      	ldr	r1, [pc, #336]	; (23fc3ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fc29a:	f7ff fad0 	bl	23fb83e <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fc29e:	f1b8 0f00 	cmp.w	r8, #0
 23fc2a2:	d00d      	beq.n	23fc2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fc2a4:	215b      	movs	r1, #91	; 0x5b
 23fc2a6:	4620      	mov	r0, r4
 23fc2a8:	f7ff fa44 	bl	23fb734 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fc2ac:	4641      	mov	r1, r8
 23fc2ae:	4620      	mov	r0, r4
 23fc2b0:	f7ff fa31 	bl	23fb716 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fc2b4:	6823      	ldr	r3, [r4, #0]
 23fc2b6:	2202      	movs	r2, #2
 23fc2b8:	4620      	mov	r0, r4
 23fc2ba:	68db      	ldr	r3, [r3, #12]
 23fc2bc:	494c      	ldr	r1, [pc, #304]	; (23fc3f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fc2be:	4798      	blx	r3
    if (attr.has_file) {
 23fc2c0:	792b      	ldrb	r3, [r5, #4]
 23fc2c2:	07da      	lsls	r2, r3, #31
 23fc2c4:	d524      	bpl.n	23fc310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fc2c6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fc2ca:	212f      	movs	r1, #47	; 0x2f
 23fc2cc:	4640      	mov	r0, r8
 23fc2ce:	f003 f976 	bl	23ff5be <strrchr>
    if (s1) {
 23fc2d2:	b108      	cbz	r0, 23fc2d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fc2d4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fc2d8:	4641      	mov	r1, r8
 23fc2da:	4620      	mov	r0, r4
 23fc2dc:	f7ff fa1b 	bl	23fb716 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fc2e0:	792b      	ldrb	r3, [r5, #4]
 23fc2e2:	079b      	lsls	r3, r3, #30
 23fc2e4:	d508      	bpl.n	23fc2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fc2e6:	213a      	movs	r1, #58	; 0x3a
 23fc2e8:	4620      	mov	r0, r4
 23fc2ea:	f7ff fa23 	bl	23fb734 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fc2ee:	4620      	mov	r0, r4
 23fc2f0:	68ea      	ldr	r2, [r5, #12]
 23fc2f2:	4940      	ldr	r1, [pc, #256]	; (23fc3f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fc2f4:	f7ff faa3 	bl	23fb83e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fc2f8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fc2fa:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fc2fc:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fc300:	4620      	mov	r0, r4
            write(", ", 2);
 23fc302:	f04f 0202 	mov.w	r2, #2
 23fc306:	68db      	ldr	r3, [r3, #12]
 23fc308:	bf14      	ite	ne
 23fc30a:	493b      	ldrne	r1, [pc, #236]	; (23fc3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fc30c:	493b      	ldreq	r1, [pc, #236]	; (23fc3fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fc30e:	4798      	blx	r3
    if (attr.has_function) {
 23fc310:	792b      	ldrb	r3, [r5, #4]
 23fc312:	0758      	lsls	r0, r3, #29
 23fc314:	d51d      	bpl.n	23fc352 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fc316:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fc318:	460b      	mov	r3, r1
 23fc31a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fc31c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fc320:	b160      	cbz	r0, 23fc33c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fc322:	2820      	cmp	r0, #32
 23fc324:	d108      	bne.n	23fc338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fc326:	4619      	mov	r1, r3
 23fc328:	e7f7      	b.n	23fc31a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fc32a:	4835      	ldr	r0, [pc, #212]	; (23fc400 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fc32c:	f7fe fcff 	bl	23fad2e <_ZN5spark12NetworkClass9listeningEv>
 23fc330:	2800      	cmp	r0, #0
 23fc332:	d0ac      	beq.n	23fc28e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fc334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fc338:	2828      	cmp	r0, #40	; 0x28
 23fc33a:	d1ee      	bne.n	23fc31a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fc33c:	6823      	ldr	r3, [r4, #0]
 23fc33e:	1a52      	subs	r2, r2, r1
 23fc340:	4620      	mov	r0, r4
 23fc342:	68db      	ldr	r3, [r3, #12]
 23fc344:	4798      	blx	r3
        write("(): ", 4);
 23fc346:	6823      	ldr	r3, [r4, #0]
 23fc348:	2204      	movs	r2, #4
 23fc34a:	4620      	mov	r0, r4
 23fc34c:	68db      	ldr	r3, [r3, #12]
 23fc34e:	492d      	ldr	r1, [pc, #180]	; (23fc404 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fc350:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fc352:	2100      	movs	r1, #0
 23fc354:	4638      	mov	r0, r7
 23fc356:	f7fe fb47 	bl	23fa9e8 <log_level_name>
 23fc35a:	4601      	mov	r1, r0
    write(s);
 23fc35c:	4620      	mov	r0, r4
 23fc35e:	f7ff f9da 	bl	23fb716 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fc362:	6823      	ldr	r3, [r4, #0]
 23fc364:	2202      	movs	r2, #2
 23fc366:	4620      	mov	r0, r4
 23fc368:	68db      	ldr	r3, [r3, #12]
 23fc36a:	4924      	ldr	r1, [pc, #144]	; (23fc3fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fc36c:	4798      	blx	r3
    if (msg) {
 23fc36e:	b11e      	cbz	r6, 23fc378 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fc370:	4631      	mov	r1, r6
 23fc372:	4620      	mov	r0, r4
 23fc374:	f7ff f9cf 	bl	23fb716 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fc378:	792b      	ldrb	r3, [r5, #4]
 23fc37a:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fc37e:	d02c      	beq.n	23fc3da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fc380:	6823      	ldr	r3, [r4, #0]
 23fc382:	4921      	ldr	r1, [pc, #132]	; (23fc408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fc384:	68db      	ldr	r3, [r3, #12]
 23fc386:	2202      	movs	r2, #2
 23fc388:	4620      	mov	r0, r4
 23fc38a:	4798      	blx	r3
        if (attr.has_code) {
 23fc38c:	792b      	ldrb	r3, [r5, #4]
 23fc38e:	06d9      	lsls	r1, r3, #27
 23fc390:	d50a      	bpl.n	23fc3a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fc392:	6823      	ldr	r3, [r4, #0]
 23fc394:	2207      	movs	r2, #7
 23fc396:	4620      	mov	r0, r4
 23fc398:	491c      	ldr	r1, [pc, #112]	; (23fc40c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fc39a:	68db      	ldr	r3, [r3, #12]
 23fc39c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fc39e:	4620      	mov	r0, r4
 23fc3a0:	69aa      	ldr	r2, [r5, #24]
 23fc3a2:	491b      	ldr	r1, [pc, #108]	; (23fc410 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fc3a4:	f7ff fa4b 	bl	23fb83e <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fc3a8:	792b      	ldrb	r3, [r5, #4]
 23fc3aa:	069a      	lsls	r2, r3, #26
 23fc3ac:	d511      	bpl.n	23fc3d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fc3ae:	06db      	lsls	r3, r3, #27
 23fc3b0:	d505      	bpl.n	23fc3be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fc3b2:	6823      	ldr	r3, [r4, #0]
 23fc3b4:	2202      	movs	r2, #2
 23fc3b6:	4620      	mov	r0, r4
 23fc3b8:	68db      	ldr	r3, [r3, #12]
 23fc3ba:	490f      	ldr	r1, [pc, #60]	; (23fc3f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fc3bc:	4798      	blx	r3
            write("details = ", 10);
 23fc3be:	6823      	ldr	r3, [r4, #0]
 23fc3c0:	4620      	mov	r0, r4
 23fc3c2:	4914      	ldr	r1, [pc, #80]	; (23fc414 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fc3c4:	220a      	movs	r2, #10
 23fc3c6:	68db      	ldr	r3, [r3, #12]
 23fc3c8:	4798      	blx	r3
            write(attr.details);
 23fc3ca:	4620      	mov	r0, r4
 23fc3cc:	69e9      	ldr	r1, [r5, #28]
 23fc3ce:	f7ff f9a2 	bl	23fb716 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fc3d2:	215d      	movs	r1, #93	; 0x5d
 23fc3d4:	4620      	mov	r0, r4
 23fc3d6:	f7ff f9ad 	bl	23fb734 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fc3da:	6823      	ldr	r3, [r4, #0]
 23fc3dc:	4620      	mov	r0, r4
}
 23fc3de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fc3e2:	2202      	movs	r2, #2
 23fc3e4:	68db      	ldr	r3, [r3, #12]
 23fc3e6:	490c      	ldr	r1, [pc, #48]	; (23fc418 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fc3e8:	4718      	bx	r3
 23fc3ea:	bf00      	nop
 23fc3ec:	023ff9c9 	.word	0x023ff9c9
 23fc3f0:	023ff9d0 	.word	0x023ff9d0
 23fc3f4:	023ff80d 	.word	0x023ff80d
 23fc3f8:	023ff9d3 	.word	0x023ff9d3
 23fc3fc:	023ff9d8 	.word	0x023ff9d8
 23fc400:	1007ae68 	.word	0x1007ae68
 23fc404:	023ff9d6 	.word	0x023ff9d6
 23fc408:	023ff9db 	.word	0x023ff9db
 23fc40c:	023ff9de 	.word	0x023ff9de
 23fc410:	023ff9e6 	.word	0x023ff9e6
 23fc414:	023ff9e9 	.word	0x023ff9e9
 23fc418:	023ff9f4 	.word	0x023ff9f4

023fc41c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fc41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc420:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fc422:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fc424:	460d      	mov	r5, r1
 23fc426:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fc428:	f7fe ff90 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fc42c:	4287      	cmp	r7, r0
 23fc42e:	d007      	beq.n	23fc440 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fc430:	6a20      	ldr	r0, [r4, #32]
 23fc432:	4632      	mov	r2, r6
 23fc434:	6803      	ldr	r3, [r0, #0]
 23fc436:	4629      	mov	r1, r5
}
 23fc438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fc43c:	68db      	ldr	r3, [r3, #12]
 23fc43e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fc440:	4803      	ldr	r0, [pc, #12]	; (23fc450 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fc442:	f7fe fc74 	bl	23fad2e <_ZN5spark12NetworkClass9listeningEv>
 23fc446:	2800      	cmp	r0, #0
 23fc448:	d0f2      	beq.n	23fc430 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fc44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fc44e:	bf00      	nop
 23fc450:	1007ae68 	.word	0x1007ae68

023fc454 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fc454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc458:	b085      	sub	sp, #20
    return stream_;
 23fc45a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fc45e:	4605      	mov	r5, r0
 23fc460:	460f      	mov	r7, r1
 23fc462:	4690      	mov	r8, r2
 23fc464:	461e      	mov	r6, r3
 23fc466:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fc468:	f7fe ff70 	bl	23fb34c <_Z16_fetch_usbserialv>
 23fc46c:	4581      	cmp	r9, r0
 23fc46e:	d105      	bne.n	23fc47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fc470:	4849      	ldr	r0, [pc, #292]	; (23fc598 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fc472:	f7fe fc5c 	bl	23fad2e <_ZN5spark12NetworkClass9listeningEv>
 23fc476:	2800      	cmp	r0, #0
 23fc478:	f040 808a 	bne.w	23fc590 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fc47c:	f04f 0900 	mov.w	r9, #0
 23fc480:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fc482:	4a46      	ldr	r2, [pc, #280]	; (23fc59c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fc484:	a801      	add	r0, sp, #4
 23fc486:	9201      	str	r2, [sp, #4]
 23fc488:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fc48a:	f88d 9008 	strb.w	r9, [sp, #8]
 23fc48e:	f7fe fe44 	bl	23fb11a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fc492:	4649      	mov	r1, r9
 23fc494:	4640      	mov	r0, r8
 23fc496:	f7fe faa7 	bl	23fa9e8 <log_level_name>
 23fc49a:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fc49c:	4940      	ldr	r1, [pc, #256]	; (23fc5a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fc49e:	2201      	movs	r2, #1
 23fc4a0:	a801      	add	r0, sp, #4
 23fc4a2:	f7fe fec9 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc4a6:	4641      	mov	r1, r8
 23fc4a8:	f7ff f927 	bl	23fb6fa <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fc4ac:	b13f      	cbz	r7, 23fc4be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fc4ae:	493d      	ldr	r1, [pc, #244]	; (23fc5a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fc4b0:	2201      	movs	r2, #1
 23fc4b2:	a801      	add	r0, sp, #4
 23fc4b4:	f7fe fec0 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc4b8:	4639      	mov	r1, r7
 23fc4ba:	f7ff f91e 	bl	23fb6fa <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fc4be:	b13e      	cbz	r6, 23fc4d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fc4c0:	4939      	ldr	r1, [pc, #228]	; (23fc5a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fc4c2:	2201      	movs	r2, #1
 23fc4c4:	a801      	add	r0, sp, #4
 23fc4c6:	f7fe feb7 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc4ca:	4631      	mov	r1, r6
 23fc4cc:	f7ff f915 	bl	23fb6fa <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fc4d0:	7923      	ldrb	r3, [r4, #4]
 23fc4d2:	07df      	lsls	r7, r3, #31
 23fc4d4:	d50e      	bpl.n	23fc4f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fc4d6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fc4d8:	212f      	movs	r1, #47	; 0x2f
 23fc4da:	4630      	mov	r0, r6
 23fc4dc:	f003 f86f 	bl	23ff5be <strrchr>
    if (s1) {
 23fc4e0:	b100      	cbz	r0, 23fc4e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fc4e2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fc4e4:	4931      	ldr	r1, [pc, #196]	; (23fc5ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fc4e6:	2201      	movs	r2, #1
 23fc4e8:	a801      	add	r0, sp, #4
 23fc4ea:	f7fe fea5 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc4ee:	4631      	mov	r1, r6
 23fc4f0:	f7ff f903 	bl	23fb6fa <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fc4f4:	7923      	ldrb	r3, [r4, #4]
 23fc4f6:	079e      	lsls	r6, r3, #30
 23fc4f8:	d507      	bpl.n	23fc50a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fc4fa:	492d      	ldr	r1, [pc, #180]	; (23fc5b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fc4fc:	2202      	movs	r2, #2
 23fc4fe:	a801      	add	r0, sp, #4
 23fc500:	f7fe fe9a 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc504:	68e1      	ldr	r1, [r4, #12]
 23fc506:	f7fe fe15 	bl	23fb134 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fc50a:	7923      	ldrb	r3, [r4, #4]
 23fc50c:	0758      	lsls	r0, r3, #29
 23fc50e:	d514      	bpl.n	23fc53a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fc510:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fc512:	4633      	mov	r3, r6
 23fc514:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fc516:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc51a:	b12a      	cbz	r2, 23fc528 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fc51c:	2a20      	cmp	r2, #32
 23fc51e:	d101      	bne.n	23fc524 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fc520:	461e      	mov	r6, r3
 23fc522:	e7f7      	b.n	23fc514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fc524:	2a28      	cmp	r2, #40	; 0x28
 23fc526:	d1f5      	bne.n	23fc514 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fc528:	2202      	movs	r2, #2
 23fc52a:	4922      	ldr	r1, [pc, #136]	; (23fc5b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fc52c:	a801      	add	r0, sp, #4
 23fc52e:	f7fe fe83 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc532:	4631      	mov	r1, r6
 23fc534:	1bba      	subs	r2, r7, r6
 23fc536:	f7fe fe8f 	bl	23fb258 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fc53a:	7923      	ldrb	r3, [r4, #4]
 23fc53c:	0719      	lsls	r1, r3, #28
 23fc53e:	d507      	bpl.n	23fc550 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fc540:	491d      	ldr	r1, [pc, #116]	; (23fc5b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fc542:	2201      	movs	r2, #1
 23fc544:	a801      	add	r0, sp, #4
 23fc546:	f7fe fe77 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc54a:	6961      	ldr	r1, [r4, #20]
 23fc54c:	f7fe fe04 	bl	23fb158 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fc550:	7923      	ldrb	r3, [r4, #4]
 23fc552:	06da      	lsls	r2, r3, #27
 23fc554:	d508      	bpl.n	23fc568 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fc556:	2204      	movs	r2, #4
 23fc558:	4918      	ldr	r1, [pc, #96]	; (23fc5bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fc55a:	eb0d 0002 	add.w	r0, sp, r2
 23fc55e:	f7fe fe6b 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc562:	69a1      	ldr	r1, [r4, #24]
 23fc564:	f7fe fde6 	bl	23fb134 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fc568:	7923      	ldrb	r3, [r4, #4]
 23fc56a:	069b      	lsls	r3, r3, #26
 23fc56c:	d507      	bpl.n	23fc57e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fc56e:	4914      	ldr	r1, [pc, #80]	; (23fc5c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fc570:	2206      	movs	r2, #6
 23fc572:	a801      	add	r0, sp, #4
 23fc574:	f7fe fe60 	bl	23fb238 <_ZN5spark10JSONWriter4nameEPKcj>
 23fc578:	69e1      	ldr	r1, [r4, #28]
 23fc57a:	f7ff f8be 	bl	23fb6fa <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fc57e:	a801      	add	r0, sp, #4
 23fc580:	f7fe fdb5 	bl	23fb0ee <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fc584:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fc586:	2202      	movs	r2, #2
 23fc588:	6803      	ldr	r3, [r0, #0]
 23fc58a:	490e      	ldr	r1, [pc, #56]	; (23fc5c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fc58c:	68db      	ldr	r3, [r3, #12]
 23fc58e:	4798      	blx	r3
}
 23fc590:	b005      	add	sp, #20
 23fc592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fc596:	bf00      	nop
 23fc598:	1007ae68 	.word	0x1007ae68
 23fc59c:	023ffa18 	.word	0x023ffa18
 23fc5a0:	023ff9a6 	.word	0x023ff9a6
 23fc5a4:	023ff9f7 	.word	0x023ff9f7
 23fc5a8:	023ffecf 	.word	0x023ffecf
 23fc5ac:	023ff858 	.word	0x023ff858
 23fc5b0:	023ff9f9 	.word	0x023ff9f9
 23fc5b4:	023ff9fc 	.word	0x023ff9fc
 23fc5b8:	023ff9ff 	.word	0x023ff9ff
 23fc5bc:	023ffa01 	.word	0x023ffa01
 23fc5c0:	023ffa06 	.word	0x023ffa06
 23fc5c4:	023ff9f4 	.word	0x023ff9f4

023fc5c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fc5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc5ca:	4606      	mov	r6, r0
 23fc5cc:	460d      	mov	r5, r1
  size_t n = 0;
 23fc5ce:	2400      	movs	r4, #0
 23fc5d0:	188f      	adds	r7, r1, r2
  while (size--) {
 23fc5d2:	42bd      	cmp	r5, r7
 23fc5d4:	d00c      	beq.n	23fc5f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fc5d6:	6833      	ldr	r3, [r6, #0]
 23fc5d8:	4630      	mov	r0, r6
 23fc5da:	689b      	ldr	r3, [r3, #8]
 23fc5dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fc5e0:	4798      	blx	r3
     if (chunk>=0)
 23fc5e2:	1e03      	subs	r3, r0, #0
 23fc5e4:	db01      	blt.n	23fc5ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fc5e6:	441c      	add	r4, r3
  while (size--) {
 23fc5e8:	e7f3      	b.n	23fc5d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fc5ea:	2c00      	cmp	r4, #0
 23fc5ec:	bf08      	it	eq
 23fc5ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fc5f0:	4620      	mov	r0, r4
 23fc5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc5f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fc5f4:	b513      	push	{r0, r1, r4, lr}
 23fc5f6:	4604      	mov	r4, r0
    }
 23fc5f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fc5fa:	b159      	cbz	r1, 23fc614 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fc5fc:	9101      	str	r1, [sp, #4]
 23fc5fe:	f7fd fd41 	bl	23fa084 <strlen>
 23fc602:	4602      	mov	r2, r0
 23fc604:	4620      	mov	r0, r4
 23fc606:	6823      	ldr	r3, [r4, #0]
 23fc608:	9901      	ldr	r1, [sp, #4]
 23fc60a:	68db      	ldr	r3, [r3, #12]
    }
 23fc60c:	b002      	add	sp, #8
 23fc60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fc612:	4718      	bx	r3
    }
 23fc614:	b002      	add	sp, #8
 23fc616:	bd10      	pop	{r4, pc}

023fc618 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fc618:	6803      	ldr	r3, [r0, #0]
 23fc61a:	689b      	ldr	r3, [r3, #8]
 23fc61c:	4718      	bx	r3

023fc61e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fc61e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fc620:	2a01      	cmp	r2, #1
 23fc622:	bf98      	it	ls
 23fc624:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fc626:	b530      	push	{r4, r5, lr}
 23fc628:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fc62a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fc62e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fc630:	460d      	mov	r5, r1
 23fc632:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fc636:	fb01 5312 	mls	r3, r1, r2, r5
 23fc63a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc63e:	2b09      	cmp	r3, #9
 23fc640:	bf94      	ite	ls
 23fc642:	3330      	addls	r3, #48	; 0x30
 23fc644:	3337      	addhi	r3, #55	; 0x37
 23fc646:	b2db      	uxtb	r3, r3
  } while(n);
 23fc648:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc64a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fc64e:	d9ef      	bls.n	23fc630 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fc650:	4621      	mov	r1, r4
 23fc652:	f7ff ffcf 	bl	23fc5f4 <_ZN5Print5writeEPKc>
}
 23fc656:	b00b      	add	sp, #44	; 0x2c
 23fc658:	bd30      	pop	{r4, r5, pc}

023fc65a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fc65a:	4770      	bx	lr

023fc65c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23fc65c:	4770      	bx	lr

023fc65e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23fc65e:	4770      	bx	lr

023fc660 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fc660:	4770      	bx	lr
	...

023fc664 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fc664:	4b06      	ldr	r3, [pc, #24]	; (23fc680 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fc666:	b510      	push	{r4, lr}
	    ||
 23fc668:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fc66a:	f100 040c 	add.w	r4, r0, #12
 23fc66e:	d005      	beq.n	23fc67c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fc670:	4608      	mov	r0, r1
 23fc672:	f002 fdd7 	bl	23ff224 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fc676:	2800      	cmp	r0, #0
 23fc678:	bf08      	it	eq
 23fc67a:	2400      	moveq	r4, #0
      }
 23fc67c:	4620      	mov	r0, r4
 23fc67e:	bd10      	pop	{r4, pc}
 23fc680:	023ff928 	.word	0x023ff928

023fc684 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fc684:	4b06      	ldr	r3, [pc, #24]	; (23fc6a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fc686:	b510      	push	{r4, lr}
	    ||
 23fc688:	4299      	cmp	r1, r3
 23fc68a:	f100 040c 	add.w	r4, r0, #12
 23fc68e:	d005      	beq.n	23fc69c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fc690:	4608      	mov	r0, r1
 23fc692:	f002 fdc7 	bl	23ff224 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fc696:	2800      	cmp	r0, #0
 23fc698:	bf08      	it	eq
 23fc69a:	2400      	moveq	r4, #0
      }
 23fc69c:	4620      	mov	r0, r4
 23fc69e:	bd10      	pop	{r4, pc}
 23fc6a0:	023ff928 	.word	0x023ff928

023fc6a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fc6a4:	4b06      	ldr	r3, [pc, #24]	; (23fc6c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fc6a6:	b510      	push	{r4, lr}
	    ||
 23fc6a8:	4299      	cmp	r1, r3
 23fc6aa:	f100 040c 	add.w	r4, r0, #12
 23fc6ae:	d005      	beq.n	23fc6bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fc6b0:	4608      	mov	r0, r1
 23fc6b2:	f002 fdb7 	bl	23ff224 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fc6b6:	2800      	cmp	r0, #0
 23fc6b8:	bf08      	it	eq
 23fc6ba:	2400      	moveq	r4, #0
      }
 23fc6bc:	4620      	mov	r0, r4
 23fc6be:	bd10      	pop	{r4, pc}
 23fc6c0:	023ff928 	.word	0x023ff928

023fc6c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fc6c4:	b510      	push	{r4, lr}
 23fc6c6:	4604      	mov	r4, r0
 23fc6c8:	2168      	movs	r1, #104	; 0x68
 23fc6ca:	f7fd fd04 	bl	23fa0d6 <_ZdlPvj>
 23fc6ce:	4620      	mov	r0, r4
 23fc6d0:	bd10      	pop	{r4, pc}

023fc6d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fc6d2:	b510      	push	{r4, lr}
 23fc6d4:	4604      	mov	r4, r0
 23fc6d6:	2128      	movs	r1, #40	; 0x28
 23fc6d8:	f7fd fcfd 	bl	23fa0d6 <_ZdlPvj>
 23fc6dc:	4620      	mov	r0, r4
 23fc6de:	bd10      	pop	{r4, pc}

023fc6e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fc6e0:	b510      	push	{r4, lr}
 23fc6e2:	4604      	mov	r4, r0
 23fc6e4:	2130      	movs	r1, #48	; 0x30
 23fc6e6:	f7fd fcf6 	bl	23fa0d6 <_ZdlPvj>
 23fc6ea:	4620      	mov	r0, r4
 23fc6ec:	bd10      	pop	{r4, pc}

023fc6ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fc6ee:	2168      	movs	r1, #104	; 0x68
 23fc6f0:	f7fd bcf1 	b.w	23fa0d6 <_ZdlPvj>

023fc6f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fc6f4:	2128      	movs	r1, #40	; 0x28
 23fc6f6:	f7fd bcee 	b.w	23fa0d6 <_ZdlPvj>

023fc6fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fc6fa:	2130      	movs	r1, #48	; 0x30
 23fc6fc:	f7fd bceb 	b.w	23fa0d6 <_ZdlPvj>

023fc700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fc700:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fc702:	2500      	movs	r5, #0
 23fc704:	1cec      	adds	r4, r5, #3
 23fc706:	428c      	cmp	r4, r1
 23fc708:	d80d      	bhi.n	23fc726 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fc70a:	1c6e      	adds	r6, r5, #1
 23fc70c:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fc70e:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fc710:	4297      	cmp	r7, r2
 23fc712:	d105      	bne.n	23fc720 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fc714:	4426      	add	r6, r4
 23fc716:	42b1      	cmp	r1, r6
 23fc718:	d305      	bcc.n	23fc726 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fc71a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fc71c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fc71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fc720:	3401      	adds	r4, #1
 23fc722:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fc724:	e7ee      	b.n	23fc704 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fc726:	2000      	movs	r0, #0
 23fc728:	e7f9      	b.n	23fc71e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fc72c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fc72c:	200a      	movs	r0, #10
 23fc72e:	4a02      	ldr	r2, [pc, #8]	; (23fc738 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fc730:	4902      	ldr	r1, [pc, #8]	; (23fc73c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fc732:	f7fe b92f 	b.w	23fa994 <panic_>
 23fc736:	bf00      	nop
 23fc738:	023fa925 	.word	0x023fa925
 23fc73c:	023ffa88 	.word	0x023ffa88

023fc740 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fc740:	b430      	push	{r4, r5}
 23fc742:	460d      	mov	r5, r1
 23fc744:	4611      	mov	r1, r2
 23fc746:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
 23fc748:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fc74a:	6809      	ldr	r1, [r1, #0]
 23fc74c:	e9d3 4300 	ldrd	r4, r3, [r3]
 23fc750:	6828      	ldr	r0, [r5, #0]
 23fc752:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fc754:	bc30      	pop	{r4, r5}
 23fc756:	4760      	bx	ip

023fc758 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
 23fc758:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fc75a:	b538      	push	{r3, r4, r5, lr}
 23fc75c:	4604      	mov	r4, r0
	switch (__op)
 23fc75e:	d102      	bne.n	23fc766 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fc760:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fc762:	6023      	str	r3, [r4, #0]
	}
 23fc764:	e003      	b.n	23fc76e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
 23fc766:	2a02      	cmp	r2, #2
 23fc768:	d003      	beq.n	23fc772 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
 23fc76a:	2a03      	cmp	r2, #3
 23fc76c:	d00d      	beq.n	23fc78a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
 23fc76e:	2000      	movs	r0, #0
 23fc770:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc772:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
 23fc774:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fc776:	f7fd fcaa 	bl	23fa0ce <_Znwj>
 23fc77a:	4603      	mov	r3, r0
 23fc77c:	2800      	cmp	r0, #0
 23fc77e:	d0f0      	beq.n	23fc762 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
 23fc780:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fc784:	e883 0003 	stmia.w	r3, {r0, r1}
 23fc788:	e7eb      	b.n	23fc762 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fc78a:	6800      	ldr	r0, [r0, #0]
 23fc78c:	2800      	cmp	r0, #0
 23fc78e:	d0ee      	beq.n	23fc76e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
 23fc790:	2108      	movs	r1, #8
 23fc792:	f7fd fca0 	bl	23fa0d6 <_ZdlPvj>
 23fc796:	e7ea      	b.n	23fc76e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

023fc798 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 23fc798:	b510      	push	{r4, lr}
      {
	if (_M_manager)
 23fc79a:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fc79c:	4604      	mov	r4, r0
	if (_M_manager)
 23fc79e:	b12b      	cbz	r3, 23fc7ac <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc7a0:	2203      	movs	r2, #3
 23fc7a2:	4601      	mov	r1, r0
 23fc7a4:	4798      	blx	r3
	    _M_manager = nullptr;
 23fc7a6:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fc7a8:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
 23fc7ac:	bd10      	pop	{r4, pc}

023fc7ae <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fc7ae:	b510      	push	{r4, lr}
	if (_M_manager)
 23fc7b0:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fc7b2:	4604      	mov	r4, r0
	if (_M_manager)
 23fc7b4:	b12b      	cbz	r3, 23fc7c2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc7b6:	2203      	movs	r2, #3
 23fc7b8:	4601      	mov	r1, r0
 23fc7ba:	4798      	blx	r3
	    _M_manager = nullptr;
 23fc7bc:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fc7be:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fc7c2:	bd10      	pop	{r4, pc}

023fc7c4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
 23fc7c4:	2300      	movs	r3, #0
 23fc7c6:	2220      	movs	r2, #32
    int discoverAllServices(BlePeerDevice& peer) {
 23fc7c8:	b510      	push	{r4, lr}
 23fc7ca:	4604      	mov	r4, r0
 23fc7cc:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
 23fc7ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fc7d2:	4a08      	ldr	r2, [pc, #32]	; (23fc7f4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
 23fc7d4:	2001      	movs	r0, #1
 23fc7d6:	9200      	str	r2, [sp, #0]
 23fc7d8:	4907      	ldr	r1, [pc, #28]	; (23fc7f8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
 23fc7da:	aa02      	add	r2, sp, #8
 23fc7dc:	f7fe f8e8 	bl	23fa9b0 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fc7e0:	2300      	movs	r3, #0
 23fc7e2:	4622      	mov	r2, r4
 23fc7e4:	6820      	ldr	r0, [r4, #0]
 23fc7e6:	4905      	ldr	r1, [pc, #20]	; (23fc7fc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
 23fc7e8:	8800      	ldrh	r0, [r0, #0]
    }
 23fc7ea:	b00a      	add	sp, #40	; 0x28
 23fc7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fc7f0:	f7fd bffe 	b.w	23fa7f0 <hal_ble_gatt_client_discover_all_services>
 23fc7f4:	023ffaaa 	.word	0x023ffaaa
 23fc7f8:	023ffa9f 	.word	0x023ffa9f
 23fc7fc:	023fe3c1 	.word	0x023fe3c1

023fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
 23fc800:	b510      	push	{r4, lr}
 23fc802:	3801      	subs	r0, #1
 23fc804:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
 23fc808:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 23fc80c:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
 23fc80e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fc812:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fc814:	bf88      	it	hi
 23fc816:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
 23fc81a:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
 23fc81e:	7803      	ldrb	r3, [r0, #0]
 23fc820:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
 23fc824:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fc828:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fc82a:	bf88      	it	hi
 23fc82c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
 23fc830:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
 23fc832:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
 23fc836:	d1e7      	bne.n	23fc808 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
 23fc838:	bd10      	pop	{r4, pc}

023fc83a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fc83a:	b510      	push	{r4, lr}
 23fc83c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fc83e:	3058      	adds	r0, #88	; 0x58
 23fc840:	f7fe fe20 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fc844:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fc848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc84c:	f002 bb2a 	b.w	23feea4 <_ZN6StringD1Ev>

023fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fc850:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fc852:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fc854:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fc856:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fc858:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fc85a:	d008      	beq.n	23fc86e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fc85c:	b111      	cbz	r1, 23fc864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fc85e:	684b      	ldr	r3, [r1, #4]
 23fc860:	3301      	adds	r3, #1
 23fc862:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fc864:	6828      	ldr	r0, [r5, #0]
 23fc866:	b108      	cbz	r0, 23fc86c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fc868:	f7fe fb69 	bl	23faf3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc86c:	602c      	str	r4, [r5, #0]
      }
 23fc86e:	bd38      	pop	{r3, r4, r5, pc}

023fc870 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23fc870:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc874:	b2da      	uxtb	r2, r3
 23fc876:	2a09      	cmp	r2, #9
 23fc878:	d801      	bhi.n	23fc87e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23fc87a:	4618      	mov	r0, r3
 23fc87c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23fc87e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fc882:	2b05      	cmp	r3, #5
 23fc884:	d801      	bhi.n	23fc88a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23fc886:	3857      	subs	r0, #87	; 0x57
 23fc888:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23fc88a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fc88e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23fc890:	bf94      	ite	ls
 23fc892:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23fc894:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23fc898:	4770      	bx	lr
	...

023fc89c <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fc89c:	2300      	movs	r3, #0
    WiringBleLock() :
 23fc89e:	b510      	push	{r4, lr}
            locked_(false) {
 23fc8a0:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23fc8a2:	4b04      	ldr	r3, [pc, #16]	; (23fc8b4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fc8a4:	4604      	mov	r4, r0
 23fc8a6:	6818      	ldr	r0, [r3, #0]
 23fc8a8:	f7fd ff40 	bl	23fa72c <os_mutex_recursive_lock>
        locked_ = true;
 23fc8ac:	2301      	movs	r3, #1
    }
 23fc8ae:	4620      	mov	r0, r4
        locked_ = true;
 23fc8b0:	7023      	strb	r3, [r4, #0]
    }
 23fc8b2:	bd10      	pop	{r4, pc}
 23fc8b4:	1007aee8 	.word	0x1007aee8

023fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fc8b8:	b510      	push	{r4, lr}
        if (locked_) {
 23fc8ba:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fc8bc:	4604      	mov	r4, r0
        if (locked_) {
 23fc8be:	b11b      	cbz	r3, 23fc8c8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fc8c0:	4b02      	ldr	r3, [pc, #8]	; (23fc8cc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fc8c2:	6818      	ldr	r0, [r3, #0]
 23fc8c4:	f7fd ff40 	bl	23fa748 <os_mutex_recursive_unlock>
    }
 23fc8c8:	4620      	mov	r0, r4
 23fc8ca:	bd10      	pop	{r4, pc}
 23fc8cc:	1007aee8 	.word	0x1007aee8

023fc8d0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fc8d0:	b082      	sub	sp, #8
    address_ = addr;
 23fc8d2:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fc8d4:	4603      	mov	r3, r0
    address_ = addr;
 23fc8d6:	6808      	ldr	r0, [r1, #0]
 23fc8d8:	6849      	ldr	r1, [r1, #4]
 23fc8da:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fc8dc:	466a      	mov	r2, sp
 23fc8de:	ca03      	ldmia	r2!, {r0, r1}
 23fc8e0:	6018      	str	r0, [r3, #0]
}
 23fc8e2:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fc8e4:	6059      	str	r1, [r3, #4]
}
 23fc8e6:	b002      	add	sp, #8
 23fc8e8:	4770      	bx	lr

023fc8ea <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fc8ea:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fc8ec:	7982      	ldrb	r2, [r0, #6]
 23fc8ee:	798b      	ldrb	r3, [r1, #6]
 23fc8f0:	429a      	cmp	r2, r3
 23fc8f2:	d106      	bne.n	23fc902 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fc8f4:	2206      	movs	r2, #6
 23fc8f6:	f002 fdb5 	bl	23ff464 <memcmp>
 23fc8fa:	fab0 f080 	clz	r0, r0
 23fc8fe:	0940      	lsrs	r0, r0, #5
}
 23fc900:	bd08      	pop	{r3, pc}
    return false;
 23fc902:	2000      	movs	r0, #0
 23fc904:	e7fc      	b.n	23fc900 <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fc908 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fc908:	b570      	push	{r4, r5, r6, lr}
 23fc90a:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fc90c:	4b38      	ldr	r3, [pc, #224]	; (23fc9f0 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fc90e:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fc910:	6818      	ldr	r0, [r3, #0]
 23fc912:	889b      	ldrh	r3, [r3, #4]
 23fc914:	9000      	str	r0, [sp, #0]
 23fc916:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fc91a:	4b36      	ldr	r3, [pc, #216]	; (23fc9f4 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fc91c:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fc91e:	6818      	ldr	r0, [r3, #0]
 23fc920:	889b      	ldrh	r3, [r3, #4]
 23fc922:	9002      	str	r0, [sp, #8]
 23fc924:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fc928:	b97e      	cbnz	r6, 23fc94a <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fc92a:	2206      	movs	r2, #6
 23fc92c:	4669      	mov	r1, sp
 23fc92e:	4620      	mov	r0, r4
 23fc930:	f002 fd98 	bl	23ff464 <memcmp>
 23fc934:	b138      	cbz	r0, 23fc946 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fc936:	2206      	movs	r2, #6
 23fc938:	4620      	mov	r0, r4
 23fc93a:	a902      	add	r1, sp, #8
 23fc93c:	f002 fd92 	bl	23ff464 <memcmp>
 23fc940:	3800      	subs	r0, #0
 23fc942:	bf18      	it	ne
 23fc944:	2001      	movne	r0, #1
}
 23fc946:	b006      	add	sp, #24
 23fc948:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fc94a:	88a3      	ldrh	r3, [r4, #4]
 23fc94c:	6820      	ldr	r0, [r4, #0]
 23fc94e:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fc952:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fc956:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fc958:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fc95a:	d124      	bne.n	23fc9a6 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fc95c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fc960:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fc962:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fc966:	4669      	mov	r1, sp
 23fc968:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fc96a:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fc96e:	f002 fd79 	bl	23ff464 <memcmp>
 23fc972:	2800      	cmp	r0, #0
 23fc974:	d03a      	beq.n	23fc9ec <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fc976:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fc97a:	2206      	movs	r2, #6
 23fc97c:	a902      	add	r1, sp, #8
 23fc97e:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fc980:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fc984:	f002 fd6e 	bl	23ff464 <memcmp>
 23fc988:	b380      	cbz	r0, 23fc9ec <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fc98a:	7960      	ldrb	r0, [r4, #5]
 23fc98c:	2e01      	cmp	r6, #1
 23fc98e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fc992:	d104      	bne.n	23fc99e <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fc994:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fc996:	bf14      	ite	ne
 23fc998:	2000      	movne	r0, #0
 23fc99a:	2001      	moveq	r0, #1
 23fc99c:	e7d3      	b.n	23fc946 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fc99e:	fab0 f080 	clz	r0, r0
 23fc9a2:	0940      	lsrs	r0, r0, #5
 23fc9a4:	e7cf      	b.n	23fc946 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fc9a6:	2e02      	cmp	r6, #2
 23fc9a8:	d11e      	bne.n	23fc9e8 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fc9aa:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fc9ac:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fc9b0:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fc9b4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fc9b8:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fc9bc:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fc9c0:	f002 fd50 	bl	23ff464 <memcmp>
 23fc9c4:	b190      	cbz	r0, 23fc9ec <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fc9c6:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fc9ca:	2203      	movs	r2, #3
 23fc9cc:	f10d 010b 	add.w	r1, sp, #11
 23fc9d0:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fc9d4:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fc9d8:	f002 fd44 	bl	23ff464 <memcmp>
 23fc9dc:	b130      	cbz	r0, 23fc9ec <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fc9de:	7960      	ldrb	r0, [r4, #5]
 23fc9e0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fc9e4:	2840      	cmp	r0, #64	; 0x40
 23fc9e6:	e7d6      	b.n	23fc996 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fc9e8:	2001      	movs	r0, #1
 23fc9ea:	e7ac      	b.n	23fc946 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fc9ec:	2000      	movs	r0, #0
 23fc9ee:	e7aa      	b.n	23fc946 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fc9f0:	023ff7d0 	.word	0x023ff7d0
 23fc9f4:	023ffac6 	.word	0x023ffac6

023fc9f8 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fc9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fc9fc:	6003      	str	r3, [r0, #0]
 23fc9fe:	8083      	strh	r3, [r0, #4]
}
 23fca00:	2000      	movs	r0, #0
 23fca02:	4770      	bx	lr

023fca04 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fca04:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fca06:	4602      	mov	r2, r0
 23fca08:	b508      	push	{r3, lr}
        : address_{} {
 23fca0a:	6001      	str	r1, [r0, #0]
 23fca0c:	6041      	str	r1, [r0, #4]
    clear();
 23fca0e:	f7ff fff3 	bl	23fc9f8 <_ZN8particle10BleAddress5clearEv>
}
 23fca12:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fca14:	7191      	strb	r1, [r2, #6]
}
 23fca16:	bd08      	pop	{r3, pc}

023fca18 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fca18:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fca1a:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fca1c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fca1e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fca20:	4b04      	ldr	r3, [pc, #16]	; (23fca34 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fca22:	f103 0110 	add.w	r1, r3, #16
 23fca26:	f853 4b04 	ldr.w	r4, [r3], #4
 23fca2a:	428b      	cmp	r3, r1
 23fca2c:	f842 4b04 	str.w	r4, [r2], #4
 23fca30:	d1f9      	bne.n	23fca26 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fca32:	bd10      	pop	{r4, pc}
 23fca34:	023ff7d6 	.word	0x023ff7d6

023fca38 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fca38:	7c0b      	ldrb	r3, [r1, #16]
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
 23fca3a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fca3c:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 23fca40:	d10d      	bne.n	23fca5e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fca42:	4602      	mov	r2, r0
        type_ = BleUuidType::SHORT;
 23fca44:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fca46:	4b0c      	ldr	r3, [pc, #48]	; (23fca78 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
 23fca48:	f103 0410 	add.w	r4, r3, #16
 23fca4c:	f853 5b04 	ldr.w	r5, [r3], #4
 23fca50:	42a3      	cmp	r3, r4
 23fca52:	f842 5b04 	str.w	r5, [r2], #4
 23fca56:	d1f9      	bne.n	23fca4c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
 23fca58:	880b      	ldrh	r3, [r1, #0]
 23fca5a:	8183      	strh	r3, [r0, #12]
}
 23fca5c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
 23fca5e:	2301      	movs	r3, #1
 23fca60:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fca62:	4603      	mov	r3, r0
 23fca64:	f101 0210 	add.w	r2, r1, #16
 23fca68:	f851 4b04 	ldr.w	r4, [r1], #4
 23fca6c:	4291      	cmp	r1, r2
 23fca6e:	f843 4b04 	str.w	r4, [r3], #4
 23fca72:	d1f9      	bne.n	23fca68 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
 23fca74:	e7f2      	b.n	23fca5c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
 23fca76:	bf00      	nop
 23fca78:	023ff7d6 	.word	0x023ff7d6

023fca7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fca7c:	b510      	push	{r4, lr}
    if (uuid128) {
 23fca7e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fca80:	4604      	mov	r4, r0
    if (uuid128) {
 23fca82:	b1b1      	cbz	r1, 23fcab2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fca84:	2a01      	cmp	r2, #1
 23fca86:	f101 0210 	add.w	r2, r1, #16
 23fca8a:	d10a      	bne.n	23fcaa2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fca8c:	4601      	mov	r1, r0
 23fca8e:	f853 0b04 	ldr.w	r0, [r3], #4
 23fca92:	4293      	cmp	r3, r2
 23fca94:	f841 0b04 	str.w	r0, [r1], #4
 23fca98:	d1f9      	bne.n	23fca8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fca9a:	2301      	movs	r3, #1
 23fca9c:	6123      	str	r3, [r4, #16]
}
 23fca9e:	4620      	mov	r0, r4
 23fcaa0:	bd10      	pop	{r4, pc}
 23fcaa2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fcaa4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcaa8:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fcaaa:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcaae:	d1f9      	bne.n	23fcaa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fcab0:	e7f3      	b.n	23fca9a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fcab2:	2210      	movs	r2, #16
 23fcab4:	f002 fd0d 	bl	23ff4d2 <memset>
 23fcab8:	e7f1      	b.n	23fca9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fcaba <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fcaba:	b538      	push	{r3, r4, r5, lr}
 23fcabc:	4604      	mov	r4, r0
 23fcabe:	460d      	mov	r5, r1
        : BleUuid() {
 23fcac0:	f7ff ffaa 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fcac4:	2300      	movs	r3, #0
}
 23fcac6:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fcac8:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fcaca:	81a5      	strh	r5, [r4, #12]
}
 23fcacc:	bd38      	pop	{r3, r4, r5, pc}

023fcace <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fcace:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fcad0:	6902      	ldr	r2, [r0, #16]
 23fcad2:	690b      	ldr	r3, [r1, #16]
 23fcad4:	429a      	cmp	r2, r3
 23fcad6:	d106      	bne.n	23fcae6 <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fcad8:	2210      	movs	r2, #16
 23fcada:	f002 fcc3 	bl	23ff464 <memcmp>
 23fcade:	fab0 f080 	clz	r0, r0
 23fcae2:	0940      	lsrs	r0, r0, #5
}
 23fcae4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fcae6:	2000      	movs	r0, #0
 23fcae8:	e7fc      	b.n	23fcae4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023fcaec <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23fcaec:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23fcaee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fcaf2:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23fcaf4:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23fcaf6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fcaf8:	4b33      	ldr	r3, [pc, #204]	; (23fcbc8 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23fcafa:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fcafc:	f103 0110 	add.w	r1, r3, #16
 23fcb00:	f853 0b04 	ldr.w	r0, [r3], #4
 23fcb04:	428b      	cmp	r3, r1
 23fcb06:	f842 0b04 	str.w	r0, [r2], #4
 23fcb0a:	d1f9      	bne.n	23fcb00 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23fcb0c:	b344      	cbz	r4, 23fcb60 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23fcb0e:	2124      	movs	r1, #36	; 0x24
 23fcb10:	4620      	mov	r0, r4
 23fcb12:	f002 fd48 	bl	23ff5a6 <strnlen>
 23fcb16:	2804      	cmp	r0, #4
 23fcb18:	f04f 0500 	mov.w	r5, #0
 23fcb1c:	d123      	bne.n	23fcb66 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23fcb1e:	f8ad 5004 	strh.w	r5, [sp, #4]
 23fcb22:	af01      	add	r7, sp, #4
 23fcb24:	1ca5      	adds	r5, r4, #2
 23fcb26:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23fcb28:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23fcb2c:	f7ff fea0 	bl	23fc870 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23fcb30:	f1b0 0800 	subs.w	r8, r0, #0
 23fcb34:	db12      	blt.n	23fcb5c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23fcb36:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23fcb3a:	f7ff fe99 	bl	23fc870 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23fcb3e:	2800      	cmp	r0, #0
 23fcb40:	db0c      	blt.n	23fcb5c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23fcb42:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fcb44:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23fcb48:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fcb4a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23fcb4e:	d1eb      	bne.n	23fcb28 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23fcb50:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23fcb54:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23fcb56:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fcb5a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23fcb5c:	2300      	movs	r3, #0
 23fcb5e:	6133      	str	r3, [r6, #16]
}
 23fcb60:	b002      	add	sp, #8
 23fcb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23fcb66:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcb6a:	2124      	movs	r1, #36	; 0x24
 23fcb6c:	4620      	mov	r0, r4
 23fcb6e:	f002 fd1a 	bl	23ff5a6 <strnlen>
 23fcb72:	42a8      	cmp	r0, r5
 23fcb74:	d807      	bhi.n	23fcb86 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23fcb76:	4642      	mov	r2, r8
 23fcb78:	2100      	movs	r1, #0
 23fcb7a:	4630      	mov	r0, r6
}
 23fcb7c:	b002      	add	sp, #8
 23fcb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23fcb82:	f002 bca6 	b.w	23ff4d2 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcb86:	f1b8 0f00 	cmp.w	r8, #0
 23fcb8a:	d0e9      	beq.n	23fcb60 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23fcb8c:	5d60      	ldrb	r0, [r4, r5]
 23fcb8e:	f7ff fe6f 	bl	23fc870 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23fcb92:	0603      	lsls	r3, r0, #24
 23fcb94:	d415      	bmi.n	23fcbc2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23fcb96:	0100      	lsls	r0, r0, #4
 23fcb98:	b2c7      	uxtb	r7, r0
 23fcb9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fcb9e:	2124      	movs	r1, #36	; 0x24
 23fcba0:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23fcba2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fcba6:	f002 fcfe 	bl	23ff5a6 <strnlen>
 23fcbaa:	3501      	adds	r5, #1
 23fcbac:	42a8      	cmp	r0, r5
 23fcbae:	d908      	bls.n	23fcbc2 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23fcbb0:	5d60      	ldrb	r0, [r4, r5]
 23fcbb2:	f7ff fe5d 	bl	23fc870 <_ZN8particle11hexToNibbleEc>
 23fcbb6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23fcbb8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23fcbba:	bfa4      	itt	ge
 23fcbbc:	4338      	orrge	r0, r7
 23fcbbe:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcbc2:	3501      	adds	r5, #1
 23fcbc4:	e7d1      	b.n	23fcb6a <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23fcbc6:	bf00      	nop
 23fcbc8:	023ff7d6 	.word	0x023ff7d6

023fcbcc <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23fcbcc:	b513      	push	{r0, r1, r4, lr}
 23fcbce:	4604      	mov	r4, r0
 23fcbd0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23fcbd2:	f7ff ff21 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23fcbd6:	4620      	mov	r0, r4
 23fcbd8:	9901      	ldr	r1, [sp, #4]
 23fcbda:	f7ff ff87 	bl	23fcaec <_ZN8particle7BleUuid9constructEPKc>
}
 23fcbde:	4620      	mov	r0, r4
 23fcbe0:	b002      	add	sp, #8
 23fcbe2:	bd10      	pop	{r4, pc}

023fcbe4 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
 23fcbe4:	b510      	push	{r4, lr}
 23fcbe6:	f100 030f 	add.w	r3, r0, #15
 23fcbea:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
 23fcbec:	781c      	ldrb	r4, [r3, #0]
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcbee:	4283      	cmp	r3, r0
        buf[i] = uuid128_[j];
 23fcbf0:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcbf4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23fcbf8:	d1f8      	bne.n	23fcbec <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
 23fcbfa:	bd10      	pop	{r4, pc}

023fcbfc <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fcbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcc00:	461f      	mov	r7, r3
    if (!buf || len == 0) {
 23fcc02:	460d      	mov	r5, r1
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fcc04:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
 23fcc06:	2900      	cmp	r1, #0
 23fcc08:	d05b      	beq.n	23fccc2 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
 23fcc0a:	b1da      	cbz	r2, 23fcc44 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
 23fcc0c:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
 23fcc10:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
 23fcc12:	f1b8 0f00 	cmp.w	r8, #0
 23fcc16:	d119      	bne.n	23fcc4c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fcc18:	8983      	ldrh	r3, [r0, #12]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fcc1a:	2102      	movs	r1, #2
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fcc1c:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fcc1e:	aa05      	add	r2, sp, #20
 23fcc20:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fcc22:	f8ad 3004 	strh.w	r3, [sp, #4]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
 23fcc26:	f8cd 8014 	str.w	r8, [sp, #20]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fcc2a:	f7ff fde9 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
 23fcc2e:	2c04      	cmp	r4, #4
 23fcc30:	bf28      	it	cs
 23fcc32:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
 23fcc34:	4628      	mov	r0, r5
 23fcc36:	4622      	mov	r2, r4
 23fcc38:	a905      	add	r1, sp, #20
 23fcc3a:	f002 fc23 	bl	23ff484 <memcpy>
        buf[len++] = '\0';
 23fcc3e:	1c62      	adds	r2, r4, #1
 23fcc40:	f805 8004 	strb.w	r8, [r5, r4]
}
 23fcc44:	4610      	mov	r0, r2
 23fcc46:	b00e      	add	sp, #56	; 0x38
 23fcc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
 23fcc4c:	a901      	add	r1, sp, #4
 23fcc4e:	f7ff ffc9 	bl	23fcbe4 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fcc52:	aa05      	add	r2, sp, #20
    if (stripped) {
 23fcc54:	b17f      	cbz	r7, 23fcc76 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fcc56:	2110      	movs	r1, #16
 23fcc58:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fcc5a:	f7ff fdd1 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
 23fcc5e:	2c24      	cmp	r4, #36	; 0x24
 23fcc60:	bf28      	it	cs
 23fcc62:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
 23fcc64:	4628      	mov	r0, r5
 23fcc66:	4622      	mov	r2, r4
 23fcc68:	a905      	add	r1, sp, #20
 23fcc6a:	f002 fc0b 	bl	23ff484 <memcpy>
    buf[len++] = '\0';
 23fcc6e:	2300      	movs	r3, #0
 23fcc70:	1c62      	adds	r2, r4, #1
 23fcc72:	552b      	strb	r3, [r5, r4]
    return len;
 23fcc74:	e7e6      	b.n	23fcc44 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fcc76:	2104      	movs	r1, #4
        cStr[idx * 2] = '-';
 23fcc78:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fcc7a:	eb0d 0001 	add.w	r0, sp, r1
 23fcc7e:	f7ff fdbf 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fcc82:	2102      	movs	r1, #2
 23fcc84:	f10d 021d 	add.w	r2, sp, #29
 23fcc88:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
 23fcc8a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fcc8e:	f7ff fdb7 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fcc92:	2102      	movs	r1, #2
 23fcc94:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 23fcc98:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
 23fcc9c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fcca0:	f7ff fdae 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fcca4:	2102      	movs	r1, #2
 23fcca6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 23fccaa:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
 23fccac:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fccb0:	f7ff fda6 	bl	23fc800 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fccb4:	2106      	movs	r1, #6
        cStr[idx * 2 + 3] = '-';
 23fccb6:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fccba:	aa0b      	add	r2, sp, #44	; 0x2c
 23fccbc:	f10d 000e 	add.w	r0, sp, #14
 23fccc0:	e7cb      	b.n	23fcc5a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
 23fccc2:	460a      	mov	r2, r1
 23fccc4:	e7be      	b.n	23fcc44 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

023fccc6 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
 23fccc6:	b510      	push	{r4, lr}
 23fccc8:	4604      	mov	r4, r0
 23fccca:	b08a      	sub	sp, #40	; 0x28
    toString(cStr, sizeof(cStr));
 23fcccc:	2300      	movs	r3, #0
 23fccce:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
 23fccd0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
 23fccd2:	4669      	mov	r1, sp
 23fccd4:	f7ff ff92 	bl	23fcbfc <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
 23fccd8:	4669      	mov	r1, sp
 23fccda:	4620      	mov	r0, r4
 23fccdc:	f002 f92d 	bl	23fef3a <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fcce0:	4620      	mov	r0, r4
 23fcce2:	b00a      	add	sp, #40	; 0x28
 23fcce4:	bd10      	pop	{r4, pc}

023fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fcce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fcce8:	4605      	mov	r5, r0
 23fccea:	4616      	mov	r6, r2
 23fccec:	461f      	mov	r7, r3
 23fccee:	460a      	mov	r2, r1
 23fccf0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fccf4:	ab01      	add	r3, sp, #4
 23fccf6:	f7ff fd03 	bl	23fc700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fccfa:	f030 0402 	bics.w	r4, r0, #2
 23fccfe:	d00c      	beq.n	23fcd1a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fcd00:	1e84      	subs	r4, r0, #2
 23fcd02:	42bc      	cmp	r4, r7
 23fcd04:	bf28      	it	cs
 23fcd06:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fcd08:	b13e      	cbz	r6, 23fcd1a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fcd0a:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fcd0c:	682b      	ldr	r3, [r5, #0]
 23fcd0e:	3102      	adds	r1, #2
 23fcd10:	4622      	mov	r2, r4
 23fcd12:	4630      	mov	r0, r6
 23fcd14:	4419      	add	r1, r3
 23fcd16:	f002 fbb5 	bl	23ff484 <memcpy>
}
 23fcd1a:	4620      	mov	r0, r4
 23fcd1c:	b003      	add	sp, #12
 23fcd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fcd20 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fcd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd22:	4613      	mov	r3, r2
 23fcd24:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fcd26:	9201      	str	r2, [sp, #4]
 23fcd28:	460a      	mov	r2, r1
 23fcd2a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fcd2c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fcd2e:	f7ff ffda 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fcd32:	b940      	cbnz	r0, 23fcd46 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fcd34:	4622      	mov	r2, r4
 23fcd36:	2109      	movs	r1, #9
 23fcd38:	4628      	mov	r0, r5
 23fcd3a:	9b01      	ldr	r3, [sp, #4]
}
 23fcd3c:	b003      	add	sp, #12
 23fcd3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fcd42:	f7ff bfd0 	b.w	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fcd46:	b003      	add	sp, #12
 23fcd48:	bd30      	pop	{r4, r5, pc}
	...

023fcd4c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fcd4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcd4e:	460c      	mov	r4, r1
 23fcd50:	b089      	sub	sp, #36	; 0x24
    String name;
 23fcd52:	490c      	ldr	r1, [pc, #48]	; (23fcd84 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fcd54:	4605      	mov	r5, r0
    String name;
 23fcd56:	f002 f8f0 	bl	23fef3a <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fcd5a:	221f      	movs	r2, #31
 23fcd5c:	4669      	mov	r1, sp
 23fcd5e:	4620      	mov	r0, r4
 23fcd60:	f7ff ffde 	bl	23fcd20 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fcd64:	4606      	mov	r6, r0
 23fcd66:	b150      	cbz	r0, 23fcd7e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fcd68:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fcd6a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fcd6c:	4628      	mov	r0, r5
 23fcd6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fcd72:	f002 f961 	bl	23ff038 <_ZN6String6concatEc>
 23fcd76:	b110      	cbz	r0, 23fcd7e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fcd78:	3701      	adds	r7, #1
 23fcd7a:	42be      	cmp	r6, r7
 23fcd7c:	d1f6      	bne.n	23fcd6c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fcd7e:	4628      	mov	r0, r5
 23fcd80:	b009      	add	sp, #36	; 0x24
 23fcd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd84:	023ff9f6 	.word	0x023ff9f6

023fcd88 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fcd88:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fcd8a:	2302      	movs	r3, #2
 23fcd8c:	2119      	movs	r1, #25
 23fcd8e:	aa01      	add	r2, sp, #4
 23fcd90:	f7ff ffa9 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fcd94:	b108      	cbz	r0, 23fcd9a <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fcd96:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fcd9a:	b003      	add	sp, #12
 23fcd9c:	f85d fb04 	ldr.w	pc, [sp], #4

023fcda0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fcda0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fcda2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcda6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fcda8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fcdaa:	8043      	strh	r3, [r0, #2]
 23fcdac:	220e      	movs	r2, #14
 23fcdae:	4629      	mov	r1, r5
 23fcdb0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fcdb2:	7105      	strb	r5, [r0, #4]
 23fcdb4:	3006      	adds	r0, #6
 23fcdb6:	f002 fb8c 	bl	23ff4d2 <memset>
 23fcdba:	f104 0014 	add.w	r0, r4, #20
 23fcdbe:	f7ff fe2b 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
 23fcdc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fcdc6:	f7ff fe27 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
 23fcdca:	4904      	ldr	r1, [pc, #16]	; (23fcddc <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23fcdcc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fcdd0:	f002 f8b3 	bl	23fef3a <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23fcdd4:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23fcdd6:	6565      	str	r5, [r4, #84]	; 0x54
 23fcdd8:	bd38      	pop	{r3, r4, r5, pc}
 23fcdda:	bf00      	nop
 23fcddc:	023ff9f6 	.word	0x023ff9f6

023fcde0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
 23fcde0:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fcde2:	680d      	ldr	r5, [r1, #0]
 23fcde4:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fcde6:	4601      	mov	r1, r0
 23fcde8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fcdec:	f7ff fe6f 	bl	23fcace <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fcdf0:	b140      	cbz	r0, 23fce04 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
 23fcdf2:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fcdf4:	8aa2      	ldrh	r2, [r4, #20]
 23fcdf6:	429a      	cmp	r2, r3
 23fcdf8:	d805      	bhi.n	23fce06 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fcdfa:	8ae0      	ldrh	r0, [r4, #22]
 23fcdfc:	4298      	cmp	r0, r3
 23fcdfe:	bf34      	ite	cc
 23fce00:	2000      	movcc	r0, #0
 23fce02:	2001      	movcs	r0, #1
    }
 23fce04:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23fce06:	2000      	movs	r0, #0
 23fce08:	e7fc      	b.n	23fce04 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

023fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fce0a:	b510      	push	{r4, lr}
    return data_ + size_;
 23fce0c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fce10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fce14:	4293      	cmp	r3, r2
 23fce16:	4618      	mov	r0, r3
 23fce18:	d005      	beq.n	23fce26 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fce1a:	6804      	ldr	r4, [r0, #0]
 23fce1c:	3308      	adds	r3, #8
 23fce1e:	8824      	ldrh	r4, [r4, #0]
 23fce20:	428c      	cmp	r4, r1
 23fce22:	d1f7      	bne.n	23fce14 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23fce24:	bd10      	pop	{r4, pc}
        return nullptr;
 23fce26:	2000      	movs	r0, #0
 23fce28:	e7fc      	b.n	23fce24 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>
	...

023fce2c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fce2c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
 23fce2e:	b570      	push	{r4, r5, r6, lr}
 23fce30:	6003      	str	r3, [r0, #0]
 23fce32:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fce34:	2068      	movs	r0, #104	; 0x68
 23fce36:	f7fd f94a 	bl	23fa0ce <_Znwj>
	  auto __pi = ::new (__mem)
 23fce3a:	1e04      	subs	r4, r0, #0
 23fce3c:	f104 060c 	add.w	r6, r4, #12
 23fce40:	d007      	beq.n	23fce52 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
 23fce42:	2301      	movs	r3, #1
 23fce44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fce48:	4b04      	ldr	r3, [pc, #16]	; (23fce5c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fce4a:	4630      	mov	r0, r6
 23fce4c:	6023      	str	r3, [r4, #0]
 23fce4e:	f7ff ffa7 	bl	23fcda0 <_ZN8particle21BleCharacteristicImplC1Ev>
}
 23fce52:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fce54:	e9c5 6400 	strd	r6, r4, [r5]
 23fce58:	bd70      	pop	{r4, r5, r6, pc}
 23fce5a:	bf00      	nop
 23fce5c:	023ffc90 	.word	0x023ffc90

023fce60 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
 23fce60:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
 23fce62:	4605      	mov	r5, r0
BleUuid BleCharacteristic::UUID() const {
 23fce64:	4606      	mov	r6, r0
    return impl()->charUUID();
 23fce66:	680c      	ldr	r4, [r1, #0]
 23fce68:	3414      	adds	r4, #20
 23fce6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fce6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fce6e:	6823      	ldr	r3, [r4, #0]
}
 23fce70:	4630      	mov	r0, r6
    return impl()->charUUID();
 23fce72:	602b      	str	r3, [r5, #0]
}
 23fce74:	bd70      	pop	{r4, r5, r6, pc}
	...

023fce78 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fce78:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fce7a:	4606      	mov	r6, r0
 23fce7c:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23fce7e:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fce80:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23fce82:	2900      	cmp	r1, #0
 23fce84:	d050      	beq.n	23fcf28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23fce86:	2a00      	cmp	r2, #0
 23fce88:	d04e      	beq.n	23fcf28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
 23fce8a:	6804      	ldr	r4, [r0, #0]
 23fce8c:	2af4      	cmp	r2, #244	; 0xf4
    if (impl()->isLocal()) {
 23fce8e:	7823      	ldrb	r3, [r4, #0]
 23fce90:	bf28      	it	cs
 23fce92:	22f4      	movcs	r2, #244	; 0xf4
 23fce94:	b343      	cbz	r3, 23fcee8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23fce96:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23fce98:	0798      	lsls	r0, r3, #30
 23fce9a:	d509      	bpl.n	23fceb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23fce9c:	2300      	movs	r3, #0
 23fce9e:	89a0      	ldrh	r0, [r4, #12]
 23fcea0:	9203      	str	r2, [sp, #12]
 23fcea2:	f7fd fc97 	bl	23fa7d4 <hal_ble_gatt_server_set_characteristic_value>
 23fcea6:	2800      	cmp	r0, #0
 23fcea8:	9a03      	ldr	r2, [sp, #12]
 23fceaa:	da03      	bge.n	23fceb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
 23fceac:	b005      	add	sp, #20
 23fceae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23fceb0:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fceb4:	6834      	ldr	r4, [r6, #0]
 23fceb6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23fceb8:	06d9      	lsls	r1, r3, #27
 23fceba:	d509      	bpl.n	23fced0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23fcebc:	2f01      	cmp	r7, #1
 23fcebe:	d007      	beq.n	23fced0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fcec0:	2300      	movs	r3, #0
 23fcec2:	4629      	mov	r1, r5
 23fcec4:	89a0      	ldrh	r0, [r4, #12]
}
 23fcec6:	b005      	add	sp, #20
 23fcec8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fcecc:	f7fd bd00 	b.w	23fa8d0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23fced0:	069b      	lsls	r3, r3, #26
 23fced2:	d5eb      	bpl.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fced4:	2f02      	cmp	r7, #2
 23fced6:	d0e9      	beq.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fced8:	2300      	movs	r3, #0
 23fceda:	4629      	mov	r1, r5
 23fcedc:	89a0      	ldrh	r0, [r4, #12]
}
 23fcede:	b005      	add	sp, #20
 23fcee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fcee4:	f7fd bd02 	b.w	23fa8ec <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23fcee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fceec:	8860      	ldrh	r0, [r4, #2]
 23fceee:	4288      	cmp	r0, r1
 23fcef0:	d01c      	beq.n	23fcf2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23fcef2:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23fcef4:	074e      	lsls	r6, r1, #29
 23fcef6:	d501      	bpl.n	23fcefc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23fcef8:	2f01      	cmp	r7, #1
 23fcefa:	d104      	bne.n	23fcf06 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fcefc:	070b      	lsls	r3, r1, #28
 23fcefe:	d409      	bmi.n	23fcf14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23fcf00:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fcf04:	e7d2      	b.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fcf06:	89a1      	ldrh	r1, [r4, #12]
 23fcf08:	9300      	str	r3, [sp, #0]
 23fcf0a:	4613      	mov	r3, r2
 23fcf0c:	462a      	mov	r2, r5
 23fcf0e:	f7fd fc99 	bl	23fa844 <hal_ble_gatt_client_write_without_response>
 23fcf12:	e7cb      	b.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fcf14:	2f02      	cmp	r7, #2
 23fcf16:	d0f3      	beq.n	23fcf00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fcf18:	2300      	movs	r3, #0
 23fcf1a:	89a1      	ldrh	r1, [r4, #12]
 23fcf1c:	9300      	str	r3, [sp, #0]
 23fcf1e:	4613      	mov	r3, r2
 23fcf20:	462a      	mov	r2, r5
 23fcf22:	f7fd fc81 	bl	23fa828 <hal_ble_gatt_client_write_with_response>
 23fcf26:	e7c1      	b.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fcf28:	4802      	ldr	r0, [pc, #8]	; (23fcf34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23fcf2a:	e7bf      	b.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23fcf2c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fcf30:	e7bc      	b.n	23fceac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fcf32:	bf00      	nop
 23fcf34:	fffffef2 	.word	0xfffffef2

023fcf38 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
 23fcf38:	b510      	push	{r4, lr}
 23fcf3a:	6803      	ldr	r3, [r0, #0]
 23fcf3c:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fcf3e:	781a      	ldrb	r2, [r3, #0]
 23fcf40:	bb52      	cbnz	r2, 23fcf98 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
 23fcf42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fcf46:	885c      	ldrh	r4, [r3, #2]
 23fcf48:	4284      	cmp	r4, r0
 23fcf4a:	d025      	beq.n	23fcf98 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fcf4c:	8a18      	ldrh	r0, [r3, #16]
 23fcf4e:	b330      	cbz	r0, 23fcf9e <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
 23fcf50:	e9cd 2203 	strd	r2, r2, [sp, #12]
 23fcf54:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
 23fcf56:	4a13      	ldr	r2, [pc, #76]	; (23fcfa4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
 23fcf58:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
 23fcf5a:	4a13      	ldr	r2, [pc, #76]	; (23fcfa8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
 23fcf5c:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
 23fcf60:	885a      	ldrh	r2, [r3, #2]
 23fcf62:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
 23fcf66:	8a1a      	ldrh	r2, [r3, #16]
 23fcf68:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
 23fcf6c:	899a      	ldrh	r2, [r3, #12]
 23fcf6e:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
 23fcf72:	b159      	cbz	r1, 23fcf8c <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
 23fcf74:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
 23fcf76:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
 23fcf78:	bf44      	itt	mi
 23fcf7a:	2202      	movmi	r2, #2
 23fcf7c:	9205      	strmi	r2, [sp, #20]
 23fcf7e:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
 23fcf80:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
 23fcf82:	bf42      	ittt	mi
 23fcf84:	9b05      	ldrmi	r3, [sp, #20]
 23fcf86:	f043 0301 	orrmi.w	r3, r3, #1
 23fcf8a:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
 23fcf8c:	2100      	movs	r1, #0
 23fcf8e:	4668      	mov	r0, sp
 23fcf90:	f7fd fc90 	bl	23fa8b4 <hal_ble_gatt_client_configure_cccd>
}
 23fcf94:	b006      	add	sp, #24
 23fcf96:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fcf98:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fcf9c:	e7fa      	b.n	23fcf94 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fcf9e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fcfa2:	e7f7      	b.n	23fcf94 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
 23fcfa4:	00180003 	.word	0x00180003
 23fcfa8:	023fd191 	.word	0x023fd191

023fcfac <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
 23fcfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fcfae:	2600      	movs	r6, #0
 23fcfb0:	4605      	mov	r5, r0
 23fcfb2:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fcfb4:	2028      	movs	r0, #40	; 0x28
 23fcfb6:	f7fd f88a 	bl	23fa0ce <_Znwj>
	  auto __pi = ::new (__mem)
 23fcfba:	1e04      	subs	r4, r0, #0
 23fcfbc:	f104 070c 	add.w	r7, r4, #12
 23fcfc0:	d00a      	beq.n	23fcfd8 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcfc2:	2301      	movs	r3, #1
 23fcfc4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fcfc8:	4b05      	ldr	r3, [pc, #20]	; (23fcfe0 <_ZN8particle10BleServiceC1Ev+0x34>)
              characteristicsDiscovered_(false) {
 23fcfca:	4638      	mov	r0, r7
 23fcfcc:	6023      	str	r3, [r4, #0]
 23fcfce:	f7ff fd23 	bl	23fca18 <_ZN8particle7BleUuidC1Ev>
 23fcfd2:	6226      	str	r6, [r4, #32]
 23fcfd4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
}
 23fcfd8:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fcfda:	e9c5 7400 	strd	r7, r4, [r5]
 23fcfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fcfe0:	023ffcac 	.word	0x023ffcac

023fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fcfe4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fcfe6:	2500      	movs	r5, #0
 23fcfe8:	4606      	mov	r6, r0
 23fcfea:	6005      	str	r5, [r0, #0]
 23fcfec:	2030      	movs	r0, #48	; 0x30
 23fcfee:	f7fd f86e 	bl	23fa0ce <_Znwj>
	  auto __pi = ::new (__mem)
 23fcff2:	4604      	mov	r4, r0
 23fcff4:	b198      	cbz	r0, 23fd01e <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fcff6:	2301      	movs	r3, #1
 23fcff8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fcffc:	4b0a      	ldr	r3, [pc, #40]	; (23fd028 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fcffe:	300e      	adds	r0, #14
 23fd000:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fd004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd008:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fd00c:	f7ff fcfa 	bl	23fca04 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fd010:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fd014:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fd018:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fd01c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fd01e:	6074      	str	r4, [r6, #4]
 23fd020:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fd022:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fd024:	6034      	str	r4, [r6, #0]
 23fd026:	bd70      	pop	{r4, r5, r6, pc}
 23fd028:	023ffcc8 	.word	0x023ffcc8

023fd02c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
 23fd02c:	b513      	push	{r0, r1, r4, lr}
 23fd02e:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fd030:	a801      	add	r0, sp, #4
 23fd032:	f7ff fc33 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fd036:	6823      	ldr	r3, [r4, #0]
    WiringBleLock lk;
 23fd038:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fd03a:	881c      	ldrh	r4, [r3, #0]
 23fd03c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd040:	1ae4      	subs	r4, r4, r3
 23fd042:	bf18      	it	ne
 23fd044:	2401      	movne	r4, #1
    WiringBleLock lk;
 23fd046:	f7ff fc37 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fd04a:	4620      	mov	r0, r4
 23fd04c:	b002      	add	sp, #8
 23fd04e:	bd10      	pop	{r4, pc}

023fd050 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
 23fd050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd052:	460c      	mov	r4, r1
 23fd054:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fd056:	a801      	add	r0, sp, #4
 23fd058:	f7ff fc20 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
 23fd05c:	6823      	ldr	r3, [r4, #0]
      { return _M_ptr; }
 23fd05e:	682a      	ldr	r2, [r5, #0]
    WiringBleLock lk;
 23fd060:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fd062:	f8c2 3002 	str.w	r3, [r2, #2]
 23fd066:	6863      	ldr	r3, [r4, #4]
 23fd068:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
 23fd06c:	f7ff fc24 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
 23fd070:	b003      	add	sp, #12
 23fd072:	bd30      	pop	{r4, r5, pc}

023fd074 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
 23fd074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd076:	460d      	mov	r5, r1
 23fd078:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fd07a:	a801      	add	r0, sp, #4
 23fd07c:	f7ff fc0e 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
 23fd080:	682a      	ldr	r2, [r5, #0]
 23fd082:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fd084:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fd088:	6023      	str	r3, [r4, #0]
 23fd08a:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fd08e:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fd090:	f7ff fc12 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fd094:	4620      	mov	r0, r4
 23fd096:	b003      	add	sp, #12
 23fd098:	bd30      	pop	{r4, r5, pc}

023fd09a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fd09a:	b530      	push	{r4, r5, lr}
 23fd09c:	4605      	mov	r5, r0
 23fd09e:	460c      	mov	r4, r1
 23fd0a0:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fd0a2:	a801      	add	r0, sp, #4
 23fd0a4:	f7ff fbfa 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fd0a8:	682a      	ldr	r2, [r5, #0]
 23fd0aa:	6823      	ldr	r3, [r4, #0]
 23fd0ac:	8812      	ldrh	r2, [r2, #0]
 23fd0ae:	881b      	ldrh	r3, [r3, #0]
 23fd0b0:	429a      	cmp	r2, r3
 23fd0b2:	d10d      	bne.n	23fd0d0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fd0b4:	4629      	mov	r1, r5
 23fd0b6:	a802      	add	r0, sp, #8
 23fd0b8:	f7ff ffdc 	bl	23fd074 <_ZNK8particle13BlePeerDevice7addressEv>
 23fd0bc:	4621      	mov	r1, r4
 23fd0be:	a804      	add	r0, sp, #16
 23fd0c0:	f7ff ffd8 	bl	23fd074 <_ZNK8particle13BlePeerDevice7addressEv>
 23fd0c4:	a904      	add	r1, sp, #16
 23fd0c6:	a802      	add	r0, sp, #8
 23fd0c8:	f7ff fc0f 	bl	23fc8ea <_ZNK8particle10BleAddresseqERKS0_>
 23fd0cc:	4604      	mov	r4, r0
 23fd0ce:	b900      	cbnz	r0, 23fd0d2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fd0d0:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fd0d2:	a801      	add	r0, sp, #4
 23fd0d4:	f7ff fbf0 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fd0d8:	4620      	mov	r0, r4
 23fd0da:	b007      	add	sp, #28
 23fd0dc:	bd30      	pop	{r4, r5, pc}
	...

023fd0e0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fd0e0:	b570      	push	{r4, r5, r6, lr}
 23fd0e2:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fd0e4:	2074      	movs	r0, #116	; 0x74
 23fd0e6:	f7fc fff2 	bl	23fa0ce <_Znwj>
 23fd0ea:	4604      	mov	r4, r0
 23fd0ec:	b1a0      	cbz	r0, 23fd118 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fd0ee:	2500      	movs	r5, #0
 23fd0f0:	e9c0 5500 	strd	r5, r5, [r0]
 23fd0f4:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd0f8:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd0fc:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fd100:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fd102:	3024      	adds	r0, #36	; 0x24
 23fd104:	f7ff ff6e 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
 23fd108:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fd10c:	f7ff ff6a 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
 23fd110:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fd112:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fd114:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fd116:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fd118:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fd11a:	b924      	cbnz	r4, 23fd126 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fd11c:	200a      	movs	r0, #10
 23fd11e:	4a0a      	ldr	r2, [pc, #40]	; (23fd148 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fd120:	490a      	ldr	r1, [pc, #40]	; (23fd14c <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fd122:	f7fd fc37 	bl	23fa994 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fd126:	2000      	movs	r0, #0
 23fd128:	f7fd fb1c 	bl	23fa764 <hal_ble_stack_init>
 23fd12c:	b120      	cbz	r0, 23fd138 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fd12e:	200a      	movs	r0, #10
 23fd130:	4a05      	ldr	r2, [pc, #20]	; (23fd148 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fd132:	4907      	ldr	r1, [pc, #28]	; (23fd150 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fd134:	f7fd fc2e 	bl	23fa994 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fd138:	2200      	movs	r2, #0
 23fd13a:	6831      	ldr	r1, [r6, #0]
 23fd13c:	4805      	ldr	r0, [pc, #20]	; (23fd154 <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fd13e:	f7fd fbab 	bl	23fa898 <hal_ble_set_callback_on_periph_link_events>
}
 23fd142:	4630      	mov	r0, r6
 23fd144:	bd70      	pop	{r4, r5, r6, pc}
 23fd146:	bf00      	nop
 23fd148:	023fa925 	.word	0x023fa925
 23fd14c:	023ffa88 	.word	0x023ffa88
 23fd150:	023ffacd 	.word	0x023ffacd
 23fd154:	023fdad1 	.word	0x023fdad1

023fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fd158:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fd15a:	4c0a      	ldr	r4, [pc, #40]	; (23fd184 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fd15c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd160:	07db      	lsls	r3, r3, #31
 23fd162:	d40c      	bmi.n	23fd17e <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fd164:	4620      	mov	r0, r4
 23fd166:	f7fc ffc5 	bl	23fa0f4 <__cxa_guard_acquire>
 23fd16a:	b140      	cbz	r0, 23fd17e <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fd16c:	4806      	ldr	r0, [pc, #24]	; (23fd188 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fd16e:	f7ff ffb7 	bl	23fd0e0 <_ZN8particle14BleLocalDeviceC1Ev>
 23fd172:	4620      	mov	r0, r4
 23fd174:	f7fc ffc3 	bl	23fa0fe <__cxa_guard_release>
 23fd178:	4804      	ldr	r0, [pc, #16]	; (23fd18c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fd17a:	f002 f965 	bl	23ff448 <atexit>
    return instance;
}
 23fd17e:	4802      	ldr	r0, [pc, #8]	; (23fd188 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fd180:	bd10      	pop	{r4, pc}
 23fd182:	bf00      	nop
 23fd184:	1007aee4 	.word	0x1007aee4
 23fd188:	1007aeec 	.word	0x1007aeec
 23fd18c:	023fdd7d 	.word	0x023fdd7d

023fd190 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd190:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23fd192:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd194:	4604      	mov	r4, r0
    switch (event->type) {
 23fd196:	3b09      	subs	r3, #9
 23fd198:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd19a:	460d      	mov	r5, r1
 23fd19c:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23fd19e:	d811      	bhi.n	23fd1c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23fd1a0:	f7ff ffda 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fd1a4:	88a1      	ldrh	r1, [r4, #4]
 23fd1a6:	6800      	ldr	r0, [r0, #0]
 23fd1a8:	f7ff fe2f 	bl	23fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23fd1ac:	4603      	mov	r3, r0
 23fd1ae:	b958      	cbnz	r0, 23fd1c8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23fd1b0:	2220      	movs	r2, #32
 23fd1b2:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23fd1b6:	4a0b      	ldr	r2, [pc, #44]	; (23fd1e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23fd1b8:	2032      	movs	r0, #50	; 0x32
 23fd1ba:	9200      	str	r2, [sp, #0]
 23fd1bc:	490a      	ldr	r1, [pc, #40]	; (23fd1e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23fd1be:	aa04      	add	r2, sp, #16
 23fd1c0:	f7fd fbf6 	bl	23fa9b0 <log_message>
}
 23fd1c4:	b00d      	add	sp, #52	; 0x34
 23fd1c6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23fd1c8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23fd1ca:	2a00      	cmp	r2, #0
 23fd1cc:	d0fa      	beq.n	23fd1c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23fd1ce:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd1d2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23fd1d6:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23fd1da:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23fd1dc:	aa04      	add	r2, sp, #16
 23fd1de:	a903      	add	r1, sp, #12
 23fd1e0:	47a0      	blx	r4
}
 23fd1e2:	e7ef      	b.n	23fd1c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23fd1e4:	023ffb0f 	.word	0x023ffb0f
 23fd1e8:	023ffa9f 	.word	0x023ffa9f

023fd1ec <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fd1ec:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fd1ee:	2000      	movs	r0, #0
 23fd1f0:	f7fd fab8 	bl	23fa764 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fd1f4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fd1f8:	bd08      	pop	{r3, pc}
	...

023fd1fc <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
 23fd1fc:	b570      	push	{r4, r5, r6, lr}
 23fd1fe:	4604      	mov	r4, r0
 23fd200:	460e      	mov	r6, r1
 23fd202:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
 23fd204:	3018      	adds	r0, #24
 23fd206:	f7ff fac7 	bl	23fc798 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fd20a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd20e:	f7ff face 	bl	23fc7ae <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fd212:	2200      	movs	r2, #0
 23fd214:	4621      	mov	r1, r4
        targetCount_ = resultCount;
 23fd216:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fd21a:	4803      	ldr	r0, [pc, #12]	; (23fd228 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
 23fd21c:	f7fd fab0 	bl	23fa780 <hal_ble_gap_start_scan>
 23fd220:	2800      	cmp	r0, #0
        return foundCount_;
 23fd222:	bfa8      	it	ge
 23fd224:	6960      	ldrge	r0, [r4, #20]
    }
 23fd226:	bd70      	pop	{r4, r5, r6, pc}
 23fd228:	023feb1d 	.word	0x023feb1d

023fd22c <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fd22c:	b510      	push	{r4, lr}
 23fd22e:	4604      	mov	r4, r0
    ::free(ptr);
 23fd230:	6940      	ldr	r0, [r0, #20]
 23fd232:	f7fd fce3 	bl	23fabfc <free>
 23fd236:	68a0      	ldr	r0, [r4, #8]
 23fd238:	f7fd fce0 	bl	23fabfc <free>
 23fd23c:	4620      	mov	r0, r4
 23fd23e:	bd10      	pop	{r4, pc}

023fd240 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fd240:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23fd242:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fd246:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
 23fd24a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd24e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fd252:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fd256:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23fd25a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23fd25e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23fd262:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23fd266:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23fd26a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
 23fd26e:	6202      	str	r2, [r0, #32]
 23fd270:	6302      	str	r2, [r0, #48]	; 0x30
 23fd272:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
 23fd276:	4770      	bx	lr

023fd278 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
 23fd278:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
 23fd27a:	69d8      	ldr	r0, [r3, #28]
}
 23fd27c:	2800      	cmp	r0, #0
 23fd27e:	bfd4      	ite	le
 23fd280:	2000      	movle	r0, #0
 23fd282:	2001      	movgt	r0, #1
 23fd284:	4770      	bx	lr

023fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd286:	b510      	push	{r4, lr}
 23fd288:	4604      	mov	r4, r0
    ::free(ptr);
 23fd28a:	6800      	ldr	r0, [r0, #0]
 23fd28c:	f7fd fcb6 	bl	23fabfc <free>
}
 23fd290:	4620      	mov	r0, r4
 23fd292:	bd10      	pop	{r4, pc}

023fd294 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
 23fd294:	b570      	push	{r4, r5, r6, lr}
 23fd296:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd298:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23fd29a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23fd29c:	f7fd fcae 	bl	23fabfc <free>
 23fd2a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23fd2a2:	f7fd fcab 	bl	23fabfc <free>
    }
    ~BleScanFilter() = default;
 23fd2a6:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23fd2aa:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fd2ae:	f7ff ffea 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23fd2b2:	4628      	mov	r0, r5
 23fd2b4:	f7fe fc18 	bl	23fbae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23fd2b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd2bc:	f7fe f8e2 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
 23fd2c0:	f104 0018 	add.w	r0, r4, #24
 23fd2c4:	f7fe f8de 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fd2c8:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd2cc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd2d0:	42ae      	cmp	r6, r5
 23fd2d2:	d004      	beq.n	23fd2de <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23fd2d4:	4628      	mov	r0, r5
 23fd2d6:	f7ff ffa9 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23fd2da:	3524      	adds	r5, #36	; 0x24
 23fd2dc:	e7f8      	b.n	23fd2d0 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23fd2de:	6820      	ldr	r0, [r4, #0]
 23fd2e0:	f7fd fc8c 	bl	23fabfc <free>
 23fd2e4:	4620      	mov	r0, r4
 23fd2e6:	bd70      	pop	{r4, r5, r6, pc}

023fd2e8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fd2e8:	b530      	push	{r4, r5, lr}
 23fd2ea:	4615      	mov	r5, r2
    if (results == nullptr || resultCount == 0) {
 23fd2ec:	460c      	mov	r4, r1
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fd2ee:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
 23fd2f0:	b179      	cbz	r1, 23fd312 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
 23fd2f2:	b172      	cbz	r2, 23fd312 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
 23fd2f4:	a801      	add	r0, sp, #4
 23fd2f6:	f7ff ffa3 	bl	23fd240 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
 23fd2fa:	4621      	mov	r1, r4
 23fd2fc:	462a      	mov	r2, r5
 23fd2fe:	a801      	add	r0, sp, #4
 23fd300:	f7ff ff7c 	bl	23fd1fc <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
 23fd304:	4604      	mov	r4, r0
    BleScanDelegator scanner;
 23fd306:	a801      	add	r0, sp, #4
 23fd308:	f7ff ffc4 	bl	23fd294 <_ZN8particle16BleScanDelegatorD1Ev>
}
 23fd30c:	4620      	mov	r0, r4
 23fd30e:	b01f      	add	sp, #124	; 0x7c
 23fd310:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fd312:	4c01      	ldr	r4, [pc, #4]	; (23fd318 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
 23fd314:	e7fa      	b.n	23fd30c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
 23fd316:	bf00      	nop
 23fd318:	fffffef2 	.word	0xfffffef2

023fd31c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fd31c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fd31e:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fd320:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fd322:	6843      	ldr	r3, [r0, #4]
 23fd324:	db02      	blt.n	23fd32c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fd326:	1862      	adds	r2, r4, r1
 23fd328:	429a      	cmp	r2, r3
 23fd32a:	dd00      	ble.n	23fd32e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fd32c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fd32e:	682a      	ldr	r2, [r5, #0]
 23fd330:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fd332:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fd334:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd336:	1a52      	subs	r2, r2, r1
 23fd338:	f002 f8b1 	bl	23ff49e <memmove>
    size_ -= n;
 23fd33c:	686a      	ldr	r2, [r5, #4]
 23fd33e:	1b12      	subs	r2, r2, r4
 23fd340:	606a      	str	r2, [r5, #4]
}
 23fd342:	bd38      	pop	{r3, r4, r5, pc}

023fd344 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 23fd344:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd346:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 23fd348:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd34a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd34c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
 23fd34e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd350:	f7fc febd 	bl	23fa0ce <_Znwj>
 23fd354:	b118      	cbz	r0, 23fd35e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fd356:	682b      	ldr	r3, [r5, #0]
 23fd358:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd35a:	686b      	ldr	r3, [r5, #4]
 23fd35c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd35e:	4b03      	ldr	r3, [pc, #12]	; (23fd36c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd360:	6020      	str	r0, [r4, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd362:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd364:	4b02      	ldr	r3, [pc, #8]	; (23fd370 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
      }
 23fd366:	4620      	mov	r0, r4
	    _M_manager = &_My_handler::_M_manager;
 23fd368:	60a3      	str	r3, [r4, #8]
      }
 23fd36a:	bd38      	pop	{r3, r4, r5, pc}
 23fd36c:	023fc741 	.word	0x023fc741
 23fd370:	023fc759 	.word	0x023fc759

023fd374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fd374:	680b      	ldr	r3, [r1, #0]
 23fd376:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fd378:	b113      	cbz	r3, 23fd380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fd37a:	685a      	ldr	r2, [r3, #4]
 23fd37c:	3201      	adds	r2, #1
 23fd37e:	605a      	str	r2, [r3, #4]
      }
 23fd380:	4770      	bx	lr

023fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23fd382:	b510      	push	{r4, lr}
 23fd384:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd386:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd38a:	f840 3b04 	str.w	r3, [r0], #4
 23fd38e:	f7ff fff1 	bl	23fd374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fd392:	6823      	ldr	r3, [r4, #0]
 23fd394:	b90b      	cbnz	r3, 23fd39a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fd396:	f7ff f9c9 	bl	23fc72c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fd39a:	4620      	mov	r0, r4
 23fd39c:	bd10      	pop	{r4, pc}

023fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fd39e:	b510      	push	{r4, lr}
 23fd3a0:	4604      	mov	r4, r0
 23fd3a2:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd3a6:	f840 3b04 	str.w	r3, [r0], #4
 23fd3aa:	f7ff ffe3 	bl	23fd374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fd3ae:	4620      	mov	r0, r4
 23fd3b0:	bd10      	pop	{r4, pc}

023fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fd3b2:	b510      	push	{r4, lr}
 23fd3b4:	4604      	mov	r4, r0
 23fd3b6:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd3ba:	f840 3b04 	str.w	r3, [r0], #4
 23fd3be:	f7ff ffd9 	bl	23fd374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fd3c2:	4620      	mov	r0, r4
 23fd3c4:	bd10      	pop	{r4, pc}

023fd3c6 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
 23fd3c6:	b510      	push	{r4, lr}
 23fd3c8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fd3ca:	3004      	adds	r0, #4
 23fd3cc:	f7fd ff54 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd3d0:	4620      	mov	r0, r4
 23fd3d2:	bd10      	pop	{r4, pc}

023fd3d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd3d4:	b570      	push	{r4, r5, r6, lr}
 23fd3d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd3d8:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd3dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fd3e0:	42ae      	cmp	r6, r5
 23fd3e2:	d004      	beq.n	23fd3ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fd3e4:	1d28      	adds	r0, r5, #4
 23fd3e6:	f7fd ff47 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd3ea:	3508      	adds	r5, #8
 23fd3ec:	e7f8      	b.n	23fd3e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd3ee:	6820      	ldr	r0, [r4, #0]
 23fd3f0:	f7fd fc04 	bl	23fabfc <free>
}
 23fd3f4:	4620      	mov	r0, r4
 23fd3f6:	bd70      	pop	{r4, r5, r6, pc}

023fd3f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd3f8:	b570      	push	{r4, r5, r6, lr}
 23fd3fa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd3fc:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd400:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fd404:	42ae      	cmp	r6, r5
 23fd406:	d004      	beq.n	23fd412 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fd408:	1d28      	adds	r0, r5, #4
 23fd40a:	f7fd ff35 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd40e:	3508      	adds	r5, #8
 23fd410:	e7f8      	b.n	23fd404 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd412:	6820      	ldr	r0, [r4, #0]
 23fd414:	f7fd fbf2 	bl	23fabfc <free>
}
 23fd418:	4620      	mov	r0, r4
 23fd41a:	bd70      	pop	{r4, r5, r6, pc}

023fd41c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fd41c:	b510      	push	{r4, lr}
 23fd41e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fd420:	3024      	adds	r0, #36	; 0x24
 23fd422:	f7ff ffe9 	bl	23fd3f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fd426:	f104 0018 	add.w	r0, r4, #24
 23fd42a:	f7ff ffd3 	bl	23fd3d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fd42e:	bd10      	pop	{r4, pc}

023fd430 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fd430:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd432:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd434:	b90a      	cbnz	r2, 23fd43a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fd436:	f001 fef1 	bl	23ff21c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd43a:	68c3      	ldr	r3, [r0, #12]
    }
 23fd43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd440:	4718      	bx	r3

023fd442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fd442:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fd448:	e9c0 3300 	strd	r3, r3, [r0]
 23fd44c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd44e:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd452:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd454:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd456:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd458:	dd4a      	ble.n	23fd4f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fd45a:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fd45e:	f7fd fbbf 	bl	23fabe0 <malloc>
            if (!d) {
 23fd462:	4606      	mov	r6, r0
 23fd464:	2800      	cmp	r0, #0
 23fd466:	d043      	beq.n	23fd4f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fd468:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fd46c:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fd46e:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fd472:	d916      	bls.n	23fd4a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fd474:	4550      	cmp	r0, sl
 23fd476:	d215      	bcs.n	23fd4a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fd478:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fd47c:	f1a4 0910 	sub.w	r9, r4, #16
 23fd480:	ebaa 0404 	sub.w	r4, sl, r4
 23fd484:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fd486:	45d1      	cmp	r9, sl
 23fd488:	d01d      	beq.n	23fd4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fd48a:	b11c      	cbz	r4, 23fd494 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fd48c:	4651      	mov	r1, sl
 23fd48e:	4620      	mov	r0, r4
 23fd490:	f001 fd84 	bl	23fef9c <_ZN6StringC1EOS_>
                end->~T();
 23fd494:	4650      	mov	r0, sl
 23fd496:	f001 fd05 	bl	23feea4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd49a:	f1aa 0a10 	sub.w	sl, sl, #16
 23fd49e:	3c10      	subs	r4, #16
 23fd4a0:	e7f1      	b.n	23fd486 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fd4a2:	d010      	beq.n	23fd4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fd4a4:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fd4a6:	45a2      	cmp	sl, r4
 23fd4a8:	d00d      	beq.n	23fd4c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fd4aa:	f1b9 0f00 	cmp.w	r9, #0
 23fd4ae:	d003      	beq.n	23fd4b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fd4b0:	4621      	mov	r1, r4
 23fd4b2:	4648      	mov	r0, r9
 23fd4b4:	f001 fd72 	bl	23fef9c <_ZN6StringC1EOS_>
                p->~T();
 23fd4b8:	4620      	mov	r0, r4
 23fd4ba:	f001 fcf3 	bl	23feea4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd4be:	3410      	adds	r4, #16
 23fd4c0:	f109 0910 	add.w	r9, r9, #16
 23fd4c4:	e7ef      	b.n	23fd4a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fd4c6:	6828      	ldr	r0, [r5, #0]
 23fd4c8:	f7fd fb98 	bl	23fabfc <free>
        capacity_ = n;
 23fd4cc:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fd4d0:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd4d2:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fd4d6:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fd4da:	45a0      	cmp	r8, r4
 23fd4dc:	d006      	beq.n	23fd4ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fd4de:	4621      	mov	r1, r4
 23fd4e0:	4630      	mov	r0, r6
 23fd4e2:	f001 fd75 	bl	23fefd0 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fd4e6:	3410      	adds	r4, #16
 23fd4e8:	3610      	adds	r6, #16
 23fd4ea:	e7f6      	b.n	23fd4da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fd4ec:	687b      	ldr	r3, [r7, #4]
 23fd4ee:	606b      	str	r3, [r5, #4]
}
 23fd4f0:	4628      	mov	r0, r5
 23fd4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fd4f6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
 23fd4f6:	b530      	push	{r4, r5, lr}
 23fd4f8:	b08d      	sub	sp, #52	; 0x34
 23fd4fa:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fd4fc:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fd500:	a801      	add	r0, sp, #4
 23fd502:	f7ff ff9e 	bl	23fd442 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fd506:	9b02      	ldr	r3, [sp, #8]
 23fd508:	2b00      	cmp	r3, #0
 23fd50a:	dd2f      	ble.n	23fd56c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fd50c:	f104 0114 	add.w	r1, r4, #20
 23fd510:	a804      	add	r0, sp, #16
 23fd512:	f7ff fc1b 	bl	23fcd4c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fd516:	f104 0108 	add.w	r1, r4, #8
 23fd51a:	a808      	add	r0, sp, #32
 23fd51c:	f7ff fc16 	bl	23fcd4c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fd520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fd522:	9b06      	ldr	r3, [sp, #24]
 23fd524:	4313      	orrs	r3, r2
 23fd526:	d01f      	beq.n	23fd568 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fd528:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fd52c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
 23fd530:	42ac      	cmp	r4, r5
 23fd532:	d019      	beq.n	23fd568 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fd534:	4620      	mov	r0, r4
 23fd536:	a904      	add	r1, sp, #16
 23fd538:	f001 fda0 	bl	23ff07c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fd53c:	b160      	cbz	r0, 23fd558 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fd53e:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fd540:	a808      	add	r0, sp, #32
 23fd542:	f001 fcaf 	bl	23feea4 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fd546:	a804      	add	r0, sp, #16
 23fd548:	f001 fcac 	bl	23feea4 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fd54c:	a801      	add	r0, sp, #4
 23fd54e:	f7fe facb 	bl	23fbae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
 23fd552:	4620      	mov	r0, r4
 23fd554:	b00d      	add	sp, #52	; 0x34
 23fd556:	bd30      	pop	{r4, r5, pc}
 23fd558:	4620      	mov	r0, r4
 23fd55a:	a908      	add	r1, sp, #32
 23fd55c:	f001 fd8e 	bl	23ff07c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fd560:	3410      	adds	r4, #16
 23fd562:	2800      	cmp	r0, #0
 23fd564:	d0e4      	beq.n	23fd530 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fd566:	e7ea      	b.n	23fd53e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fd568:	2400      	movs	r4, #0
 23fd56a:	e7e9      	b.n	23fd540 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fd56c:	2401      	movs	r4, #1
 23fd56e:	e7ed      	b.n	23fd54c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fd570 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23fd572:	2300      	movs	r3, #0
 23fd574:	e9c0 3300 	strd	r3, r3, [r0]
 23fd578:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd57a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd57c:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd57e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd580:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd582:	dd40      	ble.n	23fd606 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23fd584:	00f8      	lsls	r0, r7, #3
 23fd586:	f7fd fb2b 	bl	23fabe0 <malloc>
            if (!d) {
 23fd58a:	4604      	mov	r4, r0
 23fd58c:	b3d8      	cbz	r0, 23fd606 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23fd58e:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23fd592:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fd594:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23fd598:	d910      	bls.n	23fd5bc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23fd59a:	429c      	cmp	r4, r3
 23fd59c:	d20f      	bcs.n	23fd5be <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23fd59e:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23fd5a0:	1a1a      	subs	r2, r3, r0
 23fd5a2:	f1a0 0c08 	sub.w	ip, r0, #8
 23fd5a6:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23fd5a8:	459c      	cmp	ip, r3
 23fd5aa:	d018      	beq.n	23fd5de <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23fd5ac:	b11a      	cbz	r2, 23fd5b6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23fd5ae:	6819      	ldr	r1, [r3, #0]
 23fd5b0:	6011      	str	r1, [r2, #0]
 23fd5b2:	6859      	ldr	r1, [r3, #4]
 23fd5b4:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23fd5b6:	3b08      	subs	r3, #8
 23fd5b8:	3a08      	subs	r2, #8
 23fd5ba:	e7f5      	b.n	23fd5a8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23fd5bc:	d00f      	beq.n	23fd5de <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23fd5be:	4601      	mov	r1, r0
 23fd5c0:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23fd5c2:	428b      	cmp	r3, r1
 23fd5c4:	d00b      	beq.n	23fd5de <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23fd5c6:	b13a      	cbz	r2, 23fd5d8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23fd5c8:	f8d1 c000 	ldr.w	ip, [r1]
 23fd5cc:	f8c2 c000 	str.w	ip, [r2]
 23fd5d0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23fd5d4:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23fd5d8:	3108      	adds	r1, #8
 23fd5da:	3208      	adds	r2, #8
 23fd5dc:	e7f1      	b.n	23fd5c2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23fd5de:	f7fd fb0d 	bl	23fabfc <free>
        data_ = d;
 23fd5e2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd5e4:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd5e6:	e9d6 3100 	ldrd	r3, r1, [r6]
 23fd5ea:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fd5ee:	4298      	cmp	r0, r3
 23fd5f0:	d008      	beq.n	23fd604 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23fd5f2:	681a      	ldr	r2, [r3, #0]
 23fd5f4:	3408      	adds	r4, #8
 23fd5f6:	f844 2c08 	str.w	r2, [r4, #-8]
 23fd5fa:	685a      	ldr	r2, [r3, #4]
 23fd5fc:	3308      	adds	r3, #8
 23fd5fe:	f844 2c04 	str.w	r2, [r4, #-4]
 23fd602:	e7f4      	b.n	23fd5ee <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23fd604:	6069      	str	r1, [r5, #4]
}
 23fd606:	4628      	mov	r0, r5
 23fd608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd60a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd60a:	b570      	push	{r4, r5, r6, lr}
 23fd60c:	4604      	mov	r4, r0
        capacity_(0) {
 23fd60e:	2000      	movs	r0, #0
 23fd610:	e9c4 0000 	strd	r0, r0, [r4]
 23fd614:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd616:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd618:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd61a:	4286      	cmp	r6, r0
 23fd61c:	dd12      	ble.n	23fd644 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fd61e:	0071      	lsls	r1, r6, #1
 23fd620:	f7fd fafa 	bl	23fac18 <realloc>
            if (!d) {
 23fd624:	b170      	cbz	r0, 23fd644 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fd626:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd628:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd62a:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fd62e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fd632:	429a      	cmp	r2, r3
 23fd634:	d004      	beq.n	23fd640 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fd636:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fd63a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fd63e:	e7f8      	b.n	23fd632 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fd640:	686b      	ldr	r3, [r5, #4]
 23fd642:	6063      	str	r3, [r4, #4]
}
 23fd644:	4620      	mov	r0, r4
 23fd646:	bd70      	pop	{r4, r5, r6, pc}

023fd648 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fd648:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fd64a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fd64c:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fd64e:	b923      	cbnz	r3, 23fd65a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
 23fd650:	6803      	ldr	r3, [r0, #0]
 23fd652:	6818      	ldr	r0, [r3, #0]
 23fd654:	b108      	cbz	r0, 23fd65a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fd656:	f7fd fad1 	bl	23fabfc <free>
            func_();
        }
    }
 23fd65a:	4620      	mov	r0, r4
 23fd65c:	bd10      	pop	{r4, pc}

023fd65e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fd65e:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fd660:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fd662:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fd664:	b923      	cbnz	r3, 23fd670 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
 23fd666:	6803      	ldr	r3, [r0, #0]
 23fd668:	6818      	ldr	r0, [r3, #0]
 23fd66a:	b108      	cbz	r0, 23fd670 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fd66c:	f7fd fac6 	bl	23fabfc <free>
    }
 23fd670:	4620      	mov	r0, r4
 23fd672:	bd10      	pop	{r4, pc}

023fd674 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fd674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fd678:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fd67c:	460f      	mov	r7, r1
 23fd67e:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fd680:	f1b8 0f00 	cmp.w	r8, #0
 23fd684:	d072      	beq.n	23fd76c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fd686:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fd688:	2d00      	cmp	r5, #0
 23fd68a:	d06f      	beq.n	23fd76c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fd68c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fd690:	231f      	movs	r3, #31
 23fd692:	2200      	movs	r2, #0
 23fd694:	21ff      	movs	r1, #255	; 0xff
 23fd696:	4648      	mov	r0, r9
 23fd698:	f7ff fb25 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fd69c:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23fd69e:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fd6a0:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fd6a2:	2200      	movs	r2, #0
 23fd6a4:	4619      	mov	r1, r3
 23fd6a6:	4638      	mov	r0, r7
 23fd6a8:	f7ff fb1d 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fd6ac:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fd6ae:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fd6b0:	d006      	beq.n	23fd6c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fd6b2:	42ae      	cmp	r6, r5
 23fd6b4:	d030      	beq.n	23fd718 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fd6b6:	2400      	movs	r4, #0
    }
 23fd6b8:	4620      	mov	r0, r4
 23fd6ba:	b00f      	add	sp, #60	; 0x3c
 23fd6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fd6c0:	4620      	mov	r0, r4
 23fd6c2:	f7fd fa8d 	bl	23fabe0 <malloc>
            dismissed_(false) {
 23fd6c6:	ab03      	add	r3, sp, #12
 23fd6c8:	9304      	str	r3, [sp, #16]
 23fd6ca:	2300      	movs	r3, #0
 23fd6cc:	4604      	mov	r4, r0
 23fd6ce:	9003      	str	r0, [sp, #12]
 23fd6d0:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fd6d4:	b970      	cbnz	r0, 23fd6f4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fd6d6:	2320      	movs	r3, #32
 23fd6d8:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fd6dc:	4b24      	ldr	r3, [pc, #144]	; (23fd770 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fd6de:	4925      	ldr	r1, [pc, #148]	; (23fd774 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fd6e0:	9300      	str	r3, [sp, #0]
 23fd6e2:	aa06      	add	r2, sp, #24
 23fd6e4:	4603      	mov	r3, r0
 23fd6e6:	2032      	movs	r0, #50	; 0x32
 23fd6e8:	f7fd f962 	bl	23fa9b0 <log_message>
                    return false;
 23fd6ec:	a804      	add	r0, sp, #16
 23fd6ee:	f7ff ffab 	bl	23fd648 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fd6f2:	e7e1      	b.n	23fd6b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fd6f4:	4602      	mov	r2, r0
 23fd6f6:	21ff      	movs	r1, #255	; 0xff
 23fd6f8:	462b      	mov	r3, r5
 23fd6fa:	4648      	mov	r0, r9
 23fd6fc:	f7ff faf3 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fd700:	462a      	mov	r2, r5
 23fd702:	4641      	mov	r1, r8
 23fd704:	9803      	ldr	r0, [sp, #12]
 23fd706:	f001 fead 	bl	23ff464 <memcmp>
 23fd70a:	b118      	cbz	r0, 23fd714 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fd70c:	a804      	add	r0, sp, #16
 23fd70e:	f7ff ff9b 	bl	23fd648 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fd712:	e7ce      	b.n	23fd6b2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fd714:	2401      	movs	r4, #1
 23fd716:	e7e9      	b.n	23fd6ec <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fd718:	4628      	mov	r0, r5
 23fd71a:	f7fd fa61 	bl	23fabe0 <malloc>
 23fd71e:	2400      	movs	r4, #0
 23fd720:	ab03      	add	r3, sp, #12
 23fd722:	4606      	mov	r6, r0
 23fd724:	9003      	str	r0, [sp, #12]
 23fd726:	9304      	str	r3, [sp, #16]
 23fd728:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fd72c:	b978      	cbnz	r0, 23fd74e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fd72e:	2320      	movs	r3, #32
 23fd730:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fd734:	4b0e      	ldr	r3, [pc, #56]	; (23fd770 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fd736:	490f      	ldr	r1, [pc, #60]	; (23fd774 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fd738:	9300      	str	r3, [sp, #0]
 23fd73a:	aa06      	add	r2, sp, #24
 23fd73c:	4603      	mov	r3, r0
 23fd73e:	2032      	movs	r0, #50	; 0x32
 23fd740:	f7fd f936 	bl	23fa9b0 <log_message>
                    return false;
 23fd744:	4634      	mov	r4, r6
 23fd746:	a804      	add	r0, sp, #16
 23fd748:	f7ff ff89 	bl	23fd65e <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fd74c:	e7b4      	b.n	23fd6b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fd74e:	4602      	mov	r2, r0
 23fd750:	21ff      	movs	r1, #255	; 0xff
 23fd752:	462b      	mov	r3, r5
 23fd754:	4638      	mov	r0, r7
 23fd756:	f7ff fac6 	bl	23fcce6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fd75a:	462a      	mov	r2, r5
 23fd75c:	4641      	mov	r1, r8
 23fd75e:	9803      	ldr	r0, [sp, #12]
 23fd760:	f001 fe80 	bl	23ff464 <memcmp>
 23fd764:	2800      	cmp	r0, #0
 23fd766:	d1ee      	bne.n	23fd746 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fd768:	2401      	movs	r4, #1
 23fd76a:	e7ec      	b.n	23fd746 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fd76c:	2401      	movs	r4, #1
 23fd76e:	e7a3      	b.n	23fd6b8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fd770:	023ffb27 	.word	0x023ffb27
 23fd774:	023ffa9f 	.word	0x023ffa9f

023fd778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fd778:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fd77a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fd77c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd77e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd780:	dd03      	ble.n	23fd78a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fd782:	f7fd fa49 	bl	23fac18 <realloc>
            if (!d) {
 23fd786:	b918      	cbnz	r0, 23fd790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fd788:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fd78a:	f7fd fa37 	bl	23fabfc <free>
        T* d = nullptr;
 23fd78e:	2000      	movs	r0, #0
        data_ = d;
 23fd790:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd792:	60a5      	str	r5, [r4, #8]
        return true;
 23fd794:	2001      	movs	r0, #1
 23fd796:	e7f7      	b.n	23fd788 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fd798 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fd798:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fd79a:	6883      	ldr	r3, [r0, #8]
 23fd79c:	428b      	cmp	r3, r1
 23fd79e:	da02      	bge.n	23fd7a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fd7a0:	f7ff ffea 	bl	23fd778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fd7a4:	bd08      	pop	{r3, pc}
    return true;
 23fd7a6:	2001      	movs	r0, #1
 23fd7a8:	e7fc      	b.n	23fd7a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd7aa:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd7ac:	2300      	movs	r3, #0
 23fd7ae:	e9c0 3300 	strd	r3, r3, [r0]
 23fd7b2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd7b4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd7b6:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd7b8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd7ba:	4299      	cmp	r1, r3
 23fd7bc:	dd10      	ble.n	23fd7e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fd7be:	f7ff ffdb 	bl	23fd778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fd7c2:	b168      	cbz	r0, 23fd7e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd7c4:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fd7c8:	6822      	ldr	r2, [r4, #0]
 23fd7ca:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fd7cc:	4299      	cmp	r1, r3
 23fd7ce:	d005      	beq.n	23fd7dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fd7d0:	b10a      	cbz	r2, 23fd7d6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fd7d2:	7818      	ldrb	r0, [r3, #0]
 23fd7d4:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fd7d6:	3301      	adds	r3, #1
 23fd7d8:	3201      	adds	r2, #1
 23fd7da:	e7f7      	b.n	23fd7cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fd7dc:	686b      	ldr	r3, [r5, #4]
 23fd7de:	6063      	str	r3, [r4, #4]
}
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	bd38      	pop	{r3, r4, r5, pc}

023fd7e4 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fd7e4:	b538      	push	{r3, r4, r5, lr}
 23fd7e6:	4604      	mov	r4, r0
 23fd7e8:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fd7ea:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fd7ec:	3008      	adds	r0, #8
 23fd7ee:	f840 3c08 	str.w	r3, [r0, #-8]
 23fd7f2:	684b      	ldr	r3, [r1, #4]
 23fd7f4:	3108      	adds	r1, #8
 23fd7f6:	f840 3c04 	str.w	r3, [r0, #-4]
 23fd7fa:	f7ff ffd6 	bl	23fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fd7fe:	f105 0114 	add.w	r1, r5, #20
 23fd802:	f104 0014 	add.w	r0, r4, #20
 23fd806:	f7ff ffd0 	bl	23fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fd80a:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fd80e:	4620      	mov	r0, r4
 23fd810:	f884 3020 	strb.w	r3, [r4, #32]
 23fd814:	bd38      	pop	{r3, r4, r5, pc}

023fd816 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fd816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd818:	4604      	mov	r4, r0
 23fd81a:	a801      	add	r0, sp, #4
 23fd81c:	f7ff ffc5 	bl	23fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fd820:	9b01      	ldr	r3, [sp, #4]
 23fd822:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd824:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd826:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd828:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd82a:	6062      	str	r2, [r4, #4]
 23fd82c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd82e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd830:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd832:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd834:	9001      	str	r0, [sp, #4]
 23fd836:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fd838:	f7fd f9e0 	bl	23fabfc <free>
 23fd83c:	b004      	add	sp, #16
 23fd83e:	bd10      	pop	{r4, pc}

023fd840 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fd840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd844:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fd846:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fd848:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fd84a:	4419      	add	r1, r3
 23fd84c:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fd84e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fd850:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fd852:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fd854:	dc12      	bgt.n	23fd87c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fd856:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd858:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd85a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd85c:	4631      	mov	r1, r6
 23fd85e:	1bd2      	subs	r2, r2, r7
 23fd860:	1970      	adds	r0, r6, r5
 23fd862:	f001 fe1c 	bl	23ff49e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fd866:	462a      	mov	r2, r5
 23fd868:	4641      	mov	r1, r8
 23fd86a:	4630      	mov	r0, r6
 23fd86c:	f001 fe0a 	bl	23ff484 <memcpy>
    return true;
 23fd870:	2001      	movs	r0, #1
    size_ += n;
 23fd872:	6863      	ldr	r3, [r4, #4]
 23fd874:	442b      	add	r3, r5
 23fd876:	6063      	str	r3, [r4, #4]
}
 23fd878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fd87c:	f7ff ff7c 	bl	23fd778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fd880:	2800      	cmp	r0, #0
 23fd882:	d1e8      	bne.n	23fd856 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fd884:	e7f8      	b.n	23fd878 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fd886 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fd886:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fd888:	460a      	mov	r2, r1
 23fd88a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fd88c:	b510      	push	{r4, lr}
 23fd88e:	4604      	mov	r4, r0
    size_ = 0;
 23fd890:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fd892:	b102      	cbz	r2, 23fd896 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fd894:	b90b      	cbnz	r3, 23fd89a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fd896:	2000      	movs	r0, #0
}
 23fd898:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fd89a:	2bff      	cmp	r3, #255	; 0xff
 23fd89c:	bf28      	it	cs
 23fd89e:	23ff      	movcs	r3, #255	; 0xff
 23fd8a0:	f7ff ffce 	bl	23fd840 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fd8a4:	2800      	cmp	r0, #0
 23fd8a6:	d0f7      	beq.n	23fd898 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fd8a8:	6860      	ldr	r0, [r4, #4]
 23fd8aa:	e7f5      	b.n	23fd898 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fd8ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fd8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd8ae:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd8b0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fd8b4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fd8b6:	4604      	mov	r4, r0
 23fd8b8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd8ba:	da0b      	bge.n	23fd8d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fd8bc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd8be:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd8c0:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd8c2:	1b52      	subs	r2, r2, r5
 23fd8c4:	1c48      	adds	r0, r1, #1
 23fd8c6:	f001 fdea 	bl	23ff49e <memmove>
    new(p) T(std::move(value));
 23fd8ca:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fd8cc:	6863      	ldr	r3, [r4, #4]
 23fd8ce:	3301      	adds	r3, #1
 23fd8d0:	6063      	str	r3, [r4, #4]
}
 23fd8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd8d4:	3101      	adds	r1, #1
 23fd8d6:	f7ff ff4f 	bl	23fd778 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fd8da:	2800      	cmp	r0, #0
 23fd8dc:	d1ee      	bne.n	23fd8bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fd8de:	e7f8      	b.n	23fd8d2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fd8e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd8e0:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fd8e2:	6841      	ldr	r1, [r0, #4]
 23fd8e4:	f7ff bfe2 	b.w	23fd8ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fd8e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fd8e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fd8ec:	4604      	mov	r4, r0
 23fd8ee:	461d      	mov	r5, r3
 23fd8f0:	460f      	mov	r7, r1
 23fd8f2:	ab01      	add	r3, sp, #4
 23fd8f4:	4690      	mov	r8, r2
 23fd8f6:	460a      	mov	r2, r1
 23fd8f8:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fd8fc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fd900:	f7fe fefe 	bl	23fc700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fd904:	1cae      	adds	r6, r5, #2
 23fd906:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fd908:	6863      	ldr	r3, [r4, #4]
 23fd90a:	f1b9 0f00 	cmp.w	r9, #0
 23fd90e:	d126      	bne.n	23fd95e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fd910:	b328      	cbz	r0, 23fd95e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fd912:	4433      	add	r3, r6
 23fd914:	1a1b      	subs	r3, r3, r0
 23fd916:	2bff      	cmp	r3, #255	; 0xff
 23fd918:	d809      	bhi.n	23fd92e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fd91a:	4620      	mov	r0, r4
 23fd91c:	9901      	ldr	r1, [sp, #4]
 23fd91e:	f7ff fcfd 	bl	23fd31c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fd922:	6861      	ldr	r1, [r4, #4]
 23fd924:	4620      	mov	r0, r4
 23fd926:	4431      	add	r1, r6
 23fd928:	f7ff ff36 	bl	23fd798 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fd92c:	b918      	cbnz	r0, 23fd936 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fd92e:	6860      	ldr	r0, [r4, #4]
}
 23fd930:	b003      	add	sp, #12
 23fd932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fd936:	1c6a      	adds	r2, r5, #1
 23fd938:	4620      	mov	r0, r4
 23fd93a:	9901      	ldr	r1, [sp, #4]
 23fd93c:	b2d2      	uxtb	r2, r2
 23fd93e:	f7ff ffb5 	bl	23fd8ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fd942:	9901      	ldr	r1, [sp, #4]
 23fd944:	463a      	mov	r2, r7
 23fd946:	3101      	adds	r1, #1
 23fd948:	4620      	mov	r0, r4
 23fd94a:	f7ff ffaf 	bl	23fd8ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fd94e:	462b      	mov	r3, r5
 23fd950:	4642      	mov	r2, r8
 23fd952:	9901      	ldr	r1, [sp, #4]
 23fd954:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fd956:	4620      	mov	r0, r4
 23fd958:	f7ff ff72 	bl	23fd840 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fd95c:	e7e7      	b.n	23fd92e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fd95e:	18f1      	adds	r1, r6, r3
 23fd960:	29ff      	cmp	r1, #255	; 0xff
 23fd962:	d8e4      	bhi.n	23fd92e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fd964:	4620      	mov	r0, r4
 23fd966:	f7ff ff17 	bl	23fd798 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fd96a:	2800      	cmp	r0, #0
 23fd96c:	d0df      	beq.n	23fd92e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fd96e:	1c69      	adds	r1, r5, #1
 23fd970:	4620      	mov	r0, r4
 23fd972:	b2c9      	uxtb	r1, r1
 23fd974:	f7ff ffb4 	bl	23fd8e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fd978:	4639      	mov	r1, r7
 23fd97a:	4620      	mov	r0, r4
 23fd97c:	f7ff ffb0 	bl	23fd8e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fd980:	462b      	mov	r3, r5
 23fd982:	4642      	mov	r2, r8
 23fd984:	6861      	ldr	r1, [r4, #4]
 23fd986:	e7e6      	b.n	23fd956 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fd988 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fd988:	b430      	push	{r4, r5}
 23fd98a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fd98e:	b11a      	cbz	r2, 23fd998 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fd990:	9502      	str	r5, [sp, #8]
}
 23fd992:	bc30      	pop	{r4, r5}
 23fd994:	f7ff bfa8 	b.w	23fd8e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fd998:	6840      	ldr	r0, [r0, #4]
}
 23fd99a:	bc30      	pop	{r4, r5}
 23fd99c:	4770      	bx	lr

023fd99e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fd99e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fd9a0:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fd9a2:	2206      	movs	r2, #6
 23fd9a4:	e9c0 3300 	strd	r3, r3, [r0]
 23fd9a8:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fd9aa:	9300      	str	r3, [sp, #0]
 23fd9ac:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fd9ae:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fd9b0:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fd9b4:	4619      	mov	r1, r3
 23fd9b6:	f10d 020f 	add.w	r2, sp, #15
 23fd9ba:	f7ff ffe5 	bl	23fd988 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fd9be:	4620      	mov	r0, r4
 23fd9c0:	b004      	add	sp, #16
 23fd9c2:	bd10      	pop	{r4, pc}

023fd9c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fd9c4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd9c8:	4604      	mov	r4, r0
 23fd9ca:	460d      	mov	r5, r1
 23fd9cc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd9ce:	d914      	bls.n	23fd9fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fd9d0:	4290      	cmp	r0, r2
 23fd9d2:	d213      	bcs.n	23fd9fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fd9d4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fd9d8:	1a75      	subs	r5, r6, r1
 23fd9da:	f1a1 0708 	sub.w	r7, r1, #8
 23fd9de:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd9e0:	42b7      	cmp	r7, r6
 23fd9e2:	d018      	beq.n	23fda16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fd9e4:	b11c      	cbz	r4, 23fd9ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fd9e6:	4631      	mov	r1, r6
 23fd9e8:	4620      	mov	r0, r4
 23fd9ea:	f7ff fce2 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fd9ee:	1d30      	adds	r0, r6, #4
 23fd9f0:	f7fd fc42 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fd9f4:	3e08      	subs	r6, #8
 23fd9f6:	3c08      	subs	r4, #8
 23fd9f8:	e7f2      	b.n	23fd9e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fd9fa:	d00c      	beq.n	23fda16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd9fc:	42b5      	cmp	r5, r6
 23fd9fe:	d00a      	beq.n	23fda16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fda00:	b11c      	cbz	r4, 23fda0a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fda02:	4629      	mov	r1, r5
 23fda04:	4620      	mov	r0, r4
 23fda06:	f7ff fcd4 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fda0a:	1d28      	adds	r0, r5, #4
 23fda0c:	f7fd fc34 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fda10:	3508      	adds	r5, #8
 23fda12:	3408      	adds	r4, #8
 23fda14:	e7f2      	b.n	23fd9fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fda16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fda18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fda18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fda1a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fda1c:	6846      	ldr	r6, [r0, #4]
 23fda1e:	4668      	mov	r0, sp
 23fda20:	f7ff fcc7 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fda24:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fda28:	429f      	cmp	r7, r3
 23fda2a:	db12      	blt.n	23fda52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fda2c:	3701      	adds	r7, #1
        if (n > 0) {
 23fda2e:	2f00      	cmp	r7, #0
 23fda30:	dd29      	ble.n	23fda86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fda32:	00f8      	lsls	r0, r7, #3
 23fda34:	f7fd f8d4 	bl	23fabe0 <malloc>
            if (!d) {
 23fda38:	4605      	mov	r5, r0
 23fda3a:	b1f0      	cbz	r0, 23fda7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fda3c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fda40:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fda44:	f7ff ffbe 	bl	23fd9c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fda48:	6820      	ldr	r0, [r4, #0]
 23fda4a:	f7fd f8d7 	bl	23fabfc <free>
        data_ = d;
 23fda4e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fda50:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fda52:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fda54:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fda56:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fda5a:	4631      	mov	r1, r6
 23fda5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fda60:	f106 0008 	add.w	r0, r6, #8
 23fda64:	f7ff ffae 	bl	23fd9c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fda68:	b11e      	cbz	r6, 23fda72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fda6a:	4669      	mov	r1, sp
 23fda6c:	4630      	mov	r0, r6
 23fda6e:	f7ff fca0 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fda72:	2501      	movs	r5, #1
    ++size_;
 23fda74:	6863      	ldr	r3, [r4, #4]
 23fda76:	3301      	adds	r3, #1
 23fda78:	6063      	str	r3, [r4, #4]
 23fda7a:	a801      	add	r0, sp, #4
 23fda7c:	f7fd fbfc 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fda80:	4628      	mov	r0, r5
 23fda82:	b003      	add	sp, #12
 23fda84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fda86:	2500      	movs	r5, #0
 23fda88:	e7de      	b.n	23fda48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fda8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fda8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fda8c:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fda8e:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fda92:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fda94:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fda98:	42a6      	cmp	r6, r4
 23fda9a:	d005      	beq.n	23fdaa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fda9c:	4639      	mov	r1, r7
 23fda9e:	4620      	mov	r0, r4
 23fdaa0:	f7ff fafb 	bl	23fd09a <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fdaa4:	b108      	cbz	r0, 23fdaaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fdaa6:	b914      	cbnz	r4, 23fdaae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fdaa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fdaaa:	3408      	adds	r4, #8
 23fdaac:	e7f4      	b.n	23fda98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fdaae:	1d20      	adds	r0, r4, #4
 23fdab0:	f7fd fbe2 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fdab4:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fdab8:	4620      	mov	r0, r4
 23fdaba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fdabe:	f104 0108 	add.w	r1, r4, #8
 23fdac2:	f7ff ff7f 	bl	23fd9c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fdac6:	686b      	ldr	r3, [r5, #4]
 23fdac8:	3b01      	subs	r3, #1
 23fdaca:	606b      	str	r3, [r5, #4]
    return true;
 23fdacc:	e7ec      	b.n	23fdaa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fdad0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fdad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdad4:	4605      	mov	r5, r0
 23fdad6:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23fdad8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fdada:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fdadc:	f7fe fede 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fdae0:	682e      	ldr	r6, [r5, #0]
 23fdae2:	1ef3      	subs	r3, r6, #3
 23fdae4:	2b0d      	cmp	r3, #13
 23fdae6:	d86a      	bhi.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fdae8:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fdaec:	0078000e 	.word	0x0078000e
 23fdaf0:	00fc0069 	.word	0x00fc0069
 23fdaf4:	00690069 	.word	0x00690069
 23fdaf8:	00690069 	.word	0x00690069
 23fdafc:	00c60069 	.word	0x00c60069
 23fdb00:	00c600c6 	.word	0x00c600c6
 23fdb04:	00c600c6 	.word	0x00c600c6
        return address_;
 23fdb08:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fdb0a:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fdb0e:	3002      	adds	r0, #2
 23fdb10:	f7fe fefa 	bl	23fc908 <_ZNK8particle10BleAddress7isValidEv>
 23fdb14:	b338      	cbz	r0, 23fdb66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fdb16:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fdb18:	89aa      	ldrh	r2, [r5, #12]
 23fdb1a:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fdb1e:	a806      	add	r0, sp, #24
 23fdb20:	801a      	strh	r2, [r3, #0]
 23fdb22:	f7ff fc46 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fdb26:	a906      	add	r1, sp, #24
 23fdb28:	4630      	mov	r0, r6
 23fdb2a:	f7ff ff75 	bl	23fda18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fdb2e:	a807      	add	r0, sp, #28
 23fdb30:	f7fd fba2 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fdb34:	a806      	add	r0, sp, #24
 23fdb36:	f7ff fa55 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fdb3a:	9b06      	ldr	r3, [sp, #24]
 23fdb3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fdb40:	9907      	ldr	r1, [sp, #28]
 23fdb42:	6263      	str	r3, [r4, #36]	; 0x24
 23fdb44:	f7fe fe84 	bl	23fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fdb48:	a807      	add	r0, sp, #28
 23fdb4a:	f7fd fb95 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fdb4e:	2120      	movs	r1, #32
 23fdb50:	2300      	movs	r3, #0
 23fdb52:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23fdb56:	4a6d      	ldr	r2, [pc, #436]	; (23fdd0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23fdb58:	9200      	str	r2, [sp, #0]
 23fdb5a:	2001      	movs	r0, #1
 23fdb5c:	496c      	ldr	r1, [pc, #432]	; (23fdd10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fdb5e:	aa06      	add	r2, sp, #24
 23fdb60:	f7fc ff26 	bl	23fa9b0 <log_message>
 23fdb64:	e02b      	b.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fdb66:	a804      	add	r0, sp, #16
 23fdb68:	f7ff fa3c 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fdb6c:	89aa      	ldrh	r2, [r5, #12]
 23fdb6e:	9b04      	ldr	r3, [sp, #16]
 23fdb70:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fdb72:	6869      	ldr	r1, [r5, #4]
 23fdb74:	9804      	ldr	r0, [sp, #16]
 23fdb76:	3108      	adds	r1, #8
 23fdb78:	3002      	adds	r0, #2
 23fdb7a:	f7fe fea9 	bl	23fc8d0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fdb7e:	a904      	add	r1, sp, #16
 23fdb80:	a806      	add	r0, sp, #24
 23fdb82:	f7ff fc16 	bl	23fd3b2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fdb86:	4630      	mov	r0, r6
 23fdb88:	a906      	add	r1, sp, #24
 23fdb8a:	f7ff ff45 	bl	23fda18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fdb8e:	4605      	mov	r5, r0
 23fdb90:	a807      	add	r0, sp, #28
 23fdb92:	f7fd fb71 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdb96:	b9c5      	cbnz	r5, 23fdbca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fdb98:	2320      	movs	r3, #32
 23fdb9a:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23fdb9e:	4b5d      	ldr	r3, [pc, #372]	; (23fdd14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fdba0:	2001      	movs	r0, #1
 23fdba2:	495b      	ldr	r1, [pc, #364]	; (23fdd10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fdba4:	9300      	str	r3, [sp, #0]
 23fdba6:	aa06      	add	r2, sp, #24
 23fdba8:	462b      	mov	r3, r5
 23fdbaa:	f7fc ff01 	bl	23fa9b0 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fdbae:	9b04      	ldr	r3, [sp, #16]
 23fdbb0:	4629      	mov	r1, r5
 23fdbb2:	8818      	ldrh	r0, [r3, #0]
 23fdbb4:	f7fc fe00 	bl	23fa7b8 <hal_ble_gap_disconnect>
 23fdbb8:	a805      	add	r0, sp, #20
 23fdbba:	f7fd fb5d 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fdbbe:	a803      	add	r0, sp, #12
 23fdbc0:	f7fe fe7a 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fdbc4:	b00f      	add	sp, #60	; 0x3c
 23fdbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23fdbca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fdbcc:	b123      	cbz	r3, 23fdbd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fdbce:	a904      	add	r1, sp, #16
 23fdbd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fdbd4:	f7ff fc2c 	bl	23fd430 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fdbd8:	a805      	add	r0, sp, #20
 23fdbda:	e7b6      	b.n	23fdb4a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fdbdc:	4620      	mov	r0, r4
 23fdbde:	89a9      	ldrh	r1, [r5, #12]
 23fdbe0:	f7ff f913 	bl	23fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fdbe4:	4606      	mov	r6, r0
 23fdbe6:	2800      	cmp	r0, #0
 23fdbe8:	d0e9      	beq.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fdbea:	4601      	mov	r1, r0
 23fdbec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fdbf0:	f7ff fa53 	bl	23fd09a <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fdbf4:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fdbf8:	b148      	cbz	r0, 23fdc0e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fdbfa:	4631      	mov	r1, r6
 23fdbfc:	4640      	mov	r0, r8
 23fdbfe:	f7ff ff44 	bl	23fda8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fdc02:	2220      	movs	r2, #32
 23fdc04:	2300      	movs	r3, #0
 23fdc06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fdc0a:	4a43      	ldr	r2, [pc, #268]	; (23fdd18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fdc0c:	e7a4      	b.n	23fdb58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fdc0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fdc12:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fdc14:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fdc18:	8029      	strh	r1, [r5, #0]
 23fdc1a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fdc1e:	429a      	cmp	r2, r3
 23fdc20:	d003      	beq.n	23fdc2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fdc22:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fdc26:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fdc28:	e7f9      	b.n	23fdc1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fdc2a:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fdc2e:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fdc32:	45b9      	cmp	r9, r7
 23fdc34:	d004      	beq.n	23fdc40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fdc36:	1d38      	adds	r0, r7, #4
 23fdc38:	f7fd fb1e 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdc3c:	3708      	adds	r7, #8
 23fdc3e:	e7f8      	b.n	23fdc32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fdc40:	2300      	movs	r3, #0
 23fdc42:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fdc44:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fdc48:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fdc4c:	45b9      	cmp	r9, r7
 23fdc4e:	d004      	beq.n	23fdc5a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fdc50:	1d38      	adds	r0, r7, #4
 23fdc52:	f7fd fb11 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdc56:	3708      	adds	r7, #8
 23fdc58:	e7f8      	b.n	23fdc4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fdc5a:	2300      	movs	r3, #0
 23fdc5c:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fdc5e:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fdc60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fdc62:	b123      	cbz	r3, 23fdc6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fdc64:	4631      	mov	r1, r6
 23fdc66:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fdc6a:	f7ff fbe1 	bl	23fd430 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fdc6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fdc72:	6833      	ldr	r3, [r6, #0]
 23fdc74:	801a      	strh	r2, [r3, #0]
 23fdc76:	e7c0      	b.n	23fdbfa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fdc78:	4620      	mov	r0, r4
 23fdc7a:	89a9      	ldrh	r1, [r5, #12]
 23fdc7c:	f7ff f8c5 	bl	23fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fdc80:	2800      	cmp	r0, #0
 23fdc82:	d09c      	beq.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fdc84:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fdc86:	2b00      	cmp	r3, #0
 23fdc88:	d099      	beq.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fdc8a:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fdc8c:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fdc8e:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fdc92:	d001      	beq.n	23fdc98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fdc94:	2e10      	cmp	r6, #16
 23fdc96:	d117      	bne.n	23fdcc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23fdc98:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fdc9a:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fdc9c:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fdc9e:	2506      	movs	r5, #6
                        };
 23fdca0:	f88d 3015 	strb.w	r3, [sp, #21]
 23fdca4:	9104      	str	r1, [sp, #16]
 23fdca6:	ab09      	add	r3, sp, #36	; 0x24
 23fdca8:	f88d 2014 	strb.w	r2, [sp, #20]
 23fdcac:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fdcae:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fdcb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fdcb6:	9508      	str	r5, [sp, #32]
 23fdcb8:	e883 0003 	stmia.w	r3, {r0, r1}
 23fdcbc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fdcbe:	a906      	add	r1, sp, #24
 23fdcc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fdcc4:	4798      	blx	r3
 23fdcc6:	e77a      	b.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fdcc8:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fdcca:	bf01      	itttt	eq
 23fdccc:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fdcce:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fdcd0:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fdcd4:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fdcd6:	bf1d      	ittte	ne
 23fdcd8:	461a      	movne	r2, r3
 23fdcda:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fdcdc:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fdcde:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fdce2:	e7dd      	b.n	23fdca0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fdce4:	89a9      	ldrh	r1, [r5, #12]
 23fdce6:	4620      	mov	r0, r4
 23fdce8:	f7ff f88f 	bl	23fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fdcec:	4601      	mov	r1, r0
 23fdcee:	2800      	cmp	r0, #0
 23fdcf0:	f43f af65 	beq.w	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fdcf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fdcf6:	2b00      	cmp	r3, #0
 23fdcf8:	f43f af61 	beq.w	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fdcfc:	686b      	ldr	r3, [r5, #4]
 23fdcfe:	aa06      	add	r2, sp, #24
 23fdd00:	9306      	str	r3, [sp, #24]
 23fdd02:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fdd06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fdd08:	4798      	blx	r3
 23fdd0a:	e758      	b.n	23fdbbe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fdd0c:	023ffb68 	.word	0x023ffb68
 23fdd10:	023ffa9f 	.word	0x023ffa9f
 23fdd14:	023ffb42 	.word	0x023ffb42
 23fdd18:	023ffb72 	.word	0x023ffb72

023fdd1c <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fdd1c:	b570      	push	{r4, r5, r6, lr}
 23fdd1e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fdd20:	3064      	adds	r0, #100	; 0x64
 23fdd22:	f7fd fbaf 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
 23fdd26:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fdd2a:	f7fd fbab 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
 23fdd2e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fdd32:	f7fd fba7 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
 23fdd36:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fdd3a:	f7fd fba3 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fdd3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fdd42:	f7fd fa99 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdd46:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fdd4a:	f7fd fa95 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fdd4e:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fdd52:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fdd56:	42ae      	cmp	r6, r5
 23fdd58:	d004      	beq.n	23fdd64 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fdd5a:	1d28      	adds	r0, r5, #4
 23fdd5c:	f7fd fa8c 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdd60:	3508      	adds	r5, #8
 23fdd62:	e7f8      	b.n	23fdd56 <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fdd64:	69a0      	ldr	r0, [r4, #24]
 23fdd66:	f7fc ff49 	bl	23fabfc <free>
 23fdd6a:	f104 000c 	add.w	r0, r4, #12
 23fdd6e:	f7ff fb43 	bl	23fd3f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fdd72:	4620      	mov	r0, r4
 23fdd74:	f7ff fb2e 	bl	23fd3d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fdd78:	4620      	mov	r0, r4
 23fdd7a:	bd70      	pop	{r4, r5, r6, pc}

023fdd7c <__tcf_0>:
    static BleLocalDevice instance;
 23fdd7c:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fdd7e:	4b06      	ldr	r3, [pc, #24]	; (23fdd98 <__tcf_0+0x1c>)
 23fdd80:	681c      	ldr	r4, [r3, #0]
 23fdd82:	b144      	cbz	r4, 23fdd96 <__tcf_0+0x1a>
	delete __ptr;
 23fdd84:	4620      	mov	r0, r4
 23fdd86:	f7ff ffc9 	bl	23fdd1c <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fdd8a:	4620      	mov	r0, r4
 23fdd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fdd90:	2174      	movs	r1, #116	; 0x74
 23fdd92:	f7fc b9a0 	b.w	23fa0d6 <_ZdlPvj>
 23fdd96:	bd10      	pop	{r4, pc}
 23fdd98:	1007aeec 	.word	0x1007aeec

023fdd9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fdd9c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fdd9e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fdda0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdda2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdda4:	dd05      	ble.n	23fddb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fdda6:	2114      	movs	r1, #20
 23fdda8:	4369      	muls	r1, r5
 23fddaa:	f7fc ff35 	bl	23fac18 <realloc>
            if (!d) {
 23fddae:	b918      	cbnz	r0, 23fddb8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fddb0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fddb2:	f7fc ff23 	bl	23fabfc <free>
        T* d = nullptr;
 23fddb6:	2000      	movs	r0, #0
        data_ = d;
 23fddb8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fddba:	60a5      	str	r5, [r4, #8]
        return true;
 23fddbc:	2001      	movs	r0, #1
 23fddbe:	e7f7      	b.n	23fddb0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fddc0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fddc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fddc4:	2400      	movs	r4, #0
 23fddc6:	e9c0 4400 	strd	r4, r4, [r0]
 23fddca:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fddcc:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fddce:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fddd0:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fddd2:	42a1      	cmp	r1, r4
 23fddd4:	dd1c      	ble.n	23fde10 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fddd6:	f7ff ffe1 	bl	23fdd9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fddda:	b1c8      	cbz	r0, 23fde10 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fdddc:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fdde0:	f04f 0c14 	mov.w	ip, #20
 23fdde4:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fdde8:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fddec:	eb09 0504 	add.w	r5, r9, r4
 23fddf0:	45ac      	cmp	ip, r5
 23fddf2:	d00a      	beq.n	23fde0a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fddf4:	eb1e 0604 	adds.w	r6, lr, r4
 23fddf8:	bf1e      	ittt	ne
 23fddfa:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fddfc:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fddfe:	682b      	ldrne	r3, [r5, #0]
 23fde00:	f104 0414 	add.w	r4, r4, #20
 23fde04:	bf18      	it	ne
 23fde06:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fde08:	e7f0      	b.n	23fddec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fde0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fde0e:	607b      	str	r3, [r7, #4]
}
 23fde10:	4638      	mov	r0, r7
 23fde12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fde16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fde1a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fde1c:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fde1e:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fde22:	19e9      	adds	r1, r5, r7
 23fde24:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fde26:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fde28:	dc17      	bgt.n	23fde5a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fde2a:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fde2c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fde2e:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fde30:	fb03 f907 	mul.w	r9, r3, r7
 23fde34:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fde36:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde38:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fde3a:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde3c:	4631      	mov	r1, r6
 23fde3e:	eb06 0009 	add.w	r0, r6, r9
 23fde42:	f001 fb2c 	bl	23ff49e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fde46:	464a      	mov	r2, r9
 23fde48:	4641      	mov	r1, r8
 23fde4a:	4630      	mov	r0, r6
 23fde4c:	f001 fb1a 	bl	23ff484 <memcpy>
    size_ += n;
 23fde50:	6863      	ldr	r3, [r4, #4]
 23fde52:	443b      	add	r3, r7
 23fde54:	6063      	str	r3, [r4, #4]
}
 23fde56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fde5a:	f7ff ff9f 	bl	23fdd9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fde5e:	2800      	cmp	r0, #0
 23fde60:	d1e3      	bne.n	23fde2a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fde62:	e7f8      	b.n	23fde56 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fde64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fde64:	b082      	sub	sp, #8
 23fde66:	b570      	push	{r4, r5, r6, lr}
 23fde68:	460c      	mov	r4, r1
 23fde6a:	a904      	add	r1, sp, #16
 23fde6c:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde70:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fde74:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fde76:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde78:	da17      	bge.n	23fdeaa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fde7a:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fde7c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fde7e:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fde82:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fde84:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde86:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fde88:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde8a:	4621      	mov	r1, r4
 23fde8c:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fde8e:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fde90:	f001 fb05 	bl	23ff49e <memmove>
    new(p) T(std::move(value));
 23fde94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fde96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fde98:	6833      	ldr	r3, [r6, #0]
 23fde9a:	6023      	str	r3, [r4, #0]
    ++size_;
 23fde9c:	686b      	ldr	r3, [r5, #4]
 23fde9e:	3301      	adds	r3, #1
 23fdea0:	606b      	str	r3, [r5, #4]
}
 23fdea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fdea6:	b002      	add	sp, #8
 23fdea8:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdeaa:	3101      	adds	r1, #1
 23fdeac:	f7ff ff76 	bl	23fdd9c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fdeb0:	2800      	cmp	r0, #0
 23fdeb2:	d1e2      	bne.n	23fde7a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fdeb4:	e7f5      	b.n	23fdea2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fdeb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fdeba:	2400      	movs	r4, #0
 23fdebc:	4605      	mov	r5, r0
 23fdebe:	460f      	mov	r7, r1
 23fdec0:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fdec2:	1e93      	subs	r3, r2, #2
 23fdec4:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fdec8:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fdeca:	b2db      	uxtb	r3, r3
 23fdecc:	6084      	str	r4, [r0, #8]
 23fdece:	9305      	str	r3, [sp, #20]
    return size_;
 23fded0:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fded2:	428c      	cmp	r4, r1
 23fded4:	da72      	bge.n	23fdfbc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fded6:	6838      	ldr	r0, [r7, #0]
 23fded8:	4642      	mov	r2, r8
 23fdeda:	ab07      	add	r3, sp, #28
 23fdedc:	1b09      	subs	r1, r1, r4
 23fdede:	4420      	add	r0, r4
 23fdee0:	f7fe fc0e 	bl	23fc700 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fdee4:	4606      	mov	r6, r0
 23fdee6:	2800      	cmp	r0, #0
 23fdee8:	d068      	beq.n	23fdfbc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fdeea:	9b05      	ldr	r3, [sp, #20]
 23fdeec:	2b01      	cmp	r3, #1
 23fdeee:	d82f      	bhi.n	23fdf50 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fdef0:	f04f 0900 	mov.w	r9, #0
 23fdef4:	f1a0 0b02 	sub.w	fp, r0, #2
 23fdef8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fdefc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fdf00:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fdf02:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fdf04:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fdf06:	d055      	beq.n	23fdfb4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fdf08:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fdf0a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fdf0e:	4413      	add	r3, r2
 23fdf10:	78d9      	ldrb	r1, [r3, #3]
 23fdf12:	789b      	ldrb	r3, [r3, #2]
 23fdf14:	a808      	add	r0, sp, #32
 23fdf16:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fdf1a:	f7fe fdce 	bl	23fcaba <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fdf1e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fdf22:	f10d 0e20 	add.w	lr, sp, #32
 23fdf26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fdf2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fdf2e:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fdf32:	f109 0901 	add.w	r9, r9, #1
 23fdf36:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fdf3a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fdf3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fdf42:	ab0d      	add	r3, sp, #52	; 0x34
 23fdf44:	4628      	mov	r0, r5
 23fdf46:	cb0c      	ldmia	r3, {r2, r3}
 23fdf48:	6869      	ldr	r1, [r5, #4]
 23fdf4a:	f7ff ff8b 	bl	23fde64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fdf4e:	e7d7      	b.n	23fdf00 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fdf50:	f1a8 0306 	sub.w	r3, r8, #6
 23fdf54:	2b01      	cmp	r3, #1
 23fdf56:	d82d      	bhi.n	23fdfb4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fdf58:	f04f 0900 	mov.w	r9, #0
 23fdf5c:	f1a0 0b02 	sub.w	fp, r0, #2
 23fdf60:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23fdf64:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23fdf68:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fdf6a:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fdf6c:	d022      	beq.n	23fdfb4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fdf6e:	3302      	adds	r3, #2
    return data_[i];
 23fdf70:	6839      	ldr	r1, [r7, #0]
 23fdf72:	4423      	add	r3, r4
 23fdf74:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23fdf78:	2201      	movs	r2, #1
 23fdf7a:	4419      	add	r1, r3
 23fdf7c:	a808      	add	r0, sp, #32
 23fdf7e:	f7fe fd7d 	bl	23fca7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23fdf82:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fdf86:	f10d 0e20 	add.w	lr, sp, #32
 23fdf8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fdf8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fdf92:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fdf96:	f109 0901 	add.w	r9, r9, #1
 23fdf9a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fdf9e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fdfa2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fdfa6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23fdfaa:	4628      	mov	r0, r5
 23fdfac:	6869      	ldr	r1, [r5, #4]
 23fdfae:	f7ff ff59 	bl	23fde64 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fdfb2:	e7d9      	b.n	23fdf68 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fdfb4:	9b07      	ldr	r3, [sp, #28]
 23fdfb6:	441c      	add	r4, r3
 23fdfb8:	4434      	add	r4, r6
 23fdfba:	e789      	b.n	23fded0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23fdfbc:	4628      	mov	r0, r5
 23fdfbe:	b013      	add	sp, #76	; 0x4c
 23fdfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fdfc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23fdfc4:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23fdfc6:	b530      	push	{r4, r5, lr}
 23fdfc8:	4604      	mov	r4, r0
 23fdfca:	460d      	mov	r5, r1
 23fdfcc:	b085      	sub	sp, #20
 23fdfce:	e9c0 3300 	strd	r3, r3, [r0]
 23fdfd2:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fdfd4:	2202      	movs	r2, #2
 23fdfd6:	a801      	add	r0, sp, #4
 23fdfd8:	f7ff ff6d 	bl	23fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fdfdc:	a901      	add	r1, sp, #4
 23fdfde:	4620      	mov	r0, r4
 23fdfe0:	f7ff ff19 	bl	23fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fdfe4:	a801      	add	r0, sp, #4
 23fdfe6:	f7ff f94e 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fdfea:	2202      	movs	r2, #2
 23fdfec:	4629      	mov	r1, r5
 23fdfee:	a801      	add	r0, sp, #4
 23fdff0:	f7ff ff61 	bl	23fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fdff4:	a901      	add	r1, sp, #4
 23fdff6:	4620      	mov	r0, r4
 23fdff8:	f7ff ff0d 	bl	23fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fdffc:	a801      	add	r0, sp, #4
 23fdffe:	f7ff f942 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23fe002:	2203      	movs	r2, #3
 23fe004:	4629      	mov	r1, r5
 23fe006:	a801      	add	r0, sp, #4
 23fe008:	f7ff ff55 	bl	23fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe00c:	a901      	add	r1, sp, #4
 23fe00e:	4620      	mov	r0, r4
 23fe010:	f7ff ff01 	bl	23fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe014:	a801      	add	r0, sp, #4
 23fe016:	f7ff f936 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23fe01a:	2206      	movs	r2, #6
 23fe01c:	4629      	mov	r1, r5
 23fe01e:	a801      	add	r0, sp, #4
 23fe020:	f7ff ff49 	bl	23fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe024:	a901      	add	r1, sp, #4
 23fe026:	4620      	mov	r0, r4
 23fe028:	f7ff fef5 	bl	23fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe02c:	a801      	add	r0, sp, #4
 23fe02e:	f7ff f92a 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23fe032:	2207      	movs	r2, #7
 23fe034:	4629      	mov	r1, r5
 23fe036:	a801      	add	r0, sp, #4
 23fe038:	f7ff ff3d 	bl	23fdeb6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe03c:	4620      	mov	r0, r4
 23fe03e:	a901      	add	r1, sp, #4
 23fe040:	f7ff fee9 	bl	23fde16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe044:	a801      	add	r0, sp, #4
 23fe046:	f7ff f91e 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fe04a:	4620      	mov	r0, r4
 23fe04c:	b005      	add	sp, #20
 23fe04e:	bd30      	pop	{r4, r5, pc}

023fe050 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fe050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe054:	b085      	sub	sp, #20
 23fe056:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe058:	4601      	mov	r1, r0
 23fe05a:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fe05c:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe05e:	f7ff ffb1 	bl	23fdfc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_ + size_;
 23fe062:	f04f 0e14 	mov.w	lr, #20
 23fe066:	2700      	movs	r7, #0
    return data_;
 23fe068:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
 23fe06a:	9b02      	ldr	r3, [sp, #8]
 23fe06c:	fb0e 6c03 	mla	ip, lr, r3, r6
    for (const auto& uuid : foundUuids) {
 23fe070:	45b4      	cmp	ip, r6
 23fe072:	d00d      	beq.n	23fe090 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
 23fe074:	45b9      	cmp	r9, r7
 23fe076:	f106 0614 	add.w	r6, r6, #20
 23fe07a:	d009      	beq.n	23fe090 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
 23fe07c:	fb0e 8407 	mla	r4, lr, r7, r8
 23fe080:	f1a6 0514 	sub.w	r5, r6, #20
 23fe084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe088:	682b      	ldr	r3, [r5, #0]
 23fe08a:	3701      	adds	r7, #1
 23fe08c:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
 23fe08e:	e7ef      	b.n	23fe070 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe090:	a801      	add	r0, sp, #4
 23fe092:	f7ff f8f8 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fe096:	4638      	mov	r0, r7
 23fe098:	b005      	add	sp, #20
 23fe09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe09e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23fe09e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe0a2:	b08b      	sub	sp, #44	; 0x2c
 23fe0a4:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fe0a6:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23fe0aa:	a801      	add	r0, sp, #4
 23fe0ac:	f7ff fe88 	bl	23fddc0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23fe0b0:	9b02      	ldr	r3, [sp, #8]
 23fe0b2:	2b00      	cmp	r3, #0
 23fe0b4:	dd4a      	ble.n	23fe14c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fe0b6:	f104 0114 	add.w	r1, r4, #20
 23fe0ba:	a804      	add	r0, sp, #16
 23fe0bc:	f7ff ff82 	bl	23fdfc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fe0c0:	f104 0108 	add.w	r1, r4, #8
 23fe0c4:	a807      	add	r0, sp, #28
 23fe0c6:	f7ff ff7d 	bl	23fdfc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23fe0ca:	9d05      	ldr	r5, [sp, #20]
 23fe0cc:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23fe0ce:	2d00      	cmp	r5, #0
 23fe0d0:	dc01      	bgt.n	23fe0d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23fe0d2:	2e00      	cmp	r6, #0
 23fe0d4:	dd38      	ble.n	23fe148 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23fe0d6:	2314      	movs	r3, #20
    return data_;
 23fe0d8:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23fe0da:	9f02      	ldr	r7, [sp, #8]
 23fe0dc:	4692      	mov	sl, r2
    return data_;
 23fe0de:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23fe0e2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23fe0e6:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23fe0ea:	fb03 8505 	mla	r5, r3, r5, r8
 23fe0ee:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23fe0f2:	45ba      	cmp	sl, r7
 23fe0f4:	d028      	beq.n	23fe148 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23fe0f6:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23fe0f8:	45ab      	cmp	fp, r5
 23fe0fa:	d015      	beq.n	23fe128 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23fe0fc:	4659      	mov	r1, fp
 23fe0fe:	4650      	mov	r0, sl
 23fe100:	f7fe fce5 	bl	23fcace <_ZNK8particle7BleUuideqERKS0_>
 23fe104:	f10b 0b14 	add.w	fp, fp, #20
 23fe108:	4604      	mov	r4, r0
 23fe10a:	2800      	cmp	r0, #0
 23fe10c:	d0f4      	beq.n	23fe0f8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fe10e:	a807      	add	r0, sp, #28
 23fe110:	f7ff f8b9 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fe114:	a804      	add	r0, sp, #16
 23fe116:	f7ff f8b6 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fe11a:	a801      	add	r0, sp, #4
 23fe11c:	f7ff f8b3 	bl	23fd286 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fe120:	4620      	mov	r0, r4
 23fe122:	b00b      	add	sp, #44	; 0x2c
 23fe124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe128:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fe12a:	45b3      	cmp	fp, r6
 23fe12c:	d009      	beq.n	23fe142 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fe12e:	4659      	mov	r1, fp
 23fe130:	4650      	mov	r0, sl
 23fe132:	f7fe fccc 	bl	23fcace <_ZNK8particle7BleUuideqERKS0_>
 23fe136:	f10b 0b14 	add.w	fp, fp, #20
 23fe13a:	4604      	mov	r4, r0
 23fe13c:	2800      	cmp	r0, #0
 23fe13e:	d0f4      	beq.n	23fe12a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fe140:	e7e5      	b.n	23fe10e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fe142:	f10a 0a14 	add.w	sl, sl, #20
 23fe146:	e7d4      	b.n	23fe0f2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fe148:	2400      	movs	r4, #0
 23fe14a:	e7e0      	b.n	23fe10e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fe14c:	2401      	movs	r4, #1
 23fe14e:	e7e4      	b.n	23fe11a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fe150 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23fe150:	b538      	push	{r3, r4, r5, lr}
 23fe152:	4605      	mov	r5, r0
 23fe154:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23fe156:	f7fd f99e 	bl	23fb496 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe15a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe15c:	68a2      	ldr	r2, [r4, #8]
 23fe15e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe160:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe162:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe164:	68e2      	ldr	r2, [r4, #12]
 23fe166:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe168:	60e3      	str	r3, [r4, #12]
      }
 23fe16a:	bd38      	pop	{r3, r4, r5, pc}

023fe16c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23fe16c:	2300      	movs	r3, #0
      operator=(const function& __x)
 23fe16e:	b530      	push	{r4, r5, lr}
 23fe170:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23fe172:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe174:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23fe176:	4605      	mov	r5, r0
 23fe178:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23fe17a:	b133      	cbz	r3, 23fe18a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe17c:	2202      	movs	r2, #2
 23fe17e:	4668      	mov	r0, sp
 23fe180:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe182:	68e3      	ldr	r3, [r4, #12]
 23fe184:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23fe186:	68a3      	ldr	r3, [r4, #8]
 23fe188:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23fe18a:	4629      	mov	r1, r5
 23fe18c:	4668      	mov	r0, sp
 23fe18e:	f7ff ffdf 	bl	23fe150 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe192:	4668      	mov	r0, sp
 23fe194:	f7fd f976 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
      }
 23fe198:	b005      	add	sp, #20
 23fe19a:	bd30      	pop	{r4, r5, pc}

023fe19c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
 23fe19c:	b538      	push	{r3, r4, r5, lr}
 23fe19e:	460d      	mov	r5, r1
      { return _M_ptr; }
 23fe1a0:	6801      	ldr	r1, [r0, #0]
 23fe1a2:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
 23fe1a4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 23fe1a6:	b123      	cbz	r3, 23fe1b2 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
 23fe1a8:	6828      	ldr	r0, [r5, #0]
 23fe1aa:	314c      	adds	r1, #76	; 0x4c
 23fe1ac:	304c      	adds	r0, #76	; 0x4c
 23fe1ae:	f7ff ffdd 	bl	23fe16c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe1b2:	4620      	mov	r0, r4
 23fe1b4:	682b      	ldr	r3, [r5, #0]
 23fe1b6:	f840 3b04 	str.w	r3, [r0], #4
 23fe1ba:	6869      	ldr	r1, [r5, #4]
 23fe1bc:	f7fe fb48 	bl	23fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
 23fe1c0:	4620      	mov	r0, r4
 23fe1c2:	bd38      	pop	{r3, r4, r5, pc}

023fe1c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fe1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe1c8:	4604      	mov	r4, r0
 23fe1ca:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fe1cc:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fe1ce:	460e      	mov	r6, r1
 23fe1d0:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fe1d2:	f7fe fb63 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fe1d6:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fe1d8:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fe1dc:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
 23fe1e0:	4544      	cmp	r4, r8
 23fe1e2:	46a1      	mov	r9, r4
 23fe1e4:	d016      	beq.n	23fe214 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
 23fe1e6:	4621      	mov	r1, r4
 23fe1e8:	a801      	add	r0, sp, #4
 23fe1ea:	f7fe fe39 	bl	23fce60 <_ZNK8particle17BleCharacteristic4UUIDEv>
 23fe1ee:	4639      	mov	r1, r7
 23fe1f0:	a801      	add	r0, sp, #4
 23fe1f2:	f7fe fc6c 	bl	23fcace <_ZNK8particle7BleUuideqERKS0_>
 23fe1f6:	3408      	adds	r4, #8
 23fe1f8:	4605      	mov	r5, r0
 23fe1fa:	2800      	cmp	r0, #0
 23fe1fc:	d0f0      	beq.n	23fe1e0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
 23fe1fe:	4649      	mov	r1, r9
 23fe200:	4630      	mov	r0, r6
 23fe202:	f7ff ffcb 	bl	23fe19c <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
 23fe206:	4668      	mov	r0, sp
 23fe208:	f7fe fb56 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe20c:	4628      	mov	r0, r5
 23fe20e:	b007      	add	sp, #28
 23fe210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
 23fe214:	2500      	movs	r5, #0
 23fe216:	e7f6      	b.n	23fe206 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

023fe218 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe218:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe21a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe21c:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe21e:	344c      	adds	r4, #76	; 0x4c
 23fe220:	b1b9      	cbz	r1, 23fe252 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
 23fe222:	e9cd 1200 	strd	r1, r2, [sp]
 23fe226:	a802      	add	r0, sp, #8
 23fe228:	4669      	mov	r1, sp
 23fe22a:	f7ff f88b 	bl	23fd344 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fe22e:	2300      	movs	r3, #0
	__x.swap(*this);
 23fe230:	a906      	add	r1, sp, #24
 23fe232:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 23fe234:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
 23fe236:	f7ff ff8b 	bl	23fe150 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fe23a:	4621      	mov	r1, r4
 23fe23c:	a806      	add	r0, sp, #24
 23fe23e:	f7ff ff87 	bl	23fe150 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe242:	a806      	add	r0, sp, #24
 23fe244:	f7fd f91e 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
 23fe248:	a802      	add	r0, sp, #8
 23fe24a:	f7fd f91b 	bl	23fb484 <_ZNSt14_Function_baseD1Ev>
}
 23fe24e:	b00a      	add	sp, #40	; 0x28
 23fe250:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fe252:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
 23fe254:	e7eb      	b.n	23fe22e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

023fe256 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe256:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe25a:	4604      	mov	r4, r0
 23fe25c:	460d      	mov	r5, r1
 23fe25e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe260:	d914      	bls.n	23fe28c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe262:	4290      	cmp	r0, r2
 23fe264:	d213      	bcs.n	23fe28e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe266:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe26a:	1a75      	subs	r5, r6, r1
 23fe26c:	f1a1 0708 	sub.w	r7, r1, #8
 23fe270:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe272:	42b7      	cmp	r7, r6
 23fe274:	d018      	beq.n	23fe2a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe276:	b11c      	cbz	r4, 23fe280 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe278:	4631      	mov	r1, r6
 23fe27a:	4620      	mov	r0, r4
 23fe27c:	f7ff f88f 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fe280:	1d30      	adds	r0, r6, #4
 23fe282:	f7fc fff9 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe286:	3e08      	subs	r6, #8
 23fe288:	3c08      	subs	r4, #8
 23fe28a:	e7f2      	b.n	23fe272 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe28c:	d00c      	beq.n	23fe2a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe28e:	42b5      	cmp	r5, r6
 23fe290:	d00a      	beq.n	23fe2a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe292:	b11c      	cbz	r4, 23fe29c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe294:	4629      	mov	r1, r5
 23fe296:	4620      	mov	r0, r4
 23fe298:	f7ff f881 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe29c:	1d28      	adds	r0, r5, #4
 23fe29e:	f7fc ffeb 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe2a2:	3508      	adds	r5, #8
 23fe2a4:	3408      	adds	r4, #8
 23fe2a6:	e7f2      	b.n	23fe28e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe2aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe2aa:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe2ac:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe2ae:	4605      	mov	r5, r0
        if (n > 0) {
 23fe2b0:	dd11      	ble.n	23fe2d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe2b2:	00f0      	lsls	r0, r6, #3
 23fe2b4:	f7fc fc94 	bl	23fabe0 <malloc>
            if (!d) {
 23fe2b8:	4604      	mov	r4, r0
 23fe2ba:	b158      	cbz	r0, 23fe2d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe2bc:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe2c0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe2c4:	f7ff ffc7 	bl	23fe256 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe2c8:	6828      	ldr	r0, [r5, #0]
 23fe2ca:	f7fc fc97 	bl	23fabfc <free>
        return true;
 23fe2ce:	2001      	movs	r0, #1
        data_ = d;
 23fe2d0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe2d2:	60ae      	str	r6, [r5, #8]
    }
 23fe2d4:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe2d6:	2400      	movs	r4, #0
 23fe2d8:	e7f6      	b.n	23fe2c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fe2da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fe2da:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fe2e0:	e9c0 3300 	strd	r3, r3, [r0]
 23fe2e4:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2e6:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe2e8:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2ea:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe2ec:	4299      	cmp	r1, r3
 23fe2ee:	dd13      	ble.n	23fe318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fe2f0:	f7ff ffdb 	bl	23fe2aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe2f4:	b180      	cbz	r0, 23fe318 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe2f6:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fe2fa:	6827      	ldr	r7, [r4, #0]
 23fe2fc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fe300:	45b0      	cmp	r8, r6
 23fe302:	d007      	beq.n	23fe314 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fe304:	b11f      	cbz	r7, 23fe30e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fe306:	4631      	mov	r1, r6
 23fe308:	4638      	mov	r0, r7
 23fe30a:	f7ff f848 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23fe30e:	3608      	adds	r6, #8
 23fe310:	3708      	adds	r7, #8
 23fe312:	e7f5      	b.n	23fe300 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fe314:	686b      	ldr	r3, [r5, #4]
 23fe316:	6063      	str	r3, [r4, #4]
}
 23fe318:	4620      	mov	r0, r4
 23fe31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe31e <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
 23fe31e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe320:	460d      	mov	r5, r1
 23fe322:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe324:	a801      	add	r0, sp, #4
 23fe326:	f7fe fab9 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
 23fe32a:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
 23fe32c:	4620      	mov	r0, r4
 23fe32e:	310c      	adds	r1, #12
 23fe330:	f7ff ffd3 	bl	23fe2da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fe334:	a801      	add	r0, sp, #4
 23fe336:	f7fe fabf 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe33a:	4620      	mov	r0, r4
 23fe33c:	b003      	add	sp, #12
 23fe33e:	bd30      	pop	{r4, r5, pc}

023fe340 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe340:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
 23fe342:	680b      	ldr	r3, [r1, #0]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe344:	4605      	mov	r5, r0
    if (!impl()->servicesDiscovered()) {
 23fe346:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe348:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
 23fe34a:	b933      	cbnz	r3, 23fe35a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
 23fe34c:	4608      	mov	r0, r1
 23fe34e:	f7fe fa39 	bl	23fc7c4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
 23fe352:	b910      	cbnz	r0, 23fe35a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        servicesDiscovered_ = discovered;
 23fe354:	2201      	movs	r2, #1
      { return _M_ptr; }
 23fe356:	6823      	ldr	r3, [r4, #0]
 23fe358:	729a      	strb	r2, [r3, #10]
    return services();
 23fe35a:	4628      	mov	r0, r5
 23fe35c:	4621      	mov	r1, r4
 23fe35e:	f7ff ffde 	bl	23fe31e <_ZNK8particle13BlePeerDevice8servicesEv>
}
 23fe362:	4628      	mov	r0, r5
 23fe364:	bd38      	pop	{r3, r4, r5, pc}

023fe366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe368:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe36a:	6845      	ldr	r5, [r0, #4]
 23fe36c:	4668      	mov	r0, sp
 23fe36e:	f7ff f816 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe372:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fe376:	4299      	cmp	r1, r3
 23fe378:	da10      	bge.n	23fe39c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fe37a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe37c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe37e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fe382:	4629      	mov	r1, r5
 23fe384:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe388:	f105 0008 	add.w	r0, r5, #8
 23fe38c:	f7ff ff63 	bl	23fe256 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe390:	b98d      	cbnz	r5, 23fe3b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fe392:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe394:	2601      	movs	r6, #1
    ++size_;
 23fe396:	3301      	adds	r3, #1
 23fe398:	6063      	str	r3, [r4, #4]
    return true;
 23fe39a:	e006      	b.n	23fe3aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe39c:	4620      	mov	r0, r4
 23fe39e:	3101      	adds	r1, #1
 23fe3a0:	f7ff ff83 	bl	23fe2aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe3a4:	4606      	mov	r6, r0
 23fe3a6:	2800      	cmp	r0, #0
 23fe3a8:	d1e7      	bne.n	23fe37a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
 23fe3aa:	a801      	add	r0, sp, #4
 23fe3ac:	f7fc ff64 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe3b0:	4630      	mov	r0, r6
 23fe3b2:	b002      	add	sp, #8
 23fe3b4:	bd70      	pop	{r4, r5, r6, pc}
 23fe3b6:	4669      	mov	r1, sp
 23fe3b8:	4628      	mov	r0, r5
 23fe3ba:	f7fe fff0 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe3be:	e7e8      	b.n	23fe392 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fe3c0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fe3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe3c4:	4605      	mov	r5, r0
 23fe3c6:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
 23fe3c8:	2700      	movs	r7, #0
                LOG(ERROR, "Failed to append discovered service.");
 23fe3ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23fe480 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
 23fe3ce:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23fe484 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fe3d2:	b093      	sub	sp, #76	; 0x4c
        for (size_t i = 0; i < event->count; i++) {
 23fe3d4:	682b      	ldr	r3, [r5, #0]
 23fe3d6:	42bb      	cmp	r3, r7
 23fe3d8:	d94e      	bls.n	23fe478 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
 23fe3da:	261c      	movs	r6, #28
 23fe3dc:	a803      	add	r0, sp, #12
 23fe3de:	f7fe fde5 	bl	23fcfac <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
 23fe3e2:	f10d 0c14 	add.w	ip, sp, #20
 23fe3e6:	46e3      	mov	fp, ip
 23fe3e8:	437e      	muls	r6, r7
 23fe3ea:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
 23fe3ec:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
 23fe3ee:	4432      	add	r2, r6
 23fe3f0:	1d13      	adds	r3, r2, #4
 23fe3f2:	3214      	adds	r2, #20
 23fe3f4:	46e6      	mov	lr, ip
 23fe3f6:	6818      	ldr	r0, [r3, #0]
 23fe3f8:	6859      	ldr	r1, [r3, #4]
 23fe3fa:	3308      	adds	r3, #8
 23fe3fc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 23fe400:	4293      	cmp	r3, r2
 23fe402:	46f4      	mov	ip, lr
 23fe404:	d1f6      	bne.n	23fe3f4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
 23fe406:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fe408:	4659      	mov	r1, fp
 23fe40a:	f8ce 0000 	str.w	r0, [lr]
 23fe40e:	a80a      	add	r0, sp, #40	; 0x28
 23fe410:	f7fe fb12 	bl	23fca38 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fe414:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 23fe418:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe41c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe41e:	f8dc 3000 	ldr.w	r3, [ip]
 23fe422:	9a03      	ldr	r2, [sp, #12]
 23fe424:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
 23fe426:	686b      	ldr	r3, [r5, #4]
 23fe428:	a903      	add	r1, sp, #12
 23fe42a:	4433      	add	r3, r6
 23fe42c:	8b1b      	ldrh	r3, [r3, #24]
 23fe42e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
 23fe430:	686b      	ldr	r3, [r5, #4]
 23fe432:	4433      	add	r3, r6
 23fe434:	8b5b      	ldrh	r3, [r3, #26]
 23fe436:	82d3      	strh	r3, [r2, #22]
        return services_;
 23fe438:	f8d8 0000 	ldr.w	r0, [r8]
 23fe43c:	f100 040c 	add.w	r4, r0, #12
 23fe440:	a80a      	add	r0, sp, #40	; 0x28
 23fe442:	f7fe ffac 	bl	23fd39e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
 23fe446:	4620      	mov	r0, r4
 23fe448:	a90a      	add	r1, sp, #40	; 0x28
 23fe44a:	f7ff ff8c 	bl	23fe366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fe44e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fe450:	a80b      	add	r0, sp, #44	; 0x2c
 23fe452:	f7fc ff11 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe456:	b954      	cbnz	r4, 23fe46e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
 23fe458:	2320      	movs	r3, #32
 23fe45a:	4651      	mov	r1, sl
 23fe45c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 23fe460:	2032      	movs	r0, #50	; 0x32
 23fe462:	4623      	mov	r3, r4
 23fe464:	f8cd 9000 	str.w	r9, [sp]
 23fe468:	aa0a      	add	r2, sp, #40	; 0x28
 23fe46a:	f7fc faa1 	bl	23fa9b0 <log_message>
 23fe46e:	a804      	add	r0, sp, #16
 23fe470:	f7fc ff02 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fe474:	3701      	adds	r7, #1
 23fe476:	e7ad      	b.n	23fe3d4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
 23fe478:	b013      	add	sp, #76	; 0x4c
 23fe47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe47e:	bf00      	nop
 23fe480:	023ffb7f 	.word	0x023ffb7f
 23fe484:	023ffa9f 	.word	0x023ffa9f

023fe488 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe488:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe48c:	4604      	mov	r4, r0
 23fe48e:	460d      	mov	r5, r1
 23fe490:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe492:	d914      	bls.n	23fe4be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe494:	4290      	cmp	r0, r2
 23fe496:	d213      	bcs.n	23fe4c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe498:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe49c:	1a75      	subs	r5, r6, r1
 23fe49e:	f1a1 0708 	sub.w	r7, r1, #8
 23fe4a2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe4a4:	42b7      	cmp	r7, r6
 23fe4a6:	d018      	beq.n	23fe4da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe4a8:	b11c      	cbz	r4, 23fe4b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe4aa:	4631      	mov	r1, r6
 23fe4ac:	4620      	mov	r0, r4
 23fe4ae:	f7fe ff68 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe4b2:	1d30      	adds	r0, r6, #4
 23fe4b4:	f7fc fee0 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe4b8:	3e08      	subs	r6, #8
 23fe4ba:	3c08      	subs	r4, #8
 23fe4bc:	e7f2      	b.n	23fe4a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe4be:	d00c      	beq.n	23fe4da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe4c0:	42b5      	cmp	r5, r6
 23fe4c2:	d00a      	beq.n	23fe4da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe4c4:	b11c      	cbz	r4, 23fe4ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe4c6:	4629      	mov	r1, r5
 23fe4c8:	4620      	mov	r0, r4
 23fe4ca:	f7fe ff5a 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe4ce:	1d28      	adds	r0, r5, #4
 23fe4d0:	f7fc fed2 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe4d4:	3508      	adds	r5, #8
 23fe4d6:	3408      	adds	r4, #8
 23fe4d8:	e7f2      	b.n	23fe4c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe4dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe4dc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe4de:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe4e0:	4605      	mov	r5, r0
        if (n > 0) {
 23fe4e2:	dd11      	ble.n	23fe508 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe4e4:	00f0      	lsls	r0, r6, #3
 23fe4e6:	f7fc fb7b 	bl	23fabe0 <malloc>
            if (!d) {
 23fe4ea:	4604      	mov	r4, r0
 23fe4ec:	b158      	cbz	r0, 23fe506 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe4ee:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe4f2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe4f6:	f7ff ffc7 	bl	23fe488 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe4fa:	6828      	ldr	r0, [r5, #0]
 23fe4fc:	f7fc fb7e 	bl	23fabfc <free>
        return true;
 23fe500:	2001      	movs	r0, #1
        data_ = d;
 23fe502:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe504:	60ae      	str	r6, [r5, #8]
    }
 23fe506:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe508:	2400      	movs	r4, #0
 23fe50a:	e7f6      	b.n	23fe4fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fe50c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fe50c:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fe512:	e9c0 3300 	strd	r3, r3, [r0]
 23fe516:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe518:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe51a:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe51c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe51e:	4299      	cmp	r1, r3
 23fe520:	dd13      	ble.n	23fe54a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fe522:	f7ff ffdb 	bl	23fe4dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe526:	b180      	cbz	r0, 23fe54a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe528:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fe52c:	6827      	ldr	r7, [r4, #0]
 23fe52e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fe532:	45b0      	cmp	r8, r6
 23fe534:	d007      	beq.n	23fe546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fe536:	b11f      	cbz	r7, 23fe540 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fe538:	4631      	mov	r1, r6
 23fe53a:	4638      	mov	r0, r7
 23fe53c:	f7fe ff21 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
 23fe540:	3608      	adds	r6, #8
 23fe542:	3708      	adds	r7, #8
 23fe544:	e7f5      	b.n	23fe532 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fe546:	686b      	ldr	r3, [r5, #4]
 23fe548:	6063      	str	r3, [r4, #4]
}
 23fe54a:	4620      	mov	r0, r4
 23fe54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe550 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
 23fe550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe552:	460d      	mov	r5, r1
 23fe554:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe556:	a801      	add	r0, sp, #4
 23fe558:	f7fe f9a0 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
 23fe55c:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
 23fe55e:	4620      	mov	r0, r4
 23fe560:	3118      	adds	r1, #24
 23fe562:	f7ff ffd3 	bl	23fe50c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fe566:	a801      	add	r0, sp, #4
 23fe568:	f7fe f9a6 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe56c:	4620      	mov	r0, r4
 23fe56e:	b003      	add	sp, #12
 23fe570:	bd30      	pop	{r4, r5, pc}

023fe572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe574:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe576:	6845      	ldr	r5, [r0, #4]
 23fe578:	4668      	mov	r0, sp
 23fe57a:	f7fe ff02 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe57e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fe582:	4299      	cmp	r1, r3
 23fe584:	da10      	bge.n	23fe5a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fe586:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe588:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe58a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fe58e:	4629      	mov	r1, r5
 23fe590:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe594:	f105 0008 	add.w	r0, r5, #8
 23fe598:	f7ff ff76 	bl	23fe488 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe59c:	b98d      	cbnz	r5, 23fe5c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fe59e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe5a0:	2601      	movs	r6, #1
    ++size_;
 23fe5a2:	3301      	adds	r3, #1
 23fe5a4:	6063      	str	r3, [r4, #4]
    return true;
 23fe5a6:	e006      	b.n	23fe5b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe5a8:	4620      	mov	r0, r4
 23fe5aa:	3101      	adds	r1, #1
 23fe5ac:	f7ff ff96 	bl	23fe4dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe5b0:	4606      	mov	r6, r0
 23fe5b2:	2800      	cmp	r0, #0
 23fe5b4:	d1e7      	bne.n	23fe586 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fe5b6:	a801      	add	r0, sp, #4
 23fe5b8:	f7fc fe5e 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe5bc:	4630      	mov	r0, r6
 23fe5be:	b002      	add	sp, #8
 23fe5c0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fe5c2:	4669      	mov	r1, sp
 23fe5c4:	4628      	mov	r0, r5
 23fe5c6:	f7fe fedc 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe5ca:	e7e8      	b.n	23fe59e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fe5cc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fe5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe5ce:	b085      	sub	sp, #20
 23fe5d0:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fe5d2:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fe5d4:	460c      	mov	r4, r1
 23fe5d6:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fe5d8:	f7fe f960 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
 23fe5dc:	2300      	movs	r3, #0
 23fe5de:	e9c5 3300 	strd	r3, r3, [r5]
 23fe5e2:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
 23fe5e4:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fe5e6:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
 23fe5ea:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
 23fe5ee:	42b4      	cmp	r4, r6
 23fe5f0:	d011      	beq.n	23fe616 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
 23fe5f2:	4621      	mov	r1, r4
 23fe5f4:	6838      	ldr	r0, [r7, #0]
 23fe5f6:	f7fe fbf3 	bl	23fcde0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
 23fe5fa:	b150      	cbz	r0, 23fe612 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
 23fe5fc:	4621      	mov	r1, r4
 23fe5fe:	a802      	add	r0, sp, #8
 23fe600:	f7fe febf 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe604:	4628      	mov	r0, r5
 23fe606:	a902      	add	r1, sp, #8
 23fe608:	f7ff ffb3 	bl	23fe572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fe60c:	a803      	add	r0, sp, #12
 23fe60e:	f7fc fe33 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
 23fe612:	3408      	adds	r4, #8
 23fe614:	e7eb      	b.n	23fe5ee <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
 23fe616:	a801      	add	r0, sp, #4
 23fe618:	f7fe f94e 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe61c:	4628      	mov	r0, r5
 23fe61e:	b005      	add	sp, #20
 23fe620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fe624 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fe624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
 23fe628:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fe62a:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fe62c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fe62e:	460f      	mov	r7, r1
 23fe630:	4690      	mov	r8, r2
 23fe632:	b091      	sub	sp, #68	; 0x44
    if (!impl()->servicesDiscovered()) {
 23fe634:	b933      	cbnz	r3, 23fe644 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
 23fe636:	e9c0 3300 	strd	r3, r3, [r0]
 23fe63a:	6083      	str	r3, [r0, #8]
}
 23fe63c:	4630      	mov	r0, r6
 23fe63e:	b011      	add	sp, #68	; 0x44
 23fe640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
 23fe644:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
 23fe646:	7e0d      	ldrb	r5, [r1, #24]
 23fe648:	2d00      	cmp	r5, #0
 23fe64a:	d158      	bne.n	23fe6fe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
 23fe64c:	2320      	movs	r3, #32
 23fe64e:	462a      	mov	r2, r5
 23fe650:	a803      	add	r0, sp, #12
 23fe652:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fe656:	f7fe fb36 	bl	23fccc6 <_ZNK8particle7BleUuid8toStringEb>
 23fe65a:	9b03      	ldr	r3, [sp, #12]
 23fe65c:	492b      	ldr	r1, [pc, #172]	; (23fe70c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
 23fe65e:	9301      	str	r3, [sp, #4]
 23fe660:	4b2b      	ldr	r3, [pc, #172]	; (23fe710 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
 23fe662:	aa08      	add	r2, sp, #32
 23fe664:	2001      	movs	r0, #1
 23fe666:	9300      	str	r3, [sp, #0]
 23fe668:	462b      	mov	r3, r5
 23fe66a:	f7fc f9a1 	bl	23fa9b0 <log_message>
 23fe66e:	a803      	add	r0, sp, #12
 23fe670:	f000 fc18 	bl	23feea4 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
 23fe674:	231c      	movs	r3, #28
 23fe676:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 23fe67a:	f8d8 3000 	ldr.w	r3, [r8]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fe67e:	a908      	add	r1, sp, #32
        halService.start_handle = service.impl()->startHandle();
 23fe680:	8a9a      	ldrh	r2, [r3, #20]
 23fe682:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
 23fe686:	8adb      	ldrh	r3, [r3, #22]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fe688:	4a22      	ldr	r2, [pc, #136]	; (23fe714 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
        halService.end_handle = service.impl()->endHandle();
 23fe68a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 23fe68e:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fe690:	8818      	ldrh	r0, [r3, #0]
 23fe692:	9500      	str	r5, [sp, #0]
 23fe694:	f7fc f8ba 	bl	23fa80c <hal_ble_gatt_client_discover_characteristics>
 23fe698:	2800      	cmp	r0, #0
 23fe69a:	db30      	blt.n	23fe6fe <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
 23fe69c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
 23fe69e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fe6a2:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 23fe6a6:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fe6a8:	f1a4 0308 	sub.w	r3, r4, #8
 23fe6ac:	4599      	cmp	r9, r3
 23fe6ae:	d022      	beq.n	23fe6f6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
 23fe6b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fe6b4:	89db      	ldrh	r3, [r3, #14]
 23fe6b6:	2b00      	cmp	r3, #0
 23fe6b8:	d0f5      	beq.n	23fe6a6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
 23fe6ba:	2210      	movs	r2, #16
 23fe6bc:	2100      	movs	r1, #0
 23fe6be:	eb0d 0002 	add.w	r0, sp, r2
 23fe6c2:	9503      	str	r5, [sp, #12]
 23fe6c4:	f000 ff05 	bl	23ff4d2 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
 23fe6c8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23fe6cc:	aa03      	add	r2, sp, #12
 23fe6ce:	89d9      	ldrh	r1, [r3, #14]
 23fe6d0:	683b      	ldr	r3, [r7, #0]
 23fe6d2:	8818      	ldrh	r0, [r3, #0]
 23fe6d4:	2313      	movs	r3, #19
 23fe6d6:	9500      	str	r5, [sp, #0]
 23fe6d8:	f7fc f8c2 	bl	23fa860 <hal_ble_gatt_client_read>
                if (len > 0) {
 23fe6dc:	2800      	cmp	r0, #0
 23fe6de:	d0e2      	beq.n	23fe6a6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
 23fe6e0:	ab10      	add	r3, sp, #64	; 0x40
 23fe6e2:	4418      	add	r0, r3
 23fe6e4:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
 23fe6e8:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
 23fe6ec:	a903      	add	r1, sp, #12
 23fe6ee:	303c      	adds	r0, #60	; 0x3c
 23fe6f0:	f000 fc79 	bl	23fefe6 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
 23fe6f4:	e7d7      	b.n	23fe6a6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
        characteristicsDiscovered_ = discovered;
 23fe6f6:	2201      	movs	r2, #1
 23fe6f8:	f8d8 3000 	ldr.w	r3, [r8]
 23fe6fc:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
 23fe6fe:	4642      	mov	r2, r8
 23fe700:	4639      	mov	r1, r7
 23fe702:	4630      	mov	r0, r6
 23fe704:	f7ff ff62 	bl	23fe5cc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
 23fe708:	e798      	b.n	23fe63c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
 23fe70a:	bf00      	nop
 23fe70c:	023ffa9f 	.word	0x023ffa9f
 23fe710:	023ffba4 	.word	0x023ffba4
 23fe714:	023fe8dd 	.word	0x023fe8dd

023fe718 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fe718:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
 23fe71a:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fe71c:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fe71e:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23fe720:	460d      	mov	r5, r1
 23fe722:	b085      	sub	sp, #20
    if (!impl()->servicesDiscovered()) {
 23fe724:	b92b      	cbnz	r3, 23fe732 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
 23fe726:	a801      	add	r0, sp, #4
 23fe728:	f7ff fe0a 	bl	23fe340 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
 23fe72c:	a801      	add	r0, sp, #4
 23fe72e:	f7fe fe51 	bl	23fd3d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fe732:	682b      	ldr	r3, [r5, #0]
 23fe734:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
 23fe738:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
 23fe73c:	42bc      	cmp	r4, r7
 23fe73e:	d009      	beq.n	23fe754 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
 23fe740:	4622      	mov	r2, r4
 23fe742:	4629      	mov	r1, r5
 23fe744:	a801      	add	r0, sp, #4
 23fe746:	f7ff ff6d 	bl	23fe624 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
 23fe74a:	a801      	add	r0, sp, #4
 23fe74c:	f7fe fe54 	bl	23fd3f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
 23fe750:	3408      	adds	r4, #8
 23fe752:	e7f3      	b.n	23fe73c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
 23fe754:	4630      	mov	r0, r6
 23fe756:	4629      	mov	r1, r5
 23fe758:	f7ff fefa 	bl	23fe550 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
 23fe75c:	4630      	mov	r0, r6
 23fe75e:	b005      	add	sp, #20
 23fe760:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fe764 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fe764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    hal_ble_conn_cfg_t connCfg = {};
 23fe768:	f04f 0800 	mov.w	r8, #0
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fe76c:	461f      	mov	r7, r3
    connCfg.version = BLE_API_VERSION;
 23fe76e:	4b4c      	ldr	r3, [pc, #304]	; (23fe8a0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x13c>)
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23fe770:	b092      	sub	sp, #72	; 0x48
 23fe772:	4605      	mov	r5, r0
 23fe774:	460c      	mov	r4, r1
    return address_;
 23fe776:	6808      	ldr	r0, [r1, #0]
 23fe778:	6849      	ldr	r1, [r1, #4]
    connCfg.version = BLE_API_VERSION;
 23fe77a:	9304      	str	r3, [sp, #16]
    return address_;
 23fe77c:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.address = addr.halAddress();
 23fe77e:	ab05      	add	r3, sp, #20
    connCfg.conn_params = params;
 23fe780:	9207      	str	r2, [sp, #28]
    return address_;
 23fe782:	c603      	stmia	r6!, {r0, r1}
    connCfg.address = addr.halAddress();
 23fe784:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
 23fe788:	e9cd 8808 	strd	r8, r8, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fe78c:	f7fe fce4 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fe790:	4b44      	ldr	r3, [pc, #272]	; (23fe8a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x140>)
    connCfg.address = addr.halAddress();
 23fe792:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23fe794:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fe796:	f7fe fcdf 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fe79a:	6803      	ldr	r3, [r0, #0]
    bind(addr);
 23fe79c:	4621      	mov	r1, r4
 23fe79e:	4628      	mov	r0, r5
    connCfg.context = BleLocalDevice::getInstance().impl();
 23fe7a0:	9309      	str	r3, [sp, #36]	; 0x24
    bind(addr);
 23fe7a2:	f7fe fc55 	bl	23fd050 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    BleLocalDevice::getInstance().impl()->connectingPeer() = *this;
 23fe7a6:	f7fe fcd7 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe7aa:	682b      	ldr	r3, [r5, #0]
 23fe7ac:	6800      	ldr	r0, [r0, #0]
 23fe7ae:	6243      	str	r3, [r0, #36]	; 0x24
 23fe7b0:	6869      	ldr	r1, [r5, #4]
 23fe7b2:	3028      	adds	r0, #40	; 0x28
 23fe7b4:	f7fe f84c 	bl	23fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23fe7b8:	4642      	mov	r2, r8
 23fe7ba:	6829      	ldr	r1, [r5, #0]
 23fe7bc:	a804      	add	r0, sp, #16
 23fe7be:	f7fc f85d 	bl	23fa87c <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
 23fe7c2:	4604      	mov	r4, r0
 23fe7c4:	b1b8      	cbz	r0, 23fe7f6 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x92>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fe7ca:	682b      	ldr	r3, [r5, #0]
 23fe7cc:	801a      	strh	r2, [r3, #0]
    SCOPE_GUARD ({
 23fe7ce:	f7fe fcc3 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fe7d2:	6805      	ldr	r5, [r0, #0]
 23fe7d4:	4630      	mov	r0, r6
 23fe7d6:	f7fe fc05 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fe7dc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fe7e0:	626b      	str	r3, [r5, #36]	; 0x24
 23fe7e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23fe7e4:	f7fe f834 	bl	23fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fe7e8:	a80b      	add	r0, sp, #44	; 0x2c
 23fe7ea:	f7fc fd45 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe7ee:	4620      	mov	r0, r4
 23fe7f0:	b012      	add	sp, #72	; 0x48
 23fe7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WiringBleLock lk;
 23fe7f6:	a803      	add	r0, sp, #12
 23fe7f8:	f7fe f850 	bl	23fc89c <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->findPeerDevice(impl()->connHandle())) {
 23fe7fc:	f7fe fcac 	bl	23fd158 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fe800:	682b      	ldr	r3, [r5, #0]
 23fe802:	6800      	ldr	r0, [r0, #0]
 23fe804:	8819      	ldrh	r1, [r3, #0]
 23fe806:	f7fe fb00 	bl	23fce0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
 23fe80a:	f04f 0820 	mov.w	r8, #32
 23fe80e:	bb18      	cbnz	r0, 23fe858 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf4>
            LOG(ERROR, "Cannot add new peer device.");
 23fe810:	4b25      	ldr	r3, [pc, #148]	; (23fe8a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x144>)
 23fe812:	4f26      	ldr	r7, [pc, #152]	; (23fe8ac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x148>)
 23fe814:	4632      	mov	r2, r6
 23fe816:	4926      	ldr	r1, [pc, #152]	; (23fe8b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23fe818:	2032      	movs	r0, #50	; 0x32
 23fe81a:	9300      	str	r3, [sp, #0]
 23fe81c:	4623      	mov	r3, r4
 23fe81e:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fe822:	f7fc f8c5 	bl	23fa9b0 <log_message>
 23fe826:	6838      	ldr	r0, [r7, #0]
 23fe828:	f7fb ff8e 	bl	23fa748 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fe82c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
 23fe82e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fe832:	4621      	mov	r1, r4
 23fe834:	8818      	ldrh	r0, [r3, #0]
 23fe836:	f7fb ffbf 	bl	23fa7b8 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
 23fe83a:	6838      	ldr	r0, [r7, #0]
 23fe83c:	f7fb ff76 	bl	23fa72c <os_mutex_recursive_lock>
        locked_ = true;
 23fe840:	2301      	movs	r3, #1
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe842:	f64f 72ff 	movw	r2, #65535	; 0xffff
        locked_ = true;
 23fe846:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
 23fe84a:	682b      	ldr	r3, [r5, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fe84c:	a803      	add	r0, sp, #12
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe84e:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fe850:	f7fe f832 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
 23fe854:	4c17      	ldr	r4, [pc, #92]	; (23fe8b4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x150>)
 23fe856:	e7ba      	b.n	23fe7ce <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        WiringBleLock lk;
 23fe858:	a803      	add	r0, sp, #12
 23fe85a:	f7fe f82d 	bl	23fc8b8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
 23fe85e:	4b16      	ldr	r3, [pc, #88]	; (23fe8b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x154>)
 23fe860:	4632      	mov	r2, r6
 23fe862:	9300      	str	r3, [sp, #0]
 23fe864:	2001      	movs	r0, #1
 23fe866:	4623      	mov	r3, r4
 23fe868:	4911      	ldr	r1, [pc, #68]	; (23fe8b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23fe86a:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fe86e:	f7fc f89f 	bl	23fa9b0 <log_message>
    if (automatic) {
 23fe872:	2f00      	cmp	r7, #0
 23fe874:	d0ab      	beq.n	23fe7ce <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fe876:	4629      	mov	r1, r5
 23fe878:	4630      	mov	r0, r6
 23fe87a:	f7ff ff4d 	bl	23fe718 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
 23fe87e:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
 23fe882:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
 23fe886:	42bd      	cmp	r5, r7
 23fe888:	d005      	beq.n	23fe896 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x132>
            characteristic.subscribe(true);
 23fe88a:	4628      	mov	r0, r5
 23fe88c:	2101      	movs	r1, #1
 23fe88e:	f7fe fb53 	bl	23fcf38 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
 23fe892:	3508      	adds	r5, #8
 23fe894:	e7f7      	b.n	23fe886 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x122>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fe896:	4630      	mov	r0, r6
 23fe898:	f7fe fdae 	bl	23fd3f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe89c:	e797      	b.n	23fe7ce <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
 23fe89e:	bf00      	nop
 23fe8a0:	00180003 	.word	0x00180003
 23fe8a4:	023fdad1 	.word	0x023fdad1
 23fe8a8:	023ffbd6 	.word	0x023ffbd6
 23fe8ac:	1007aee8 	.word	0x1007aee8
 23fe8b0:	023ffa9f 	.word	0x023ffa9f
 23fe8b4:	fffffefc 	.word	0xfffffefc
 23fe8b8:	023ffbf2 	.word	0x023ffbf2

023fe8bc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
 23fe8bc:	b513      	push	{r0, r1, r4, lr}
 23fe8be:	4604      	mov	r4, r0
 23fe8c0:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
 23fe8c4:	f7fe fb8e 	bl	23fcfe4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
 23fe8c8:	2200      	movs	r2, #0
 23fe8ca:	4620      	mov	r0, r4
 23fe8cc:	9b00      	ldr	r3, [sp, #0]
 23fe8ce:	9901      	ldr	r1, [sp, #4]
 23fe8d0:	f7ff ff48 	bl	23fe764 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
 23fe8d4:	4620      	mov	r0, r4
 23fe8d6:	b002      	add	sp, #8
 23fe8d8:	bd10      	pop	{r4, pc}
	...

023fe8dc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fe8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
 23fe8e0:	2320      	movs	r3, #32
 23fe8e2:	2600      	movs	r6, #0
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fe8e4:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
 23fe8e6:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
 23fe8ea:	4b66      	ldr	r3, [pc, #408]	; (23fea84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fe8ec:	4605      	mov	r5, r0
        LOG(TRACE, "Characteristic discovered.");
 23fe8ee:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fe8f0:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
 23fe8f2:	4633      	mov	r3, r6
 23fe8f4:	2001      	movs	r0, #1
 23fe8f6:	4964      	ldr	r1, [pc, #400]	; (23fea88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
 23fe8f8:	aa0c      	add	r2, sp, #48	; 0x30
 23fe8fa:	f7fc f859 	bl	23fa9b0 <log_message>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fe8fe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 23fea8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
 23fe902:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23fea88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fe906:	f8df a188 	ldr.w	sl, [pc, #392]	; 23fea90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        for (size_t i = 0; i < event->count; i++) {
 23fe90a:	682b      	ldr	r3, [r5, #0]
 23fe90c:	42b3      	cmp	r3, r6
 23fe90e:	f240 80b5 	bls.w	23fea7c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
 23fe912:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 23fe916:	a803      	add	r0, sp, #12
 23fe918:	fb0b fb06 	mul.w	fp, fp, r6
 23fe91c:	f7fe fa86 	bl	23fce2c <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
 23fe920:	a805      	add	r0, sp, #20
 23fe922:	f7fe fb43 	bl	23fcfac <_ZN8particle10BleServiceC1Ev>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
 23fe926:	686b      	ldr	r3, [r5, #4]
 23fe928:	9a03      	ldr	r2, [sp, #12]
 23fe92a:	445b      	add	r3, fp
        this->size = halHandles.size;
 23fe92c:	8bd9      	ldrh	r1, [r3, #30]
 23fe92e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
 23fe930:	8c19      	ldrh	r1, [r3, #32]
 23fe932:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
 23fe934:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 23fe936:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
 23fe938:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 23fe93a:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
 23fe93c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 23fe93e:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
 23fe940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 23fe942:	8253      	strh	r3, [r2, #18]
 23fe944:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
 23fe948:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
 23fe94c:	429a      	cmp	r2, r3
 23fe94e:	d07d      	beq.n	23fea4c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
 23fe950:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
 23fe952:	8ac4      	ldrh	r4, [r0, #22]
 23fe954:	428c      	cmp	r4, r1
 23fe956:	d377      	bcc.n	23fea48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
 23fe958:	8a84      	ldrh	r4, [r0, #20]
 23fe95a:	428c      	cmp	r4, r1
 23fe95c:	d874      	bhi.n	23fea48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe95e:	6859      	ldr	r1, [r3, #4]
 23fe960:	9005      	str	r0, [sp, #20]
 23fe962:	a806      	add	r0, sp, #24
 23fe964:	f7fd ff74 	bl	23fc850 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      { return _M_ptr; }
 23fe968:	f8dd e00c 	ldr.w	lr, [sp, #12]
                characteristic.impl()->svcUUID() = service.impl()->UUID();
 23fe96c:	f8dd c014 	ldr.w	ip, [sp, #20]
 23fe970:	f10e 0428 	add.w	r4, lr, #40	; 0x28
 23fe974:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe97a:	f8dc 3000 	ldr.w	r3, [ip]
 23fe97e:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
 23fe980:	892b      	ldrh	r3, [r5, #8]
 23fe982:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
 23fe986:	686b      	ldr	r3, [r5, #4]
 23fe988:	9c03      	ldr	r4, [sp, #12]
 23fe98a:	445b      	add	r3, fp
 23fe98c:	7e5b      	ldrb	r3, [r3, #25]
 23fe98e:	f013 0f02 	tst.w	r3, #2
 23fe992:	d16e      	bne.n	23fea72 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
 23fe994:	686b      	ldr	r3, [r5, #4]
 23fe996:	445b      	add	r3, fp
 23fe998:	7e5b      	ldrb	r3, [r3, #25]
 23fe99a:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
 23fe99c:	bf42      	ittt	mi
 23fe99e:	7923      	ldrbmi	r3, [r4, #4]
 23fe9a0:	f043 0304 	orrmi.w	r3, r3, #4
 23fe9a4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
 23fe9a6:	686b      	ldr	r3, [r5, #4]
 23fe9a8:	445b      	add	r3, fp
 23fe9aa:	7e5b      	ldrb	r3, [r3, #25]
 23fe9ac:	0719      	lsls	r1, r3, #28
 23fe9ae:	bf42      	ittt	mi
 23fe9b0:	7923      	ldrbmi	r3, [r4, #4]
 23fe9b2:	f043 0308 	orrmi.w	r3, r3, #8
 23fe9b6:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
 23fe9b8:	686b      	ldr	r3, [r5, #4]
 23fe9ba:	445b      	add	r3, fp
 23fe9bc:	7e5b      	ldrb	r3, [r3, #25]
 23fe9be:	06da      	lsls	r2, r3, #27
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
 23fe9c0:	aa07      	add	r2, sp, #28
 23fe9c2:	4696      	mov	lr, r2
    value_ |= flags.value_;
 23fe9c4:	bf42      	ittt	mi
 23fe9c6:	7923      	ldrbmi	r3, [r4, #4]
 23fe9c8:	f043 0310 	orrmi.w	r3, r3, #16
 23fe9cc:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
 23fe9ce:	686b      	ldr	r3, [r5, #4]
 23fe9d0:	445b      	add	r3, fp
 23fe9d2:	7e5b      	ldrb	r3, [r3, #25]
 23fe9d4:	069b      	lsls	r3, r3, #26
 23fe9d6:	bf42      	ittt	mi
 23fe9d8:	7923      	ldrbmi	r3, [r4, #4]
 23fe9da:	f043 0320 	orrmi.w	r3, r3, #32
 23fe9de:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
 23fe9e0:	686b      	ldr	r3, [r5, #4]
 23fe9e2:	449b      	add	fp, r3
 23fe9e4:	f10b 0304 	add.w	r3, fp, #4
 23fe9e8:	f10b 0b14 	add.w	fp, fp, #20
 23fe9ec:	4694      	mov	ip, r2
 23fe9ee:	6818      	ldr	r0, [r3, #0]
 23fe9f0:	6859      	ldr	r1, [r3, #4]
 23fe9f2:	3308      	adds	r3, #8
 23fe9f4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23fe9f8:	455b      	cmp	r3, fp
 23fe9fa:	4662      	mov	r2, ip
 23fe9fc:	d1f6      	bne.n	23fe9ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
 23fe9fe:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fea00:	4671      	mov	r1, lr
 23fea02:	f8cc 0000 	str.w	r0, [ip]
 23fea06:	a80c      	add	r0, sp, #48	; 0x30
 23fea08:	f7fe f816 	bl	23fca38 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fea0c:	3414      	adds	r4, #20
 23fea0e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 23fea12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fea16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fea18:	f8dc 3000 	ldr.w	r3, [ip]
                if (!peerImpl->characteristics().append(characteristic)) {
 23fea1c:	a903      	add	r1, sp, #12
 23fea1e:	6023      	str	r3, [r4, #0]
 23fea20:	a80c      	add	r0, sp, #48	; 0x30
 23fea22:	f7fe fcae 	bl	23fd382 <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fea26:	a90c      	add	r1, sp, #48	; 0x30
 23fea28:	f107 0018 	add.w	r0, r7, #24
 23fea2c:	f7ff fda1 	bl	23fe572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fea30:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fea32:	a80d      	add	r0, sp, #52	; 0x34
 23fea34:	f7fc fc20 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea38:	b99c      	cbnz	r4, 23fea62 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fea3a:	2320      	movs	r3, #32
 23fea3c:	f8cd a000 	str.w	sl, [sp]
 23fea40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23fea44:	4623      	mov	r3, r4
 23fea46:	e007      	b.n	23fea58 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
 23fea48:	3308      	adds	r3, #8
 23fea4a:	e77f      	b.n	23fe94c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fea4c:	2420      	movs	r4, #32
 23fea4e:	2300      	movs	r3, #0
 23fea50:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 23fea54:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fea58:	4641      	mov	r1, r8
 23fea5a:	2032      	movs	r0, #50	; 0x32
 23fea5c:	aa0c      	add	r2, sp, #48	; 0x30
 23fea5e:	f7fb ffa7 	bl	23fa9b0 <log_message>
 23fea62:	a806      	add	r0, sp, #24
 23fea64:	f7fc fc08 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea68:	a804      	add	r0, sp, #16
 23fea6a:	f7fc fc05 	bl	23fb278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fea6e:	3601      	adds	r6, #1
 23fea70:	e74b      	b.n	23fe90a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
 23fea72:	7923      	ldrb	r3, [r4, #4]
 23fea74:	f043 0302 	orr.w	r3, r3, #2
 23fea78:	7123      	strb	r3, [r4, #4]
 23fea7a:	e78b      	b.n	23fe994 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
 23fea7c:	b015      	add	sp, #84	; 0x54
 23fea7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fea82:	bf00      	nop
 23fea84:	023ffc0f 	.word	0x023ffc0f
 23fea88:	023ffa9f 	.word	0x023ffa9f
 23fea8c:	023ffc2a 	.word	0x023ffc2a
 23fea90:	023ffc59 	.word	0x023ffc59

023fea94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fea94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fea96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fea98:	4604      	mov	r4, r0
 23fea9a:	460d      	mov	r5, r1
 23fea9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fea9e:	d914      	bls.n	23feaca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23feaa0:	4290      	cmp	r0, r2
 23feaa2:	d213      	bcs.n	23feacc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23feaa4:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23feaa8:	1a75      	subs	r5, r6, r1
 23feaaa:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23feaae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23feab0:	42b7      	cmp	r7, r6
 23feab2:	d018      	beq.n	23feae6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23feab4:	b11c      	cbz	r4, 23feabe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23feab6:	4631      	mov	r1, r6
 23feab8:	4620      	mov	r0, r4
 23feaba:	f7fe fe93 	bl	23fd7e4 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23feabe:	4630      	mov	r0, r6
 23feac0:	f7fe fbb4 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23feac4:	3e24      	subs	r6, #36	; 0x24
 23feac6:	3c24      	subs	r4, #36	; 0x24
 23feac8:	e7f2      	b.n	23feab0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23feaca:	d00c      	beq.n	23feae6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23feacc:	42b5      	cmp	r5, r6
 23feace:	d00a      	beq.n	23feae6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fead0:	b11c      	cbz	r4, 23feada <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fead2:	4629      	mov	r1, r5
 23fead4:	4620      	mov	r0, r4
 23fead6:	f7fe fe85 	bl	23fd7e4 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23feada:	4628      	mov	r0, r5
 23feadc:	f7fe fba6 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23feae0:	3524      	adds	r5, #36	; 0x24
 23feae2:	3424      	adds	r4, #36	; 0x24
 23feae4:	e7f2      	b.n	23feacc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23feae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023feae8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23feae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23feaea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23feaec:	4605      	mov	r5, r0
        if (n > 0) {
 23feaee:	dd13      	ble.n	23feb18 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23feaf0:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23feaf2:	fb07 f006 	mul.w	r0, r7, r6
 23feaf6:	f7fc f873 	bl	23fabe0 <malloc>
            if (!d) {
 23feafa:	4604      	mov	r4, r0
 23feafc:	b158      	cbz	r0, 23feb16 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23feafe:	e9d5 1200 	ldrd	r1, r2, [r5]
 23feb02:	fb07 1202 	mla	r2, r7, r2, r1
 23feb06:	f7ff ffc5 	bl	23fea94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23feb0a:	6828      	ldr	r0, [r5, #0]
 23feb0c:	f7fc f876 	bl	23fabfc <free>
        return true;
 23feb10:	2001      	movs	r0, #1
        data_ = d;
 23feb12:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23feb14:	60ae      	str	r6, [r5, #8]
    }
 23feb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23feb18:	2400      	movs	r4, #0
 23feb1a:	e7f6      	b.n	23feb0a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023feb1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23feb1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb20:	4606      	mov	r6, r0
 23feb22:	460c      	mov	r4, r1
 23feb24:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23feb26:	ad01      	add	r5, sp, #4
 23feb28:	4628      	mov	r0, r5
 23feb2a:	f7fd ff6b 	bl	23fca04 <_ZN8particle10BleAddressC1Ev>
 23feb2e:	a803      	add	r0, sp, #12
 23feb30:	f7fe ff35 	bl	23fd99e <_ZN8particle18BleAdvertisingDataC1Ev>
 23feb34:	a806      	add	r0, sp, #24
 23feb36:	f7fe ff32 	bl	23fd99e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23feb3a:	6930      	ldr	r0, [r6, #16]
 23feb3c:	6971      	ldr	r1, [r6, #20]
 23feb3e:	ab13      	add	r3, sp, #76	; 0x4c
 23feb40:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23feb42:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23feb44:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23feb48:	89f2      	ldrh	r2, [r6, #14]
 23feb4a:	68b1      	ldr	r1, [r6, #8]
 23feb4c:	a806      	add	r0, sp, #24
        rssi_ = value;
 23feb4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23feb52:	f7fe fe98 	bl	23fd886 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23feb56:	89b2      	ldrh	r2, [r6, #12]
 23feb58:	6871      	ldr	r1, [r6, #4]
 23feb5a:	a803      	add	r0, sp, #12
 23feb5c:	f7fe fe93 	bl	23fd886 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23feb60:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23feb64:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23feb66:	2b7f      	cmp	r3, #127	; 0x7f
 23feb68:	d003      	beq.n	23feb72 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23feb6a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23feb6e:	429a      	cmp	r2, r3
 23feb70:	db5c      	blt.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23feb72:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23feb76:	2b7f      	cmp	r3, #127	; 0x7f
 23feb78:	d003      	beq.n	23feb82 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23feb7a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23feb7e:	429a      	cmp	r2, r3
 23feb80:	dc54      	bgt.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23feb82:	4638      	mov	r0, r7
 23feb84:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23feb88:	f7fe fcf2 	bl	23fd570 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23feb8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23feb8e:	2b00      	cmp	r3, #0
 23feb90:	dd52      	ble.n	23fec38 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23feb92:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23feb94:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23feb98:	45b1      	cmp	r9, r6
 23feb9a:	d050      	beq.n	23fec3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23feb9c:	4630      	mov	r0, r6
 23feb9e:	4629      	mov	r1, r5
 23feba0:	f7fd fea3 	bl	23fc8ea <_ZNK8particle10BleAddresseqERKS0_>
 23feba4:	3608      	adds	r6, #8
 23feba6:	4680      	mov	r8, r0
 23feba8:	2800      	cmp	r0, #0
 23febaa:	d0f5      	beq.n	23feb98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23febac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23febae:	f7fc f825 	bl	23fabfc <free>
        if (!delegator->filterByRssi(result) ||
 23febb2:	f1b8 0f00 	cmp.w	r8, #0
 23febb6:	d039      	beq.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23febb8:	4629      	mov	r1, r5
 23febba:	4620      	mov	r0, r4
 23febbc:	f7fe fc9b 	bl	23fd4f6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23febc0:	b3a0      	cbz	r0, 23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23febc2:	4629      	mov	r1, r5
 23febc4:	4620      	mov	r0, r4
 23febc6:	f7ff fa6a 	bl	23fe09e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23febca:	4606      	mov	r6, r0
 23febcc:	b370      	cbz	r0, 23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23febce:	4638      	mov	r0, r7
 23febd0:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23febd4:	f7fe fd19 	bl	23fd60a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23febd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23febda:	2b00      	cmp	r3, #0
 23febdc:	dd12      	ble.n	23fec04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23febde:	a806      	add	r0, sp, #24
 23febe0:	f7fe f8d2 	bl	23fcd88 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23febe4:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23febe6:	a803      	add	r0, sp, #12
 23febe8:	f7fe f8ce 	bl	23fcd88 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23febec:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23febf0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23febf4:	429a      	cmp	r2, r3
 23febf6:	d025      	beq.n	23fec44 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23febf8:	f833 1b02 	ldrh.w	r1, [r3], #2
 23febfc:	4588      	cmp	r8, r1
 23febfe:	d001      	beq.n	23fec04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23fec00:	4288      	cmp	r0, r1
 23fec02:	d1f7      	bne.n	23febf4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23fec04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fec06:	f7fb fff9 	bl	23fabfc <free>
              !delegator->filterByServiceUUID(result) ||
 23fec0a:	b17e      	cbz	r6, 23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23fec0c:	4629      	mov	r1, r5
 23fec0e:	4620      	mov	r0, r4
 23fec10:	f7fe fd30 	bl	23fd674 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23fec14:	b150      	cbz	r0, 23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23fec16:	6a23      	ldr	r3, [r4, #32]
 23fec18:	b1b3      	cbz	r3, 23fec48 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fec1a:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23fec1c:	6963      	ldr	r3, [r4, #20]
 23fec1e:	9513      	str	r5, [sp, #76]	; 0x4c
 23fec20:	3301      	adds	r3, #1
 23fec22:	6163      	str	r3, [r4, #20]
 23fec24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fec26:	f104 0018 	add.w	r0, r4, #24
 23fec2a:	4798      	blx	r3
            return;
 23fec2c:	4628      	mov	r0, r5
 23fec2e:	f7fe fafd 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
    }
 23fec32:	b01d      	add	sp, #116	; 0x74
 23fec34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23fec38:	f04f 0801 	mov.w	r8, #1
 23fec3c:	e7b6      	b.n	23febac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fec3e:	f04f 0800 	mov.w	r8, #0
 23fec42:	e7b3      	b.n	23febac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fec44:	2600      	movs	r6, #0
 23fec46:	e7dd      	b.n	23fec04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23fec48:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23fec4c:	f1b8 0f00 	cmp.w	r8, #0
 23fec50:	d007      	beq.n	23fec62 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23fec52:	6963      	ldr	r3, [r4, #20]
 23fec54:	4629      	mov	r1, r5
 23fec56:	3301      	adds	r3, #1
 23fec58:	6163      	str	r3, [r4, #20]
 23fec5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fec5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23fec60:	e7e3      	b.n	23fec2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23fec62:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23fec66:	f1bc 0f00 	cmp.w	ip, #0
 23fec6a:	d025      	beq.n	23fecb8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
 23fec6c:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fec6e:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
 23fec70:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fec72:	4293      	cmp	r3, r2
            delegator->foundCount_++;
 23fec74:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fec76:	d8d9      	bhi.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fec78:	2224      	movs	r2, #36	; 0x24
 23fec7a:	4353      	muls	r3, r2
    address_ = addr.address_;
 23fec7c:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fec7e:	3b24      	subs	r3, #36	; 0x24
 23fec80:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23fec84:	ca03      	ldmia	r2!, {r0, r1}
 23fec86:	f84c 0003 	str.w	r0, [ip, r3]
 23fec8a:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23fec8c:	f106 0008 	add.w	r0, r6, #8
 23fec90:	a903      	add	r1, sp, #12
 23fec92:	f7fe fdc0 	bl	23fd816 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fec96:	a906      	add	r1, sp, #24
 23fec98:	f106 0014 	add.w	r0, r6, #20
 23fec9c:	f7fe fdbb 	bl	23fd816 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23feca0:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23feca4:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23feca8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23fecac:	429a      	cmp	r2, r3
 23fecae:	d3bd      	bcc.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23fecb0:	4640      	mov	r0, r8
 23fecb2:	f7fb fd73 	bl	23fa79c <hal_ble_gap_stop_scan>
 23fecb6:	e7b9      	b.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23fecb8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23fecbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fecc0:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23fecc4:	a903      	add	r1, sp, #12
 23fecc6:	a80c      	add	r0, sp, #48	; 0x30
 23fecc8:	f7fe fd6f 	bl	23fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23feccc:	a906      	add	r1, sp, #24
 23fecce:	a80f      	add	r0, sp, #60	; 0x3c
 23fecd0:	f7fe fd6b 	bl	23fd7aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fecd4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23fecd8:	4641      	mov	r1, r8
 23fecda:	4638      	mov	r0, r7
 23fecdc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23fece0:	6866      	ldr	r6, [r4, #4]
 23fece2:	f7fe fd7f 	bl	23fd7e4 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fece6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fecea:	4299      	cmp	r1, r3
 23fecec:	da10      	bge.n	23fed10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
 23fecee:	2224      	movs	r2, #36	; 0x24
 23fecf0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fecf2:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23fecf4:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23fecf8:	fb02 3201 	mla	r2, r2, r1, r3
 23fecfc:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23fed00:	4631      	mov	r1, r6
 23fed02:	f7ff fec7 	bl	23fea94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fed06:	b986      	cbnz	r6, 23fed2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
 23fed08:	6863      	ldr	r3, [r4, #4]
 23fed0a:	3301      	adds	r3, #1
 23fed0c:	6063      	str	r3, [r4, #4]
    return true;
 23fed0e:	e005      	b.n	23fed1c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fed10:	4620      	mov	r0, r4
 23fed12:	3101      	adds	r1, #1
 23fed14:	f7ff fee8 	bl	23feae8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fed18:	2800      	cmp	r0, #0
 23fed1a:	d1e8      	bne.n	23fecee <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
 23fed1c:	4638      	mov	r0, r7
 23fed1e:	f7fe fa85 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23fed22:	4640      	mov	r0, r8
 23fed24:	f7fe fa82 	bl	23fd22c <_ZN8particle13BleScanResultD1Ev>
 23fed28:	e780      	b.n	23fec2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23fed2a:	4639      	mov	r1, r7
 23fed2c:	4630      	mov	r0, r6
 23fed2e:	f7fe fd59 	bl	23fd7e4 <_ZN8particle13BleScanResultC1EOS0_>
 23fed32:	e7e9      	b.n	23fed08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

023fed34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fed34:	2300      	movs	r3, #0
 23fed36:	4802      	ldr	r0, [pc, #8]	; (23fed40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fed38:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fed3a:	f7fb bcdb 	b.w	23fa6f4 <os_mutex_recursive_create>
 23fed3e:	bf00      	nop
 23fed40:	1007aee8 	.word	0x1007aee8

023fed44 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fed44:	4770      	bx	lr

023fed46 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed46:	7441      	strb	r1, [r0, #17]
}
 23fed48:	4770      	bx	lr

023fed4a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fed4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fed4c:	7c00      	ldrb	r0, [r0, #16]
 23fed4e:	f7fb fc99 	bl	23fa684 <hal_usart_available_data_for_write>
}
 23fed52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed56:	bd08      	pop	{r3, pc}

023fed58 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fed58:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fed5a:	7c00      	ldrb	r0, [r0, #16]
 23fed5c:	f7fb fc4c 	bl	23fa5f8 <hal_usart_available>
}
 23fed60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed64:	bd08      	pop	{r3, pc}

023fed66 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fed66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fed68:	7c00      	ldrb	r0, [r0, #16]
 23fed6a:	f7fb fc61 	bl	23fa630 <hal_usart_peek>
}
 23fed6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed72:	bd08      	pop	{r3, pc}

023fed74 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fed74:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fed76:	7c00      	ldrb	r0, [r0, #16]
 23fed78:	f7fb fc4c 	bl	23fa614 <hal_usart_read>
}
 23fed7c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed80:	bd08      	pop	{r3, pc}

023fed82 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fed82:	7c00      	ldrb	r0, [r0, #16]
 23fed84:	f7fb bc62 	b.w	23fa64c <hal_usart_flush>

023fed88 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fed88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed8a:	7c45      	ldrb	r5, [r0, #17]
{
 23fed8c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed8e:	b12d      	cbz	r5, 23fed9c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fed90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fed92:	b003      	add	sp, #12
 23fed94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fed98:	f7fb bc20 	b.w	23fa5dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed9c:	7c00      	ldrb	r0, [r0, #16]
 23fed9e:	9101      	str	r1, [sp, #4]
 23feda0:	f7fb fc70 	bl	23fa684 <hal_usart_available_data_for_write>
 23feda4:	2800      	cmp	r0, #0
 23feda6:	9901      	ldr	r1, [sp, #4]
 23feda8:	dcf2      	bgt.n	23fed90 <_ZN11USARTSerial5writeEh+0x8>
}
 23fedaa:	4628      	mov	r0, r5
 23fedac:	b003      	add	sp, #12
 23fedae:	bd30      	pop	{r4, r5, pc}

023fedb0 <_ZN11USARTSerialD0Ev>:
 23fedb0:	b510      	push	{r4, lr}
 23fedb2:	4604      	mov	r4, r0
 23fedb4:	2114      	movs	r1, #20
 23fedb6:	f7fb f98e 	bl	23fa0d6 <_ZdlPvj>
 23fedba:	4620      	mov	r0, r4
 23fedbc:	bd10      	pop	{r4, pc}
	...

023fedc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fedc0:	b510      	push	{r4, lr}
 23fedc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fedc6:	4604      	mov	r4, r0
 23fedc8:	4608      	mov	r0, r1
 23fedca:	4611      	mov	r1, r2
 23fedcc:	2200      	movs	r2, #0
 23fedce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fedd2:	4b04      	ldr	r3, [pc, #16]	; (23fede4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fedd4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fedd6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fedd8:	2301      	movs	r3, #1
 23fedda:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feddc:	f7fb fc6e 	bl	23fa6bc <hal_usart_init_ex>
}
 23fede0:	4620      	mov	r0, r4
 23fede2:	bd10      	pop	{r4, pc}
 23fede4:	023ffce4 	.word	0x023ffce4

023fede8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fede8:	2300      	movs	r3, #0
 23fedea:	7c00      	ldrb	r0, [r0, #16]
 23fedec:	f7fb bc58 	b.w	23fa6a0 <hal_usart_begin_config>

023fedf0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fedf0:	2200      	movs	r2, #0
 23fedf2:	f7ff bff9 	b.w	23fede8 <_ZN11USARTSerial5beginEmm>

023fedf6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fedf6:	7c00      	ldrb	r0, [r0, #16]
 23fedf8:	f7fb bbe2 	b.w	23fa5c0 <hal_usart_end>

023fedfc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fedfc:	7c00      	ldrb	r0, [r0, #16]
 23fedfe:	f7fb bc33 	b.w	23fa668 <hal_usart_is_enabled>
	...

023fee04 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fee04:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fee06:	2000      	movs	r0, #0
 23fee08:	4b04      	ldr	r3, [pc, #16]	; (23fee1c <_GLOBAL__sub_I_System+0x18>)
 23fee0a:	601a      	str	r2, [r3, #0]
 23fee0c:	4b04      	ldr	r3, [pc, #16]	; (23fee20 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fee0e:	4a05      	ldr	r2, [pc, #20]	; (23fee24 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fee10:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fee14:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fee16:	f7fb beb9 	b.w	23fab8c <set_system_mode>
 23fee1a:	bf00      	nop
 23fee1c:	1007aefc 	.word	0x1007aefc
 23fee20:	1007aef0 	.word	0x1007aef0
 23fee24:	ffff0000 	.word	0xffff0000

023fee28 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee28:	2200      	movs	r2, #0
 23fee2a:	6840      	ldr	r0, [r0, #4]
 23fee2c:	4611      	mov	r1, r2
 23fee2e:	f7fb be67 	b.w	23fab00 <network_listening>

023fee32 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee32:	2200      	movs	r2, #0
 23fee34:	6840      	ldr	r0, [r0, #4]
 23fee36:	4611      	mov	r1, r2
 23fee38:	f7fb be7e 	b.w	23fab38 <network_get_listen_timeout>

023fee3c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee3c:	2200      	movs	r2, #0
 23fee3e:	6840      	ldr	r0, [r0, #4]
 23fee40:	f7fb be6c 	b.w	23fab1c <network_set_listen_timeout>

023fee44 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee44:	2200      	movs	r2, #0
 23fee46:	6840      	ldr	r0, [r0, #4]
 23fee48:	f081 0101 	eor.w	r1, r1, #1
 23fee4c:	f7fb be4a 	b.w	23faae4 <network_listen>

023fee50 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fee50:	2300      	movs	r3, #0
 23fee52:	6840      	ldr	r0, [r0, #4]
 23fee54:	461a      	mov	r2, r3
 23fee56:	4619      	mov	r1, r3
 23fee58:	f7fb be36 	b.w	23faac8 <network_off>

023fee5c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fee5c:	2300      	movs	r3, #0
 23fee5e:	6840      	ldr	r0, [r0, #4]
 23fee60:	461a      	mov	r2, r3
 23fee62:	4619      	mov	r1, r3
 23fee64:	f7fb be22 	b.w	23faaac <network_on>

023fee68 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fee68:	2200      	movs	r2, #0
 23fee6a:	6840      	ldr	r0, [r0, #4]
 23fee6c:	4611      	mov	r1, r2
 23fee6e:	f7fb be0f 	b.w	23faa90 <network_ready>

023fee72 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fee72:	2200      	movs	r2, #0
 23fee74:	6840      	ldr	r0, [r0, #4]
 23fee76:	4611      	mov	r1, r2
 23fee78:	f7fb bdee 	b.w	23faa58 <network_connecting>

023fee7c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fee7c:	2200      	movs	r2, #0
 23fee7e:	2102      	movs	r1, #2
 23fee80:	6840      	ldr	r0, [r0, #4]
 23fee82:	f7fb bdf7 	b.w	23faa74 <network_disconnect>

023fee86 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fee86:	2300      	movs	r3, #0
 23fee88:	6840      	ldr	r0, [r0, #4]
 23fee8a:	461a      	mov	r2, r3
 23fee8c:	f7fb bdd6 	b.w	23faa3c <network_connect>

023fee90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fee90:	2203      	movs	r2, #3
 23fee92:	4b02      	ldr	r3, [pc, #8]	; (23fee9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fee94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fee96:	4a02      	ldr	r2, [pc, #8]	; (23feea0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fee98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fee9a:	4770      	bx	lr
 23fee9c:	1007af00 	.word	0x1007af00
 23feea0:	023ffd14 	.word	0x023ffd14

023feea4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23feea4:	b510      	push	{r4, lr}
 23feea6:	4604      	mov	r4, r0
{
	free(buffer);
 23feea8:	6800      	ldr	r0, [r0, #0]
 23feeaa:	f7fb fea7 	bl	23fabfc <free>
}
 23feeae:	4620      	mov	r0, r4
 23feeb0:	bd10      	pop	{r4, pc}

023feeb2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23feeb2:	b510      	push	{r4, lr}
 23feeb4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23feeb6:	6800      	ldr	r0, [r0, #0]
 23feeb8:	b108      	cbz	r0, 23feebe <_ZN6String10invalidateEv+0xc>
 23feeba:	f7fb fe9f 	bl	23fabfc <free>
	buffer = NULL;
 23feebe:	2300      	movs	r3, #0
	capacity = len = 0;
 23feec0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23feec4:	6023      	str	r3, [r4, #0]
}
 23feec6:	bd10      	pop	{r4, pc}

023feec8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23feec8:	b538      	push	{r3, r4, r5, lr}
 23feeca:	4604      	mov	r4, r0
 23feecc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23feece:	6800      	ldr	r0, [r0, #0]
 23feed0:	3101      	adds	r1, #1
 23feed2:	f7fb fea1 	bl	23fac18 <realloc>
	if (newbuffer) {
 23feed6:	b110      	cbz	r0, 23feede <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23feed8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23feedc:	2001      	movs	r0, #1
	}
	return 0;
}
 23feede:	bd38      	pop	{r3, r4, r5, pc}

023feee0 <_ZN6String7reserveEj>:
{
 23feee0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23feee2:	6803      	ldr	r3, [r0, #0]
{
 23feee4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23feee6:	b123      	cbz	r3, 23feef2 <_ZN6String7reserveEj+0x12>
 23feee8:	6843      	ldr	r3, [r0, #4]
 23feeea:	428b      	cmp	r3, r1
 23feeec:	d301      	bcc.n	23feef2 <_ZN6String7reserveEj+0x12>
 23feeee:	2001      	movs	r0, #1
}
 23feef0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23feef2:	4620      	mov	r0, r4
 23feef4:	f7ff ffe8 	bl	23feec8 <_ZN6String12changeBufferEj>
 23feef8:	2800      	cmp	r0, #0
 23feefa:	d0f9      	beq.n	23feef0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23feefc:	68a3      	ldr	r3, [r4, #8]
 23feefe:	2b00      	cmp	r3, #0
 23fef00:	d1f5      	bne.n	23feeee <_ZN6String7reserveEj+0xe>
 23fef02:	6822      	ldr	r2, [r4, #0]
 23fef04:	7013      	strb	r3, [r2, #0]
 23fef06:	e7f2      	b.n	23feeee <_ZN6String7reserveEj+0xe>

023fef08 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fef08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fef0a:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fef0c:	4611      	mov	r1, r2
 23fef0e:	9201      	str	r2, [sp, #4]
{
 23fef10:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fef12:	f7ff ffe5 	bl	23feee0 <_ZN6String7reserveEj>
 23fef16:	9a01      	ldr	r2, [sp, #4]
 23fef18:	b928      	cbnz	r0, 23fef26 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fef1a:	4620      	mov	r0, r4
 23fef1c:	f7ff ffc9 	bl	23feeb2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fef20:	4620      	mov	r0, r4
 23fef22:	b003      	add	sp, #12
 23fef24:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fef26:	4629      	mov	r1, r5
	len = length;
 23fef28:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fef2a:	6820      	ldr	r0, [r4, #0]
 23fef2c:	f000 faaa 	bl	23ff484 <memcpy>
	buffer[len] = 0;
 23fef30:	2100      	movs	r1, #0
 23fef32:	6822      	ldr	r2, [r4, #0]
 23fef34:	68a3      	ldr	r3, [r4, #8]
 23fef36:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fef38:	e7f2      	b.n	23fef20 <_ZN6String4copyEPKcj+0x18>

023fef3a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fef3a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fef3c:	b513      	push	{r0, r1, r4, lr}
 23fef3e:	4604      	mov	r4, r0
	capacity = 0;
 23fef40:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fef44:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fef46:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fef48:	b141      	cbz	r1, 23fef5c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fef4a:	4608      	mov	r0, r1
 23fef4c:	9101      	str	r1, [sp, #4]
 23fef4e:	f7fb f899 	bl	23fa084 <strlen>
 23fef52:	9901      	ldr	r1, [sp, #4]
 23fef54:	4602      	mov	r2, r0
 23fef56:	4620      	mov	r0, r4
 23fef58:	f7ff ffd6 	bl	23fef08 <_ZN6String4copyEPKcj>
}
 23fef5c:	4620      	mov	r0, r4
 23fef5e:	b002      	add	sp, #8
 23fef60:	bd10      	pop	{r4, pc}

023fef62 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fef62:	b538      	push	{r3, r4, r5, lr}
 23fef64:	4605      	mov	r5, r0
	if (buffer) {
 23fef66:	6800      	ldr	r0, [r0, #0]
{
 23fef68:	460c      	mov	r4, r1
	if (buffer) {
 23fef6a:	b168      	cbz	r0, 23fef88 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23fef6c:	686a      	ldr	r2, [r5, #4]
 23fef6e:	688b      	ldr	r3, [r1, #8]
 23fef70:	429a      	cmp	r2, r3
 23fef72:	d307      	bcc.n	23fef84 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23fef74:	6809      	ldr	r1, [r1, #0]
 23fef76:	f000 fafa 	bl	23ff56e <strcpy>
			len = rhs.len;
 23fef7a:	68a3      	ldr	r3, [r4, #8]
 23fef7c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fef7e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fef80:	60a3      	str	r3, [r4, #8]
}
 23fef82:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fef84:	f7fb fe3a 	bl	23fabfc <free>
	buffer = rhs.buffer;
 23fef88:	6823      	ldr	r3, [r4, #0]
 23fef8a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fef8c:	6863      	ldr	r3, [r4, #4]
 23fef8e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fef90:	68a3      	ldr	r3, [r4, #8]
 23fef92:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fef94:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fef96:	e9c4 3300 	strd	r3, r3, [r4]
 23fef9a:	e7f1      	b.n	23fef80 <_ZN6String4moveERS_+0x1e>

023fef9c <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fef9c:	2300      	movs	r3, #0
String::String(String &&rval)
 23fef9e:	b510      	push	{r4, lr}
 23fefa0:	4604      	mov	r4, r0
	capacity = 0;
 23fefa2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fefa6:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fefa8:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fefaa:	f7ff ffda 	bl	23fef62 <_ZN6String4moveERS_>
}
 23fefae:	4620      	mov	r0, r4
 23fefb0:	bd10      	pop	{r4, pc}

023fefb2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fefb2:	4288      	cmp	r0, r1
{
 23fefb4:	b510      	push	{r4, lr}
 23fefb6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fefb8:	d005      	beq.n	23fefc6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fefba:	680b      	ldr	r3, [r1, #0]
 23fefbc:	b12b      	cbz	r3, 23fefca <_ZN6StringaSERKS_+0x18>
 23fefbe:	688a      	ldr	r2, [r1, #8]
 23fefc0:	4619      	mov	r1, r3
 23fefc2:	f7ff ffa1 	bl	23fef08 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fefc6:	4620      	mov	r0, r4
 23fefc8:	bd10      	pop	{r4, pc}
	else invalidate();
 23fefca:	f7ff ff72 	bl	23feeb2 <_ZN6String10invalidateEv>
 23fefce:	e7fa      	b.n	23fefc6 <_ZN6StringaSERKS_+0x14>

023fefd0 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fefd0:	2300      	movs	r3, #0
String::String(const String &value)
 23fefd2:	b510      	push	{r4, lr}
 23fefd4:	4604      	mov	r4, r0
	capacity = 0;
 23fefd6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fefda:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fefdc:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fefde:	f7ff ffe8 	bl	23fefb2 <_ZN6StringaSERKS_>
}
 23fefe2:	4620      	mov	r0, r4
 23fefe4:	bd10      	pop	{r4, pc}

023fefe6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fefe6:	b513      	push	{r0, r1, r4, lr}
 23fefe8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fefea:	b159      	cbz	r1, 23ff004 <_ZN6StringaSEPKc+0x1e>
 23fefec:	4608      	mov	r0, r1
 23fefee:	9101      	str	r1, [sp, #4]
 23feff0:	f7fb f848 	bl	23fa084 <strlen>
 23feff4:	9901      	ldr	r1, [sp, #4]
 23feff6:	4602      	mov	r2, r0
 23feff8:	4620      	mov	r0, r4
 23feffa:	f7ff ff85 	bl	23fef08 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23feffe:	4620      	mov	r0, r4
 23ff000:	b002      	add	sp, #8
 23ff002:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff004:	f7ff ff55 	bl	23feeb2 <_ZN6String10invalidateEv>
 23ff008:	e7f9      	b.n	23feffe <_ZN6StringaSEPKc+0x18>

023ff00a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff00a:	b570      	push	{r4, r5, r6, lr}
 23ff00c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff00e:	460e      	mov	r6, r1
 23ff010:	b909      	cbnz	r1, 23ff016 <_ZN6String6concatEPKcj+0xc>
 23ff012:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff014:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff016:	b16a      	cbz	r2, 23ff034 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff018:	6884      	ldr	r4, [r0, #8]
 23ff01a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff01c:	4621      	mov	r1, r4
 23ff01e:	f7ff ff5f 	bl	23feee0 <_ZN6String7reserveEj>
 23ff022:	2800      	cmp	r0, #0
 23ff024:	d0f5      	beq.n	23ff012 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff026:	6828      	ldr	r0, [r5, #0]
 23ff028:	68ab      	ldr	r3, [r5, #8]
 23ff02a:	4631      	mov	r1, r6
 23ff02c:	4418      	add	r0, r3
 23ff02e:	f000 fa9e 	bl	23ff56e <strcpy>
	len = newlen;
 23ff032:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff034:	2001      	movs	r0, #1
 23ff036:	e7ed      	b.n	23ff014 <_ZN6String6concatEPKcj+0xa>

023ff038 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23ff038:	2300      	movs	r3, #0
{
 23ff03a:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23ff03c:	2201      	movs	r2, #1
	buf[0] = c;
 23ff03e:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23ff042:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23ff044:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23ff048:	f7ff ffdf 	bl	23ff00a <_ZN6String6concatEPKcj>
}
 23ff04c:	b003      	add	sp, #12
 23ff04e:	f85d fb04 	ldr.w	pc, [sp], #4

023ff052 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23ff052:	6802      	ldr	r2, [r0, #0]
{
 23ff054:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23ff056:	6809      	ldr	r1, [r1, #0]
 23ff058:	b162      	cbz	r2, 23ff074 <_ZNK6String9compareToERKS_+0x22>
 23ff05a:	b941      	cbnz	r1, 23ff06e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23ff05c:	6880      	ldr	r0, [r0, #8]
 23ff05e:	b160      	cbz	r0, 23ff07a <_ZNK6String9compareToERKS_+0x28>
 23ff060:	7810      	ldrb	r0, [r2, #0]
 23ff062:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff064:	6898      	ldr	r0, [r3, #8]
 23ff066:	b140      	cbz	r0, 23ff07a <_ZNK6String9compareToERKS_+0x28>
 23ff068:	7809      	ldrb	r1, [r1, #0]
 23ff06a:	4248      	negs	r0, r1
 23ff06c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23ff06e:	4610      	mov	r0, r2
 23ff070:	f7fa bffe 	b.w	23fa070 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff074:	2900      	cmp	r1, #0
 23ff076:	d1f5      	bne.n	23ff064 <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23ff078:	4608      	mov	r0, r1
}
 23ff07a:	4770      	bx	lr

023ff07c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23ff07c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23ff07e:	6882      	ldr	r2, [r0, #8]
 23ff080:	688b      	ldr	r3, [r1, #8]
 23ff082:	429a      	cmp	r2, r3
 23ff084:	d105      	bne.n	23ff092 <_ZNK6String6equalsERKS_+0x16>
 23ff086:	f7ff ffe4 	bl	23ff052 <_ZNK6String9compareToERKS_>
 23ff08a:	fab0 f080 	clz	r0, r0
 23ff08e:	0940      	lsrs	r0, r0, #5
}
 23ff090:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23ff092:	2000      	movs	r0, #0
 23ff094:	e7fc      	b.n	23ff090 <_ZNK6String6equalsERKS_+0x14>

023ff096 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff096:	4770      	bx	lr

023ff098 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff098:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff09a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff09c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff09e:	462a      	mov	r2, r5
 23ff0a0:	2100      	movs	r1, #0
 23ff0a2:	f000 fa16 	bl	23ff4d2 <memset>
 23ff0a6:	8025      	strh	r5, [r4, #0]
 23ff0a8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0aa:	4907      	ldr	r1, [pc, #28]	; (23ff0c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff0ac:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff0ae:	8125      	strh	r5, [r4, #8]
 23ff0b0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0b2:	f000 f8b1 	bl	23ff218 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0b6:	4904      	ldr	r1, [pc, #16]	; (23ff0c8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff0b8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff0ba:	4628      	mov	r0, r5
 23ff0bc:	f000 f8ac 	bl	23ff218 <_ZnajRKSt9nothrow_t>
    };
 23ff0c0:	60e0      	str	r0, [r4, #12]
}
 23ff0c2:	4620      	mov	r0, r4
 23ff0c4:	bd38      	pop	{r3, r4, r5, pc}
 23ff0c6:	bf00      	nop
 23ff0c8:	023ffd48 	.word	0x023ffd48

023ff0cc <__tcf_2>:
 23ff0cc:	4770      	bx	lr

023ff0ce <__tcf_1>:
 23ff0ce:	4770      	bx	lr

023ff0d0 <_Z20acquireSerial1Bufferv>:
{
 23ff0d0:	b510      	push	{r4, lr}
 23ff0d2:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff0d4:	f7ff ffe0 	bl	23ff098 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff0d8:	4620      	mov	r0, r4
 23ff0da:	bd10      	pop	{r4, pc}

023ff0dc <_Z20acquireSerial2Bufferv>:
 23ff0dc:	b510      	push	{r4, lr}
 23ff0de:	4604      	mov	r4, r0
 23ff0e0:	f7ff ffda 	bl	23ff098 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff0e4:	4620      	mov	r0, r4
 23ff0e6:	bd10      	pop	{r4, pc}

023ff0e8 <_Z20acquireSerial3Bufferv>:
 23ff0e8:	b510      	push	{r4, lr}
 23ff0ea:	4604      	mov	r4, r0
 23ff0ec:	f7ff ffd4 	bl	23ff098 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff0f0:	4620      	mov	r0, r4
 23ff0f2:	bd10      	pop	{r4, pc}

023ff0f4 <_Z22__fetch_global_Serial1v>:
{
 23ff0f4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff0f6:	4d0e      	ldr	r5, [pc, #56]	; (23ff130 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff0f8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff0fa:	e8d5 1f8f 	ldab	r1, [r5]
 23ff0fe:	f011 0401 	ands.w	r4, r1, #1
 23ff102:	d111      	bne.n	23ff128 <_Z22__fetch_global_Serial1v+0x34>
 23ff104:	4628      	mov	r0, r5
 23ff106:	f7fa fff5 	bl	23fa0f4 <__cxa_guard_acquire>
 23ff10a:	b168      	cbz	r0, 23ff128 <_Z22__fetch_global_Serial1v+0x34>
 23ff10c:	a801      	add	r0, sp, #4
 23ff10e:	f7ff ffdf 	bl	23ff0d0 <_Z20acquireSerial1Bufferv>
 23ff112:	4621      	mov	r1, r4
 23ff114:	aa01      	add	r2, sp, #4
 23ff116:	4807      	ldr	r0, [pc, #28]	; (23ff134 <_Z22__fetch_global_Serial1v+0x40>)
 23ff118:	f7ff fe52 	bl	23fedc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff11c:	4628      	mov	r0, r5
 23ff11e:	f7fa ffee 	bl	23fa0fe <__cxa_guard_release>
 23ff122:	4805      	ldr	r0, [pc, #20]	; (23ff138 <_Z22__fetch_global_Serial1v+0x44>)
 23ff124:	f000 f990 	bl	23ff448 <atexit>
    return serial1;
}
 23ff128:	4802      	ldr	r0, [pc, #8]	; (23ff134 <_Z22__fetch_global_Serial1v+0x40>)
 23ff12a:	b007      	add	sp, #28
 23ff12c:	bd30      	pop	{r4, r5, pc}
 23ff12e:	bf00      	nop
 23ff130:	1007af0c 	.word	0x1007af0c
 23ff134:	1007af18 	.word	0x1007af18
 23ff138:	023ff097 	.word	0x023ff097

023ff13c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff13c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff13e:	4c0d      	ldr	r4, [pc, #52]	; (23ff174 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff140:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff142:	e8d4 3f8f 	ldab	r3, [r4]
 23ff146:	07db      	lsls	r3, r3, #31
 23ff148:	d411      	bmi.n	23ff16e <_Z22__fetch_global_Serial2v+0x32>
 23ff14a:	4620      	mov	r0, r4
 23ff14c:	f7fa ffd2 	bl	23fa0f4 <__cxa_guard_acquire>
 23ff150:	b168      	cbz	r0, 23ff16e <_Z22__fetch_global_Serial2v+0x32>
 23ff152:	a801      	add	r0, sp, #4
 23ff154:	f7ff ffc2 	bl	23ff0dc <_Z20acquireSerial2Bufferv>
 23ff158:	2101      	movs	r1, #1
 23ff15a:	aa01      	add	r2, sp, #4
 23ff15c:	4806      	ldr	r0, [pc, #24]	; (23ff178 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff15e:	f7ff fe2f 	bl	23fedc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff162:	4620      	mov	r0, r4
 23ff164:	f7fa ffcb 	bl	23fa0fe <__cxa_guard_release>
 23ff168:	4804      	ldr	r0, [pc, #16]	; (23ff17c <_Z22__fetch_global_Serial2v+0x40>)
 23ff16a:	f000 f96d 	bl	23ff448 <atexit>
	return serial2;
}
 23ff16e:	4802      	ldr	r0, [pc, #8]	; (23ff178 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff170:	b006      	add	sp, #24
 23ff172:	bd10      	pop	{r4, pc}
 23ff174:	1007af10 	.word	0x1007af10
 23ff178:	1007af2c 	.word	0x1007af2c
 23ff17c:	023ff0cf 	.word	0x023ff0cf

023ff180 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff180:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff182:	f7ff ffdb 	bl	23ff13c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff186:	4b07      	ldr	r3, [pc, #28]	; (23ff1a4 <_Z15serialEventRun2v+0x24>)
 23ff188:	4604      	mov	r4, r0
 23ff18a:	b153      	cbz	r3, 23ff1a2 <_Z15serialEventRun2v+0x22>
 23ff18c:	f7ff fe36 	bl	23fedfc <_ZN11USARTSerial9isEnabledEv>
 23ff190:	b138      	cbz	r0, 23ff1a2 <_Z15serialEventRun2v+0x22>
 23ff192:	6823      	ldr	r3, [r4, #0]
 23ff194:	4620      	mov	r0, r4
 23ff196:	691b      	ldr	r3, [r3, #16]
 23ff198:	4798      	blx	r3
 23ff19a:	2800      	cmp	r0, #0
 23ff19c:	dd01      	ble.n	23ff1a2 <_Z15serialEventRun2v+0x22>
        handler();
 23ff19e:	e000      	b.n	23ff1a2 <_Z15serialEventRun2v+0x22>
 23ff1a0:	bf00      	nop
}
 23ff1a2:	bd10      	pop	{r4, pc}
 23ff1a4:	00000000 	.word	0x00000000

023ff1a8 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff1a8:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff1aa:	4c0d      	ldr	r4, [pc, #52]	; (23ff1e0 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff1ac:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff1ae:	e8d4 3f8f 	ldab	r3, [r4]
 23ff1b2:	07db      	lsls	r3, r3, #31
 23ff1b4:	d411      	bmi.n	23ff1da <_Z22__fetch_global_Serial3v+0x32>
 23ff1b6:	4620      	mov	r0, r4
 23ff1b8:	f7fa ff9c 	bl	23fa0f4 <__cxa_guard_acquire>
 23ff1bc:	b168      	cbz	r0, 23ff1da <_Z22__fetch_global_Serial3v+0x32>
 23ff1be:	a801      	add	r0, sp, #4
 23ff1c0:	f7ff ff92 	bl	23ff0e8 <_Z20acquireSerial3Bufferv>
 23ff1c4:	2102      	movs	r1, #2
 23ff1c6:	aa01      	add	r2, sp, #4
 23ff1c8:	4806      	ldr	r0, [pc, #24]	; (23ff1e4 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff1ca:	f7ff fdf9 	bl	23fedc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1ce:	4620      	mov	r0, r4
 23ff1d0:	f7fa ff95 	bl	23fa0fe <__cxa_guard_release>
 23ff1d4:	4804      	ldr	r0, [pc, #16]	; (23ff1e8 <_Z22__fetch_global_Serial3v+0x40>)
 23ff1d6:	f000 f937 	bl	23ff448 <atexit>
	return serial3;
}
 23ff1da:	4802      	ldr	r0, [pc, #8]	; (23ff1e4 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff1dc:	b006      	add	sp, #24
 23ff1de:	bd10      	pop	{r4, pc}
 23ff1e0:	1007af14 	.word	0x1007af14
 23ff1e4:	1007af40 	.word	0x1007af40
 23ff1e8:	023ff0cd 	.word	0x023ff0cd

023ff1ec <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff1ec:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff1ee:	f7ff ffdb 	bl	23ff1a8 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff1f2:	4b07      	ldr	r3, [pc, #28]	; (23ff210 <_Z15serialEventRun3v+0x24>)
 23ff1f4:	4604      	mov	r4, r0
 23ff1f6:	b153      	cbz	r3, 23ff20e <_Z15serialEventRun3v+0x22>
 23ff1f8:	f7ff fe00 	bl	23fedfc <_ZN11USARTSerial9isEnabledEv>
 23ff1fc:	b138      	cbz	r0, 23ff20e <_Z15serialEventRun3v+0x22>
 23ff1fe:	6823      	ldr	r3, [r4, #0]
 23ff200:	4620      	mov	r0, r4
 23ff202:	691b      	ldr	r3, [r3, #16]
 23ff204:	4798      	blx	r3
 23ff206:	2800      	cmp	r0, #0
 23ff208:	dd01      	ble.n	23ff20e <_Z15serialEventRun3v+0x22>
        handler();
 23ff20a:	e000      	b.n	23ff20e <_Z15serialEventRun3v+0x22>
 23ff20c:	bf00      	nop
}
 23ff20e:	bd10      	pop	{r4, pc}
 23ff210:	00000000 	.word	0x00000000

023ff214 <_ZnwjRKSt9nothrow_t>:
 23ff214:	f7fa bf5b 	b.w	23fa0ce <_Znwj>

023ff218 <_ZnajRKSt9nothrow_t>:
 23ff218:	f7fa bf5b 	b.w	23fa0d2 <_Znaj>

023ff21c <_ZSt25__throw_bad_function_callv>:
 23ff21c:	b508      	push	{r3, lr}
 23ff21e:	f7fb fd17 	bl	23fac50 <abort>
	...

023ff224 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff224:	4901      	ldr	r1, [pc, #4]	; (23ff22c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff226:	f000 b8f9 	b.w	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff22a:	bf00      	nop
 23ff22c:	023ffd64 	.word	0x023ffd64

023ff230 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff232:	2400      	movs	r4, #0
 23ff234:	2310      	movs	r3, #16
 23ff236:	4615      	mov	r5, r2
 23ff238:	6812      	ldr	r2, [r2, #0]
 23ff23a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff23e:	6803      	ldr	r3, [r0, #0]
 23ff240:	e9cd 4400 	strd	r4, r4, [sp]
 23ff244:	699e      	ldr	r6, [r3, #24]
 23ff246:	466b      	mov	r3, sp
 23ff248:	47b0      	blx	r6
 23ff24a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff24e:	f003 0306 	and.w	r3, r3, #6
 23ff252:	2b06      	cmp	r3, #6
 23ff254:	bf05      	ittet	eq
 23ff256:	9b00      	ldreq	r3, [sp, #0]
 23ff258:	2001      	moveq	r0, #1
 23ff25a:	4620      	movne	r0, r4
 23ff25c:	602b      	streq	r3, [r5, #0]
 23ff25e:	b004      	add	sp, #16
 23ff260:	bd70      	pop	{r4, r5, r6, pc}

023ff262 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff262:	9800      	ldr	r0, [sp, #0]
 23ff264:	4290      	cmp	r0, r2
 23ff266:	bf14      	ite	ne
 23ff268:	2001      	movne	r0, #1
 23ff26a:	2006      	moveq	r0, #6
 23ff26c:	4770      	bx	lr
	...

023ff270 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff270:	4b03      	ldr	r3, [pc, #12]	; (23ff280 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff272:	b510      	push	{r4, lr}
 23ff274:	4604      	mov	r4, r0
 23ff276:	6003      	str	r3, [r0, #0]
 23ff278:	f000 f8cd 	bl	23ff416 <_ZNSt9type_infoD1Ev>
 23ff27c:	4620      	mov	r0, r4
 23ff27e:	bd10      	pop	{r4, pc}
 23ff280:	023ffda4 	.word	0x023ffda4

023ff284 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff284:	b510      	push	{r4, lr}
 23ff286:	4604      	mov	r4, r0
 23ff288:	f7ff fff2 	bl	23ff270 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff28c:	2108      	movs	r1, #8
 23ff28e:	4620      	mov	r0, r4
 23ff290:	f7fa ff21 	bl	23fa0d6 <_ZdlPvj>
 23ff294:	4620      	mov	r0, r4
 23ff296:	bd10      	pop	{r4, pc}

023ff298 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff29c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff2a0:	461f      	mov	r7, r3
 23ff2a2:	4606      	mov	r6, r0
 23ff2a4:	4615      	mov	r5, r2
 23ff2a6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff2aa:	4598      	cmp	r8, r3
 23ff2ac:	d107      	bne.n	23ff2be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff2ae:	9907      	ldr	r1, [sp, #28]
 23ff2b0:	f000 f8b4 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff2b4:	b118      	cbz	r0, 23ff2be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff2b6:	7165      	strb	r5, [r4, #5]
 23ff2b8:	2000      	movs	r0, #0
 23ff2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff2be:	4639      	mov	r1, r7
 23ff2c0:	4630      	mov	r0, r6
 23ff2c2:	f000 f8ab 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff2c6:	2800      	cmp	r0, #0
 23ff2c8:	d0f6      	beq.n	23ff2b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff2ca:	2301      	movs	r3, #1
 23ff2cc:	f8c4 8000 	str.w	r8, [r4]
 23ff2d0:	7125      	strb	r5, [r4, #4]
 23ff2d2:	71a3      	strb	r3, [r4, #6]
 23ff2d4:	e7f0      	b.n	23ff2b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff2d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff2d6:	b538      	push	{r3, r4, r5, lr}
 23ff2d8:	4615      	mov	r5, r2
 23ff2da:	461c      	mov	r4, r3
 23ff2dc:	f000 f89e 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff2e0:	b120      	cbz	r0, 23ff2ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff2e2:	2308      	movs	r3, #8
 23ff2e4:	6025      	str	r5, [r4, #0]
 23ff2e6:	60e3      	str	r3, [r4, #12]
 23ff2e8:	2306      	movs	r3, #6
 23ff2ea:	7123      	strb	r3, [r4, #4]
 23ff2ec:	bd38      	pop	{r3, r4, r5, pc}

023ff2ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff2f0:	4605      	mov	r5, r0
 23ff2f2:	460c      	mov	r4, r1
 23ff2f4:	461e      	mov	r6, r3
 23ff2f6:	9201      	str	r2, [sp, #4]
 23ff2f8:	f000 f890 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff2fc:	b950      	cbnz	r0, 23ff314 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff2fe:	2e03      	cmp	r6, #3
 23ff300:	d808      	bhi.n	23ff314 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff302:	6823      	ldr	r3, [r4, #0]
 23ff304:	4629      	mov	r1, r5
 23ff306:	9a01      	ldr	r2, [sp, #4]
 23ff308:	4620      	mov	r0, r4
 23ff30a:	695b      	ldr	r3, [r3, #20]
 23ff30c:	b002      	add	sp, #8
 23ff30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff312:	4718      	bx	r3
 23ff314:	b002      	add	sp, #8
 23ff316:	bd70      	pop	{r4, r5, r6, pc}

023ff318 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff318:	4b03      	ldr	r3, [pc, #12]	; (23ff328 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff31a:	b510      	push	{r4, lr}
 23ff31c:	4604      	mov	r4, r0
 23ff31e:	6003      	str	r3, [r0, #0]
 23ff320:	f7ff ffa6 	bl	23ff270 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff324:	4620      	mov	r0, r4
 23ff326:	bd10      	pop	{r4, pc}
 23ff328:	023ffe04 	.word	0x023ffe04

023ff32c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff32c:	b510      	push	{r4, lr}
 23ff32e:	4604      	mov	r4, r0
 23ff330:	f7ff fff2 	bl	23ff318 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff334:	210c      	movs	r1, #12
 23ff336:	4620      	mov	r0, r4
 23ff338:	f7fa fecd 	bl	23fa0d6 <_ZdlPvj>
 23ff33c:	4620      	mov	r0, r4
 23ff33e:	bd10      	pop	{r4, pc}

023ff340 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff342:	9f08      	ldr	r7, [sp, #32]
 23ff344:	4605      	mov	r5, r0
 23ff346:	460e      	mov	r6, r1
 23ff348:	4614      	mov	r4, r2
 23ff34a:	4297      	cmp	r7, r2
 23ff34c:	d00a      	beq.n	23ff364 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff34e:	68a8      	ldr	r0, [r5, #8]
 23ff350:	4631      	mov	r1, r6
 23ff352:	6802      	ldr	r2, [r0, #0]
 23ff354:	9708      	str	r7, [sp, #32]
 23ff356:	6a15      	ldr	r5, [r2, #32]
 23ff358:	4622      	mov	r2, r4
 23ff35a:	46ac      	mov	ip, r5
 23ff35c:	b003      	add	sp, #12
 23ff35e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff362:	4760      	bx	ip
 23ff364:	4619      	mov	r1, r3
 23ff366:	9301      	str	r3, [sp, #4]
 23ff368:	f000 f858 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff36c:	9b01      	ldr	r3, [sp, #4]
 23ff36e:	2800      	cmp	r0, #0
 23ff370:	d0ed      	beq.n	23ff34e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff372:	2006      	movs	r0, #6
 23ff374:	b003      	add	sp, #12
 23ff376:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff378 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff378:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff37c:	460d      	mov	r5, r1
 23ff37e:	4619      	mov	r1, r3
 23ff380:	4681      	mov	r9, r0
 23ff382:	4617      	mov	r7, r2
 23ff384:	4698      	mov	r8, r3
 23ff386:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff38a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff38e:	f000 f845 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff392:	b190      	cbz	r0, 23ff3ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff394:	2d00      	cmp	r5, #0
 23ff396:	6034      	str	r4, [r6, #0]
 23ff398:	7137      	strb	r7, [r6, #4]
 23ff39a:	db09      	blt.n	23ff3b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff39c:	1961      	adds	r1, r4, r5
 23ff39e:	458a      	cmp	sl, r1
 23ff3a0:	bf0c      	ite	eq
 23ff3a2:	2106      	moveq	r1, #6
 23ff3a4:	2101      	movne	r1, #1
 23ff3a6:	71b1      	strb	r1, [r6, #6]
 23ff3a8:	2000      	movs	r0, #0
 23ff3aa:	b001      	add	sp, #4
 23ff3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff3b0:	3502      	adds	r5, #2
 23ff3b2:	d1f9      	bne.n	23ff3a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff3b4:	2301      	movs	r3, #1
 23ff3b6:	71b3      	strb	r3, [r6, #6]
 23ff3b8:	e7f6      	b.n	23ff3a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff3ba:	4554      	cmp	r4, sl
 23ff3bc:	d106      	bne.n	23ff3cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff3be:	4659      	mov	r1, fp
 23ff3c0:	4648      	mov	r0, r9
 23ff3c2:	f000 f82b 	bl	23ff41c <_ZNKSt9type_infoeqERKS_>
 23ff3c6:	b108      	cbz	r0, 23ff3cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff3c8:	7177      	strb	r7, [r6, #5]
 23ff3ca:	e7ed      	b.n	23ff3a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff3cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff3d0:	463a      	mov	r2, r7
 23ff3d2:	4629      	mov	r1, r5
 23ff3d4:	6803      	ldr	r3, [r0, #0]
 23ff3d6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff3da:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff3de:	69dc      	ldr	r4, [r3, #28]
 23ff3e0:	4643      	mov	r3, r8
 23ff3e2:	46a4      	mov	ip, r4
 23ff3e4:	b001      	add	sp, #4
 23ff3e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff3ea:	4760      	bx	ip

023ff3ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff3f0:	4607      	mov	r7, r0
 23ff3f2:	460c      	mov	r4, r1
 23ff3f4:	4615      	mov	r5, r2
 23ff3f6:	461e      	mov	r6, r3
 23ff3f8:	f7ff ff6d 	bl	23ff2d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff3fc:	b948      	cbnz	r0, 23ff412 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff3fe:	68b8      	ldr	r0, [r7, #8]
 23ff400:	462a      	mov	r2, r5
 23ff402:	4621      	mov	r1, r4
 23ff404:	6803      	ldr	r3, [r0, #0]
 23ff406:	699f      	ldr	r7, [r3, #24]
 23ff408:	4633      	mov	r3, r6
 23ff40a:	46bc      	mov	ip, r7
 23ff40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff410:	4760      	bx	ip
 23ff412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff416 <_ZNSt9type_infoD1Ev>:
 23ff416:	4770      	bx	lr

023ff418 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff418:	2000      	movs	r0, #0
 23ff41a:	4770      	bx	lr

023ff41c <_ZNKSt9type_infoeqERKS_>:
 23ff41c:	4281      	cmp	r1, r0
 23ff41e:	b508      	push	{r3, lr}
 23ff420:	d00e      	beq.n	23ff440 <_ZNKSt9type_infoeqERKS_+0x24>
 23ff422:	6840      	ldr	r0, [r0, #4]
 23ff424:	7803      	ldrb	r3, [r0, #0]
 23ff426:	2b2a      	cmp	r3, #42	; 0x2a
 23ff428:	d00c      	beq.n	23ff444 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff42a:	6849      	ldr	r1, [r1, #4]
 23ff42c:	780b      	ldrb	r3, [r1, #0]
 23ff42e:	2b2a      	cmp	r3, #42	; 0x2a
 23ff430:	bf08      	it	eq
 23ff432:	3101      	addeq	r1, #1
 23ff434:	f7fa fe1c 	bl	23fa070 <strcmp>
 23ff438:	fab0 f080 	clz	r0, r0
 23ff43c:	0940      	lsrs	r0, r0, #5
 23ff43e:	bd08      	pop	{r3, pc}
 23ff440:	2001      	movs	r0, #1
 23ff442:	e7fc      	b.n	23ff43e <_ZNKSt9type_infoeqERKS_+0x22>
 23ff444:	2000      	movs	r0, #0
 23ff446:	e7fa      	b.n	23ff43e <_ZNKSt9type_infoeqERKS_+0x22>

023ff448 <atexit>:
 23ff448:	2300      	movs	r3, #0
 23ff44a:	4601      	mov	r1, r0
 23ff44c:	461a      	mov	r2, r3
 23ff44e:	4618      	mov	r0, r3
 23ff450:	f000 b956 	b.w	23ff700 <__register_exitproc>

023ff454 <isprint>:
 23ff454:	4b02      	ldr	r3, [pc, #8]	; (23ff460 <isprint+0xc>)
 23ff456:	4418      	add	r0, r3
 23ff458:	7840      	ldrb	r0, [r0, #1]
 23ff45a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff45e:	4770      	bx	lr
 23ff460:	023ffed1 	.word	0x023ffed1

023ff464 <memcmp>:
 23ff464:	3901      	subs	r1, #1
 23ff466:	4402      	add	r2, r0
 23ff468:	b510      	push	{r4, lr}
 23ff46a:	4290      	cmp	r0, r2
 23ff46c:	d101      	bne.n	23ff472 <memcmp+0xe>
 23ff46e:	2000      	movs	r0, #0
 23ff470:	e005      	b.n	23ff47e <memcmp+0x1a>
 23ff472:	7803      	ldrb	r3, [r0, #0]
 23ff474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff478:	42a3      	cmp	r3, r4
 23ff47a:	d001      	beq.n	23ff480 <memcmp+0x1c>
 23ff47c:	1b18      	subs	r0, r3, r4
 23ff47e:	bd10      	pop	{r4, pc}
 23ff480:	3001      	adds	r0, #1
 23ff482:	e7f2      	b.n	23ff46a <memcmp+0x6>

023ff484 <memcpy>:
 23ff484:	440a      	add	r2, r1
 23ff486:	1e43      	subs	r3, r0, #1
 23ff488:	4291      	cmp	r1, r2
 23ff48a:	d100      	bne.n	23ff48e <memcpy+0xa>
 23ff48c:	4770      	bx	lr
 23ff48e:	b510      	push	{r4, lr}
 23ff490:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff494:	4291      	cmp	r1, r2
 23ff496:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff49a:	d1f9      	bne.n	23ff490 <memcpy+0xc>
 23ff49c:	bd10      	pop	{r4, pc}

023ff49e <memmove>:
 23ff49e:	4288      	cmp	r0, r1
 23ff4a0:	b510      	push	{r4, lr}
 23ff4a2:	eb01 0402 	add.w	r4, r1, r2
 23ff4a6:	d902      	bls.n	23ff4ae <memmove+0x10>
 23ff4a8:	4284      	cmp	r4, r0
 23ff4aa:	4623      	mov	r3, r4
 23ff4ac:	d807      	bhi.n	23ff4be <memmove+0x20>
 23ff4ae:	1e43      	subs	r3, r0, #1
 23ff4b0:	42a1      	cmp	r1, r4
 23ff4b2:	d008      	beq.n	23ff4c6 <memmove+0x28>
 23ff4b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff4b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff4bc:	e7f8      	b.n	23ff4b0 <memmove+0x12>
 23ff4be:	4402      	add	r2, r0
 23ff4c0:	4601      	mov	r1, r0
 23ff4c2:	428a      	cmp	r2, r1
 23ff4c4:	d100      	bne.n	23ff4c8 <memmove+0x2a>
 23ff4c6:	bd10      	pop	{r4, pc}
 23ff4c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff4cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff4d0:	e7f7      	b.n	23ff4c2 <memmove+0x24>

023ff4d2 <memset>:
 23ff4d2:	4402      	add	r2, r0
 23ff4d4:	4603      	mov	r3, r0
 23ff4d6:	4293      	cmp	r3, r2
 23ff4d8:	d100      	bne.n	23ff4dc <memset+0xa>
 23ff4da:	4770      	bx	lr
 23ff4dc:	f803 1b01 	strb.w	r1, [r3], #1
 23ff4e0:	e7f9      	b.n	23ff4d6 <memset+0x4>
	...

023ff4e4 <srand>:
 23ff4e4:	b538      	push	{r3, r4, r5, lr}
 23ff4e6:	4b10      	ldr	r3, [pc, #64]	; (23ff528 <srand+0x44>)
 23ff4e8:	4604      	mov	r4, r0
 23ff4ea:	681d      	ldr	r5, [r3, #0]
 23ff4ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff4ee:	b9b3      	cbnz	r3, 23ff51e <srand+0x3a>
 23ff4f0:	2018      	movs	r0, #24
 23ff4f2:	f7fb fb75 	bl	23fabe0 <malloc>
 23ff4f6:	4602      	mov	r2, r0
 23ff4f8:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff4fa:	b920      	cbnz	r0, 23ff506 <srand+0x22>
 23ff4fc:	4b0b      	ldr	r3, [pc, #44]	; (23ff52c <srand+0x48>)
 23ff4fe:	2142      	movs	r1, #66	; 0x42
 23ff500:	480b      	ldr	r0, [pc, #44]	; (23ff530 <srand+0x4c>)
 23ff502:	f7fb fbc1 	bl	23fac88 <__assert_func>
 23ff506:	490b      	ldr	r1, [pc, #44]	; (23ff534 <srand+0x50>)
 23ff508:	4b0b      	ldr	r3, [pc, #44]	; (23ff538 <srand+0x54>)
 23ff50a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff50e:	4b0b      	ldr	r3, [pc, #44]	; (23ff53c <srand+0x58>)
 23ff510:	2100      	movs	r1, #0
 23ff512:	6083      	str	r3, [r0, #8]
 23ff514:	230b      	movs	r3, #11
 23ff516:	8183      	strh	r3, [r0, #12]
 23ff518:	2001      	movs	r0, #1
 23ff51a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff51e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff520:	2200      	movs	r2, #0
 23ff522:	611c      	str	r4, [r3, #16]
 23ff524:	615a      	str	r2, [r3, #20]
 23ff526:	bd38      	pop	{r3, r4, r5, pc}
 23ff528:	1007aab0 	.word	0x1007aab0
 23ff52c:	023ffe3d 	.word	0x023ffe3d
 23ff530:	023ffe54 	.word	0x023ffe54
 23ff534:	abcd330e 	.word	0xabcd330e
 23ff538:	e66d1234 	.word	0xe66d1234
 23ff53c:	0005deec 	.word	0x0005deec

023ff540 <strchr>:
 23ff540:	b2c9      	uxtb	r1, r1
 23ff542:	4603      	mov	r3, r0
 23ff544:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff548:	b11a      	cbz	r2, 23ff552 <strchr+0x12>
 23ff54a:	428a      	cmp	r2, r1
 23ff54c:	d1f9      	bne.n	23ff542 <strchr+0x2>
 23ff54e:	4618      	mov	r0, r3
 23ff550:	4770      	bx	lr
 23ff552:	2900      	cmp	r1, #0
 23ff554:	bf18      	it	ne
 23ff556:	2300      	movne	r3, #0
 23ff558:	e7f9      	b.n	23ff54e <strchr+0xe>

023ff55a <strchrnul>:
 23ff55a:	b510      	push	{r4, lr}
 23ff55c:	4604      	mov	r4, r0
 23ff55e:	f7ff ffef 	bl	23ff540 <strchr>
 23ff562:	b918      	cbnz	r0, 23ff56c <strchrnul+0x12>
 23ff564:	4620      	mov	r0, r4
 23ff566:	f7fa fd8d 	bl	23fa084 <strlen>
 23ff56a:	4420      	add	r0, r4
 23ff56c:	bd10      	pop	{r4, pc}

023ff56e <strcpy>:
 23ff56e:	4603      	mov	r3, r0
 23ff570:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff574:	f803 2b01 	strb.w	r2, [r3], #1
 23ff578:	2a00      	cmp	r2, #0
 23ff57a:	d1f9      	bne.n	23ff570 <strcpy+0x2>
 23ff57c:	4770      	bx	lr

023ff57e <strncmp>:
 23ff57e:	b510      	push	{r4, lr}
 23ff580:	b17a      	cbz	r2, 23ff5a2 <strncmp+0x24>
 23ff582:	4603      	mov	r3, r0
 23ff584:	3901      	subs	r1, #1
 23ff586:	1884      	adds	r4, r0, r2
 23ff588:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff58c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff590:	4290      	cmp	r0, r2
 23ff592:	d101      	bne.n	23ff598 <strncmp+0x1a>
 23ff594:	42a3      	cmp	r3, r4
 23ff596:	d101      	bne.n	23ff59c <strncmp+0x1e>
 23ff598:	1a80      	subs	r0, r0, r2
 23ff59a:	bd10      	pop	{r4, pc}
 23ff59c:	2800      	cmp	r0, #0
 23ff59e:	d1f3      	bne.n	23ff588 <strncmp+0xa>
 23ff5a0:	e7fa      	b.n	23ff598 <strncmp+0x1a>
 23ff5a2:	4610      	mov	r0, r2
 23ff5a4:	e7f9      	b.n	23ff59a <strncmp+0x1c>

023ff5a6 <strnlen>:
 23ff5a6:	4602      	mov	r2, r0
 23ff5a8:	4401      	add	r1, r0
 23ff5aa:	b510      	push	{r4, lr}
 23ff5ac:	428a      	cmp	r2, r1
 23ff5ae:	4613      	mov	r3, r2
 23ff5b0:	d003      	beq.n	23ff5ba <strnlen+0x14>
 23ff5b2:	781c      	ldrb	r4, [r3, #0]
 23ff5b4:	3201      	adds	r2, #1
 23ff5b6:	2c00      	cmp	r4, #0
 23ff5b8:	d1f8      	bne.n	23ff5ac <strnlen+0x6>
 23ff5ba:	1a18      	subs	r0, r3, r0
 23ff5bc:	bd10      	pop	{r4, pc}

023ff5be <strrchr>:
 23ff5be:	b538      	push	{r3, r4, r5, lr}
 23ff5c0:	4603      	mov	r3, r0
 23ff5c2:	460c      	mov	r4, r1
 23ff5c4:	b969      	cbnz	r1, 23ff5e2 <strrchr+0x24>
 23ff5c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff5ca:	f7ff bfb9 	b.w	23ff540 <strchr>
 23ff5ce:	1c43      	adds	r3, r0, #1
 23ff5d0:	4605      	mov	r5, r0
 23ff5d2:	4621      	mov	r1, r4
 23ff5d4:	4618      	mov	r0, r3
 23ff5d6:	f7ff ffb3 	bl	23ff540 <strchr>
 23ff5da:	2800      	cmp	r0, #0
 23ff5dc:	d1f7      	bne.n	23ff5ce <strrchr+0x10>
 23ff5de:	4628      	mov	r0, r5
 23ff5e0:	bd38      	pop	{r3, r4, r5, pc}
 23ff5e2:	2500      	movs	r5, #0
 23ff5e4:	e7f5      	b.n	23ff5d2 <strrchr+0x14>
	...

023ff5e8 <_strtol_l.constprop.0>:
 23ff5e8:	2b01      	cmp	r3, #1
 23ff5ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff5ee:	d001      	beq.n	23ff5f4 <_strtol_l.constprop.0+0xc>
 23ff5f0:	2b24      	cmp	r3, #36	; 0x24
 23ff5f2:	d906      	bls.n	23ff602 <_strtol_l.constprop.0+0x1a>
 23ff5f4:	f7fb fb3a 	bl	23fac6c <__errno>
 23ff5f8:	2316      	movs	r3, #22
 23ff5fa:	6003      	str	r3, [r0, #0]
 23ff5fc:	2000      	movs	r0, #0
 23ff5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff602:	460d      	mov	r5, r1
 23ff604:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff6e8 <_strtol_l.constprop.0+0x100>
 23ff608:	462e      	mov	r6, r5
 23ff60a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff60e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff612:	f017 0708 	ands.w	r7, r7, #8
 23ff616:	d1f7      	bne.n	23ff608 <_strtol_l.constprop.0+0x20>
 23ff618:	2c2d      	cmp	r4, #45	; 0x2d
 23ff61a:	d132      	bne.n	23ff682 <_strtol_l.constprop.0+0x9a>
 23ff61c:	782c      	ldrb	r4, [r5, #0]
 23ff61e:	2701      	movs	r7, #1
 23ff620:	1cb5      	adds	r5, r6, #2
 23ff622:	2b00      	cmp	r3, #0
 23ff624:	d05b      	beq.n	23ff6de <_strtol_l.constprop.0+0xf6>
 23ff626:	2b10      	cmp	r3, #16
 23ff628:	d109      	bne.n	23ff63e <_strtol_l.constprop.0+0x56>
 23ff62a:	2c30      	cmp	r4, #48	; 0x30
 23ff62c:	d107      	bne.n	23ff63e <_strtol_l.constprop.0+0x56>
 23ff62e:	782c      	ldrb	r4, [r5, #0]
 23ff630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff634:	2c58      	cmp	r4, #88	; 0x58
 23ff636:	d14d      	bne.n	23ff6d4 <_strtol_l.constprop.0+0xec>
 23ff638:	786c      	ldrb	r4, [r5, #1]
 23ff63a:	2310      	movs	r3, #16
 23ff63c:	3502      	adds	r5, #2
 23ff63e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff642:	f04f 0c00 	mov.w	ip, #0
 23ff646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff64a:	4666      	mov	r6, ip
 23ff64c:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff650:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff654:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff658:	f1be 0f09 	cmp.w	lr, #9
 23ff65c:	d816      	bhi.n	23ff68c <_strtol_l.constprop.0+0xa4>
 23ff65e:	4674      	mov	r4, lr
 23ff660:	42a3      	cmp	r3, r4
 23ff662:	dd24      	ble.n	23ff6ae <_strtol_l.constprop.0+0xc6>
 23ff664:	f1bc 0f00 	cmp.w	ip, #0
 23ff668:	db1e      	blt.n	23ff6a8 <_strtol_l.constprop.0+0xc0>
 23ff66a:	45b1      	cmp	r9, r6
 23ff66c:	d31c      	bcc.n	23ff6a8 <_strtol_l.constprop.0+0xc0>
 23ff66e:	d101      	bne.n	23ff674 <_strtol_l.constprop.0+0x8c>
 23ff670:	45a2      	cmp	sl, r4
 23ff672:	db19      	blt.n	23ff6a8 <_strtol_l.constprop.0+0xc0>
 23ff674:	fb06 4603 	mla	r6, r6, r3, r4
 23ff678:	f04f 0c01 	mov.w	ip, #1
 23ff67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff680:	e7e8      	b.n	23ff654 <_strtol_l.constprop.0+0x6c>
 23ff682:	2c2b      	cmp	r4, #43	; 0x2b
 23ff684:	bf04      	itt	eq
 23ff686:	782c      	ldrbeq	r4, [r5, #0]
 23ff688:	1cb5      	addeq	r5, r6, #2
 23ff68a:	e7ca      	b.n	23ff622 <_strtol_l.constprop.0+0x3a>
 23ff68c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff690:	f1be 0f19 	cmp.w	lr, #25
 23ff694:	d801      	bhi.n	23ff69a <_strtol_l.constprop.0+0xb2>
 23ff696:	3c37      	subs	r4, #55	; 0x37
 23ff698:	e7e2      	b.n	23ff660 <_strtol_l.constprop.0+0x78>
 23ff69a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff69e:	f1be 0f19 	cmp.w	lr, #25
 23ff6a2:	d804      	bhi.n	23ff6ae <_strtol_l.constprop.0+0xc6>
 23ff6a4:	3c57      	subs	r4, #87	; 0x57
 23ff6a6:	e7db      	b.n	23ff660 <_strtol_l.constprop.0+0x78>
 23ff6a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff6ac:	e7e6      	b.n	23ff67c <_strtol_l.constprop.0+0x94>
 23ff6ae:	f1bc 0f00 	cmp.w	ip, #0
 23ff6b2:	da05      	bge.n	23ff6c0 <_strtol_l.constprop.0+0xd8>
 23ff6b4:	2322      	movs	r3, #34	; 0x22
 23ff6b6:	4646      	mov	r6, r8
 23ff6b8:	6003      	str	r3, [r0, #0]
 23ff6ba:	b942      	cbnz	r2, 23ff6ce <_strtol_l.constprop.0+0xe6>
 23ff6bc:	4630      	mov	r0, r6
 23ff6be:	e79e      	b.n	23ff5fe <_strtol_l.constprop.0+0x16>
 23ff6c0:	b107      	cbz	r7, 23ff6c4 <_strtol_l.constprop.0+0xdc>
 23ff6c2:	4276      	negs	r6, r6
 23ff6c4:	2a00      	cmp	r2, #0
 23ff6c6:	d0f9      	beq.n	23ff6bc <_strtol_l.constprop.0+0xd4>
 23ff6c8:	f1bc 0f00 	cmp.w	ip, #0
 23ff6cc:	d000      	beq.n	23ff6d0 <_strtol_l.constprop.0+0xe8>
 23ff6ce:	1e69      	subs	r1, r5, #1
 23ff6d0:	6011      	str	r1, [r2, #0]
 23ff6d2:	e7f3      	b.n	23ff6bc <_strtol_l.constprop.0+0xd4>
 23ff6d4:	2430      	movs	r4, #48	; 0x30
 23ff6d6:	2b00      	cmp	r3, #0
 23ff6d8:	d1b1      	bne.n	23ff63e <_strtol_l.constprop.0+0x56>
 23ff6da:	2308      	movs	r3, #8
 23ff6dc:	e7af      	b.n	23ff63e <_strtol_l.constprop.0+0x56>
 23ff6de:	2c30      	cmp	r4, #48	; 0x30
 23ff6e0:	d0a5      	beq.n	23ff62e <_strtol_l.constprop.0+0x46>
 23ff6e2:	230a      	movs	r3, #10
 23ff6e4:	e7ab      	b.n	23ff63e <_strtol_l.constprop.0+0x56>
 23ff6e6:	bf00      	nop
 23ff6e8:	023ffed2 	.word	0x023ffed2

023ff6ec <strtol>:
 23ff6ec:	4613      	mov	r3, r2
 23ff6ee:	460a      	mov	r2, r1
 23ff6f0:	4601      	mov	r1, r0
 23ff6f2:	4802      	ldr	r0, [pc, #8]	; (23ff6fc <strtol+0x10>)
 23ff6f4:	6800      	ldr	r0, [r0, #0]
 23ff6f6:	f7ff bf77 	b.w	23ff5e8 <_strtol_l.constprop.0>
 23ff6fa:	bf00      	nop
 23ff6fc:	1007aab0 	.word	0x1007aab0

023ff700 <__register_exitproc>:
 23ff700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff704:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff7c4 <__register_exitproc+0xc4>
 23ff708:	4606      	mov	r6, r0
 23ff70a:	461f      	mov	r7, r3
 23ff70c:	460d      	mov	r5, r1
 23ff70e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff712:	4691      	mov	r9, r2
 23ff714:	f000 f858 	bl	23ff7c8 <__retarget_lock_acquire_recursive>
 23ff718:	4b26      	ldr	r3, [pc, #152]	; (23ff7b4 <__register_exitproc+0xb4>)
 23ff71a:	681c      	ldr	r4, [r3, #0]
 23ff71c:	b934      	cbnz	r4, 23ff72c <__register_exitproc+0x2c>
 23ff71e:	4c26      	ldr	r4, [pc, #152]	; (23ff7b8 <__register_exitproc+0xb8>)
 23ff720:	601c      	str	r4, [r3, #0]
 23ff722:	4b26      	ldr	r3, [pc, #152]	; (23ff7bc <__register_exitproc+0xbc>)
 23ff724:	b113      	cbz	r3, 23ff72c <__register_exitproc+0x2c>
 23ff726:	681b      	ldr	r3, [r3, #0]
 23ff728:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff72c:	6863      	ldr	r3, [r4, #4]
 23ff72e:	2b1f      	cmp	r3, #31
 23ff730:	dd07      	ble.n	23ff742 <__register_exitproc+0x42>
 23ff732:	f8d8 0000 	ldr.w	r0, [r8]
 23ff736:	f000 f849 	bl	23ff7cc <__retarget_lock_release_recursive>
 23ff73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff742:	b35e      	cbz	r6, 23ff79c <__register_exitproc+0x9c>
 23ff744:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff748:	b988      	cbnz	r0, 23ff76e <__register_exitproc+0x6e>
 23ff74a:	4b1d      	ldr	r3, [pc, #116]	; (23ff7c0 <__register_exitproc+0xc0>)
 23ff74c:	b923      	cbnz	r3, 23ff758 <__register_exitproc+0x58>
 23ff74e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff752:	f000 f83a 	bl	23ff7ca <__retarget_lock_release>
 23ff756:	e7f0      	b.n	23ff73a <__register_exitproc+0x3a>
 23ff758:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff75c:	f7fb fa40 	bl	23fabe0 <malloc>
 23ff760:	2800      	cmp	r0, #0
 23ff762:	d0f4      	beq.n	23ff74e <__register_exitproc+0x4e>
 23ff764:	2300      	movs	r3, #0
 23ff766:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff76a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff76e:	6863      	ldr	r3, [r4, #4]
 23ff770:	2201      	movs	r2, #1
 23ff772:	2e02      	cmp	r6, #2
 23ff774:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff778:	fa02 f203 	lsl.w	r2, r2, r3
 23ff77c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff780:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff784:	ea43 0302 	orr.w	r3, r3, r2
 23ff788:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff78c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff790:	bf02      	ittt	eq
 23ff792:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff796:	4313      	orreq	r3, r2
 23ff798:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff79c:	6863      	ldr	r3, [r4, #4]
 23ff79e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff7a2:	1c5a      	adds	r2, r3, #1
 23ff7a4:	3302      	adds	r3, #2
 23ff7a6:	6062      	str	r2, [r4, #4]
 23ff7a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff7ac:	f000 f80e 	bl	23ff7cc <__retarget_lock_release_recursive>
 23ff7b0:	2000      	movs	r0, #0
 23ff7b2:	e7c4      	b.n	23ff73e <__register_exitproc+0x3e>
 23ff7b4:	1007afe0 	.word	0x1007afe0
 23ff7b8:	1007af54 	.word	0x1007af54
 23ff7bc:	00000000 	.word	0x00000000
 23ff7c0:	023fabe1 	.word	0x023fabe1
 23ff7c4:	1007ab14 	.word	0x1007ab14

023ff7c8 <__retarget_lock_acquire_recursive>:
 23ff7c8:	4770      	bx	lr

023ff7ca <__retarget_lock_release>:
 23ff7ca:	4770      	bx	lr

023ff7cc <__retarget_lock_release_recursive>:
 23ff7cc:	4770      	bx	lr
	...

023ff7d0 <link_const_data_start>:
 23ff7d0:	00000000 	.word	0x00000000
 23ff7d4:	34fb0000 	.word	0x34fb0000
 23ff7d8:	00805f9b 	.word	0x00805f9b
 23ff7dc:	10008000 	.word	0x10008000
	...

023ff7e8 <dynalib_user>:
 23ff7e8:	023fa095 023fa0bd 023fa0c1 00000000     ..?...?...?.....
 23ff7f8:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff808:	6c617574 00642500 38323837 64353566     tual.%d.7828f55d
 23ff818:	3430632d 39342d63 382d3865 2d396536     -c04c-49e8-86e9-
 23ff828:	33316638 35373236 37636435 63353700     8f1362755dc7.75c
 23ff838:	34643431 62312d34 342d3131 2d343135     14d44-1b11-4514-
 23ff848:	31323262 3166642d 38636635 30353038     b221-df15fc88050
 23ff858:	30310066 38646366 382d6137 2d313036     f.10fcd87a-8601-
 23ff868:	65343834 3932382d 31642d64 34613431     484e-829d-d114a4
 23ff878:	62386130 00003661                       0a8ba6..

023ff880 <_ZTVN5spark10LogHandlerE>:
	...
 23ff890:	023fa0dd 023fa105                       ..?...?.

023ff898 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff8a0:	023fa109 023fa13d 023fc275 023fc41d     ..?.=.?.u.?...?.

023ff8b0 <_ZTVN5spark12NetworkClassE>:
	...
 23ff8b8:	023facc1 023faccb 023facd5 023facdf     ..?...?...?...?.
 23ff8c8:	023face9 023facf5 023fad01 023fad09     ..?...?...?...?.
 23ff8d8:	023fad11 023fad1d 023fad25 023fad2f     ..?...?.%.?./.?.
 23ff8e8:	023fad39                                9.?.

023ff8ec <_ZTVN5spark9WiFiClassE>:
	...
 23ff8f4:	023fae83 023fae79 023fae6f 023fae25     ..?.y.?.o.?.%.?.
 23ff904:	023fae63 023fae57 023fad01 023fad09     c.?.W.?...?...?.
 23ff914:	023fae4b 023fae43 023fae39 023fae2f     K.?.C.?.9.?./.?.
 23ff924:	023fad39                                9.?.

023ff928 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ff930:	75007525 78343025 00000000              %u.u%04x....

023ff93c <_ZTV9USBSerial>:
	...
 23ff944:	023fb28f 023fb2f7 023fb2cd 023fc5c9     ..?...?...?...?.
 23ff954:	023fb2bf 023fb291 023fb2a1 023fb2f1     ..?...?...?...?.
 23ff964:	023fb2b1 023fb289                       ..?...?.

023ff96c <_ZTV9IPAddress>:
	...
 23ff974:	023fb3a5 023fb395 023fb397 252d5925     ..?...?...?.%Y-%
 23ff984:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ff994:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ff9a4:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ff9b4:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ff9c4:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ff9d4:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ff9e4:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ff9f4:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
 23ffa04:	65640065 6c696174 00000000              e.detail....

023ffa10 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffa18:	023fb649 023fb66f 023fb62d 023faecf     I.?.o.?.-.?...?.

023ffa28 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffa30:	023fbb21 023fbb39 023fc275 023fc41d     !.?.9.?.u.?...?.

023ffa40 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffa48:	023fbb4d 023fbb61 023fc455 023fb635     M.?.a.?.U.?.5.?.

023ffa58 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffa60:	023fb647 023fb67d 023fc1d9 023fb637     G.?.}.?...?.7.?.

023ffa70 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffa78:	023fb645 023fb68b 023fba65 023fb6ad     E.?...?.e.?...?.
 23ffa88:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffa98:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffaa8:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffab8:	20676e69 76726573 73656369 ffff002e     ing services....
 23ffac8:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ffad8:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ffae8:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ffaf8:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ffb08:	4f4e5f52 5000454e 20726565 69766564     R_NONE.Peer devi
 23ffb18:	69206563 696d2073 6e697373 46002167     ce is missing!.F
 23ffb28:	656c6961 6f742064 6c6c6120 7461636f     ailed to allocat
 23ffb38:	656d2065 79726f6d 61460021 64656c69     e memory!.Failed
 23ffb48:	206f7420 65707061 7020646e 20726565      to append peer 
 23ffb58:	746e6543 206c6172 69766564 002e6563     Central device..
 23ffb68:	6e6e6f43 65746365 69440064 6e6f6373     Connected.Discon
 23ffb78:	7463656e 46006465 656c6961 6f742064     nected.Failed to
 23ffb88:	70706120 20646e65 63736964 7265766f      append discover
 23ffb98:	73206465 69767265 002e6563 72617453     ed service..Star
 23ffba8:	69642074 766f6373 6e697265 68632067     t discovering ch
 23ffbb8:	63617261 69726574 63697473 666f2073     aracteristics of
 23ffbc8:	72657320 65636976 7325203a 6143002e      service: %s..Ca
 23ffbd8:	746f6e6e 64646120 77656e20 65657020     nnot add new pee
 23ffbe8:	65642072 65636976 654e002e 65702077     r device..New pe
 23ffbf8:	68706972 6c617265 20736920 6e6e6f63     ripheral is conn
 23ffc08:	65746365 43002e64 61726168 72657463     ected..Character
 23ffc18:	69747369 69642063 766f6373 64657265     istic discovered
 23ffc28:	6944002e 766f6373 64657265 61686320     ..Discovered cha
 23ffc38:	74636172 73697265 27636974 61682073     racteristic's ha
 23ffc48:	656c646e 20736920 61766e69 2e64696c     ndle is invalid.
 23ffc58:	69614600 2064656c 61206f74 6e657070     .Failed to appen
 23ffc68:	69642064 766f6373 64657265 61686320     d discovered cha
 23ffc78:	74636172 73697265 2e636974 00000000     racteristic.....

023ffc88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc90:	023fc661 023fc6c5 023fc83b 023fc6ef     a.?...?.;.?...?.
 23ffca0:	023fc665                                e.?.

023ffca4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffcac:	023fc65d 023fc6d3 023fc65f 023fc6f5     ].?...?._.?...?.
 23ffcbc:	023fc685                                ..?.

023ffcc0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffcc8:	023fc65b 023fc6e1 023fd41d 023fc6fb     [.?...?...?...?.
 23ffcd8:	023fc6a5                                ..?.

023ffcdc <_ZTV11USARTSerial>:
	...
 23ffce4:	023fed45 023fedb1 023fed89 023fc5c9     E.?...?...?...?.
 23ffcf4:	023fed59 023fed75 023fed67 023fed83     Y.?.u.?.g.?...?.
 23ffd04:	023fed47 023fed4b                       G.?.K.?.

023ffd0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffd14:	023fee87 023fee7d 023fee73 023fee69     ..?.}.?.s.?.i.?.
 23ffd24:	023fee5d 023fee51 023fad01 023fad09     ].?.Q.?...?...?.
 23ffd34:	023fee45 023fee3d 023fee33 023fee29     E.?.=.?.3.?.).?.
 23ffd44:	023fad39                                9.?.

023ffd48 <_ZSt7nothrow>:
	...

023ffd49 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd49:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd59:	5f646572 00676174                        red_tag....

023ffd64 <_ZTISt19_Sp_make_shared_tag>:
 23ffd64:	023ffda4 023ffd49                       ..?.I.?.

023ffd6c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd6c:	023ffe04 023ffd78 023ffe28              ..?.x.?.(.?.

023ffd78 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd78:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd88:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd98:	00000045                                E...

023ffd9c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd9c:	00000000 023ffd6c 023ff271 023ff285     ....l.?.q.?...?.
 23ffdac:	023ff419 023ff419 023ff2ef 023ff231     ..?...?...?.1.?.
 23ffdbc:	023ff2d7 023ff299 023ff263              ..?...?.c.?.

023ffdc8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc8:	023ffe04 023ffdd4 023ffd6c              ..?...?.l.?.

023ffdd4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf4:	456f666e 00000000                       nfoE....

023ffdfc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdfc:	00000000 023ffdc8 023ff319 023ff32d     ......?...?.-.?.
 23ffe0c:	023ff419 023ff419 023ff2ef 023ff231     ..?...?...?.1.?.
 23ffe1c:	023ff3ed 023ff379 023ff341              ..?.y.?.A.?.

023ffe28 <_ZTISt9type_info>:
 23ffe28:	023ffda4 023ffe30                       ..?.0.?.

023ffe30 <_ZTSSt9type_info>:
 23ffe30:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe40:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe50:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe60:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe70:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe80:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe90:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffea0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeb0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffec0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffed1 <_ctype_>:
 23ffed1:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffee1:	20202020 20202020 20202020 20202020                     
 23ffef1:	10108820 10101010 10101010 10101010      ...............
 23fff01:	04040410 04040404 10040404 10101010     ................
 23fff11:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff21:	01010101 01010101 01010101 10101010     ................
 23fff31:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff41:	02020202 02020202 02020202 10101010     ................
 23fff51:	00000020 00000000 00000000 00000000      ...............
	...

023fffd2 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fa3dd 	.word	0x023fa3dd
 23fffd8:	023fae11 	.word	0x023fae11
 23fffdc:	023fae8d 	.word	0x023fae8d
 23fffe0:	023fb60d 	.word	0x023fb60d
 23fffe4:	023fb619 	.word	0x023fb619
 23fffe8:	023fc265 	.word	0x023fc265
 23fffec:	023fed35 	.word	0x023fed35
 23ffff0:	023fee05 	.word	0x023fee05
 23ffff4:	023fee91 	.word	0x023fee91
