
/home/elec4740/Documents/particle/ARGON_uart_test/target/5.2.0/argon/ARGON_uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002bc0  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6bdc  000b6bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e618  000b6c00  0000e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000016c  2003e684  2003e684  0001e684  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6c6c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6c70  000b6c70  00016c70  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6c76  000b6c76  00016c76  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6c9a  000b6c9a  00016c9a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00109df1  00000000  00000000  00016c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00010065  00000000  00000000  00120a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a48  00000000  00000000  00130af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003270b  00000000  00000000  0013353c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00034c87  00000000  00000000  00165c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00140f9d  00000000  00000000  0019a8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00039fee  00000000  00000000  002db86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000a9e0  00000000  00000000  00315859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007910  00000000  00000000  0032023c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 fa53 	bl	b64fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 fa75 	bl	b654c <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e618 	.word	0x2003e618
   b406c:	000b6c00 	.word	0x000b6c00
   b4070:	2003e684 	.word	0x2003e684
   b4074:	2003e684 	.word	0x2003e684
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f000 fdcd 	bl	b4c20 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6bb8 	.word	0x000b6bb8
   b40a0:	000b6bdc 	.word	0x000b6bdc

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b824 	b.w	b40f0 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f879 	bl	b41a0 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f000 bd6d 	b.w	b4b90 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 baeb 	b.w	b4690 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bae9 	b.w	b4690 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 baef 	b.w	b46a0 <free>

000b40c2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c2:	7800      	ldrb	r0, [r0, #0]
   b40c4:	fab0 f080 	clz	r0, r0
   b40c8:	0940      	lsrs	r0, r0, #5
   b40ca:	4770      	bx	lr

000b40cc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40cc:	2301      	movs	r3, #1
   b40ce:	7003      	strb	r3, [r0, #0]
   b40d0:	4770      	bx	lr

000b40d2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b40d2:	b538      	push	{r3, r4, r5, lr}
   b40d4:	4604      	mov	r4, r0
   b40d6:	1845      	adds	r5, r0, r1
    // Log.trace("Received data from: %02X:%02X:%02X:%02X:%02X:%02X:", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);

    for (size_t ii = 0; ii < len; ii++) {
   b40d8:	42ac      	cmp	r4, r5
   b40da:	d007      	beq.n	b40ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a>
        Serial.write(data[ii]);
   b40dc:	f000 fc7c 	bl	b49d8 <_Z16_fetch_usbserialv>
   b40e0:	6803      	ldr	r3, [r0, #0]
   b40e2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b40e6:	689b      	ldr	r3, [r3, #8]
   b40e8:	4798      	blx	r3
    for (size_t ii = 0; ii < len; ii++) {
   b40ea:	e7f5      	b.n	b40d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6>
    }
}
   b40ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b40f0 <setup>:

void setup() {
   b40f0:	b570      	push	{r4, r5, r6, lr}
   b40f2:	b090      	sub	sp, #64	; 0x40
    Serial.begin();
   b40f4:	f000 fc70 	bl	b49d8 <_Z16_fetch_usbserialv>
   b40f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40fc:	f000 fc60 	bl	b49c0 <_ZN9USBSerial5beginEl>

	BLE.on();
   b4100:	f001 f95a 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4104:	f001 f9a2 	bl	b544c <_ZNK8particle14BleLocalDevice2onEv>

    BLE.addCharacteristic(txCharacteristic);
   b4108:	f001 f956 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b410c:	4a21      	ldr	r2, [pc, #132]	; (b4194 <setup+0xa4>)
   b410e:	4c22      	ldr	r4, [pc, #136]	; (b4198 <setup+0xa8>)
   b4110:	4601      	mov	r1, r0
   b4112:	a80b      	add	r0, sp, #44	; 0x2c
   b4114:	f001 fe62 	bl	b5ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4118:	a80b      	add	r0, sp, #44	; 0x2c
   b411a:	f001 fa3c 	bl	b5596 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b411e:	f001 f94b 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4122:	4a1e      	ldr	r2, [pc, #120]	; (b419c <setup+0xac>)
   b4124:	4601      	mov	r1, r0
   b4126:	a80b      	add	r0, sp, #44	; 0x2c
   b4128:	f001 fe58 	bl	b5ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b412c:	a80b      	add	r0, sp, #44	; 0x2c
   b412e:	f001 fa32 	bl	b5596 <_ZN8particle17BleCharacteristicD1Ev>

    BleAdvertisingData data;
   b4132:	a803      	add	r0, sp, #12
   b4134:	f001 fb55 	bl	b57e2 <_ZN8particle18BleAdvertisingDataC1Ev>
    data.appendServiceUUID(serviceUuid);
   b4138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b413a:	ad06      	add	r5, sp, #24
   b413c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b413e:	ad06      	add	r5, sp, #24
   b4140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4142:	6826      	ldr	r6, [r4, #0]
   b4144:	ac0b      	add	r4, sp, #44	; 0x2c
   b4146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4148:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b414a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b414c:	f000 ff48 	bl	b4fe0 <_ZNK8particle7BleUuid4typeEv>
   b4150:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4152:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4154:	b9b4      	cbnz	r4, b4184 <setup+0x94>
            uint16_t uuid16 = tempUUID.shorted();
   b4156:	f000 ff5f 	bl	b5018 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b415a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b415c:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4160:	2302      	movs	r3, #2
   b4162:	f10d 020a 	add.w	r2, sp, #10
   b4166:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4168:	a803      	add	r0, sp, #12
   b416a:	f001 fb2f 	bl	b57cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b416e:	f001 f923 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4172:	2200      	movs	r2, #0
   b4174:	a903      	add	r1, sp, #12
   b4176:	f001 f9ba 	bl	b54ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b417a:	9803      	ldr	r0, [sp, #12]
   b417c:	f000 fa90 	bl	b46a0 <free>
}
   b4180:	b010      	add	sp, #64	; 0x40
   b4182:	bd70      	pop	{r4, r5, r6, pc}
   b4184:	f000 ff4a 	bl	b501c <_ZNK8particle7BleUuid8rawBytesEv>
   b4188:	2300      	movs	r3, #0
   b418a:	9300      	str	r3, [sp, #0]
   b418c:	4602      	mov	r2, r0
   b418e:	2310      	movs	r3, #16
   b4190:	2107      	movs	r1, #7
   b4192:	e7e9      	b.n	b4168 <setup+0x78>
   b4194:	2003e6c8 	.word	0x2003e6c8
   b4198:	2003e684 	.word	0x2003e684
   b419c:	2003e6c0 	.word	0x2003e6c0

000b41a0 <loop>:

void loop() {
   b41a0:	b570      	push	{r4, r5, r6, lr}
   b41a2:	b086      	sub	sp, #24
    if (BLE.connected()) {
   b41a4:	f001 f908 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41a8:	f001 f960 	bl	b546c <_ZNK8particle14BleLocalDevice9connectedEv>
   b41ac:	b300      	cbz	r0, b41f0 <loop+0x50>
   b41ae:	ad01      	add	r5, sp, #4
    	uint8_t txBuf[UART_TX_BUF_SIZE];
    	size_t txLen = 0;
   b41b0:	2400      	movs	r4, #0
   b41b2:	462e      	mov	r6, r5

    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b41b4:	f000 fc10 	bl	b49d8 <_Z16_fetch_usbserialv>
   b41b8:	6803      	ldr	r3, [r0, #0]
   b41ba:	691b      	ldr	r3, [r3, #16]
   b41bc:	4798      	blx	r3
   b41be:	b180      	cbz	r0, b41e2 <loop+0x42>
   b41c0:	2c14      	cmp	r4, #20
   b41c2:	d00f      	beq.n	b41e4 <loop+0x44>
            txBuf[txLen++] = Serial.read();
   b41c4:	f000 fc08 	bl	b49d8 <_Z16_fetch_usbserialv>
   b41c8:	6803      	ldr	r3, [r0, #0]
   b41ca:	695b      	ldr	r3, [r3, #20]
   b41cc:	4798      	blx	r3
   b41ce:	7028      	strb	r0, [r5, #0]
            Serial.write(txBuf[txLen - 1]);
   b41d0:	f000 fc02 	bl	b49d8 <_Z16_fetch_usbserialv>
   b41d4:	6803      	ldr	r3, [r0, #0]
   b41d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b41da:	689b      	ldr	r3, [r3, #8]
            txBuf[txLen++] = Serial.read();
   b41dc:	3401      	adds	r4, #1
            Serial.write(txBuf[txLen - 1]);
   b41de:	4798      	blx	r3
    	while(Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b41e0:	e7e8      	b.n	b41b4 <loop+0x14>
        }
        if (txLen > 0) {
   b41e2:	b12c      	cbz	r4, b41f0 <loop+0x50>
            txCharacteristic.setValue(txBuf, txLen);
   b41e4:	4803      	ldr	r0, [pc, #12]	; (b41f4 <loop+0x54>)
   b41e6:	2300      	movs	r3, #0
   b41e8:	4622      	mov	r2, r4
   b41ea:	4631      	mov	r1, r6
   b41ec:	f000 ffd4 	bl	b5198 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        }
    }
}
   b41f0:	b006      	add	sp, #24
   b41f2:	bd70      	pop	{r4, r5, r6, pc}
   b41f4:	2003e6c8 	.word	0x2003e6c8

000b41f8 <_GLOBAL__sub_I_txCharacteristic>:
   b41f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b41fc:	4c36      	ldr	r4, [pc, #216]	; (b42d8 <_GLOBAL__sub_I_txCharacteristic+0xe0>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b41fe:	4d37      	ldr	r5, [pc, #220]	; (b42dc <_GLOBAL__sub_I_txCharacteristic+0xe4>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4200:	4937      	ldr	r1, [pc, #220]	; (b42e0 <_GLOBAL__sub_I_txCharacteristic+0xe8>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4202:	4e38      	ldr	r6, [pc, #224]	; (b42e4 <_GLOBAL__sub_I_txCharacteristic+0xec>)
}
   b4204:	b098      	sub	sp, #96	; 0x60
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4206:	4620      	mov	r0, r4
   b4208:	f000 ff88 	bl	b511c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b420c:	4936      	ldr	r1, [pc, #216]	; (b42e8 <_GLOBAL__sub_I_txCharacteristic+0xf0>)
   b420e:	4628      	mov	r0, r5
   b4210:	f000 ff84 	bl	b511c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4214:	4935      	ldr	r1, [pc, #212]	; (b42ec <_GLOBAL__sub_I_txCharacteristic+0xf4>)
   b4216:	4630      	mov	r0, r6
   b4218:	f000 ff80 	bl	b511c <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b421c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b421e:	af04      	add	r7, sp, #16
   b4220:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4222:	f8d6 c000 	ldr.w	ip, [r6]
   b4226:	f8c7 c000 	str.w	ip, [r7]
   b422a:	4627      	mov	r7, r4
   b422c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b422e:	ae09      	add	r6, sp, #36	; 0x24
   b4230:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4232:	f10d 0a10 	add.w	sl, sp, #16
   b4236:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
   b423a:	f8d7 9000 	ldr.w	r9, [r7]
   b423e:	f8c6 9000 	str.w	r9, [r6]
   b4242:	ae0e      	add	r6, sp, #56	; 0x38
   b4244:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4246:	f8df e0b8 	ldr.w	lr, [pc, #184]	; b4300 <_GLOBAL__sub_I_txCharacteristic+0x108>
   b424a:	f8c6 c000 	str.w	ip, [r6]
   b424e:	f04f 0800 	mov.w	r8, #0
        BleUuid sUuid(svcUuid);
   b4252:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4256:	e9ce 8800 	strd	r8, r8, [lr]
   b425a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b425e:	ae13      	add	r6, sp, #76	; 0x4c
   b4260:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4262:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4266:	ae13      	add	r6, sp, #76	; 0x4c
   b4268:	ab0e      	add	r3, sp, #56	; 0x38
   b426a:	4670      	mov	r0, lr
   b426c:	e9cd 8801 	strd	r8, r8, [sp, #4]
   b4270:	491f      	ldr	r1, [pc, #124]	; (b42f0 <_GLOBAL__sub_I_txCharacteristic+0xf8>)
   b4272:	9600      	str	r6, [sp, #0]
   b4274:	f04f 0210 	mov.w	r2, #16
   b4278:	f001 fc86 	bl	b5b88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b427c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b427e:	f10d 0c10 	add.w	ip, sp, #16
   b4282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4288:	f8d5 e000 	ldr.w	lr, [r5]
   b428c:	f8cc e000 	str.w	lr, [ip]
   b4290:	ad09      	add	r5, sp, #36	; 0x24
   b4292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4294:	f8d7 c000 	ldr.w	ip, [r7]
   b4298:	f8c5 c000 	str.w	ip, [r5]
        BleUuid cUuid(charUuid);
   b429c:	ad04      	add	r5, sp, #16
   b429e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42a0:	ac0e      	add	r4, sp, #56	; 0x38
   b42a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b42a4:	4f13      	ldr	r7, [pc, #76]	; (b42f4 <_GLOBAL__sub_I_txCharacteristic+0xfc>)
   b42a6:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b42aa:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b42ac:	e9c7 8800 	strd	r8, r8, [r7]
   b42b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b42b2:	4634      	mov	r4, r6
   b42b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b42b6:	4b10      	ldr	r3, [pc, #64]	; (b42f8 <_GLOBAL__sub_I_txCharacteristic+0x100>)
        BleUuid sUuid(svcUuid);
   b42b8:	f8c4 c000 	str.w	ip, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b42bc:	490f      	ldr	r1, [pc, #60]	; (b42fc <_GLOBAL__sub_I_txCharacteristic+0x104>)
   b42be:	f8cd 8008 	str.w	r8, [sp, #8]
   b42c2:	e9cd 6300 	strd	r6, r3, [sp]
   b42c6:	f04f 0204 	mov.w	r2, #4
   b42ca:	ab0e      	add	r3, sp, #56	; 0x38
   b42cc:	4638      	mov	r0, r7
   b42ce:	f001 fc5b 	bl	b5b88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
}
   b42d2:	b018      	add	sp, #96	; 0x60
   b42d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b42d8:	2003e684 	.word	0x2003e684
   b42dc:	2003e698 	.word	0x2003e698
   b42e0:	000b66c8 	.word	0x000b66c8
   b42e4:	2003e6ac 	.word	0x2003e6ac
   b42e8:	000b66ed 	.word	0x000b66ed
   b42ec:	000b6712 	.word	0x000b6712
   b42f0:	000b6737 	.word	0x000b6737
   b42f4:	2003e6c0 	.word	0x2003e6c0
   b42f8:	000b40d3 	.word	0x000b40d3
   b42fc:	000b673a 	.word	0x000b673a
   b4300:	2003e6c8 	.word	0x2003e6c8

000b4304 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <HAL_USB_USART_Init+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	681b      	ldr	r3, [r3, #0]
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003024c 	.word	0x0003024c

000b4314 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <HAL_USB_USART_Begin+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	685b      	ldr	r3, [r3, #4]
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003024c 	.word	0x0003024c

000b4324 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <HAL_USB_USART_Available_Data+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	691b      	ldr	r3, [r3, #16]
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003024c 	.word	0x0003024c

000b4334 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	695b      	ldr	r3, [r3, #20]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003024c 	.word	0x0003024c

000b4344 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_USB_USART_Receive_Data+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	699b      	ldr	r3, [r3, #24]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003024c 	.word	0x0003024c

000b4354 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <HAL_USB_USART_Send_Data+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	69db      	ldr	r3, [r3, #28]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	0003024c 	.word	0x0003024c

000b4364 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_USB_USART_Flush_Data+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	6a1b      	ldr	r3, [r3, #32]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	0003024c 	.word	0x0003024c

000b4374 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <hal_usart_write+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	68db      	ldr	r3, [r3, #12]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	0003023c 	.word	0x0003023c

000b4384 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <hal_usart_available+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	691b      	ldr	r3, [r3, #16]
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	0003023c 	.word	0x0003023c

000b4394 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <hal_usart_read+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	695b      	ldr	r3, [r3, #20]
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	0003023c 	.word	0x0003023c

000b43a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <hal_usart_peek+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	699b      	ldr	r3, [r3, #24]
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	0003023c 	.word	0x0003023c

000b43b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <hal_usart_flush+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	69db      	ldr	r3, [r3, #28]
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	0003023c 	.word	0x0003023c

000b43c4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b02      	ldr	r3, [pc, #8]	; (b43d0 <hal_usart_available_data_for_write+0xc>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	bd08      	pop	{r3, pc}
   b43d0:	0003023c 	.word	0x0003023c

000b43d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <hal_usart_init_ex+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	0003023c 	.word	0x0003023c

000b43e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <inet_inet_ntop+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	695b      	ldr	r3, [r3, #20]
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	00030264 	.word	0x00030264

000b43f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <os_mutex_recursive_create+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	00030248 	.word	0x00030248

000b4404 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <os_mutex_recursive_lock+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030248 	.word	0x00030248

000b4414 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b02      	ldr	r3, [pc, #8]	; (b4420 <os_mutex_recursive_unlock+0xc>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b441c:	9301      	str	r3, [sp, #4]
   b441e:	bd08      	pop	{r3, pc}
   b4420:	00030248 	.word	0x00030248

000b4424 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4424:	b508      	push	{r3, lr}
   b4426:	4b02      	ldr	r3, [pc, #8]	; (b4430 <hal_ble_stack_init+0xc>)
   b4428:	681b      	ldr	r3, [r3, #0]
   b442a:	689b      	ldr	r3, [r3, #8]
   b442c:	9301      	str	r3, [sp, #4]
   b442e:	bd08      	pop	{r3, pc}
   b4430:	00030278 	.word	0x00030278

000b4434 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <hal_ble_gap_set_advertising_data+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030278 	.word	0x00030278

000b4444 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <hal_ble_gap_set_scan_response_data+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030278 	.word	0x00030278

000b4454 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <hal_ble_gap_start_advertising+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	00030278 	.word	0x00030278

000b4464 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b03      	ldr	r3, [pc, #12]	; (b4474 <hal_ble_gap_disconnect+0x10>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b446e:	9301      	str	r3, [sp, #4]
   b4470:	bd08      	pop	{r3, pc}
   b4472:	0000      	.short	0x0000
   b4474:	00030278 	.word	0x00030278

000b4478 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4478:	b508      	push	{r3, lr}
   b447a:	4b03      	ldr	r3, [pc, #12]	; (b4488 <hal_ble_gatt_server_add_service+0x10>)
   b447c:	681b      	ldr	r3, [r3, #0]
   b447e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4482:	9301      	str	r3, [sp, #4]
   b4484:	bd08      	pop	{r3, pc}
   b4486:	0000      	.short	0x0000
   b4488:	00030278 	.word	0x00030278

000b448c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b03      	ldr	r3, [pc, #12]	; (b449c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4496:	9301      	str	r3, [sp, #4]
   b4498:	bd08      	pop	{r3, pc}
   b449a:	0000      	.short	0x0000
   b449c:	00030278 	.word	0x00030278

000b44a0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b03      	ldr	r3, [pc, #12]	; (b44b0 <hal_ble_gatt_client_write_with_response+0x10>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b44aa:	9301      	str	r3, [sp, #4]
   b44ac:	bd08      	pop	{r3, pc}
   b44ae:	0000      	.short	0x0000
   b44b0:	00030278 	.word	0x00030278

000b44b4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b03      	ldr	r3, [pc, #12]	; (b44c4 <hal_ble_gatt_client_write_without_response+0x10>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b44be:	9301      	str	r3, [sp, #4]
   b44c0:	bd08      	pop	{r3, pc}
   b44c2:	0000      	.short	0x0000
   b44c4:	00030278 	.word	0x00030278

000b44c8 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b44c8:	b508      	push	{r3, lr}
   b44ca:	4b03      	ldr	r3, [pc, #12]	; (b44d8 <hal_ble_gatt_server_add_characteristic+0x10>)
   b44cc:	681b      	ldr	r3, [r3, #0]
   b44ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b44d2:	9301      	str	r3, [sp, #4]
   b44d4:	bd08      	pop	{r3, pc}
   b44d6:	0000      	.short	0x0000
   b44d8:	00030278 	.word	0x00030278

000b44dc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b03      	ldr	r3, [pc, #12]	; (b44ec <hal_ble_set_callback_on_periph_link_events+0x10>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b44e6:	9301      	str	r3, [sp, #4]
   b44e8:	bd08      	pop	{r3, pc}
   b44ea:	0000      	.short	0x0000
   b44ec:	00030278 	.word	0x00030278

000b44f0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b03      	ldr	r3, [pc, #12]	; (b4500 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b44fa:	9301      	str	r3, [sp, #4]
   b44fc:	bd08      	pop	{r3, pc}
   b44fe:	0000      	.short	0x0000
   b4500:	00030278 	.word	0x00030278

000b4504 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b03      	ldr	r3, [pc, #12]	; (b4514 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b450e:	9301      	str	r3, [sp, #4]
   b4510:	bd08      	pop	{r3, pc}
   b4512:	0000      	.short	0x0000
   b4514:	00030278 	.word	0x00030278

000b4518 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4518:	b508      	push	{r3, lr}
   b451a:	4b02      	ldr	r3, [pc, #8]	; (b4524 <HAL_RNG_GetRandomNumber+0xc>)
   b451c:	681b      	ldr	r3, [r3, #0]
   b451e:	685b      	ldr	r3, [r3, #4]
   b4520:	9301      	str	r3, [sp, #4]
   b4522:	bd08      	pop	{r3, pc}
   b4524:	00030218 	.word	0x00030218

000b4528 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4528:	b508      	push	{r3, lr}
   b452a:	4b02      	ldr	r3, [pc, #8]	; (b4534 <HAL_Delay_Microseconds+0xc>)
   b452c:	681b      	ldr	r3, [r3, #0]
   b452e:	68db      	ldr	r3, [r3, #12]
   b4530:	9301      	str	r3, [sp, #4]
   b4532:	bd08      	pop	{r3, pc}
   b4534:	00030218 	.word	0x00030218

000b4538 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4538:	b508      	push	{r3, lr}
   b453a:	4b02      	ldr	r3, [pc, #8]	; (b4544 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b453c:	681b      	ldr	r3, [r3, #0]
   b453e:	695b      	ldr	r3, [r3, #20]
   b4540:	9301      	str	r3, [sp, #4]
   b4542:	bd08      	pop	{r3, pc}
   b4544:	00030218 	.word	0x00030218

000b4548 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b02      	ldr	r3, [pc, #8]	; (b4554 <netdb_freeaddrinfo+0xc>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	689b      	ldr	r3, [r3, #8]
   b4550:	9301      	str	r3, [sp, #4]
   b4552:	bd08      	pop	{r3, pc}
   b4554:	00030268 	.word	0x00030268

000b4558 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4558:	b508      	push	{r3, lr}
   b455a:	4b02      	ldr	r3, [pc, #8]	; (b4564 <netdb_getaddrinfo+0xc>)
   b455c:	681b      	ldr	r3, [r3, #0]
   b455e:	68db      	ldr	r3, [r3, #12]
   b4560:	9301      	str	r3, [sp, #4]
   b4562:	bd08      	pop	{r3, pc}
   b4564:	00030268 	.word	0x00030268

000b4568 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4568:	b508      	push	{r3, lr}
   b456a:	4b02      	ldr	r3, [pc, #8]	; (b4574 <panic_+0xc>)
   b456c:	681b      	ldr	r3, [r3, #0]
   b456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4570:	9301      	str	r3, [sp, #4]
   b4572:	bd08      	pop	{r3, pc}
   b4574:	00030260 	.word	0x00030260

000b4578 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <log_message+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030260 	.word	0x00030260

000b4588 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <spark_set_random_seed_from_cloud_handler+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030244 	.word	0x00030244

000b4598 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <network_connect+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	685b      	ldr	r3, [r3, #4]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	00030240 	.word	0x00030240

000b45a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <network_connecting+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	689b      	ldr	r3, [r3, #8]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	00030240 	.word	0x00030240

000b45b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <network_disconnect+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	68db      	ldr	r3, [r3, #12]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	00030240 	.word	0x00030240

000b45c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <network_ready+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	691b      	ldr	r3, [r3, #16]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030240 	.word	0x00030240

000b45d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <network_on+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	695b      	ldr	r3, [r3, #20]
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030240 	.word	0x00030240

000b45e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <network_off+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	699b      	ldr	r3, [r3, #24]
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030240 	.word	0x00030240

000b45f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <network_listen+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	69db      	ldr	r3, [r3, #28]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030240 	.word	0x00030240

000b4608 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <network_listening+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	6a1b      	ldr	r3, [r3, #32]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	00030240 	.word	0x00030240

000b4618 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <network_set_listen_timeout+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	00030240 	.word	0x00030240

000b4628 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <network_get_listen_timeout+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	00030240 	.word	0x00030240

000b4638 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <network_is_on+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	00030240 	.word	0x00030240

000b4648 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <network_is_off+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	00030240 	.word	0x00030240

000b4658 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <set_system_mode+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	685b      	ldr	r3, [r3, #4]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030220 	.word	0x00030220

000b4668 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b03      	ldr	r3, [pc, #12]	; (b4678 <system_ctrl_set_app_request_handler+0x10>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4672:	9301      	str	r3, [sp, #4]
   b4674:	bd08      	pop	{r3, pc}
   b4676:	0000      	.short	0x0000
   b4678:	00030220 	.word	0x00030220

000b467c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b03      	ldr	r3, [pc, #12]	; (b468c <system_ctrl_set_result+0x10>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4686:	9301      	str	r3, [sp, #4]
   b4688:	bd08      	pop	{r3, pc}
   b468a:	0000      	.short	0x0000
   b468c:	00030220 	.word	0x00030220

000b4690 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <malloc+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	681b      	ldr	r3, [r3, #0]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003021c 	.word	0x0003021c

000b46a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <free+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	685b      	ldr	r3, [r3, #4]
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003021c 	.word	0x0003021c

000b46b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <realloc+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	689b      	ldr	r3, [r3, #8]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	0003021c 	.word	0x0003021c

000b46c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <abort+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	0003021c 	.word	0x0003021c

000b46d0 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <__assert_func+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003021c 	.word	0x0003021c

000b46e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <newlib_impure_ptr_callback+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	0003021c 	.word	0x0003021c

000b46f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b46f0:	2300      	movs	r3, #0
   b46f2:	6840      	ldr	r0, [r0, #4]
   b46f4:	461a      	mov	r2, r3
   b46f6:	f7ff bf4f 	b.w	b4598 <network_connect>

000b46fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b46fa:	6840      	ldr	r0, [r0, #4]
   b46fc:	2200      	movs	r2, #0
   b46fe:	2102      	movs	r1, #2
   b4700:	f7ff bf5a 	b.w	b45b8 <network_disconnect>

000b4704 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4704:	2200      	movs	r2, #0
   b4706:	6840      	ldr	r0, [r0, #4]
   b4708:	4611      	mov	r1, r2
   b470a:	f7ff bf4d 	b.w	b45a8 <network_connecting>

000b470e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b470e:	2200      	movs	r2, #0
   b4710:	6840      	ldr	r0, [r0, #4]
   b4712:	4611      	mov	r1, r2
   b4714:	f7ff bf58 	b.w	b45c8 <network_ready>

000b4718 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4718:	2300      	movs	r3, #0
   b471a:	6840      	ldr	r0, [r0, #4]
   b471c:	461a      	mov	r2, r3
   b471e:	4619      	mov	r1, r3
   b4720:	f7ff bf5a 	b.w	b45d8 <network_on>

000b4724 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4724:	2300      	movs	r3, #0
   b4726:	6840      	ldr	r0, [r0, #4]
   b4728:	461a      	mov	r2, r3
   b472a:	4619      	mov	r1, r3
   b472c:	f7ff bf5c 	b.w	b45e8 <network_off>

000b4730 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4730:	6840      	ldr	r0, [r0, #4]
   b4732:	2100      	movs	r1, #0
   b4734:	f7ff bf80 	b.w	b4638 <network_is_on>

000b4738 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4738:	6840      	ldr	r0, [r0, #4]
   b473a:	2100      	movs	r1, #0
   b473c:	f7ff bf84 	b.w	b4648 <network_is_off>

000b4740 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4740:	6840      	ldr	r0, [r0, #4]
   b4742:	2200      	movs	r2, #0
   b4744:	f081 0101 	eor.w	r1, r1, #1
   b4748:	f7ff bf56 	b.w	b45f8 <network_listen>

000b474c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b474c:	6840      	ldr	r0, [r0, #4]
   b474e:	2200      	movs	r2, #0
   b4750:	f7ff bf62 	b.w	b4618 <network_set_listen_timeout>

000b4754 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4754:	2200      	movs	r2, #0
   b4756:	6840      	ldr	r0, [r0, #4]
   b4758:	4611      	mov	r1, r2
   b475a:	f7ff bf65 	b.w	b4628 <network_get_listen_timeout>

000b475e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b475e:	2200      	movs	r2, #0
   b4760:	6840      	ldr	r0, [r0, #4]
   b4762:	4611      	mov	r1, r2
   b4764:	f7ff bf50 	b.w	b4608 <network_listening>

000b4768 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b476c:	b095      	sub	sp, #84	; 0x54
   b476e:	4614      	mov	r4, r2
   b4770:	460d      	mov	r5, r1
   b4772:	4607      	mov	r7, r0
    IPAddress addr;
   b4774:	f000 f990 	bl	b4a98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4778:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b477a:	221c      	movs	r2, #28
   b477c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b477e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4780:	f001 fee4 	bl	b654c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4784:	2340      	movs	r3, #64	; 0x40
   b4786:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4788:	4620      	mov	r0, r4
   b478a:	466b      	mov	r3, sp
   b478c:	aa0c      	add	r2, sp, #48	; 0x30
   b478e:	2100      	movs	r1, #0
   b4790:	f7ff fee2 	bl	b4558 <netdb_getaddrinfo>
    if (!r) {
   b4794:	4604      	mov	r4, r0
   b4796:	2800      	cmp	r0, #0
   b4798:	d14b      	bne.n	b4832 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b479a:	4602      	mov	r2, r0
   b479c:	2101      	movs	r1, #1
   b479e:	6868      	ldr	r0, [r5, #4]
   b47a0:	f7ff ff12 	bl	b45c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47a4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b47a6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47a8:	4622      	mov	r2, r4
   b47aa:	6868      	ldr	r0, [r5, #4]
   b47ac:	f7ff ff0c 	bl	b45c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b47b0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b47b2:	4681      	mov	r9, r0
        bool ok = false;
   b47b4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b47b6:	2e00      	cmp	r6, #0
   b47b8:	d03b      	beq.n	b4832 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b47ba:	2900      	cmp	r1, #0
   b47bc:	d139      	bne.n	b4832 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b47be:	6873      	ldr	r3, [r6, #4]
   b47c0:	2b02      	cmp	r3, #2
   b47c2:	d003      	beq.n	b47cc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b47c4:	2b0a      	cmp	r3, #10
   b47c6:	d011      	beq.n	b47ec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b47c8:	69f6      	ldr	r6, [r6, #28]
   b47ca:	e7f4      	b.n	b47b6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b47cc:	f1b8 0f00 	cmp.w	r8, #0
   b47d0:	d0fa      	beq.n	b47c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b47d2:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b47d4:	a806      	add	r0, sp, #24
   b47d6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b47d8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b47da:	f000 f98b 	bl	b4af4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b47de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b47e0:	1d3c      	adds	r4, r7, #4
   b47e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b47e4:	682b      	ldr	r3, [r5, #0]
   b47e6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b47e8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b47ea:	e7ed      	b.n	b47c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b47ec:	f1b9 0f00 	cmp.w	r9, #0
   b47f0:	d0ea      	beq.n	b47c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b47f2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b47f4:	2210      	movs	r2, #16
   b47f6:	a801      	add	r0, sp, #4
   b47f8:	f001 fea8 	bl	b654c <memset>
                    a.v = 6;
   b47fc:	2306      	movs	r3, #6
   b47fe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4802:	ad01      	add	r5, sp, #4
   b4804:	f104 0308 	add.w	r3, r4, #8
   b4808:	3418      	adds	r4, #24
   b480a:	6818      	ldr	r0, [r3, #0]
   b480c:	6859      	ldr	r1, [r3, #4]
   b480e:	462a      	mov	r2, r5
   b4810:	c203      	stmia	r2!, {r0, r1}
   b4812:	3308      	adds	r3, #8
   b4814:	42a3      	cmp	r3, r4
   b4816:	4615      	mov	r5, r2
   b4818:	d1f7      	bne.n	b480a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b481a:	a901      	add	r1, sp, #4
   b481c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b481e:	ad07      	add	r5, sp, #28
   b4820:	f000 f948 	bl	b4ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4826:	1d3c      	adds	r4, r7, #4
   b4828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b482a:	682b      	ldr	r3, [r5, #0]
   b482c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b482e:	4649      	mov	r1, r9
   b4830:	e7ca      	b.n	b47c8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4832:	9800      	ldr	r0, [sp, #0]
   b4834:	f7ff fe88 	bl	b4548 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4838:	4638      	mov	r0, r7
   b483a:	b015      	add	sp, #84	; 0x54
   b483c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4840 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4840:	4b02      	ldr	r3, [pc, #8]	; (b484c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4842:	4a03      	ldr	r2, [pc, #12]	; (b4850 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4844:	601a      	str	r2, [r3, #0]
   b4846:	2200      	movs	r2, #0
   b4848:	605a      	str	r2, [r3, #4]

} // spark
   b484a:	4770      	bx	lr
   b484c:	2003e6d0 	.word	0x2003e6d0
   b4850:	000b6748 	.word	0x000b6748

000b4854 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4854:	2200      	movs	r2, #0
   b4856:	6840      	ldr	r0, [r0, #4]
   b4858:	4611      	mov	r1, r2
   b485a:	f7ff beb5 	b.w	b45c8 <network_ready>

000b485e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b485e:	2200      	movs	r2, #0
   b4860:	6840      	ldr	r0, [r0, #4]
   b4862:	4611      	mov	r1, r2
   b4864:	f7ff bed0 	b.w	b4608 <network_listening>

000b4868 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4868:	2200      	movs	r2, #0
   b486a:	6840      	ldr	r0, [r0, #4]
   b486c:	4611      	mov	r1, r2
   b486e:	f7ff bedb 	b.w	b4628 <network_get_listen_timeout>

000b4872 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4872:	6840      	ldr	r0, [r0, #4]
   b4874:	2200      	movs	r2, #0
   b4876:	f7ff becf 	b.w	b4618 <network_set_listen_timeout>

000b487a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b487a:	6840      	ldr	r0, [r0, #4]
   b487c:	2200      	movs	r2, #0
   b487e:	f081 0101 	eor.w	r1, r1, #1
   b4882:	f7ff beb9 	b.w	b45f8 <network_listen>

000b4886 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4886:	2300      	movs	r3, #0
   b4888:	6840      	ldr	r0, [r0, #4]
   b488a:	461a      	mov	r2, r3
   b488c:	4619      	mov	r1, r3
   b488e:	f7ff beab 	b.w	b45e8 <network_off>

000b4892 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4892:	2300      	movs	r3, #0
   b4894:	6840      	ldr	r0, [r0, #4]
   b4896:	461a      	mov	r2, r3
   b4898:	4619      	mov	r1, r3
   b489a:	f7ff be9d 	b.w	b45d8 <network_on>

000b489e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b489e:	2200      	movs	r2, #0
   b48a0:	6840      	ldr	r0, [r0, #4]
   b48a2:	4611      	mov	r1, r2
   b48a4:	f7ff be80 	b.w	b45a8 <network_connecting>

000b48a8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b48a8:	6840      	ldr	r0, [r0, #4]
   b48aa:	2200      	movs	r2, #0
   b48ac:	2102      	movs	r1, #2
   b48ae:	f7ff be83 	b.w	b45b8 <network_disconnect>

000b48b2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b48b2:	2300      	movs	r3, #0
   b48b4:	6840      	ldr	r0, [r0, #4]
   b48b6:	461a      	mov	r2, r3
   b48b8:	f7ff be6e 	b.w	b4598 <network_connect>

000b48bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b48bc:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b48be:	2204      	movs	r2, #4
   b48c0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b48c2:	4a02      	ldr	r2, [pc, #8]	; (b48cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b48c4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b48c6:	4770      	bx	lr
   b48c8:	2003e6d8 	.word	0x2003e6d8
   b48cc:	000b6784 	.word	0x000b6784

000b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b48d0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b48d2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b48d4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b48d6:	b17c      	cbz	r4, b48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b48d8:	6863      	ldr	r3, [r4, #4]
   b48da:	3b01      	subs	r3, #1
   b48dc:	6063      	str	r3, [r4, #4]
   b48de:	b95b      	cbnz	r3, b48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b48e0:	6823      	ldr	r3, [r4, #0]
   b48e2:	4620      	mov	r0, r4
   b48e4:	689b      	ldr	r3, [r3, #8]
   b48e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b48e8:	68a3      	ldr	r3, [r4, #8]
   b48ea:	3b01      	subs	r3, #1
   b48ec:	60a3      	str	r3, [r4, #8]
   b48ee:	b91b      	cbnz	r3, b48f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b48f0:	6823      	ldr	r3, [r4, #0]
   b48f2:	4620      	mov	r0, r4
   b48f4:	68db      	ldr	r3, [r3, #12]
   b48f6:	4798      	blx	r3
      }
   b48f8:	4628      	mov	r0, r5
   b48fa:	bd38      	pop	{r3, r4, r5, pc}

000b48fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b48fc:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b48fe:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4900:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4902:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4904:	dd03      	ble.n	b490e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b4906:	f7ff fed3 	bl	b46b0 <realloc>
            if (!d) {
   b490a:	b918      	cbnz	r0, b4914 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b490c:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b490e:	f7ff fec7 	bl	b46a0 <free>
        T* d = nullptr;
   b4912:	2000      	movs	r0, #0
        data_ = d;
   b4914:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4916:	60a5      	str	r5, [r4, #8]
        return true;
   b4918:	2001      	movs	r0, #1
   b491a:	e7f7      	b.n	b490c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b491c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b491c:	7441      	strb	r1, [r0, #17]
}
   b491e:	4770      	bx	lr

000b4920 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4920:	4770      	bx	lr

000b4922 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4922:	4770      	bx	lr

000b4924 <_ZN9USBSerial4readEv>:
{
   b4924:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4926:	2100      	movs	r1, #0
   b4928:	7c00      	ldrb	r0, [r0, #16]
   b492a:	f7ff fd0b 	bl	b4344 <HAL_USB_USART_Receive_Data>
}
   b492e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4932:	bd08      	pop	{r3, pc}

000b4934 <_ZN9USBSerial4peekEv>:
{
   b4934:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4936:	2101      	movs	r1, #1
   b4938:	7c00      	ldrb	r0, [r0, #16]
   b493a:	f7ff fd03 	bl	b4344 <HAL_USB_USART_Receive_Data>
}
   b493e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4942:	bd08      	pop	{r3, pc}

000b4944 <_ZN9USBSerial17availableForWriteEv>:
{
   b4944:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4946:	7c00      	ldrb	r0, [r0, #16]
   b4948:	f7ff fcf4 	bl	b4334 <HAL_USB_USART_Available_Data_For_Write>
}
   b494c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4950:	bd08      	pop	{r3, pc}

000b4952 <_ZN9USBSerial9availableEv>:
{
   b4952:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4954:	7c00      	ldrb	r0, [r0, #16]
   b4956:	f7ff fce5 	bl	b4324 <HAL_USB_USART_Available_Data>
}
   b495a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b495e:	bd08      	pop	{r3, pc}

000b4960 <_ZN9USBSerial5writeEh>:
{
   b4960:	b513      	push	{r0, r1, r4, lr}
   b4962:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4964:	7c00      	ldrb	r0, [r0, #16]
{
   b4966:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4968:	f7ff fce4 	bl	b4334 <HAL_USB_USART_Available_Data_For_Write>
   b496c:	2800      	cmp	r0, #0
   b496e:	9901      	ldr	r1, [sp, #4]
   b4970:	dc01      	bgt.n	b4976 <_ZN9USBSerial5writeEh+0x16>
   b4972:	7c60      	ldrb	r0, [r4, #17]
   b4974:	b120      	cbz	r0, b4980 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4976:	7c20      	ldrb	r0, [r4, #16]
   b4978:	f7ff fcec 	bl	b4354 <HAL_USB_USART_Send_Data>
   b497c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4980:	b002      	add	sp, #8
   b4982:	bd10      	pop	{r4, pc}

000b4984 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4984:	7c00      	ldrb	r0, [r0, #16]
   b4986:	f7ff bced 	b.w	b4364 <HAL_USB_USART_Flush_Data>

000b498a <_ZN9USBSerialD0Ev>:
   b498a:	b510      	push	{r4, lr}
   b498c:	2114      	movs	r1, #20
   b498e:	4604      	mov	r4, r0
   b4990:	f7ff fb95 	bl	b40be <_ZdlPvj>
   b4994:	4620      	mov	r0, r4
   b4996:	bd10      	pop	{r4, pc}

000b4998 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4998:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b499a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b499e:	4604      	mov	r4, r0
   b49a0:	4608      	mov	r0, r1
   b49a2:	2100      	movs	r1, #0
   b49a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b49a8:	4b04      	ldr	r3, [pc, #16]	; (b49bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b49aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b49ac:	2301      	movs	r3, #1
  _serial = serial;
   b49ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b49b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b49b2:	4611      	mov	r1, r2
   b49b4:	f7ff fca6 	bl	b4304 <HAL_USB_USART_Init>
}
   b49b8:	4620      	mov	r0, r4
   b49ba:	bd10      	pop	{r4, pc}
   b49bc:	000b67c8 	.word	0x000b67c8

000b49c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b49c0:	7c00      	ldrb	r0, [r0, #16]
   b49c2:	2200      	movs	r2, #0
   b49c4:	f7ff bca6 	b.w	b4314 <HAL_USB_USART_Begin>

000b49c8 <_Z19acquireSerialBufferv>:
{
   b49c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b49ca:	2214      	movs	r2, #20
{
   b49cc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b49ce:	2100      	movs	r1, #0
   b49d0:	f001 fdbc 	bl	b654c <memset>
}
   b49d4:	4620      	mov	r0, r4
   b49d6:	bd10      	pop	{r4, pc}

000b49d8 <_Z16_fetch_usbserialv>:
{
   b49d8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b49da:	4c0f      	ldr	r4, [pc, #60]	; (b4a18 <_Z16_fetch_usbserialv+0x40>)
{
   b49dc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b49de:	a803      	add	r0, sp, #12
   b49e0:	f7ff fff2 	bl	b49c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b49e4:	7821      	ldrb	r1, [r4, #0]
   b49e6:	f3bf 8f5b 	dmb	ish
   b49ea:	f011 0101 	ands.w	r1, r1, #1
   b49ee:	d10f      	bne.n	b4a10 <_Z16_fetch_usbserialv+0x38>
   b49f0:	4620      	mov	r0, r4
   b49f2:	9101      	str	r1, [sp, #4]
   b49f4:	f7ff fb65 	bl	b40c2 <__cxa_guard_acquire>
   b49f8:	9901      	ldr	r1, [sp, #4]
   b49fa:	b148      	cbz	r0, b4a10 <_Z16_fetch_usbserialv+0x38>
   b49fc:	aa03      	add	r2, sp, #12
   b49fe:	4807      	ldr	r0, [pc, #28]	; (b4a1c <_Z16_fetch_usbserialv+0x44>)
   b4a00:	f7ff ffca 	bl	b4998 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4a04:	4620      	mov	r0, r4
   b4a06:	f7ff fb61 	bl	b40cc <__cxa_guard_release>
   b4a0a:	4805      	ldr	r0, [pc, #20]	; (b4a20 <_Z16_fetch_usbserialv+0x48>)
   b4a0c:	f001 fd60 	bl	b64d0 <atexit>
	return _usbserial;
}
   b4a10:	4802      	ldr	r0, [pc, #8]	; (b4a1c <_Z16_fetch_usbserialv+0x44>)
   b4a12:	b008      	add	sp, #32
   b4a14:	bd10      	pop	{r4, pc}
   b4a16:	bf00      	nop
   b4a18:	2003e6e0 	.word	0x2003e6e0
   b4a1c:	2003e6e4 	.word	0x2003e6e4
   b4a20:	000b4921 	.word	0x000b4921

000b4a24 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4a24:	4770      	bx	lr

000b4a26 <_ZN9IPAddressD0Ev>:
   b4a26:	b510      	push	{r4, lr}
   b4a28:	2118      	movs	r1, #24
   b4a2a:	4604      	mov	r4, r0
   b4a2c:	f7ff fb47 	bl	b40be <_ZdlPvj>
   b4a30:	4620      	mov	r0, r4
   b4a32:	bd10      	pop	{r4, pc}

000b4a34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4a36:	7d03      	ldrb	r3, [r0, #20]
   b4a38:	2b06      	cmp	r3, #6
{
   b4a3a:	b08d      	sub	sp, #52	; 0x34
   b4a3c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a3e:	f100 0704 	add.w	r7, r0, #4
   b4a42:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4a46:	d012      	beq.n	b4a6e <_ZNK9IPAddress7printToER5Print+0x3a>
   b4a48:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4a4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4a50:	220a      	movs	r2, #10
   b4a52:	4630      	mov	r0, r6
   b4a54:	f000 f959 	bl	b4d0a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4a58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4a5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4a5c:	d019      	beq.n	b4a92 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4a5e:	2c00      	cmp	r4, #0
   b4a60:	d0f4      	beq.n	b4a4c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4a62:	212e      	movs	r1, #46	; 0x2e
   b4a64:	4630      	mov	r0, r6
   b4a66:	f000 f94d 	bl	b4d04 <_ZN5Print5printEc>
   b4a6a:	4404      	add	r4, r0
   b4a6c:	e7ee      	b.n	b4a4c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a6e:	232f      	movs	r3, #47	; 0x2f
   b4a70:	466a      	mov	r2, sp
   b4a72:	4639      	mov	r1, r7
   b4a74:	200a      	movs	r0, #10
		buf[0] = 0;
   b4a76:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a7a:	f7ff fcb3 	bl	b43e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4a7e:	4668      	mov	r0, sp
   b4a80:	f7ff fad6 	bl	b4030 <strlen>
   b4a84:	6833      	ldr	r3, [r6, #0]
   b4a86:	4602      	mov	r2, r0
   b4a88:	68db      	ldr	r3, [r3, #12]
   b4a8a:	4669      	mov	r1, sp
   b4a8c:	4630      	mov	r0, r6
   b4a8e:	4798      	blx	r3
   b4a90:	4604      	mov	r4, r0
    }
    return n;
}
   b4a92:	4620      	mov	r0, r4
   b4a94:	b00d      	add	sp, #52	; 0x34
   b4a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4a98:	b510      	push	{r4, lr}
   b4a9a:	4b05      	ldr	r3, [pc, #20]	; (b4ab0 <_ZN9IPAddressC1Ev+0x18>)
   b4a9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4a9e:	2211      	movs	r2, #17
   b4aa0:	f840 3b04 	str.w	r3, [r0], #4
   b4aa4:	2100      	movs	r1, #0
   b4aa6:	f001 fd51 	bl	b654c <memset>
}
   b4aaa:	4620      	mov	r0, r4
   b4aac:	bd10      	pop	{r4, pc}
   b4aae:	bf00      	nop
   b4ab0:	000b67f8 	.word	0x000b67f8

000b4ab4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4ab4:	4603      	mov	r3, r0
   b4ab6:	4a07      	ldr	r2, [pc, #28]	; (b4ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ab8:	b510      	push	{r4, lr}
   b4aba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4abe:	f101 0210 	add.w	r2, r1, #16
   b4ac2:	f851 4b04 	ldr.w	r4, [r1], #4
   b4ac6:	f843 4b04 	str.w	r4, [r3], #4
   b4aca:	4291      	cmp	r1, r2
   b4acc:	d1f9      	bne.n	b4ac2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4ace:	780a      	ldrb	r2, [r1, #0]
   b4ad0:	701a      	strb	r2, [r3, #0]
}
   b4ad2:	bd10      	pop	{r4, pc}
   b4ad4:	000b67f8 	.word	0x000b67f8

000b4ad8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4ad8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4ada:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4ade:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4ae2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4ae6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4aea:	2304      	movs	r3, #4
   b4aec:	6041      	str	r1, [r0, #4]
   b4aee:	7503      	strb	r3, [r0, #20]
}
   b4af0:	bd10      	pop	{r4, pc}
	...

000b4af4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4af4:	b507      	push	{r0, r1, r2, lr}
   b4af6:	4b06      	ldr	r3, [pc, #24]	; (b4b10 <_ZN9IPAddressC1EPKh+0x1c>)
   b4af8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4afa:	78cb      	ldrb	r3, [r1, #3]
   b4afc:	9300      	str	r3, [sp, #0]
   b4afe:	788b      	ldrb	r3, [r1, #2]
   b4b00:	784a      	ldrb	r2, [r1, #1]
   b4b02:	7809      	ldrb	r1, [r1, #0]
   b4b04:	f7ff ffe8 	bl	b4ad8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4b08:	b003      	add	sp, #12
   b4b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b0e:	bf00      	nop
   b4b10:	000b67f8 	.word	0x000b67f8

000b4b14 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4b14:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4b16:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b18:	4604      	mov	r4, r0
      if (_M_manager)
   b4b1a:	b113      	cbz	r3, b4b22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b1c:	2203      	movs	r2, #3
   b4b1e:	4601      	mov	r1, r0
   b4b20:	4798      	blx	r3
    }
   b4b22:	4620      	mov	r0, r4
   b4b24:	bd10      	pop	{r4, pc}

000b4b26 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4b26:	b513      	push	{r0, r1, r4, lr}
   b4b28:	460b      	mov	r3, r1
   b4b2a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b2c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4b30:	466c      	mov	r4, sp
   b4b32:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4b36:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4b3a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4b3e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4b42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4b46:	b002      	add	sp, #8
   b4b48:	bd10      	pop	{r4, pc}
	...

000b4b4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4b4c:	4b01      	ldr	r3, [pc, #4]	; (b4b54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4b4e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4b50:	4770      	bx	lr
   b4b52:	bf00      	nop
   b4b54:	2003e61c 	.word	0x2003e61c

000b4b58 <serialEventRun>:
{
   b4b58:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4b5a:	4b0b      	ldr	r3, [pc, #44]	; (b4b88 <serialEventRun+0x30>)
   b4b5c:	b143      	cbz	r3, b4b70 <serialEventRun+0x18>
   b4b5e:	f7ff ff3b 	bl	b49d8 <_Z16_fetch_usbserialv>
   b4b62:	6803      	ldr	r3, [r0, #0]
   b4b64:	691b      	ldr	r3, [r3, #16]
   b4b66:	4798      	blx	r3
   b4b68:	2800      	cmp	r0, #0
   b4b6a:	dd01      	ble.n	b4b70 <serialEventRun+0x18>
        serialEvent();
   b4b6c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4b70:	4b06      	ldr	r3, [pc, #24]	; (b4b8c <serialEventRun+0x34>)
   b4b72:	b143      	cbz	r3, b4b86 <serialEventRun+0x2e>
   b4b74:	f001 fb70 	bl	b6258 <_Z22__fetch_global_Serial1v>
   b4b78:	6803      	ldr	r3, [r0, #0]
   b4b7a:	691b      	ldr	r3, [r3, #16]
   b4b7c:	4798      	blx	r3
   b4b7e:	2800      	cmp	r0, #0
   b4b80:	dd01      	ble.n	b4b86 <serialEventRun+0x2e>
        serialEvent1();
   b4b82:	f3af 8000 	nop.w
}
   b4b86:	bd08      	pop	{r3, pc}
	...

000b4b90 <_post_loop>:
{
   b4b90:	b508      	push	{r3, lr}
	serialEventRun();
   b4b92:	f7ff ffe1 	bl	b4b58 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4b96:	f7ff fccf 	bl	b4538 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4b9a:	4b01      	ldr	r3, [pc, #4]	; (b4ba0 <_post_loop+0x10>)
   b4b9c:	6018      	str	r0, [r3, #0]
}
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	2003e740 	.word	0x2003e740

000b4ba4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4ba4:	4805      	ldr	r0, [pc, #20]	; (b4bbc <_Z33system_initialize_user_backup_ramv+0x18>)
   b4ba6:	4a06      	ldr	r2, [pc, #24]	; (b4bc0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4ba8:	4906      	ldr	r1, [pc, #24]	; (b4bc4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4baa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4bac:	1a12      	subs	r2, r2, r0
   b4bae:	f001 fca5 	bl	b64fc <memcpy>
    __backup_sram_signature = signature;
   b4bb2:	4b05      	ldr	r3, [pc, #20]	; (b4bc8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4bb4:	4a05      	ldr	r2, [pc, #20]	; (b4bcc <_Z33system_initialize_user_backup_ramv+0x28>)
   b4bb6:	601a      	str	r2, [r3, #0]
}
   b4bb8:	bd08      	pop	{r3, pc}
   b4bba:	bf00      	nop
   b4bbc:	2003f400 	.word	0x2003f400
   b4bc0:	2003f404 	.word	0x2003f404
   b4bc4:	000b6c6c 	.word	0x000b6c6c
   b4bc8:	2003f400 	.word	0x2003f400
   b4bcc:	9a271c1e 	.word	0x9a271c1e

000b4bd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4bd0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4bd2:	2300      	movs	r3, #0
   b4bd4:	9300      	str	r3, [sp, #0]
   b4bd6:	461a      	mov	r2, r3
   b4bd8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4bdc:	f7ff fd4e 	bl	b467c <system_ctrl_set_result>
}
   b4be0:	b003      	add	sp, #12
   b4be2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4be8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4be8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4bea:	8843      	ldrh	r3, [r0, #2]
   b4bec:	2b0a      	cmp	r3, #10
   b4bee:	d008      	beq.n	b4c02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4bf0:	2b50      	cmp	r3, #80	; 0x50
   b4bf2:	d10b      	bne.n	b4c0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4bf4:	4b09      	ldr	r3, [pc, #36]	; (b4c1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4bf6:	681b      	ldr	r3, [r3, #0]
   b4bf8:	b14b      	cbz	r3, b4c0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4bfa:	b003      	add	sp, #12
   b4bfc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4c00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4c02:	f7ff ffe5 	bl	b4bd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4c06:	b003      	add	sp, #12
   b4c08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c0c:	2300      	movs	r3, #0
   b4c0e:	9300      	str	r3, [sp, #0]
   b4c10:	461a      	mov	r2, r3
   b4c12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4c16:	f7ff fd31 	bl	b467c <system_ctrl_set_result>
}
   b4c1a:	e7f4      	b.n	b4c06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4c1c:	2003e6fc 	.word	0x2003e6fc

000b4c20 <module_user_init_hook>:
{
   b4c20:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4c22:	4812      	ldr	r0, [pc, #72]	; (b4c6c <module_user_init_hook+0x4c>)
   b4c24:	2100      	movs	r1, #0
   b4c26:	f7ff fd5b 	bl	b46e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4c2a:	4b11      	ldr	r3, [pc, #68]	; (b4c70 <module_user_init_hook+0x50>)
   b4c2c:	681a      	ldr	r2, [r3, #0]
   b4c2e:	4b11      	ldr	r3, [pc, #68]	; (b4c74 <module_user_init_hook+0x54>)
   b4c30:	429a      	cmp	r2, r3
   b4c32:	4b11      	ldr	r3, [pc, #68]	; (b4c78 <module_user_init_hook+0x58>)
   b4c34:	bf0c      	ite	eq
   b4c36:	2201      	moveq	r2, #1
   b4c38:	2200      	movne	r2, #0
   b4c3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4c3c:	d001      	beq.n	b4c42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4c3e:	f7ff ffb1 	bl	b4ba4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4c42:	f7ff fc69 	bl	b4518 <HAL_RNG_GetRandomNumber>
   b4c46:	4604      	mov	r4, r0
    srand(seed);
   b4c48:	f001 fc88 	bl	b655c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4c4c:	4b0b      	ldr	r3, [pc, #44]	; (b4c7c <module_user_init_hook+0x5c>)
   b4c4e:	b113      	cbz	r3, b4c56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4c50:	4620      	mov	r0, r4
   b4c52:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4c56:	2100      	movs	r1, #0
   b4c58:	4808      	ldr	r0, [pc, #32]	; (b4c7c <module_user_init_hook+0x5c>)
   b4c5a:	f7ff fc95 	bl	b4588 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4c62:	4807      	ldr	r0, [pc, #28]	; (b4c80 <module_user_init_hook+0x60>)
   b4c64:	2100      	movs	r1, #0
   b4c66:	f7ff bcff 	b.w	b4668 <system_ctrl_set_app_request_handler>
   b4c6a:	bf00      	nop
   b4c6c:	000b4b4d 	.word	0x000b4b4d
   b4c70:	2003f400 	.word	0x2003f400
   b4c74:	9a271c1e 	.word	0x9a271c1e
   b4c78:	2003e6f8 	.word	0x2003e6f8
   b4c7c:	00000000 	.word	0x00000000
   b4c80:	000b4be9 	.word	0x000b4be9

000b4c84 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4c84:	4b01      	ldr	r3, [pc, #4]	; (b4c8c <_GLOBAL__sub_I_RGB+0x8>)
   b4c86:	2200      	movs	r2, #0
   b4c88:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4c8a:	4770      	bx	lr
   b4c8c:	2003e700 	.word	0x2003e700

000b4c90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c90:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c92:	681a      	ldr	r2, [r3, #0]
   b4c94:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c98:	4770      	bx	lr
   b4c9a:	bf00      	nop
   b4c9c:	2003e618 	.word	0x2003e618
   b4ca0:	2003e710 	.word	0x2003e710

000b4ca4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ca4:	4b01      	ldr	r3, [pc, #4]	; (b4cac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ca6:	4a02      	ldr	r2, [pc, #8]	; (b4cb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ca8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4caa:	4770      	bx	lr
   b4cac:	2003e714 	.word	0x2003e714
   b4cb0:	000b6820 	.word	0x000b6820

000b4cb4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cb6:	4606      	mov	r6, r0
   b4cb8:	460d      	mov	r5, r1
  size_t n = 0;
   b4cba:	188f      	adds	r7, r1, r2
   b4cbc:	2400      	movs	r4, #0
  while (size--) {
   b4cbe:	42bd      	cmp	r5, r7
   b4cc0:	d00c      	beq.n	b4cdc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4cc2:	6833      	ldr	r3, [r6, #0]
   b4cc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4cc8:	689b      	ldr	r3, [r3, #8]
   b4cca:	4630      	mov	r0, r6
   b4ccc:	4798      	blx	r3
     if (chunk>=0)
   b4cce:	1e03      	subs	r3, r0, #0
   b4cd0:	db01      	blt.n	b4cd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4cd2:	441c      	add	r4, r3
  while (size--) {
   b4cd4:	e7f3      	b.n	b4cbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4cd6:	2c00      	cmp	r4, #0
   b4cd8:	bf08      	it	eq
   b4cda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4cdc:	4620      	mov	r0, r4
   b4cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ce0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4ce0:	b513      	push	{r0, r1, r4, lr}
   b4ce2:	4604      	mov	r4, r0
    }
   b4ce4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4ce6:	b159      	cbz	r1, b4d00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4ce8:	9101      	str	r1, [sp, #4]
   b4cea:	f7ff f9a1 	bl	b4030 <strlen>
   b4cee:	6823      	ldr	r3, [r4, #0]
   b4cf0:	9901      	ldr	r1, [sp, #4]
   b4cf2:	68db      	ldr	r3, [r3, #12]
   b4cf4:	4602      	mov	r2, r0
   b4cf6:	4620      	mov	r0, r4
    }
   b4cf8:	b002      	add	sp, #8
   b4cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4cfe:	4718      	bx	r3
    }
   b4d00:	b002      	add	sp, #8
   b4d02:	bd10      	pop	{r4, pc}

000b4d04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4d04:	6803      	ldr	r3, [r0, #0]
   b4d06:	689b      	ldr	r3, [r3, #8]
   b4d08:	4718      	bx	r3

000b4d0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4d0a:	b530      	push	{r4, r5, lr}
   b4d0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4d0e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4d10:	2a01      	cmp	r2, #1
  *str = '\0';
   b4d12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4d16:	bf98      	it	ls
   b4d18:	220a      	movls	r2, #10
   b4d1a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4d1c:	460d      	mov	r5, r1
   b4d1e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4d22:	fb01 5312 	mls	r3, r1, r2, r5
   b4d26:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4d2a:	2b09      	cmp	r3, #9
   b4d2c:	bf94      	ite	ls
   b4d2e:	3330      	addls	r3, #48	; 0x30
   b4d30:	3337      	addhi	r3, #55	; 0x37
   b4d32:	b2db      	uxtb	r3, r3
  } while(n);
   b4d34:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4d36:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4d3a:	d9ef      	bls.n	b4d1c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4d3c:	4621      	mov	r1, r4
   b4d3e:	f7ff ffcf 	bl	b4ce0 <_ZN5Print5writeEPKc>
}
   b4d42:	b00b      	add	sp, #44	; 0x2c
   b4d44:	bd30      	pop	{r4, r5, pc}

000b4d46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4d46:	4770      	bx	lr

000b4d48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4d48:	4770      	bx	lr

000b4d4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4d4a:	4770      	bx	lr

000b4d4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4d4c:	4770      	bx	lr
	...

000b4d50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4d50:	4b06      	ldr	r3, [pc, #24]	; (b4d6c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4d52:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4d54:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4d56:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4d5a:	d005      	beq.n	b4d68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4d5c:	4608      	mov	r0, r1
   b4d5e:	f001 faa5 	bl	b62ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4d62:	2800      	cmp	r0, #0
   b4d64:	bf08      	it	eq
   b4d66:	2400      	moveq	r4, #0
      }
   b4d68:	4620      	mov	r0, r4
   b4d6a:	bd10      	pop	{r4, pc}
   b4d6c:	000b67b8 	.word	0x000b67b8

000b4d70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4d70:	4b06      	ldr	r3, [pc, #24]	; (b4d8c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4d72:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4d74:	b510      	push	{r4, lr}
   b4d76:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4d7a:	d005      	beq.n	b4d88 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4d7c:	4608      	mov	r0, r1
   b4d7e:	f001 fa95 	bl	b62ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4d82:	2800      	cmp	r0, #0
   b4d84:	bf08      	it	eq
   b4d86:	2400      	moveq	r4, #0
      }
   b4d88:	4620      	mov	r0, r4
   b4d8a:	bd10      	pop	{r4, pc}
   b4d8c:	000b67b8 	.word	0x000b67b8

000b4d90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4d90:	4b06      	ldr	r3, [pc, #24]	; (b4dac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4d92:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4d94:	b510      	push	{r4, lr}
   b4d96:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4d9a:	d005      	beq.n	b4da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4d9c:	4608      	mov	r0, r1
   b4d9e:	f001 fa85 	bl	b62ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4da2:	2800      	cmp	r0, #0
   b4da4:	bf08      	it	eq
   b4da6:	2400      	moveq	r4, #0
      }
   b4da8:	4620      	mov	r0, r4
   b4daa:	bd10      	pop	{r4, pc}
   b4dac:	000b67b8 	.word	0x000b67b8

000b4db0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4db0:	b510      	push	{r4, lr}
   b4db2:	2168      	movs	r1, #104	; 0x68
   b4db4:	4604      	mov	r4, r0
   b4db6:	f7ff f982 	bl	b40be <_ZdlPvj>
   b4dba:	4620      	mov	r0, r4
   b4dbc:	bd10      	pop	{r4, pc}

000b4dbe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4dbe:	b510      	push	{r4, lr}
   b4dc0:	2128      	movs	r1, #40	; 0x28
   b4dc2:	4604      	mov	r4, r0
   b4dc4:	f7ff f97b 	bl	b40be <_ZdlPvj>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	bd10      	pop	{r4, pc}

000b4dcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	2130      	movs	r1, #48	; 0x30
   b4dd0:	4604      	mov	r4, r0
   b4dd2:	f7ff f974 	bl	b40be <_ZdlPvj>
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	bd10      	pop	{r4, pc}

000b4dda <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4dda:	2168      	movs	r1, #104	; 0x68
   b4ddc:	f7ff b96f 	b.w	b40be <_ZdlPvj>

000b4de0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4de0:	2128      	movs	r1, #40	; 0x28
   b4de2:	f7ff b96c 	b.w	b40be <_ZdlPvj>

000b4de6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4de6:	2130      	movs	r1, #48	; 0x30
   b4de8:	f7ff b969 	b.w	b40be <_ZdlPvj>

000b4dec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4dee:	2500      	movs	r5, #0
   b4df0:	1cec      	adds	r4, r5, #3
   b4df2:	428c      	cmp	r4, r1
   b4df4:	d80d      	bhi.n	b4e12 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4df6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4df8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4dfa:	5d87      	ldrb	r7, [r0, r6]
   b4dfc:	4297      	cmp	r7, r2
   b4dfe:	d105      	bne.n	b4e0c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4e00:	4426      	add	r6, r4
   b4e02:	42b1      	cmp	r1, r6
   b4e04:	d305      	bcc.n	b4e12 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4e06:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4e08:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4e0c:	3401      	adds	r4, #1
   b4e0e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4e10:	e7ee      	b.n	b4df0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4e12:	2000      	movs	r0, #0
   b4e14:	e7f9      	b.n	b4e0a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4e18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4e18:	4a02      	ldr	r2, [pc, #8]	; (b4e24 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4e1a:	4903      	ldr	r1, [pc, #12]	; (b4e28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4e1c:	200a      	movs	r0, #10
   b4e1e:	f7ff bba3 	b.w	b4568 <panic_>
   b4e22:	bf00      	nop
   b4e24:	000b4529 	.word	0x000b4529
   b4e28:	000b6824 	.word	0x000b6824

000b4e2c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4e2c:	b430      	push	{r4, r5}
   b4e2e:	460d      	mov	r5, r1
   b4e30:	4611      	mov	r1, r2
   b4e32:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4e34:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4e36:	6809      	ldr	r1, [r1, #0]
   b4e38:	6828      	ldr	r0, [r5, #0]
   b4e3a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4e3e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4e40:	bc30      	pop	{r4, r5}
   b4e42:	4760      	bx	ip

000b4e44 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4e44:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4e46:	b538      	push	{r3, r4, r5, lr}
   b4e48:	4604      	mov	r4, r0
	switch (__op)
   b4e4a:	d102      	bne.n	b4e52 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4e4c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4e4e:	6023      	str	r3, [r4, #0]
	}
   b4e50:	e003      	b.n	b4e5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4e52:	2a02      	cmp	r2, #2
   b4e54:	d003      	beq.n	b4e5e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4e56:	2a03      	cmp	r2, #3
   b4e58:	d00d      	beq.n	b4e76 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4e5a:	2000      	movs	r0, #0
   b4e5c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e5e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4e60:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e62:	f7ff f928 	bl	b40b6 <_Znwj>
   b4e66:	4603      	mov	r3, r0
   b4e68:	2800      	cmp	r0, #0
   b4e6a:	d0f0      	beq.n	b4e4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4e6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4e70:	e883 0003 	stmia.w	r3, {r0, r1}
   b4e74:	e7eb      	b.n	b4e4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4e76:	6800      	ldr	r0, [r0, #0]
   b4e78:	2800      	cmp	r0, #0
   b4e7a:	d0ee      	beq.n	b4e5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4e7c:	2108      	movs	r1, #8
   b4e7e:	f7ff f91e 	bl	b40be <_ZdlPvj>
   b4e82:	e7ea      	b.n	b4e5a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4e84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4e84:	b510      	push	{r4, lr}
   b4e86:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4e88:	3058      	adds	r0, #88	; 0x58
   b4e8a:	f7ff fe43 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4e8e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4e96:	f001 b953 	b.w	b6140 <_ZN6StringD1Ev>

000b4e9a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4e9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4e9e:	b2da      	uxtb	r2, r3
   b4ea0:	2a09      	cmp	r2, #9
   b4ea2:	d801      	bhi.n	b4ea8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4ea4:	4618      	mov	r0, r3
   b4ea6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4ea8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4eac:	2b05      	cmp	r3, #5
   b4eae:	d801      	bhi.n	b4eb4 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4eb0:	3857      	subs	r0, #87	; 0x57
   b4eb2:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4eb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4eb8:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4eba:	bf94      	ite	ls
   b4ebc:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4ebe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b4ec2:	4770      	bx	lr

000b4ec4 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4ec4:	b510      	push	{r4, lr}
            locked_(false) {
   b4ec6:	2300      	movs	r3, #0
   b4ec8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4eca:	4b04      	ldr	r3, [pc, #16]	; (b4edc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4ecc:	4604      	mov	r4, r0
   b4ece:	6818      	ldr	r0, [r3, #0]
   b4ed0:	f7ff fa98 	bl	b4404 <os_mutex_recursive_lock>
        locked_ = true;
   b4ed4:	2301      	movs	r3, #1
   b4ed6:	7023      	strb	r3, [r4, #0]
    }
   b4ed8:	4620      	mov	r0, r4
   b4eda:	bd10      	pop	{r4, pc}
   b4edc:	2003e720 	.word	0x2003e720

000b4ee0 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4ee0:	b510      	push	{r4, lr}
        if (locked_) {
   b4ee2:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4ee4:	4604      	mov	r4, r0
        if (locked_) {
   b4ee6:	b11b      	cbz	r3, b4ef0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4ee8:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4eea:	6818      	ldr	r0, [r3, #0]
   b4eec:	f7ff fa92 	bl	b4414 <os_mutex_recursive_unlock>
    }
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	bd10      	pop	{r4, pc}
   b4ef4:	2003e720 	.word	0x2003e720

000b4ef8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4ef8:	b082      	sub	sp, #8
   b4efa:	4603      	mov	r3, r0
    address_ = addr;
   b4efc:	6808      	ldr	r0, [r1, #0]
   b4efe:	6849      	ldr	r1, [r1, #4]
   b4f00:	466a      	mov	r2, sp
   b4f02:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4f04:	466a      	mov	r2, sp
   b4f06:	ca03      	ldmia	r2!, {r0, r1}
   b4f08:	6018      	str	r0, [r3, #0]
}
   b4f0a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4f0c:	6059      	str	r1, [r3, #4]
}
   b4f0e:	b002      	add	sp, #8
   b4f10:	4770      	bx	lr

000b4f12 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4f12:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4f14:	7982      	ldrb	r2, [r0, #6]
   b4f16:	798b      	ldrb	r3, [r1, #6]
   b4f18:	429a      	cmp	r2, r3
   b4f1a:	d106      	bne.n	b4f2a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4f1c:	2206      	movs	r2, #6
   b4f1e:	f001 fadd 	bl	b64dc <memcmp>
   b4f22:	fab0 f080 	clz	r0, r0
   b4f26:	0940      	lsrs	r0, r0, #5
}
   b4f28:	bd08      	pop	{r3, pc}
    return false;
   b4f2a:	2000      	movs	r0, #0
   b4f2c:	e7fc      	b.n	b4f28 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4f2e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4f32:	6003      	str	r3, [r0, #0]
   b4f34:	8083      	strh	r3, [r0, #4]
}
   b4f36:	2000      	movs	r0, #0
   b4f38:	4770      	bx	lr

000b4f3a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4f3a:	b508      	push	{r3, lr}
   b4f3c:	4602      	mov	r2, r0
        : address_{} {
   b4f3e:	2100      	movs	r1, #0
   b4f40:	6001      	str	r1, [r0, #0]
   b4f42:	6041      	str	r1, [r0, #4]
    clear();
   b4f44:	f7ff fff3 	bl	b4f2e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4f48:	7191      	strb	r1, [r2, #6]
}
   b4f4a:	4610      	mov	r0, r2
   b4f4c:	bd08      	pop	{r3, pc}
	...

000b4f50 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4f50:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4f52:	2301      	movs	r3, #1
   b4f54:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4f56:	4b05      	ldr	r3, [pc, #20]	; (b4f6c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4f58:	4602      	mov	r2, r0
   b4f5a:	f103 0110 	add.w	r1, r3, #16
   b4f5e:	f853 4b04 	ldr.w	r4, [r3], #4
   b4f62:	f842 4b04 	str.w	r4, [r2], #4
   b4f66:	428b      	cmp	r3, r1
   b4f68:	d1f9      	bne.n	b4f5e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4f6a:	bd10      	pop	{r4, pc}
   b4f6c:	000b66a2 	.word	0x000b66a2

000b4f70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4f70:	b510      	push	{r4, lr}
    if (uuid128) {
   b4f72:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4f74:	4604      	mov	r4, r0
    if (uuid128) {
   b4f76:	b1b1      	cbz	r1, b4fa6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4f78:	2a01      	cmp	r2, #1
   b4f7a:	f101 0210 	add.w	r2, r1, #16
   b4f7e:	d10a      	bne.n	b4f96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4f80:	4601      	mov	r1, r0
   b4f82:	f853 0b04 	ldr.w	r0, [r3], #4
   b4f86:	f841 0b04 	str.w	r0, [r1], #4
   b4f8a:	4293      	cmp	r3, r2
   b4f8c:	d1f9      	bne.n	b4f82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4f8e:	2301      	movs	r3, #1
   b4f90:	6123      	str	r3, [r4, #16]
}
   b4f92:	4620      	mov	r0, r4
   b4f94:	bd10      	pop	{r4, pc}
   b4f96:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4f98:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4f9c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4fa0:	429a      	cmp	r2, r3
   b4fa2:	d1f9      	bne.n	b4f98 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4fa4:	e7f3      	b.n	b4f8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4fa6:	2210      	movs	r2, #16
   b4fa8:	f001 fad0 	bl	b654c <memset>
   b4fac:	e7f1      	b.n	b4f92 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4fae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b4fae:	b538      	push	{r3, r4, r5, lr}
   b4fb0:	4604      	mov	r4, r0
   b4fb2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b4fb4:	461a      	mov	r2, r3
   b4fb6:	f7ff ffdb 	bl	b4f70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4fba:	81a5      	strh	r5, [r4, #12]
}
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	bd38      	pop	{r3, r4, r5, pc}

000b4fc0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b4fc0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b4fc2:	6902      	ldr	r2, [r0, #16]
   b4fc4:	b922      	cbnz	r2, b4fd0 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b4fc6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4fc8:	3800      	subs	r0, #0
   b4fca:	bf18      	it	ne
   b4fcc:	2001      	movne	r0, #1
}
   b4fce:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4fd0:	4902      	ldr	r1, [pc, #8]	; (b4fdc <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b4fd2:	2210      	movs	r2, #16
   b4fd4:	f001 fa82 	bl	b64dc <memcmp>
   b4fd8:	e7f6      	b.n	b4fc8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b4fda:	bf00      	nop
   b4fdc:	000b69b0 	.word	0x000b69b0

000b4fe0 <_ZNK8particle7BleUuid4typeEv>:
}
   b4fe0:	6900      	ldr	r0, [r0, #16]
   b4fe2:	4770      	bx	lr

000b4fe4 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b4fe4:	b538      	push	{r3, r4, r5, lr}
   b4fe6:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b4fe8:	2214      	movs	r2, #20
   b4fea:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b4fec:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b4fee:	f001 faad 	bl	b654c <memset>
    if (type_ == BleUuidType::SHORT) {
   b4ff2:	6923      	ldr	r3, [r4, #16]
   b4ff4:	b91b      	cbnz	r3, b4ffe <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b4ff6:	89a3      	ldrh	r3, [r4, #12]
   b4ff8:	802b      	strh	r3, [r5, #0]
}
   b4ffa:	4628      	mov	r0, r5
   b4ffc:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b4ffe:	2301      	movs	r3, #1
   b5000:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5002:	4621      	mov	r1, r4
   b5004:	462b      	mov	r3, r5
   b5006:	f104 0210 	add.w	r2, r4, #16
   b500a:	f851 0b04 	ldr.w	r0, [r1], #4
   b500e:	f843 0b04 	str.w	r0, [r3], #4
   b5012:	4291      	cmp	r1, r2
   b5014:	d1f9      	bne.n	b500a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5016:	e7f0      	b.n	b4ffa <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5018 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5018:	8980      	ldrh	r0, [r0, #12]
   b501a:	4770      	bx	lr

000b501c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b501c:	4770      	bx	lr

000b501e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b501e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5020:	6902      	ldr	r2, [r0, #16]
   b5022:	690b      	ldr	r3, [r1, #16]
   b5024:	429a      	cmp	r2, r3
   b5026:	d106      	bne.n	b5036 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5028:	2210      	movs	r2, #16
   b502a:	f001 fa57 	bl	b64dc <memcmp>
   b502e:	fab0 f080 	clz	r0, r0
   b5032:	0940      	lsrs	r0, r0, #5
}
   b5034:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5036:	2000      	movs	r0, #0
   b5038:	e7fc      	b.n	b5034 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b503c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b503c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b503e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5042:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5044:	4b34      	ldr	r3, [pc, #208]	; (b5118 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5046:	460c      	mov	r4, r1
   b5048:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b504a:	4602      	mov	r2, r0
   b504c:	f103 0110 	add.w	r1, r3, #16
   b5050:	f853 0b04 	ldr.w	r0, [r3], #4
   b5054:	f842 0b04 	str.w	r0, [r2], #4
   b5058:	428b      	cmp	r3, r1
   b505a:	d1f9      	bne.n	b5050 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b505c:	b344      	cbz	r4, b50b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b505e:	2124      	movs	r1, #36	; 0x24
   b5060:	4620      	mov	r0, r4
   b5062:	f001 faa9 	bl	b65b8 <strnlen>
   b5066:	2804      	cmp	r0, #4
   b5068:	f04f 0500 	mov.w	r5, #0
   b506c:	d123      	bne.n	b50b6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b506e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5072:	af01      	add	r7, sp, #4
   b5074:	1ca5      	adds	r5, r4, #2
   b5076:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5078:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b507c:	f7ff ff0d 	bl	b4e9a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5080:	f1b0 0800 	subs.w	r8, r0, #0
   b5084:	db12      	blt.n	b50ac <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5086:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b508a:	f7ff ff06 	bl	b4e9a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b508e:	2800      	cmp	r0, #0
   b5090:	db0c      	blt.n	b50ac <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5092:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5094:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5098:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b509a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b509e:	d1eb      	bne.n	b5078 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b50a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b50a4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b50a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b50aa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b50ac:	2300      	movs	r3, #0
   b50ae:	6133      	str	r3, [r6, #16]
}
   b50b0:	b002      	add	sp, #8
   b50b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b50b6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b50ba:	2124      	movs	r1, #36	; 0x24
   b50bc:	4620      	mov	r0, r4
   b50be:	f001 fa7b 	bl	b65b8 <strnlen>
   b50c2:	42a8      	cmp	r0, r5
   b50c4:	d807      	bhi.n	b50d6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b50c6:	4642      	mov	r2, r8
   b50c8:	2100      	movs	r1, #0
   b50ca:	4630      	mov	r0, r6
}
   b50cc:	b002      	add	sp, #8
   b50ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b50d2:	f001 ba3b 	b.w	b654c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b50d6:	f1b8 0f00 	cmp.w	r8, #0
   b50da:	d0e9      	beq.n	b50b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b50dc:	5d60      	ldrb	r0, [r4, r5]
   b50de:	f7ff fedc 	bl	b4e9a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b50e2:	0603      	lsls	r3, r0, #24
   b50e4:	d415      	bmi.n	b5112 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b50e6:	0100      	lsls	r0, r0, #4
   b50e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b50ec:	b2c7      	uxtb	r7, r0
   b50ee:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b50f2:	2124      	movs	r1, #36	; 0x24
   b50f4:	4620      	mov	r0, r4
   b50f6:	f001 fa5f 	bl	b65b8 <strnlen>
   b50fa:	3501      	adds	r5, #1
   b50fc:	42a8      	cmp	r0, r5
   b50fe:	d908      	bls.n	b5112 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5100:	5d60      	ldrb	r0, [r4, r5]
   b5102:	f7ff feca 	bl	b4e9a <_ZN8particle11hexToNibbleEc>
   b5106:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5108:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b510a:	bfa4      	itt	ge
   b510c:	4338      	orrge	r0, r7
   b510e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5112:	3501      	adds	r5, #1
   b5114:	e7d1      	b.n	b50ba <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5116:	bf00      	nop
   b5118:	000b66a2 	.word	0x000b66a2

000b511c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b511c:	b513      	push	{r0, r1, r4, lr}
   b511e:	4604      	mov	r4, r0
   b5120:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5122:	f7ff ff15 	bl	b4f50 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5126:	4620      	mov	r0, r4
   b5128:	9901      	ldr	r1, [sp, #4]
   b512a:	f7ff ff87 	bl	b503c <_ZN8particle7BleUuid9constructEPKc>
}
   b512e:	4620      	mov	r0, r4
   b5130:	b002      	add	sp, #8
   b5132:	bd10      	pop	{r4, pc}

000b5134 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5134:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5136:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b513a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b513c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b513e:	8043      	strh	r3, [r0, #2]
   b5140:	220e      	movs	r2, #14
   b5142:	4629      	mov	r1, r5
   b5144:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5146:	7105      	strb	r5, [r0, #4]
   b5148:	3006      	adds	r0, #6
   b514a:	f001 f9ff 	bl	b654c <memset>
   b514e:	f104 0014 	add.w	r0, r4, #20
   b5152:	f7ff fefd 	bl	b4f50 <_ZN8particle7BleUuidC1Ev>
   b5156:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b515a:	f7ff fef9 	bl	b4f50 <_ZN8particle7BleUuidC1Ev>
   b515e:	4904      	ldr	r1, [pc, #16]	; (b5170 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5160:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5164:	f001 f837 	bl	b61d6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5168:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b516a:	4620      	mov	r0, r4
   b516c:	bd38      	pop	{r3, r4, r5, pc}
   b516e:	bf00      	nop
   b5170:	000b68bb 	.word	0x000b68bb

000b5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5174:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b5176:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b517a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b517e:	4293      	cmp	r3, r2
   b5180:	4618      	mov	r0, r3
   b5182:	d006      	beq.n	b5192 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5184:	6804      	ldr	r4, [r0, #0]
   b5186:	8824      	ldrh	r4, [r4, #0]
   b5188:	428c      	cmp	r4, r1
   b518a:	f103 0308 	add.w	r3, r3, #8
   b518e:	d1f6      	bne.n	b517e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5190:	bd10      	pop	{r4, pc}
        return nullptr;
   b5192:	2000      	movs	r0, #0
   b5194:	e7fc      	b.n	b5190 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5198 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5198:	b5f0      	push	{r4, r5, r6, r7, lr}
   b519a:	4606      	mov	r6, r0
   b519c:	b085      	sub	sp, #20
   b519e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b51a0:	460d      	mov	r5, r1
   b51a2:	2900      	cmp	r1, #0
   b51a4:	d050      	beq.n	b5248 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b51a6:	2a00      	cmp	r2, #0
   b51a8:	d04e      	beq.n	b5248 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51aa:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b51ac:	7823      	ldrb	r3, [r4, #0]
   b51ae:	2af4      	cmp	r2, #244	; 0xf4
   b51b0:	bf28      	it	cs
   b51b2:	22f4      	movcs	r2, #244	; 0xf4
   b51b4:	b343      	cbz	r3, b5208 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b51b6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b51b8:	0798      	lsls	r0, r3, #30
   b51ba:	d509      	bpl.n	b51d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b51bc:	89a0      	ldrh	r0, [r4, #12]
   b51be:	9203      	str	r2, [sp, #12]
   b51c0:	2300      	movs	r3, #0
   b51c2:	f7ff f963 	bl	b448c <hal_ble_gatt_server_set_characteristic_value>
   b51c6:	2800      	cmp	r0, #0
   b51c8:	9a03      	ldr	r2, [sp, #12]
   b51ca:	da03      	bge.n	b51d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b51cc:	b005      	add	sp, #20
   b51ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b51d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b51d4:	6834      	ldr	r4, [r6, #0]
   b51d6:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b51d8:	06d9      	lsls	r1, r3, #27
   b51da:	d509      	bpl.n	b51f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b51dc:	2f01      	cmp	r7, #1
   b51de:	d007      	beq.n	b51f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b51e0:	89a0      	ldrh	r0, [r4, #12]
   b51e2:	2300      	movs	r3, #0
   b51e4:	4629      	mov	r1, r5
}
   b51e6:	b005      	add	sp, #20
   b51e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b51ec:	f7ff b980 	b.w	b44f0 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b51f0:	069b      	lsls	r3, r3, #26
   b51f2:	d5eb      	bpl.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b51f4:	2f02      	cmp	r7, #2
   b51f6:	d0e9      	beq.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b51f8:	89a0      	ldrh	r0, [r4, #12]
   b51fa:	2300      	movs	r3, #0
   b51fc:	4629      	mov	r1, r5
}
   b51fe:	b005      	add	sp, #20
   b5200:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b5204:	f7ff b97e 	b.w	b4504 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b5208:	8860      	ldrh	r0, [r4, #2]
   b520a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b520e:	4288      	cmp	r0, r1
   b5210:	d01c      	beq.n	b524c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b5212:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b5214:	074e      	lsls	r6, r1, #29
   b5216:	d501      	bpl.n	b521c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b5218:	2f01      	cmp	r7, #1
   b521a:	d104      	bne.n	b5226 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b521c:	070b      	lsls	r3, r1, #28
   b521e:	d409      	bmi.n	b5234 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b5220:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b5224:	e7d2      	b.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5226:	89a1      	ldrh	r1, [r4, #12]
   b5228:	9300      	str	r3, [sp, #0]
   b522a:	4613      	mov	r3, r2
   b522c:	462a      	mov	r2, r5
   b522e:	f7ff f941 	bl	b44b4 <hal_ble_gatt_client_write_without_response>
   b5232:	e7cb      	b.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5234:	2f02      	cmp	r7, #2
   b5236:	d0f3      	beq.n	b5220 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5238:	2300      	movs	r3, #0
   b523a:	89a1      	ldrh	r1, [r4, #12]
   b523c:	9300      	str	r3, [sp, #0]
   b523e:	4613      	mov	r3, r2
   b5240:	462a      	mov	r2, r5
   b5242:	f7ff f92d 	bl	b44a0 <hal_ble_gatt_client_write_with_response>
   b5246:	e7c1      	b.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5248:	4802      	ldr	r0, [pc, #8]	; (b5254 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b524a:	e7bf      	b.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b524c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5250:	e7bc      	b.n	b51cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b5252:	bf00      	nop
   b5254:	fffffef2 	.word	0xfffffef2

000b5258 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b525c:	2600      	movs	r6, #0
   b525e:	6006      	str	r6, [r0, #0]
   b5260:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5262:	2028      	movs	r0, #40	; 0x28
   b5264:	460c      	mov	r4, r1
   b5266:	f7fe ff26 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b526a:	1e05      	subs	r5, r0, #0
   b526c:	f105 080c 	add.w	r8, r5, #12
   b5270:	d00f      	beq.n	b5292 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b5272:	2301      	movs	r3, #1
   b5274:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5278:	4b08      	ldr	r3, [pc, #32]	; (b529c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b527a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b527c:	4640      	mov	r0, r8
   b527e:	f7ff fe67 	bl	b4f50 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5284:	622e      	str	r6, [r5, #32]
   b5286:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b528a:	4646      	mov	r6, r8
   b528c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b528e:	6823      	ldr	r3, [r4, #0]
   b5290:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5292:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5296:	4638      	mov	r0, r7
   b5298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b529c:	000b6970 	.word	0x000b6970

000b52a0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b52a0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b52a2:	2500      	movs	r5, #0
   b52a4:	6005      	str	r5, [r0, #0]
   b52a6:	4606      	mov	r6, r0
   b52a8:	2030      	movs	r0, #48	; 0x30
   b52aa:	f7fe ff04 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b52ae:	4604      	mov	r4, r0
   b52b0:	b188      	cbz	r0, b52d6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b52b2:	2301      	movs	r3, #1
   b52b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b52b8:	4b09      	ldr	r3, [pc, #36]	; (b52e0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b52ba:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b52bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b52c0:	8183      	strh	r3, [r0, #12]
   b52c2:	300e      	adds	r0, #14
   b52c4:	f7ff fe39 	bl	b4f3a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b52c8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b52cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b52d0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b52d4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b52d6:	6074      	str	r4, [r6, #4]
   b52d8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b52da:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b52dc:	4630      	mov	r0, r6
   b52de:	bd70      	pop	{r4, r5, r6, pc}
   b52e0:	000b698c 	.word	0x000b698c

000b52e4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b52e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b52e6:	460d      	mov	r5, r1
   b52e8:	4604      	mov	r4, r0
    WiringBleLock lk;
   b52ea:	a801      	add	r0, sp, #4
   b52ec:	f7ff fdea 	bl	b4ec4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b52f0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b52f2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b52f6:	6023      	str	r3, [r4, #0]
   b52f8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b52fc:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b52fe:	a801      	add	r0, sp, #4
   b5300:	f7ff fdee 	bl	b4ee0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5304:	4620      	mov	r0, r4
   b5306:	b003      	add	sp, #12
   b5308:	bd30      	pop	{r4, r5, pc}

000b530a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b530a:	b530      	push	{r4, r5, lr}
   b530c:	4605      	mov	r5, r0
   b530e:	b087      	sub	sp, #28
   b5310:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5312:	a801      	add	r0, sp, #4
   b5314:	f7ff fdd6 	bl	b4ec4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5318:	682a      	ldr	r2, [r5, #0]
   b531a:	6823      	ldr	r3, [r4, #0]
   b531c:	8812      	ldrh	r2, [r2, #0]
   b531e:	881b      	ldrh	r3, [r3, #0]
   b5320:	429a      	cmp	r2, r3
   b5322:	d10d      	bne.n	b5340 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5324:	4629      	mov	r1, r5
   b5326:	a802      	add	r0, sp, #8
   b5328:	f7ff ffdc 	bl	b52e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b532c:	4621      	mov	r1, r4
   b532e:	a804      	add	r0, sp, #16
   b5330:	f7ff ffd8 	bl	b52e4 <_ZNK8particle13BlePeerDevice7addressEv>
   b5334:	a904      	add	r1, sp, #16
   b5336:	a802      	add	r0, sp, #8
   b5338:	f7ff fdeb 	bl	b4f12 <_ZNK8particle10BleAddresseqERKS0_>
   b533c:	4604      	mov	r4, r0
   b533e:	b900      	cbnz	r0, b5342 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5340:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5342:	a801      	add	r0, sp, #4
   b5344:	f7ff fdcc 	bl	b4ee0 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5348:	4620      	mov	r0, r4
   b534a:	b007      	add	sp, #28
   b534c:	bd30      	pop	{r4, r5, pc}
	...

000b5350 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5350:	b510      	push	{r4, lr}
   b5352:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5354:	2064      	movs	r0, #100	; 0x64
   b5356:	f7fe feae 	bl	b40b6 <_Znwj>
   b535a:	b168      	cbz	r0, b5378 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b535c:	2300      	movs	r3, #0
   b535e:	e9c0 3300 	strd	r3, r3, [r0]
   b5362:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5366:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b536a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b536e:	6203      	str	r3, [r0, #32]
   b5370:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5372:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5374:	64c3      	str	r3, [r0, #76]	; 0x4c
   b5376:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5378:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b537a:	b920      	cbnz	r0, b5386 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b537c:	4a0a      	ldr	r2, [pc, #40]	; (b53a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b537e:	490b      	ldr	r1, [pc, #44]	; (b53ac <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b5380:	200a      	movs	r0, #10
   b5382:	f7ff f8f1 	bl	b4568 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5386:	2000      	movs	r0, #0
   b5388:	f7ff f84c 	bl	b4424 <hal_ble_stack_init>
   b538c:	b120      	cbz	r0, b5398 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b538e:	4a06      	ldr	r2, [pc, #24]	; (b53a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5390:	4907      	ldr	r1, [pc, #28]	; (b53b0 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5392:	200a      	movs	r0, #10
   b5394:	f7ff f8e8 	bl	b4568 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5398:	6821      	ldr	r1, [r4, #0]
   b539a:	4806      	ldr	r0, [pc, #24]	; (b53b4 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b539c:	2200      	movs	r2, #0
   b539e:	f7ff f89d 	bl	b44dc <hal_ble_set_callback_on_periph_link_events>
}
   b53a2:	4620      	mov	r0, r4
   b53a4:	bd10      	pop	{r4, pc}
   b53a6:	bf00      	nop
   b53a8:	000b4529 	.word	0x000b4529
   b53ac:	000b6824 	.word	0x000b6824
   b53b0:	000b6862 	.word	0x000b6862
   b53b4:	000b5915 	.word	0x000b5915

000b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b53b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b53ba:	4c0a      	ldr	r4, [pc, #40]	; (b53e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b53bc:	7823      	ldrb	r3, [r4, #0]
   b53be:	f3bf 8f5b 	dmb	ish
   b53c2:	07db      	lsls	r3, r3, #31
   b53c4:	d40c      	bmi.n	b53e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b53c6:	4620      	mov	r0, r4
   b53c8:	f7fe fe7b 	bl	b40c2 <__cxa_guard_acquire>
   b53cc:	b140      	cbz	r0, b53e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b53ce:	4806      	ldr	r0, [pc, #24]	; (b53e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b53d0:	f7ff ffbe 	bl	b5350 <_ZN8particle14BleLocalDeviceC1Ev>
   b53d4:	4620      	mov	r0, r4
   b53d6:	f7fe fe79 	bl	b40cc <__cxa_guard_release>
   b53da:	4804      	ldr	r0, [pc, #16]	; (b53ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b53dc:	f001 f878 	bl	b64d0 <atexit>
    return instance;
}
   b53e0:	4801      	ldr	r0, [pc, #4]	; (b53e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b53e2:	bd10      	pop	{r4, pc}
   b53e4:	2003e718 	.word	0x2003e718
   b53e8:	2003e724 	.word	0x2003e724
   b53ec:	000b5601 	.word	0x000b5601

000b53f0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b53f0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b53f2:	6803      	ldr	r3, [r0, #0]
   b53f4:	3b09      	subs	r3, #9
   b53f6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b53f8:	b08d      	sub	sp, #52	; 0x34
   b53fa:	4604      	mov	r4, r0
   b53fc:	460d      	mov	r5, r1
    switch (event->type) {
   b53fe:	d811      	bhi.n	b5424 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5400:	f7ff ffda 	bl	b53b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5404:	88a1      	ldrh	r1, [r4, #4]
   b5406:	6800      	ldr	r0, [r0, #0]
   b5408:	f7ff feb4 	bl	b5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b540c:	4603      	mov	r3, r0
   b540e:	b958      	cbnz	r0, b5428 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5410:	2220      	movs	r2, #32
   b5412:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5416:	4a0b      	ldr	r2, [pc, #44]	; (b5444 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5418:	9200      	str	r2, [sp, #0]
   b541a:	490b      	ldr	r1, [pc, #44]	; (b5448 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b541c:	aa04      	add	r2, sp, #16
   b541e:	2032      	movs	r0, #50	; 0x32
   b5420:	f7ff f8aa 	bl	b4578 <log_message>
}
   b5424:	b00d      	add	sp, #52	; 0x34
   b5426:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5428:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b542a:	2a00      	cmp	r2, #0
   b542c:	d0fa      	beq.n	b5424 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b542e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5432:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5436:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b543a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b543c:	aa04      	add	r2, sp, #16
   b543e:	a903      	add	r1, sp, #12
   b5440:	47a0      	blx	r4
}
   b5442:	e7ef      	b.n	b5424 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b5444:	000b68a4 	.word	0x000b68a4
   b5448:	000b683b 	.word	0x000b683b

000b544c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b544c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b544e:	2000      	movs	r0, #0
   b5450:	f7fe ffe8 	bl	b4424 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5454:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5458:	bd08      	pop	{r3, pc}

000b545a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b545a:	b919      	cbnz	r1, b5464 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b545c:	460a      	mov	r2, r1
   b545e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5460:	f7fe bfe8 	b.w	b4434 <hal_ble_gap_set_advertising_data>
   b5464:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5468:	2200      	movs	r2, #0
   b546a:	e7f9      	b.n	b5460 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b546c <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b546c:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b546e:	69d8      	ldr	r0, [r3, #28]
}
   b5470:	2800      	cmp	r0, #0
   b5472:	bfd4      	ite	le
   b5474:	2000      	movle	r0, #0
   b5476:	2001      	movgt	r0, #1
   b5478:	4770      	bx	lr

000b547a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b547a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b547c:	1e14      	subs	r4, r2, #0
   b547e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5480:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5482:	db02      	blt.n	b548a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5484:	1862      	adds	r2, r4, r1
   b5486:	429a      	cmp	r2, r3
   b5488:	dd00      	ble.n	b548c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b548a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b548c:	682a      	ldr	r2, [r5, #0]
   b548e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5490:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5492:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5494:	1a52      	subs	r2, r2, r1
   b5496:	f001 f83f 	bl	b6518 <memmove>
    size_ -= n;
   b549a:	686a      	ldr	r2, [r5, #4]
   b549c:	1b12      	subs	r2, r2, r4
   b549e:	606a      	str	r2, [r5, #4]
}
   b54a0:	bd38      	pop	{r3, r4, r5, pc}

000b54a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b54a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b54a4:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b54a6:	4604      	mov	r4, r0
   b54a8:	460d      	mov	r5, r1
   b54aa:	ab01      	add	r3, sp, #4
   b54ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   b54b0:	f7ff fc9c 	bl	b4dec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b54b4:	4602      	mov	r2, r0
   b54b6:	b138      	cbz	r0, b54c8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b54b8:	9901      	ldr	r1, [sp, #4]
   b54ba:	4620      	mov	r0, r4
   b54bc:	f7ff ffdd 	bl	b547a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b54c0:	4629      	mov	r1, r5
   b54c2:	4620      	mov	r0, r4
   b54c4:	f7ff ffed 	bl	b54a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b54c8:	b003      	add	sp, #12
   b54ca:	bd30      	pop	{r4, r5, pc}

000b54cc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b54cc:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b54ce:	460c      	mov	r4, r1
   b54d0:	b929      	cbnz	r1, b54de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b54d2:	460a      	mov	r2, r1
   b54d4:	4608      	mov	r0, r1
}
   b54d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b54da:	f7fe bfb3 	b.w	b4444 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b54de:	2101      	movs	r1, #1
   b54e0:	4620      	mov	r0, r4
   b54e2:	f7ff ffde 	bl	b54a2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b54e6:	e9d4 0100 	ldrd	r0, r1, [r4]
   b54ea:	2200      	movs	r2, #0
   b54ec:	e7f3      	b.n	b54d6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b54ee <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b54ee:	b538      	push	{r3, r4, r5, lr}
   b54f0:	4604      	mov	r4, r0
   b54f2:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b54f4:	f7ff ffb1 	bl	b545a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b54f8:	2800      	cmp	r0, #0
   b54fa:	db0a      	blt.n	b5512 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b54fc:	4629      	mov	r1, r5
   b54fe:	4620      	mov	r0, r4
   b5500:	f7ff ffe4 	bl	b54cc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5504:	2800      	cmp	r0, #0
   b5506:	db04      	blt.n	b5512 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b5508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b550c:	2000      	movs	r0, #0
   b550e:	f7fe bfa1 	b.w	b4454 <hal_ble_gap_start_advertising>
}
   b5512:	bd38      	pop	{r3, r4, r5, pc}

000b5514 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5514:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5516:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5518:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b551a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b551c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b551e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5520:	f7fe fdc9 	bl	b40b6 <_Znwj>
   b5524:	b118      	cbz	r0, b552e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5526:	682b      	ldr	r3, [r5, #0]
   b5528:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b552a:	686b      	ldr	r3, [r5, #4]
   b552c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b552e:	4b03      	ldr	r3, [pc, #12]	; (b553c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5530:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5532:	4b03      	ldr	r3, [pc, #12]	; (b5540 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5534:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5536:	60a3      	str	r3, [r4, #8]
      }
   b5538:	4620      	mov	r0, r4
   b553a:	bd38      	pop	{r3, r4, r5, pc}
   b553c:	000b4e2d 	.word	0x000b4e2d
   b5540:	000b4e45 	.word	0x000b4e45

000b5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5544:	680b      	ldr	r3, [r1, #0]
   b5546:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5548:	b113      	cbz	r3, b5550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b554a:	685a      	ldr	r2, [r3, #4]
   b554c:	3201      	adds	r2, #1
   b554e:	605a      	str	r2, [r3, #4]
      }
   b5550:	4770      	bx	lr

000b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5552:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5554:	f851 3b04 	ldr.w	r3, [r1], #4
   b5558:	4604      	mov	r4, r0
   b555a:	f840 3b04 	str.w	r3, [r0], #4
   b555e:	f7ff fff1 	bl	b5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5562:	6823      	ldr	r3, [r4, #0]
   b5564:	b90b      	cbnz	r3, b556a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5566:	f7ff fc57 	bl	b4e18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b556a:	4620      	mov	r0, r4
   b556c:	bd10      	pop	{r4, pc}

000b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b556e:	b510      	push	{r4, lr}
   b5570:	f851 3b04 	ldr.w	r3, [r1], #4
   b5574:	4604      	mov	r4, r0
   b5576:	f840 3b04 	str.w	r3, [r0], #4
   b557a:	f7ff ffe3 	bl	b5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b557e:	4620      	mov	r0, r4
   b5580:	bd10      	pop	{r4, pc}

000b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5582:	b510      	push	{r4, lr}
   b5584:	f851 3b04 	ldr.w	r3, [r1], #4
   b5588:	4604      	mov	r4, r0
   b558a:	f840 3b04 	str.w	r3, [r0], #4
   b558e:	f7ff ffd9 	bl	b5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5592:	4620      	mov	r0, r4
   b5594:	bd10      	pop	{r4, pc}

000b5596 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5596:	b510      	push	{r4, lr}
   b5598:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b559a:	3004      	adds	r0, #4
   b559c:	f7ff f998 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55a0:	4620      	mov	r0, r4
   b55a2:	bd10      	pop	{r4, pc}

000b55a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55a6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55aa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55ac:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b55b0:	42ae      	cmp	r6, r5
   b55b2:	d004      	beq.n	b55be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b55b4:	1d28      	adds	r0, r5, #4
   b55b6:	f7ff f98b 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55ba:	3508      	adds	r5, #8
   b55bc:	e7f8      	b.n	b55b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b55be:	6820      	ldr	r0, [r4, #0]
   b55c0:	f7ff f86e 	bl	b46a0 <free>
}
   b55c4:	4620      	mov	r0, r4
   b55c6:	bd70      	pop	{r4, r5, r6, pc}

000b55c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b55ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b55ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b55d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b55d4:	42ae      	cmp	r6, r5
   b55d6:	d004      	beq.n	b55e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b55d8:	1d28      	adds	r0, r5, #4
   b55da:	f7ff f979 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55de:	3508      	adds	r5, #8
   b55e0:	e7f8      	b.n	b55d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b55e2:	6820      	ldr	r0, [r4, #0]
   b55e4:	f7ff f85c 	bl	b46a0 <free>
}
   b55e8:	4620      	mov	r0, r4
   b55ea:	bd70      	pop	{r4, r5, r6, pc}

000b55ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b55ec:	b510      	push	{r4, lr}
   b55ee:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b55f0:	3024      	adds	r0, #36	; 0x24
   b55f2:	f7ff ffe9 	bl	b55c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b55f6:	f104 0018 	add.w	r0, r4, #24
   b55fa:	f7ff ffd3 	bl	b55a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b55fe:	bd10      	pop	{r4, pc}

000b5600 <__tcf_0>:
    static BleLocalDevice instance;
   b5600:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5602:	4b17      	ldr	r3, [pc, #92]	; (b5660 <__tcf_0+0x60>)
   b5604:	681c      	ldr	r4, [r3, #0]
   b5606:	b354      	cbz	r4, b565e <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5608:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b560c:	f7ff fa82 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
   b5610:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5614:	f7ff fa7e 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
   b5618:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b561c:	f7ff fa7a 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
   b5620:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5624:	f7ff fa76 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5628:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b562c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5630:	42ae      	cmp	r6, r5
   b5632:	d004      	beq.n	b563e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5634:	1d28      	adds	r0, r5, #4
   b5636:	f7ff f94b 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b563a:	3508      	adds	r5, #8
   b563c:	e7f8      	b.n	b5630 <__tcf_0+0x30>
    ::free(ptr);
   b563e:	69a0      	ldr	r0, [r4, #24]
   b5640:	f7ff f82e 	bl	b46a0 <free>
    ~BleLocalDeviceImpl() = default;
   b5644:	f104 000c 	add.w	r0, r4, #12
   b5648:	f7ff ffbe 	bl	b55c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b564c:	4620      	mov	r0, r4
   b564e:	f7ff ffa9 	bl	b55a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5652:	4620      	mov	r0, r4
   b5654:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b565a:	f7fe bd30 	b.w	b40be <_ZdlPvj>
   b565e:	bd70      	pop	{r4, r5, r6, pc}
   b5660:	2003e724 	.word	0x2003e724

000b5664 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5664:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5666:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5668:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b566c:	e9c1 3300 	strd	r3, r3, [r1]
      __a = _GLIBCXX_MOVE(__b);
   b5670:	6803      	ldr	r3, [r0, #0]
   b5672:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5674:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5676:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5678:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b567a:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b567c:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b567e:	f7ff f927 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5682:	b002      	add	sp, #8
   b5684:	bd10      	pop	{r4, pc}

000b5686 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5686:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5688:	b510      	push	{r4, lr}
      if (_M_empty())
   b568a:	b90a      	cbnz	r2, b5690 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b568c:	f000 fe0a 	bl	b62a4 <_ZSt25__throw_bad_function_callv>
    }
   b5690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5694:	68c3      	ldr	r3, [r0, #12]
   b5696:	4718      	bx	r3

000b5698 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5698:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b569a:	6883      	ldr	r3, [r0, #8]
   b569c:	428b      	cmp	r3, r1
   b569e:	da02      	bge.n	b56a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b56a0:	f7ff f92c 	bl	b48fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b56a4:	bd08      	pop	{r3, pc}
    return true;
   b56a6:	2001      	movs	r0, #1
   b56a8:	e7fc      	b.n	b56a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b56aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b56aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56ae:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b56b0:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b56b2:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b56b4:	4419      	add	r1, r3
   b56b6:	6883      	ldr	r3, [r0, #8]
   b56b8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b56ba:	4604      	mov	r4, r0
   b56bc:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b56be:	dc12      	bgt.n	b56e6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b56c0:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b56c2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b56c4:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b56c6:	1bd2      	subs	r2, r2, r7
   b56c8:	4631      	mov	r1, r6
   b56ca:	1970      	adds	r0, r6, r5
   b56cc:	f000 ff24 	bl	b6518 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b56d0:	462a      	mov	r2, r5
   b56d2:	4641      	mov	r1, r8
   b56d4:	4630      	mov	r0, r6
   b56d6:	f000 ff11 	bl	b64fc <memcpy>
    size_ += n;
   b56da:	6863      	ldr	r3, [r4, #4]
   b56dc:	442b      	add	r3, r5
   b56de:	6063      	str	r3, [r4, #4]
    return true;
   b56e0:	2001      	movs	r0, #1
}
   b56e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b56e6:	f7ff f909 	bl	b48fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b56ea:	2800      	cmp	r0, #0
   b56ec:	d1e8      	bne.n	b56c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b56ee:	e7f8      	b.n	b56e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b56f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b56f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56f2:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56f4:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b56f8:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b56fa:	4604      	mov	r4, r0
   b56fc:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56fe:	da0b      	bge.n	b5718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5700:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5702:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5704:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5706:	1b52      	subs	r2, r2, r5
   b5708:	1c48      	adds	r0, r1, #1
   b570a:	f000 ff05 	bl	b6518 <memmove>
    new(p) T(std::move(value));
   b570e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5710:	6863      	ldr	r3, [r4, #4]
   b5712:	3301      	adds	r3, #1
   b5714:	6063      	str	r3, [r4, #4]
}
   b5716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5718:	3101      	adds	r1, #1
   b571a:	f7ff f8ef 	bl	b48fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b571e:	2800      	cmp	r0, #0
   b5720:	d1ee      	bne.n	b5700 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5722:	e7f8      	b.n	b5716 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5724 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5724:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5726:	6841      	ldr	r1, [r0, #4]
   b5728:	f7ff bfe2 	b.w	b56f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b572c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b572c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5730:	4604      	mov	r4, r0
   b5732:	461d      	mov	r5, r3
   b5734:	460f      	mov	r7, r1
   b5736:	ab01      	add	r3, sp, #4
   b5738:	4690      	mov	r8, r2
   b573a:	460a      	mov	r2, r1
   b573c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5740:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5744:	f7ff fb52 	bl	b4dec <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5748:	1cae      	adds	r6, r5, #2
   b574a:	6863      	ldr	r3, [r4, #4]
   b574c:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b574e:	f1b9 0f00 	cmp.w	r9, #0
   b5752:	d126      	bne.n	b57a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5754:	b328      	cbz	r0, b57a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5756:	4433      	add	r3, r6
   b5758:	1a1b      	subs	r3, r3, r0
   b575a:	2bff      	cmp	r3, #255	; 0xff
   b575c:	d809      	bhi.n	b5772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b575e:	9901      	ldr	r1, [sp, #4]
   b5760:	4620      	mov	r0, r4
   b5762:	f7ff fe8a 	bl	b547a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5766:	6861      	ldr	r1, [r4, #4]
   b5768:	4620      	mov	r0, r4
   b576a:	4431      	add	r1, r6
   b576c:	f7ff ff94 	bl	b5698 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5770:	b918      	cbnz	r0, b577a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5772:	6860      	ldr	r0, [r4, #4]
}
   b5774:	b003      	add	sp, #12
   b5776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b577a:	1c6a      	adds	r2, r5, #1
   b577c:	9901      	ldr	r1, [sp, #4]
   b577e:	b2d2      	uxtb	r2, r2
   b5780:	4620      	mov	r0, r4
   b5782:	f7ff ffb5 	bl	b56f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5786:	9901      	ldr	r1, [sp, #4]
   b5788:	463a      	mov	r2, r7
   b578a:	3101      	adds	r1, #1
   b578c:	4620      	mov	r0, r4
   b578e:	f7ff ffaf 	bl	b56f0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5792:	9901      	ldr	r1, [sp, #4]
   b5794:	462b      	mov	r3, r5
   b5796:	4642      	mov	r2, r8
   b5798:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b579a:	4620      	mov	r0, r4
   b579c:	f7ff ff85 	bl	b56aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b57a0:	e7e7      	b.n	b5772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b57a2:	18f1      	adds	r1, r6, r3
   b57a4:	29ff      	cmp	r1, #255	; 0xff
   b57a6:	d8e4      	bhi.n	b5772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b57a8:	4620      	mov	r0, r4
   b57aa:	f7ff ff75 	bl	b5698 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b57ae:	2800      	cmp	r0, #0
   b57b0:	d0df      	beq.n	b5772 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b57b2:	1c69      	adds	r1, r5, #1
   b57b4:	b2c9      	uxtb	r1, r1
   b57b6:	4620      	mov	r0, r4
   b57b8:	f7ff ffb4 	bl	b5724 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b57bc:	4639      	mov	r1, r7
   b57be:	4620      	mov	r0, r4
   b57c0:	f7ff ffb0 	bl	b5724 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b57c4:	6861      	ldr	r1, [r4, #4]
   b57c6:	462b      	mov	r3, r5
   b57c8:	4642      	mov	r2, r8
   b57ca:	e7e6      	b.n	b579a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b57cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b57cc:	b430      	push	{r4, r5}
   b57ce:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b57d2:	b11a      	cbz	r2, b57dc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b57d4:	9502      	str	r5, [sp, #8]
}
   b57d6:	bc30      	pop	{r4, r5}
   b57d8:	f7ff bfa8 	b.w	b572c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b57dc:	6840      	ldr	r0, [r0, #4]
}
   b57de:	bc30      	pop	{r4, r5}
   b57e0:	4770      	bx	lr

000b57e2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b57e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b57e4:	2300      	movs	r3, #0
   b57e6:	e9c0 3300 	strd	r3, r3, [r0]
   b57ea:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b57ec:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b57ee:	9300      	str	r3, [sp, #0]
   b57f0:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b57f2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b57f6:	4619      	mov	r1, r3
   b57f8:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b57fc:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b57fe:	f7ff ffe5 	bl	b57cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5802:	4620      	mov	r0, r4
   b5804:	b004      	add	sp, #16
   b5806:	bd10      	pop	{r4, pc}

000b5808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5808:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b580c:	4604      	mov	r4, r0
   b580e:	460d      	mov	r5, r1
   b5810:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5812:	d914      	bls.n	b583e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5814:	4290      	cmp	r0, r2
   b5816:	d213      	bcs.n	b5840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5818:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b581c:	1a75      	subs	r5, r6, r1
   b581e:	f1a1 0708 	sub.w	r7, r1, #8
   b5822:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5824:	42b7      	cmp	r7, r6
   b5826:	d018      	beq.n	b585a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5828:	b11c      	cbz	r4, b5832 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b582a:	4631      	mov	r1, r6
   b582c:	4620      	mov	r0, r4
   b582e:	f7ff fea8 	bl	b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5832:	1d30      	adds	r0, r6, #4
   b5834:	f7ff f84c 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5838:	3e08      	subs	r6, #8
   b583a:	3c08      	subs	r4, #8
   b583c:	e7f2      	b.n	b5824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b583e:	d00c      	beq.n	b585a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5840:	42b5      	cmp	r5, r6
   b5842:	d00a      	beq.n	b585a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5844:	b11c      	cbz	r4, b584e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5846:	4629      	mov	r1, r5
   b5848:	4620      	mov	r0, r4
   b584a:	f7ff fe9a 	bl	b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b584e:	1d28      	adds	r0, r5, #4
   b5850:	f7ff f83e 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5854:	3508      	adds	r5, #8
   b5856:	3408      	adds	r4, #8
   b5858:	e7f2      	b.n	b5840 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b585c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b585c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b585e:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5860:	6846      	ldr	r6, [r0, #4]
   b5862:	4668      	mov	r0, sp
   b5864:	f7ff fe8d 	bl	b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5868:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b586c:	429f      	cmp	r7, r3
   b586e:	db12      	blt.n	b5896 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b5870:	3701      	adds	r7, #1
        if (n > 0) {
   b5872:	2f00      	cmp	r7, #0
   b5874:	dd29      	ble.n	b58ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5876:	00f8      	lsls	r0, r7, #3
   b5878:	f7fe ff0a 	bl	b4690 <malloc>
            if (!d) {
   b587c:	4605      	mov	r5, r0
   b587e:	b1f0      	cbz	r0, b58be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5880:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5884:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5888:	f7ff ffbe 	bl	b5808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b588c:	6820      	ldr	r0, [r4, #0]
   b588e:	f7fe ff07 	bl	b46a0 <free>
        data_ = d;
   b5892:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5894:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5896:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5898:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b589a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b589e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b58a2:	4631      	mov	r1, r6
   b58a4:	f106 0008 	add.w	r0, r6, #8
   b58a8:	f7ff ffae 	bl	b5808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b58ac:	b11e      	cbz	r6, b58b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b58ae:	4669      	mov	r1, sp
   b58b0:	4630      	mov	r0, r6
   b58b2:	f7ff fe66 	bl	b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b58b6:	6863      	ldr	r3, [r4, #4]
   b58b8:	3301      	adds	r3, #1
   b58ba:	6063      	str	r3, [r4, #4]
    return true;
   b58bc:	2501      	movs	r5, #1
   b58be:	a801      	add	r0, sp, #4
   b58c0:	f7ff f806 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b58c4:	4628      	mov	r0, r5
   b58c6:	b003      	add	sp, #12
   b58c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b58ca:	2500      	movs	r5, #0
   b58cc:	e7de      	b.n	b588c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b58ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b58ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b58d0:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b58d4:	4605      	mov	r5, r0
   b58d6:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b58d8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b58dc:	42a6      	cmp	r6, r4
   b58de:	d005      	beq.n	b58ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b58e0:	4639      	mov	r1, r7
   b58e2:	4620      	mov	r0, r4
   b58e4:	f7ff fd11 	bl	b530a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b58e8:	b108      	cbz	r0, b58ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b58ea:	b914      	cbnz	r4, b58f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b58ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b58ee:	3408      	adds	r4, #8
   b58f0:	e7f4      	b.n	b58dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b58f2:	1d20      	adds	r0, r4, #4
   b58f4:	f7fe ffec 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b58f8:	e9d5 3200 	ldrd	r3, r2, [r5]
   b58fc:	f104 0108 	add.w	r1, r4, #8
   b5900:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5904:	4620      	mov	r0, r4
   b5906:	f7ff ff7f 	bl	b5808 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b590a:	686b      	ldr	r3, [r5, #4]
   b590c:	3b01      	subs	r3, #1
   b590e:	606b      	str	r3, [r5, #4]
    return true;
   b5910:	e7ec      	b.n	b58ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5914 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5918:	4605      	mov	r5, r0
   b591a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b591c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b591e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5920:	f7ff fad0 	bl	b4ec4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5924:	682e      	ldr	r6, [r5, #0]
   b5926:	1ef3      	subs	r3, r6, #3
   b5928:	2b0d      	cmp	r3, #13
   b592a:	d83c      	bhi.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b592c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5930:	0057000e 	.word	0x0057000e
   b5934:	00d3003b 	.word	0x00d3003b
   b5938:	003b003b 	.word	0x003b003b
   b593c:	003b003b 	.word	0x003b003b
   b5940:	009d003b 	.word	0x009d003b
   b5944:	009d009d 	.word	0x009d009d
   b5948:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b594c:	a804      	add	r0, sp, #16
   b594e:	f7ff fca7 	bl	b52a0 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b5952:	9b04      	ldr	r3, [sp, #16]
   b5954:	89aa      	ldrh	r2, [r5, #12]
   b5956:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b5958:	6869      	ldr	r1, [r5, #4]
   b595a:	9804      	ldr	r0, [sp, #16]
   b595c:	3108      	adds	r1, #8
   b595e:	3002      	adds	r0, #2
   b5960:	f7ff faca 	bl	b4ef8 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5964:	a904      	add	r1, sp, #16
   b5966:	a806      	add	r0, sp, #24
   b5968:	f7ff fe0b 	bl	b5582 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b596c:	a906      	add	r1, sp, #24
   b596e:	f104 0018 	add.w	r0, r4, #24
   b5972:	f7ff ff73 	bl	b585c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5976:	4605      	mov	r5, r0
   b5978:	a807      	add	r0, sp, #28
   b597a:	f7fe ffa9 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b597e:	b9c5      	cbnz	r5, b59b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b5980:	2320      	movs	r3, #32
   b5982:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b5986:	4b5e      	ldr	r3, [pc, #376]	; (b5b00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b5988:	495e      	ldr	r1, [pc, #376]	; (b5b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b598a:	9300      	str	r3, [sp, #0]
   b598c:	aa06      	add	r2, sp, #24
   b598e:	462b      	mov	r3, r5
   b5990:	2001      	movs	r0, #1
   b5992:	f7fe fdf1 	bl	b4578 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5996:	9b04      	ldr	r3, [sp, #16]
   b5998:	4629      	mov	r1, r5
   b599a:	8818      	ldrh	r0, [r3, #0]
   b599c:	f7fe fd62 	bl	b4464 <hal_ble_gap_disconnect>
   b59a0:	a805      	add	r0, sp, #20
   b59a2:	f7fe ff95 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b59a6:	a803      	add	r0, sp, #12
   b59a8:	f7ff fa9a 	bl	b4ee0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b59ac:	b00e      	add	sp, #56	; 0x38
   b59ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b59b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b59b4:	b123      	cbz	r3, b59c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b59b6:	a904      	add	r1, sp, #16
   b59b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b59bc:	f7ff fe63 	bl	b5686 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b59c0:	a805      	add	r0, sp, #20
   b59c2:	f7fe ff85 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b59c6:	2120      	movs	r1, #32
   b59c8:	2300      	movs	r3, #0
   b59ca:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b59ce:	4a4e      	ldr	r2, [pc, #312]	; (b5b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b59d0:	9200      	str	r2, [sp, #0]
   b59d2:	494c      	ldr	r1, [pc, #304]	; (b5b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b59d4:	aa06      	add	r2, sp, #24
   b59d6:	2001      	movs	r0, #1
   b59d8:	f7fe fdce 	bl	b4578 <log_message>
   b59dc:	e7e3      	b.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b59de:	89a9      	ldrh	r1, [r5, #12]
   b59e0:	4620      	mov	r0, r4
   b59e2:	f7ff fbc7 	bl	b5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b59e6:	4606      	mov	r6, r0
   b59e8:	2800      	cmp	r0, #0
   b59ea:	d0dc      	beq.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b59ec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b59ee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b59f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b59f6:	8029      	strh	r1, [r5, #0]
   b59f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b59fc:	429a      	cmp	r2, r3
   b59fe:	d003      	beq.n	b5a08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b5a00:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5a04:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5a06:	e7f9      	b.n	b59fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b5a08:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5a0c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5a10:	45b8      	cmp	r8, r7
   b5a12:	d004      	beq.n	b5a1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b5a14:	1d38      	adds	r0, r7, #4
   b5a16:	f7fe ff5b 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a1a:	3708      	adds	r7, #8
   b5a1c:	e7f8      	b.n	b5a10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b5a1e:	2300      	movs	r3, #0
   b5a20:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5a22:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5a26:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5a2a:	45b8      	cmp	r8, r7
   b5a2c:	d004      	beq.n	b5a38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b5a2e:	1d38      	adds	r0, r7, #4
   b5a30:	f7fe ff4e 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5a34:	3708      	adds	r7, #8
   b5a36:	e7f8      	b.n	b5a2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b5a38:	2300      	movs	r3, #0
   b5a3a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5a3c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b5a3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5a40:	b123      	cbz	r3, b5a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b5a42:	4631      	mov	r1, r6
   b5a44:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5a48:	f7ff fe1d 	bl	b5686 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b5a4c:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5a52:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b5a54:	4631      	mov	r1, r6
   b5a56:	f104 0018 	add.w	r0, r4, #24
   b5a5a:	f7ff ff38 	bl	b58ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b5a5e:	2220      	movs	r2, #32
   b5a60:	2300      	movs	r3, #0
   b5a62:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5a66:	4a29      	ldr	r2, [pc, #164]	; (b5b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b5a68:	e7b2      	b.n	b59d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5a6a:	89a9      	ldrh	r1, [r5, #12]
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	f7ff fb81 	bl	b5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5a72:	2800      	cmp	r0, #0
   b5a74:	d097      	beq.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b5a76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5a78:	2b00      	cmp	r3, #0
   b5a7a:	d094      	beq.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b5a7c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5a7e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5a80:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5a84:	d001      	beq.n	b5a8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b5a86:	2e10      	cmp	r6, #16
   b5a88:	d117      	bne.n	b5aba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b5a8a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5a8c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5a8e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5a90:	2506      	movs	r5, #6
                        };
   b5a92:	f88d 3015 	strb.w	r3, [sp, #21]
   b5a96:	9104      	str	r1, [sp, #16]
   b5a98:	f88d 2014 	strb.w	r2, [sp, #20]
   b5a9c:	9006      	str	r0, [sp, #24]
   b5a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5aa2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5aa4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5aa8:	9508      	str	r5, [sp, #32]
   b5aaa:	e883 0003 	stmia.w	r3, {r0, r1}
   b5aae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5ab0:	a906      	add	r1, sp, #24
   b5ab2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5ab6:	4798      	blx	r3
   b5ab8:	e775      	b.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5aba:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5abc:	bf01      	itttt	eq
   b5abe:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5ac0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5ac2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5ac6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5ac8:	bf0f      	iteee	eq
   b5aca:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5ace:	461a      	movne	r2, r3
   b5ad0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5ad2:	461d      	movne	r5, r3
   b5ad4:	e7dd      	b.n	b5a92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5ad6:	89a9      	ldrh	r1, [r5, #12]
   b5ad8:	4620      	mov	r0, r4
   b5ada:	f7ff fb4b 	bl	b5174 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b5ade:	4601      	mov	r1, r0
   b5ae0:	2800      	cmp	r0, #0
   b5ae2:	f43f af60 	beq.w	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5ae6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b5ae8:	2b00      	cmp	r3, #0
   b5aea:	f43f af5c 	beq.w	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b5aee:	686b      	ldr	r3, [r5, #4]
   b5af0:	9306      	str	r3, [sp, #24]
   b5af2:	aa06      	add	r2, sp, #24
   b5af4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b5af6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5afa:	4798      	blx	r3
   b5afc:	e753      	b.n	b59a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b5afe:	bf00      	nop
   b5b00:	000b68bc 	.word	0x000b68bc
   b5b04:	000b683b 	.word	0x000b683b
   b5b08:	000b68e2 	.word	0x000b68e2
   b5b0c:	000b68ec 	.word	0x000b68ec

000b5b10 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5b10:	b538      	push	{r3, r4, r5, lr}
   b5b12:	4605      	mov	r5, r0
   b5b14:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5b16:	f7ff f806 	bl	b4b26 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b1a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5b1c:	68a2      	ldr	r2, [r4, #8]
   b5b1e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b20:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5b22:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5b24:	68e2      	ldr	r2, [r4, #12]
   b5b26:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5b28:	60e3      	str	r3, [r4, #12]
      }
   b5b2a:	bd38      	pop	{r3, r4, r5, pc}

000b5b2c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5b2c:	b570      	push	{r4, r5, r6, lr}
   b5b2e:	4604      	mov	r4, r0
   b5b30:	b08c      	sub	sp, #48	; 0x30
   b5b32:	460e      	mov	r6, r1
   b5b34:	9201      	str	r2, [sp, #4]
   b5b36:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5b38:	f7ff fafc 	bl	b5134 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5b3c:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b5b3e:	9901      	ldr	r1, [sp, #4]
   b5b40:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5b44:	f000 fb5b 	bl	b61fe <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5b48:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5b4c:	b1cd      	cbz	r5, b5b82 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b5b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5b50:	9502      	str	r5, [sp, #8]
   b5b52:	a902      	add	r1, sp, #8
   b5b54:	a804      	add	r0, sp, #16
   b5b56:	9303      	str	r3, [sp, #12]
   b5b58:	f7ff fcdc 	bl	b5514 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5b5c:	2300      	movs	r3, #0
	__x.swap(*this);
   b5b5e:	a908      	add	r1, sp, #32
   b5b60:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b5b62:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b5b64:	f7ff ffd4 	bl	b5b10 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5b68:	4631      	mov	r1, r6
   b5b6a:	a808      	add	r0, sp, #32
   b5b6c:	f7ff ffd0 	bl	b5b10 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5b70:	a808      	add	r0, sp, #32
   b5b72:	f7fe ffcf 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
   b5b76:	a804      	add	r0, sp, #16
   b5b78:	f7fe ffcc 	bl	b4b14 <_ZNSt14_Function_baseD1Ev>
    }
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	b00c      	add	sp, #48	; 0x30
   b5b80:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b5b82:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5b84:	e7ea      	b.n	b5b5c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5b88 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b8c:	b087      	sub	sp, #28
   b5b8e:	461d      	mov	r5, r3
   b5b90:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b5b94:	4680      	mov	r8, r0
   b5b96:	468b      	mov	fp, r1
   b5b98:	4692      	mov	sl, r2
   b5b9a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5b9c:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5b9e:	2200      	movs	r2, #0
   b5ba0:	2068      	movs	r0, #104	; 0x68
   b5ba2:	9102      	str	r1, [sp, #8]
   b5ba4:	9204      	str	r2, [sp, #16]
   b5ba6:	f7fe fa86 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b5baa:	1e06      	subs	r6, r0, #0
   b5bac:	f106 090c 	add.w	r9, r6, #12
   b5bb0:	d018      	beq.n	b5be4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b5bb2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5bb4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5bb6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5bba:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b5bbc:	4a15      	ldr	r2, [pc, #84]	; (b5c14 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b5bbe:	f847 2b20 	str.w	r2, [r7], #32
   b5bc2:	9b03      	ldr	r3, [sp, #12]
   b5bc4:	9100      	str	r1, [sp, #0]
   b5bc6:	465a      	mov	r2, fp
   b5bc8:	4651      	mov	r1, sl
   b5bca:	4648      	mov	r0, r9
   b5bcc:	f7ff ffae 	bl	b5b2c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b5bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bd2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5bd4:	682b      	ldr	r3, [r5, #0]
   b5bd6:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5bda:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b5bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5be0:	6823      	ldr	r3, [r4, #0]
   b5be2:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5be4:	a904      	add	r1, sp, #16
   b5be6:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5be8:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b5bec:	f7ff fd3a 	bl	b5664 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b5bf0:	a805      	add	r0, sp, #20
   b5bf2:	f7fe fe6d 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5bf6:	f8d8 3000 	ldr.w	r3, [r8]
   b5bfa:	b93b      	cbnz	r3, b5c0c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b5bfc:	4a06      	ldr	r2, [pc, #24]	; (b5c18 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b5bfe:	4907      	ldr	r1, [pc, #28]	; (b5c1c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b5c00:	200a      	movs	r0, #10
}
   b5c02:	b007      	add	sp, #28
   b5c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5c08:	f7fe bcae 	b.w	b4568 <panic_>
}
   b5c0c:	b007      	add	sp, #28
   b5c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c12:	bf00      	nop
   b5c14:	000b6954 	.word	0x000b6954
   b5c18:	000b4529 	.word	0x000b4529
   b5c1c:	000b6824 	.word	0x000b6824

000b5c20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5c20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5c24:	4604      	mov	r4, r0
   b5c26:	460d      	mov	r5, r1
   b5c28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5c2a:	d914      	bls.n	b5c56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5c2c:	4290      	cmp	r0, r2
   b5c2e:	d213      	bcs.n	b5c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5c30:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5c34:	1a75      	subs	r5, r6, r1
   b5c36:	f1a1 0708 	sub.w	r7, r1, #8
   b5c3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5c3c:	42b7      	cmp	r7, r6
   b5c3e:	d018      	beq.n	b5c72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5c40:	b11c      	cbz	r4, b5c4a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5c42:	4631      	mov	r1, r6
   b5c44:	4620      	mov	r0, r4
   b5c46:	f7ff fc92 	bl	b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c4a:	1d30      	adds	r0, r6, #4
   b5c4c:	f7fe fe40 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5c50:	3e08      	subs	r6, #8
   b5c52:	3c08      	subs	r4, #8
   b5c54:	e7f2      	b.n	b5c3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5c56:	d00c      	beq.n	b5c72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5c58:	42b5      	cmp	r5, r6
   b5c5a:	d00a      	beq.n	b5c72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5c5c:	b11c      	cbz	r4, b5c66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5c5e:	4629      	mov	r1, r5
   b5c60:	4620      	mov	r0, r4
   b5c62:	f7ff fc84 	bl	b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5c66:	1d28      	adds	r0, r5, #4
   b5c68:	f7fe fe32 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5c6c:	3508      	adds	r5, #8
   b5c6e:	3408      	adds	r4, #8
   b5c70:	e7f2      	b.n	b5c58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5c74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5c76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5c78:	4605      	mov	r5, r0
        if (n > 0) {
   b5c7a:	dd11      	ble.n	b5ca0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5c7c:	00f0      	lsls	r0, r6, #3
   b5c7e:	f7fe fd07 	bl	b4690 <malloc>
            if (!d) {
   b5c82:	4604      	mov	r4, r0
   b5c84:	b158      	cbz	r0, b5c9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5c86:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5c8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5c8e:	f7ff ffc7 	bl	b5c20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5c92:	6828      	ldr	r0, [r5, #0]
   b5c94:	f7fe fd04 	bl	b46a0 <free>
        data_ = d;
   b5c98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5c9a:	60ae      	str	r6, [r5, #8]
        return true;
   b5c9c:	2001      	movs	r0, #1
    }
   b5c9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5ca0:	2400      	movs	r4, #0
   b5ca2:	e7f6      	b.n	b5c92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5ca4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ca6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5ca8:	6845      	ldr	r5, [r0, #4]
   b5caa:	4668      	mov	r0, sp
   b5cac:	f7ff fc5f 	bl	b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cb0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5cb4:	4299      	cmp	r1, r3
   b5cb6:	da10      	bge.n	b5cda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5cb8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5cba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5cbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5cc0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5cc4:	4629      	mov	r1, r5
   b5cc6:	f105 0008 	add.w	r0, r5, #8
   b5cca:	f7ff ffa9 	bl	b5c20 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5cce:	b98d      	cbnz	r5, b5cf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5cd0:	6863      	ldr	r3, [r4, #4]
   b5cd2:	3301      	adds	r3, #1
   b5cd4:	6063      	str	r3, [r4, #4]
    return true;
   b5cd6:	2601      	movs	r6, #1
   b5cd8:	e006      	b.n	b5ce8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cda:	3101      	adds	r1, #1
   b5cdc:	4620      	mov	r0, r4
   b5cde:	f7ff ffc9 	bl	b5c74 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5ce2:	4606      	mov	r6, r0
   b5ce4:	2800      	cmp	r0, #0
   b5ce6:	d1e7      	bne.n	b5cb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5ce8:	a801      	add	r0, sp, #4
   b5cea:	f7fe fdf1 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5cee:	4630      	mov	r0, r6
   b5cf0:	b002      	add	sp, #8
   b5cf2:	bd70      	pop	{r4, r5, r6, pc}
   b5cf4:	4669      	mov	r1, sp
   b5cf6:	4628      	mov	r0, r5
   b5cf8:	f7ff fc39 	bl	b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5cfc:	e7e8      	b.n	b5cd0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5cfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5cfe:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d02:	4604      	mov	r4, r0
   b5d04:	460d      	mov	r5, r1
   b5d06:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d08:	d914      	bls.n	b5d34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5d0a:	4290      	cmp	r0, r2
   b5d0c:	d213      	bcs.n	b5d36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5d0e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5d12:	1a75      	subs	r5, r6, r1
   b5d14:	f1a1 0708 	sub.w	r7, r1, #8
   b5d18:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d1a:	42b7      	cmp	r7, r6
   b5d1c:	d018      	beq.n	b5d50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5d1e:	b11c      	cbz	r4, b5d28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5d20:	4631      	mov	r1, r6
   b5d22:	4620      	mov	r0, r4
   b5d24:	f7ff fc15 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5d28:	1d30      	adds	r0, r6, #4
   b5d2a:	f7fe fdd1 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5d2e:	3e08      	subs	r6, #8
   b5d30:	3c08      	subs	r4, #8
   b5d32:	e7f2      	b.n	b5d1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5d34:	d00c      	beq.n	b5d50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5d36:	42b5      	cmp	r5, r6
   b5d38:	d00a      	beq.n	b5d50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5d3a:	b11c      	cbz	r4, b5d44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5d3c:	4629      	mov	r1, r5
   b5d3e:	4620      	mov	r0, r4
   b5d40:	f7ff fc07 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5d44:	1d28      	adds	r0, r5, #4
   b5d46:	f7fe fdc3 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5d4a:	3508      	adds	r5, #8
   b5d4c:	3408      	adds	r4, #8
   b5d4e:	e7f2      	b.n	b5d36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5d52:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5d54:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5d56:	4605      	mov	r5, r0
        if (n > 0) {
   b5d58:	dd11      	ble.n	b5d7e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5d5a:	00f0      	lsls	r0, r6, #3
   b5d5c:	f7fe fc98 	bl	b4690 <malloc>
            if (!d) {
   b5d60:	4604      	mov	r4, r0
   b5d62:	b158      	cbz	r0, b5d7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5d64:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5d68:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5d6c:	f7ff ffc7 	bl	b5cfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5d70:	6828      	ldr	r0, [r5, #0]
   b5d72:	f7fe fc95 	bl	b46a0 <free>
        data_ = d;
   b5d76:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5d78:	60ae      	str	r6, [r5, #8]
        return true;
   b5d7a:	2001      	movs	r0, #1
    }
   b5d7c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5d7e:	2400      	movs	r4, #0
   b5d80:	e7f6      	b.n	b5d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5d82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d84:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5d86:	6845      	ldr	r5, [r0, #4]
   b5d88:	4668      	mov	r0, sp
   b5d8a:	f7ff fbe2 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5d8e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5d92:	4299      	cmp	r1, r3
   b5d94:	da10      	bge.n	b5db8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5d96:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5d98:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5d9a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5d9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5da2:	4629      	mov	r1, r5
   b5da4:	f105 0008 	add.w	r0, r5, #8
   b5da8:	f7ff ffa9 	bl	b5cfe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5dac:	b98d      	cbnz	r5, b5dd2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5dae:	6863      	ldr	r3, [r4, #4]
   b5db0:	3301      	adds	r3, #1
   b5db2:	6063      	str	r3, [r4, #4]
    return true;
   b5db4:	2601      	movs	r6, #1
   b5db6:	e006      	b.n	b5dc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5db8:	3101      	adds	r1, #1
   b5dba:	4620      	mov	r0, r4
   b5dbc:	f7ff ffc9 	bl	b5d52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5dc0:	4606      	mov	r6, r0
   b5dc2:	2800      	cmp	r0, #0
   b5dc4:	d1e7      	bne.n	b5d96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5dc6:	a801      	add	r0, sp, #4
   b5dc8:	f7fe fd82 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5dcc:	4630      	mov	r0, r6
   b5dce:	b002      	add	sp, #8
   b5dd0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b5dd2:	4669      	mov	r1, sp
   b5dd4:	4628      	mov	r0, r5
   b5dd6:	f7ff fbbc 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5dda:	e7e8      	b.n	b5dae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5ddc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5de0:	4617      	mov	r7, r2
   b5de2:	b0a1      	sub	sp, #132	; 0x84
   b5de4:	4680      	mov	r8, r0
    WiringBleLock lk;
   b5de6:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5de8:	460e      	mov	r6, r1
    WiringBleLock lk;
   b5dea:	f7ff f86b 	bl	b4ec4 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5dee:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b5df0:	7923      	ldrb	r3, [r4, #4]
   b5df2:	b953      	cbnz	r3, b5e0a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5df4:	4639      	mov	r1, r7
   b5df6:	4640      	mov	r0, r8
   b5df8:	f7ff fbab 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5dfc:	a80a      	add	r0, sp, #40	; 0x28
   b5dfe:	f7ff f86f 	bl	b4ee0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b5e02:	4640      	mov	r0, r8
   b5e04:	b021      	add	sp, #132	; 0x84
   b5e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5e0a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5e0c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b5e10:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b5e14:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b5e16:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b5e1a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b5e1e:	9b03      	ldr	r3, [sp, #12]
   b5e20:	429d      	cmp	r5, r3
   b5e22:	d021      	beq.n	b5e68 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b5e24:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b5e28:	4658      	mov	r0, fp
   b5e2a:	f109 0114 	add.w	r1, r9, #20
   b5e2e:	f7ff f8f6 	bl	b501e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b5e32:	b1b8      	cbz	r0, b5e64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b5e34:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b5e38:	4650      	mov	r0, sl
   b5e3a:	f7ff f8f0 	bl	b501e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b5e3e:	b188      	cbz	r0, b5e64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b5e40:	6823      	ldr	r3, [r4, #0]
   b5e42:	f8d9 2000 	ldr.w	r2, [r9]
   b5e46:	4053      	eors	r3, r2
   b5e48:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b5e4c:	d10a      	bne.n	b5e64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b5e4e:	2220      	movs	r2, #32
   b5e50:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b5e54:	4a5e      	ldr	r2, [pc, #376]	; (b5fd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b5e56:	9200      	str	r2, [sp, #0]
   b5e58:	aa15      	add	r2, sp, #84	; 0x54
   b5e5a:	495e      	ldr	r1, [pc, #376]	; (b5fd4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b5e5c:	2032      	movs	r0, #50	; 0x32
   b5e5e:	f7fe fb8b 	bl	b4578 <log_message>
   b5e62:	e7c7      	b.n	b5df4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b5e64:	3508      	adds	r5, #8
   b5e66:	e7da      	b.n	b5e1e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b5e68:	4650      	mov	r0, sl
   b5e6a:	f7ff f8a9 	bl	b4fc0 <_ZNK8particle7BleUuid7isValidEv>
   b5e6e:	b960      	cbnz	r0, b5e8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b5e70:	4959      	ldr	r1, [pc, #356]	; (b5fd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b5e72:	2201      	movs	r2, #1
   b5e74:	a815      	add	r0, sp, #84	; 0x54
   b5e76:	ad15      	add	r5, sp, #84	; 0x54
   b5e78:	f7ff f87a 	bl	b4f70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b5e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e7e:	46d4      	mov	ip, sl
   b5e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5e84:	682b      	ldr	r3, [r5, #0]
   b5e86:	f8cc 3000 	str.w	r3, [ip]
   b5e8a:	6833      	ldr	r3, [r6, #0]
   b5e8c:	e9d3 5300 	ldrd	r5, r3, [r3]
   b5e90:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5e94:	455d      	cmp	r5, fp
   b5e96:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5e98:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5e9a:	d06e      	beq.n	b5f7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5e9c:	f855 0b08 	ldr.w	r0, [r5], #8
   b5ea0:	f7ff f8bd 	bl	b501e <_ZNK8particle7BleUuideqERKS0_>
   b5ea4:	2800      	cmp	r0, #0
   b5ea6:	d0f5      	beq.n	b5e94 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b5ea8:	f104 0a14 	add.w	sl, r4, #20
   b5eac:	4650      	mov	r0, sl
   b5eae:	f7ff f887 	bl	b4fc0 <_ZNK8particle7BleUuid7isValidEv>
   b5eb2:	b988      	cbnz	r0, b5ed8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b5eb4:	4b49      	ldr	r3, [pc, #292]	; (b5fdc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5eb6:	4948      	ldr	r1, [pc, #288]	; (b5fd8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b5eb8:	881a      	ldrh	r2, [r3, #0]
   b5eba:	3201      	adds	r2, #1
   b5ebc:	b292      	uxth	r2, r2
   b5ebe:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5ec0:	a815      	add	r0, sp, #84	; 0x54
   b5ec2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b5ec4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5ec6:	f7ff f872 	bl	b4fae <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b5eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ecc:	46d4      	mov	ip, sl
   b5ece:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5ed2:	682b      	ldr	r3, [r5, #0]
   b5ed4:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b5ed8:	4b41      	ldr	r3, [pc, #260]	; (b5fe0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b5eda:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b5edc:	2228      	movs	r2, #40	; 0x28
   b5ede:	2100      	movs	r1, #0
   b5ee0:	a816      	add	r0, sp, #88	; 0x58
   b5ee2:	f000 fb33 	bl	b654c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b5ee6:	4651      	mov	r1, sl
   b5ee8:	a804      	add	r0, sp, #16
   b5eea:	f7ff f87b 	bl	b4fe4 <_ZN8particle7BleUuid7halUUIDEv>
   b5eee:	ab04      	add	r3, sp, #16
   b5ef0:	aa18      	add	r2, sp, #96	; 0x60
   b5ef2:	f10d 0c20 	add.w	ip, sp, #32
   b5ef6:	6818      	ldr	r0, [r3, #0]
   b5ef8:	6859      	ldr	r1, [r3, #4]
   b5efa:	4615      	mov	r5, r2
   b5efc:	c503      	stmia	r5!, {r0, r1}
   b5efe:	3308      	adds	r3, #8
   b5f00:	4563      	cmp	r3, ip
   b5f02:	462a      	mov	r2, r5
   b5f04:	d1f7      	bne.n	b5ef6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b5f06:	6818      	ldr	r0, [r3, #0]
   b5f08:	6028      	str	r0, [r5, #0]
    return value_;
   b5f0a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b5f0c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b5f10:	f8d9 3000 	ldr.w	r3, [r9]
   b5f14:	8a9b      	ldrh	r3, [r3, #20]
   b5f16:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b5f1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5f1c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b5f1e:	4b31      	ldr	r3, [pc, #196]	; (b5fe4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5f20:	2200      	movs	r2, #0
   b5f22:	1da1      	adds	r1, r4, #6
   b5f24:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b5f26:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5f2a:	f7fe facd 	bl	b44c8 <hal_ble_gatt_server_add_characteristic>
   b5f2e:	2800      	cmp	r0, #0
   b5f30:	f47f af60 	bne.w	b5df4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b5f34:	2301      	movs	r3, #1
   b5f36:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b5f38:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b5f3a:	4639      	mov	r1, r7
        return characteristics_;
   b5f3c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b5f3e:	a80d      	add	r0, sp, #52	; 0x34
   b5f40:	f7ff fb07 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5f44:	4620      	mov	r0, r4
   b5f46:	a90d      	add	r1, sp, #52	; 0x34
   b5f48:	f7ff ff1b 	bl	b5d82 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b5f4c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5f4e:	a80e      	add	r0, sp, #56	; 0x38
   b5f50:	f7fe fcbe 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f54:	2c00      	cmp	r4, #0
   b5f56:	f47f af4d 	bne.w	b5df4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b5f5a:	2320      	movs	r3, #32
   b5f5c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b5f60:	4b21      	ldr	r3, [pc, #132]	; (b5fe8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b5f62:	9300      	str	r3, [sp, #0]
   b5f64:	aa0d      	add	r2, sp, #52	; 0x34
   b5f66:	4623      	mov	r3, r4
   b5f68:	e777      	b.n	b5e5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b5f6a:	4639      	mov	r1, r7
   b5f6c:	4640      	mov	r0, r8
   b5f6e:	f7ff faf0 	bl	b5552 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5f72:	a80c      	add	r0, sp, #48	; 0x30
   b5f74:	f7fe fcac 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f78:	e740      	b.n	b5dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b5f7a:	a80b      	add	r0, sp, #44	; 0x2c
   b5f7c:	f7ff f96c 	bl	b5258 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b5f80:	4651      	mov	r1, sl
   b5f82:	a815      	add	r0, sp, #84	; 0x54
   b5f84:	f7ff f82e 	bl	b4fe4 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b5f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5f8a:	2300      	movs	r3, #0
   b5f8c:	3214      	adds	r2, #20
   b5f8e:	a915      	add	r1, sp, #84	; 0x54
   b5f90:	2001      	movs	r0, #1
   b5f92:	f7fe fa71 	bl	b4478 <hal_ble_gatt_server_add_service>
   b5f96:	2800      	cmp	r0, #0
   b5f98:	d1e7      	bne.n	b5f6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b5f9a:	6835      	ldr	r5, [r6, #0]
   b5f9c:	a90b      	add	r1, sp, #44	; 0x2c
   b5f9e:	a80d      	add	r0, sp, #52	; 0x34
   b5fa0:	f7ff fae5 	bl	b556e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b5fa4:	4628      	mov	r0, r5
   b5fa6:	a90d      	add	r1, sp, #52	; 0x34
   b5fa8:	f7ff fe7c 	bl	b5ca4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b5fac:	4605      	mov	r5, r0
   b5fae:	a80e      	add	r0, sp, #56	; 0x38
   b5fb0:	f7fe fc8e 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fb4:	2d00      	cmp	r5, #0
   b5fb6:	d0d8      	beq.n	b5f6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b5fb8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b5fba:	6853      	ldr	r3, [r2, #4]
   b5fbc:	6812      	ldr	r2, [r2, #0]
   b5fbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b5fc2:	3b01      	subs	r3, #1
   b5fc4:	a80c      	add	r0, sp, #48	; 0x30
   b5fc6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b5fca:	f7fe fc81 	bl	b48d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5fce:	e76b      	b.n	b5ea8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b5fd0:	000b68f9 	.word	0x000b68f9
   b5fd4:	000b683b 	.word	0x000b683b
   b5fd8:	000b69a0 	.word	0x000b69a0
   b5fdc:	2003e71c 	.word	0x2003e71c
   b5fe0:	002c0003 	.word	0x002c0003
   b5fe4:	000b53f1 	.word	0x000b53f1
   b5fe8:	000b6924 	.word	0x000b6924

000b5fec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b5fec:	4802      	ldr	r0, [pc, #8]	; (b5ff8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5fee:	2300      	movs	r3, #0
   b5ff0:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b5ff2:	f7fe b9ff 	b.w	b43f4 <os_mutex_recursive_create>
   b5ff6:	bf00      	nop
   b5ff8:	2003e720 	.word	0x2003e720

000b5ffc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5ffc:	4770      	bx	lr

000b5ffe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5ffe:	7441      	strb	r1, [r0, #17]
}
   b6000:	4770      	bx	lr

000b6002 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6002:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6004:	7c00      	ldrb	r0, [r0, #16]
   b6006:	f7fe f9dd 	bl	b43c4 <hal_usart_available_data_for_write>
}
   b600a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b600e:	bd08      	pop	{r3, pc}

000b6010 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6010:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6012:	7c00      	ldrb	r0, [r0, #16]
   b6014:	f7fe f9b6 	bl	b4384 <hal_usart_available>
}
   b6018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b601c:	bd08      	pop	{r3, pc}

000b601e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b601e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6020:	7c00      	ldrb	r0, [r0, #16]
   b6022:	f7fe f9bf 	bl	b43a4 <hal_usart_peek>
}
   b6026:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b602a:	bd08      	pop	{r3, pc}

000b602c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b602c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b602e:	7c00      	ldrb	r0, [r0, #16]
   b6030:	f7fe f9b0 	bl	b4394 <hal_usart_read>
}
   b6034:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6038:	bd08      	pop	{r3, pc}

000b603a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b603a:	7c00      	ldrb	r0, [r0, #16]
   b603c:	f7fe b9ba 	b.w	b43b4 <hal_usart_flush>

000b6040 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6040:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6042:	7c45      	ldrb	r5, [r0, #17]
{
   b6044:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6046:	b12d      	cbz	r5, b6054 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6048:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b604a:	b003      	add	sp, #12
   b604c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6050:	f7fe b990 	b.w	b4374 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6054:	7c00      	ldrb	r0, [r0, #16]
   b6056:	9101      	str	r1, [sp, #4]
   b6058:	f7fe f9b4 	bl	b43c4 <hal_usart_available_data_for_write>
   b605c:	2800      	cmp	r0, #0
   b605e:	9901      	ldr	r1, [sp, #4]
   b6060:	dcf2      	bgt.n	b6048 <_ZN11USARTSerial5writeEh+0x8>
}
   b6062:	4628      	mov	r0, r5
   b6064:	b003      	add	sp, #12
   b6066:	bd30      	pop	{r4, r5, pc}

000b6068 <_ZN11USARTSerialD0Ev>:
   b6068:	b510      	push	{r4, lr}
   b606a:	2114      	movs	r1, #20
   b606c:	4604      	mov	r4, r0
   b606e:	f7fe f826 	bl	b40be <_ZdlPvj>
   b6072:	4620      	mov	r0, r4
   b6074:	bd10      	pop	{r4, pc}
	...

000b6078 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6078:	b510      	push	{r4, lr}
   b607a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b607e:	4604      	mov	r4, r0
   b6080:	4608      	mov	r0, r1
   b6082:	4611      	mov	r1, r2
   b6084:	2200      	movs	r2, #0
   b6086:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b608a:	4b04      	ldr	r3, [pc, #16]	; (b609c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b608c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b608e:	2301      	movs	r3, #1
  _serial = serial;
   b6090:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6092:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6094:	f7fe f99e 	bl	b43d4 <hal_usart_init_ex>
}
   b6098:	4620      	mov	r0, r4
   b609a:	bd10      	pop	{r4, pc}
   b609c:	000b69c8 	.word	0x000b69c8

000b60a0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b60a0:	4b05      	ldr	r3, [pc, #20]	; (b60b8 <_GLOBAL__sub_I_System+0x18>)
   b60a2:	2202      	movs	r2, #2
   b60a4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b60a6:	4b05      	ldr	r3, [pc, #20]	; (b60bc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b60a8:	4a05      	ldr	r2, [pc, #20]	; (b60c0 <_GLOBAL__sub_I_System+0x20>)
   b60aa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b60ac:	2000      	movs	r0, #0
   b60ae:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b60b2:	f7fe bad1 	b.w	b4658 <set_system_mode>
   b60b6:	bf00      	nop
   b60b8:	2003e734 	.word	0x2003e734
   b60bc:	2003e728 	.word	0x2003e728
   b60c0:	ffff0000 	.word	0xffff0000

000b60c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b60c4:	2200      	movs	r2, #0
   b60c6:	6840      	ldr	r0, [r0, #4]
   b60c8:	4611      	mov	r1, r2
   b60ca:	f7fe ba9d 	b.w	b4608 <network_listening>

000b60ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b60ce:	2200      	movs	r2, #0
   b60d0:	6840      	ldr	r0, [r0, #4]
   b60d2:	4611      	mov	r1, r2
   b60d4:	f7fe baa8 	b.w	b4628 <network_get_listen_timeout>

000b60d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b60d8:	6840      	ldr	r0, [r0, #4]
   b60da:	2200      	movs	r2, #0
   b60dc:	f7fe ba9c 	b.w	b4618 <network_set_listen_timeout>

000b60e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b60e0:	6840      	ldr	r0, [r0, #4]
   b60e2:	2200      	movs	r2, #0
   b60e4:	f081 0101 	eor.w	r1, r1, #1
   b60e8:	f7fe ba86 	b.w	b45f8 <network_listen>

000b60ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b60ec:	2300      	movs	r3, #0
   b60ee:	6840      	ldr	r0, [r0, #4]
   b60f0:	461a      	mov	r2, r3
   b60f2:	4619      	mov	r1, r3
   b60f4:	f7fe ba78 	b.w	b45e8 <network_off>

000b60f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b60f8:	2300      	movs	r3, #0
   b60fa:	6840      	ldr	r0, [r0, #4]
   b60fc:	461a      	mov	r2, r3
   b60fe:	4619      	mov	r1, r3
   b6100:	f7fe ba6a 	b.w	b45d8 <network_on>

000b6104 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6104:	2200      	movs	r2, #0
   b6106:	6840      	ldr	r0, [r0, #4]
   b6108:	4611      	mov	r1, r2
   b610a:	f7fe ba5d 	b.w	b45c8 <network_ready>

000b610e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b610e:	2200      	movs	r2, #0
   b6110:	6840      	ldr	r0, [r0, #4]
   b6112:	4611      	mov	r1, r2
   b6114:	f7fe ba48 	b.w	b45a8 <network_connecting>

000b6118 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6118:	6840      	ldr	r0, [r0, #4]
   b611a:	2200      	movs	r2, #0
   b611c:	2102      	movs	r1, #2
   b611e:	f7fe ba4b 	b.w	b45b8 <network_disconnect>

000b6122 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6122:	2300      	movs	r3, #0
   b6124:	6840      	ldr	r0, [r0, #4]
   b6126:	461a      	mov	r2, r3
   b6128:	f7fe ba36 	b.w	b4598 <network_connect>

000b612c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b612c:	4b02      	ldr	r3, [pc, #8]	; (b6138 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b612e:	2203      	movs	r2, #3
   b6130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6132:	4a02      	ldr	r2, [pc, #8]	; (b613c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6134:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6136:	4770      	bx	lr
   b6138:	2003e738 	.word	0x2003e738
   b613c:	000b69f8 	.word	0x000b69f8

000b6140 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6140:	b510      	push	{r4, lr}
   b6142:	4604      	mov	r4, r0
{
	free(buffer);
   b6144:	6800      	ldr	r0, [r0, #0]
   b6146:	f7fe faab 	bl	b46a0 <free>
}
   b614a:	4620      	mov	r0, r4
   b614c:	bd10      	pop	{r4, pc}

000b614e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b614e:	b510      	push	{r4, lr}
   b6150:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6152:	6800      	ldr	r0, [r0, #0]
   b6154:	b108      	cbz	r0, b615a <_ZN6String10invalidateEv+0xc>
   b6156:	f7fe faa3 	bl	b46a0 <free>
	buffer = NULL;
   b615a:	2300      	movs	r3, #0
	capacity = len = 0;
   b615c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6160:	6023      	str	r3, [r4, #0]
}
   b6162:	bd10      	pop	{r4, pc}

000b6164 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6164:	b538      	push	{r3, r4, r5, lr}
   b6166:	4604      	mov	r4, r0
   b6168:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b616a:	6800      	ldr	r0, [r0, #0]
   b616c:	3101      	adds	r1, #1
   b616e:	f7fe fa9f 	bl	b46b0 <realloc>
	if (newbuffer) {
   b6172:	b110      	cbz	r0, b617a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6174:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6178:	2001      	movs	r0, #1
	}
	return 0;
}
   b617a:	bd38      	pop	{r3, r4, r5, pc}

000b617c <_ZN6String7reserveEj>:
{
   b617c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b617e:	6803      	ldr	r3, [r0, #0]
{
   b6180:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6182:	b123      	cbz	r3, b618e <_ZN6String7reserveEj+0x12>
   b6184:	6843      	ldr	r3, [r0, #4]
   b6186:	428b      	cmp	r3, r1
   b6188:	d301      	bcc.n	b618e <_ZN6String7reserveEj+0x12>
   b618a:	2001      	movs	r0, #1
}
   b618c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b618e:	4620      	mov	r0, r4
   b6190:	f7ff ffe8 	bl	b6164 <_ZN6String12changeBufferEj>
   b6194:	2800      	cmp	r0, #0
   b6196:	d0f9      	beq.n	b618c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6198:	68a3      	ldr	r3, [r4, #8]
   b619a:	2b00      	cmp	r3, #0
   b619c:	d1f5      	bne.n	b618a <_ZN6String7reserveEj+0xe>
   b619e:	6822      	ldr	r2, [r4, #0]
   b61a0:	7013      	strb	r3, [r2, #0]
   b61a2:	e7f2      	b.n	b618a <_ZN6String7reserveEj+0xe>

000b61a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b61a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b61a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b61a8:	4611      	mov	r1, r2
   b61aa:	9201      	str	r2, [sp, #4]
{
   b61ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b61ae:	f7ff ffe5 	bl	b617c <_ZN6String7reserveEj>
   b61b2:	9a01      	ldr	r2, [sp, #4]
   b61b4:	b928      	cbnz	r0, b61c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b61b6:	4620      	mov	r0, r4
   b61b8:	f7ff ffc9 	bl	b614e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b61bc:	4620      	mov	r0, r4
   b61be:	b003      	add	sp, #12
   b61c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b61c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b61c4:	4629      	mov	r1, r5
   b61c6:	6820      	ldr	r0, [r4, #0]
   b61c8:	f000 f998 	bl	b64fc <memcpy>
	buffer[len] = 0;
   b61cc:	6822      	ldr	r2, [r4, #0]
   b61ce:	68a3      	ldr	r3, [r4, #8]
   b61d0:	2100      	movs	r1, #0
   b61d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b61d4:	e7f2      	b.n	b61bc <_ZN6String4copyEPKcj+0x18>

000b61d6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b61d6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b61d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b61da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b61de:	4604      	mov	r4, r0
	len = 0;
   b61e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b61e4:	b141      	cbz	r1, b61f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b61e6:	4608      	mov	r0, r1
   b61e8:	9101      	str	r1, [sp, #4]
   b61ea:	f7fd ff21 	bl	b4030 <strlen>
   b61ee:	9901      	ldr	r1, [sp, #4]
   b61f0:	4602      	mov	r2, r0
   b61f2:	4620      	mov	r0, r4
   b61f4:	f7ff ffd6 	bl	b61a4 <_ZN6String4copyEPKcj>
}
   b61f8:	4620      	mov	r0, r4
   b61fa:	b002      	add	sp, #8
   b61fc:	bd10      	pop	{r4, pc}

000b61fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b61fe:	b513      	push	{r0, r1, r4, lr}
   b6200:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6202:	b159      	cbz	r1, b621c <_ZN6StringaSEPKc+0x1e>
   b6204:	4608      	mov	r0, r1
   b6206:	9101      	str	r1, [sp, #4]
   b6208:	f7fd ff12 	bl	b4030 <strlen>
   b620c:	9901      	ldr	r1, [sp, #4]
   b620e:	4602      	mov	r2, r0
   b6210:	4620      	mov	r0, r4
   b6212:	f7ff ffc7 	bl	b61a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6216:	4620      	mov	r0, r4
   b6218:	b002      	add	sp, #8
   b621a:	bd10      	pop	{r4, pc}
	else invalidate();
   b621c:	f7ff ff97 	bl	b614e <_ZN6String10invalidateEv>
   b6220:	e7f9      	b.n	b6216 <_ZN6StringaSEPKc+0x18>

000b6222 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6222:	4770      	bx	lr

000b6224 <_Z20acquireSerial1Bufferv>:
{
   b6224:	b538      	push	{r3, r4, r5, lr}
   b6226:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6228:	2514      	movs	r5, #20
   b622a:	462a      	mov	r2, r5
   b622c:	2100      	movs	r1, #0
   b622e:	f000 f98d 	bl	b654c <memset>
   b6232:	8025      	strh	r5, [r4, #0]
   b6234:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6236:	4907      	ldr	r1, [pc, #28]	; (b6254 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6238:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b623a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b623c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b623e:	f000 f82f 	bl	b62a0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6242:	4904      	ldr	r1, [pc, #16]	; (b6254 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6244:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6246:	4628      	mov	r0, r5
   b6248:	f000 f82a 	bl	b62a0 <_ZnajRKSt9nothrow_t>
    };
   b624c:	60e0      	str	r0, [r4, #12]
}
   b624e:	4620      	mov	r0, r4
   b6250:	bd38      	pop	{r3, r4, r5, pc}
   b6252:	bf00      	nop
   b6254:	000b6a2c 	.word	0x000b6a2c

000b6258 <_Z22__fetch_global_Serial1v>:
{
   b6258:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b625a:	4d0e      	ldr	r5, [pc, #56]	; (b6294 <_Z22__fetch_global_Serial1v+0x3c>)
   b625c:	7829      	ldrb	r1, [r5, #0]
   b625e:	f3bf 8f5b 	dmb	ish
   b6262:	f011 0401 	ands.w	r4, r1, #1
{
   b6266:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6268:	d111      	bne.n	b628e <_Z22__fetch_global_Serial1v+0x36>
   b626a:	4628      	mov	r0, r5
   b626c:	f7fd ff29 	bl	b40c2 <__cxa_guard_acquire>
   b6270:	b168      	cbz	r0, b628e <_Z22__fetch_global_Serial1v+0x36>
   b6272:	a801      	add	r0, sp, #4
   b6274:	f7ff ffd6 	bl	b6224 <_Z20acquireSerial1Bufferv>
   b6278:	aa01      	add	r2, sp, #4
   b627a:	4621      	mov	r1, r4
   b627c:	4806      	ldr	r0, [pc, #24]	; (b6298 <_Z22__fetch_global_Serial1v+0x40>)
   b627e:	f7ff fefb 	bl	b6078 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6282:	4628      	mov	r0, r5
   b6284:	f7fd ff22 	bl	b40cc <__cxa_guard_release>
   b6288:	4804      	ldr	r0, [pc, #16]	; (b629c <_Z22__fetch_global_Serial1v+0x44>)
   b628a:	f000 f921 	bl	b64d0 <atexit>
    return serial1;
}
   b628e:	4802      	ldr	r0, [pc, #8]	; (b6298 <_Z22__fetch_global_Serial1v+0x40>)
   b6290:	b007      	add	sp, #28
   b6292:	bd30      	pop	{r4, r5, pc}
   b6294:	2003e744 	.word	0x2003e744
   b6298:	2003e748 	.word	0x2003e748
   b629c:	000b6223 	.word	0x000b6223

000b62a0 <_ZnajRKSt9nothrow_t>:
   b62a0:	f7fd bf0b 	b.w	b40ba <_Znaj>

000b62a4 <_ZSt25__throw_bad_function_callv>:
   b62a4:	b508      	push	{r3, lr}
   b62a6:	f7fe fa0b 	bl	b46c0 <abort>
	...

000b62ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b62ac:	4901      	ldr	r1, [pc, #4]	; (b62b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b62ae:	f000 b8f9 	b.w	b64a4 <_ZNKSt9type_infoeqERKS_>
   b62b2:	bf00      	nop
   b62b4:	000b6a48 	.word	0x000b6a48

000b62b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b62b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b62ba:	2400      	movs	r4, #0
   b62bc:	2310      	movs	r3, #16
   b62be:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b62c2:	6803      	ldr	r3, [r0, #0]
   b62c4:	4615      	mov	r5, r2
   b62c6:	699e      	ldr	r6, [r3, #24]
   b62c8:	6812      	ldr	r2, [r2, #0]
   b62ca:	466b      	mov	r3, sp
   b62cc:	e9cd 4400 	strd	r4, r4, [sp]
   b62d0:	47b0      	blx	r6
   b62d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b62d6:	f003 0306 	and.w	r3, r3, #6
   b62da:	2b06      	cmp	r3, #6
   b62dc:	bf03      	ittte	eq
   b62de:	9b00      	ldreq	r3, [sp, #0]
   b62e0:	602b      	streq	r3, [r5, #0]
   b62e2:	2001      	moveq	r0, #1
   b62e4:	4620      	movne	r0, r4
   b62e6:	b004      	add	sp, #16
   b62e8:	bd70      	pop	{r4, r5, r6, pc}

000b62ea <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b62ea:	9800      	ldr	r0, [sp, #0]
   b62ec:	4290      	cmp	r0, r2
   b62ee:	bf14      	ite	ne
   b62f0:	2001      	movne	r0, #1
   b62f2:	2006      	moveq	r0, #6
   b62f4:	4770      	bx	lr
	...

000b62f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b62f8:	b510      	push	{r4, lr}
   b62fa:	4b03      	ldr	r3, [pc, #12]	; (b6308 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b62fc:	6003      	str	r3, [r0, #0]
   b62fe:	4604      	mov	r4, r0
   b6300:	f000 f8cd 	bl	b649e <_ZNSt9type_infoD1Ev>
   b6304:	4620      	mov	r0, r4
   b6306:	bd10      	pop	{r4, pc}
   b6308:	000b6a88 	.word	0x000b6a88

000b630c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b630c:	b510      	push	{r4, lr}
   b630e:	4604      	mov	r4, r0
   b6310:	f7ff fff2 	bl	b62f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6314:	4620      	mov	r0, r4
   b6316:	2108      	movs	r1, #8
   b6318:	f7fd fed1 	bl	b40be <_ZdlPvj>
   b631c:	4620      	mov	r0, r4
   b631e:	bd10      	pop	{r4, pc}

000b6320 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6324:	461f      	mov	r7, r3
   b6326:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b632a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b632e:	4598      	cmp	r8, r3
   b6330:	4606      	mov	r6, r0
   b6332:	4615      	mov	r5, r2
   b6334:	d107      	bne.n	b6346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6336:	9907      	ldr	r1, [sp, #28]
   b6338:	f000 f8b4 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b633c:	b118      	cbz	r0, b6346 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b633e:	7165      	strb	r5, [r4, #5]
   b6340:	2000      	movs	r0, #0
   b6342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6346:	4639      	mov	r1, r7
   b6348:	4630      	mov	r0, r6
   b634a:	f000 f8ab 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b634e:	2800      	cmp	r0, #0
   b6350:	d0f6      	beq.n	b6340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6352:	2301      	movs	r3, #1
   b6354:	f8c4 8000 	str.w	r8, [r4]
   b6358:	7125      	strb	r5, [r4, #4]
   b635a:	71a3      	strb	r3, [r4, #6]
   b635c:	e7f0      	b.n	b6340 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b635e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b635e:	b538      	push	{r3, r4, r5, lr}
   b6360:	4615      	mov	r5, r2
   b6362:	461c      	mov	r4, r3
   b6364:	f000 f89e 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b6368:	b120      	cbz	r0, b6374 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b636a:	2308      	movs	r3, #8
   b636c:	60e3      	str	r3, [r4, #12]
   b636e:	2306      	movs	r3, #6
   b6370:	6025      	str	r5, [r4, #0]
   b6372:	7123      	strb	r3, [r4, #4]
   b6374:	bd38      	pop	{r3, r4, r5, pc}

000b6376 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6376:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6378:	4605      	mov	r5, r0
   b637a:	460c      	mov	r4, r1
   b637c:	9201      	str	r2, [sp, #4]
   b637e:	461e      	mov	r6, r3
   b6380:	f000 f890 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b6384:	b950      	cbnz	r0, b639c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6386:	2e03      	cmp	r6, #3
   b6388:	d808      	bhi.n	b639c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b638a:	6823      	ldr	r3, [r4, #0]
   b638c:	9a01      	ldr	r2, [sp, #4]
   b638e:	695b      	ldr	r3, [r3, #20]
   b6390:	4629      	mov	r1, r5
   b6392:	4620      	mov	r0, r4
   b6394:	b002      	add	sp, #8
   b6396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b639a:	4718      	bx	r3
   b639c:	b002      	add	sp, #8
   b639e:	bd70      	pop	{r4, r5, r6, pc}

000b63a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b63a0:	b510      	push	{r4, lr}
   b63a2:	4b03      	ldr	r3, [pc, #12]	; (b63b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b63a4:	6003      	str	r3, [r0, #0]
   b63a6:	4604      	mov	r4, r0
   b63a8:	f7ff ffa6 	bl	b62f8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b63ac:	4620      	mov	r0, r4
   b63ae:	bd10      	pop	{r4, pc}
   b63b0:	000b6ae8 	.word	0x000b6ae8

000b63b4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b63b4:	b510      	push	{r4, lr}
   b63b6:	4604      	mov	r4, r0
   b63b8:	f7ff fff2 	bl	b63a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b63bc:	4620      	mov	r0, r4
   b63be:	210c      	movs	r1, #12
   b63c0:	f7fd fe7d 	bl	b40be <_ZdlPvj>
   b63c4:	4620      	mov	r0, r4
   b63c6:	bd10      	pop	{r4, pc}

000b63c8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b63c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b63ca:	9f08      	ldr	r7, [sp, #32]
   b63cc:	4297      	cmp	r7, r2
   b63ce:	4605      	mov	r5, r0
   b63d0:	460e      	mov	r6, r1
   b63d2:	4614      	mov	r4, r2
   b63d4:	d00a      	beq.n	b63ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b63d6:	68a8      	ldr	r0, [r5, #8]
   b63d8:	6802      	ldr	r2, [r0, #0]
   b63da:	9708      	str	r7, [sp, #32]
   b63dc:	6a15      	ldr	r5, [r2, #32]
   b63de:	4631      	mov	r1, r6
   b63e0:	4622      	mov	r2, r4
   b63e2:	46ac      	mov	ip, r5
   b63e4:	b003      	add	sp, #12
   b63e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b63ea:	4760      	bx	ip
   b63ec:	4619      	mov	r1, r3
   b63ee:	9301      	str	r3, [sp, #4]
   b63f0:	f000 f858 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b63f4:	9b01      	ldr	r3, [sp, #4]
   b63f6:	2800      	cmp	r0, #0
   b63f8:	d0ed      	beq.n	b63d6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b63fa:	2006      	movs	r0, #6
   b63fc:	b003      	add	sp, #12
   b63fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6400:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6404:	460d      	mov	r5, r1
   b6406:	4619      	mov	r1, r3
   b6408:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b640c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6410:	4681      	mov	r9, r0
   b6412:	4617      	mov	r7, r2
   b6414:	4698      	mov	r8, r3
   b6416:	f000 f845 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b641a:	b190      	cbz	r0, b6442 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b641c:	2d00      	cmp	r5, #0
   b641e:	6034      	str	r4, [r6, #0]
   b6420:	7137      	strb	r7, [r6, #4]
   b6422:	db09      	blt.n	b6438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6424:	1961      	adds	r1, r4, r5
   b6426:	458a      	cmp	sl, r1
   b6428:	bf0c      	ite	eq
   b642a:	2106      	moveq	r1, #6
   b642c:	2101      	movne	r1, #1
   b642e:	71b1      	strb	r1, [r6, #6]
   b6430:	2000      	movs	r0, #0
   b6432:	b001      	add	sp, #4
   b6434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6438:	3502      	adds	r5, #2
   b643a:	d1f9      	bne.n	b6430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b643c:	2301      	movs	r3, #1
   b643e:	71b3      	strb	r3, [r6, #6]
   b6440:	e7f6      	b.n	b6430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6442:	4554      	cmp	r4, sl
   b6444:	d106      	bne.n	b6454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6446:	4659      	mov	r1, fp
   b6448:	4648      	mov	r0, r9
   b644a:	f000 f82b 	bl	b64a4 <_ZNKSt9type_infoeqERKS_>
   b644e:	b108      	cbz	r0, b6454 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6450:	7177      	strb	r7, [r6, #5]
   b6452:	e7ed      	b.n	b6430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6454:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6458:	6803      	ldr	r3, [r0, #0]
   b645a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b645e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6462:	69dc      	ldr	r4, [r3, #28]
   b6464:	463a      	mov	r2, r7
   b6466:	4643      	mov	r3, r8
   b6468:	4629      	mov	r1, r5
   b646a:	46a4      	mov	ip, r4
   b646c:	b001      	add	sp, #4
   b646e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6472:	4760      	bx	ip

000b6474 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6478:	4607      	mov	r7, r0
   b647a:	460c      	mov	r4, r1
   b647c:	4615      	mov	r5, r2
   b647e:	461e      	mov	r6, r3
   b6480:	f7ff ff6d 	bl	b635e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6484:	b948      	cbnz	r0, b649a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6486:	68b8      	ldr	r0, [r7, #8]
   b6488:	6803      	ldr	r3, [r0, #0]
   b648a:	699f      	ldr	r7, [r3, #24]
   b648c:	462a      	mov	r2, r5
   b648e:	4633      	mov	r3, r6
   b6490:	4621      	mov	r1, r4
   b6492:	46bc      	mov	ip, r7
   b6494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6498:	4760      	bx	ip
   b649a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b649e <_ZNSt9type_infoD1Ev>:
   b649e:	4770      	bx	lr

000b64a0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b64a0:	2000      	movs	r0, #0
   b64a2:	4770      	bx	lr

000b64a4 <_ZNKSt9type_infoeqERKS_>:
   b64a4:	4281      	cmp	r1, r0
   b64a6:	b508      	push	{r3, lr}
   b64a8:	d00e      	beq.n	b64c8 <_ZNKSt9type_infoeqERKS_+0x24>
   b64aa:	6840      	ldr	r0, [r0, #4]
   b64ac:	7803      	ldrb	r3, [r0, #0]
   b64ae:	2b2a      	cmp	r3, #42	; 0x2a
   b64b0:	d00c      	beq.n	b64cc <_ZNKSt9type_infoeqERKS_+0x28>
   b64b2:	6849      	ldr	r1, [r1, #4]
   b64b4:	780b      	ldrb	r3, [r1, #0]
   b64b6:	2b2a      	cmp	r3, #42	; 0x2a
   b64b8:	bf08      	it	eq
   b64ba:	3101      	addeq	r1, #1
   b64bc:	f7fd fdae 	bl	b401c <strcmp>
   b64c0:	fab0 f080 	clz	r0, r0
   b64c4:	0940      	lsrs	r0, r0, #5
   b64c6:	bd08      	pop	{r3, pc}
   b64c8:	2001      	movs	r0, #1
   b64ca:	e7fc      	b.n	b64c6 <_ZNKSt9type_infoeqERKS_+0x22>
   b64cc:	2000      	movs	r0, #0
   b64ce:	e7fa      	b.n	b64c6 <_ZNKSt9type_infoeqERKS_+0x22>

000b64d0 <atexit>:
   b64d0:	2300      	movs	r3, #0
   b64d2:	4601      	mov	r1, r0
   b64d4:	461a      	mov	r2, r3
   b64d6:	4618      	mov	r0, r3
   b64d8:	f000 b87a 	b.w	b65d0 <__register_exitproc>

000b64dc <memcmp>:
   b64dc:	b510      	push	{r4, lr}
   b64de:	3901      	subs	r1, #1
   b64e0:	4402      	add	r2, r0
   b64e2:	4290      	cmp	r0, r2
   b64e4:	d101      	bne.n	b64ea <memcmp+0xe>
   b64e6:	2000      	movs	r0, #0
   b64e8:	e005      	b.n	b64f6 <memcmp+0x1a>
   b64ea:	7803      	ldrb	r3, [r0, #0]
   b64ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b64f0:	42a3      	cmp	r3, r4
   b64f2:	d001      	beq.n	b64f8 <memcmp+0x1c>
   b64f4:	1b18      	subs	r0, r3, r4
   b64f6:	bd10      	pop	{r4, pc}
   b64f8:	3001      	adds	r0, #1
   b64fa:	e7f2      	b.n	b64e2 <memcmp+0x6>

000b64fc <memcpy>:
   b64fc:	440a      	add	r2, r1
   b64fe:	4291      	cmp	r1, r2
   b6500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6504:	d100      	bne.n	b6508 <memcpy+0xc>
   b6506:	4770      	bx	lr
   b6508:	b510      	push	{r4, lr}
   b650a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b650e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6512:	4291      	cmp	r1, r2
   b6514:	d1f9      	bne.n	b650a <memcpy+0xe>
   b6516:	bd10      	pop	{r4, pc}

000b6518 <memmove>:
   b6518:	4288      	cmp	r0, r1
   b651a:	b510      	push	{r4, lr}
   b651c:	eb01 0402 	add.w	r4, r1, r2
   b6520:	d902      	bls.n	b6528 <memmove+0x10>
   b6522:	4284      	cmp	r4, r0
   b6524:	4623      	mov	r3, r4
   b6526:	d807      	bhi.n	b6538 <memmove+0x20>
   b6528:	1e43      	subs	r3, r0, #1
   b652a:	42a1      	cmp	r1, r4
   b652c:	d008      	beq.n	b6540 <memmove+0x28>
   b652e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6532:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6536:	e7f8      	b.n	b652a <memmove+0x12>
   b6538:	4402      	add	r2, r0
   b653a:	4601      	mov	r1, r0
   b653c:	428a      	cmp	r2, r1
   b653e:	d100      	bne.n	b6542 <memmove+0x2a>
   b6540:	bd10      	pop	{r4, pc}
   b6542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6546:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b654a:	e7f7      	b.n	b653c <memmove+0x24>

000b654c <memset>:
   b654c:	4402      	add	r2, r0
   b654e:	4603      	mov	r3, r0
   b6550:	4293      	cmp	r3, r2
   b6552:	d100      	bne.n	b6556 <memset+0xa>
   b6554:	4770      	bx	lr
   b6556:	f803 1b01 	strb.w	r1, [r3], #1
   b655a:	e7f9      	b.n	b6550 <memset+0x4>

000b655c <srand>:
   b655c:	b538      	push	{r3, r4, r5, lr}
   b655e:	4b10      	ldr	r3, [pc, #64]	; (b65a0 <srand+0x44>)
   b6560:	681d      	ldr	r5, [r3, #0]
   b6562:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6564:	4604      	mov	r4, r0
   b6566:	b9b3      	cbnz	r3, b6596 <srand+0x3a>
   b6568:	2018      	movs	r0, #24
   b656a:	f7fe f891 	bl	b4690 <malloc>
   b656e:	4602      	mov	r2, r0
   b6570:	63a8      	str	r0, [r5, #56]	; 0x38
   b6572:	b920      	cbnz	r0, b657e <srand+0x22>
   b6574:	4b0b      	ldr	r3, [pc, #44]	; (b65a4 <srand+0x48>)
   b6576:	480c      	ldr	r0, [pc, #48]	; (b65a8 <srand+0x4c>)
   b6578:	2142      	movs	r1, #66	; 0x42
   b657a:	f7fe f8a9 	bl	b46d0 <__assert_func>
   b657e:	490b      	ldr	r1, [pc, #44]	; (b65ac <srand+0x50>)
   b6580:	4b0b      	ldr	r3, [pc, #44]	; (b65b0 <srand+0x54>)
   b6582:	e9c0 1300 	strd	r1, r3, [r0]
   b6586:	4b0b      	ldr	r3, [pc, #44]	; (b65b4 <srand+0x58>)
   b6588:	6083      	str	r3, [r0, #8]
   b658a:	230b      	movs	r3, #11
   b658c:	8183      	strh	r3, [r0, #12]
   b658e:	2100      	movs	r1, #0
   b6590:	2001      	movs	r0, #1
   b6592:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6596:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6598:	2200      	movs	r2, #0
   b659a:	611c      	str	r4, [r3, #16]
   b659c:	615a      	str	r2, [r3, #20]
   b659e:	bd38      	pop	{r3, r4, r5, pc}
   b65a0:	2003e61c 	.word	0x2003e61c
   b65a4:	000b6b21 	.word	0x000b6b21
   b65a8:	000b6b38 	.word	0x000b6b38
   b65ac:	abcd330e 	.word	0xabcd330e
   b65b0:	e66d1234 	.word	0xe66d1234
   b65b4:	0005deec 	.word	0x0005deec

000b65b8 <strnlen>:
   b65b8:	b510      	push	{r4, lr}
   b65ba:	4602      	mov	r2, r0
   b65bc:	4401      	add	r1, r0
   b65be:	428a      	cmp	r2, r1
   b65c0:	4613      	mov	r3, r2
   b65c2:	d003      	beq.n	b65cc <strnlen+0x14>
   b65c4:	781c      	ldrb	r4, [r3, #0]
   b65c6:	3201      	adds	r2, #1
   b65c8:	2c00      	cmp	r4, #0
   b65ca:	d1f8      	bne.n	b65be <strnlen+0x6>
   b65cc:	1a18      	subs	r0, r3, r0
   b65ce:	bd10      	pop	{r4, pc}

000b65d0 <__register_exitproc>:
   b65d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b65d4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6690 <__register_exitproc+0xc0>
   b65d8:	4606      	mov	r6, r0
   b65da:	f8d8 0000 	ldr.w	r0, [r8]
   b65de:	461f      	mov	r7, r3
   b65e0:	460d      	mov	r5, r1
   b65e2:	4691      	mov	r9, r2
   b65e4:	f000 f856 	bl	b6694 <__retarget_lock_acquire_recursive>
   b65e8:	4b25      	ldr	r3, [pc, #148]	; (b6680 <__register_exitproc+0xb0>)
   b65ea:	681c      	ldr	r4, [r3, #0]
   b65ec:	b934      	cbnz	r4, b65fc <__register_exitproc+0x2c>
   b65ee:	4c25      	ldr	r4, [pc, #148]	; (b6684 <__register_exitproc+0xb4>)
   b65f0:	601c      	str	r4, [r3, #0]
   b65f2:	4b25      	ldr	r3, [pc, #148]	; (b6688 <__register_exitproc+0xb8>)
   b65f4:	b113      	cbz	r3, b65fc <__register_exitproc+0x2c>
   b65f6:	681b      	ldr	r3, [r3, #0]
   b65f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b65fc:	6863      	ldr	r3, [r4, #4]
   b65fe:	2b1f      	cmp	r3, #31
   b6600:	dd07      	ble.n	b6612 <__register_exitproc+0x42>
   b6602:	f8d8 0000 	ldr.w	r0, [r8]
   b6606:	f000 f847 	bl	b6698 <__retarget_lock_release_recursive>
   b660a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b660e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6612:	b34e      	cbz	r6, b6668 <__register_exitproc+0x98>
   b6614:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6618:	b988      	cbnz	r0, b663e <__register_exitproc+0x6e>
   b661a:	4b1c      	ldr	r3, [pc, #112]	; (b668c <__register_exitproc+0xbc>)
   b661c:	b923      	cbnz	r3, b6628 <__register_exitproc+0x58>
   b661e:	f8d8 0000 	ldr.w	r0, [r8]
   b6622:	f000 f838 	bl	b6696 <__retarget_lock_release>
   b6626:	e7f0      	b.n	b660a <__register_exitproc+0x3a>
   b6628:	f44f 7084 	mov.w	r0, #264	; 0x108
   b662c:	f7fe f830 	bl	b4690 <malloc>
   b6630:	2800      	cmp	r0, #0
   b6632:	d0f4      	beq.n	b661e <__register_exitproc+0x4e>
   b6634:	2300      	movs	r3, #0
   b6636:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b663a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b663e:	6863      	ldr	r3, [r4, #4]
   b6640:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6644:	2201      	movs	r2, #1
   b6646:	409a      	lsls	r2, r3
   b6648:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b664c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6650:	4313      	orrs	r3, r2
   b6652:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6656:	2e02      	cmp	r6, #2
   b6658:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b665c:	bf02      	ittt	eq
   b665e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6662:	4313      	orreq	r3, r2
   b6664:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6668:	6863      	ldr	r3, [r4, #4]
   b666a:	f8d8 0000 	ldr.w	r0, [r8]
   b666e:	1c5a      	adds	r2, r3, #1
   b6670:	3302      	adds	r3, #2
   b6672:	6062      	str	r2, [r4, #4]
   b6674:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6678:	f000 f80e 	bl	b6698 <__retarget_lock_release_recursive>
   b667c:	2000      	movs	r0, #0
   b667e:	e7c6      	b.n	b660e <__register_exitproc+0x3e>
   b6680:	2003e7e8 	.word	0x2003e7e8
   b6684:	2003e75c 	.word	0x2003e75c
   b6688:	00000000 	.word	0x00000000
   b668c:	000b4691 	.word	0x000b4691
   b6690:	2003e680 	.word	0x2003e680

000b6694 <__retarget_lock_acquire_recursive>:
   b6694:	4770      	bx	lr

000b6696 <__retarget_lock_release>:
   b6696:	4770      	bx	lr

000b6698 <__retarget_lock_release_recursive>:
   b6698:	4770      	bx	lr

000b669a <link_code_end>:
	...

000b669c <link_const_data_start>:
   b669c:	00000000 	.word	0x00000000
   b66a0:	34fb0000 	.word	0x34fb0000
   b66a4:	00805f9b 	.word	0x00805f9b
   b66a8:	10008000 	.word	0x10008000
	...

000b66b4 <dynalib_user>:
   b66b4:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b66c4:	00000000 30344536 31303030 4135422d     ....6E400001-B5A
   b66d4:	33462d33 452d3339 2d394130 45303545     3-F393-E0A9-E50E
   b66e4:	43443432 45394143 34453600 30303030     24DCCA9E.6E40000
   b66f4:	35422d32 462d3341 2d333933 39413045     2-B5A3-F393-E0A9
   b6704:	3035452d 44343245 39414343 45360045     -E50E24DCCA9E.6E
   b6714:	30303034 422d3330 2d334135 33393346     400003-B5A3-F393
   b6724:	4130452d 35452d39 34324530 41434344     -E0A9-E50E24DCCA
   b6734:	74004539 78720078 00000000              9E.tx.rx....

000b6740 <_ZTVN5spark12NetworkClassE>:
	...
   b6748:	000b46f1 000b46fb 000b4705 000b470f     .F...F...G...G..
   b6758:	000b4719 000b4725 000b4731 000b4739     .G..%G..1G..9G..
   b6768:	000b4741 000b474d 000b4755 000b475f     AG..MG..UG.._G..
   b6778:	000b4769                                iG..

000b677c <_ZTVN5spark9WiFiClassE>:
	...
   b6784:	000b48b3 000b48a9 000b489f 000b4855     .H...H...H..UH..
   b6794:	000b4893 000b4887 000b4731 000b4739     .H...H..1G..9G..
   b67a4:	000b487b 000b4873 000b4869 000b485f     {H..sH..iH.._H..
   b67b4:	000b4769                                iG..

000b67b8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b67c0 <_ZTV9USBSerial>:
	...
   b67c8:	000b4923 000b498b 000b4961 000b4cb5     #I...I..aI...L..
   b67d8:	000b4953 000b4925 000b4935 000b4985     SI..%I..5I...I..
   b67e8:	000b4945 000b491d                       EI...I..

000b67f0 <_ZTV9IPAddress>:
	...
   b67f8:	000b4a35 000b4a25 000b4a27 252d5925     5J..%J..'J..%Y-%
   b6808:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b6818:	74637361 00656d69 00707061 65737341     asctime.app.Asse
   b6828:	6f697472 6961466e 6572756c 6c616620     rtionFailure fal
   b6838:	77006573 6e697269 6c622e67 74530065     se.wiring.ble.St
   b6848:	20747261 63736964 7265766f 20676e69     art discovering 
   b6858:	76726573 73656369 7341002e 74726573     services..Assert
   b6868:	466e6f69 756c6961 68206572 625f6c61     ionFailure hal_b
   b6878:	735f656c 6b636174 696e695f 756e2874     le_stack_init(nu
   b6888:	74706c6c 3d202972 5953203d 4d455453     llptr) == SYSTEM
   b6898:	5252455f 4e5f524f 00454e4f 72656550     _ERROR_NONE.Peer
   b68a8:	76656420 20656369 6d207369 69737369      device is missi
   b68b8:	0021676e 6c696146 74206465 7061206f     ng!.Failed to ap
   b68c8:	646e6570 65657020 65432072 6172746e     pend peer Centra
   b68d8:	6564206c 65636976 6f43002e 63656e6e     l device..Connec
   b68e8:	00646574 63736944 656e6e6f 64657463     ted.Disconnected
   b68f8:	70754400 6163696c 20646574 72616863     .Duplicated char
   b6908:	65746361 74736972 63206369 6f6e6e61     acteristic canno
   b6918:	65622074 64646120 002e6465 6c696146     t be added..Fail
   b6928:	74206465 7061206f 646e6570 636f6c20     ed to append loc
   b6938:	63206c61 61726168 72657463 69747369     al characteristi
   b6948:	00002e63                                c...

000b694c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6954:	000b4d4d 000b4db1 000b4e85 000b4ddb     MM...M...N...M..
   b6964:	000b4d51                                QM..

000b6968 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6970:	000b4d49 000b4dbf 000b4d4b 000b4de1     IM...M..KM...M..
   b6980:	000b4d71                                qM..

000b6984 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b698c:	000b4d47 000b4dcd 000b55ed 000b4de7     GM...M...U...M..
   b699c:	000b4d91                                .M..

000b69a0 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b69a0:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000b69b0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b69b0:	5f9b34fb 80000080 00001000 00000000     .4._............

000b69c0 <_ZTV11USARTSerial>:
	...
   b69c8:	000b5ffd 000b6069 000b6041 000b4cb5     ._..i`..A`...L..
   b69d8:	000b6011 000b602d 000b601f 000b603b     .`..-`...`..;`..
   b69e8:	000b5fff 000b6003                       ._...`..

000b69f0 <_ZTVN5spark13EthernetClassE>:
	...
   b69f8:	000b6123 000b6119 000b610f 000b6105     #a...a...a...a..
   b6a08:	000b60f9 000b60ed 000b4731 000b4739     .`...`..1G..9G..
   b6a18:	000b60e1 000b60d9 000b60cf 000b60c5     .`...`...`...`..
   b6a28:	000b4769                                iG..

000b6a2c <_ZSt7nothrow>:
	...

000b6a2d <_ZTSSt19_Sp_make_shared_tag>:
   b6a2d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b6a3d:	5f646572 00676174                        red_tag....

000b6a48 <_ZTISt19_Sp_make_shared_tag>:
   b6a48:	000b6a88 000b6a2d                       .j..-j..

000b6a50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6a50:	000b6ae8 000b6a5c 000b6b0c              .j..\j...k..

000b6a5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6a5c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b6a6c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b6a7c:	00000045                                E...

000b6a80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6a80:	00000000 000b6a50 000b62f9 000b630d     ....Pj...b...c..
   b6a90:	000b64a1 000b64a1 000b6377 000b62b9     .d...d..wc...b..
   b6aa0:	000b635f 000b6321 000b62eb              _c..!c...b..

000b6aac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6aac:	000b6ae8 000b6ab8 000b6a50              .j...j..Pj..

000b6ab8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6ab8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b6ac8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b6ad8:	456f666e 00000000                       nfoE....

000b6ae0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6ae0:	00000000 000b6aac 000b63a1 000b63b5     .....j...c...c..
   b6af0:	000b64a1 000b64a1 000b6377 000b62b9     .d...d..wc...b..
   b6b00:	000b6475 000b6401 000b63c9              ud...d...c..

000b6b0c <_ZTISt9type_info>:
   b6b0c:	000b6a88 000b6b14                       .j...k..

000b6b14 <_ZTSSt9type_info>:
   b6b14:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b6b24:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b6b34:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b6b44:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b6b54:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b6b64:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b6b74:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b6b84:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b6b94:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b6ba4:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b6bb5 <link_const_data_end>:
   b6bb5:	00          	.byte	0x00
	...

000b6bb8 <link_constructors_location>:
   b6bb8:	000b41f9 	.word	0x000b41f9
   b6bbc:	000b4841 	.word	0x000b4841
   b6bc0:	000b48bd 	.word	0x000b48bd
   b6bc4:	000b4c85 	.word	0x000b4c85
   b6bc8:	000b4c91 	.word	0x000b4c91
   b6bcc:	000b4ca5 	.word	0x000b4ca5
   b6bd0:	000b5fed 	.word	0x000b5fed
   b6bd4:	000b60a1 	.word	0x000b60a1
   b6bd8:	000b612d 	.word	0x000b612d
