
/home/elec4740/Documents/particle/Argon_uart/target/5.2.0/argon/Argon_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040c0  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b80dc  000b80dc  000080dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e324  000b8100  0000e324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000460  2003e390  2003e390  0001e390  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b816c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8170  000b8170  00018170  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8176  000b8176  00018176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b819a  000b819a  0001819a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011505c  00000000  00000000  0001819e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000110d2  00000000  00000000  0012d1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bf0  00000000  00000000  0013e2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032e03  00000000  00000000  00140ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000371c5  00000000  00000000  00173cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001437f5  00000000  00000000  001aae84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003cf95  00000000  00000000  002ee679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000aeb0  00000000  00000000  0032b60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007edc  00000000  00000000  003364c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fc71 	bl	b7938 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fc93 	bl	b7988 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e324 	.word	0x2003e324
   b406c:	000b8100 	.word	0x000b8100
   b4070:	2003e390 	.word	0x2003e390
   b4074:	2003e390 	.word	0x2003e390
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f000 fe33 	bl	b4cec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b80b8 	.word	0x000b80b8
   b40a0:	000b80dc 	.word	0x000b80dc

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b83e 	b.w	b4124 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f851 	bl	b4150 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f000 bdd3 	b.w	b4c5c <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bb1f 	b.w	b46f8 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bb1d 	b.w	b46f8 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bb23 	b.w	b4708 <free>

000b40c2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c2:	7800      	ldrb	r0, [r0, #0]
   b40c4:	fab0 f080 	clz	r0, r0
   b40c8:	0940      	lsrs	r0, r0, #5
   b40ca:	4770      	bx	lr

000b40cc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40cc:	2301      	movs	r3, #1
   b40ce:	7003      	strb	r3, [r0, #0]
   b40d0:	4770      	bx	lr

000b40d2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b40d2:	b40e      	push	{r1, r2, r3}
   b40d4:	b500      	push	{lr}
   b40d6:	b08c      	sub	sp, #48	; 0x30
   b40d8:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b40da:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b40de:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b40e2:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40e4:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b40e8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40ea:	6801      	ldr	r1, [r0, #0]
   b40ec:	aa04      	add	r2, sp, #16
   b40ee:	201e      	movs	r0, #30
    attr.flags = 0;
   b40f0:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b40f4:	f000 fa74 	bl	b45e0 <log_message_v>
}
   b40f8:	b00c      	add	sp, #48	; 0x30
   b40fa:	f85d eb04 	ldr.w	lr, [sp], #4
   b40fe:	b003      	add	sp, #12
   b4100:	4770      	bx	lr
	...

000b4104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
size_t txLen = 0;

const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4104:	b508      	push	{r3, lr}
    // for (size_t ii = 0; ii < len; ii++) {
    //     Serial.write(data[ii]);
    // }
	memcpy(&count,&data,2);
   b4106:	4b04      	ldr	r3, [pc, #16]	; (b4118 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
	Log.info("Count = %d",count);
   b4108:	4904      	ldr	r1, [pc, #16]	; (b411c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   b410a:	b282      	uxth	r2, r0
	memcpy(&count,&data,2);
   b410c:	801a      	strh	r2, [r3, #0]
	Log.info("Count = %d",count);
   b410e:	4804      	ldr	r0, [pc, #16]	; (b4120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   b4110:	f7ff ffdf 	bl	b40d2 <_ZNK5spark6Logger4infoEPKcz>
}
   b4114:	bd08      	pop	{r3, pc}
   b4116:	bf00      	nop
   b4118:	2003e3cc 	.word	0x2003e3cc
   b411c:	000b7b14 	.word	0x000b7b14
   b4120:	2003e718 	.word	0x2003e718

000b4124 <setup>:

void setup() {
   b4124:	b508      	push	{r3, lr}
    Serial.begin();
   b4126:	f000 fcbd 	bl	b4aa4 <_Z16_fetch_usbserialv>
   b412a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412e:	f000 fcad 	bl	b4a8c <_ZN9USBSerial5beginEl>
	BLE.on();
   b4132:	f001 fb7d 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4136:	f001 fbc5 	bl	b58c4 <_ZNK8particle14BleLocalDevice2onEv>
#if SYSTEM_VERSION == SYSTEM_VERSION_v310
	// This is required with 3.1.0 only
	BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
#endif

    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   b413a:	4a03      	ldr	r2, [pc, #12]	; (b4148 <setup+0x24>)
   b413c:	4903      	ldr	r1, [pc, #12]	; (b414c <setup+0x28>)
}
   b413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   b4142:	4610      	mov	r0, r2
   b4144:	f002 bb6a 	b.w	b681c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b4148:	2003e3e4 	.word	0x2003e3e4
   b414c:	000b4105 	.word	0x000b4105

000b4150 <loop>:

void loop() {
   b4150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4154:	b088      	sub	sp, #32
    if (BLE.connected()) {
   b4156:	f001 fb6b 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b415a:	f001 fbf9 	bl	b5950 <_ZNK8particle14BleLocalDevice9connectedEv>
   b415e:	4604      	mov	r4, r0
   b4160:	b348      	cbz	r0, b41b6 <loop+0x66>
   b4162:	4c48      	ldr	r4, [pc, #288]	; (b4284 <loop+0x134>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
            txBuf[txLen++] = Serial.read();
   b4164:	4d48      	ldr	r5, [pc, #288]	; (b4288 <loop+0x138>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b4166:	f000 fc9d 	bl	b4aa4 <_Z16_fetch_usbserialv>
   b416a:	6803      	ldr	r3, [r0, #0]
   b416c:	691b      	ldr	r3, [r3, #16]
   b416e:	4798      	blx	r3
   b4170:	b1a8      	cbz	r0, b419e <loop+0x4e>
   b4172:	6823      	ldr	r3, [r4, #0]
   b4174:	2b13      	cmp	r3, #19
   b4176:	d812      	bhi.n	b419e <loop+0x4e>
            txBuf[txLen++] = Serial.read();
   b4178:	f000 fc94 	bl	b4aa4 <_Z16_fetch_usbserialv>
   b417c:	6803      	ldr	r3, [r0, #0]
   b417e:	695b      	ldr	r3, [r3, #20]
   b4180:	4798      	blx	r3
   b4182:	6823      	ldr	r3, [r4, #0]
   b4184:	1c5a      	adds	r2, r3, #1
   b4186:	54e8      	strb	r0, [r5, r3]
   b4188:	6022      	str	r2, [r4, #0]
            Serial.write(txBuf[txLen - 1]);
   b418a:	f000 fc8b 	bl	b4aa4 <_Z16_fetch_usbserialv>
   b418e:	6823      	ldr	r3, [r4, #0]
   b4190:	6802      	ldr	r2, [r0, #0]
   b4192:	442b      	add	r3, r5
   b4194:	6892      	ldr	r2, [r2, #8]
   b4196:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   b419a:	4790      	blx	r2
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
   b419c:	e7e3      	b.n	b4166 <loop+0x16>
        }
        if (txLen > 0) {
   b419e:	6822      	ldr	r2, [r4, #0]
   b41a0:	b132      	cbz	r2, b41b0 <loop+0x60>
        	// Transmit the data to the BLE peripheral
            peerRxCharacteristic.setValue(txBuf, txLen);
   b41a2:	2300      	movs	r3, #0
   b41a4:	4938      	ldr	r1, [pc, #224]	; (b4288 <loop+0x138>)
   b41a6:	4839      	ldr	r0, [pc, #228]	; (b428c <loop+0x13c>)
   b41a8:	f001 f9dc 	bl	b5564 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            txLen = 0;
   b41ac:	2300      	movs	r3, #0
   b41ae:	6023      	str	r3, [r4, #0]
				}
			}
    	}

    }
}
   b41b0:	b008      	add	sp, #32
   b41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b41b6:	4d36      	ldr	r5, [pc, #216]	; (b4290 <loop+0x140>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41b8:	f000 f9ea 	bl	b4590 <HAL_Timer_Get_Milli_Seconds>
   b41bc:	682b      	ldr	r3, [r5, #0]
   b41be:	1ac0      	subs	r0, r0, r3
   b41c0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b41c4:	d3f4      	bcc.n	b41b0 <loop+0x60>
   b41c6:	f000 f9e3 	bl	b4590 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b41ca:	6028      	str	r0, [r5, #0]
    		int count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b41cc:	f001 fb30 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41d0:	4930      	ldr	r1, [pc, #192]	; (b4294 <loop+0x144>)
   b41d2:	2214      	movs	r2, #20
   b41d4:	f001 fbf4 	bl	b59c0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
   b41d8:	1e07      	subs	r7, r0, #0
   b41da:	dde9      	ble.n	b41b0 <loop+0x60>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b41dc:	4e2d      	ldr	r6, [pc, #180]	; (b4294 <loop+0x144>)
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b41de:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b42a8 <loop+0x158>
				for (uint8_t ii = 0; ii < count; ii++) {
   b41e2:	b2e5      	uxtb	r5, r4
   b41e4:	42bd      	cmp	r5, r7
   b41e6:	dae3      	bge.n	b41b0 <loop+0x60>
					BleUuid foundServiceUuid;
   b41e8:	a803      	add	r0, sp, #12
   b41ea:	f000 ff8b 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
   b41ee:	2324      	movs	r3, #36	; 0x24
   b41f0:	435d      	muls	r5, r3
   b41f2:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b41f6:	2201      	movs	r2, #1
   b41f8:	a903      	add	r1, sp, #12
   b41fa:	4430      	add	r0, r6
   b41fc:	f002 fa2a 	bl	b6654 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4200:	b908      	cbnz	r0, b4206 <loop+0xb6>
				for (uint8_t ii = 0; ii < count; ii++) {
   b4202:	3401      	adds	r4, #1
   b4204:	e7ed      	b.n	b41e2 <loop+0x92>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4206:	4641      	mov	r1, r8
   b4208:	a803      	add	r0, sp, #12
   b420a:	f000 ffd6 	bl	b51ba <_ZNK8particle7BleUuideqERKS0_>
   b420e:	2800      	cmp	r0, #0
   b4210:	d0f7      	beq.n	b4202 <loop+0xb2>
						peer = BLE.connect(scanResults[ii].address());
   b4212:	f001 fb0d 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4216:	1972      	adds	r2, r6, r5
   b4218:	4601      	mov	r1, r0
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b421a:	4e1f      	ldr	r6, [pc, #124]	; (b4298 <loop+0x148>)
   b421c:	2301      	movs	r3, #1
   b421e:	a801      	add	r0, sp, #4
   b4220:	f002 fe3e 	bl	b6ea0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4224:	9b01      	ldr	r3, [sp, #4]
   b4226:	9d02      	ldr	r5, [sp, #8]
   b4228:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
   b422a:	6873      	ldr	r3, [r6, #4]
   b422c:	429d      	cmp	r5, r3
   b422e:	d016      	beq.n	b425e <loop+0x10e>
	    if (__tmp != 0)
   b4230:	b115      	cbz	r5, b4238 <loop+0xe8>
    { ++_M_use_count; }
   b4232:	686b      	ldr	r3, [r5, #4]
   b4234:	3301      	adds	r3, #1
   b4236:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4238:	6874      	ldr	r4, [r6, #4]
   b423a:	b17c      	cbz	r4, b425c <loop+0x10c>
      if (--_M_use_count == 0)
   b423c:	6863      	ldr	r3, [r4, #4]
   b423e:	3b01      	subs	r3, #1
   b4240:	6063      	str	r3, [r4, #4]
   b4242:	b95b      	cbnz	r3, b425c <loop+0x10c>
          _M_dispose();
   b4244:	6823      	ldr	r3, [r4, #0]
   b4246:	4620      	mov	r0, r4
   b4248:	689b      	ldr	r3, [r3, #8]
   b424a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b424c:	68a3      	ldr	r3, [r4, #8]
   b424e:	3b01      	subs	r3, #1
   b4250:	60a3      	str	r3, [r4, #8]
   b4252:	b91b      	cbnz	r3, b425c <loop+0x10c>
            _M_destroy();
   b4254:	6823      	ldr	r3, [r4, #0]
   b4256:	4620      	mov	r0, r4
   b4258:	68db      	ldr	r3, [r3, #12]
   b425a:	4798      	blx	r3
	    _M_pi = __tmp;
   b425c:	6075      	str	r5, [r6, #4]
   b425e:	a801      	add	r0, sp, #4
   b4260:	f001 fc1d 	bl	b5a9e <_ZN8particle13BlePeerDeviceD1Ev>
						if (peer.connected()) {
   b4264:	480c      	ldr	r0, [pc, #48]	; (b4298 <loop+0x148>)
   b4266:	f001 fa55 	bl	b5714 <_ZNK8particle13BlePeerDevice9connectedEv>
   b426a:	2800      	cmp	r0, #0
   b426c:	d0a0      	beq.n	b41b0 <loop+0x60>
							peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b426e:	4a0b      	ldr	r2, [pc, #44]	; (b429c <loop+0x14c>)
   b4270:	490b      	ldr	r1, [pc, #44]	; (b42a0 <loop+0x150>)
   b4272:	4809      	ldr	r0, [pc, #36]	; (b4298 <loop+0x148>)
   b4274:	f002 faa8 	bl	b67c8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b4278:	4a0a      	ldr	r2, [pc, #40]	; (b42a4 <loop+0x154>)
   b427a:	4904      	ldr	r1, [pc, #16]	; (b428c <loop+0x13c>)
   b427c:	4806      	ldr	r0, [pc, #24]	; (b4298 <loop+0x148>)
   b427e:	f002 faa3 	bl	b67c8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
}
   b4282:	e795      	b.n	b41b0 <loop+0x60>
   b4284:	2003e6d0 	.word	0x2003e6d0
   b4288:	2003e6bc 	.word	0x2003e6bc
   b428c:	2003e3dc 	.word	0x2003e3dc
   b4290:	2003e3d0 	.word	0x2003e3d0
   b4294:	2003e3ec 	.word	0x2003e3ec
   b4298:	2003e3d4 	.word	0x2003e3d4
   b429c:	2003e3b8 	.word	0x2003e3b8
   b42a0:	2003e3e4 	.word	0x2003e3e4
   b42a4:	2003e3a4 	.word	0x2003e3a4
   b42a8:	2003e390 	.word	0x2003e390

000b42ac <_GLOBAL__sub_I_scanResults>:
   b42ac:	b570      	push	{r4, r5, r6, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b42ae:	4915      	ldr	r1, [pc, #84]	; (b4304 <_GLOBAL__sub_I_scanResults+0x58>)
   b42b0:	4815      	ldr	r0, [pc, #84]	; (b4308 <_GLOBAL__sub_I_scanResults+0x5c>)
   b42b2:	4c16      	ldr	r4, [pc, #88]	; (b430c <_GLOBAL__sub_I_scanResults+0x60>)
   b42b4:	f001 f800 	bl	b52b8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b42b8:	4915      	ldr	r1, [pc, #84]	; (b4310 <_GLOBAL__sub_I_scanResults+0x64>)
   b42ba:	4816      	ldr	r0, [pc, #88]	; (b4314 <_GLOBAL__sub_I_scanResults+0x68>)
   b42bc:	f000 fffc 	bl	b52b8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b42c0:	4915      	ldr	r1, [pc, #84]	; (b4318 <_GLOBAL__sub_I_scanResults+0x6c>)
   b42c2:	4816      	ldr	r0, [pc, #88]	; (b431c <_GLOBAL__sub_I_scanResults+0x70>)
   b42c4:	f000 fff8 	bl	b52b8 <_ZN8particle7BleUuidC1EPKc>
   b42c8:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b42ca:	267f      	movs	r6, #127	; 0x7f
   b42cc:	4620      	mov	r0, r4
   b42ce:	f000 ff0e 	bl	b50ee <_ZN8particle10BleAddressC1Ev>
   b42d2:	f104 0008 	add.w	r0, r4, #8
   b42d6:	f001 fecf 	bl	b6078 <_ZN8particle18BleAdvertisingDataC1Ev>
   b42da:	f104 0014 	add.w	r0, r4, #20
   b42de:	f001 fecb 	bl	b6078 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b42e2:	3d01      	subs	r5, #1
   b42e4:	f884 6020 	strb.w	r6, [r4, #32]
   b42e8:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b42ec:	d1ee      	bne.n	b42cc <_GLOBAL__sub_I_scanResults+0x20>
BleCharacteristic peerTxCharacteristic;
   b42ee:	480c      	ldr	r0, [pc, #48]	; (b4320 <_GLOBAL__sub_I_scanResults+0x74>)
   b42f0:	f001 f912 	bl	b5518 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b42f4:	480b      	ldr	r0, [pc, #44]	; (b4324 <_GLOBAL__sub_I_scanResults+0x78>)
   b42f6:	f001 f90f 	bl	b5518 <_ZN8particle17BleCharacteristicC1Ev>
}
   b42fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlePeerDevice peer;
   b42fe:	480a      	ldr	r0, [pc, #40]	; (b4328 <_GLOBAL__sub_I_scanResults+0x7c>)
   b4300:	f001 b9e6 	b.w	b56d0 <_ZN8particle13BlePeerDeviceC1Ev>
   b4304:	000b7b1f 	.word	0x000b7b1f
   b4308:	2003e390 	.word	0x2003e390
   b430c:	2003e3ec 	.word	0x2003e3ec
   b4310:	000b7b44 	.word	0x000b7b44
   b4314:	2003e3a4 	.word	0x2003e3a4
   b4318:	000b7b69 	.word	0x000b7b69
   b431c:	2003e3b8 	.word	0x2003e3b8
   b4320:	2003e3e4 	.word	0x2003e3e4
   b4324:	2003e3dc 	.word	0x2003e3dc
   b4328:	2003e3d4 	.word	0x2003e3d4

000b432c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b432c:	b508      	push	{r3, lr}
   b432e:	4b02      	ldr	r3, [pc, #8]	; (b4338 <HAL_USB_USART_Init+0xc>)
   b4330:	681b      	ldr	r3, [r3, #0]
   b4332:	681b      	ldr	r3, [r3, #0]
   b4334:	9301      	str	r3, [sp, #4]
   b4336:	bd08      	pop	{r3, pc}
   b4338:	0003024c 	.word	0x0003024c

000b433c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b433c:	b508      	push	{r3, lr}
   b433e:	4b02      	ldr	r3, [pc, #8]	; (b4348 <HAL_USB_USART_Begin+0xc>)
   b4340:	681b      	ldr	r3, [r3, #0]
   b4342:	685b      	ldr	r3, [r3, #4]
   b4344:	9301      	str	r3, [sp, #4]
   b4346:	bd08      	pop	{r3, pc}
   b4348:	0003024c 	.word	0x0003024c

000b434c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b434c:	b508      	push	{r3, lr}
   b434e:	4b02      	ldr	r3, [pc, #8]	; (b4358 <HAL_USB_USART_Available_Data+0xc>)
   b4350:	681b      	ldr	r3, [r3, #0]
   b4352:	691b      	ldr	r3, [r3, #16]
   b4354:	9301      	str	r3, [sp, #4]
   b4356:	bd08      	pop	{r3, pc}
   b4358:	0003024c 	.word	0x0003024c

000b435c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b435c:	b508      	push	{r3, lr}
   b435e:	4b02      	ldr	r3, [pc, #8]	; (b4368 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4360:	681b      	ldr	r3, [r3, #0]
   b4362:	695b      	ldr	r3, [r3, #20]
   b4364:	9301      	str	r3, [sp, #4]
   b4366:	bd08      	pop	{r3, pc}
   b4368:	0003024c 	.word	0x0003024c

000b436c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b436c:	b508      	push	{r3, lr}
   b436e:	4b02      	ldr	r3, [pc, #8]	; (b4378 <HAL_USB_USART_Receive_Data+0xc>)
   b4370:	681b      	ldr	r3, [r3, #0]
   b4372:	699b      	ldr	r3, [r3, #24]
   b4374:	9301      	str	r3, [sp, #4]
   b4376:	bd08      	pop	{r3, pc}
   b4378:	0003024c 	.word	0x0003024c

000b437c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b437c:	b508      	push	{r3, lr}
   b437e:	4b02      	ldr	r3, [pc, #8]	; (b4388 <HAL_USB_USART_Send_Data+0xc>)
   b4380:	681b      	ldr	r3, [r3, #0]
   b4382:	69db      	ldr	r3, [r3, #28]
   b4384:	9301      	str	r3, [sp, #4]
   b4386:	bd08      	pop	{r3, pc}
   b4388:	0003024c 	.word	0x0003024c

000b438c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b438c:	b508      	push	{r3, lr}
   b438e:	4b02      	ldr	r3, [pc, #8]	; (b4398 <HAL_USB_USART_Flush_Data+0xc>)
   b4390:	681b      	ldr	r3, [r3, #0]
   b4392:	6a1b      	ldr	r3, [r3, #32]
   b4394:	9301      	str	r3, [sp, #4]
   b4396:	bd08      	pop	{r3, pc}
   b4398:	0003024c 	.word	0x0003024c

000b439c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <hal_usart_write+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	68db      	ldr	r3, [r3, #12]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	0003023c 	.word	0x0003023c

000b43ac <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <hal_usart_available+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	691b      	ldr	r3, [r3, #16]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	0003023c 	.word	0x0003023c

000b43bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <hal_usart_read+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	695b      	ldr	r3, [r3, #20]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	0003023c 	.word	0x0003023c

000b43cc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <hal_usart_peek+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	699b      	ldr	r3, [r3, #24]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	0003023c 	.word	0x0003023c

000b43dc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <hal_usart_flush+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	69db      	ldr	r3, [r3, #28]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	0003023c 	.word	0x0003023c

000b43ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <hal_usart_available_data_for_write+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	0003023c 	.word	0x0003023c

000b43fc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <hal_usart_init_ex+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	0003023c 	.word	0x0003023c

000b440c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <inet_inet_ntop+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	695b      	ldr	r3, [r3, #20]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030264 	.word	0x00030264

000b441c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <os_mutex_recursive_create+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030248 	.word	0x00030248

000b442c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <os_mutex_recursive_lock+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030248 	.word	0x00030248

000b443c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <os_mutex_recursive_unlock+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030248 	.word	0x00030248

000b444c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <hal_ble_stack_init+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	689b      	ldr	r3, [r3, #8]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030278 	.word	0x00030278

000b445c <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <hal_ble_gap_start_scan+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030278 	.word	0x00030278

000b446c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b03      	ldr	r3, [pc, #12]	; (b447c <hal_ble_gap_stop_scan+0x10>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b4476:	9301      	str	r3, [sp, #4]
   b4478:	bd08      	pop	{r3, pc}
   b447a:	0000      	.short	0x0000
   b447c:	00030278 	.word	0x00030278

000b4480 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b03      	ldr	r3, [pc, #12]	; (b4490 <hal_ble_gap_disconnect+0x10>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b448a:	9301      	str	r3, [sp, #4]
   b448c:	bd08      	pop	{r3, pc}
   b448e:	0000      	.short	0x0000
   b4490:	00030278 	.word	0x00030278

000b4494 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b03      	ldr	r3, [pc, #12]	; (b44a4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b449e:	9301      	str	r3, [sp, #4]
   b44a0:	bd08      	pop	{r3, pc}
   b44a2:	0000      	.short	0x0000
   b44a4:	00030278 	.word	0x00030278

000b44a8 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b44a8:	b508      	push	{r3, lr}
   b44aa:	4b03      	ldr	r3, [pc, #12]	; (b44b8 <hal_ble_gatt_client_discover_all_services+0x10>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b44b2:	9301      	str	r3, [sp, #4]
   b44b4:	bd08      	pop	{r3, pc}
   b44b6:	0000      	.short	0x0000
   b44b8:	00030278 	.word	0x00030278

000b44bc <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b03      	ldr	r3, [pc, #12]	; (b44cc <hal_ble_gatt_client_discover_characteristics+0x10>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b44c6:	9301      	str	r3, [sp, #4]
   b44c8:	bd08      	pop	{r3, pc}
   b44ca:	0000      	.short	0x0000
   b44cc:	00030278 	.word	0x00030278

000b44d0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b03      	ldr	r3, [pc, #12]	; (b44e0 <hal_ble_gatt_client_write_with_response+0x10>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b44da:	9301      	str	r3, [sp, #4]
   b44dc:	bd08      	pop	{r3, pc}
   b44de:	0000      	.short	0x0000
   b44e0:	00030278 	.word	0x00030278

000b44e4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b03      	ldr	r3, [pc, #12]	; (b44f4 <hal_ble_gatt_client_write_without_response+0x10>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b44ee:	9301      	str	r3, [sp, #4]
   b44f0:	bd08      	pop	{r3, pc}
   b44f2:	0000      	.short	0x0000
   b44f4:	00030278 	.word	0x00030278

000b44f8 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b44f8:	b508      	push	{r3, lr}
   b44fa:	4b03      	ldr	r3, [pc, #12]	; (b4508 <hal_ble_gatt_client_read+0x10>)
   b44fc:	681b      	ldr	r3, [r3, #0]
   b44fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b4502:	9301      	str	r3, [sp, #4]
   b4504:	bd08      	pop	{r3, pc}
   b4506:	0000      	.short	0x0000
   b4508:	00030278 	.word	0x00030278

000b450c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b03      	ldr	r3, [pc, #12]	; (b451c <hal_ble_gap_connect+0x10>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b4516:	9301      	str	r3, [sp, #4]
   b4518:	bd08      	pop	{r3, pc}
   b451a:	0000      	.short	0x0000
   b451c:	00030278 	.word	0x00030278

000b4520 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b03      	ldr	r3, [pc, #12]	; (b4530 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b452a:	9301      	str	r3, [sp, #4]
   b452c:	bd08      	pop	{r3, pc}
   b452e:	0000      	.short	0x0000
   b4530:	00030278 	.word	0x00030278

000b4534 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b03      	ldr	r3, [pc, #12]	; (b4544 <hal_ble_gatt_client_configure_cccd+0x10>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b453e:	9301      	str	r3, [sp, #4]
   b4540:	bd08      	pop	{r3, pc}
   b4542:	0000      	.short	0x0000
   b4544:	00030278 	.word	0x00030278

000b4548 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4548:	b508      	push	{r3, lr}
   b454a:	4b03      	ldr	r3, [pc, #12]	; (b4558 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b454c:	681b      	ldr	r3, [r3, #0]
   b454e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b4552:	9301      	str	r3, [sp, #4]
   b4554:	bd08      	pop	{r3, pc}
   b4556:	0000      	.short	0x0000
   b4558:	00030278 	.word	0x00030278

000b455c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b03      	ldr	r3, [pc, #12]	; (b456c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b4566:	9301      	str	r3, [sp, #4]
   b4568:	bd08      	pop	{r3, pc}
   b456a:	0000      	.short	0x0000
   b456c:	00030278 	.word	0x00030278

000b4570 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <HAL_RNG_GetRandomNumber+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	685b      	ldr	r3, [r3, #4]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030218 	.word	0x00030218

000b4580 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <HAL_Delay_Microseconds+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	68db      	ldr	r3, [r3, #12]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030218 	.word	0x00030218

000b4590 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	695b      	ldr	r3, [r3, #20]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030218 	.word	0x00030218

000b45a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <netdb_freeaddrinfo+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	689b      	ldr	r3, [r3, #8]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030268 	.word	0x00030268

000b45b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <netdb_getaddrinfo+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	68db      	ldr	r3, [r3, #12]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	00030268 	.word	0x00030268

000b45c0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <panic_+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	00030260 	.word	0x00030260

000b45d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <log_message+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030260 	.word	0x00030260

000b45e0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <log_message_v+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030260 	.word	0x00030260

000b45f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <spark_set_random_seed_from_cloud_handler+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030244 	.word	0x00030244

000b4600 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <network_connect+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	685b      	ldr	r3, [r3, #4]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030240 	.word	0x00030240

000b4610 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <network_connecting+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	689b      	ldr	r3, [r3, #8]
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030240 	.word	0x00030240

000b4620 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <network_disconnect+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	68db      	ldr	r3, [r3, #12]
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030240 	.word	0x00030240

000b4630 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <network_ready+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	691b      	ldr	r3, [r3, #16]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	00030240 	.word	0x00030240

000b4640 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <network_on+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	695b      	ldr	r3, [r3, #20]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030240 	.word	0x00030240

000b4650 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <network_off+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	699b      	ldr	r3, [r3, #24]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030240 	.word	0x00030240

000b4660 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <network_listen+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	69db      	ldr	r3, [r3, #28]
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030240 	.word	0x00030240

000b4670 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <network_listening+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	6a1b      	ldr	r3, [r3, #32]
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	00030240 	.word	0x00030240

000b4680 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <network_set_listen_timeout+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	00030240 	.word	0x00030240

000b4690 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <network_get_listen_timeout+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	00030240 	.word	0x00030240

000b46a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <network_is_on+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	00030240 	.word	0x00030240

000b46b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <network_is_off+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	00030240 	.word	0x00030240

000b46c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <set_system_mode+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	685b      	ldr	r3, [r3, #4]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030220 	.word	0x00030220

000b46d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b03      	ldr	r3, [pc, #12]	; (b46e0 <system_ctrl_set_app_request_handler+0x10>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b46da:	9301      	str	r3, [sp, #4]
   b46dc:	bd08      	pop	{r3, pc}
   b46de:	0000      	.short	0x0000
   b46e0:	00030220 	.word	0x00030220

000b46e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b46e4:	b508      	push	{r3, lr}
   b46e6:	4b03      	ldr	r3, [pc, #12]	; (b46f4 <system_ctrl_set_result+0x10>)
   b46e8:	681b      	ldr	r3, [r3, #0]
   b46ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b46ee:	9301      	str	r3, [sp, #4]
   b46f0:	bd08      	pop	{r3, pc}
   b46f2:	0000      	.short	0x0000
   b46f4:	00030220 	.word	0x00030220

000b46f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <malloc+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	681b      	ldr	r3, [r3, #0]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	0003021c 	.word	0x0003021c

000b4708 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <free+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	685b      	ldr	r3, [r3, #4]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	0003021c 	.word	0x0003021c

000b4718 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <realloc+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	689b      	ldr	r3, [r3, #8]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	0003021c 	.word	0x0003021c

000b4728 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <abort+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003021c 	.word	0x0003021c

000b4738 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <__assert_func+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	0003021c 	.word	0x0003021c

000b4748 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <newlib_impure_ptr_callback+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	0003021c 	.word	0x0003021c

000b4758 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4758:	2300      	movs	r3, #0
   b475a:	6840      	ldr	r0, [r0, #4]
   b475c:	461a      	mov	r2, r3
   b475e:	f7ff bf4f 	b.w	b4600 <network_connect>

000b4762 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4762:	6840      	ldr	r0, [r0, #4]
   b4764:	2200      	movs	r2, #0
   b4766:	2102      	movs	r1, #2
   b4768:	f7ff bf5a 	b.w	b4620 <network_disconnect>

000b476c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b476c:	2200      	movs	r2, #0
   b476e:	6840      	ldr	r0, [r0, #4]
   b4770:	4611      	mov	r1, r2
   b4772:	f7ff bf4d 	b.w	b4610 <network_connecting>

000b4776 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4776:	2200      	movs	r2, #0
   b4778:	6840      	ldr	r0, [r0, #4]
   b477a:	4611      	mov	r1, r2
   b477c:	f7ff bf58 	b.w	b4630 <network_ready>

000b4780 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4780:	2300      	movs	r3, #0
   b4782:	6840      	ldr	r0, [r0, #4]
   b4784:	461a      	mov	r2, r3
   b4786:	4619      	mov	r1, r3
   b4788:	f7ff bf5a 	b.w	b4640 <network_on>

000b478c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b478c:	2300      	movs	r3, #0
   b478e:	6840      	ldr	r0, [r0, #4]
   b4790:	461a      	mov	r2, r3
   b4792:	4619      	mov	r1, r3
   b4794:	f7ff bf5c 	b.w	b4650 <network_off>

000b4798 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4798:	6840      	ldr	r0, [r0, #4]
   b479a:	2100      	movs	r1, #0
   b479c:	f7ff bf80 	b.w	b46a0 <network_is_on>

000b47a0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b47a0:	6840      	ldr	r0, [r0, #4]
   b47a2:	2100      	movs	r1, #0
   b47a4:	f7ff bf84 	b.w	b46b0 <network_is_off>

000b47a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b47a8:	6840      	ldr	r0, [r0, #4]
   b47aa:	2200      	movs	r2, #0
   b47ac:	f081 0101 	eor.w	r1, r1, #1
   b47b0:	f7ff bf56 	b.w	b4660 <network_listen>

000b47b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b47b4:	6840      	ldr	r0, [r0, #4]
   b47b6:	2200      	movs	r2, #0
   b47b8:	f7ff bf62 	b.w	b4680 <network_set_listen_timeout>

000b47bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b47bc:	2200      	movs	r2, #0
   b47be:	6840      	ldr	r0, [r0, #4]
   b47c0:	4611      	mov	r1, r2
   b47c2:	f7ff bf65 	b.w	b4690 <network_get_listen_timeout>

000b47c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b47c6:	2200      	movs	r2, #0
   b47c8:	6840      	ldr	r0, [r0, #4]
   b47ca:	4611      	mov	r1, r2
   b47cc:	f7ff bf50 	b.w	b4670 <network_listening>

000b47d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b47d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b47d4:	b095      	sub	sp, #84	; 0x54
   b47d6:	4614      	mov	r4, r2
   b47d8:	460d      	mov	r5, r1
   b47da:	4607      	mov	r7, r0
    IPAddress addr;
   b47dc:	f000 f9c2 	bl	b4b64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b47e0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b47e2:	221c      	movs	r2, #28
   b47e4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b47e6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b47e8:	f003 f8ce 	bl	b7988 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b47ec:	2340      	movs	r3, #64	; 0x40
   b47ee:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b47f0:	4620      	mov	r0, r4
   b47f2:	466b      	mov	r3, sp
   b47f4:	aa0c      	add	r2, sp, #48	; 0x30
   b47f6:	2100      	movs	r1, #0
   b47f8:	f7ff feda 	bl	b45b0 <netdb_getaddrinfo>
    if (!r) {
   b47fc:	4604      	mov	r4, r0
   b47fe:	2800      	cmp	r0, #0
   b4800:	d14b      	bne.n	b489a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4802:	4602      	mov	r2, r0
   b4804:	2101      	movs	r1, #1
   b4806:	6868      	ldr	r0, [r5, #4]
   b4808:	f7ff ff12 	bl	b4630 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b480c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b480e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4810:	4622      	mov	r2, r4
   b4812:	6868      	ldr	r0, [r5, #4]
   b4814:	f7ff ff0c 	bl	b4630 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4818:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b481a:	4681      	mov	r9, r0
        bool ok = false;
   b481c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b481e:	2e00      	cmp	r6, #0
   b4820:	d03b      	beq.n	b489a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4822:	2900      	cmp	r1, #0
   b4824:	d139      	bne.n	b489a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4826:	6873      	ldr	r3, [r6, #4]
   b4828:	2b02      	cmp	r3, #2
   b482a:	d003      	beq.n	b4834 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b482c:	2b0a      	cmp	r3, #10
   b482e:	d011      	beq.n	b4854 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4830:	69f6      	ldr	r6, [r6, #28]
   b4832:	e7f4      	b.n	b481e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4834:	f1b8 0f00 	cmp.w	r8, #0
   b4838:	d0fa      	beq.n	b4830 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b483a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b483c:	a806      	add	r0, sp, #24
   b483e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4840:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4842:	f000 f9bd 	bl	b4bc0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4848:	1d3c      	adds	r4, r7, #4
   b484a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b484c:	682b      	ldr	r3, [r5, #0]
   b484e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4850:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4852:	e7ed      	b.n	b4830 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4854:	f1b9 0f00 	cmp.w	r9, #0
   b4858:	d0ea      	beq.n	b4830 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b485a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b485c:	2210      	movs	r2, #16
   b485e:	a801      	add	r0, sp, #4
   b4860:	f003 f892 	bl	b7988 <memset>
                    a.v = 6;
   b4864:	2306      	movs	r3, #6
   b4866:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b486a:	ad01      	add	r5, sp, #4
   b486c:	f104 0308 	add.w	r3, r4, #8
   b4870:	3418      	adds	r4, #24
   b4872:	6818      	ldr	r0, [r3, #0]
   b4874:	6859      	ldr	r1, [r3, #4]
   b4876:	462a      	mov	r2, r5
   b4878:	c203      	stmia	r2!, {r0, r1}
   b487a:	3308      	adds	r3, #8
   b487c:	42a3      	cmp	r3, r4
   b487e:	4615      	mov	r5, r2
   b4880:	d1f7      	bne.n	b4872 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4882:	a901      	add	r1, sp, #4
   b4884:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4886:	ad07      	add	r5, sp, #28
   b4888:	f000 f97a 	bl	b4b80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b488c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b488e:	1d3c      	adds	r4, r7, #4
   b4890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4892:	682b      	ldr	r3, [r5, #0]
   b4894:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4896:	4649      	mov	r1, r9
   b4898:	e7ca      	b.n	b4830 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b489a:	9800      	ldr	r0, [sp, #0]
   b489c:	f7ff fe80 	bl	b45a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b48a0:	4638      	mov	r0, r7
   b48a2:	b015      	add	sp, #84	; 0x54
   b48a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b48a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48a8:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b48aa:	4a03      	ldr	r2, [pc, #12]	; (b48b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b48ac:	601a      	str	r2, [r3, #0]
   b48ae:	2200      	movs	r2, #0
   b48b0:	605a      	str	r2, [r3, #4]

} // spark
   b48b2:	4770      	bx	lr
   b48b4:	2003e6d4 	.word	0x2003e6d4
   b48b8:	000b7b98 	.word	0x000b7b98

000b48bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b48bc:	2200      	movs	r2, #0
   b48be:	6840      	ldr	r0, [r0, #4]
   b48c0:	4611      	mov	r1, r2
   b48c2:	f7ff beb5 	b.w	b4630 <network_ready>

000b48c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b48c6:	2200      	movs	r2, #0
   b48c8:	6840      	ldr	r0, [r0, #4]
   b48ca:	4611      	mov	r1, r2
   b48cc:	f7ff bed0 	b.w	b4670 <network_listening>

000b48d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b48d0:	2200      	movs	r2, #0
   b48d2:	6840      	ldr	r0, [r0, #4]
   b48d4:	4611      	mov	r1, r2
   b48d6:	f7ff bedb 	b.w	b4690 <network_get_listen_timeout>

000b48da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b48da:	6840      	ldr	r0, [r0, #4]
   b48dc:	2200      	movs	r2, #0
   b48de:	f7ff becf 	b.w	b4680 <network_set_listen_timeout>

000b48e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b48e2:	6840      	ldr	r0, [r0, #4]
   b48e4:	2200      	movs	r2, #0
   b48e6:	f081 0101 	eor.w	r1, r1, #1
   b48ea:	f7ff beb9 	b.w	b4660 <network_listen>

000b48ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b48ee:	2300      	movs	r3, #0
   b48f0:	6840      	ldr	r0, [r0, #4]
   b48f2:	461a      	mov	r2, r3
   b48f4:	4619      	mov	r1, r3
   b48f6:	f7ff beab 	b.w	b4650 <network_off>

000b48fa <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b48fa:	2300      	movs	r3, #0
   b48fc:	6840      	ldr	r0, [r0, #4]
   b48fe:	461a      	mov	r2, r3
   b4900:	4619      	mov	r1, r3
   b4902:	f7ff be9d 	b.w	b4640 <network_on>

000b4906 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4906:	2200      	movs	r2, #0
   b4908:	6840      	ldr	r0, [r0, #4]
   b490a:	4611      	mov	r1, r2
   b490c:	f7ff be80 	b.w	b4610 <network_connecting>

000b4910 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4910:	6840      	ldr	r0, [r0, #4]
   b4912:	2200      	movs	r2, #0
   b4914:	2102      	movs	r1, #2
   b4916:	f7ff be83 	b.w	b4620 <network_disconnect>

000b491a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b491a:	2300      	movs	r3, #0
   b491c:	6840      	ldr	r0, [r0, #4]
   b491e:	461a      	mov	r2, r3
   b4920:	f7ff be6e 	b.w	b4600 <network_connect>

000b4924 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4924:	4b02      	ldr	r3, [pc, #8]	; (b4930 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4926:	2204      	movs	r2, #4
   b4928:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b492a:	4a02      	ldr	r2, [pc, #8]	; (b4934 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b492c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b492e:	4770      	bx	lr
   b4930:	2003e6dc 	.word	0x2003e6dc
   b4934:	000b7bd4 	.word	0x000b7bd4

000b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4938:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b493a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b493c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b493e:	b17c      	cbz	r4, b4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4940:	6863      	ldr	r3, [r4, #4]
   b4942:	3b01      	subs	r3, #1
   b4944:	6063      	str	r3, [r4, #4]
   b4946:	b95b      	cbnz	r3, b4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4948:	6823      	ldr	r3, [r4, #0]
   b494a:	4620      	mov	r0, r4
   b494c:	689b      	ldr	r3, [r3, #8]
   b494e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4950:	68a3      	ldr	r3, [r4, #8]
   b4952:	3b01      	subs	r3, #1
   b4954:	60a3      	str	r3, [r4, #8]
   b4956:	b91b      	cbnz	r3, b4960 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4958:	6823      	ldr	r3, [r4, #0]
   b495a:	4620      	mov	r0, r4
   b495c:	68db      	ldr	r3, [r3, #12]
   b495e:	4798      	blx	r3
      }
   b4960:	4628      	mov	r0, r5
   b4962:	bd38      	pop	{r3, r4, r5, pc}

000b4964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b4964:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b4966:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4968:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b496a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b496c:	dd03      	ble.n	b4976 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b496e:	f7ff fed3 	bl	b4718 <realloc>
            if (!d) {
   b4972:	b918      	cbnz	r0, b497c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4974:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4976:	f7ff fec7 	bl	b4708 <free>
        T* d = nullptr;
   b497a:	2000      	movs	r0, #0
        data_ = d;
   b497c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b497e:	60a5      	str	r5, [r4, #8]
        return true;
   b4980:	2001      	movs	r0, #1
   b4982:	e7f7      	b.n	b4974 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4984:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4986:	2300      	movs	r3, #0
   b4988:	e9c0 3300 	strd	r3, r3, [r0]
   b498c:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b498e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4990:	6849      	ldr	r1, [r1, #4]
   b4992:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4994:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4996:	dd10      	ble.n	b49ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b4998:	f7ff ffe4 	bl	b4964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b499c:	b168      	cbz	r0, b49ba <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b499e:	e9d5 3100 	ldrd	r3, r1, [r5]
   b49a2:	6822      	ldr	r2, [r4, #0]
   b49a4:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b49a6:	4299      	cmp	r1, r3
   b49a8:	d005      	beq.n	b49b6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b49aa:	b10a      	cbz	r2, b49b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b49ac:	7818      	ldrb	r0, [r3, #0]
   b49ae:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b49b0:	3301      	adds	r3, #1
   b49b2:	3201      	adds	r2, #1
   b49b4:	e7f7      	b.n	b49a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b49b6:	686b      	ldr	r3, [r5, #4]
   b49b8:	6063      	str	r3, [r4, #4]
    }
}
   b49ba:	4620      	mov	r0, r4
   b49bc:	bd38      	pop	{r3, r4, r5, pc}

000b49be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b49be:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b49c0:	6843      	ldr	r3, [r0, #4]
   b49c2:	3b01      	subs	r3, #1
    {
   b49c4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b49c6:	6043      	str	r3, [r0, #4]
   b49c8:	b963      	cbnz	r3, b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b49ca:	6803      	ldr	r3, [r0, #0]
   b49cc:	689b      	ldr	r3, [r3, #8]
   b49ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b49d0:	68a3      	ldr	r3, [r4, #8]
   b49d2:	3b01      	subs	r3, #1
   b49d4:	60a3      	str	r3, [r4, #8]
   b49d6:	b92b      	cbnz	r3, b49e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b49d8:	6823      	ldr	r3, [r4, #0]
   b49da:	4620      	mov	r0, r4
   b49dc:	68db      	ldr	r3, [r3, #12]
    }
   b49de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b49e2:	4718      	bx	r3
    }
   b49e4:	bd10      	pop	{r4, pc}

000b49e6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b49e6:	7441      	strb	r1, [r0, #17]
}
   b49e8:	4770      	bx	lr

000b49ea <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b49ea:	4770      	bx	lr

000b49ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b49ec:	4770      	bx	lr

000b49ee <_ZN9USBSerial4readEv>:
{
   b49ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b49f0:	2100      	movs	r1, #0
   b49f2:	7c00      	ldrb	r0, [r0, #16]
   b49f4:	f7ff fcba 	bl	b436c <HAL_USB_USART_Receive_Data>
}
   b49f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b49fc:	bd08      	pop	{r3, pc}

000b49fe <_ZN9USBSerial4peekEv>:
{
   b49fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4a00:	2101      	movs	r1, #1
   b4a02:	7c00      	ldrb	r0, [r0, #16]
   b4a04:	f7ff fcb2 	bl	b436c <HAL_USB_USART_Receive_Data>
}
   b4a08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4a0c:	bd08      	pop	{r3, pc}

000b4a0e <_ZN9USBSerial17availableForWriteEv>:
{
   b4a0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4a10:	7c00      	ldrb	r0, [r0, #16]
   b4a12:	f7ff fca3 	bl	b435c <HAL_USB_USART_Available_Data_For_Write>
}
   b4a16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a1a:	bd08      	pop	{r3, pc}

000b4a1c <_ZN9USBSerial9availableEv>:
{
   b4a1c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4a1e:	7c00      	ldrb	r0, [r0, #16]
   b4a20:	f7ff fc94 	bl	b434c <HAL_USB_USART_Available_Data>
}
   b4a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4a28:	bd08      	pop	{r3, pc}

000b4a2a <_ZN9USBSerial5writeEh>:
{
   b4a2a:	b513      	push	{r0, r1, r4, lr}
   b4a2c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4a2e:	7c00      	ldrb	r0, [r0, #16]
{
   b4a30:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4a32:	f7ff fc93 	bl	b435c <HAL_USB_USART_Available_Data_For_Write>
   b4a36:	2800      	cmp	r0, #0
   b4a38:	9901      	ldr	r1, [sp, #4]
   b4a3a:	dc01      	bgt.n	b4a40 <_ZN9USBSerial5writeEh+0x16>
   b4a3c:	7c60      	ldrb	r0, [r4, #17]
   b4a3e:	b120      	cbz	r0, b4a4a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4a40:	7c20      	ldrb	r0, [r4, #16]
   b4a42:	f7ff fc9b 	bl	b437c <HAL_USB_USART_Send_Data>
   b4a46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4a4a:	b002      	add	sp, #8
   b4a4c:	bd10      	pop	{r4, pc}

000b4a4e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4a4e:	7c00      	ldrb	r0, [r0, #16]
   b4a50:	f7ff bc9c 	b.w	b438c <HAL_USB_USART_Flush_Data>

000b4a54 <_ZN9USBSerialD0Ev>:
   b4a54:	b510      	push	{r4, lr}
   b4a56:	2114      	movs	r1, #20
   b4a58:	4604      	mov	r4, r0
   b4a5a:	f7ff fb30 	bl	b40be <_ZdlPvj>
   b4a5e:	4620      	mov	r0, r4
   b4a60:	bd10      	pop	{r4, pc}
	...

000b4a64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4a64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4a6a:	4604      	mov	r4, r0
   b4a6c:	4608      	mov	r0, r1
   b4a6e:	2100      	movs	r1, #0
   b4a70:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4a74:	4b04      	ldr	r3, [pc, #16]	; (b4a88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4a76:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4a78:	2301      	movs	r3, #1
  _serial = serial;
   b4a7a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4a7c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4a7e:	4611      	mov	r1, r2
   b4a80:	f7ff fc54 	bl	b432c <HAL_USB_USART_Init>
}
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd10      	pop	{r4, pc}
   b4a88:	000b7c18 	.word	0x000b7c18

000b4a8c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4a8c:	7c00      	ldrb	r0, [r0, #16]
   b4a8e:	2200      	movs	r2, #0
   b4a90:	f7ff bc54 	b.w	b433c <HAL_USB_USART_Begin>

000b4a94 <_Z19acquireSerialBufferv>:
{
   b4a94:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4a96:	2214      	movs	r2, #20
{
   b4a98:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4a9a:	2100      	movs	r1, #0
   b4a9c:	f002 ff74 	bl	b7988 <memset>
}
   b4aa0:	4620      	mov	r0, r4
   b4aa2:	bd10      	pop	{r4, pc}

000b4aa4 <_Z16_fetch_usbserialv>:
{
   b4aa4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4aa6:	4c0f      	ldr	r4, [pc, #60]	; (b4ae4 <_Z16_fetch_usbserialv+0x40>)
{
   b4aa8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4aaa:	a803      	add	r0, sp, #12
   b4aac:	f7ff fff2 	bl	b4a94 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ab0:	7821      	ldrb	r1, [r4, #0]
   b4ab2:	f3bf 8f5b 	dmb	ish
   b4ab6:	f011 0101 	ands.w	r1, r1, #1
   b4aba:	d10f      	bne.n	b4adc <_Z16_fetch_usbserialv+0x38>
   b4abc:	4620      	mov	r0, r4
   b4abe:	9101      	str	r1, [sp, #4]
   b4ac0:	f7ff faff 	bl	b40c2 <__cxa_guard_acquire>
   b4ac4:	9901      	ldr	r1, [sp, #4]
   b4ac6:	b148      	cbz	r0, b4adc <_Z16_fetch_usbserialv+0x38>
   b4ac8:	aa03      	add	r2, sp, #12
   b4aca:	4807      	ldr	r0, [pc, #28]	; (b4ae8 <_Z16_fetch_usbserialv+0x44>)
   b4acc:	f7ff ffca 	bl	b4a64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4ad0:	4620      	mov	r0, r4
   b4ad2:	f7ff fafb 	bl	b40cc <__cxa_guard_release>
   b4ad6:	4805      	ldr	r0, [pc, #20]	; (b4aec <_Z16_fetch_usbserialv+0x48>)
   b4ad8:	f002 ff18 	bl	b790c <atexit>
	return _usbserial;
}
   b4adc:	4802      	ldr	r0, [pc, #8]	; (b4ae8 <_Z16_fetch_usbserialv+0x44>)
   b4ade:	b008      	add	sp, #32
   b4ae0:	bd10      	pop	{r4, pc}
   b4ae2:	bf00      	nop
   b4ae4:	2003e6e4 	.word	0x2003e6e4
   b4ae8:	2003e6e8 	.word	0x2003e6e8
   b4aec:	000b49eb 	.word	0x000b49eb

000b4af0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4af0:	4770      	bx	lr

000b4af2 <_ZN9IPAddressD0Ev>:
   b4af2:	b510      	push	{r4, lr}
   b4af4:	2118      	movs	r1, #24
   b4af6:	4604      	mov	r4, r0
   b4af8:	f7ff fae1 	bl	b40be <_ZdlPvj>
   b4afc:	4620      	mov	r0, r4
   b4afe:	bd10      	pop	{r4, pc}

000b4b00 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4b00:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4b02:	7d03      	ldrb	r3, [r0, #20]
   b4b04:	2b06      	cmp	r3, #6
{
   b4b06:	b08d      	sub	sp, #52	; 0x34
   b4b08:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b0a:	f100 0704 	add.w	r7, r0, #4
   b4b0e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4b12:	d012      	beq.n	b4b3a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4b14:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4b18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4b1c:	220a      	movs	r2, #10
   b4b1e:	4630      	mov	r0, r6
   b4b20:	f000 f96b 	bl	b4dfa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4b24:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4b26:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4b28:	d019      	beq.n	b4b5e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4b2a:	2c00      	cmp	r4, #0
   b4b2c:	d0f4      	beq.n	b4b18 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4b2e:	212e      	movs	r1, #46	; 0x2e
   b4b30:	4630      	mov	r0, r6
   b4b32:	f000 f95f 	bl	b4df4 <_ZN5Print5printEc>
   b4b36:	4404      	add	r4, r0
   b4b38:	e7ee      	b.n	b4b18 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b3a:	232f      	movs	r3, #47	; 0x2f
   b4b3c:	466a      	mov	r2, sp
   b4b3e:	4639      	mov	r1, r7
   b4b40:	200a      	movs	r0, #10
		buf[0] = 0;
   b4b42:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4b46:	f7ff fc61 	bl	b440c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4b4a:	4668      	mov	r0, sp
   b4b4c:	f7ff fa70 	bl	b4030 <strlen>
   b4b50:	6833      	ldr	r3, [r6, #0]
   b4b52:	4602      	mov	r2, r0
   b4b54:	68db      	ldr	r3, [r3, #12]
   b4b56:	4669      	mov	r1, sp
   b4b58:	4630      	mov	r0, r6
   b4b5a:	4798      	blx	r3
   b4b5c:	4604      	mov	r4, r0
    }
    return n;
}
   b4b5e:	4620      	mov	r0, r4
   b4b60:	b00d      	add	sp, #52	; 0x34
   b4b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4b64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4b64:	b510      	push	{r4, lr}
   b4b66:	4b05      	ldr	r3, [pc, #20]	; (b4b7c <_ZN9IPAddressC1Ev+0x18>)
   b4b68:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4b6a:	2211      	movs	r2, #17
   b4b6c:	f840 3b04 	str.w	r3, [r0], #4
   b4b70:	2100      	movs	r1, #0
   b4b72:	f002 ff09 	bl	b7988 <memset>
}
   b4b76:	4620      	mov	r0, r4
   b4b78:	bd10      	pop	{r4, pc}
   b4b7a:	bf00      	nop
   b4b7c:	000b7c48 	.word	0x000b7c48

000b4b80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4b80:	4603      	mov	r3, r0
   b4b82:	4a07      	ldr	r2, [pc, #28]	; (b4ba0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4b84:	b510      	push	{r4, lr}
   b4b86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4b8a:	f101 0210 	add.w	r2, r1, #16
   b4b8e:	f851 4b04 	ldr.w	r4, [r1], #4
   b4b92:	f843 4b04 	str.w	r4, [r3], #4
   b4b96:	4291      	cmp	r1, r2
   b4b98:	d1f9      	bne.n	b4b8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4b9a:	780a      	ldrb	r2, [r1, #0]
   b4b9c:	701a      	strb	r2, [r3, #0]
}
   b4b9e:	bd10      	pop	{r4, pc}
   b4ba0:	000b7c48 	.word	0x000b7c48

000b4ba4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4ba4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4ba6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4baa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4bae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4bb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4bb6:	2304      	movs	r3, #4
   b4bb8:	6041      	str	r1, [r0, #4]
   b4bba:	7503      	strb	r3, [r0, #20]
}
   b4bbc:	bd10      	pop	{r4, pc}
	...

000b4bc0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4bc0:	b507      	push	{r0, r1, r2, lr}
   b4bc2:	4b06      	ldr	r3, [pc, #24]	; (b4bdc <_ZN9IPAddressC1EPKh+0x1c>)
   b4bc4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4bc6:	78cb      	ldrb	r3, [r1, #3]
   b4bc8:	9300      	str	r3, [sp, #0]
   b4bca:	788b      	ldrb	r3, [r1, #2]
   b4bcc:	784a      	ldrb	r2, [r1, #1]
   b4bce:	7809      	ldrb	r1, [r1, #0]
   b4bd0:	f7ff ffe8 	bl	b4ba4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4bd4:	b003      	add	sp, #12
   b4bd6:	f85d fb04 	ldr.w	pc, [sp], #4
   b4bda:	bf00      	nop
   b4bdc:	000b7c48 	.word	0x000b7c48

000b4be0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4be0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4be2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4be4:	4604      	mov	r4, r0
      if (_M_manager)
   b4be6:	b113      	cbz	r3, b4bee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4be8:	2203      	movs	r2, #3
   b4bea:	4601      	mov	r1, r0
   b4bec:	4798      	blx	r3
    }
   b4bee:	4620      	mov	r0, r4
   b4bf0:	bd10      	pop	{r4, pc}

000b4bf2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4bf2:	b513      	push	{r0, r1, r4, lr}
   b4bf4:	460b      	mov	r3, r1
   b4bf6:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4bf8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4bfc:	466c      	mov	r4, sp
   b4bfe:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4c02:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4c06:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4c0e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4c12:	b002      	add	sp, #8
   b4c14:	bd10      	pop	{r4, pc}
	...

000b4c18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4c18:	4b01      	ldr	r3, [pc, #4]	; (b4c20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4c1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4c1c:	4770      	bx	lr
   b4c1e:	bf00      	nop
   b4c20:	2003e328 	.word	0x2003e328

000b4c24 <serialEventRun>:
{
   b4c24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4c26:	4b0b      	ldr	r3, [pc, #44]	; (b4c54 <serialEventRun+0x30>)
   b4c28:	b143      	cbz	r3, b4c3c <serialEventRun+0x18>
   b4c2a:	f7ff ff3b 	bl	b4aa4 <_Z16_fetch_usbserialv>
   b4c2e:	6803      	ldr	r3, [r0, #0]
   b4c30:	691b      	ldr	r3, [r3, #16]
   b4c32:	4798      	blx	r3
   b4c34:	2800      	cmp	r0, #0
   b4c36:	dd01      	ble.n	b4c3c <serialEventRun+0x18>
        serialEvent();
   b4c38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4c3c:	4b06      	ldr	r3, [pc, #24]	; (b4c58 <serialEventRun+0x34>)
   b4c3e:	b143      	cbz	r3, b4c52 <serialEventRun+0x2e>
   b4c40:	f002 fd28 	bl	b7694 <_Z22__fetch_global_Serial1v>
   b4c44:	6803      	ldr	r3, [r0, #0]
   b4c46:	691b      	ldr	r3, [r3, #16]
   b4c48:	4798      	blx	r3
   b4c4a:	2800      	cmp	r0, #0
   b4c4c:	dd01      	ble.n	b4c52 <serialEventRun+0x2e>
        serialEvent1();
   b4c4e:	f3af 8000 	nop.w
}
   b4c52:	bd08      	pop	{r3, pc}
	...

000b4c5c <_post_loop>:
{
   b4c5c:	b508      	push	{r3, lr}
	serialEventRun();
   b4c5e:	f7ff ffe1 	bl	b4c24 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4c62:	f7ff fc95 	bl	b4590 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4c66:	4b01      	ldr	r3, [pc, #4]	; (b4c6c <_post_loop+0x10>)
   b4c68:	6018      	str	r0, [r3, #0]
}
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	2003e740 	.word	0x2003e740

000b4c70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c70:	4805      	ldr	r0, [pc, #20]	; (b4c88 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4c72:	4a06      	ldr	r2, [pc, #24]	; (b4c8c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4c74:	4906      	ldr	r1, [pc, #24]	; (b4c90 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4c76:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4c78:	1a12      	subs	r2, r2, r0
   b4c7a:	f002 fe5d 	bl	b7938 <memcpy>
    __backup_sram_signature = signature;
   b4c7e:	4b05      	ldr	r3, [pc, #20]	; (b4c94 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4c80:	4a05      	ldr	r2, [pc, #20]	; (b4c98 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4c82:	601a      	str	r2, [r3, #0]
}
   b4c84:	bd08      	pop	{r3, pc}
   b4c86:	bf00      	nop
   b4c88:	2003f400 	.word	0x2003f400
   b4c8c:	2003f404 	.word	0x2003f404
   b4c90:	000b816c 	.word	0x000b816c
   b4c94:	2003f400 	.word	0x2003f400
   b4c98:	9a271c1e 	.word	0x9a271c1e

000b4c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4c9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4c9e:	2300      	movs	r3, #0
   b4ca0:	9300      	str	r3, [sp, #0]
   b4ca2:	461a      	mov	r2, r3
   b4ca4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4ca8:	f7ff fd1c 	bl	b46e4 <system_ctrl_set_result>
}
   b4cac:	b003      	add	sp, #12
   b4cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4cb4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4cb4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4cb6:	8843      	ldrh	r3, [r0, #2]
   b4cb8:	2b0a      	cmp	r3, #10
   b4cba:	d008      	beq.n	b4cce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4cbc:	2b50      	cmp	r3, #80	; 0x50
   b4cbe:	d10b      	bne.n	b4cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4cc0:	4b09      	ldr	r3, [pc, #36]	; (b4ce8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4cc2:	681b      	ldr	r3, [r3, #0]
   b4cc4:	b14b      	cbz	r3, b4cda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4cc6:	b003      	add	sp, #12
   b4cc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4ccc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4cce:	f7ff ffe5 	bl	b4c9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4cd2:	b003      	add	sp, #12
   b4cd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4cd8:	2300      	movs	r3, #0
   b4cda:	9300      	str	r3, [sp, #0]
   b4cdc:	461a      	mov	r2, r3
   b4cde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4ce2:	f7ff fcff 	bl	b46e4 <system_ctrl_set_result>
}
   b4ce6:	e7f4      	b.n	b4cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4ce8:	2003e700 	.word	0x2003e700

000b4cec <module_user_init_hook>:
{
   b4cec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4cee:	4812      	ldr	r0, [pc, #72]	; (b4d38 <module_user_init_hook+0x4c>)
   b4cf0:	2100      	movs	r1, #0
   b4cf2:	f7ff fd29 	bl	b4748 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4cf6:	4b11      	ldr	r3, [pc, #68]	; (b4d3c <module_user_init_hook+0x50>)
   b4cf8:	681a      	ldr	r2, [r3, #0]
   b4cfa:	4b11      	ldr	r3, [pc, #68]	; (b4d40 <module_user_init_hook+0x54>)
   b4cfc:	429a      	cmp	r2, r3
   b4cfe:	4b11      	ldr	r3, [pc, #68]	; (b4d44 <module_user_init_hook+0x58>)
   b4d00:	bf0c      	ite	eq
   b4d02:	2201      	moveq	r2, #1
   b4d04:	2200      	movne	r2, #0
   b4d06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4d08:	d001      	beq.n	b4d0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4d0a:	f7ff ffb1 	bl	b4c70 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4d0e:	f7ff fc2f 	bl	b4570 <HAL_RNG_GetRandomNumber>
   b4d12:	4604      	mov	r4, r0
    srand(seed);
   b4d14:	f002 fe40 	bl	b7998 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4d18:	4b0b      	ldr	r3, [pc, #44]	; (b4d48 <module_user_init_hook+0x5c>)
   b4d1a:	b113      	cbz	r3, b4d22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4d1c:	4620      	mov	r0, r4
   b4d1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4d22:	2100      	movs	r1, #0
   b4d24:	4808      	ldr	r0, [pc, #32]	; (b4d48 <module_user_init_hook+0x5c>)
   b4d26:	f7ff fc63 	bl	b45f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4d2e:	4807      	ldr	r0, [pc, #28]	; (b4d4c <module_user_init_hook+0x60>)
   b4d30:	2100      	movs	r1, #0
   b4d32:	f7ff bccd 	b.w	b46d0 <system_ctrl_set_app_request_handler>
   b4d36:	bf00      	nop
   b4d38:	000b4c19 	.word	0x000b4c19
   b4d3c:	2003f400 	.word	0x2003f400
   b4d40:	9a271c1e 	.word	0x9a271c1e
   b4d44:	2003e6fc 	.word	0x2003e6fc
   b4d48:	00000000 	.word	0x00000000
   b4d4c:	000b4cb5 	.word	0x000b4cb5

000b4d50 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4d50:	4b01      	ldr	r3, [pc, #4]	; (b4d58 <_GLOBAL__sub_I_RGB+0x8>)
   b4d52:	2200      	movs	r2, #0
   b4d54:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4d56:	4770      	bx	lr
   b4d58:	2003e704 	.word	0x2003e704

000b4d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4d5c:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4d5e:	681a      	ldr	r2, [r3, #0]
   b4d60:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4d62:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4d64:	4770      	bx	lr
   b4d66:	bf00      	nop
   b4d68:	2003e324 	.word	0x2003e324
   b4d6c:	2003e714 	.word	0x2003e714

000b4d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d70:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d72:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d76:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d78:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4d7c:	42ae      	cmp	r6, r5
   b4d7e:	d004      	beq.n	b4d8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b4d80:	4628      	mov	r0, r5
   b4d82:	f002 fb73 	bl	b746c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4d86:	3510      	adds	r5, #16
   b4d88:	e7f8      	b.n	b4d7c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4d8a:	6820      	ldr	r0, [r4, #0]
   b4d8c:	f7ff fcbc 	bl	b4708 <free>
    AllocatorT::free(data_);
}
   b4d90:	4620      	mov	r0, r4
   b4d92:	bd70      	pop	{r4, r5, r6, pc}

000b4d94 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4d94:	4b01      	ldr	r3, [pc, #4]	; (b4d9c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4d96:	4a02      	ldr	r2, [pc, #8]	; (b4da0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4d98:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4d9a:	4770      	bx	lr
   b4d9c:	2003e718 	.word	0x2003e718
   b4da0:	000b7c70 	.word	0x000b7c70

000b4da4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4da6:	4606      	mov	r6, r0
   b4da8:	460d      	mov	r5, r1
  size_t n = 0;
   b4daa:	188f      	adds	r7, r1, r2
   b4dac:	2400      	movs	r4, #0
  while (size--) {
   b4dae:	42bd      	cmp	r5, r7
   b4db0:	d00c      	beq.n	b4dcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4db2:	6833      	ldr	r3, [r6, #0]
   b4db4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4db8:	689b      	ldr	r3, [r3, #8]
   b4dba:	4630      	mov	r0, r6
   b4dbc:	4798      	blx	r3
     if (chunk>=0)
   b4dbe:	1e03      	subs	r3, r0, #0
   b4dc0:	db01      	blt.n	b4dc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4dc2:	441c      	add	r4, r3
  while (size--) {
   b4dc4:	e7f3      	b.n	b4dae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4dc6:	2c00      	cmp	r4, #0
   b4dc8:	bf08      	it	eq
   b4dca:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4dcc:	4620      	mov	r0, r4
   b4dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4dd0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4dd0:	b513      	push	{r0, r1, r4, lr}
   b4dd2:	4604      	mov	r4, r0
    }
   b4dd4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4dd6:	b159      	cbz	r1, b4df0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4dd8:	9101      	str	r1, [sp, #4]
   b4dda:	f7ff f929 	bl	b4030 <strlen>
   b4dde:	6823      	ldr	r3, [r4, #0]
   b4de0:	9901      	ldr	r1, [sp, #4]
   b4de2:	68db      	ldr	r3, [r3, #12]
   b4de4:	4602      	mov	r2, r0
   b4de6:	4620      	mov	r0, r4
    }
   b4de8:	b002      	add	sp, #8
   b4dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4dee:	4718      	bx	r3
    }
   b4df0:	b002      	add	sp, #8
   b4df2:	bd10      	pop	{r4, pc}

000b4df4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4df4:	6803      	ldr	r3, [r0, #0]
   b4df6:	689b      	ldr	r3, [r3, #8]
   b4df8:	4718      	bx	r3

000b4dfa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4dfa:	b530      	push	{r4, r5, lr}
   b4dfc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4dfe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4e00:	2a01      	cmp	r2, #1
  *str = '\0';
   b4e02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4e06:	bf98      	it	ls
   b4e08:	220a      	movls	r2, #10
   b4e0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4e0c:	460d      	mov	r5, r1
   b4e0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4e12:	fb01 5312 	mls	r3, r1, r2, r5
   b4e16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e1a:	2b09      	cmp	r3, #9
   b4e1c:	bf94      	ite	ls
   b4e1e:	3330      	addls	r3, #48	; 0x30
   b4e20:	3337      	addhi	r3, #55	; 0x37
   b4e22:	b2db      	uxtb	r3, r3
  } while(n);
   b4e24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4e26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4e2a:	d9ef      	bls.n	b4e0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4e2c:	4621      	mov	r1, r4
   b4e2e:	f7ff ffcf 	bl	b4dd0 <_ZN5Print5writeEPKc>
}
   b4e32:	b00b      	add	sp, #44	; 0x2c
   b4e34:	bd30      	pop	{r4, r5, pc}

000b4e36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4e36:	4770      	bx	lr

000b4e38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4e38:	4770      	bx	lr

000b4e3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4e3a:	4770      	bx	lr

000b4e3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4e3c:	4770      	bx	lr
	...

000b4e40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4e40:	4b06      	ldr	r3, [pc, #24]	; (b4e5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4e42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4e44:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4e46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4e4a:	d005      	beq.n	b4e58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4e4c:	4608      	mov	r0, r1
   b4e4e:	f002 fc4b 	bl	b76e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4e52:	2800      	cmp	r0, #0
   b4e54:	bf08      	it	eq
   b4e56:	2400      	moveq	r4, #0
      }
   b4e58:	4620      	mov	r0, r4
   b4e5a:	bd10      	pop	{r4, pc}
   b4e5c:	000b7c08 	.word	0x000b7c08

000b4e60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4e60:	4b06      	ldr	r3, [pc, #24]	; (b4e7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4e62:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4e64:	b510      	push	{r4, lr}
   b4e66:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4e6a:	d005      	beq.n	b4e78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4e6c:	4608      	mov	r0, r1
   b4e6e:	f002 fc3b 	bl	b76e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4e72:	2800      	cmp	r0, #0
   b4e74:	bf08      	it	eq
   b4e76:	2400      	moveq	r4, #0
      }
   b4e78:	4620      	mov	r0, r4
   b4e7a:	bd10      	pop	{r4, pc}
   b4e7c:	000b7c08 	.word	0x000b7c08

000b4e80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4e80:	4b06      	ldr	r3, [pc, #24]	; (b4e9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4e82:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4e84:	b510      	push	{r4, lr}
   b4e86:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4e8a:	d005      	beq.n	b4e98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4e8c:	4608      	mov	r0, r1
   b4e8e:	f002 fc2b 	bl	b76e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4e92:	2800      	cmp	r0, #0
   b4e94:	bf08      	it	eq
   b4e96:	2400      	moveq	r4, #0
      }
   b4e98:	4620      	mov	r0, r4
   b4e9a:	bd10      	pop	{r4, pc}
   b4e9c:	000b7c08 	.word	0x000b7c08

000b4ea0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4ea0:	b510      	push	{r4, lr}
   b4ea2:	2168      	movs	r1, #104	; 0x68
   b4ea4:	4604      	mov	r4, r0
   b4ea6:	f7ff f90a 	bl	b40be <_ZdlPvj>
   b4eaa:	4620      	mov	r0, r4
   b4eac:	bd10      	pop	{r4, pc}

000b4eae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4eae:	b510      	push	{r4, lr}
   b4eb0:	2128      	movs	r1, #40	; 0x28
   b4eb2:	4604      	mov	r4, r0
   b4eb4:	f7ff f903 	bl	b40be <_ZdlPvj>
   b4eb8:	4620      	mov	r0, r4
   b4eba:	bd10      	pop	{r4, pc}

000b4ebc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4ebc:	b510      	push	{r4, lr}
   b4ebe:	2130      	movs	r1, #48	; 0x30
   b4ec0:	4604      	mov	r4, r0
   b4ec2:	f7ff f8fc 	bl	b40be <_ZdlPvj>
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	bd10      	pop	{r4, pc}

000b4eca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4eca:	2168      	movs	r1, #104	; 0x68
   b4ecc:	f7ff b8f7 	b.w	b40be <_ZdlPvj>

000b4ed0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4ed0:	2128      	movs	r1, #40	; 0x28
   b4ed2:	f7ff b8f4 	b.w	b40be <_ZdlPvj>

000b4ed6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4ed6:	2130      	movs	r1, #48	; 0x30
   b4ed8:	f7ff b8f1 	b.w	b40be <_ZdlPvj>

000b4edc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4ede:	2500      	movs	r5, #0
   b4ee0:	1cec      	adds	r4, r5, #3
   b4ee2:	428c      	cmp	r4, r1
   b4ee4:	d80d      	bhi.n	b4f02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4ee6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4ee8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4eea:	5d87      	ldrb	r7, [r0, r6]
   b4eec:	4297      	cmp	r7, r2
   b4eee:	d105      	bne.n	b4efc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4ef0:	4426      	add	r6, r4
   b4ef2:	42b1      	cmp	r1, r6
   b4ef4:	d305      	bcc.n	b4f02 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4ef6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4ef8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4efc:	3401      	adds	r4, #1
   b4efe:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4f00:	e7ee      	b.n	b4ee0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4f02:	2000      	movs	r0, #0
   b4f04:	e7f9      	b.n	b4efa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b4f08 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4f08:	4a02      	ldr	r2, [pc, #8]	; (b4f14 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4f0a:	4903      	ldr	r1, [pc, #12]	; (b4f18 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b4f0c:	200a      	movs	r0, #10
   b4f0e:	f7ff bb57 	b.w	b45c0 <panic_>
   b4f12:	bf00      	nop
   b4f14:	000b4581 	.word	0x000b4581
   b4f18:	000b7c74 	.word	0x000b7c74

000b4f1c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4f1c:	b430      	push	{r4, r5}
   b4f1e:	460d      	mov	r5, r1
   b4f20:	4611      	mov	r1, r2
   b4f22:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4f24:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4f26:	6809      	ldr	r1, [r1, #0]
   b4f28:	6828      	ldr	r0, [r5, #0]
   b4f2a:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4f2e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4f30:	bc30      	pop	{r4, r5}
   b4f32:	4760      	bx	ip

000b4f34 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4f34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4f36:	b538      	push	{r3, r4, r5, lr}
   b4f38:	4604      	mov	r4, r0
	switch (__op)
   b4f3a:	d102      	bne.n	b4f42 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4f3c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4f3e:	6023      	str	r3, [r4, #0]
	}
   b4f40:	e003      	b.n	b4f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4f42:	2a02      	cmp	r2, #2
   b4f44:	d003      	beq.n	b4f4e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4f46:	2a03      	cmp	r2, #3
   b4f48:	d00d      	beq.n	b4f66 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4f4a:	2000      	movs	r0, #0
   b4f4c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f4e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4f50:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4f52:	f7ff f8b0 	bl	b40b6 <_Znwj>
   b4f56:	4603      	mov	r3, r0
   b4f58:	2800      	cmp	r0, #0
   b4f5a:	d0f0      	beq.n	b4f3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4f5c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4f60:	e883 0003 	stmia.w	r3, {r0, r1}
   b4f64:	e7eb      	b.n	b4f3e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4f66:	6800      	ldr	r0, [r0, #0]
   b4f68:	2800      	cmp	r0, #0
   b4f6a:	d0ee      	beq.n	b4f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4f6c:	2108      	movs	r1, #8
   b4f6e:	f7ff f8a6 	bl	b40be <_ZdlPvj>
   b4f72:	e7ea      	b.n	b4f4a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4f74 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b4f74:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b4f76:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4f78:	4604      	mov	r4, r0
	if (_M_manager)
   b4f7a:	b12b      	cbz	r3, b4f88 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4f7c:	2203      	movs	r2, #3
   b4f7e:	4601      	mov	r1, r0
   b4f80:	4798      	blx	r3
	    _M_manager = nullptr;
   b4f82:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4f84:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b4f88:	bd10      	pop	{r4, pc}

000b4f8a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b4f8a:	b510      	push	{r4, lr}
	if (_M_manager)
   b4f8c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b4f8e:	4604      	mov	r4, r0
	if (_M_manager)
   b4f90:	b12b      	cbz	r3, b4f9e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b4f92:	2203      	movs	r2, #3
   b4f94:	4601      	mov	r1, r0
   b4f96:	4798      	blx	r3
	    _M_manager = nullptr;
   b4f98:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b4f9a:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b4f9e:	bd10      	pop	{r4, pc}

000b4fa0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b4fa0:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b4fa2:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b4fa4:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b4fa6:	2220      	movs	r2, #32
   b4fa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b4fac:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b4fae:	4a08      	ldr	r2, [pc, #32]	; (b4fd0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b4fb0:	9200      	str	r2, [sp, #0]
   b4fb2:	4908      	ldr	r1, [pc, #32]	; (b4fd4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b4fb4:	aa02      	add	r2, sp, #8
   b4fb6:	2001      	movs	r0, #1
   b4fb8:	f7ff fb0a 	bl	b45d0 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4fbc:	6820      	ldr	r0, [r4, #0]
   b4fbe:	4906      	ldr	r1, [pc, #24]	; (b4fd8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b4fc0:	8800      	ldrh	r0, [r0, #0]
   b4fc2:	2300      	movs	r3, #0
   b4fc4:	4622      	mov	r2, r4
    }
   b4fc6:	b00a      	add	sp, #40	; 0x28
   b4fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b4fcc:	f7ff ba6c 	b.w	b44a8 <hal_ble_gatt_client_discover_all_services>
   b4fd0:	000b7c96 	.word	0x000b7c96
   b4fd4:	000b7c8b 	.word	0x000b7c8b
   b4fd8:	000b69c5 	.word	0x000b69c5

000b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b4fdc:	b510      	push	{r4, lr}
   b4fde:	3801      	subs	r0, #1
   b4fe0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b4fe4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b4fe8:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b4fea:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b4fee:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b4ff0:	bf88      	it	hi
   b4ff2:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b4ff6:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b4ffa:	7803      	ldrb	r3, [r0, #0]
   b4ffc:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b5000:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b5004:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b5006:	bf88      	it	hi
   b5008:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b500c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b500e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b5012:	d1e7      	bne.n	b4fe4 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b5014:	bd10      	pop	{r4, pc}

000b5016 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5016:	b510      	push	{r4, lr}
   b5018:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b501a:	3058      	adds	r0, #88	; 0x58
   b501c:	f7ff fde0 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5020:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5028:	f002 ba20 	b.w	b746c <_ZN6StringD1Ev>

000b502c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b502c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b502e:	6803      	ldr	r3, [r0, #0]
   b5030:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b5032:	4605      	mov	r5, r0
   b5034:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b5036:	d008      	beq.n	b504a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b5038:	b111      	cbz	r1, b5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b503a:	684b      	ldr	r3, [r1, #4]
   b503c:	3301      	adds	r3, #1
   b503e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b5040:	6828      	ldr	r0, [r5, #0]
   b5042:	b108      	cbz	r0, b5048 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b5044:	f7ff fcbb 	bl	b49be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5048:	602c      	str	r4, [r5, #0]
      }
   b504a:	bd38      	pop	{r3, r4, r5, pc}

000b504c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b504c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5050:	b2da      	uxtb	r2, r3
   b5052:	2a09      	cmp	r2, #9
   b5054:	d801      	bhi.n	b505a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b5056:	4618      	mov	r0, r3
   b5058:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b505a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b505e:	2b05      	cmp	r3, #5
   b5060:	d801      	bhi.n	b5066 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b5062:	3857      	subs	r0, #87	; 0x57
   b5064:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b5066:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b506a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b506c:	bf94      	ite	ls
   b506e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5070:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b5074:	4770      	bx	lr
	...

000b5078 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5078:	b510      	push	{r4, lr}
            locked_(false) {
   b507a:	2300      	movs	r3, #0
   b507c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b507e:	4b04      	ldr	r3, [pc, #16]	; (b5090 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5080:	4604      	mov	r4, r0
   b5082:	6818      	ldr	r0, [r3, #0]
   b5084:	f7ff f9d2 	bl	b442c <os_mutex_recursive_lock>
        locked_ = true;
   b5088:	2301      	movs	r3, #1
   b508a:	7023      	strb	r3, [r4, #0]
    }
   b508c:	4620      	mov	r0, r4
   b508e:	bd10      	pop	{r4, pc}
   b5090:	2003e720 	.word	0x2003e720

000b5094 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5094:	b510      	push	{r4, lr}
        if (locked_) {
   b5096:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5098:	4604      	mov	r4, r0
        if (locked_) {
   b509a:	b11b      	cbz	r3, b50a4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b509c:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b509e:	6818      	ldr	r0, [r3, #0]
   b50a0:	f7ff f9cc 	bl	b443c <os_mutex_recursive_unlock>
    }
   b50a4:	4620      	mov	r0, r4
   b50a6:	bd10      	pop	{r4, pc}
   b50a8:	2003e720 	.word	0x2003e720

000b50ac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b50ac:	b082      	sub	sp, #8
   b50ae:	4603      	mov	r3, r0
    address_ = addr;
   b50b0:	6808      	ldr	r0, [r1, #0]
   b50b2:	6849      	ldr	r1, [r1, #4]
   b50b4:	466a      	mov	r2, sp
   b50b6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b50b8:	466a      	mov	r2, sp
   b50ba:	ca03      	ldmia	r2!, {r0, r1}
   b50bc:	6018      	str	r0, [r3, #0]
}
   b50be:	4618      	mov	r0, r3
    address_ = addr.address_;
   b50c0:	6059      	str	r1, [r3, #4]
}
   b50c2:	b002      	add	sp, #8
   b50c4:	4770      	bx	lr

000b50c6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b50c6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b50c8:	7982      	ldrb	r2, [r0, #6]
   b50ca:	798b      	ldrb	r3, [r1, #6]
   b50cc:	429a      	cmp	r2, r3
   b50ce:	d106      	bne.n	b50de <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b50d0:	2206      	movs	r2, #6
   b50d2:	f002 fc21 	bl	b7918 <memcmp>
   b50d6:	fab0 f080 	clz	r0, r0
   b50da:	0940      	lsrs	r0, r0, #5
}
   b50dc:	bd08      	pop	{r3, pc}
    return false;
   b50de:	2000      	movs	r0, #0
   b50e0:	e7fc      	b.n	b50dc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b50e2 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b50e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b50e6:	6003      	str	r3, [r0, #0]
   b50e8:	8083      	strh	r3, [r0, #4]
}
   b50ea:	2000      	movs	r0, #0
   b50ec:	4770      	bx	lr

000b50ee <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b50ee:	b508      	push	{r3, lr}
   b50f0:	4602      	mov	r2, r0
        : address_{} {
   b50f2:	2100      	movs	r1, #0
   b50f4:	6001      	str	r1, [r0, #0]
   b50f6:	6041      	str	r1, [r0, #4]
    clear();
   b50f8:	f7ff fff3 	bl	b50e2 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b50fc:	7191      	strb	r1, [r2, #6]
}
   b50fe:	4610      	mov	r0, r2
   b5100:	bd08      	pop	{r3, pc}
	...

000b5104 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5104:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5106:	2301      	movs	r3, #1
   b5108:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b510a:	4b05      	ldr	r3, [pc, #20]	; (b5120 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b510c:	4602      	mov	r2, r0
   b510e:	f103 0110 	add.w	r1, r3, #16
   b5112:	f853 4b04 	ldr.w	r4, [r3], #4
   b5116:	f842 4b04 	str.w	r4, [r2], #4
   b511a:	428b      	cmp	r3, r1
   b511c:	d1f9      	bne.n	b5112 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b511e:	bd10      	pop	{r4, pc}
   b5120:	000b7aee 	.word	0x000b7aee

000b5124 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b5124:	7c0b      	ldrb	r3, [r1, #16]
   b5126:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b512a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b512c:	d10d      	bne.n	b514a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b512e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5130:	4b0c      	ldr	r3, [pc, #48]	; (b5164 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b5132:	4602      	mov	r2, r0
   b5134:	f103 0410 	add.w	r4, r3, #16
   b5138:	f853 5b04 	ldr.w	r5, [r3], #4
   b513c:	f842 5b04 	str.w	r5, [r2], #4
   b5140:	42a3      	cmp	r3, r4
   b5142:	d1f9      	bne.n	b5138 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b5144:	880b      	ldrh	r3, [r1, #0]
   b5146:	8183      	strh	r3, [r0, #12]
}
   b5148:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b514a:	2301      	movs	r3, #1
   b514c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b514e:	f101 0210 	add.w	r2, r1, #16
   b5152:	4603      	mov	r3, r0
   b5154:	f851 4b04 	ldr.w	r4, [r1], #4
   b5158:	f843 4b04 	str.w	r4, [r3], #4
   b515c:	4291      	cmp	r1, r2
   b515e:	d1f9      	bne.n	b5154 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b5160:	e7f2      	b.n	b5148 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b5162:	bf00      	nop
   b5164:	000b7aee 	.word	0x000b7aee

000b5168 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5168:	b510      	push	{r4, lr}
    if (uuid128) {
   b516a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b516c:	4604      	mov	r4, r0
    if (uuid128) {
   b516e:	b1b1      	cbz	r1, b519e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b5170:	2a01      	cmp	r2, #1
   b5172:	f101 0210 	add.w	r2, r1, #16
   b5176:	d10a      	bne.n	b518e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5178:	4601      	mov	r1, r0
   b517a:	f853 0b04 	ldr.w	r0, [r3], #4
   b517e:	f841 0b04 	str.w	r0, [r1], #4
   b5182:	4293      	cmp	r3, r2
   b5184:	d1f9      	bne.n	b517a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5186:	2301      	movs	r3, #1
   b5188:	6123      	str	r3, [r4, #16]
}
   b518a:	4620      	mov	r0, r4
   b518c:	bd10      	pop	{r4, pc}
   b518e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b5190:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b5194:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b5198:	429a      	cmp	r2, r3
   b519a:	d1f9      	bne.n	b5190 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b519c:	e7f3      	b.n	b5186 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b519e:	2210      	movs	r2, #16
   b51a0:	f002 fbf2 	bl	b7988 <memset>
   b51a4:	e7f1      	b.n	b518a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b51a6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b51a6:	b538      	push	{r3, r4, r5, lr}
   b51a8:	4604      	mov	r4, r0
   b51aa:	460d      	mov	r5, r1
        : BleUuid() {
   b51ac:	f7ff ffaa 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b51b0:	2300      	movs	r3, #0
   b51b2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b51b4:	81a5      	strh	r5, [r4, #12]
}
   b51b6:	4620      	mov	r0, r4
   b51b8:	bd38      	pop	{r3, r4, r5, pc}

000b51ba <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b51ba:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b51bc:	6902      	ldr	r2, [r0, #16]
   b51be:	690b      	ldr	r3, [r1, #16]
   b51c0:	429a      	cmp	r2, r3
   b51c2:	d106      	bne.n	b51d2 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b51c4:	2210      	movs	r2, #16
   b51c6:	f002 fba7 	bl	b7918 <memcmp>
   b51ca:	fab0 f080 	clz	r0, r0
   b51ce:	0940      	lsrs	r0, r0, #5
}
   b51d0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b51d2:	2000      	movs	r0, #0
   b51d4:	e7fc      	b.n	b51d0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b51d8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b51d8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b51da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b51de:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b51e0:	4b34      	ldr	r3, [pc, #208]	; (b52b4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b51e2:	460c      	mov	r4, r1
   b51e4:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b51e6:	4602      	mov	r2, r0
   b51e8:	f103 0110 	add.w	r1, r3, #16
   b51ec:	f853 0b04 	ldr.w	r0, [r3], #4
   b51f0:	f842 0b04 	str.w	r0, [r2], #4
   b51f4:	428b      	cmp	r3, r1
   b51f6:	d1f9      	bne.n	b51ec <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b51f8:	b344      	cbz	r4, b524c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b51fa:	2124      	movs	r1, #36	; 0x24
   b51fc:	4620      	mov	r0, r4
   b51fe:	f002 fc01 	bl	b7a04 <strnlen>
   b5202:	2804      	cmp	r0, #4
   b5204:	f04f 0500 	mov.w	r5, #0
   b5208:	d123      	bne.n	b5252 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b520a:	f8ad 5004 	strh.w	r5, [sp, #4]
   b520e:	af01      	add	r7, sp, #4
   b5210:	1ca5      	adds	r5, r4, #2
   b5212:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5214:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5218:	f7ff ff18 	bl	b504c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b521c:	f1b0 0800 	subs.w	r8, r0, #0
   b5220:	db12      	blt.n	b5248 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5222:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b5226:	f7ff ff11 	bl	b504c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b522a:	2800      	cmp	r0, #0
   b522c:	db0c      	blt.n	b5248 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b522e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5230:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5234:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5236:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b523a:	d1eb      	bne.n	b5214 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b523c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5240:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b5242:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5246:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5248:	2300      	movs	r3, #0
   b524a:	6133      	str	r3, [r6, #16]
}
   b524c:	b002      	add	sp, #8
   b524e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5252:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5256:	2124      	movs	r1, #36	; 0x24
   b5258:	4620      	mov	r0, r4
   b525a:	f002 fbd3 	bl	b7a04 <strnlen>
   b525e:	42a8      	cmp	r0, r5
   b5260:	d807      	bhi.n	b5272 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5262:	4642      	mov	r2, r8
   b5264:	2100      	movs	r1, #0
   b5266:	4630      	mov	r0, r6
}
   b5268:	b002      	add	sp, #8
   b526a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b526e:	f002 bb8b 	b.w	b7988 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5272:	f1b8 0f00 	cmp.w	r8, #0
   b5276:	d0e9      	beq.n	b524c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5278:	5d60      	ldrb	r0, [r4, r5]
   b527a:	f7ff fee7 	bl	b504c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b527e:	0603      	lsls	r3, r0, #24
   b5280:	d415      	bmi.n	b52ae <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5282:	0100      	lsls	r0, r0, #4
   b5284:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5288:	b2c7      	uxtb	r7, r0
   b528a:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b528e:	2124      	movs	r1, #36	; 0x24
   b5290:	4620      	mov	r0, r4
   b5292:	f002 fbb7 	bl	b7a04 <strnlen>
   b5296:	3501      	adds	r5, #1
   b5298:	42a8      	cmp	r0, r5
   b529a:	d908      	bls.n	b52ae <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b529c:	5d60      	ldrb	r0, [r4, r5]
   b529e:	f7ff fed5 	bl	b504c <_ZN8particle11hexToNibbleEc>
   b52a2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b52a4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b52a6:	bfa4      	itt	ge
   b52a8:	4338      	orrge	r0, r7
   b52aa:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b52ae:	3501      	adds	r5, #1
   b52b0:	e7d1      	b.n	b5256 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b52b2:	bf00      	nop
   b52b4:	000b7aee 	.word	0x000b7aee

000b52b8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b52b8:	b513      	push	{r0, r1, r4, lr}
   b52ba:	4604      	mov	r4, r0
   b52bc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b52be:	f7ff ff21 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b52c2:	4620      	mov	r0, r4
   b52c4:	9901      	ldr	r1, [sp, #4]
   b52c6:	f7ff ff87 	bl	b51d8 <_ZN8particle7BleUuid9constructEPKc>
}
   b52ca:	4620      	mov	r0, r4
   b52cc:	b002      	add	sp, #8
   b52ce:	bd10      	pop	{r4, pc}

000b52d0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b52d0:	b510      	push	{r4, lr}
   b52d2:	f100 030f 	add.w	r3, r0, #15
   b52d6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b52d8:	781c      	ldrb	r4, [r3, #0]
   b52da:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b52de:	4283      	cmp	r3, r0
   b52e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b52e4:	d1f8      	bne.n	b52d8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b52e6:	bd10      	pop	{r4, pc}

000b52e8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b52e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52ec:	461f      	mov	r7, r3
   b52ee:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b52f0:	460d      	mov	r5, r1
   b52f2:	2900      	cmp	r1, #0
   b52f4:	d05b      	beq.n	b53ae <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b52f6:	b1da      	cbz	r2, b5330 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b52f8:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b52fc:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b52fe:	f1b8 0f00 	cmp.w	r8, #0
   b5302:	d119      	bne.n	b5338 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5304:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b5306:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b530a:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b530c:	aa05      	add	r2, sp, #20
   b530e:	2102      	movs	r1, #2
   b5310:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b5312:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b5316:	f7ff fe61 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b531a:	2c04      	cmp	r4, #4
   b531c:	bf28      	it	cs
   b531e:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b5320:	4622      	mov	r2, r4
   b5322:	a905      	add	r1, sp, #20
   b5324:	4628      	mov	r0, r5
   b5326:	f002 fb07 	bl	b7938 <memcpy>
        buf[len++] = '\0';
   b532a:	f805 8004 	strb.w	r8, [r5, r4]
   b532e:	1c62      	adds	r2, r4, #1
}
   b5330:	4610      	mov	r0, r2
   b5332:	b00e      	add	sp, #56	; 0x38
   b5334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b5338:	a901      	add	r1, sp, #4
   b533a:	f7ff ffc9 	bl	b52d0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b533e:	aa05      	add	r2, sp, #20
    if (stripped) {
   b5340:	b17f      	cbz	r7, b5362 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b5342:	2110      	movs	r1, #16
   b5344:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b5346:	f7ff fe49 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b534a:	2c24      	cmp	r4, #36	; 0x24
   b534c:	bf28      	it	cs
   b534e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b5350:	4622      	mov	r2, r4
   b5352:	a905      	add	r1, sp, #20
   b5354:	4628      	mov	r0, r5
   b5356:	f002 faef 	bl	b7938 <memcpy>
    buf[len++] = '\0';
   b535a:	2300      	movs	r3, #0
   b535c:	552b      	strb	r3, [r5, r4]
   b535e:	1c62      	adds	r2, r4, #1
    return len;
   b5360:	e7e6      	b.n	b5330 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b5362:	2104      	movs	r1, #4
   b5364:	eb0d 0001 	add.w	r0, sp, r1
   b5368:	f7ff fe38 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b536c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b536e:	f10d 021d 	add.w	r2, sp, #29
   b5372:	2102      	movs	r1, #2
   b5374:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b5376:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b537a:	f7ff fe2f 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b537e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b5382:	2102      	movs	r1, #2
   b5384:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b5388:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b538c:	f7ff fe26 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b5390:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b5394:	2102      	movs	r1, #2
   b5396:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b5398:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b539c:	f7ff fe1e 	bl	b4fdc <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b53a0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b53a4:	aa0b      	add	r2, sp, #44	; 0x2c
   b53a6:	2106      	movs	r1, #6
   b53a8:	f10d 000e 	add.w	r0, sp, #14
   b53ac:	e7cb      	b.n	b5346 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b53ae:	460a      	mov	r2, r1
   b53b0:	e7be      	b.n	b5330 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b53b2 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b53b2:	b510      	push	{r4, lr}
   b53b4:	b08a      	sub	sp, #40	; 0x28
   b53b6:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b53b8:	2300      	movs	r3, #0
   b53ba:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b53bc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b53be:	4669      	mov	r1, sp
   b53c0:	f7ff ff92 	bl	b52e8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b53c4:	4669      	mov	r1, sp
   b53c6:	4620      	mov	r0, r4
   b53c8:	f002 f89b 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b53cc:	4620      	mov	r0, r4
   b53ce:	b00a      	add	sp, #40	; 0x28
   b53d0:	bd10      	pop	{r4, pc}

000b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b53d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b53d4:	4605      	mov	r5, r0
   b53d6:	4616      	mov	r6, r2
   b53d8:	461f      	mov	r7, r3
   b53da:	460a      	mov	r2, r1
   b53dc:	ab01      	add	r3, sp, #4
   b53de:	e9d0 0100 	ldrd	r0, r1, [r0]
   b53e2:	f7ff fd7b 	bl	b4edc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b53e6:	f030 0402 	bics.w	r4, r0, #2
   b53ea:	d00c      	beq.n	b5406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b53ec:	1e84      	subs	r4, r0, #2
   b53ee:	42bc      	cmp	r4, r7
   b53f0:	bf28      	it	cs
   b53f2:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b53f4:	b13e      	cbz	r6, b5406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b53f6:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b53f8:	682b      	ldr	r3, [r5, #0]
   b53fa:	3102      	adds	r1, #2
   b53fc:	4622      	mov	r2, r4
   b53fe:	4419      	add	r1, r3
   b5400:	4630      	mov	r0, r6
   b5402:	f002 fa99 	bl	b7938 <memcpy>
}
   b5406:	4620      	mov	r0, r4
   b5408:	b003      	add	sp, #12
   b540a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b540c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b540c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b540e:	4613      	mov	r3, r2
   b5410:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5412:	9201      	str	r2, [sp, #4]
   b5414:	460a      	mov	r2, r1
   b5416:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b5418:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b541a:	f7ff ffda 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b541e:	b940      	cbnz	r0, b5432 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5420:	9b01      	ldr	r3, [sp, #4]
   b5422:	4622      	mov	r2, r4
   b5424:	2109      	movs	r1, #9
   b5426:	4628      	mov	r0, r5
}
   b5428:	b003      	add	sp, #12
   b542a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b542e:	f7ff bfd0 	b.w	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b5432:	b003      	add	sp, #12
   b5434:	bd30      	pop	{r4, r5, pc}
	...

000b5438 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b5438:	b5f0      	push	{r4, r5, r6, r7, lr}
   b543a:	460c      	mov	r4, r1
   b543c:	b089      	sub	sp, #36	; 0x24
    String name;
   b543e:	490c      	ldr	r1, [pc, #48]	; (b5470 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b5440:	4605      	mov	r5, r0
    String name;
   b5442:	f002 f85e 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b5446:	221f      	movs	r2, #31
   b5448:	4669      	mov	r1, sp
   b544a:	4620      	mov	r0, r4
   b544c:	f7ff ffde 	bl	b540c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b5450:	4606      	mov	r6, r0
   b5452:	b150      	cbz	r0, b546a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b5454:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b5456:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b5458:	f814 1b01 	ldrb.w	r1, [r4], #1
   b545c:	4628      	mov	r0, r5
   b545e:	f002 f8cf 	bl	b7600 <_ZN6String6concatEc>
   b5462:	b110      	cbz	r0, b546a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b5464:	3701      	adds	r7, #1
   b5466:	42be      	cmp	r6, r7
   b5468:	d1f6      	bne.n	b5458 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b546a:	4628      	mov	r0, r5
   b546c:	b009      	add	sp, #36	; 0x24
   b546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5470:	000b7d0b 	.word	0x000b7d0b

000b5474 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b5474:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b5476:	2302      	movs	r3, #2
   b5478:	aa01      	add	r2, sp, #4
   b547a:	2119      	movs	r1, #25
   b547c:	f7ff ffa9 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b5480:	b108      	cbz	r0, b5486 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b5482:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b5486:	b003      	add	sp, #12
   b5488:	f85d fb04 	ldr.w	pc, [sp], #4

000b548c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b548c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b548e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5492:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5494:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5496:	8043      	strh	r3, [r0, #2]
   b5498:	220e      	movs	r2, #14
   b549a:	4629      	mov	r1, r5
   b549c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b549e:	7105      	strb	r5, [r0, #4]
   b54a0:	3006      	adds	r0, #6
   b54a2:	f002 fa71 	bl	b7988 <memset>
   b54a6:	f104 0014 	add.w	r0, r4, #20
   b54aa:	f7ff fe2b 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
   b54ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b54b2:	f7ff fe27 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
   b54b6:	4904      	ldr	r1, [pc, #16]	; (b54c8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b54b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b54bc:	f002 f821 	bl	b7502 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b54c0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b54c2:	4620      	mov	r0, r4
   b54c4:	bd38      	pop	{r3, r4, r5, pc}
   b54c6:	bf00      	nop
   b54c8:	000b7d0b 	.word	0x000b7d0b

000b54cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b54cc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b54ce:	680d      	ldr	r5, [r1, #0]
   b54d0:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b54d2:	4601      	mov	r1, r0
   b54d4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b54d8:	f7ff fe6f 	bl	b51ba <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b54dc:	b140      	cbz	r0, b54f0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b54de:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b54e0:	8aa2      	ldrh	r2, [r4, #20]
   b54e2:	429a      	cmp	r2, r3
   b54e4:	d805      	bhi.n	b54f2 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b54e6:	8ae0      	ldrh	r0, [r4, #22]
   b54e8:	4298      	cmp	r0, r3
   b54ea:	bf34      	ite	cc
   b54ec:	2000      	movcc	r0, #0
   b54ee:	2001      	movcs	r0, #1
    }
   b54f0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b54f2:	2000      	movs	r0, #0
   b54f4:	e7fc      	b.n	b54f0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b54f6:	b510      	push	{r4, lr}
    return data_ + size_;
   b54f8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b54fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5500:	4293      	cmp	r3, r2
   b5502:	4618      	mov	r0, r3
   b5504:	d006      	beq.n	b5514 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5506:	6804      	ldr	r4, [r0, #0]
   b5508:	8824      	ldrh	r4, [r4, #0]
   b550a:	428c      	cmp	r4, r1
   b550c:	f103 0308 	add.w	r3, r3, #8
   b5510:	d1f6      	bne.n	b5500 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5512:	bd10      	pop	{r4, pc}
        return nullptr;
   b5514:	2000      	movs	r0, #0
   b5516:	e7fc      	b.n	b5512 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b5518 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5518:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b551a:	b570      	push	{r4, r5, r6, lr}
   b551c:	6003      	str	r3, [r0, #0]
   b551e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5520:	2068      	movs	r0, #104	; 0x68
   b5522:	f7fe fdc8 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b5526:	1e04      	subs	r4, r0, #0
   b5528:	f104 060c 	add.w	r6, r4, #12
   b552c:	d007      	beq.n	b553e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b552e:	2301      	movs	r3, #1
   b5530:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b5534:	4b04      	ldr	r3, [pc, #16]	; (b5548 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b5536:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b5538:	4630      	mov	r0, r6
   b553a:	f7ff ffa7 	bl	b548c <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b553e:	e9c5 6400 	strd	r6, r4, [r5]
}
   b5542:	4628      	mov	r0, r5
   b5544:	bd70      	pop	{r4, r5, r6, pc}
   b5546:	bf00      	nop
   b5548:	000b7e74 	.word	0x000b7e74

000b554c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b554c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b554e:	680c      	ldr	r4, [r1, #0]
   b5550:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b5552:	4606      	mov	r6, r0
    return impl()->charUUID();
   b5554:	4605      	mov	r5, r0
   b5556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b555a:	6823      	ldr	r3, [r4, #0]
   b555c:	602b      	str	r3, [r5, #0]
}
   b555e:	4630      	mov	r0, r6
   b5560:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5564 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b5564:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5566:	4606      	mov	r6, r0
   b5568:	b085      	sub	sp, #20
   b556a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b556c:	460d      	mov	r5, r1
   b556e:	2900      	cmp	r1, #0
   b5570:	d050      	beq.n	b5614 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b5572:	2a00      	cmp	r2, #0
   b5574:	d04e      	beq.n	b5614 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b5576:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b5578:	7823      	ldrb	r3, [r4, #0]
   b557a:	2af4      	cmp	r2, #244	; 0xf4
   b557c:	bf28      	it	cs
   b557e:	22f4      	movcs	r2, #244	; 0xf4
   b5580:	b343      	cbz	r3, b55d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b5582:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b5584:	0798      	lsls	r0, r3, #30
   b5586:	d509      	bpl.n	b559c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b5588:	89a0      	ldrh	r0, [r4, #12]
   b558a:	9203      	str	r2, [sp, #12]
   b558c:	2300      	movs	r3, #0
   b558e:	f7fe ff81 	bl	b4494 <hal_ble_gatt_server_set_characteristic_value>
   b5592:	2800      	cmp	r0, #0
   b5594:	9a03      	ldr	r2, [sp, #12]
   b5596:	da03      	bge.n	b55a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b5598:	b005      	add	sp, #20
   b559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b559c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b55a0:	6834      	ldr	r4, [r6, #0]
   b55a2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b55a4:	06d9      	lsls	r1, r3, #27
   b55a6:	d509      	bpl.n	b55bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b55a8:	2f01      	cmp	r7, #1
   b55aa:	d007      	beq.n	b55bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55ac:	89a0      	ldrh	r0, [r4, #12]
   b55ae:	2300      	movs	r3, #0
   b55b0:	4629      	mov	r1, r5
}
   b55b2:	b005      	add	sp, #20
   b55b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55b8:	f7fe bfc6 	b.w	b4548 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b55bc:	069b      	lsls	r3, r3, #26
   b55be:	d5eb      	bpl.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b55c0:	2f02      	cmp	r7, #2
   b55c2:	d0e9      	beq.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55c4:	89a0      	ldrh	r0, [r4, #12]
   b55c6:	2300      	movs	r3, #0
   b55c8:	4629      	mov	r1, r5
}
   b55ca:	b005      	add	sp, #20
   b55cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b55d0:	f7fe bfc4 	b.w	b455c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b55d4:	8860      	ldrh	r0, [r4, #2]
   b55d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b55da:	4288      	cmp	r0, r1
   b55dc:	d01c      	beq.n	b5618 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b55de:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b55e0:	074e      	lsls	r6, r1, #29
   b55e2:	d501      	bpl.n	b55e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b55e4:	2f01      	cmp	r7, #1
   b55e6:	d104      	bne.n	b55f2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b55e8:	070b      	lsls	r3, r1, #28
   b55ea:	d409      	bmi.n	b5600 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b55ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b55f0:	e7d2      	b.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b55f2:	89a1      	ldrh	r1, [r4, #12]
   b55f4:	9300      	str	r3, [sp, #0]
   b55f6:	4613      	mov	r3, r2
   b55f8:	462a      	mov	r2, r5
   b55fa:	f7fe ff73 	bl	b44e4 <hal_ble_gatt_client_write_without_response>
   b55fe:	e7cb      	b.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b5600:	2f02      	cmp	r7, #2
   b5602:	d0f3      	beq.n	b55ec <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b5604:	2300      	movs	r3, #0
   b5606:	89a1      	ldrh	r1, [r4, #12]
   b5608:	9300      	str	r3, [sp, #0]
   b560a:	4613      	mov	r3, r2
   b560c:	462a      	mov	r2, r5
   b560e:	f7fe ff5f 	bl	b44d0 <hal_ble_gatt_client_write_with_response>
   b5612:	e7c1      	b.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b5614:	4802      	ldr	r0, [pc, #8]	; (b5620 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b5616:	e7bf      	b.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b5618:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b561c:	e7bc      	b.n	b5598 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b561e:	bf00      	nop
   b5620:	fffffef2 	.word	0xfffffef2

000b5624 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b5624:	b510      	push	{r4, lr}
   b5626:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5628:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b562a:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b562c:	bb52      	cbnz	r2, b5684 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b562e:	885c      	ldrh	r4, [r3, #2]
   b5630:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b5634:	4284      	cmp	r4, r0
   b5636:	d025      	beq.n	b5684 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b5638:	8a18      	ldrh	r0, [r3, #16]
   b563a:	b330      	cbz	r0, b568a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b563c:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b5640:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b5642:	4a13      	ldr	r2, [pc, #76]	; (b5690 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b5644:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b5646:	4a13      	ldr	r2, [pc, #76]	; (b5694 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b5648:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b564c:	885a      	ldrh	r2, [r3, #2]
   b564e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b5652:	8a1a      	ldrh	r2, [r3, #16]
   b5654:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b5658:	899a      	ldrh	r2, [r3, #12]
   b565a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b565e:	b159      	cbz	r1, b5678 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b5660:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b5662:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b5664:	bf44      	itt	mi
   b5666:	2202      	movmi	r2, #2
   b5668:	9205      	strmi	r2, [sp, #20]
   b566a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b566c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b566e:	bf42      	ittt	mi
   b5670:	9b05      	ldrmi	r3, [sp, #20]
   b5672:	f043 0301 	orrmi.w	r3, r3, #1
   b5676:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b5678:	2100      	movs	r1, #0
   b567a:	4668      	mov	r0, sp
   b567c:	f7fe ff5a 	bl	b4534 <hal_ble_gatt_client_configure_cccd>
}
   b5680:	b006      	add	sp, #24
   b5682:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b5684:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b5688:	e7fa      	b.n	b5680 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b568a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b568e:	e7f7      	b.n	b5680 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b5690:	00180003 	.word	0x00180003
   b5694:	000b5869 	.word	0x000b5869

000b5698 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b5698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b569a:	2600      	movs	r6, #0
   b569c:	6006      	str	r6, [r0, #0]
   b569e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56a0:	2028      	movs	r0, #40	; 0x28
   b56a2:	f7fe fd08 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b56a6:	1e04      	subs	r4, r0, #0
   b56a8:	f104 070c 	add.w	r7, r4, #12
   b56ac:	d00a      	beq.n	b56c4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b56ae:	2301      	movs	r3, #1
   b56b0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b56b4:	4b05      	ldr	r3, [pc, #20]	; (b56cc <_ZN8particle10BleServiceC1Ev+0x34>)
   b56b6:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b56b8:	4638      	mov	r0, r7
   b56ba:	f7ff fd23 	bl	b5104 <_ZN8particle7BleUuidC1Ev>
   b56be:	6226      	str	r6, [r4, #32]
   b56c0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b56c4:	e9c5 7400 	strd	r7, r4, [r5]
}
   b56c8:	4628      	mov	r0, r5
   b56ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b56cc:	000b7e90 	.word	0x000b7e90

000b56d0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b56d0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b56d2:	2500      	movs	r5, #0
   b56d4:	6005      	str	r5, [r0, #0]
   b56d6:	4606      	mov	r6, r0
   b56d8:	2030      	movs	r0, #48	; 0x30
   b56da:	f7fe fcec 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b56de:	4604      	mov	r4, r0
   b56e0:	b188      	cbz	r0, b5706 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b56e2:	2301      	movs	r3, #1
   b56e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b56e8:	4b09      	ldr	r3, [pc, #36]	; (b5710 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b56ea:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b56ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b56f0:	8183      	strh	r3, [r0, #12]
   b56f2:	300e      	adds	r0, #14
   b56f4:	f7ff fcfb 	bl	b50ee <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b56f8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b56fc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5700:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5704:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5706:	6074      	str	r4, [r6, #4]
   b5708:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b570a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b570c:	4630      	mov	r0, r6
   b570e:	bd70      	pop	{r4, r5, r6, pc}
   b5710:	000b7eac 	.word	0x000b7eac

000b5714 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b5714:	b513      	push	{r0, r1, r4, lr}
   b5716:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5718:	a801      	add	r0, sp, #4
   b571a:	f7ff fcad 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b571e:	6823      	ldr	r3, [r4, #0]
   b5720:	881c      	ldrh	r4, [r3, #0]
   b5722:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5726:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b5728:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b572a:	bf18      	it	ne
   b572c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b572e:	f7ff fcb1 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5732:	4620      	mov	r0, r4
   b5734:	b002      	add	sp, #8
   b5736:	bd10      	pop	{r4, pc}

000b5738 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b5738:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b573a:	4605      	mov	r5, r0
   b573c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b573e:	a801      	add	r0, sp, #4
   b5740:	f7ff fc9a 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5744:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5746:	6823      	ldr	r3, [r4, #0]
   b5748:	f8c2 3002 	str.w	r3, [r2, #2]
   b574c:	6863      	ldr	r3, [r4, #4]
   b574e:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b5752:	a801      	add	r0, sp, #4
   b5754:	f7ff fc9e 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b5758:	b003      	add	sp, #12
   b575a:	bd30      	pop	{r4, r5, pc}

000b575c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b575c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b575e:	460d      	mov	r5, r1
   b5760:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5762:	a801      	add	r0, sp, #4
   b5764:	f7ff fc88 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
   b5768:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b576a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b576e:	6023      	str	r3, [r4, #0]
   b5770:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5774:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5776:	a801      	add	r0, sp, #4
   b5778:	f7ff fc8c 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b577c:	4620      	mov	r0, r4
   b577e:	b003      	add	sp, #12
   b5780:	bd30      	pop	{r4, r5, pc}

000b5782 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5782:	b530      	push	{r4, r5, lr}
   b5784:	4605      	mov	r5, r0
   b5786:	b087      	sub	sp, #28
   b5788:	460c      	mov	r4, r1
    WiringBleLock lk;
   b578a:	a801      	add	r0, sp, #4
   b578c:	f7ff fc74 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5790:	682a      	ldr	r2, [r5, #0]
   b5792:	6823      	ldr	r3, [r4, #0]
   b5794:	8812      	ldrh	r2, [r2, #0]
   b5796:	881b      	ldrh	r3, [r3, #0]
   b5798:	429a      	cmp	r2, r3
   b579a:	d10d      	bne.n	b57b8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b579c:	4629      	mov	r1, r5
   b579e:	a802      	add	r0, sp, #8
   b57a0:	f7ff ffdc 	bl	b575c <_ZNK8particle13BlePeerDevice7addressEv>
   b57a4:	4621      	mov	r1, r4
   b57a6:	a804      	add	r0, sp, #16
   b57a8:	f7ff ffd8 	bl	b575c <_ZNK8particle13BlePeerDevice7addressEv>
   b57ac:	a904      	add	r1, sp, #16
   b57ae:	a802      	add	r0, sp, #8
   b57b0:	f7ff fc89 	bl	b50c6 <_ZNK8particle10BleAddresseqERKS0_>
   b57b4:	4604      	mov	r4, r0
   b57b6:	b900      	cbnz	r0, b57ba <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b57b8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b57ba:	a801      	add	r0, sp, #4
   b57bc:	f7ff fc6a 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b57c0:	4620      	mov	r0, r4
   b57c2:	b007      	add	sp, #28
   b57c4:	bd30      	pop	{r4, r5, pc}
	...

000b57c8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b57c8:	b510      	push	{r4, lr}
   b57ca:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b57cc:	2064      	movs	r0, #100	; 0x64
   b57ce:	f7fe fc72 	bl	b40b6 <_Znwj>
   b57d2:	b168      	cbz	r0, b57f0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b57d4:	2300      	movs	r3, #0
   b57d6:	e9c0 3300 	strd	r3, r3, [r0]
   b57da:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b57de:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b57e2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b57e6:	6203      	str	r3, [r0, #32]
   b57e8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b57ea:	63c3      	str	r3, [r0, #60]	; 0x3c
   b57ec:	64c3      	str	r3, [r0, #76]	; 0x4c
   b57ee:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b57f0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b57f2:	b920      	cbnz	r0, b57fe <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b57f4:	4a0a      	ldr	r2, [pc, #40]	; (b5820 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b57f6:	490b      	ldr	r1, [pc, #44]	; (b5824 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b57f8:	200a      	movs	r0, #10
   b57fa:	f7fe fee1 	bl	b45c0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b57fe:	2000      	movs	r0, #0
   b5800:	f7fe fe24 	bl	b444c <hal_ble_stack_init>
   b5804:	b120      	cbz	r0, b5810 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b5806:	4a06      	ldr	r2, [pc, #24]	; (b5820 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5808:	4907      	ldr	r1, [pc, #28]	; (b5828 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b580a:	200a      	movs	r0, #10
   b580c:	f7fe fed8 	bl	b45c0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5810:	6821      	ldr	r1, [r4, #0]
   b5812:	4806      	ldr	r0, [pc, #24]	; (b582c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5814:	2200      	movs	r2, #0
   b5816:	f7fe fe83 	bl	b4520 <hal_ble_set_callback_on_periph_link_events>
}
   b581a:	4620      	mov	r0, r4
   b581c:	bd10      	pop	{r4, pc}
   b581e:	bf00      	nop
   b5820:	000b4581 	.word	0x000b4581
   b5824:	000b7c74 	.word	0x000b7c74
   b5828:	000b7cb2 	.word	0x000b7cb2
   b582c:	000b61a9 	.word	0x000b61a9

000b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5830:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5832:	4c0a      	ldr	r4, [pc, #40]	; (b585c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5834:	7823      	ldrb	r3, [r4, #0]
   b5836:	f3bf 8f5b 	dmb	ish
   b583a:	07db      	lsls	r3, r3, #31
   b583c:	d40c      	bmi.n	b5858 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b583e:	4620      	mov	r0, r4
   b5840:	f7fe fc3f 	bl	b40c2 <__cxa_guard_acquire>
   b5844:	b140      	cbz	r0, b5858 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5846:	4806      	ldr	r0, [pc, #24]	; (b5860 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5848:	f7ff ffbe 	bl	b57c8 <_ZN8particle14BleLocalDeviceC1Ev>
   b584c:	4620      	mov	r0, r4
   b584e:	f7fe fc3d 	bl	b40cc <__cxa_guard_release>
   b5852:	4804      	ldr	r0, [pc, #16]	; (b5864 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5854:	f002 f85a 	bl	b790c <atexit>
    return instance;
}
   b5858:	4801      	ldr	r0, [pc, #4]	; (b5860 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b585a:	bd10      	pop	{r4, pc}
   b585c:	2003e71c 	.word	0x2003e71c
   b5860:	2003e724 	.word	0x2003e724
   b5864:	000b5b09 	.word	0x000b5b09

000b5868 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5868:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b586a:	6803      	ldr	r3, [r0, #0]
   b586c:	3b09      	subs	r3, #9
   b586e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5870:	b08d      	sub	sp, #52	; 0x34
   b5872:	4604      	mov	r4, r0
   b5874:	460d      	mov	r5, r1
    switch (event->type) {
   b5876:	d811      	bhi.n	b589c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5878:	f7ff ffda 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b587c:	88a1      	ldrh	r1, [r4, #4]
   b587e:	6800      	ldr	r0, [r0, #0]
   b5880:	f7ff fe39 	bl	b54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5884:	4603      	mov	r3, r0
   b5886:	b958      	cbnz	r0, b58a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5888:	2220      	movs	r2, #32
   b588a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b588e:	4a0b      	ldr	r2, [pc, #44]	; (b58bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5890:	9200      	str	r2, [sp, #0]
   b5892:	490b      	ldr	r1, [pc, #44]	; (b58c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5894:	aa04      	add	r2, sp, #16
   b5896:	2032      	movs	r0, #50	; 0x32
   b5898:	f7fe fe9a 	bl	b45d0 <log_message>
}
   b589c:	b00d      	add	sp, #52	; 0x34
   b589e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b58a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b58a2:	2a00      	cmp	r2, #0
   b58a4:	d0fa      	beq.n	b589c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b58a6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b58aa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b58ae:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b58b2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b58b4:	aa04      	add	r2, sp, #16
   b58b6:	a903      	add	r1, sp, #12
   b58b8:	47a0      	blx	r4
}
   b58ba:	e7ef      	b.n	b589c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b58bc:	000b7cf4 	.word	0x000b7cf4
   b58c0:	000b7c8b 	.word	0x000b7c8b

000b58c4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b58c4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b58c6:	2000      	movs	r0, #0
   b58c8:	f7fe fdc0 	bl	b444c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b58cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b58d0:	bd08      	pop	{r3, pc}
	...

000b58d4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b58d4:	b570      	push	{r4, r5, r6, lr}
   b58d6:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b58d8:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b58da:	460e      	mov	r6, r1
   b58dc:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b58de:	f7ff fb49 	bl	b4f74 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b58e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b58e6:	f7ff fb50 	bl	b4f8a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b58ea:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b58ee:	2200      	movs	r2, #0
   b58f0:	4621      	mov	r1, r4
   b58f2:	4803      	ldr	r0, [pc, #12]	; (b5900 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b58f4:	f7fe fdb2 	bl	b445c <hal_ble_gap_start_scan>
   b58f8:	2800      	cmp	r0, #0
        return foundCount_;
   b58fa:	bfa8      	it	ge
   b58fc:	6960      	ldrge	r0, [r4, #20]
    }
   b58fe:	bd70      	pop	{r4, r5, r6, pc}
   b5900:	000b7101 	.word	0x000b7101

000b5904 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b5904:	b510      	push	{r4, lr}
   b5906:	4604      	mov	r4, r0
    ::free(ptr);
   b5908:	6940      	ldr	r0, [r0, #20]
   b590a:	f7fe fefd 	bl	b4708 <free>
   b590e:	68a0      	ldr	r0, [r4, #8]
   b5910:	f7fe fefa 	bl	b4708 <free>
   b5914:	4620      	mov	r0, r4
   b5916:	bd10      	pop	{r4, pc}

000b5918 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b5918:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b591a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b591e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b5922:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5926:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b592a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b592e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5932:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b5936:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b593a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b593e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5942:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b5946:	6202      	str	r2, [r0, #32]
   b5948:	6302      	str	r2, [r0, #48]	; 0x30
   b594a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b594e:	4770      	bx	lr

000b5950 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b5950:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b5952:	69d8      	ldr	r0, [r3, #28]
}
   b5954:	2800      	cmp	r0, #0
   b5956:	bfd4      	ite	le
   b5958:	2000      	movle	r0, #0
   b595a:	2001      	movgt	r0, #1
   b595c:	4770      	bx	lr

000b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b595e:	b510      	push	{r4, lr}
   b5960:	4604      	mov	r4, r0
    ::free(ptr);
   b5962:	6800      	ldr	r0, [r0, #0]
   b5964:	f7fe fed0 	bl	b4708 <free>
}
   b5968:	4620      	mov	r0, r4
   b596a:	bd10      	pop	{r4, pc}

000b596c <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b596c:	b570      	push	{r4, r5, r6, lr}
   b596e:	4604      	mov	r4, r0
    ::free(ptr);
   b5970:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b5972:	f7fe fec9 	bl	b4708 <free>
   b5976:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5978:	f7fe fec6 	bl	b4708 <free>
    }
    ~BleScanFilter() = default;
   b597c:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b5980:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5984:	f7ff ffeb 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b5988:	4628      	mov	r0, r5
   b598a:	f7ff f9f1 	bl	b4d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b598e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5992:	f7ff f925 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
   b5996:	f104 0018 	add.w	r0, r4, #24
   b599a:	f7ff f921 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b599e:	e9d4 5300 	ldrd	r5, r3, [r4]
   b59a2:	2624      	movs	r6, #36	; 0x24
   b59a4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b59a8:	42ae      	cmp	r6, r5
   b59aa:	d004      	beq.n	b59b6 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b59ac:	4628      	mov	r0, r5
   b59ae:	f7ff ffa9 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b59b2:	3524      	adds	r5, #36	; 0x24
   b59b4:	e7f8      	b.n	b59a8 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b59b6:	6820      	ldr	r0, [r4, #0]
   b59b8:	f7fe fea6 	bl	b4708 <free>
   b59bc:	4620      	mov	r0, r4
   b59be:	bd70      	pop	{r4, r5, r6, pc}

000b59c0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b59c0:	b530      	push	{r4, r5, lr}
   b59c2:	4615      	mov	r5, r2
   b59c4:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b59c6:	460c      	mov	r4, r1
   b59c8:	b179      	cbz	r1, b59ea <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b59ca:	b172      	cbz	r2, b59ea <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b59cc:	a801      	add	r0, sp, #4
   b59ce:	f7ff ffa3 	bl	b5918 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b59d2:	4621      	mov	r1, r4
   b59d4:	462a      	mov	r2, r5
   b59d6:	a801      	add	r0, sp, #4
   b59d8:	f7ff ff7c 	bl	b58d4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b59dc:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b59de:	a801      	add	r0, sp, #4
   b59e0:	f7ff ffc4 	bl	b596c <_ZN8particle16BleScanDelegatorD1Ev>
}
   b59e4:	4620      	mov	r0, r4
   b59e6:	b01f      	add	sp, #124	; 0x7c
   b59e8:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b59ea:	4c01      	ldr	r4, [pc, #4]	; (b59f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b59ec:	e7fa      	b.n	b59e4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b59ee:	bf00      	nop
   b59f0:	fffffef2 	.word	0xfffffef2

000b59f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b59f4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b59f6:	1e14      	subs	r4, r2, #0
   b59f8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b59fa:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b59fc:	db02      	blt.n	b5a04 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b59fe:	1862      	adds	r2, r4, r1
   b5a00:	429a      	cmp	r2, r3
   b5a02:	dd00      	ble.n	b5a06 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5a04:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5a06:	682a      	ldr	r2, [r5, #0]
   b5a08:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5a0a:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5a0c:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5a0e:	1a52      	subs	r2, r2, r1
   b5a10:	f001 ffa0 	bl	b7954 <memmove>
    size_ -= n;
   b5a14:	686a      	ldr	r2, [r5, #4]
   b5a16:	1b12      	subs	r2, r2, r4
   b5a18:	606a      	str	r2, [r5, #4]
}
   b5a1a:	bd38      	pop	{r3, r4, r5, pc}

000b5a1c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5a1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5a1e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5a20:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5a22:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a24:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5a26:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a28:	f7fe fb45 	bl	b40b6 <_Znwj>
   b5a2c:	b118      	cbz	r0, b5a36 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5a2e:	682b      	ldr	r3, [r5, #0]
   b5a30:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5a32:	686b      	ldr	r3, [r5, #4]
   b5a34:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5a36:	4b03      	ldr	r3, [pc, #12]	; (b5a44 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5a38:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5a3a:	4b03      	ldr	r3, [pc, #12]	; (b5a48 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5a3c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5a3e:	60a3      	str	r3, [r4, #8]
      }
   b5a40:	4620      	mov	r0, r4
   b5a42:	bd38      	pop	{r3, r4, r5, pc}
   b5a44:	000b4f1d 	.word	0x000b4f1d
   b5a48:	000b4f35 	.word	0x000b4f35

000b5a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5a4c:	680b      	ldr	r3, [r1, #0]
   b5a4e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5a50:	b113      	cbz	r3, b5a58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5a52:	685a      	ldr	r2, [r3, #4]
   b5a54:	3201      	adds	r2, #1
   b5a56:	605a      	str	r2, [r3, #4]
      }
   b5a58:	4770      	bx	lr

000b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5a5a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5a5c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5a60:	4604      	mov	r4, r0
   b5a62:	f840 3b04 	str.w	r3, [r0], #4
   b5a66:	f7ff fff1 	bl	b5a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5a6a:	6823      	ldr	r3, [r4, #0]
   b5a6c:	b90b      	cbnz	r3, b5a72 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5a6e:	f7ff fa4b 	bl	b4f08 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5a72:	4620      	mov	r0, r4
   b5a74:	bd10      	pop	{r4, pc}

000b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5a76:	b510      	push	{r4, lr}
   b5a78:	f851 3b04 	ldr.w	r3, [r1], #4
   b5a7c:	4604      	mov	r4, r0
   b5a7e:	f840 3b04 	str.w	r3, [r0], #4
   b5a82:	f7ff ffe3 	bl	b5a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5a86:	4620      	mov	r0, r4
   b5a88:	bd10      	pop	{r4, pc}

000b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5a8a:	b510      	push	{r4, lr}
   b5a8c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5a90:	4604      	mov	r4, r0
   b5a92:	f840 3b04 	str.w	r3, [r0], #4
   b5a96:	f7ff ffd9 	bl	b5a4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	bd10      	pop	{r4, pc}

000b5a9e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b5a9e:	b510      	push	{r4, lr}
   b5aa0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5aa2:	3004      	adds	r0, #4
   b5aa4:	f7fe ff48 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	bd10      	pop	{r4, pc}

000b5aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5aac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5aae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ab2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5ab4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5ab8:	42ae      	cmp	r6, r5
   b5aba:	d004      	beq.n	b5ac6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5abc:	1d28      	adds	r0, r5, #4
   b5abe:	f7fe ff3b 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ac2:	3508      	adds	r5, #8
   b5ac4:	e7f8      	b.n	b5ab8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5ac6:	6820      	ldr	r0, [r4, #0]
   b5ac8:	f7fe fe1e 	bl	b4708 <free>
}
   b5acc:	4620      	mov	r0, r4
   b5ace:	bd70      	pop	{r4, r5, r6, pc}

000b5ad0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ad0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ad2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ad6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5ad8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5adc:	42ae      	cmp	r6, r5
   b5ade:	d004      	beq.n	b5aea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5ae0:	1d28      	adds	r0, r5, #4
   b5ae2:	f7fe ff29 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ae6:	3508      	adds	r5, #8
   b5ae8:	e7f8      	b.n	b5adc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5aea:	6820      	ldr	r0, [r4, #0]
   b5aec:	f7fe fe0c 	bl	b4708 <free>
}
   b5af0:	4620      	mov	r0, r4
   b5af2:	bd70      	pop	{r4, r5, r6, pc}

000b5af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5af4:	b510      	push	{r4, lr}
   b5af6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5af8:	3024      	adds	r0, #36	; 0x24
   b5afa:	f7ff ffe9 	bl	b5ad0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5afe:	f104 0018 	add.w	r0, r4, #24
   b5b02:	f7ff ffd3 	bl	b5aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5b06:	bd10      	pop	{r4, pc}

000b5b08 <__tcf_0>:
    static BleLocalDevice instance;
   b5b08:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5b0a:	4b17      	ldr	r3, [pc, #92]	; (b5b68 <__tcf_0+0x60>)
   b5b0c:	681c      	ldr	r4, [r3, #0]
   b5b0e:	b354      	cbz	r4, b5b66 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b5b10:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5b14:	f7ff f864 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
   b5b18:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5b1c:	f7ff f860 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
   b5b20:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5b24:	f7ff f85c 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
   b5b28:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5b2c:	f7ff f858 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5b30:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5b34:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5b38:	42ae      	cmp	r6, r5
   b5b3a:	d004      	beq.n	b5b46 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5b3c:	1d28      	adds	r0, r5, #4
   b5b3e:	f7fe fefb 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b42:	3508      	adds	r5, #8
   b5b44:	e7f8      	b.n	b5b38 <__tcf_0+0x30>
    ::free(ptr);
   b5b46:	69a0      	ldr	r0, [r4, #24]
   b5b48:	f7fe fdde 	bl	b4708 <free>
    ~BleLocalDeviceImpl() = default;
   b5b4c:	f104 000c 	add.w	r0, r4, #12
   b5b50:	f7ff ffbe 	bl	b5ad0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5b54:	4620      	mov	r0, r4
   b5b56:	f7ff ffa9 	bl	b5aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5b5a:	4620      	mov	r0, r4
   b5b5c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5b62:	f7fe baac 	b.w	b40be <_ZdlPvj>
   b5b66:	bd70      	pop	{r4, r5, r6, pc}
   b5b68:	2003e724 	.word	0x2003e724

000b5b6c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5b6c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5b6e:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b70:	b90a      	cbnz	r2, b5b76 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5b72:	f001 fdb5 	bl	b76e0 <_ZSt25__throw_bad_function_callv>
    }
   b5b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b7a:	68c3      	ldr	r3, [r0, #12]
   b5b7c:	4718      	bx	r3

000b5b7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b5b82:	2300      	movs	r3, #0
   b5b84:	e9c0 3300 	strd	r3, r3, [r0]
   b5b88:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5b8a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b5b8e:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5b90:	4605      	mov	r5, r0
   b5b92:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5b94:	dd4a      	ble.n	b5c2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b5b96:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b5b9a:	f7fe fdad 	bl	b46f8 <malloc>
            if (!d) {
   b5b9e:	4606      	mov	r6, r0
   b5ba0:	2800      	cmp	r0, #0
   b5ba2:	d043      	beq.n	b5c2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b5ba4:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b5ba8:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b5baa:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b5bae:	d916      	bls.n	b5bde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b5bb0:	4550      	cmp	r0, sl
   b5bb2:	d215      	bcs.n	b5be0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b5bb4:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b5bb8:	f1a4 0910 	sub.w	r9, r4, #16
   b5bbc:	ebaa 0404 	sub.w	r4, sl, r4
   b5bc0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b5bc2:	45d1      	cmp	r9, sl
   b5bc4:	d01d      	beq.n	b5c02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b5bc6:	b11c      	cbz	r4, b5bd0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b5bc8:	4651      	mov	r1, sl
   b5bca:	4620      	mov	r0, r4
   b5bcc:	f001 fcca 	bl	b7564 <_ZN6StringC1EOS_>
                end->~T();
   b5bd0:	4650      	mov	r0, sl
   b5bd2:	f001 fc4b 	bl	b746c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5bd6:	f1aa 0a10 	sub.w	sl, sl, #16
   b5bda:	3c10      	subs	r4, #16
   b5bdc:	e7f1      	b.n	b5bc2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b5bde:	d010      	beq.n	b5c02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b5be0:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b5be2:	45a2      	cmp	sl, r4
   b5be4:	d00d      	beq.n	b5c02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b5be6:	f1b9 0f00 	cmp.w	r9, #0
   b5bea:	d003      	beq.n	b5bf4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b5bec:	4621      	mov	r1, r4
   b5bee:	4648      	mov	r0, r9
   b5bf0:	f001 fcb8 	bl	b7564 <_ZN6StringC1EOS_>
                p->~T();
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	f001 fc39 	bl	b746c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5bfa:	3410      	adds	r4, #16
   b5bfc:	f109 0910 	add.w	r9, r9, #16
   b5c00:	e7ef      	b.n	b5be2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b5c02:	6828      	ldr	r0, [r5, #0]
   b5c04:	f7fe fd80 	bl	b4708 <free>
        capacity_ = n;
   b5c08:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b5c0c:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5c0e:	e9d7 4300 	ldrd	r4, r3, [r7]
   b5c12:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b5c16:	45a0      	cmp	r8, r4
   b5c18:	d006      	beq.n	b5c28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b5c1a:	4621      	mov	r1, r4
   b5c1c:	4630      	mov	r0, r6
   b5c1e:	f001 fcbb 	bl	b7598 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b5c22:	3410      	adds	r4, #16
   b5c24:	3610      	adds	r6, #16
   b5c26:	e7f6      	b.n	b5c16 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b5c28:	687b      	ldr	r3, [r7, #4]
   b5c2a:	606b      	str	r3, [r5, #4]
}
   b5c2c:	4628      	mov	r0, r5
   b5c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5c32 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b5c32:	b530      	push	{r4, r5, lr}
   b5c34:	b08d      	sub	sp, #52	; 0x34
   b5c36:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b5c38:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b5c3c:	a801      	add	r0, sp, #4
   b5c3e:	f7ff ff9e 	bl	b5b7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b5c42:	9b02      	ldr	r3, [sp, #8]
   b5c44:	2b00      	cmp	r3, #0
   b5c46:	dd2f      	ble.n	b5ca8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b5c48:	f104 0114 	add.w	r1, r4, #20
   b5c4c:	a804      	add	r0, sp, #16
   b5c4e:	f7ff fbf3 	bl	b5438 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b5c52:	f104 0108 	add.w	r1, r4, #8
   b5c56:	a808      	add	r0, sp, #32
   b5c58:	f7ff fbee 	bl	b5438 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b5c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5c5e:	9b06      	ldr	r3, [sp, #24]
   b5c60:	4313      	orrs	r3, r2
   b5c62:	d01f      	beq.n	b5ca4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b5c64:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b5c68:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b5c6c:	42ac      	cmp	r4, r5
   b5c6e:	d019      	beq.n	b5ca4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b5c70:	a904      	add	r1, sp, #16
   b5c72:	4620      	mov	r0, r4
   b5c74:	f001 fce6 	bl	b7644 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b5c78:	b160      	cbz	r0, b5c94 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b5c7a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b5c7c:	a808      	add	r0, sp, #32
   b5c7e:	f001 fbf5 	bl	b746c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b5c82:	a804      	add	r0, sp, #16
   b5c84:	f001 fbf2 	bl	b746c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b5c88:	a801      	add	r0, sp, #4
   b5c8a:	f7ff f871 	bl	b4d70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b5c8e:	4620      	mov	r0, r4
   b5c90:	b00d      	add	sp, #52	; 0x34
   b5c92:	bd30      	pop	{r4, r5, pc}
   b5c94:	4620      	mov	r0, r4
   b5c96:	a908      	add	r1, sp, #32
   b5c98:	f001 fcd4 	bl	b7644 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b5c9c:	3410      	adds	r4, #16
   b5c9e:	2800      	cmp	r0, #0
   b5ca0:	d0e4      	beq.n	b5c6c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b5ca2:	e7ea      	b.n	b5c7a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b5ca4:	2400      	movs	r4, #0
   b5ca6:	e7e9      	b.n	b5c7c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b5ca8:	2401      	movs	r4, #1
   b5caa:	e7ed      	b.n	b5c88 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b5cac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b5cae:	2300      	movs	r3, #0
   b5cb0:	e9c0 3300 	strd	r3, r3, [r0]
   b5cb4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5cb6:	684f      	ldr	r7, [r1, #4]
   b5cb8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5cba:	4605      	mov	r5, r0
   b5cbc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5cbe:	dd3e      	ble.n	b5d3e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b5cc0:	00f8      	lsls	r0, r7, #3
   b5cc2:	f7fe fd19 	bl	b46f8 <malloc>
            if (!d) {
   b5cc6:	4604      	mov	r4, r0
   b5cc8:	b3c8      	cbz	r0, b5d3e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b5cca:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b5cce:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b5cd0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b5cd4:	d910      	bls.n	b5cf8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b5cd6:	429c      	cmp	r4, r3
   b5cd8:	d20f      	bcs.n	b5cfa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b5cda:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b5cdc:	1a1a      	subs	r2, r3, r0
   b5cde:	f1a0 0c08 	sub.w	ip, r0, #8
   b5ce2:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b5ce4:	459c      	cmp	ip, r3
   b5ce6:	d018      	beq.n	b5d1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b5ce8:	b11a      	cbz	r2, b5cf2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b5cea:	6819      	ldr	r1, [r3, #0]
   b5cec:	6011      	str	r1, [r2, #0]
   b5cee:	6859      	ldr	r1, [r3, #4]
   b5cf0:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b5cf2:	3b08      	subs	r3, #8
   b5cf4:	3a08      	subs	r2, #8
   b5cf6:	e7f5      	b.n	b5ce4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b5cf8:	d00f      	beq.n	b5d1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b5cfa:	4601      	mov	r1, r0
   b5cfc:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b5cfe:	428b      	cmp	r3, r1
   b5d00:	d00b      	beq.n	b5d1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b5d02:	b13a      	cbz	r2, b5d14 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b5d04:	f8d1 c000 	ldr.w	ip, [r1]
   b5d08:	f8c2 c000 	str.w	ip, [r2]
   b5d0c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b5d10:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b5d14:	3108      	adds	r1, #8
   b5d16:	3208      	adds	r2, #8
   b5d18:	e7f1      	b.n	b5cfe <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b5d1a:	f7fe fcf5 	bl	b4708 <free>
        data_ = d;
   b5d1e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5d20:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d22:	e9d6 3100 	ldrd	r3, r1, [r6]
   b5d26:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b5d2a:	4298      	cmp	r0, r3
   b5d2c:	d006      	beq.n	b5d3c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b5d2e:	681a      	ldr	r2, [r3, #0]
   b5d30:	6022      	str	r2, [r4, #0]
   b5d32:	685a      	ldr	r2, [r3, #4]
   b5d34:	6062      	str	r2, [r4, #4]
   b5d36:	3308      	adds	r3, #8
   b5d38:	3408      	adds	r4, #8
   b5d3a:	e7f6      	b.n	b5d2a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b5d3c:	6069      	str	r1, [r5, #4]
}
   b5d3e:	4628      	mov	r0, r5
   b5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d42 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d42:	b570      	push	{r4, r5, r6, lr}
   b5d44:	4604      	mov	r4, r0
        capacity_(0) {
   b5d46:	2000      	movs	r0, #0
   b5d48:	e9c4 0000 	strd	r0, r0, [r4]
   b5d4c:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d4e:	684e      	ldr	r6, [r1, #4]
   b5d50:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5d52:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5d54:	dd12      	ble.n	b5d7c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b5d56:	0071      	lsls	r1, r6, #1
   b5d58:	f7fe fcde 	bl	b4718 <realloc>
            if (!d) {
   b5d5c:	b170      	cbz	r0, b5d7c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b5d5e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5d60:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d62:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5d66:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b5d6a:	429a      	cmp	r2, r3
   b5d6c:	d004      	beq.n	b5d78 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b5d6e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b5d72:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b5d76:	e7f8      	b.n	b5d6a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b5d78:	686b      	ldr	r3, [r5, #4]
   b5d7a:	6063      	str	r3, [r4, #4]
}
   b5d7c:	4620      	mov	r0, r4
   b5d7e:	bd70      	pop	{r4, r5, r6, pc}

000b5d80 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b5d80:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5d82:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5d84:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5d86:	b923      	cbnz	r3, b5d92 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b5d88:	6803      	ldr	r3, [r0, #0]
   b5d8a:	6818      	ldr	r0, [r3, #0]
   b5d8c:	b108      	cbz	r0, b5d92 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b5d8e:	f7fe fcbb 	bl	b4708 <free>
            func_();
        }
    }
   b5d92:	4620      	mov	r0, r4
   b5d94:	bd10      	pop	{r4, pc}

000b5d96 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b5d96:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5d98:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5d9a:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5d9c:	b923      	cbnz	r3, b5da8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b5d9e:	6803      	ldr	r3, [r0, #0]
   b5da0:	6818      	ldr	r0, [r3, #0]
   b5da2:	b108      	cbz	r0, b5da8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b5da4:	f7fe fcb0 	bl	b4708 <free>
    }
   b5da8:	4620      	mov	r0, r4
   b5daa:	bd10      	pop	{r4, pc}

000b5dac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b5dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b5db0:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b5db4:	b08f      	sub	sp, #60	; 0x3c
   b5db6:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b5db8:	f1b8 0f00 	cmp.w	r8, #0
   b5dbc:	d072      	beq.n	b5ea4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b5dbe:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b5dc0:	2d00      	cmp	r5, #0
   b5dc2:	d06f      	beq.n	b5ea4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b5dc4:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5dc8:	231f      	movs	r3, #31
   b5dca:	2200      	movs	r2, #0
   b5dcc:	21ff      	movs	r1, #255	; 0xff
   b5dce:	4648      	mov	r0, r9
   b5dd0:	f7ff faff 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b5dd4:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5dd6:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5dd8:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5dda:	2200      	movs	r2, #0
   b5ddc:	4619      	mov	r1, r3
   b5dde:	4638      	mov	r0, r7
   b5de0:	f7ff faf7 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5de4:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5de6:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5de8:	d006      	beq.n	b5df8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b5dea:	42ae      	cmp	r6, r5
   b5dec:	d030      	beq.n	b5e50 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b5dee:	2400      	movs	r4, #0
    }
   b5df0:	4620      	mov	r0, r4
   b5df2:	b00f      	add	sp, #60	; 0x3c
   b5df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b5df8:	4620      	mov	r0, r4
   b5dfa:	f7fe fc7d 	bl	b46f8 <malloc>
            dismissed_(false) {
   b5dfe:	ab03      	add	r3, sp, #12
   b5e00:	9304      	str	r3, [sp, #16]
   b5e02:	2300      	movs	r3, #0
   b5e04:	4604      	mov	r4, r0
   b5e06:	9003      	str	r0, [sp, #12]
   b5e08:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b5e0c:	b970      	cbnz	r0, b5e2c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b5e0e:	2320      	movs	r3, #32
   b5e10:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5e14:	4b24      	ldr	r3, [pc, #144]	; (b5ea8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5e16:	9300      	str	r3, [sp, #0]
   b5e18:	4924      	ldr	r1, [pc, #144]	; (b5eac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5e1a:	4603      	mov	r3, r0
   b5e1c:	aa06      	add	r2, sp, #24
   b5e1e:	2032      	movs	r0, #50	; 0x32
   b5e20:	f7fe fbd6 	bl	b45d0 <log_message>
                    return false;
   b5e24:	a804      	add	r0, sp, #16
   b5e26:	f7ff ffab 	bl	b5d80 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b5e2a:	e7e1      	b.n	b5df0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b5e2c:	4602      	mov	r2, r0
   b5e2e:	21ff      	movs	r1, #255	; 0xff
   b5e30:	462b      	mov	r3, r5
   b5e32:	4648      	mov	r0, r9
   b5e34:	f7ff facd 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b5e38:	9803      	ldr	r0, [sp, #12]
   b5e3a:	462a      	mov	r2, r5
   b5e3c:	4641      	mov	r1, r8
   b5e3e:	f001 fd6b 	bl	b7918 <memcmp>
   b5e42:	b118      	cbz	r0, b5e4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b5e44:	a804      	add	r0, sp, #16
   b5e46:	f7ff ff9b 	bl	b5d80 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b5e4a:	e7ce      	b.n	b5dea <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b5e4c:	2401      	movs	r4, #1
   b5e4e:	e7e9      	b.n	b5e24 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b5e50:	4628      	mov	r0, r5
   b5e52:	f7fe fc51 	bl	b46f8 <malloc>
   b5e56:	2400      	movs	r4, #0
   b5e58:	ab03      	add	r3, sp, #12
   b5e5a:	4606      	mov	r6, r0
   b5e5c:	9003      	str	r0, [sp, #12]
   b5e5e:	9304      	str	r3, [sp, #16]
   b5e60:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b5e64:	b978      	cbnz	r0, b5e86 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b5e66:	2320      	movs	r3, #32
   b5e68:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5e6c:	4b0e      	ldr	r3, [pc, #56]	; (b5ea8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5e6e:	9300      	str	r3, [sp, #0]
   b5e70:	490e      	ldr	r1, [pc, #56]	; (b5eac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5e72:	4603      	mov	r3, r0
   b5e74:	aa06      	add	r2, sp, #24
   b5e76:	2032      	movs	r0, #50	; 0x32
   b5e78:	f7fe fbaa 	bl	b45d0 <log_message>
                    return false;
   b5e7c:	4634      	mov	r4, r6
   b5e7e:	a804      	add	r0, sp, #16
   b5e80:	f7ff ff89 	bl	b5d96 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b5e84:	e7b4      	b.n	b5df0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b5e86:	4602      	mov	r2, r0
   b5e88:	21ff      	movs	r1, #255	; 0xff
   b5e8a:	462b      	mov	r3, r5
   b5e8c:	4638      	mov	r0, r7
   b5e8e:	f7ff faa0 	bl	b53d2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b5e92:	9803      	ldr	r0, [sp, #12]
   b5e94:	462a      	mov	r2, r5
   b5e96:	4641      	mov	r1, r8
   b5e98:	f001 fd3e 	bl	b7918 <memcmp>
   b5e9c:	2800      	cmp	r0, #0
   b5e9e:	d1ee      	bne.n	b5e7e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b5ea0:	2401      	movs	r4, #1
   b5ea2:	e7ec      	b.n	b5e7e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b5ea4:	2401      	movs	r4, #1
   b5ea6:	e7a3      	b.n	b5df0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b5ea8:	000b7d0c 	.word	0x000b7d0c
   b5eac:	000b7c8b 	.word	0x000b7c8b

000b5eb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5eb0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5eb2:	6883      	ldr	r3, [r0, #8]
   b5eb4:	428b      	cmp	r3, r1
   b5eb6:	da02      	bge.n	b5ebe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5eb8:	f7fe fd54 	bl	b4964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5ebc:	bd08      	pop	{r3, pc}
    return true;
   b5ebe:	2001      	movs	r0, #1
   b5ec0:	e7fc      	b.n	b5ebc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5ec2 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b5ec2:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b5ec4:	680b      	ldr	r3, [r1, #0]
   b5ec6:	6003      	str	r3, [r0, #0]
   b5ec8:	684b      	ldr	r3, [r1, #4]
   b5eca:	6043      	str	r3, [r0, #4]
   b5ecc:	4604      	mov	r4, r0
   b5ece:	460d      	mov	r5, r1
class BleAdvertisingData {
   b5ed0:	3008      	adds	r0, #8
   b5ed2:	3108      	adds	r1, #8
   b5ed4:	f7fe fd56 	bl	b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b5ed8:	f105 0114 	add.w	r1, r5, #20
   b5edc:	f104 0014 	add.w	r0, r4, #20
   b5ee0:	f7fe fd50 	bl	b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b5ee4:	f895 3020 	ldrb.w	r3, [r5, #32]
   b5ee8:	f884 3020 	strb.w	r3, [r4, #32]
   b5eec:	4620      	mov	r0, r4
   b5eee:	bd38      	pop	{r3, r4, r5, pc}

000b5ef0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b5ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5ef2:	4604      	mov	r4, r0
   b5ef4:	a801      	add	r0, sp, #4
   b5ef6:	f7fe fd45 	bl	b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b5efa:	9b01      	ldr	r3, [sp, #4]
   b5efc:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5efe:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5f00:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f02:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5f04:	6062      	str	r2, [r4, #4]
   b5f06:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f08:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f0a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5f0c:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f0e:	9001      	str	r0, [sp, #4]
   b5f10:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b5f12:	f7fe fbf9 	bl	b4708 <free>
   b5f16:	b004      	add	sp, #16
   b5f18:	bd10      	pop	{r4, pc}

000b5f1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f1e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5f20:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5f22:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5f24:	4419      	add	r1, r3
   b5f26:	6883      	ldr	r3, [r0, #8]
   b5f28:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5f2a:	4604      	mov	r4, r0
   b5f2c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5f2e:	dc12      	bgt.n	b5f56 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5f30:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5f32:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5f34:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5f36:	1bd2      	subs	r2, r2, r7
   b5f38:	4631      	mov	r1, r6
   b5f3a:	1970      	adds	r0, r6, r5
   b5f3c:	f001 fd0a 	bl	b7954 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5f40:	462a      	mov	r2, r5
   b5f42:	4641      	mov	r1, r8
   b5f44:	4630      	mov	r0, r6
   b5f46:	f001 fcf7 	bl	b7938 <memcpy>
    size_ += n;
   b5f4a:	6863      	ldr	r3, [r4, #4]
   b5f4c:	442b      	add	r3, r5
   b5f4e:	6063      	str	r3, [r4, #4]
    return true;
   b5f50:	2001      	movs	r0, #1
}
   b5f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5f56:	f7fe fd05 	bl	b4964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5f5a:	2800      	cmp	r0, #0
   b5f5c:	d1e8      	bne.n	b5f30 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5f5e:	e7f8      	b.n	b5f52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5f60 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5f60:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b5f62:	460a      	mov	r2, r1
   b5f64:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b5f66:	b510      	push	{r4, lr}
   b5f68:	4604      	mov	r4, r0
    size_ = 0;
   b5f6a:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b5f6c:	b102      	cbz	r2, b5f70 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b5f6e:	b90b      	cbnz	r3, b5f74 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b5f70:	2000      	movs	r0, #0
}
   b5f72:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b5f74:	2bff      	cmp	r3, #255	; 0xff
   b5f76:	bf28      	it	cs
   b5f78:	23ff      	movcs	r3, #255	; 0xff
   b5f7a:	f7ff ffce 	bl	b5f1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b5f7e:	2800      	cmp	r0, #0
   b5f80:	d0f7      	beq.n	b5f72 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b5f82:	6860      	ldr	r0, [r4, #4]
   b5f84:	e7f5      	b.n	b5f72 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b5f86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f88:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f8a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5f8e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5f90:	4604      	mov	r4, r0
   b5f92:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f94:	da0b      	bge.n	b5fae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5f96:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5f98:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5f9a:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5f9c:	1b52      	subs	r2, r2, r5
   b5f9e:	1c48      	adds	r0, r1, #1
   b5fa0:	f001 fcd8 	bl	b7954 <memmove>
    new(p) T(std::move(value));
   b5fa4:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5fa6:	6863      	ldr	r3, [r4, #4]
   b5fa8:	3301      	adds	r3, #1
   b5faa:	6063      	str	r3, [r4, #4]
}
   b5fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5fae:	3101      	adds	r1, #1
   b5fb0:	f7fe fcd8 	bl	b4964 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5fb4:	2800      	cmp	r0, #0
   b5fb6:	d1ee      	bne.n	b5f96 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5fb8:	e7f8      	b.n	b5fac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5fba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5fba:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5fbc:	6841      	ldr	r1, [r0, #4]
   b5fbe:	f7ff bfe2 	b.w	b5f86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5fc2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5fc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5fc6:	4604      	mov	r4, r0
   b5fc8:	461d      	mov	r5, r3
   b5fca:	460f      	mov	r7, r1
   b5fcc:	ab01      	add	r3, sp, #4
   b5fce:	4690      	mov	r8, r2
   b5fd0:	460a      	mov	r2, r1
   b5fd2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5fd6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5fda:	f7fe ff7f 	bl	b4edc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5fde:	1cae      	adds	r6, r5, #2
   b5fe0:	6863      	ldr	r3, [r4, #4]
   b5fe2:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5fe4:	f1b9 0f00 	cmp.w	r9, #0
   b5fe8:	d126      	bne.n	b6038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5fea:	b328      	cbz	r0, b6038 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5fec:	4433      	add	r3, r6
   b5fee:	1a1b      	subs	r3, r3, r0
   b5ff0:	2bff      	cmp	r3, #255	; 0xff
   b5ff2:	d809      	bhi.n	b6008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5ff4:	9901      	ldr	r1, [sp, #4]
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	f7ff fcfc 	bl	b59f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5ffc:	6861      	ldr	r1, [r4, #4]
   b5ffe:	4620      	mov	r0, r4
   b6000:	4431      	add	r1, r6
   b6002:	f7ff ff55 	bl	b5eb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6006:	b918      	cbnz	r0, b6010 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6008:	6860      	ldr	r0, [r4, #4]
}
   b600a:	b003      	add	sp, #12
   b600c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6010:	1c6a      	adds	r2, r5, #1
   b6012:	9901      	ldr	r1, [sp, #4]
   b6014:	b2d2      	uxtb	r2, r2
   b6016:	4620      	mov	r0, r4
   b6018:	f7ff ffb5 	bl	b5f86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b601c:	9901      	ldr	r1, [sp, #4]
   b601e:	463a      	mov	r2, r7
   b6020:	3101      	adds	r1, #1
   b6022:	4620      	mov	r0, r4
   b6024:	f7ff ffaf 	bl	b5f86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6028:	9901      	ldr	r1, [sp, #4]
   b602a:	462b      	mov	r3, r5
   b602c:	4642      	mov	r2, r8
   b602e:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6030:	4620      	mov	r0, r4
   b6032:	f7ff ff72 	bl	b5f1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6036:	e7e7      	b.n	b6008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6038:	18f1      	adds	r1, r6, r3
   b603a:	29ff      	cmp	r1, #255	; 0xff
   b603c:	d8e4      	bhi.n	b6008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b603e:	4620      	mov	r0, r4
   b6040:	f7ff ff36 	bl	b5eb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6044:	2800      	cmp	r0, #0
   b6046:	d0df      	beq.n	b6008 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6048:	1c69      	adds	r1, r5, #1
   b604a:	b2c9      	uxtb	r1, r1
   b604c:	4620      	mov	r0, r4
   b604e:	f7ff ffb4 	bl	b5fba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6052:	4639      	mov	r1, r7
   b6054:	4620      	mov	r0, r4
   b6056:	f7ff ffb0 	bl	b5fba <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b605a:	6861      	ldr	r1, [r4, #4]
   b605c:	462b      	mov	r3, r5
   b605e:	4642      	mov	r2, r8
   b6060:	e7e6      	b.n	b6030 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6062 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6062:	b430      	push	{r4, r5}
   b6064:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6068:	b11a      	cbz	r2, b6072 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b606a:	9502      	str	r5, [sp, #8]
}
   b606c:	bc30      	pop	{r4, r5}
   b606e:	f7ff bfa8 	b.w	b5fc2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6072:	6840      	ldr	r0, [r0, #4]
}
   b6074:	bc30      	pop	{r4, r5}
   b6076:	4770      	bx	lr

000b6078 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b607a:	2300      	movs	r3, #0
   b607c:	e9c0 3300 	strd	r3, r3, [r0]
   b6080:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6082:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6084:	9300      	str	r3, [sp, #0]
   b6086:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6088:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b608c:	4619      	mov	r1, r3
   b608e:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6092:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6094:	f7ff ffe5 	bl	b6062 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6098:	4620      	mov	r0, r4
   b609a:	b004      	add	sp, #16
   b609c:	bd10      	pop	{r4, pc}

000b609e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b609e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b60a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60a2:	4604      	mov	r4, r0
   b60a4:	460d      	mov	r5, r1
   b60a6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b60a8:	d914      	bls.n	b60d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b60aa:	4290      	cmp	r0, r2
   b60ac:	d213      	bcs.n	b60d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b60ae:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b60b2:	1a75      	subs	r5, r6, r1
   b60b4:	f1a1 0708 	sub.w	r7, r1, #8
   b60b8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b60ba:	42b7      	cmp	r7, r6
   b60bc:	d018      	beq.n	b60f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b60be:	b11c      	cbz	r4, b60c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b60c0:	4631      	mov	r1, r6
   b60c2:	4620      	mov	r0, r4
   b60c4:	f7ff fce1 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b60c8:	1d30      	adds	r0, r6, #4
   b60ca:	f7fe fc35 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b60ce:	3e08      	subs	r6, #8
   b60d0:	3c08      	subs	r4, #8
   b60d2:	e7f2      	b.n	b60ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b60d4:	d00c      	beq.n	b60f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b60d6:	42b5      	cmp	r5, r6
   b60d8:	d00a      	beq.n	b60f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b60da:	b11c      	cbz	r4, b60e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b60dc:	4629      	mov	r1, r5
   b60de:	4620      	mov	r0, r4
   b60e0:	f7ff fcd3 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b60e4:	1d28      	adds	r0, r5, #4
   b60e6:	f7fe fc27 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b60ea:	3508      	adds	r5, #8
   b60ec:	3408      	adds	r4, #8
   b60ee:	e7f2      	b.n	b60d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b60f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b60f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b60f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b60f4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b60f6:	6846      	ldr	r6, [r0, #4]
   b60f8:	4668      	mov	r0, sp
   b60fa:	f7ff fcc6 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b60fe:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6102:	429f      	cmp	r7, r3
   b6104:	db12      	blt.n	b612c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6106:	3701      	adds	r7, #1
        if (n > 0) {
   b6108:	2f00      	cmp	r7, #0
   b610a:	dd29      	ble.n	b6160 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b610c:	00f8      	lsls	r0, r7, #3
   b610e:	f7fe faf3 	bl	b46f8 <malloc>
            if (!d) {
   b6112:	4605      	mov	r5, r0
   b6114:	b1f0      	cbz	r0, b6154 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6116:	e9d4 1200 	ldrd	r1, r2, [r4]
   b611a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b611e:	f7ff ffbe 	bl	b609e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6122:	6820      	ldr	r0, [r4, #0]
   b6124:	f7fe faf0 	bl	b4708 <free>
        data_ = d;
   b6128:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b612a:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b612c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b612e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6134:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6138:	4631      	mov	r1, r6
   b613a:	f106 0008 	add.w	r0, r6, #8
   b613e:	f7ff ffae 	bl	b609e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6142:	b11e      	cbz	r6, b614c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6144:	4669      	mov	r1, sp
   b6146:	4630      	mov	r0, r6
   b6148:	f7ff fc9f 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b614c:	6863      	ldr	r3, [r4, #4]
   b614e:	3301      	adds	r3, #1
   b6150:	6063      	str	r3, [r4, #4]
    return true;
   b6152:	2501      	movs	r5, #1
   b6154:	a801      	add	r0, sp, #4
   b6156:	f7fe fbef 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b615a:	4628      	mov	r0, r5
   b615c:	b003      	add	sp, #12
   b615e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6160:	2500      	movs	r5, #0
   b6162:	e7de      	b.n	b6122 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6166:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b616a:	4605      	mov	r5, r0
   b616c:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b616e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6172:	42a6      	cmp	r6, r4
   b6174:	d005      	beq.n	b6182 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6176:	4639      	mov	r1, r7
   b6178:	4620      	mov	r0, r4
   b617a:	f7ff fb02 	bl	b5782 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b617e:	b108      	cbz	r0, b6184 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6180:	b914      	cbnz	r4, b6188 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6184:	3408      	adds	r4, #8
   b6186:	e7f4      	b.n	b6172 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6188:	1d20      	adds	r0, r4, #4
   b618a:	f7fe fbd5 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b618e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6192:	f104 0108 	add.w	r1, r4, #8
   b6196:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b619a:	4620      	mov	r0, r4
   b619c:	f7ff ff7f 	bl	b609e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b61a0:	686b      	ldr	r3, [r5, #4]
   b61a2:	3b01      	subs	r3, #1
   b61a4:	606b      	str	r3, [r5, #4]
    return true;
   b61a6:	e7ec      	b.n	b6182 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b61a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b61a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b61ac:	4605      	mov	r5, r0
   b61ae:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b61b0:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b61b2:	460c      	mov	r4, r1
        WiringBleLock lk;
   b61b4:	f7fe ff60 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b61b8:	682e      	ldr	r6, [r5, #0]
   b61ba:	1ef3      	subs	r3, r6, #3
   b61bc:	2b0d      	cmp	r3, #13
   b61be:	d83c      	bhi.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b61c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   b61c4:	0057000e 	.word	0x0057000e
   b61c8:	00d3003b 	.word	0x00d3003b
   b61cc:	003b003b 	.word	0x003b003b
   b61d0:	003b003b 	.word	0x003b003b
   b61d4:	009d003b 	.word	0x009d003b
   b61d8:	009d009d 	.word	0x009d009d
   b61dc:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b61e0:	a804      	add	r0, sp, #16
   b61e2:	f7ff fa75 	bl	b56d0 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b61e6:	9b04      	ldr	r3, [sp, #16]
   b61e8:	89aa      	ldrh	r2, [r5, #12]
   b61ea:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b61ec:	6869      	ldr	r1, [r5, #4]
   b61ee:	9804      	ldr	r0, [sp, #16]
   b61f0:	3108      	adds	r1, #8
   b61f2:	3002      	adds	r0, #2
   b61f4:	f7fe ff5a 	bl	b50ac <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b61f8:	a904      	add	r1, sp, #16
   b61fa:	a806      	add	r0, sp, #24
   b61fc:	f7ff fc45 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6200:	a906      	add	r1, sp, #24
   b6202:	f104 0018 	add.w	r0, r4, #24
   b6206:	f7ff ff74 	bl	b60f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b620a:	4605      	mov	r5, r0
   b620c:	a807      	add	r0, sp, #28
   b620e:	f7fe fb93 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6212:	b9c5      	cbnz	r5, b6246 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6214:	2320      	movs	r3, #32
   b6216:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b621a:	4b5e      	ldr	r3, [pc, #376]	; (b6394 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b621c:	495e      	ldr	r1, [pc, #376]	; (b6398 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b621e:	9300      	str	r3, [sp, #0]
   b6220:	aa06      	add	r2, sp, #24
   b6222:	462b      	mov	r3, r5
   b6224:	2001      	movs	r0, #1
   b6226:	f7fe f9d3 	bl	b45d0 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b622a:	9b04      	ldr	r3, [sp, #16]
   b622c:	4629      	mov	r1, r5
   b622e:	8818      	ldrh	r0, [r3, #0]
   b6230:	f7fe f926 	bl	b4480 <hal_ble_gap_disconnect>
   b6234:	a805      	add	r0, sp, #20
   b6236:	f7fe fb7f 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b623a:	a803      	add	r0, sp, #12
   b623c:	f7fe ff2a 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6240:	b00e      	add	sp, #56	; 0x38
   b6242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6248:	b123      	cbz	r3, b6254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b624a:	a904      	add	r1, sp, #16
   b624c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6250:	f7ff fc8c 	bl	b5b6c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6254:	a805      	add	r0, sp, #20
   b6256:	f7fe fb6f 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b625a:	2120      	movs	r1, #32
   b625c:	2300      	movs	r3, #0
   b625e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b6262:	4a4e      	ldr	r2, [pc, #312]	; (b639c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b6264:	9200      	str	r2, [sp, #0]
   b6266:	494c      	ldr	r1, [pc, #304]	; (b6398 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6268:	aa06      	add	r2, sp, #24
   b626a:	2001      	movs	r0, #1
   b626c:	f7fe f9b0 	bl	b45d0 <log_message>
   b6270:	e7e3      	b.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6272:	89a9      	ldrh	r1, [r5, #12]
   b6274:	4620      	mov	r0, r4
   b6276:	f7ff f93e 	bl	b54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b627a:	4606      	mov	r6, r0
   b627c:	2800      	cmp	r0, #0
   b627e:	d0dc      	beq.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6280:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6282:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6286:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b628a:	8029      	strh	r1, [r5, #0]
   b628c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6290:	429a      	cmp	r2, r3
   b6292:	d003      	beq.n	b629c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b6294:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6298:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b629a:	e7f9      	b.n	b6290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b629c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b62a0:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b62a4:	45b8      	cmp	r8, r7
   b62a6:	d004      	beq.n	b62b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b62a8:	1d38      	adds	r0, r7, #4
   b62aa:	f7fe fb45 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b62ae:	3708      	adds	r7, #8
   b62b0:	e7f8      	b.n	b62a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b62b2:	2300      	movs	r3, #0
   b62b4:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b62b6:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b62ba:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b62be:	45b8      	cmp	r8, r7
   b62c0:	d004      	beq.n	b62cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b62c2:	1d38      	adds	r0, r7, #4
   b62c4:	f7fe fb38 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b62c8:	3708      	adds	r7, #8
   b62ca:	e7f8      	b.n	b62be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b62cc:	2300      	movs	r3, #0
   b62ce:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b62d0:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b62d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b62d4:	b123      	cbz	r3, b62e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b62d6:	4631      	mov	r1, r6
   b62d8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b62dc:	f7ff fc46 	bl	b5b6c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b62e0:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b62e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b62e6:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b62e8:	4631      	mov	r1, r6
   b62ea:	f104 0018 	add.w	r0, r4, #24
   b62ee:	f7ff ff39 	bl	b6164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b62f2:	2220      	movs	r2, #32
   b62f4:	2300      	movs	r3, #0
   b62f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b62fa:	4a29      	ldr	r2, [pc, #164]	; (b63a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b62fc:	e7b2      	b.n	b6264 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b62fe:	89a9      	ldrh	r1, [r5, #12]
   b6300:	4620      	mov	r0, r4
   b6302:	f7ff f8f8 	bl	b54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6306:	2800      	cmp	r0, #0
   b6308:	d097      	beq.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b630a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b630c:	2b00      	cmp	r3, #0
   b630e:	d094      	beq.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6310:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6312:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6314:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6318:	d001      	beq.n	b631e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b631a:	2e10      	cmp	r6, #16
   b631c:	d117      	bne.n	b634e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b631e:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b6320:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b6322:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b6324:	2506      	movs	r5, #6
                        };
   b6326:	f88d 3015 	strb.w	r3, [sp, #21]
   b632a:	9104      	str	r1, [sp, #16]
   b632c:	f88d 2014 	strb.w	r2, [sp, #20]
   b6330:	9006      	str	r0, [sp, #24]
   b6332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b6336:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b6338:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b633c:	9508      	str	r5, [sp, #32]
   b633e:	e883 0003 	stmia.w	r3, {r0, r1}
   b6342:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6344:	a906      	add	r1, sp, #24
   b6346:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b634a:	4798      	blx	r3
   b634c:	e775      	b.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b634e:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6350:	bf01      	itttt	eq
   b6352:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6354:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6356:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b635a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b635c:	bf0f      	iteee	eq
   b635e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b6362:	461a      	movne	r2, r3
   b6364:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b6366:	461d      	movne	r5, r3
   b6368:	e7dd      	b.n	b6326 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b636a:	89a9      	ldrh	r1, [r5, #12]
   b636c:	4620      	mov	r0, r4
   b636e:	f7ff f8c2 	bl	b54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b6372:	4601      	mov	r1, r0
   b6374:	2800      	cmp	r0, #0
   b6376:	f43f af60 	beq.w	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b637a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b637c:	2b00      	cmp	r3, #0
   b637e:	f43f af5c 	beq.w	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6382:	686b      	ldr	r3, [r5, #4]
   b6384:	9306      	str	r3, [sp, #24]
   b6386:	aa06      	add	r2, sp, #24
   b6388:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b638a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b638e:	4798      	blx	r3
   b6390:	e753      	b.n	b623a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6392:	bf00      	nop
   b6394:	000b7d27 	.word	0x000b7d27
   b6398:	000b7c8b 	.word	0x000b7c8b
   b639c:	000b7d4d 	.word	0x000b7d4d
   b63a0:	000b7d57 	.word	0x000b7d57

000b63a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b63a4:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b63a6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b63a8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b63aa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b63ac:	dd05      	ble.n	b63ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b63ae:	2114      	movs	r1, #20
   b63b0:	4369      	muls	r1, r5
   b63b2:	f7fe f9b1 	bl	b4718 <realloc>
            if (!d) {
   b63b6:	b918      	cbnz	r0, b63c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b63b8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b63ba:	f7fe f9a5 	bl	b4708 <free>
        T* d = nullptr;
   b63be:	2000      	movs	r0, #0
        data_ = d;
   b63c0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b63c2:	60a5      	str	r5, [r4, #8]
        return true;
   b63c4:	2001      	movs	r0, #1
   b63c6:	e7f7      	b.n	b63b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b63c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b63c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b63cc:	2400      	movs	r4, #0
   b63ce:	e9c0 4400 	strd	r4, r4, [r0]
   b63d2:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b63d4:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b63d6:	6849      	ldr	r1, [r1, #4]
   b63d8:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b63da:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b63dc:	dd1a      	ble.n	b6414 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b63de:	f7ff ffe1 	bl	b63a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b63e2:	b1b8      	cbz	r0, b6414 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b63e4:	e9d8 9300 	ldrd	r9, r3, [r8]
   b63e8:	f04f 0c14 	mov.w	ip, #20
   b63ec:	f8d7 e000 	ldr.w	lr, [r7]
   b63f0:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b63f4:	eb09 0504 	add.w	r5, r9, r4
   b63f8:	45ac      	cmp	ip, r5
   b63fa:	d008      	beq.n	b640e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b63fc:	eb1e 0604 	adds.w	r6, lr, r4
   b6400:	bf1f      	itttt	ne
   b6402:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b6404:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b6406:	682b      	ldrne	r3, [r5, #0]
   b6408:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b640a:	3414      	adds	r4, #20
   b640c:	e7f2      	b.n	b63f4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b640e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6412:	607b      	str	r3, [r7, #4]
}
   b6414:	4638      	mov	r0, r7
   b6416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b641a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b641e:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b6422:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6424:	6883      	ldr	r3, [r0, #8]
   b6426:	19e9      	adds	r1, r5, r7
   b6428:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b642a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b642c:	dc17      	bgt.n	b645e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b642e:	2314      	movs	r3, #20
   b6430:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b6432:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6434:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b6436:	fb03 f907 	mul.w	r9, r3, r7
   b643a:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b643c:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b643e:	1b52      	subs	r2, r2, r5
   b6440:	4631      	mov	r1, r6
   b6442:	eb06 0009 	add.w	r0, r6, r9
   b6446:	f001 fa85 	bl	b7954 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b644a:	464a      	mov	r2, r9
   b644c:	4641      	mov	r1, r8
   b644e:	4630      	mov	r0, r6
   b6450:	f001 fa72 	bl	b7938 <memcpy>
    size_ += n;
   b6454:	6863      	ldr	r3, [r4, #4]
   b6456:	443b      	add	r3, r7
   b6458:	6063      	str	r3, [r4, #4]
}
   b645a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b645e:	f7ff ffa1 	bl	b63a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6462:	2800      	cmp	r0, #0
   b6464:	d1e3      	bne.n	b642e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b6466:	e7f8      	b.n	b645a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b6468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6468:	b082      	sub	sp, #8
   b646a:	b570      	push	{r4, r5, r6, lr}
   b646c:	460c      	mov	r4, r1
   b646e:	a904      	add	r1, sp, #16
   b6470:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6474:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6478:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b647a:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b647c:	da17      	bge.n	b64ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b647e:	2314      	movs	r3, #20
   b6480:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b6484:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b6486:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b6488:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b648a:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b648c:	1a52      	subs	r2, r2, r1
   b648e:	18e0      	adds	r0, r4, r3
   b6490:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b6492:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6494:	f001 fa5e 	bl	b7954 <memmove>
    new(p) T(std::move(value));
   b6498:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b649c:	6833      	ldr	r3, [r6, #0]
   b649e:	6023      	str	r3, [r4, #0]
    ++size_;
   b64a0:	686b      	ldr	r3, [r5, #4]
   b64a2:	3301      	adds	r3, #1
   b64a4:	606b      	str	r3, [r5, #4]
}
   b64a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b64aa:	b002      	add	sp, #8
   b64ac:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64ae:	3101      	adds	r1, #1
   b64b0:	f7ff ff78 	bl	b63a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b64b4:	2800      	cmp	r0, #0
   b64b6:	d1e2      	bne.n	b647e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b64b8:	e7f5      	b.n	b64a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b64ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b64be:	2400      	movs	r4, #0
   b64c0:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b64c2:	1e93      	subs	r3, r2, #2
   b64c4:	e9c0 4400 	strd	r4, r4, [r0]
   b64c8:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b64ca:	4605      	mov	r5, r0
   b64cc:	460f      	mov	r7, r1
   b64ce:	4690      	mov	r8, r2
   b64d0:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b64d2:	9305      	str	r3, [sp, #20]
    return size_;
   b64d4:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b64d6:	428c      	cmp	r4, r1
   b64d8:	da72      	bge.n	b65c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b64da:	6838      	ldr	r0, [r7, #0]
   b64dc:	ab07      	add	r3, sp, #28
   b64de:	4642      	mov	r2, r8
   b64e0:	1b09      	subs	r1, r1, r4
   b64e2:	4420      	add	r0, r4
   b64e4:	f7fe fcfa 	bl	b4edc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b64e8:	4606      	mov	r6, r0
   b64ea:	2800      	cmp	r0, #0
   b64ec:	d068      	beq.n	b65c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b64ee:	9b05      	ldr	r3, [sp, #20]
   b64f0:	2b01      	cmp	r3, #1
   b64f2:	d82f      	bhi.n	b6554 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b64f4:	f1a0 0b02 	sub.w	fp, r0, #2
   b64f8:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b64fc:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b6500:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6504:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6506:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6508:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b650a:	d055      	beq.n	b65b8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b650c:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b650e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b6512:	4413      	add	r3, r2
   b6514:	a808      	add	r0, sp, #32
   b6516:	78d9      	ldrb	r1, [r3, #3]
   b6518:	789b      	ldrb	r3, [r3, #2]
   b651a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b651e:	f7fe fe42 	bl	b51a6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b6522:	f10d 0e20 	add.w	lr, sp, #32
   b6526:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b652a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b652e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6532:	f8de 3000 	ldr.w	r3, [lr]
   b6536:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b653a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b653e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b6542:	ab0d      	add	r3, sp, #52	; 0x34
   b6544:	cb0c      	ldmia	r3, {r2, r3}
   b6546:	6869      	ldr	r1, [r5, #4]
   b6548:	4628      	mov	r0, r5
   b654a:	f7ff ff8d 	bl	b6468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b654e:	f109 0901 	add.w	r9, r9, #1
   b6552:	e7d7      	b.n	b6504 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b6554:	f1a8 0306 	sub.w	r3, r8, #6
   b6558:	2b01      	cmp	r3, #1
   b655a:	d82d      	bhi.n	b65b8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b655c:	f1a0 0b02 	sub.w	fp, r0, #2
   b6560:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b6564:	f04f 0900 	mov.w	r9, #0
   b6568:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b656c:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b656e:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6570:	d022      	beq.n	b65b8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b6572:	3302      	adds	r3, #2
    return data_[i];
   b6574:	6839      	ldr	r1, [r7, #0]
   b6576:	4423      	add	r3, r4
   b6578:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b657c:	2201      	movs	r2, #1
   b657e:	4419      	add	r1, r3
   b6580:	a808      	add	r0, sp, #32
   b6582:	f7fe fdf1 	bl	b5168 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b6586:	f10d 0e20 	add.w	lr, sp, #32
   b658a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b658e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6596:	f8de 3000 	ldr.w	r3, [lr]
   b659a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b659e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b65a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b65a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b65aa:	6869      	ldr	r1, [r5, #4]
   b65ac:	4628      	mov	r0, r5
   b65ae:	f7ff ff5b 	bl	b6468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b65b2:	f109 0901 	add.w	r9, r9, #1
   b65b6:	e7d9      	b.n	b656c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b65b8:	9b07      	ldr	r3, [sp, #28]
   b65ba:	441c      	add	r4, r3
   b65bc:	4434      	add	r4, r6
   b65be:	e789      	b.n	b64d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b65c0:	4628      	mov	r0, r5
   b65c2:	b013      	add	sp, #76	; 0x4c
   b65c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b65c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b65c8:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b65ca:	2300      	movs	r3, #0
   b65cc:	b085      	sub	sp, #20
   b65ce:	e9c0 3300 	strd	r3, r3, [r0]
   b65d2:	6083      	str	r3, [r0, #8]
   b65d4:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b65d6:	2202      	movs	r2, #2
   b65d8:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b65da:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b65dc:	f7ff ff6d 	bl	b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b65e0:	a901      	add	r1, sp, #4
   b65e2:	4620      	mov	r0, r4
   b65e4:	f7ff ff19 	bl	b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b65e8:	a801      	add	r0, sp, #4
   b65ea:	f7ff f9b8 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b65ee:	2202      	movs	r2, #2
   b65f0:	4629      	mov	r1, r5
   b65f2:	a801      	add	r0, sp, #4
   b65f4:	f7ff ff61 	bl	b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b65f8:	a901      	add	r1, sp, #4
   b65fa:	4620      	mov	r0, r4
   b65fc:	f7ff ff0d 	bl	b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6600:	a801      	add	r0, sp, #4
   b6602:	f7ff f9ac 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b6606:	2203      	movs	r2, #3
   b6608:	4629      	mov	r1, r5
   b660a:	a801      	add	r0, sp, #4
   b660c:	f7ff ff55 	bl	b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6610:	a901      	add	r1, sp, #4
   b6612:	4620      	mov	r0, r4
   b6614:	f7ff ff01 	bl	b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6618:	a801      	add	r0, sp, #4
   b661a:	f7ff f9a0 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b661e:	2206      	movs	r2, #6
   b6620:	4629      	mov	r1, r5
   b6622:	a801      	add	r0, sp, #4
   b6624:	f7ff ff49 	bl	b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6628:	a901      	add	r1, sp, #4
   b662a:	4620      	mov	r0, r4
   b662c:	f7ff fef5 	bl	b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6630:	a801      	add	r0, sp, #4
   b6632:	f7ff f994 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b6636:	2207      	movs	r2, #7
   b6638:	4629      	mov	r1, r5
   b663a:	a801      	add	r0, sp, #4
   b663c:	f7ff ff3d 	bl	b64ba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6640:	a901      	add	r1, sp, #4
   b6642:	4620      	mov	r0, r4
   b6644:	f7ff fee9 	bl	b641a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6648:	a801      	add	r0, sp, #4
   b664a:	f7ff f988 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b664e:	4620      	mov	r0, r4
   b6650:	b005      	add	sp, #20
   b6652:	bd30      	pop	{r4, r5, pc}

000b6654 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b6654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6658:	b085      	sub	sp, #20
   b665a:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b665c:	4601      	mov	r1, r0
   b665e:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b6660:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b6662:	f7ff ffb1 	bl	b65c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b6666:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b6668:	9b02      	ldr	r3, [sp, #8]
   b666a:	f04f 0e14 	mov.w	lr, #20
   b666e:	fb0e 6c03 	mla	ip, lr, r3, r6
   b6672:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b6674:	45b4      	cmp	ip, r6
   b6676:	d00d      	beq.n	b6694 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b6678:	45b9      	cmp	r9, r7
   b667a:	f106 0614 	add.w	r6, r6, #20
   b667e:	d009      	beq.n	b6694 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b6680:	f1a6 0514 	sub.w	r5, r6, #20
   b6684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6686:	fb0e 8407 	mla	r4, lr, r7, r8
   b668a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b668c:	682b      	ldr	r3, [r5, #0]
   b668e:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b6690:	3701      	adds	r7, #1
   b6692:	e7ef      	b.n	b6674 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b6694:	a801      	add	r0, sp, #4
   b6696:	f7ff f962 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b669a:	4638      	mov	r0, r7
   b669c:	b005      	add	sp, #20
   b669e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b66a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b66a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b66a6:	b08b      	sub	sp, #44	; 0x2c
   b66a8:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b66aa:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b66ae:	a801      	add	r0, sp, #4
   b66b0:	f7ff fe8a 	bl	b63c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b66b4:	9b02      	ldr	r3, [sp, #8]
   b66b6:	2b00      	cmp	r3, #0
   b66b8:	dd4a      	ble.n	b6750 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b66ba:	f104 0114 	add.w	r1, r4, #20
   b66be:	a804      	add	r0, sp, #16
   b66c0:	f7ff ff82 	bl	b65c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b66c4:	f104 0108 	add.w	r1, r4, #8
   b66c8:	a807      	add	r0, sp, #28
   b66ca:	f7ff ff7d 	bl	b65c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b66ce:	9d05      	ldr	r5, [sp, #20]
   b66d0:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b66d2:	2d00      	cmp	r5, #0
   b66d4:	dc01      	bgt.n	b66da <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b66d6:	2e00      	cmp	r6, #0
   b66d8:	dd38      	ble.n	b674c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b66da:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b66dc:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b66de:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b66e2:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b66e6:	2314      	movs	r3, #20
   b66e8:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b66ec:	fb03 8505 	mla	r5, r3, r5, r8
   b66f0:	fb03 9606 	mla	r6, r3, r6, r9
   b66f4:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b66f6:	45ba      	cmp	sl, r7
   b66f8:	d028      	beq.n	b674c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b66fa:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b66fc:	45ab      	cmp	fp, r5
   b66fe:	d015      	beq.n	b672c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b6700:	4659      	mov	r1, fp
   b6702:	4650      	mov	r0, sl
   b6704:	f7fe fd59 	bl	b51ba <_ZNK8particle7BleUuideqERKS0_>
   b6708:	f10b 0b14 	add.w	fp, fp, #20
   b670c:	4604      	mov	r4, r0
   b670e:	2800      	cmp	r0, #0
   b6710:	d0f4      	beq.n	b66fc <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6712:	a807      	add	r0, sp, #28
   b6714:	f7ff f923 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b6718:	a804      	add	r0, sp, #16
   b671a:	f7ff f920 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b671e:	a801      	add	r0, sp, #4
   b6720:	f7ff f91d 	bl	b595e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b6724:	4620      	mov	r0, r4
   b6726:	b00b      	add	sp, #44	; 0x2c
   b6728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b672c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b672e:	45b3      	cmp	fp, r6
   b6730:	d009      	beq.n	b6746 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b6732:	4659      	mov	r1, fp
   b6734:	4650      	mov	r0, sl
   b6736:	f7fe fd40 	bl	b51ba <_ZNK8particle7BleUuideqERKS0_>
   b673a:	f10b 0b14 	add.w	fp, fp, #20
   b673e:	4604      	mov	r4, r0
   b6740:	2800      	cmp	r0, #0
   b6742:	d0f4      	beq.n	b672e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b6744:	e7e5      	b.n	b6712 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b6746:	f10a 0a14 	add.w	sl, sl, #20
   b674a:	e7d4      	b.n	b66f6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b674c:	2400      	movs	r4, #0
   b674e:	e7e0      	b.n	b6712 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b6750:	2401      	movs	r4, #1
   b6752:	e7e4      	b.n	b671e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b6754 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6754:	b538      	push	{r3, r4, r5, lr}
   b6756:	4605      	mov	r5, r0
   b6758:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b675a:	f7fe fa4a 	bl	b4bf2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b675e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6760:	68a2      	ldr	r2, [r4, #8]
   b6762:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6764:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6766:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6768:	68e2      	ldr	r2, [r4, #12]
   b676a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b676c:	60e3      	str	r3, [r4, #12]
      }
   b676e:	bd38      	pop	{r3, r4, r5, pc}

000b6770 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b6770:	b530      	push	{r4, r5, lr}
   b6772:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b6774:	2300      	movs	r3, #0
   b6776:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b6778:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b677a:	4605      	mov	r5, r0
   b677c:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b677e:	b133      	cbz	r3, b678e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6780:	2202      	movs	r2, #2
   b6782:	4668      	mov	r0, sp
   b6784:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6786:	68e3      	ldr	r3, [r4, #12]
   b6788:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b678a:	68a3      	ldr	r3, [r4, #8]
   b678c:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b678e:	4629      	mov	r1, r5
   b6790:	4668      	mov	r0, sp
   b6792:	f7ff ffdf 	bl	b6754 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6796:	4668      	mov	r0, sp
   b6798:	f7fe fa22 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
      }
   b679c:	b005      	add	sp, #20
   b679e:	bd30      	pop	{r4, r5, pc}

000b67a0 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b67a0:	b538      	push	{r3, r4, r5, lr}
   b67a2:	460d      	mov	r5, r1
   b67a4:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b67a6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b67a8:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b67aa:	b123      	cbz	r3, b67b6 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b67ac:	6828      	ldr	r0, [r5, #0]
   b67ae:	314c      	adds	r1, #76	; 0x4c
   b67b0:	304c      	adds	r0, #76	; 0x4c
   b67b2:	f7ff ffdd 	bl	b6770 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b67b6:	4620      	mov	r0, r4
   b67b8:	682b      	ldr	r3, [r5, #0]
   b67ba:	f840 3b04 	str.w	r3, [r0], #4
   b67be:	6869      	ldr	r1, [r5, #4]
   b67c0:	f7fe fc34 	bl	b502c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b67c4:	4620      	mov	r0, r4
   b67c6:	bd38      	pop	{r3, r4, r5, pc}

000b67c8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b67c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67cc:	4604      	mov	r4, r0
   b67ce:	b087      	sub	sp, #28
    WiringBleLock lk;
   b67d0:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b67d2:	460e      	mov	r6, r1
   b67d4:	4617      	mov	r7, r2
    WiringBleLock lk;
   b67d6:	f7fe fc4f 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b67da:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b67dc:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b67e0:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b67e4:	4544      	cmp	r4, r8
   b67e6:	46a1      	mov	r9, r4
   b67e8:	d016      	beq.n	b6818 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b67ea:	4621      	mov	r1, r4
   b67ec:	a801      	add	r0, sp, #4
   b67ee:	f7fe fead 	bl	b554c <_ZNK8particle17BleCharacteristic4UUIDEv>
   b67f2:	4639      	mov	r1, r7
   b67f4:	a801      	add	r0, sp, #4
   b67f6:	f7fe fce0 	bl	b51ba <_ZNK8particle7BleUuideqERKS0_>
   b67fa:	3408      	adds	r4, #8
   b67fc:	4605      	mov	r5, r0
   b67fe:	2800      	cmp	r0, #0
   b6800:	d0f0      	beq.n	b67e4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b6802:	4649      	mov	r1, r9
   b6804:	4630      	mov	r0, r6
   b6806:	f7ff ffcb 	bl	b67a0 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b680a:	4668      	mov	r0, sp
   b680c:	f7fe fc42 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6810:	4628      	mov	r0, r5
   b6812:	b007      	add	sp, #28
   b6814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b6818:	2500      	movs	r5, #0
   b681a:	e7f6      	b.n	b680a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b681c <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b681c:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b681e:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b6820:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6822:	344c      	adds	r4, #76	; 0x4c
   b6824:	b1b9      	cbz	r1, b6856 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b6826:	e9cd 1200 	strd	r1, r2, [sp]
   b682a:	a802      	add	r0, sp, #8
   b682c:	4669      	mov	r1, sp
   b682e:	f7ff f8f5 	bl	b5a1c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6832:	2300      	movs	r3, #0
	__x.swap(*this);
   b6834:	a906      	add	r1, sp, #24
   b6836:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b6838:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b683a:	f7ff ff8b 	bl	b6754 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b683e:	4621      	mov	r1, r4
   b6840:	a806      	add	r0, sp, #24
   b6842:	f7ff ff87 	bl	b6754 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b6846:	a806      	add	r0, sp, #24
   b6848:	f7fe f9ca 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
   b684c:	a802      	add	r0, sp, #8
   b684e:	f7fe f9c7 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
}
   b6852:	b00a      	add	sp, #40	; 0x28
   b6854:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6856:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b6858:	e7eb      	b.n	b6832 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b685a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b685a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b685e:	4604      	mov	r4, r0
   b6860:	460d      	mov	r5, r1
   b6862:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6864:	d914      	bls.n	b6890 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6866:	4290      	cmp	r0, r2
   b6868:	d213      	bcs.n	b6892 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b686a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b686e:	1a75      	subs	r5, r6, r1
   b6870:	f1a1 0708 	sub.w	r7, r1, #8
   b6874:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6876:	42b7      	cmp	r7, r6
   b6878:	d018      	beq.n	b68ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b687a:	b11c      	cbz	r4, b6884 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b687c:	4631      	mov	r1, r6
   b687e:	4620      	mov	r0, r4
   b6880:	f7ff f8f9 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6884:	1d30      	adds	r0, r6, #4
   b6886:	f7fe f857 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b688a:	3e08      	subs	r6, #8
   b688c:	3c08      	subs	r4, #8
   b688e:	e7f2      	b.n	b6876 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6890:	d00c      	beq.n	b68ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6892:	42b5      	cmp	r5, r6
   b6894:	d00a      	beq.n	b68ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6896:	b11c      	cbz	r4, b68a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6898:	4629      	mov	r1, r5
   b689a:	4620      	mov	r0, r4
   b689c:	f7ff f8eb 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b68a0:	1d28      	adds	r0, r5, #4
   b68a2:	f7fe f849 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b68a6:	3508      	adds	r5, #8
   b68a8:	3408      	adds	r4, #8
   b68aa:	e7f2      	b.n	b6892 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b68ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b68ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b68ae:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b68b0:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b68b2:	4605      	mov	r5, r0
        if (n > 0) {
   b68b4:	dd11      	ble.n	b68da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b68b6:	00f0      	lsls	r0, r6, #3
   b68b8:	f7fd ff1e 	bl	b46f8 <malloc>
            if (!d) {
   b68bc:	4604      	mov	r4, r0
   b68be:	b158      	cbz	r0, b68d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b68c0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b68c4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b68c8:	f7ff ffc7 	bl	b685a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b68cc:	6828      	ldr	r0, [r5, #0]
   b68ce:	f7fd ff1b 	bl	b4708 <free>
        data_ = d;
   b68d2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b68d4:	60ae      	str	r6, [r5, #8]
        return true;
   b68d6:	2001      	movs	r0, #1
    }
   b68d8:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b68da:	2400      	movs	r4, #0
   b68dc:	e7f6      	b.n	b68cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b68de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b68de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b68e2:	2300      	movs	r3, #0
   b68e4:	e9c0 3300 	strd	r3, r3, [r0]
   b68e8:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b68ea:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b68ec:	6849      	ldr	r1, [r1, #4]
   b68ee:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b68f0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b68f2:	dd13      	ble.n	b691c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b68f4:	f7ff ffdb 	bl	b68ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b68f8:	b180      	cbz	r0, b691c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b68fa:	e9d5 6300 	ldrd	r6, r3, [r5]
   b68fe:	6827      	ldr	r7, [r4, #0]
   b6900:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b6904:	45b0      	cmp	r8, r6
   b6906:	d007      	beq.n	b6918 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b6908:	b11f      	cbz	r7, b6912 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b690a:	4631      	mov	r1, r6
   b690c:	4638      	mov	r0, r7
   b690e:	f7ff f8b2 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b6912:	3608      	adds	r6, #8
   b6914:	3708      	adds	r7, #8
   b6916:	e7f5      	b.n	b6904 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b6918:	686b      	ldr	r3, [r5, #4]
   b691a:	6063      	str	r3, [r4, #4]
}
   b691c:	4620      	mov	r0, r4
   b691e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6922 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b6922:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6924:	460d      	mov	r5, r1
   b6926:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6928:	a801      	add	r0, sp, #4
   b692a:	f7fe fba5 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b692e:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b6930:	4620      	mov	r0, r4
   b6932:	310c      	adds	r1, #12
   b6934:	f7ff ffd3 	bl	b68de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b6938:	a801      	add	r0, sp, #4
   b693a:	f7fe fbab 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b693e:	4620      	mov	r0, r4
   b6940:	b003      	add	sp, #12
   b6942:	bd30      	pop	{r4, r5, pc}

000b6944 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b6944:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b6946:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6948:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b694a:	4605      	mov	r5, r0
   b694c:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b694e:	b933      	cbnz	r3, b695e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b6950:	4608      	mov	r0, r1
   b6952:	f7fe fb25 	bl	b4fa0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b6956:	b910      	cbnz	r0, b695e <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b6958:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b695a:	2201      	movs	r2, #1
   b695c:	729a      	strb	r2, [r3, #10]
    return services();
   b695e:	4628      	mov	r0, r5
   b6960:	4621      	mov	r1, r4
   b6962:	f7ff ffde 	bl	b6922 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b6966:	4628      	mov	r0, r5
   b6968:	bd38      	pop	{r3, r4, r5, pc}

000b696a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b696a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b696c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b696e:	6845      	ldr	r5, [r0, #4]
   b6970:	4668      	mov	r0, sp
   b6972:	f7ff f880 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6976:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b697a:	4299      	cmp	r1, r3
   b697c:	da10      	bge.n	b69a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b697e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6980:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6982:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6986:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b698a:	4629      	mov	r1, r5
   b698c:	f105 0008 	add.w	r0, r5, #8
   b6990:	f7ff ff63 	bl	b685a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6994:	b98d      	cbnz	r5, b69ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6996:	6863      	ldr	r3, [r4, #4]
   b6998:	3301      	adds	r3, #1
   b699a:	6063      	str	r3, [r4, #4]
    return true;
   b699c:	2601      	movs	r6, #1
   b699e:	e006      	b.n	b69ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b69a0:	3101      	adds	r1, #1
   b69a2:	4620      	mov	r0, r4
   b69a4:	f7ff ff83 	bl	b68ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b69a8:	4606      	mov	r6, r0
   b69aa:	2800      	cmp	r0, #0
   b69ac:	d1e7      	bne.n	b697e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b69ae:	a801      	add	r0, sp, #4
   b69b0:	f7fd ffc2 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b69b4:	4630      	mov	r0, r6
   b69b6:	b002      	add	sp, #8
   b69b8:	bd70      	pop	{r4, r5, r6, pc}
   b69ba:	4669      	mov	r1, sp
   b69bc:	4628      	mov	r0, r5
   b69be:	f7ff f85a 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b69c2:	e7e8      	b.n	b6996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b69c4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b69c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b69c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b6a84 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b69cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b6a88 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b69d0:	b093      	sub	sp, #76	; 0x4c
   b69d2:	4605      	mov	r5, r0
   b69d4:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b69d6:	2700      	movs	r7, #0
   b69d8:	682b      	ldr	r3, [r5, #0]
   b69da:	42bb      	cmp	r3, r7
   b69dc:	d94e      	bls.n	b6a7c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b69de:	a803      	add	r0, sp, #12
   b69e0:	f7fe fe5a 	bl	b5698 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b69e4:	261c      	movs	r6, #28
   b69e6:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b69e8:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b69ea:	437e      	muls	r6, r7
   b69ec:	4432      	add	r2, r6
   b69ee:	f10d 0c14 	add.w	ip, sp, #20
   b69f2:	1d13      	adds	r3, r2, #4
   b69f4:	46e3      	mov	fp, ip
   b69f6:	3214      	adds	r2, #20
   b69f8:	6818      	ldr	r0, [r3, #0]
   b69fa:	6859      	ldr	r1, [r3, #4]
   b69fc:	46e6      	mov	lr, ip
   b69fe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b6a02:	3308      	adds	r3, #8
   b6a04:	4293      	cmp	r3, r2
   b6a06:	46f4      	mov	ip, lr
   b6a08:	d1f6      	bne.n	b69f8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b6a0a:	6818      	ldr	r0, [r3, #0]
   b6a0c:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b6a10:	4659      	mov	r1, fp
   b6a12:	a80a      	add	r0, sp, #40	; 0x28
   b6a14:	f7fe fb86 	bl	b5124 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b6a18:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b6a1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a22:	f8dc 3000 	ldr.w	r3, [ip]
   b6a26:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b6a28:	686b      	ldr	r3, [r5, #4]
   b6a2a:	9a03      	ldr	r2, [sp, #12]
   b6a2c:	4433      	add	r3, r6
   b6a2e:	a903      	add	r1, sp, #12
   b6a30:	8b1b      	ldrh	r3, [r3, #24]
   b6a32:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b6a34:	686b      	ldr	r3, [r5, #4]
   b6a36:	4433      	add	r3, r6
   b6a38:	8b5b      	ldrh	r3, [r3, #26]
   b6a3a:	82d3      	strh	r3, [r2, #22]
        return services_;
   b6a3c:	f8d8 0000 	ldr.w	r0, [r8]
   b6a40:	f100 040c 	add.w	r4, r0, #12
   b6a44:	a80a      	add	r0, sp, #40	; 0x28
   b6a46:	f7ff f816 	bl	b5a76 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b6a4a:	4620      	mov	r0, r4
   b6a4c:	a90a      	add	r1, sp, #40	; 0x28
   b6a4e:	f7ff ff8c 	bl	b696a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b6a52:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6a54:	a80b      	add	r0, sp, #44	; 0x2c
   b6a56:	f7fd ff6f 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a5a:	b954      	cbnz	r4, b6a72 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b6a5c:	2320      	movs	r3, #32
   b6a5e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b6a62:	f8cd 9000 	str.w	r9, [sp]
   b6a66:	4623      	mov	r3, r4
   b6a68:	aa0a      	add	r2, sp, #40	; 0x28
   b6a6a:	4651      	mov	r1, sl
   b6a6c:	2032      	movs	r0, #50	; 0x32
   b6a6e:	f7fd fdaf 	bl	b45d0 <log_message>
   b6a72:	a804      	add	r0, sp, #16
   b6a74:	f7fd ff60 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b6a78:	3701      	adds	r7, #1
   b6a7a:	e7ad      	b.n	b69d8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b6a7c:	b013      	add	sp, #76	; 0x4c
   b6a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6a82:	bf00      	nop
   b6a84:	000b7d64 	.word	0x000b7d64
   b6a88:	000b7c8b 	.word	0x000b7c8b

000b6a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6a8c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a90:	4604      	mov	r4, r0
   b6a92:	460d      	mov	r5, r1
   b6a94:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6a96:	d914      	bls.n	b6ac2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6a98:	4290      	cmp	r0, r2
   b6a9a:	d213      	bcs.n	b6ac4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6a9c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6aa0:	1a75      	subs	r5, r6, r1
   b6aa2:	f1a1 0708 	sub.w	r7, r1, #8
   b6aa6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6aa8:	42b7      	cmp	r7, r6
   b6aaa:	d018      	beq.n	b6ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6aac:	b11c      	cbz	r4, b6ab6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6aae:	4631      	mov	r1, r6
   b6ab0:	4620      	mov	r0, r4
   b6ab2:	f7fe ffd2 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6ab6:	1d30      	adds	r0, r6, #4
   b6ab8:	f7fd ff3e 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6abc:	3e08      	subs	r6, #8
   b6abe:	3c08      	subs	r4, #8
   b6ac0:	e7f2      	b.n	b6aa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6ac2:	d00c      	beq.n	b6ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6ac4:	42b5      	cmp	r5, r6
   b6ac6:	d00a      	beq.n	b6ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6ac8:	b11c      	cbz	r4, b6ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6aca:	4629      	mov	r1, r5
   b6acc:	4620      	mov	r0, r4
   b6ace:	f7fe ffc4 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6ad2:	1d28      	adds	r0, r5, #4
   b6ad4:	f7fd ff30 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6ad8:	3508      	adds	r5, #8
   b6ada:	3408      	adds	r4, #8
   b6adc:	e7f2      	b.n	b6ac4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ae0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6ae0:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6ae2:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6ae4:	4605      	mov	r5, r0
        if (n > 0) {
   b6ae6:	dd11      	ble.n	b6b0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6ae8:	00f0      	lsls	r0, r6, #3
   b6aea:	f7fd fe05 	bl	b46f8 <malloc>
            if (!d) {
   b6aee:	4604      	mov	r4, r0
   b6af0:	b158      	cbz	r0, b6b0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6af2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6af6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6afa:	f7ff ffc7 	bl	b6a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6afe:	6828      	ldr	r0, [r5, #0]
   b6b00:	f7fd fe02 	bl	b4708 <free>
        data_ = d;
   b6b04:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6b06:	60ae      	str	r6, [r5, #8]
        return true;
   b6b08:	2001      	movs	r0, #1
    }
   b6b0a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6b0c:	2400      	movs	r4, #0
   b6b0e:	e7f6      	b.n	b6afe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6b10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b6b14:	2300      	movs	r3, #0
   b6b16:	e9c0 3300 	strd	r3, r3, [r0]
   b6b1a:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6b1c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6b1e:	6849      	ldr	r1, [r1, #4]
   b6b20:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6b22:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6b24:	dd13      	ble.n	b6b4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b6b26:	f7ff ffdb 	bl	b6ae0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6b2a:	b180      	cbz	r0, b6b4e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6b2c:	e9d5 6300 	ldrd	r6, r3, [r5]
   b6b30:	6827      	ldr	r7, [r4, #0]
   b6b32:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b6b36:	45b0      	cmp	r8, r6
   b6b38:	d007      	beq.n	b6b4a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b6b3a:	b11f      	cbz	r7, b6b44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b6b3c:	4631      	mov	r1, r6
   b6b3e:	4638      	mov	r0, r7
   b6b40:	f7fe ff8b 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b6b44:	3608      	adds	r6, #8
   b6b46:	3708      	adds	r7, #8
   b6b48:	e7f5      	b.n	b6b36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b6b4a:	686b      	ldr	r3, [r5, #4]
   b6b4c:	6063      	str	r3, [r4, #4]
}
   b6b4e:	4620      	mov	r0, r4
   b6b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6b54 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b6b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b56:	460d      	mov	r5, r1
   b6b58:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6b5a:	a801      	add	r0, sp, #4
   b6b5c:	f7fe fa8c 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b6b60:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b6b62:	4620      	mov	r0, r4
   b6b64:	3118      	adds	r1, #24
   b6b66:	f7ff ffd3 	bl	b6b10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b6b6a:	a801      	add	r0, sp, #4
   b6b6c:	f7fe fa92 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6b70:	4620      	mov	r0, r4
   b6b72:	b003      	add	sp, #12
   b6b74:	bd30      	pop	{r4, r5, pc}

000b6b76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b78:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6b7a:	6845      	ldr	r5, [r0, #4]
   b6b7c:	4668      	mov	r0, sp
   b6b7e:	f7fe ff6c 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6b82:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6b86:	4299      	cmp	r1, r3
   b6b88:	da10      	bge.n	b6bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6b8a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6b8c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6b8e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6b96:	4629      	mov	r1, r5
   b6b98:	f105 0008 	add.w	r0, r5, #8
   b6b9c:	f7ff ff76 	bl	b6a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6ba0:	b98d      	cbnz	r5, b6bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6ba2:	6863      	ldr	r3, [r4, #4]
   b6ba4:	3301      	adds	r3, #1
   b6ba6:	6063      	str	r3, [r4, #4]
    return true;
   b6ba8:	2601      	movs	r6, #1
   b6baa:	e006      	b.n	b6bba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6bac:	3101      	adds	r1, #1
   b6bae:	4620      	mov	r0, r4
   b6bb0:	f7ff ff96 	bl	b6ae0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6bb4:	4606      	mov	r6, r0
   b6bb6:	2800      	cmp	r0, #0
   b6bb8:	d1e7      	bne.n	b6b8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6bba:	a801      	add	r0, sp, #4
   b6bbc:	f7fd febc 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6bc0:	4630      	mov	r0, r6
   b6bc2:	b002      	add	sp, #8
   b6bc4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6bc6:	4669      	mov	r1, sp
   b6bc8:	4628      	mov	r0, r5
   b6bca:	f7fe ff46 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6bce:	e7e8      	b.n	b6ba2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6bd0 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b6bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bd2:	b085      	sub	sp, #20
   b6bd4:	4605      	mov	r5, r0
    WiringBleLock lk;
   b6bd6:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b6bd8:	460c      	mov	r4, r1
   b6bda:	4617      	mov	r7, r2
    WiringBleLock lk;
   b6bdc:	f7fe fa4c 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b6be0:	2300      	movs	r3, #0
   b6be2:	e9c5 3300 	strd	r3, r3, [r5]
   b6be6:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b6be8:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b6bea:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b6bee:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b6bf2:	42b4      	cmp	r4, r6
   b6bf4:	d011      	beq.n	b6c1a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b6bf6:	6838      	ldr	r0, [r7, #0]
   b6bf8:	4621      	mov	r1, r4
   b6bfa:	f7fe fc67 	bl	b54cc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b6bfe:	b150      	cbz	r0, b6c16 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b6c00:	4621      	mov	r1, r4
   b6c02:	a802      	add	r0, sp, #8
   b6c04:	f7fe ff29 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6c08:	a902      	add	r1, sp, #8
   b6c0a:	4628      	mov	r0, r5
   b6c0c:	f7ff ffb3 	bl	b6b76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b6c10:	a803      	add	r0, sp, #12
   b6c12:	f7fd fe91 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b6c16:	3408      	adds	r4, #8
   b6c18:	e7eb      	b.n	b6bf2 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b6c1a:	a801      	add	r0, sp, #4
   b6c1c:	f7fe fa3a 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6c20:	4628      	mov	r0, r5
   b6c22:	b005      	add	sp, #20
   b6c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6c28 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b6c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b6c2c:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6c2e:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b6c30:	b091      	sub	sp, #68	; 0x44
   b6c32:	4606      	mov	r6, r0
   b6c34:	460f      	mov	r7, r1
   b6c36:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b6c38:	b933      	cbnz	r3, b6c48 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b6c3a:	e9c0 3300 	strd	r3, r3, [r0]
   b6c3e:	6083      	str	r3, [r0, #8]
}
   b6c40:	4630      	mov	r0, r6
   b6c42:	b011      	add	sp, #68	; 0x44
   b6c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b6c48:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b6c4a:	7e0d      	ldrb	r5, [r1, #24]
   b6c4c:	2d00      	cmp	r5, #0
   b6c4e:	d158      	bne.n	b6d02 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b6c50:	2320      	movs	r3, #32
   b6c52:	462a      	mov	r2, r5
   b6c54:	a803      	add	r0, sp, #12
   b6c56:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b6c5a:	f7fe fbaa 	bl	b53b2 <_ZNK8particle7BleUuid8toStringEb>
   b6c5e:	9b03      	ldr	r3, [sp, #12]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	4b2b      	ldr	r3, [pc, #172]	; (b6d10 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b6c64:	492b      	ldr	r1, [pc, #172]	; (b6d14 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b6c66:	9300      	str	r3, [sp, #0]
   b6c68:	aa08      	add	r2, sp, #32
   b6c6a:	462b      	mov	r3, r5
   b6c6c:	2001      	movs	r0, #1
   b6c6e:	f7fd fcaf 	bl	b45d0 <log_message>
   b6c72:	a803      	add	r0, sp, #12
   b6c74:	f000 fbfa 	bl	b746c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b6c78:	231c      	movs	r3, #28
   b6c7a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b6c7e:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b6c82:	8a9a      	ldrh	r2, [r3, #20]
   b6c84:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b6c88:	8adb      	ldrh	r3, [r3, #22]
   b6c8a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b6c8e:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b6c90:	4a21      	ldr	r2, [pc, #132]	; (b6d18 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b6c92:	8818      	ldrh	r0, [r3, #0]
   b6c94:	9500      	str	r5, [sp, #0]
   b6c96:	a908      	add	r1, sp, #32
   b6c98:	f7fd fc10 	bl	b44bc <hal_ble_gatt_client_discover_characteristics>
   b6c9c:	2800      	cmp	r0, #0
   b6c9e:	db30      	blt.n	b6d02 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b6ca0:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b6ca2:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b6ca6:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b6caa:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6cac:	f1a4 0308 	sub.w	r3, r4, #8
   b6cb0:	4599      	cmp	r9, r3
   b6cb2:	d022      	beq.n	b6cfa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b6cb4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6cb8:	89db      	ldrh	r3, [r3, #14]
   b6cba:	2b00      	cmp	r3, #0
   b6cbc:	d0f5      	beq.n	b6caa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b6cbe:	2210      	movs	r2, #16
   b6cc0:	2100      	movs	r1, #0
   b6cc2:	eb0d 0002 	add.w	r0, sp, r2
   b6cc6:	9503      	str	r5, [sp, #12]
   b6cc8:	f000 fe5e 	bl	b7988 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b6ccc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b6cd0:	89d9      	ldrh	r1, [r3, #14]
   b6cd2:	683b      	ldr	r3, [r7, #0]
   b6cd4:	aa03      	add	r2, sp, #12
   b6cd6:	8818      	ldrh	r0, [r3, #0]
   b6cd8:	9500      	str	r5, [sp, #0]
   b6cda:	2313      	movs	r3, #19
   b6cdc:	f7fd fc0c 	bl	b44f8 <hal_ble_gatt_client_read>
                if (len > 0) {
   b6ce0:	2800      	cmp	r0, #0
   b6ce2:	d0e2      	beq.n	b6caa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b6ce4:	ab10      	add	r3, sp, #64	; 0x40
   b6ce6:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b6ce8:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b6cea:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b6cee:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b6cf2:	303c      	adds	r0, #60	; 0x3c
   b6cf4:	f000 fc5b 	bl	b75ae <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b6cf8:	e7d7      	b.n	b6caa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b6cfa:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b6cfe:	2201      	movs	r2, #1
   b6d00:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b6d02:	4642      	mov	r2, r8
   b6d04:	4639      	mov	r1, r7
   b6d06:	4630      	mov	r0, r6
   b6d08:	f7ff ff62 	bl	b6bd0 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b6d0c:	e798      	b.n	b6c40 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b6d0e:	bf00      	nop
   b6d10:	000b7d89 	.word	0x000b7d89
   b6d14:	000b7c8b 	.word	0x000b7c8b
   b6d18:	000b6ec1 	.word	0x000b6ec1

000b6d1c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b6d1e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b6d20:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b6d22:	b085      	sub	sp, #20
   b6d24:	4606      	mov	r6, r0
   b6d26:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b6d28:	b92b      	cbnz	r3, b6d36 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b6d2a:	a801      	add	r0, sp, #4
   b6d2c:	f7ff fe0a 	bl	b6944 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b6d30:	a801      	add	r0, sp, #4
   b6d32:	f7fe febb 	bl	b5aac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b6d36:	682b      	ldr	r3, [r5, #0]
   b6d38:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b6d3c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b6d40:	42bc      	cmp	r4, r7
   b6d42:	d009      	beq.n	b6d58 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b6d44:	4622      	mov	r2, r4
   b6d46:	4629      	mov	r1, r5
   b6d48:	a801      	add	r0, sp, #4
   b6d4a:	f7ff ff6d 	bl	b6c28 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b6d4e:	a801      	add	r0, sp, #4
   b6d50:	f7fe febe 	bl	b5ad0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b6d54:	3408      	adds	r4, #8
   b6d56:	e7f3      	b.n	b6d40 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b6d58:	4630      	mov	r0, r6
   b6d5a:	4629      	mov	r1, r5
   b6d5c:	f7ff fefa 	bl	b6b54 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b6d60:	4630      	mov	r0, r6
   b6d62:	b005      	add	sp, #20
   b6d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b6d68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d6c:	4605      	mov	r5, r0
   b6d6e:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b6d70:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b6d72:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6d74:	460f      	mov	r7, r1
    return address_;
   b6d76:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b6d78:	4698      	mov	r8, r3
    return address_;
   b6d7a:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b6d7c:	4b41      	ldr	r3, [pc, #260]	; (b6e84 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b6d7e:	9304      	str	r3, [sp, #16]
    return address_;
   b6d80:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b6d82:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b6d84:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b6d88:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b6d8c:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b6d90:	f7fe fd4e 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6d94:	4b3c      	ldr	r3, [pc, #240]	; (b6e88 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b6d96:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6d98:	f7fe fd4a 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6d9c:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b6d9e:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b6da0:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b6da2:	464a      	mov	r2, r9
   b6da4:	a804      	add	r0, sp, #16
   b6da6:	f7fd fbb1 	bl	b450c <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b6daa:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b6dac:	4604      	mov	r4, r0
   b6dae:	b138      	cbz	r0, b6dc0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b6db0:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6db6:	801a      	strh	r2, [r3, #0]
}
   b6db8:	4620      	mov	r0, r4
   b6dba:	b013      	add	sp, #76	; 0x4c
   b6dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WiringBleLock lk;
   b6dc0:	a803      	add	r0, sp, #12
   b6dc2:	f7fe f959 	bl	b5078 <_ZN8particle3ble13WiringBleLockC1Ev>
        bind(addr);
   b6dc6:	4639      	mov	r1, r7
   b6dc8:	4628      	mov	r0, r5
   b6dca:	f7fe fcb5 	bl	b5738 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6dce:	f7fe fd2f 	bl	b5830 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b6dd2:	6807      	ldr	r7, [r0, #0]
   b6dd4:	4629      	mov	r1, r5
   b6dd6:	3718      	adds	r7, #24
   b6dd8:	4630      	mov	r0, r6
   b6dda:	f7fe fe56 	bl	b5a8a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b6dde:	4631      	mov	r1, r6
   b6de0:	4638      	mov	r0, r7
   b6de2:	f7ff f986 	bl	b60f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6de6:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b6de8:	a80b      	add	r0, sp, #44	; 0x2c
   b6dea:	f7fd fda5 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6dee:	f04f 0920 	mov.w	r9, #32
   b6df2:	bb1f      	cbnz	r7, b6e3c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b6df4:	4632      	mov	r2, r6
   b6df6:	4b25      	ldr	r3, [pc, #148]	; (b6e8c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b6df8:	4e25      	ldr	r6, [pc, #148]	; (b6e90 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b6dfa:	4926      	ldr	r1, [pc, #152]	; (b6e94 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6dfc:	9300      	str	r3, [sp, #0]
   b6dfe:	2032      	movs	r0, #50	; 0x32
   b6e00:	4623      	mov	r3, r4
   b6e02:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6e06:	f7fd fbe3 	bl	b45d0 <log_message>
   b6e0a:	6830      	ldr	r0, [r6, #0]
   b6e0c:	f7fd fb16 	bl	b443c <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6e10:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b6e12:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6e16:	4621      	mov	r1, r4
   b6e18:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6e1a:	4c1f      	ldr	r4, [pc, #124]	; (b6e98 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b6e1c:	f7fd fb30 	bl	b4480 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b6e20:	6830      	ldr	r0, [r6, #0]
   b6e22:	f7fd fb03 	bl	b442c <os_mutex_recursive_lock>
        locked_ = true;
   b6e26:	2301      	movs	r3, #1
   b6e28:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b6e2c:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6e32:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b6e34:	a803      	add	r0, sp, #12
   b6e36:	f7fe f92d 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
   b6e3a:	e7bd      	b.n	b6db8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b6e3c:	a803      	add	r0, sp, #12
   b6e3e:	f7fe f929 	bl	b5094 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b6e42:	4b16      	ldr	r3, [pc, #88]	; (b6e9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b6e44:	9300      	str	r3, [sp, #0]
   b6e46:	4913      	ldr	r1, [pc, #76]	; (b6e94 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b6e48:	4623      	mov	r3, r4
   b6e4a:	4632      	mov	r2, r6
   b6e4c:	2001      	movs	r0, #1
   b6e4e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b6e52:	f7fd fbbd 	bl	b45d0 <log_message>
    if (automatic) {
   b6e56:	f1b8 0f00 	cmp.w	r8, #0
   b6e5a:	d0ad      	beq.n	b6db8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6e5c:	4629      	mov	r1, r5
   b6e5e:	4630      	mov	r0, r6
   b6e60:	f7ff ff5c 	bl	b6d1c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b6e64:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b6e68:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b6e6c:	42bd      	cmp	r5, r7
   b6e6e:	d005      	beq.n	b6e7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b6e70:	4628      	mov	r0, r5
   b6e72:	2101      	movs	r1, #1
   b6e74:	f7fe fbd6 	bl	b5624 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b6e78:	3508      	adds	r5, #8
   b6e7a:	e7f7      	b.n	b6e6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b6e7c:	4630      	mov	r0, r6
   b6e7e:	f7fe fe27 	bl	b5ad0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6e82:	e799      	b.n	b6db8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b6e84:	00180003 	.word	0x00180003
   b6e88:	000b61a9 	.word	0x000b61a9
   b6e8c:	000b7dbb 	.word	0x000b7dbb
   b6e90:	2003e720 	.word	0x2003e720
   b6e94:	000b7c8b 	.word	0x000b7c8b
   b6e98:	fffffefc 	.word	0xfffffefc
   b6e9c:	000b7dd7 	.word	0x000b7dd7

000b6ea0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b6ea0:	b513      	push	{r0, r1, r4, lr}
   b6ea2:	4604      	mov	r4, r0
   b6ea4:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b6ea8:	f7fe fc12 	bl	b56d0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b6eac:	9b00      	ldr	r3, [sp, #0]
   b6eae:	9901      	ldr	r1, [sp, #4]
   b6eb0:	2200      	movs	r2, #0
   b6eb2:	4620      	mov	r0, r4
   b6eb4:	f7ff ff58 	bl	b6d68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b6eb8:	4620      	mov	r0, r4
   b6eba:	b002      	add	sp, #8
   b6ebc:	bd10      	pop	{r4, pc}
	...

000b6ec0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b6ec4:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6ec6:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b6ec8:	2600      	movs	r6, #0
   b6eca:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b6ece:	4b66      	ldr	r3, [pc, #408]	; (b7068 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b6ed0:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b6ed2:	4605      	mov	r5, r0
   b6ed4:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b6ed6:	4633      	mov	r3, r6
   b6ed8:	4964      	ldr	r1, [pc, #400]	; (b706c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b6eda:	f8df 9194 	ldr.w	r9, [pc, #404]	; b7070 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b6ede:	f8df 818c 	ldr.w	r8, [pc, #396]	; b706c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b6ee2:	f8df a190 	ldr.w	sl, [pc, #400]	; b7074 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b6ee6:	aa0c      	add	r2, sp, #48	; 0x30
   b6ee8:	2001      	movs	r0, #1
   b6eea:	f7fd fb71 	bl	b45d0 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b6eee:	682b      	ldr	r3, [r5, #0]
   b6ef0:	42b3      	cmp	r3, r6
   b6ef2:	f240 80b5 	bls.w	b7060 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b6ef6:	a803      	add	r0, sp, #12
   b6ef8:	f7fe fb0e 	bl	b5518 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b6efc:	a805      	add	r0, sp, #20
   b6efe:	f7fe fbcb 	bl	b5698 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b6f02:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6f06:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b6f08:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b6f0a:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b6f0e:	445b      	add	r3, fp
        this->size = halHandles.size;
   b6f10:	8bd9      	ldrh	r1, [r3, #30]
   b6f12:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b6f14:	8c19      	ldrh	r1, [r3, #32]
   b6f16:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b6f18:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b6f1a:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b6f1c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b6f1e:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b6f20:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b6f22:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b6f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b6f26:	8253      	strh	r3, [r2, #18]
   b6f28:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b6f2c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b6f30:	429a      	cmp	r2, r3
   b6f32:	d07d      	beq.n	b7030 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b6f34:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b6f36:	8ac4      	ldrh	r4, [r0, #22]
   b6f38:	428c      	cmp	r4, r1
   b6f3a:	d377      	bcc.n	b702c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b6f3c:	8a84      	ldrh	r4, [r0, #20]
   b6f3e:	428c      	cmp	r4, r1
   b6f40:	d874      	bhi.n	b702c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6f42:	6859      	ldr	r1, [r3, #4]
   b6f44:	9005      	str	r0, [sp, #20]
   b6f46:	a806      	add	r0, sp, #24
   b6f48:	f7fe f870 	bl	b502c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b6f4c:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b6f50:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b6f54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6f58:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b6f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f5e:	f8dc 3000 	ldr.w	r3, [ip]
   b6f62:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b6f64:	892b      	ldrh	r3, [r5, #8]
   b6f66:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b6f6a:	686b      	ldr	r3, [r5, #4]
   b6f6c:	9c03      	ldr	r4, [sp, #12]
   b6f6e:	445b      	add	r3, fp
   b6f70:	7e5b      	ldrb	r3, [r3, #25]
   b6f72:	f013 0f02 	tst.w	r3, #2
   b6f76:	d16e      	bne.n	b7056 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b6f78:	686b      	ldr	r3, [r5, #4]
   b6f7a:	445b      	add	r3, fp
   b6f7c:	7e5b      	ldrb	r3, [r3, #25]
   b6f7e:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b6f80:	bf42      	ittt	mi
   b6f82:	7923      	ldrbmi	r3, [r4, #4]
   b6f84:	f043 0304 	orrmi.w	r3, r3, #4
   b6f88:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b6f8a:	686b      	ldr	r3, [r5, #4]
   b6f8c:	445b      	add	r3, fp
   b6f8e:	7e5b      	ldrb	r3, [r3, #25]
   b6f90:	0719      	lsls	r1, r3, #28
   b6f92:	bf42      	ittt	mi
   b6f94:	7923      	ldrbmi	r3, [r4, #4]
   b6f96:	f043 0308 	orrmi.w	r3, r3, #8
   b6f9a:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b6f9c:	686b      	ldr	r3, [r5, #4]
   b6f9e:	445b      	add	r3, fp
   b6fa0:	7e5b      	ldrb	r3, [r3, #25]
   b6fa2:	06da      	lsls	r2, r3, #27
   b6fa4:	bf42      	ittt	mi
   b6fa6:	7923      	ldrbmi	r3, [r4, #4]
   b6fa8:	f043 0310 	orrmi.w	r3, r3, #16
   b6fac:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b6fae:	686b      	ldr	r3, [r5, #4]
   b6fb0:	445b      	add	r3, fp
   b6fb2:	aa07      	add	r2, sp, #28
   b6fb4:	7e5b      	ldrb	r3, [r3, #25]
   b6fb6:	069b      	lsls	r3, r3, #26
   b6fb8:	bf42      	ittt	mi
   b6fba:	7923      	ldrbmi	r3, [r4, #4]
   b6fbc:	f043 0320 	orrmi.w	r3, r3, #32
   b6fc0:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b6fc2:	686b      	ldr	r3, [r5, #4]
   b6fc4:	449b      	add	fp, r3
   b6fc6:	f10b 0304 	add.w	r3, fp, #4
   b6fca:	4696      	mov	lr, r2
   b6fcc:	f10b 0b14 	add.w	fp, fp, #20
   b6fd0:	6818      	ldr	r0, [r3, #0]
   b6fd2:	6859      	ldr	r1, [r3, #4]
   b6fd4:	4694      	mov	ip, r2
   b6fd6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b6fda:	3308      	adds	r3, #8
   b6fdc:	455b      	cmp	r3, fp
   b6fde:	4662      	mov	r2, ip
   b6fe0:	d1f6      	bne.n	b6fd0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b6fe2:	6818      	ldr	r0, [r3, #0]
   b6fe4:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b6fe8:	4671      	mov	r1, lr
   b6fea:	a80c      	add	r0, sp, #48	; 0x30
   b6fec:	f7fe f89a 	bl	b5124 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b6ff0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b6ff4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6ff8:	3414      	adds	r4, #20
   b6ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ffc:	f8dc 3000 	ldr.w	r3, [ip]
   b7000:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b7002:	a903      	add	r1, sp, #12
   b7004:	a80c      	add	r0, sp, #48	; 0x30
   b7006:	f7fe fd28 	bl	b5a5a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b700a:	a90c      	add	r1, sp, #48	; 0x30
   b700c:	f107 0018 	add.w	r0, r7, #24
   b7010:	f7ff fdb1 	bl	b6b76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b7014:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7016:	a80d      	add	r0, sp, #52	; 0x34
   b7018:	f7fd fc8e 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b701c:	b99c      	cbnz	r4, b7046 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b701e:	2320      	movs	r3, #32
   b7020:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b7024:	f8cd a000 	str.w	sl, [sp]
   b7028:	4623      	mov	r3, r4
   b702a:	e007      	b.n	b703c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b702c:	3308      	adds	r3, #8
   b702e:	e77f      	b.n	b6f30 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b7030:	2420      	movs	r4, #32
   b7032:	2300      	movs	r3, #0
   b7034:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b7038:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b703c:	aa0c      	add	r2, sp, #48	; 0x30
   b703e:	4641      	mov	r1, r8
   b7040:	2032      	movs	r0, #50	; 0x32
   b7042:	f7fd fac5 	bl	b45d0 <log_message>
   b7046:	a806      	add	r0, sp, #24
   b7048:	f7fd fc76 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b704c:	a804      	add	r0, sp, #16
   b704e:	f7fd fc73 	bl	b4938 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b7052:	3601      	adds	r6, #1
   b7054:	e74b      	b.n	b6eee <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b7056:	7923      	ldrb	r3, [r4, #4]
   b7058:	f043 0302 	orr.w	r3, r3, #2
   b705c:	7123      	strb	r3, [r4, #4]
   b705e:	e78b      	b.n	b6f78 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b7060:	b015      	add	sp, #84	; 0x54
   b7062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7066:	bf00      	nop
   b7068:	000b7df4 	.word	0x000b7df4
   b706c:	000b7c8b 	.word	0x000b7c8b
   b7070:	000b7e0f 	.word	0x000b7e0f
   b7074:	000b7e3e 	.word	0x000b7e3e

000b7078 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7078:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b707c:	4604      	mov	r4, r0
   b707e:	460d      	mov	r5, r1
   b7080:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7082:	d914      	bls.n	b70ae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7084:	4290      	cmp	r0, r2
   b7086:	d213      	bcs.n	b70b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7088:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b708c:	1a75      	subs	r5, r6, r1
   b708e:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b7092:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7094:	42b7      	cmp	r7, r6
   b7096:	d018      	beq.n	b70ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7098:	b11c      	cbz	r4, b70a2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b709a:	4631      	mov	r1, r6
   b709c:	4620      	mov	r0, r4
   b709e:	f7fe ff10 	bl	b5ec2 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b70a2:	4630      	mov	r0, r6
   b70a4:	f7fe fc2e 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b70a8:	3e24      	subs	r6, #36	; 0x24
   b70aa:	3c24      	subs	r4, #36	; 0x24
   b70ac:	e7f2      	b.n	b7094 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b70ae:	d00c      	beq.n	b70ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b70b0:	42b5      	cmp	r5, r6
   b70b2:	d00a      	beq.n	b70ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b70b4:	b11c      	cbz	r4, b70be <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b70b6:	4629      	mov	r1, r5
   b70b8:	4620      	mov	r0, r4
   b70ba:	f7fe ff02 	bl	b5ec2 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b70be:	4628      	mov	r0, r5
   b70c0:	f7fe fc20 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b70c4:	3524      	adds	r5, #36	; 0x24
   b70c6:	3424      	adds	r4, #36	; 0x24
   b70c8:	e7f2      	b.n	b70b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b70ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b70cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b70cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b70ce:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b70d0:	4605      	mov	r5, r0
        if (n > 0) {
   b70d2:	dd13      	ble.n	b70fc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b70d4:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b70d6:	fb07 f006 	mul.w	r0, r7, r6
   b70da:	f7fd fb0d 	bl	b46f8 <malloc>
            if (!d) {
   b70de:	4604      	mov	r4, r0
   b70e0:	b158      	cbz	r0, b70fa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b70e2:	e9d5 1200 	ldrd	r1, r2, [r5]
   b70e6:	fb07 1202 	mla	r2, r7, r2, r1
   b70ea:	f7ff ffc5 	bl	b7078 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b70ee:	6828      	ldr	r0, [r5, #0]
   b70f0:	f7fd fb0a 	bl	b4708 <free>
        data_ = d;
   b70f4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b70f6:	60ae      	str	r6, [r5, #8]
        return true;
   b70f8:	2001      	movs	r0, #1
    }
   b70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b70fc:	2400      	movs	r4, #0
   b70fe:	e7f6      	b.n	b70ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b7100 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b7100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7104:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b7106:	ad01      	add	r5, sp, #4
   b7108:	4606      	mov	r6, r0
   b710a:	4628      	mov	r0, r5
   b710c:	460c      	mov	r4, r1
   b710e:	f7fd ffee 	bl	b50ee <_ZN8particle10BleAddressC1Ev>
   b7112:	a803      	add	r0, sp, #12
   b7114:	f7fe ffb0 	bl	b6078 <_ZN8particle18BleAdvertisingDataC1Ev>
   b7118:	a806      	add	r0, sp, #24
   b711a:	f7fe ffad 	bl	b6078 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b711e:	6930      	ldr	r0, [r6, #16]
   b7120:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b7122:	89f2      	ldrh	r2, [r6, #14]
   b7124:	ab13      	add	r3, sp, #76	; 0x4c
   b7126:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b7128:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b712c:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b712e:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b7130:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b7134:	a806      	add	r0, sp, #24
   b7136:	f7fe ff13 	bl	b5f60 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b713a:	89b2      	ldrh	r2, [r6, #12]
   b713c:	6871      	ldr	r1, [r6, #4]
   b713e:	a803      	add	r0, sp, #12
   b7140:	f7fe ff0e 	bl	b5f60 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b7144:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7148:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b714a:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b714c:	d003      	beq.n	b7156 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b714e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7152:	429a      	cmp	r2, r3
   b7154:	db5c      	blt.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b7156:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b715a:	2b7f      	cmp	r3, #127	; 0x7f
   b715c:	d003      	beq.n	b7166 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b715e:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7162:	429a      	cmp	r2, r3
   b7164:	dc54      	bgt.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b7166:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b716a:	4638      	mov	r0, r7
   b716c:	f7fe fd9e 	bl	b5cac <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b7170:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b7172:	2b00      	cmp	r3, #0
   b7174:	dd52      	ble.n	b721c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b7176:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b7178:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b717c:	45b1      	cmp	r9, r6
   b717e:	d050      	beq.n	b7222 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b7180:	4630      	mov	r0, r6
   b7182:	4629      	mov	r1, r5
   b7184:	f7fd ff9f 	bl	b50c6 <_ZNK8particle10BleAddresseqERKS0_>
   b7188:	3608      	adds	r6, #8
   b718a:	4680      	mov	r8, r0
   b718c:	2800      	cmp	r0, #0
   b718e:	d0f5      	beq.n	b717c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b7190:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7192:	f7fd fab9 	bl	b4708 <free>
        if (!delegator->filterByRssi(result) ||
   b7196:	f1b8 0f00 	cmp.w	r8, #0
   b719a:	d039      	beq.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b719c:	4629      	mov	r1, r5
   b719e:	4620      	mov	r0, r4
   b71a0:	f7fe fd47 	bl	b5c32 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b71a4:	b3a0      	cbz	r0, b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b71a6:	4629      	mov	r1, r5
   b71a8:	4620      	mov	r0, r4
   b71aa:	f7ff fa7a 	bl	b66a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b71ae:	4606      	mov	r6, r0
   b71b0:	b370      	cbz	r0, b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b71b2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b71b6:	4638      	mov	r0, r7
   b71b8:	f7fe fdc3 	bl	b5d42 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b71bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b71be:	2b00      	cmp	r3, #0
   b71c0:	dd12      	ble.n	b71e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b71c2:	a806      	add	r0, sp, #24
   b71c4:	f7fe f956 	bl	b5474 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b71c8:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b71ca:	a803      	add	r0, sp, #12
   b71cc:	f7fe f952 	bl	b5474 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b71d0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b71d4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b71d8:	429a      	cmp	r2, r3
   b71da:	d025      	beq.n	b7228 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b71dc:	f833 1b02 	ldrh.w	r1, [r3], #2
   b71e0:	4588      	cmp	r8, r1
   b71e2:	d001      	beq.n	b71e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b71e4:	4288      	cmp	r0, r1
   b71e6:	d1f7      	bne.n	b71d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b71e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b71ea:	f7fd fa8d 	bl	b4708 <free>
              !delegator->filterByServiceUUID(result) ||
   b71ee:	b17e      	cbz	r6, b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b71f0:	4629      	mov	r1, r5
   b71f2:	4620      	mov	r0, r4
   b71f4:	f7fe fdda 	bl	b5dac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b71f8:	b150      	cbz	r0, b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b71fa:	6a23      	ldr	r3, [r4, #32]
   b71fc:	b1b3      	cbz	r3, b722c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b71fe:	6963      	ldr	r3, [r4, #20]
   b7200:	9513      	str	r5, [sp, #76]	; 0x4c
   b7202:	3301      	adds	r3, #1
   b7204:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7206:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7208:	4639      	mov	r1, r7
   b720a:	f104 0018 	add.w	r0, r4, #24
   b720e:	4798      	blx	r3
            return;
   b7210:	4628      	mov	r0, r5
   b7212:	f7fe fb77 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
    }
   b7216:	b01d      	add	sp, #116	; 0x74
   b7218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b721c:	f04f 0801 	mov.w	r8, #1
   b7220:	e7b6      	b.n	b7190 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b7222:	f04f 0800 	mov.w	r8, #0
   b7226:	e7b3      	b.n	b7190 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b7228:	2600      	movs	r6, #0
   b722a:	e7dd      	b.n	b71e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b722c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b7230:	f1b8 0f00 	cmp.w	r8, #0
   b7234:	d007      	beq.n	b7246 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b7236:	6963      	ldr	r3, [r4, #20]
   b7238:	3301      	adds	r3, #1
   b723a:	6163      	str	r3, [r4, #20]
   b723c:	4629      	mov	r1, r5
   b723e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b7240:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7244:	e7e3      	b.n	b720e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b7246:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b724a:	f1bc 0f00 	cmp.w	ip, #0
   b724e:	d025      	beq.n	b729c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b7250:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7252:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b7254:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7256:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b7258:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b725a:	d8d9      	bhi.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b725c:	2224      	movs	r2, #36	; 0x24
   b725e:	4353      	muls	r3, r2
    address_ = addr.address_;
   b7260:	462a      	mov	r2, r5
   b7262:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b7264:	3b24      	subs	r3, #36	; 0x24
   b7266:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b726a:	f84c 0003 	str.w	r0, [ip, r3]
   b726e:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b7270:	f106 0008 	add.w	r0, r6, #8
   b7274:	a903      	add	r1, sp, #12
   b7276:	f7fe fe3b 	bl	b5ef0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b727a:	a906      	add	r1, sp, #24
   b727c:	f106 0014 	add.w	r0, r6, #20
   b7280:	f7fe fe36 	bl	b5ef0 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b7284:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b7288:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b728c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b7290:	429a      	cmp	r2, r3
   b7292:	d3bd      	bcc.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b7294:	4640      	mov	r0, r8
   b7296:	f7fd f8e9 	bl	b446c <hal_ble_gap_stop_scan>
   b729a:	e7b9      	b.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b729c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b72a0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b72a4:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b72a8:	a903      	add	r1, sp, #12
   b72aa:	a80c      	add	r0, sp, #48	; 0x30
   b72ac:	f7fd fb6a 	bl	b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b72b0:	a906      	add	r1, sp, #24
   b72b2:	a80f      	add	r0, sp, #60	; 0x3c
   b72b4:	f7fd fb66 	bl	b4984 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b72b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b72bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b72c0:	4641      	mov	r1, r8
   b72c2:	4638      	mov	r0, r7
   b72c4:	6866      	ldr	r6, [r4, #4]
   b72c6:	f7fe fdfc 	bl	b5ec2 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72ca:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b72ce:	4299      	cmp	r1, r3
   b72d0:	da10      	bge.n	b72f4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b72d2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b72d4:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b72d6:	2224      	movs	r2, #36	; 0x24
   b72d8:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b72dc:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b72e0:	fb02 3201 	mla	r2, r2, r1, r3
   b72e4:	4631      	mov	r1, r6
   b72e6:	f7ff fec7 	bl	b7078 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b72ea:	b986      	cbnz	r6, b730e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b72ec:	6863      	ldr	r3, [r4, #4]
   b72ee:	3301      	adds	r3, #1
   b72f0:	6063      	str	r3, [r4, #4]
    return true;
   b72f2:	e005      	b.n	b7300 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72f4:	3101      	adds	r1, #1
   b72f6:	4620      	mov	r0, r4
   b72f8:	f7ff fee8 	bl	b70cc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b72fc:	2800      	cmp	r0, #0
   b72fe:	d1e8      	bne.n	b72d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b7300:	4638      	mov	r0, r7
   b7302:	f7fe faff 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b7306:	4640      	mov	r0, r8
   b7308:	f7fe fafc 	bl	b5904 <_ZN8particle13BleScanResultD1Ev>
   b730c:	e780      	b.n	b7210 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b730e:	4639      	mov	r1, r7
   b7310:	4630      	mov	r0, r6
   b7312:	f7fe fdd6 	bl	b5ec2 <_ZN8particle13BleScanResultC1EOS0_>
   b7316:	e7e9      	b.n	b72ec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b7318 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7318:	4802      	ldr	r0, [pc, #8]	; (b7324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b731a:	2300      	movs	r3, #0
   b731c:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b731e:	f7fd b87d 	b.w	b441c <os_mutex_recursive_create>
   b7322:	bf00      	nop
   b7324:	2003e720 	.word	0x2003e720

000b7328 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7328:	4770      	bx	lr

000b732a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b732a:	7441      	strb	r1, [r0, #17]
}
   b732c:	4770      	bx	lr

000b732e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b732e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7330:	7c00      	ldrb	r0, [r0, #16]
   b7332:	f7fd f85b 	bl	b43ec <hal_usart_available_data_for_write>
}
   b7336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b733a:	bd08      	pop	{r3, pc}

000b733c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b733c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b733e:	7c00      	ldrb	r0, [r0, #16]
   b7340:	f7fd f834 	bl	b43ac <hal_usart_available>
}
   b7344:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7348:	bd08      	pop	{r3, pc}

000b734a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b734a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b734c:	7c00      	ldrb	r0, [r0, #16]
   b734e:	f7fd f83d 	bl	b43cc <hal_usart_peek>
}
   b7352:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7356:	bd08      	pop	{r3, pc}

000b7358 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7358:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b735a:	7c00      	ldrb	r0, [r0, #16]
   b735c:	f7fd f82e 	bl	b43bc <hal_usart_read>
}
   b7360:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7364:	bd08      	pop	{r3, pc}

000b7366 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7366:	7c00      	ldrb	r0, [r0, #16]
   b7368:	f7fd b838 	b.w	b43dc <hal_usart_flush>

000b736c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b736c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b736e:	7c45      	ldrb	r5, [r0, #17]
{
   b7370:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7372:	b12d      	cbz	r5, b7380 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7374:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7376:	b003      	add	sp, #12
   b7378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b737c:	f7fd b80e 	b.w	b439c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7380:	7c00      	ldrb	r0, [r0, #16]
   b7382:	9101      	str	r1, [sp, #4]
   b7384:	f7fd f832 	bl	b43ec <hal_usart_available_data_for_write>
   b7388:	2800      	cmp	r0, #0
   b738a:	9901      	ldr	r1, [sp, #4]
   b738c:	dcf2      	bgt.n	b7374 <_ZN11USARTSerial5writeEh+0x8>
}
   b738e:	4628      	mov	r0, r5
   b7390:	b003      	add	sp, #12
   b7392:	bd30      	pop	{r4, r5, pc}

000b7394 <_ZN11USARTSerialD0Ev>:
   b7394:	b510      	push	{r4, lr}
   b7396:	2114      	movs	r1, #20
   b7398:	4604      	mov	r4, r0
   b739a:	f7fc fe90 	bl	b40be <_ZdlPvj>
   b739e:	4620      	mov	r0, r4
   b73a0:	bd10      	pop	{r4, pc}
	...

000b73a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b73a4:	b510      	push	{r4, lr}
   b73a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73aa:	4604      	mov	r4, r0
   b73ac:	4608      	mov	r0, r1
   b73ae:	4611      	mov	r1, r2
   b73b0:	2200      	movs	r2, #0
   b73b2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b73b6:	4b04      	ldr	r3, [pc, #16]	; (b73c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b73b8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b73ba:	2301      	movs	r3, #1
  _serial = serial;
   b73bc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b73be:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b73c0:	f7fd f81c 	bl	b43fc <hal_usart_init_ex>
}
   b73c4:	4620      	mov	r0, r4
   b73c6:	bd10      	pop	{r4, pc}
   b73c8:	000b7ec8 	.word	0x000b7ec8

000b73cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b73cc:	4b05      	ldr	r3, [pc, #20]	; (b73e4 <_GLOBAL__sub_I_System+0x18>)
   b73ce:	2202      	movs	r2, #2
   b73d0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b73d2:	4b05      	ldr	r3, [pc, #20]	; (b73e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b73d4:	4a05      	ldr	r2, [pc, #20]	; (b73ec <_GLOBAL__sub_I_System+0x20>)
   b73d6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b73d8:	2000      	movs	r0, #0
   b73da:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b73de:	f7fd b96f 	b.w	b46c0 <set_system_mode>
   b73e2:	bf00      	nop
   b73e4:	2003e734 	.word	0x2003e734
   b73e8:	2003e728 	.word	0x2003e728
   b73ec:	ffff0000 	.word	0xffff0000

000b73f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b73f0:	2200      	movs	r2, #0
   b73f2:	6840      	ldr	r0, [r0, #4]
   b73f4:	4611      	mov	r1, r2
   b73f6:	f7fd b93b 	b.w	b4670 <network_listening>

000b73fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b73fa:	2200      	movs	r2, #0
   b73fc:	6840      	ldr	r0, [r0, #4]
   b73fe:	4611      	mov	r1, r2
   b7400:	f7fd b946 	b.w	b4690 <network_get_listen_timeout>

000b7404 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7404:	6840      	ldr	r0, [r0, #4]
   b7406:	2200      	movs	r2, #0
   b7408:	f7fd b93a 	b.w	b4680 <network_set_listen_timeout>

000b740c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b740c:	6840      	ldr	r0, [r0, #4]
   b740e:	2200      	movs	r2, #0
   b7410:	f081 0101 	eor.w	r1, r1, #1
   b7414:	f7fd b924 	b.w	b4660 <network_listen>

000b7418 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7418:	2300      	movs	r3, #0
   b741a:	6840      	ldr	r0, [r0, #4]
   b741c:	461a      	mov	r2, r3
   b741e:	4619      	mov	r1, r3
   b7420:	f7fd b916 	b.w	b4650 <network_off>

000b7424 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7424:	2300      	movs	r3, #0
   b7426:	6840      	ldr	r0, [r0, #4]
   b7428:	461a      	mov	r2, r3
   b742a:	4619      	mov	r1, r3
   b742c:	f7fd b908 	b.w	b4640 <network_on>

000b7430 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7430:	2200      	movs	r2, #0
   b7432:	6840      	ldr	r0, [r0, #4]
   b7434:	4611      	mov	r1, r2
   b7436:	f7fd b8fb 	b.w	b4630 <network_ready>

000b743a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b743a:	2200      	movs	r2, #0
   b743c:	6840      	ldr	r0, [r0, #4]
   b743e:	4611      	mov	r1, r2
   b7440:	f7fd b8e6 	b.w	b4610 <network_connecting>

000b7444 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7444:	6840      	ldr	r0, [r0, #4]
   b7446:	2200      	movs	r2, #0
   b7448:	2102      	movs	r1, #2
   b744a:	f7fd b8e9 	b.w	b4620 <network_disconnect>

000b744e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b744e:	2300      	movs	r3, #0
   b7450:	6840      	ldr	r0, [r0, #4]
   b7452:	461a      	mov	r2, r3
   b7454:	f7fd b8d4 	b.w	b4600 <network_connect>

000b7458 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7458:	4b02      	ldr	r3, [pc, #8]	; (b7464 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b745a:	2203      	movs	r2, #3
   b745c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b745e:	4a02      	ldr	r2, [pc, #8]	; (b7468 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7460:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7462:	4770      	bx	lr
   b7464:	2003e738 	.word	0x2003e738
   b7468:	000b7ef8 	.word	0x000b7ef8

000b746c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b746c:	b510      	push	{r4, lr}
   b746e:	4604      	mov	r4, r0
{
	free(buffer);
   b7470:	6800      	ldr	r0, [r0, #0]
   b7472:	f7fd f949 	bl	b4708 <free>
}
   b7476:	4620      	mov	r0, r4
   b7478:	bd10      	pop	{r4, pc}

000b747a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b747a:	b510      	push	{r4, lr}
   b747c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b747e:	6800      	ldr	r0, [r0, #0]
   b7480:	b108      	cbz	r0, b7486 <_ZN6String10invalidateEv+0xc>
   b7482:	f7fd f941 	bl	b4708 <free>
	buffer = NULL;
   b7486:	2300      	movs	r3, #0
	capacity = len = 0;
   b7488:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b748c:	6023      	str	r3, [r4, #0]
}
   b748e:	bd10      	pop	{r4, pc}

000b7490 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7490:	b538      	push	{r3, r4, r5, lr}
   b7492:	4604      	mov	r4, r0
   b7494:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7496:	6800      	ldr	r0, [r0, #0]
   b7498:	3101      	adds	r1, #1
   b749a:	f7fd f93d 	bl	b4718 <realloc>
	if (newbuffer) {
   b749e:	b110      	cbz	r0, b74a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b74a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b74a4:	2001      	movs	r0, #1
	}
	return 0;
}
   b74a6:	bd38      	pop	{r3, r4, r5, pc}

000b74a8 <_ZN6String7reserveEj>:
{
   b74a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b74aa:	6803      	ldr	r3, [r0, #0]
{
   b74ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b74ae:	b123      	cbz	r3, b74ba <_ZN6String7reserveEj+0x12>
   b74b0:	6843      	ldr	r3, [r0, #4]
   b74b2:	428b      	cmp	r3, r1
   b74b4:	d301      	bcc.n	b74ba <_ZN6String7reserveEj+0x12>
   b74b6:	2001      	movs	r0, #1
}
   b74b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b74ba:	4620      	mov	r0, r4
   b74bc:	f7ff ffe8 	bl	b7490 <_ZN6String12changeBufferEj>
   b74c0:	2800      	cmp	r0, #0
   b74c2:	d0f9      	beq.n	b74b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b74c4:	68a3      	ldr	r3, [r4, #8]
   b74c6:	2b00      	cmp	r3, #0
   b74c8:	d1f5      	bne.n	b74b6 <_ZN6String7reserveEj+0xe>
   b74ca:	6822      	ldr	r2, [r4, #0]
   b74cc:	7013      	strb	r3, [r2, #0]
   b74ce:	e7f2      	b.n	b74b6 <_ZN6String7reserveEj+0xe>

000b74d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b74d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b74d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b74d4:	4611      	mov	r1, r2
   b74d6:	9201      	str	r2, [sp, #4]
{
   b74d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b74da:	f7ff ffe5 	bl	b74a8 <_ZN6String7reserveEj>
   b74de:	9a01      	ldr	r2, [sp, #4]
   b74e0:	b928      	cbnz	r0, b74ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b74e2:	4620      	mov	r0, r4
   b74e4:	f7ff ffc9 	bl	b747a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b74e8:	4620      	mov	r0, r4
   b74ea:	b003      	add	sp, #12
   b74ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   b74ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b74f0:	4629      	mov	r1, r5
   b74f2:	6820      	ldr	r0, [r4, #0]
   b74f4:	f000 fa20 	bl	b7938 <memcpy>
	buffer[len] = 0;
   b74f8:	6822      	ldr	r2, [r4, #0]
   b74fa:	68a3      	ldr	r3, [r4, #8]
   b74fc:	2100      	movs	r1, #0
   b74fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7500:	e7f2      	b.n	b74e8 <_ZN6String4copyEPKcj+0x18>

000b7502 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7502:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7504:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7506:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b750a:	4604      	mov	r4, r0
	len = 0;
   b750c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b750e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7510:	b141      	cbz	r1, b7524 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7512:	4608      	mov	r0, r1
   b7514:	9101      	str	r1, [sp, #4]
   b7516:	f7fc fd8b 	bl	b4030 <strlen>
   b751a:	9901      	ldr	r1, [sp, #4]
   b751c:	4602      	mov	r2, r0
   b751e:	4620      	mov	r0, r4
   b7520:	f7ff ffd6 	bl	b74d0 <_ZN6String4copyEPKcj>
}
   b7524:	4620      	mov	r0, r4
   b7526:	b002      	add	sp, #8
   b7528:	bd10      	pop	{r4, pc}

000b752a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b752a:	b538      	push	{r3, r4, r5, lr}
   b752c:	4605      	mov	r5, r0
	if (buffer) {
   b752e:	6800      	ldr	r0, [r0, #0]
{
   b7530:	460c      	mov	r4, r1
	if (buffer) {
   b7532:	b168      	cbz	r0, b7550 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7534:	686a      	ldr	r2, [r5, #4]
   b7536:	688b      	ldr	r3, [r1, #8]
   b7538:	429a      	cmp	r2, r3
   b753a:	d307      	bcc.n	b754c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b753c:	6809      	ldr	r1, [r1, #0]
   b753e:	f000 fa59 	bl	b79f4 <strcpy>
			len = rhs.len;
   b7542:	68a3      	ldr	r3, [r4, #8]
   b7544:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7546:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7548:	60a3      	str	r3, [r4, #8]
}
   b754a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b754c:	f7fd f8dc 	bl	b4708 <free>
	buffer = rhs.buffer;
   b7550:	6823      	ldr	r3, [r4, #0]
   b7552:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7554:	6863      	ldr	r3, [r4, #4]
   b7556:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7558:	68a3      	ldr	r3, [r4, #8]
   b755a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b755c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b755e:	e9c4 3300 	strd	r3, r3, [r4]
   b7562:	e7f1      	b.n	b7548 <_ZN6String4moveERS_+0x1e>

000b7564 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7564:	b510      	push	{r4, lr}
	buffer = NULL;
   b7566:	2300      	movs	r3, #0
	capacity = 0;
   b7568:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b756c:	4604      	mov	r4, r0
	len = 0;
   b756e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7570:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7572:	f7ff ffda 	bl	b752a <_ZN6String4moveERS_>
}
   b7576:	4620      	mov	r0, r4
   b7578:	bd10      	pop	{r4, pc}

000b757a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b757a:	4288      	cmp	r0, r1
{
   b757c:	b510      	push	{r4, lr}
   b757e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7580:	d005      	beq.n	b758e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7582:	680b      	ldr	r3, [r1, #0]
   b7584:	b12b      	cbz	r3, b7592 <_ZN6StringaSERKS_+0x18>
   b7586:	688a      	ldr	r2, [r1, #8]
   b7588:	4619      	mov	r1, r3
   b758a:	f7ff ffa1 	bl	b74d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b758e:	4620      	mov	r0, r4
   b7590:	bd10      	pop	{r4, pc}
	else invalidate();
   b7592:	f7ff ff72 	bl	b747a <_ZN6String10invalidateEv>
   b7596:	e7fa      	b.n	b758e <_ZN6StringaSERKS_+0x14>

000b7598 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7598:	b510      	push	{r4, lr}
	buffer = NULL;
   b759a:	2300      	movs	r3, #0
String::String(const String &value)
   b759c:	4604      	mov	r4, r0
	capacity = 0;
   b759e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b75a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b75a4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b75a6:	f7ff ffe8 	bl	b757a <_ZN6StringaSERKS_>
}
   b75aa:	4620      	mov	r0, r4
   b75ac:	bd10      	pop	{r4, pc}

000b75ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b75ae:	b513      	push	{r0, r1, r4, lr}
   b75b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b75b2:	b159      	cbz	r1, b75cc <_ZN6StringaSEPKc+0x1e>
   b75b4:	4608      	mov	r0, r1
   b75b6:	9101      	str	r1, [sp, #4]
   b75b8:	f7fc fd3a 	bl	b4030 <strlen>
   b75bc:	9901      	ldr	r1, [sp, #4]
   b75be:	4602      	mov	r2, r0
   b75c0:	4620      	mov	r0, r4
   b75c2:	f7ff ff85 	bl	b74d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b75c6:	4620      	mov	r0, r4
   b75c8:	b002      	add	sp, #8
   b75ca:	bd10      	pop	{r4, pc}
	else invalidate();
   b75cc:	f7ff ff55 	bl	b747a <_ZN6String10invalidateEv>
   b75d0:	e7f9      	b.n	b75c6 <_ZN6StringaSEPKc+0x18>

000b75d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b75d2:	b570      	push	{r4, r5, r6, lr}
   b75d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b75d6:	460e      	mov	r6, r1
   b75d8:	b909      	cbnz	r1, b75de <_ZN6String6concatEPKcj+0xc>
   b75da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b75dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b75de:	b16a      	cbz	r2, b75fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b75e0:	6884      	ldr	r4, [r0, #8]
   b75e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b75e4:	4621      	mov	r1, r4
   b75e6:	f7ff ff5f 	bl	b74a8 <_ZN6String7reserveEj>
   b75ea:	2800      	cmp	r0, #0
   b75ec:	d0f5      	beq.n	b75da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b75ee:	6828      	ldr	r0, [r5, #0]
   b75f0:	68ab      	ldr	r3, [r5, #8]
   b75f2:	4631      	mov	r1, r6
   b75f4:	4418      	add	r0, r3
   b75f6:	f000 f9fd 	bl	b79f4 <strcpy>
	len = newlen;
   b75fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b75fc:	2001      	movs	r0, #1
   b75fe:	e7ed      	b.n	b75dc <_ZN6String6concatEPKcj+0xa>

000b7600 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b7600:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b7602:	2300      	movs	r3, #0
	buf[0] = c;
   b7604:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b7608:	2201      	movs	r2, #1
   b760a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b760c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b7610:	f7ff ffdf 	bl	b75d2 <_ZN6String6concatEPKcj>
}
   b7614:	b003      	add	sp, #12
   b7616:	f85d fb04 	ldr.w	pc, [sp], #4

000b761a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b761a:	6802      	ldr	r2, [r0, #0]
{
   b761c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b761e:	6809      	ldr	r1, [r1, #0]
   b7620:	b162      	cbz	r2, b763c <_ZNK6String9compareToERKS_+0x22>
   b7622:	b941      	cbnz	r1, b7636 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b7624:	6880      	ldr	r0, [r0, #8]
   b7626:	b160      	cbz	r0, b7642 <_ZNK6String9compareToERKS_+0x28>
   b7628:	7810      	ldrb	r0, [r2, #0]
   b762a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b762c:	6898      	ldr	r0, [r3, #8]
   b762e:	b140      	cbz	r0, b7642 <_ZNK6String9compareToERKS_+0x28>
   b7630:	7809      	ldrb	r1, [r1, #0]
   b7632:	4248      	negs	r0, r1
   b7634:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b7636:	4610      	mov	r0, r2
   b7638:	f7fc bcf0 	b.w	b401c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b763c:	2900      	cmp	r1, #0
   b763e:	d1f5      	bne.n	b762c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b7640:	4608      	mov	r0, r1
}
   b7642:	4770      	bx	lr

000b7644 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b7644:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b7646:	6882      	ldr	r2, [r0, #8]
   b7648:	688b      	ldr	r3, [r1, #8]
   b764a:	429a      	cmp	r2, r3
   b764c:	d105      	bne.n	b765a <_ZNK6String6equalsERKS_+0x16>
   b764e:	f7ff ffe4 	bl	b761a <_ZNK6String9compareToERKS_>
   b7652:	fab0 f080 	clz	r0, r0
   b7656:	0940      	lsrs	r0, r0, #5
}
   b7658:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b765a:	2000      	movs	r0, #0
   b765c:	e7fc      	b.n	b7658 <_ZNK6String6equalsERKS_+0x14>

000b765e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b765e:	4770      	bx	lr

000b7660 <_Z20acquireSerial1Bufferv>:
{
   b7660:	b538      	push	{r3, r4, r5, lr}
   b7662:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7664:	2514      	movs	r5, #20
   b7666:	462a      	mov	r2, r5
   b7668:	2100      	movs	r1, #0
   b766a:	f000 f98d 	bl	b7988 <memset>
   b766e:	8025      	strh	r5, [r4, #0]
   b7670:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7672:	4907      	ldr	r1, [pc, #28]	; (b7690 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7674:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7676:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7678:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b767a:	f000 f82f 	bl	b76dc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b767e:	4904      	ldr	r1, [pc, #16]	; (b7690 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7680:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7682:	4628      	mov	r0, r5
   b7684:	f000 f82a 	bl	b76dc <_ZnajRKSt9nothrow_t>
    };
   b7688:	60e0      	str	r0, [r4, #12]
}
   b768a:	4620      	mov	r0, r4
   b768c:	bd38      	pop	{r3, r4, r5, pc}
   b768e:	bf00      	nop
   b7690:	000b7f2c 	.word	0x000b7f2c

000b7694 <_Z22__fetch_global_Serial1v>:
{
   b7694:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7696:	4d0e      	ldr	r5, [pc, #56]	; (b76d0 <_Z22__fetch_global_Serial1v+0x3c>)
   b7698:	7829      	ldrb	r1, [r5, #0]
   b769a:	f3bf 8f5b 	dmb	ish
   b769e:	f011 0401 	ands.w	r4, r1, #1
{
   b76a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b76a4:	d111      	bne.n	b76ca <_Z22__fetch_global_Serial1v+0x36>
   b76a6:	4628      	mov	r0, r5
   b76a8:	f7fc fd0b 	bl	b40c2 <__cxa_guard_acquire>
   b76ac:	b168      	cbz	r0, b76ca <_Z22__fetch_global_Serial1v+0x36>
   b76ae:	a801      	add	r0, sp, #4
   b76b0:	f7ff ffd6 	bl	b7660 <_Z20acquireSerial1Bufferv>
   b76b4:	aa01      	add	r2, sp, #4
   b76b6:	4621      	mov	r1, r4
   b76b8:	4806      	ldr	r0, [pc, #24]	; (b76d4 <_Z22__fetch_global_Serial1v+0x40>)
   b76ba:	f7ff fe73 	bl	b73a4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b76be:	4628      	mov	r0, r5
   b76c0:	f7fc fd04 	bl	b40cc <__cxa_guard_release>
   b76c4:	4804      	ldr	r0, [pc, #16]	; (b76d8 <_Z22__fetch_global_Serial1v+0x44>)
   b76c6:	f000 f921 	bl	b790c <atexit>
    return serial1;
}
   b76ca:	4802      	ldr	r0, [pc, #8]	; (b76d4 <_Z22__fetch_global_Serial1v+0x40>)
   b76cc:	b007      	add	sp, #28
   b76ce:	bd30      	pop	{r4, r5, pc}
   b76d0:	2003e744 	.word	0x2003e744
   b76d4:	2003e748 	.word	0x2003e748
   b76d8:	000b765f 	.word	0x000b765f

000b76dc <_ZnajRKSt9nothrow_t>:
   b76dc:	f7fc bced 	b.w	b40ba <_Znaj>

000b76e0 <_ZSt25__throw_bad_function_callv>:
   b76e0:	b508      	push	{r3, lr}
   b76e2:	f7fd f821 	bl	b4728 <abort>
	...

000b76e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b76e8:	4901      	ldr	r1, [pc, #4]	; (b76f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b76ea:	f000 b8f9 	b.w	b78e0 <_ZNKSt9type_infoeqERKS_>
   b76ee:	bf00      	nop
   b76f0:	000b7f48 	.word	0x000b7f48

000b76f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b76f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b76f6:	2400      	movs	r4, #0
   b76f8:	2310      	movs	r3, #16
   b76fa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b76fe:	6803      	ldr	r3, [r0, #0]
   b7700:	4615      	mov	r5, r2
   b7702:	699e      	ldr	r6, [r3, #24]
   b7704:	6812      	ldr	r2, [r2, #0]
   b7706:	466b      	mov	r3, sp
   b7708:	e9cd 4400 	strd	r4, r4, [sp]
   b770c:	47b0      	blx	r6
   b770e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7712:	f003 0306 	and.w	r3, r3, #6
   b7716:	2b06      	cmp	r3, #6
   b7718:	bf03      	ittte	eq
   b771a:	9b00      	ldreq	r3, [sp, #0]
   b771c:	602b      	streq	r3, [r5, #0]
   b771e:	2001      	moveq	r0, #1
   b7720:	4620      	movne	r0, r4
   b7722:	b004      	add	sp, #16
   b7724:	bd70      	pop	{r4, r5, r6, pc}

000b7726 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7726:	9800      	ldr	r0, [sp, #0]
   b7728:	4290      	cmp	r0, r2
   b772a:	bf14      	ite	ne
   b772c:	2001      	movne	r0, #1
   b772e:	2006      	moveq	r0, #6
   b7730:	4770      	bx	lr
	...

000b7734 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7734:	b510      	push	{r4, lr}
   b7736:	4b03      	ldr	r3, [pc, #12]	; (b7744 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7738:	6003      	str	r3, [r0, #0]
   b773a:	4604      	mov	r4, r0
   b773c:	f000 f8cd 	bl	b78da <_ZNSt9type_infoD1Ev>
   b7740:	4620      	mov	r0, r4
   b7742:	bd10      	pop	{r4, pc}
   b7744:	000b7f88 	.word	0x000b7f88

000b7748 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7748:	b510      	push	{r4, lr}
   b774a:	4604      	mov	r4, r0
   b774c:	f7ff fff2 	bl	b7734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7750:	4620      	mov	r0, r4
   b7752:	2108      	movs	r1, #8
   b7754:	f7fc fcb3 	bl	b40be <_ZdlPvj>
   b7758:	4620      	mov	r0, r4
   b775a:	bd10      	pop	{r4, pc}

000b775c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7760:	461f      	mov	r7, r3
   b7762:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7766:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b776a:	4598      	cmp	r8, r3
   b776c:	4606      	mov	r6, r0
   b776e:	4615      	mov	r5, r2
   b7770:	d107      	bne.n	b7782 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7772:	9907      	ldr	r1, [sp, #28]
   b7774:	f000 f8b4 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b7778:	b118      	cbz	r0, b7782 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b777a:	7165      	strb	r5, [r4, #5]
   b777c:	2000      	movs	r0, #0
   b777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7782:	4639      	mov	r1, r7
   b7784:	4630      	mov	r0, r6
   b7786:	f000 f8ab 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b778a:	2800      	cmp	r0, #0
   b778c:	d0f6      	beq.n	b777c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b778e:	2301      	movs	r3, #1
   b7790:	f8c4 8000 	str.w	r8, [r4]
   b7794:	7125      	strb	r5, [r4, #4]
   b7796:	71a3      	strb	r3, [r4, #6]
   b7798:	e7f0      	b.n	b777c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b779a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b779a:	b538      	push	{r3, r4, r5, lr}
   b779c:	4615      	mov	r5, r2
   b779e:	461c      	mov	r4, r3
   b77a0:	f000 f89e 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b77a4:	b120      	cbz	r0, b77b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b77a6:	2308      	movs	r3, #8
   b77a8:	60e3      	str	r3, [r4, #12]
   b77aa:	2306      	movs	r3, #6
   b77ac:	6025      	str	r5, [r4, #0]
   b77ae:	7123      	strb	r3, [r4, #4]
   b77b0:	bd38      	pop	{r3, r4, r5, pc}

000b77b2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b77b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77b4:	4605      	mov	r5, r0
   b77b6:	460c      	mov	r4, r1
   b77b8:	9201      	str	r2, [sp, #4]
   b77ba:	461e      	mov	r6, r3
   b77bc:	f000 f890 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b77c0:	b950      	cbnz	r0, b77d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b77c2:	2e03      	cmp	r6, #3
   b77c4:	d808      	bhi.n	b77d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b77c6:	6823      	ldr	r3, [r4, #0]
   b77c8:	9a01      	ldr	r2, [sp, #4]
   b77ca:	695b      	ldr	r3, [r3, #20]
   b77cc:	4629      	mov	r1, r5
   b77ce:	4620      	mov	r0, r4
   b77d0:	b002      	add	sp, #8
   b77d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b77d6:	4718      	bx	r3
   b77d8:	b002      	add	sp, #8
   b77da:	bd70      	pop	{r4, r5, r6, pc}

000b77dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b77dc:	b510      	push	{r4, lr}
   b77de:	4b03      	ldr	r3, [pc, #12]	; (b77ec <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b77e0:	6003      	str	r3, [r0, #0]
   b77e2:	4604      	mov	r4, r0
   b77e4:	f7ff ffa6 	bl	b7734 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b77e8:	4620      	mov	r0, r4
   b77ea:	bd10      	pop	{r4, pc}
   b77ec:	000b7fe8 	.word	0x000b7fe8

000b77f0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b77f0:	b510      	push	{r4, lr}
   b77f2:	4604      	mov	r4, r0
   b77f4:	f7ff fff2 	bl	b77dc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b77f8:	4620      	mov	r0, r4
   b77fa:	210c      	movs	r1, #12
   b77fc:	f7fc fc5f 	bl	b40be <_ZdlPvj>
   b7800:	4620      	mov	r0, r4
   b7802:	bd10      	pop	{r4, pc}

000b7804 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7806:	9f08      	ldr	r7, [sp, #32]
   b7808:	4297      	cmp	r7, r2
   b780a:	4605      	mov	r5, r0
   b780c:	460e      	mov	r6, r1
   b780e:	4614      	mov	r4, r2
   b7810:	d00a      	beq.n	b7828 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7812:	68a8      	ldr	r0, [r5, #8]
   b7814:	6802      	ldr	r2, [r0, #0]
   b7816:	9708      	str	r7, [sp, #32]
   b7818:	6a15      	ldr	r5, [r2, #32]
   b781a:	4631      	mov	r1, r6
   b781c:	4622      	mov	r2, r4
   b781e:	46ac      	mov	ip, r5
   b7820:	b003      	add	sp, #12
   b7822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7826:	4760      	bx	ip
   b7828:	4619      	mov	r1, r3
   b782a:	9301      	str	r3, [sp, #4]
   b782c:	f000 f858 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b7830:	9b01      	ldr	r3, [sp, #4]
   b7832:	2800      	cmp	r0, #0
   b7834:	d0ed      	beq.n	b7812 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7836:	2006      	movs	r0, #6
   b7838:	b003      	add	sp, #12
   b783a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b783c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b783c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7840:	460d      	mov	r5, r1
   b7842:	4619      	mov	r1, r3
   b7844:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7848:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b784c:	4681      	mov	r9, r0
   b784e:	4617      	mov	r7, r2
   b7850:	4698      	mov	r8, r3
   b7852:	f000 f845 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b7856:	b190      	cbz	r0, b787e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7858:	2d00      	cmp	r5, #0
   b785a:	6034      	str	r4, [r6, #0]
   b785c:	7137      	strb	r7, [r6, #4]
   b785e:	db09      	blt.n	b7874 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7860:	1961      	adds	r1, r4, r5
   b7862:	458a      	cmp	sl, r1
   b7864:	bf0c      	ite	eq
   b7866:	2106      	moveq	r1, #6
   b7868:	2101      	movne	r1, #1
   b786a:	71b1      	strb	r1, [r6, #6]
   b786c:	2000      	movs	r0, #0
   b786e:	b001      	add	sp, #4
   b7870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7874:	3502      	adds	r5, #2
   b7876:	d1f9      	bne.n	b786c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7878:	2301      	movs	r3, #1
   b787a:	71b3      	strb	r3, [r6, #6]
   b787c:	e7f6      	b.n	b786c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b787e:	4554      	cmp	r4, sl
   b7880:	d106      	bne.n	b7890 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7882:	4659      	mov	r1, fp
   b7884:	4648      	mov	r0, r9
   b7886:	f000 f82b 	bl	b78e0 <_ZNKSt9type_infoeqERKS_>
   b788a:	b108      	cbz	r0, b7890 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b788c:	7177      	strb	r7, [r6, #5]
   b788e:	e7ed      	b.n	b786c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7890:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7894:	6803      	ldr	r3, [r0, #0]
   b7896:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b789a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b789e:	69dc      	ldr	r4, [r3, #28]
   b78a0:	463a      	mov	r2, r7
   b78a2:	4643      	mov	r3, r8
   b78a4:	4629      	mov	r1, r5
   b78a6:	46a4      	mov	ip, r4
   b78a8:	b001      	add	sp, #4
   b78aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78ae:	4760      	bx	ip

000b78b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b78b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78b4:	4607      	mov	r7, r0
   b78b6:	460c      	mov	r4, r1
   b78b8:	4615      	mov	r5, r2
   b78ba:	461e      	mov	r6, r3
   b78bc:	f7ff ff6d 	bl	b779a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b78c0:	b948      	cbnz	r0, b78d6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b78c2:	68b8      	ldr	r0, [r7, #8]
   b78c4:	6803      	ldr	r3, [r0, #0]
   b78c6:	699f      	ldr	r7, [r3, #24]
   b78c8:	462a      	mov	r2, r5
   b78ca:	4633      	mov	r3, r6
   b78cc:	4621      	mov	r1, r4
   b78ce:	46bc      	mov	ip, r7
   b78d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b78d4:	4760      	bx	ip
   b78d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b78da <_ZNSt9type_infoD1Ev>:
   b78da:	4770      	bx	lr

000b78dc <_ZNKSt9type_info14__is_pointer_pEv>:
   b78dc:	2000      	movs	r0, #0
   b78de:	4770      	bx	lr

000b78e0 <_ZNKSt9type_infoeqERKS_>:
   b78e0:	4281      	cmp	r1, r0
   b78e2:	b508      	push	{r3, lr}
   b78e4:	d00e      	beq.n	b7904 <_ZNKSt9type_infoeqERKS_+0x24>
   b78e6:	6840      	ldr	r0, [r0, #4]
   b78e8:	7803      	ldrb	r3, [r0, #0]
   b78ea:	2b2a      	cmp	r3, #42	; 0x2a
   b78ec:	d00c      	beq.n	b7908 <_ZNKSt9type_infoeqERKS_+0x28>
   b78ee:	6849      	ldr	r1, [r1, #4]
   b78f0:	780b      	ldrb	r3, [r1, #0]
   b78f2:	2b2a      	cmp	r3, #42	; 0x2a
   b78f4:	bf08      	it	eq
   b78f6:	3101      	addeq	r1, #1
   b78f8:	f7fc fb90 	bl	b401c <strcmp>
   b78fc:	fab0 f080 	clz	r0, r0
   b7900:	0940      	lsrs	r0, r0, #5
   b7902:	bd08      	pop	{r3, pc}
   b7904:	2001      	movs	r0, #1
   b7906:	e7fc      	b.n	b7902 <_ZNKSt9type_infoeqERKS_+0x22>
   b7908:	2000      	movs	r0, #0
   b790a:	e7fa      	b.n	b7902 <_ZNKSt9type_infoeqERKS_+0x22>

000b790c <atexit>:
   b790c:	2300      	movs	r3, #0
   b790e:	4601      	mov	r1, r0
   b7910:	461a      	mov	r2, r3
   b7912:	4618      	mov	r0, r3
   b7914:	f000 b882 	b.w	b7a1c <__register_exitproc>

000b7918 <memcmp>:
   b7918:	b510      	push	{r4, lr}
   b791a:	3901      	subs	r1, #1
   b791c:	4402      	add	r2, r0
   b791e:	4290      	cmp	r0, r2
   b7920:	d101      	bne.n	b7926 <memcmp+0xe>
   b7922:	2000      	movs	r0, #0
   b7924:	e005      	b.n	b7932 <memcmp+0x1a>
   b7926:	7803      	ldrb	r3, [r0, #0]
   b7928:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b792c:	42a3      	cmp	r3, r4
   b792e:	d001      	beq.n	b7934 <memcmp+0x1c>
   b7930:	1b18      	subs	r0, r3, r4
   b7932:	bd10      	pop	{r4, pc}
   b7934:	3001      	adds	r0, #1
   b7936:	e7f2      	b.n	b791e <memcmp+0x6>

000b7938 <memcpy>:
   b7938:	440a      	add	r2, r1
   b793a:	4291      	cmp	r1, r2
   b793c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7940:	d100      	bne.n	b7944 <memcpy+0xc>
   b7942:	4770      	bx	lr
   b7944:	b510      	push	{r4, lr}
   b7946:	f811 4b01 	ldrb.w	r4, [r1], #1
   b794a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b794e:	4291      	cmp	r1, r2
   b7950:	d1f9      	bne.n	b7946 <memcpy+0xe>
   b7952:	bd10      	pop	{r4, pc}

000b7954 <memmove>:
   b7954:	4288      	cmp	r0, r1
   b7956:	b510      	push	{r4, lr}
   b7958:	eb01 0402 	add.w	r4, r1, r2
   b795c:	d902      	bls.n	b7964 <memmove+0x10>
   b795e:	4284      	cmp	r4, r0
   b7960:	4623      	mov	r3, r4
   b7962:	d807      	bhi.n	b7974 <memmove+0x20>
   b7964:	1e43      	subs	r3, r0, #1
   b7966:	42a1      	cmp	r1, r4
   b7968:	d008      	beq.n	b797c <memmove+0x28>
   b796a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b796e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7972:	e7f8      	b.n	b7966 <memmove+0x12>
   b7974:	4402      	add	r2, r0
   b7976:	4601      	mov	r1, r0
   b7978:	428a      	cmp	r2, r1
   b797a:	d100      	bne.n	b797e <memmove+0x2a>
   b797c:	bd10      	pop	{r4, pc}
   b797e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7982:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7986:	e7f7      	b.n	b7978 <memmove+0x24>

000b7988 <memset>:
   b7988:	4402      	add	r2, r0
   b798a:	4603      	mov	r3, r0
   b798c:	4293      	cmp	r3, r2
   b798e:	d100      	bne.n	b7992 <memset+0xa>
   b7990:	4770      	bx	lr
   b7992:	f803 1b01 	strb.w	r1, [r3], #1
   b7996:	e7f9      	b.n	b798c <memset+0x4>

000b7998 <srand>:
   b7998:	b538      	push	{r3, r4, r5, lr}
   b799a:	4b10      	ldr	r3, [pc, #64]	; (b79dc <srand+0x44>)
   b799c:	681d      	ldr	r5, [r3, #0]
   b799e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b79a0:	4604      	mov	r4, r0
   b79a2:	b9b3      	cbnz	r3, b79d2 <srand+0x3a>
   b79a4:	2018      	movs	r0, #24
   b79a6:	f7fc fea7 	bl	b46f8 <malloc>
   b79aa:	4602      	mov	r2, r0
   b79ac:	63a8      	str	r0, [r5, #56]	; 0x38
   b79ae:	b920      	cbnz	r0, b79ba <srand+0x22>
   b79b0:	4b0b      	ldr	r3, [pc, #44]	; (b79e0 <srand+0x48>)
   b79b2:	480c      	ldr	r0, [pc, #48]	; (b79e4 <srand+0x4c>)
   b79b4:	2142      	movs	r1, #66	; 0x42
   b79b6:	f7fc febf 	bl	b4738 <__assert_func>
   b79ba:	490b      	ldr	r1, [pc, #44]	; (b79e8 <srand+0x50>)
   b79bc:	4b0b      	ldr	r3, [pc, #44]	; (b79ec <srand+0x54>)
   b79be:	e9c0 1300 	strd	r1, r3, [r0]
   b79c2:	4b0b      	ldr	r3, [pc, #44]	; (b79f0 <srand+0x58>)
   b79c4:	6083      	str	r3, [r0, #8]
   b79c6:	230b      	movs	r3, #11
   b79c8:	8183      	strh	r3, [r0, #12]
   b79ca:	2100      	movs	r1, #0
   b79cc:	2001      	movs	r0, #1
   b79ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b79d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b79d4:	2200      	movs	r2, #0
   b79d6:	611c      	str	r4, [r3, #16]
   b79d8:	615a      	str	r2, [r3, #20]
   b79da:	bd38      	pop	{r3, r4, r5, pc}
   b79dc:	2003e328 	.word	0x2003e328
   b79e0:	000b8021 	.word	0x000b8021
   b79e4:	000b8038 	.word	0x000b8038
   b79e8:	abcd330e 	.word	0xabcd330e
   b79ec:	e66d1234 	.word	0xe66d1234
   b79f0:	0005deec 	.word	0x0005deec

000b79f4 <strcpy>:
   b79f4:	4603      	mov	r3, r0
   b79f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b79fa:	f803 2b01 	strb.w	r2, [r3], #1
   b79fe:	2a00      	cmp	r2, #0
   b7a00:	d1f9      	bne.n	b79f6 <strcpy+0x2>
   b7a02:	4770      	bx	lr

000b7a04 <strnlen>:
   b7a04:	b510      	push	{r4, lr}
   b7a06:	4602      	mov	r2, r0
   b7a08:	4401      	add	r1, r0
   b7a0a:	428a      	cmp	r2, r1
   b7a0c:	4613      	mov	r3, r2
   b7a0e:	d003      	beq.n	b7a18 <strnlen+0x14>
   b7a10:	781c      	ldrb	r4, [r3, #0]
   b7a12:	3201      	adds	r2, #1
   b7a14:	2c00      	cmp	r4, #0
   b7a16:	d1f8      	bne.n	b7a0a <strnlen+0x6>
   b7a18:	1a18      	subs	r0, r3, r0
   b7a1a:	bd10      	pop	{r4, pc}

000b7a1c <__register_exitproc>:
   b7a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7a20:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7adc <__register_exitproc+0xc0>
   b7a24:	4606      	mov	r6, r0
   b7a26:	f8d8 0000 	ldr.w	r0, [r8]
   b7a2a:	461f      	mov	r7, r3
   b7a2c:	460d      	mov	r5, r1
   b7a2e:	4691      	mov	r9, r2
   b7a30:	f000 f856 	bl	b7ae0 <__retarget_lock_acquire_recursive>
   b7a34:	4b25      	ldr	r3, [pc, #148]	; (b7acc <__register_exitproc+0xb0>)
   b7a36:	681c      	ldr	r4, [r3, #0]
   b7a38:	b934      	cbnz	r4, b7a48 <__register_exitproc+0x2c>
   b7a3a:	4c25      	ldr	r4, [pc, #148]	; (b7ad0 <__register_exitproc+0xb4>)
   b7a3c:	601c      	str	r4, [r3, #0]
   b7a3e:	4b25      	ldr	r3, [pc, #148]	; (b7ad4 <__register_exitproc+0xb8>)
   b7a40:	b113      	cbz	r3, b7a48 <__register_exitproc+0x2c>
   b7a42:	681b      	ldr	r3, [r3, #0]
   b7a44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7a48:	6863      	ldr	r3, [r4, #4]
   b7a4a:	2b1f      	cmp	r3, #31
   b7a4c:	dd07      	ble.n	b7a5e <__register_exitproc+0x42>
   b7a4e:	f8d8 0000 	ldr.w	r0, [r8]
   b7a52:	f000 f847 	bl	b7ae4 <__retarget_lock_release_recursive>
   b7a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7a5e:	b34e      	cbz	r6, b7ab4 <__register_exitproc+0x98>
   b7a60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7a64:	b988      	cbnz	r0, b7a8a <__register_exitproc+0x6e>
   b7a66:	4b1c      	ldr	r3, [pc, #112]	; (b7ad8 <__register_exitproc+0xbc>)
   b7a68:	b923      	cbnz	r3, b7a74 <__register_exitproc+0x58>
   b7a6a:	f8d8 0000 	ldr.w	r0, [r8]
   b7a6e:	f000 f838 	bl	b7ae2 <__retarget_lock_release>
   b7a72:	e7f0      	b.n	b7a56 <__register_exitproc+0x3a>
   b7a74:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7a78:	f7fc fe3e 	bl	b46f8 <malloc>
   b7a7c:	2800      	cmp	r0, #0
   b7a7e:	d0f4      	beq.n	b7a6a <__register_exitproc+0x4e>
   b7a80:	2300      	movs	r3, #0
   b7a82:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7a86:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7a8a:	6863      	ldr	r3, [r4, #4]
   b7a8c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7a90:	2201      	movs	r2, #1
   b7a92:	409a      	lsls	r2, r3
   b7a94:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7a98:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7a9c:	4313      	orrs	r3, r2
   b7a9e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7aa2:	2e02      	cmp	r6, #2
   b7aa4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7aa8:	bf02      	ittt	eq
   b7aaa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7aae:	4313      	orreq	r3, r2
   b7ab0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7ab4:	6863      	ldr	r3, [r4, #4]
   b7ab6:	f8d8 0000 	ldr.w	r0, [r8]
   b7aba:	1c5a      	adds	r2, r3, #1
   b7abc:	3302      	adds	r3, #2
   b7abe:	6062      	str	r2, [r4, #4]
   b7ac0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7ac4:	f000 f80e 	bl	b7ae4 <__retarget_lock_release_recursive>
   b7ac8:	2000      	movs	r0, #0
   b7aca:	e7c6      	b.n	b7a5a <__register_exitproc+0x3e>
   b7acc:	2003e7e8 	.word	0x2003e7e8
   b7ad0:	2003e75c 	.word	0x2003e75c
   b7ad4:	00000000 	.word	0x00000000
   b7ad8:	000b46f9 	.word	0x000b46f9
   b7adc:	2003e38c 	.word	0x2003e38c

000b7ae0 <__retarget_lock_acquire_recursive>:
   b7ae0:	4770      	bx	lr

000b7ae2 <__retarget_lock_release>:
   b7ae2:	4770      	bx	lr

000b7ae4 <__retarget_lock_release_recursive>:
   b7ae4:	4770      	bx	lr

000b7ae6 <link_code_end>:
	...

000b7ae8 <link_const_data_start>:
   b7ae8:	00000000 	.word	0x00000000
   b7aec:	34fb0000 	.word	0x34fb0000
   b7af0:	00805f9b 	.word	0x00805f9b
   b7af4:	10008000 	.word	0x10008000
	...

000b7b00 <dynalib_user>:
   b7b00:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b7b10:	00000000 6e756f43 203d2074 36006425     ....Count = %d.6
   b7b20:	30303445 2d313030 33413542 3933462d     E400001-B5A3-F39
   b7b30:	30452d33 452d3941 32453035 43434434     3-E0A9-E50E24DCC
   b7b40:	00453941 30344536 32303030 4135422d     A9E.6E400002-B5A
   b7b50:	33462d33 452d3339 2d394130 45303545     3-F393-E0A9-E50E
   b7b60:	43443432 45394143 34453600 30303030     24DCCA9E.6E40000
   b7b70:	35422d33 462d3341 2d333933 39413045     3-B5A3-F393-E0A9
   b7b80:	3035452d 44343245 39414343 00000045     -E50E24DCCA9E...

000b7b90 <_ZTVN5spark12NetworkClassE>:
	...
   b7b98:	000b4759 000b4763 000b476d 000b4777     YG..cG..mG..wG..
   b7ba8:	000b4781 000b478d 000b4799 000b47a1     .G...G...G...G..
   b7bb8:	000b47a9 000b47b5 000b47bd 000b47c7     .G...G...G...G..
   b7bc8:	000b47d1                                .G..

000b7bcc <_ZTVN5spark9WiFiClassE>:
	...
   b7bd4:	000b491b 000b4911 000b4907 000b48bd     .I...I...I...H..
   b7be4:	000b48fb 000b48ef 000b4799 000b47a1     .H...H...G...G..
   b7bf4:	000b48e3 000b48db 000b48d1 000b48c7     .H...H...H...H..
   b7c04:	000b47d1                                .G..

000b7c08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b7c10 <_ZTV9USBSerial>:
	...
   b7c18:	000b49ed 000b4a55 000b4a2b 000b4da5     .I..UJ..+J...M..
   b7c28:	000b4a1d 000b49ef 000b49ff 000b4a4f     .J...I...I..OJ..
   b7c38:	000b4a0f 000b49e7                       .J...I..

000b7c40 <_ZTV9IPAddress>:
	...
   b7c48:	000b4b01 000b4af1 000b4af3 252d5925     .K...J...J..%Y-%
   b7c58:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b7c68:	74637361 00656d69 00707061 65737341     asctime.app.Asse
   b7c78:	6f697472 6961466e 6572756c 6c616620     rtionFailure fal
   b7c88:	77006573 6e697269 6c622e67 74530065     se.wiring.ble.St
   b7c98:	20747261 63736964 7265766f 20676e69     art discovering 
   b7ca8:	76726573 73656369 7341002e 74726573     services..Assert
   b7cb8:	466e6f69 756c6961 68206572 625f6c61     ionFailure hal_b
   b7cc8:	735f656c 6b636174 696e695f 756e2874     le_stack_init(nu
   b7cd8:	74706c6c 3d202972 5953203d 4d455453     llptr) == SYSTEM
   b7ce8:	5252455f 4e5f524f 00454e4f 72656550     _ERROR_NONE.Peer
   b7cf8:	76656420 20656369 6d207369 69737369      device is missi
   b7d08:	0021676e 6c696146 74206465 6c61206f     ng!.Failed to al
   b7d18:	61636f6c 6d206574 726f6d65 46002179     locate memory!.F
   b7d28:	656c6961 6f742064 70706120 20646e65     ailed to append 
   b7d38:	72656570 6e654320 6c617274 76656420     peer Central dev
   b7d48:	2e656369 6e6f4300 7463656e 44006465     ice..Connected.D
   b7d58:	6f637369 63656e6e 00646574 6c696146     isconnected.Fail
   b7d68:	74206465 7061206f 646e6570 73696420     ed to append dis
   b7d78:	65766f63 20646572 76726573 2e656369     covered service.
   b7d88:	61745300 64207472 6f637369 69726576     .Start discoveri
   b7d98:	6320676e 61726168 72657463 69747369     ng characteristi
   b7da8:	6f207363 65732066 63697672 25203a65     cs of service: %
   b7db8:	43002e73 6f6e6e61 64612074 656e2064     s..Cannot add ne
   b7dc8:	65702077 64207265 63697665 4e002e65     w peer device..N
   b7dd8:	70207765 70697265 61726568 7369206c     ew peripheral is
   b7de8:	6e6f6320 7463656e 002e6465 72616843      connected..Char
   b7df8:	65746361 74736972 64206369 6f637369     acteristic disco
   b7e08:	65726576 44002e64 6f637369 65726576     vered..Discovere
   b7e18:	68632064 63617261 69726574 63697473     d characteristic
   b7e28:	68207327 6c646e61 73692065 766e6920     's handle is inv
   b7e38:	64696c61 6146002e 64656c69 206f7420     alid..Failed to 
   b7e48:	65707061 6420646e 6f637369 65726576     append discovere
   b7e58:	68632064 63617261 69726574 63697473     d characteristic
   b7e68:	0000002e                                ....

000b7e6c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7e74:	000b4e3d 000b4ea1 000b5017 000b4ecb     =N...N...P...N..
   b7e84:	000b4e41                                AN..

000b7e88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7e90:	000b4e39 000b4eaf 000b4e3b 000b4ed1     9N...N..;N...N..
   b7ea0:	000b4e61                                aN..

000b7ea4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7eac:	000b4e37 000b4ebd 000b5af5 000b4ed7     7N...N...Z...N..
   b7ebc:	000b4e81                                .N..

000b7ec0 <_ZTV11USARTSerial>:
	...
   b7ec8:	000b7329 000b7395 000b736d 000b4da5     )s...s..ms...M..
   b7ed8:	000b733d 000b7359 000b734b 000b7367     =s..Ys..Ks..gs..
   b7ee8:	000b732b 000b732f                       +s../s..

000b7ef0 <_ZTVN5spark13EthernetClassE>:
	...
   b7ef8:	000b744f 000b7445 000b743b 000b7431     Ot..Et..;t..1t..
   b7f08:	000b7425 000b7419 000b4799 000b47a1     %t...t...G...G..
   b7f18:	000b740d 000b7405 000b73fb 000b73f1     .t...t...s...s..
   b7f28:	000b47d1                                .G..

000b7f2c <_ZSt7nothrow>:
	...

000b7f2d <_ZTSSt19_Sp_make_shared_tag>:
   b7f2d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b7f3d:	5f646572 00676174                        red_tag....

000b7f48 <_ZTISt19_Sp_make_shared_tag>:
   b7f48:	000b7f88 000b7f2d                       ....-...

000b7f50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7f50:	000b7fe8 000b7f5c 000b800c              ....\.......

000b7f5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7f5c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b7f6c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b7f7c:	00000045                                E...

000b7f80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7f80:	00000000 000b7f50 000b7735 000b7749     ....P...5w..Iw..
   b7f90:	000b78dd 000b78dd 000b77b3 000b76f5     .x...x...w...v..
   b7fa0:	000b779b 000b775d 000b7727              .w..]w..'w..

000b7fac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7fac:	000b7fe8 000b7fb8 000b7f50              ........P...

000b7fb8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7fb8:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b7fc8:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b7fd8:	456f666e 00000000                       nfoE....

000b7fe0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7fe0:	00000000 000b7fac 000b77dd 000b77f1     .........w...w..
   b7ff0:	000b78dd 000b78dd 000b77b3 000b76f5     .x...x...w...v..
   b8000:	000b78b1 000b783d 000b7805              .x..=x...x..

000b800c <_ZTISt9type_info>:
   b800c:	000b7f88 000b8014                       ........

000b8014 <_ZTSSt9type_info>:
   b8014:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b8024:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b8034:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b8044:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b8054:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b8064:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b8074:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b8084:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b8094:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b80a4:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b80b5 <link_const_data_end>:
   b80b5:	00          	.byte	0x00
	...

000b80b8 <link_constructors_location>:
   b80b8:	000b42ad 	.word	0x000b42ad
   b80bc:	000b48a9 	.word	0x000b48a9
   b80c0:	000b4925 	.word	0x000b4925
   b80c4:	000b4d51 	.word	0x000b4d51
   b80c8:	000b4d5d 	.word	0x000b4d5d
   b80cc:	000b4d95 	.word	0x000b4d95
   b80d0:	000b7319 	.word	0x000b7319
   b80d4:	000b73cd 	.word	0x000b73cd
   b80d8:	000b7459 	.word	0x000b7459
