
/home/elec4740/Documents/particle/Assignment_1/target/5.2.0/p2/Assignment_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb1f0  085fb088  0000b1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004e00  023fb1f8  085fb090  0000b1f8  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         000000a4  1007ad40  085ffe90  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  1007ade4  1007ade4  0002ade4  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085fff34  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000080  085fff38  085fff38  0001ff38  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001ff38  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00129cd1  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000136d9  00000000  00000000  00149cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003100  00000000  00000000  0015d3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002392a  00000000  00000000  001604aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e83e  00000000  00000000  00183dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8647  00000000  00000000  001c2612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0003e051  00000000  00000000  0028ac59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000b860  00000000  00000000  002c8caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008d24  00000000  00000000  002d450c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	480e      	ldr	r0, [pc, #56]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb01a:	490f      	ldr	r1, [pc, #60]	; (85fb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a0e      	ldr	r2, [pc, #56]	; (85fb05c <module_user_pre_init+0x44>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b0d      	ldr	r3, [pc, #52]	; (85fb060 <module_user_pre_init+0x48>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	480d      	ldr	r0, [pc, #52]	; (85fb064 <module_user_pre_init+0x4c>)
 85fb030:	4a0d      	ldr	r2, [pc, #52]	; (85fb068 <module_user_pre_init+0x50>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b0d      	ldr	r3, [pc, #52]	; (85fb06c <module_user_pre_init+0x54>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb03a:	480d      	ldr	r0, [pc, #52]	; (85fb070 <module_user_pre_init+0x58>)
 85fb03c:	490d      	ldr	r1, [pc, #52]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a0d      	ldr	r2, [pc, #52]	; (85fb078 <module_user_pre_init+0x60>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb048:	4b05      	ldr	r3, [pc, #20]	; (85fb060 <module_user_pre_init+0x48>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb04e:	4801      	ldr	r0, [pc, #4]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb050:	bd08      	pop	{r3, pc}
 85fb052:	bf00      	nop
 85fb054:	1007ad40 	.word	0x1007ad40
 85fb058:	085ffe90 	.word	0x085ffe90
 85fb05c:	1007ade4 	.word	0x1007ade4
 85fb060:	10110d2d 	.word	0x10110d2d
 85fb064:	1007ade4 	.word	0x1007ade4
 85fb068:	1007afe8 	.word	0x1007afe8
 85fb06c:	10110ea1 	.word	0x10110ea1
 85fb070:	023fb1f0 	.word	0x023fb1f0
 85fb074:	085fb088 	.word	0x085fb088
 85fb078:	023ffff8 	.word	0x023ffff8

085fb07c <dynalib_preinit>:
 85fb07c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb1f8 <__aeabi_drsub>:
 23fb1f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fb1fc:	e002      	b.n	23fb204 <__adddf3>
 23fb1fe:	bf00      	nop

023fb200 <__aeabi_dsub>:
 23fb200:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fb204 <__adddf3>:
 23fb204:	b530      	push	{r4, r5, lr}
 23fb206:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fb20a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fb20e:	ea94 0f05 	teq	r4, r5
 23fb212:	bf08      	it	eq
 23fb214:	ea90 0f02 	teqeq	r0, r2
 23fb218:	bf1f      	itttt	ne
 23fb21a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fb21e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fb222:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fb226:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb22a:	f000 80e2 	beq.w	23fb3f2 <__adddf3+0x1ee>
 23fb22e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fb232:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fb236:	bfb8      	it	lt
 23fb238:	426d      	neglt	r5, r5
 23fb23a:	dd0c      	ble.n	23fb256 <__adddf3+0x52>
 23fb23c:	442c      	add	r4, r5
 23fb23e:	ea80 0202 	eor.w	r2, r0, r2
 23fb242:	ea81 0303 	eor.w	r3, r1, r3
 23fb246:	ea82 0000 	eor.w	r0, r2, r0
 23fb24a:	ea83 0101 	eor.w	r1, r3, r1
 23fb24e:	ea80 0202 	eor.w	r2, r0, r2
 23fb252:	ea81 0303 	eor.w	r3, r1, r3
 23fb256:	2d36      	cmp	r5, #54	; 0x36
 23fb258:	bf88      	it	hi
 23fb25a:	bd30      	pophi	{r4, r5, pc}
 23fb25c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb264:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fb268:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fb26c:	d002      	beq.n	23fb274 <__adddf3+0x70>
 23fb26e:	4240      	negs	r0, r0
 23fb270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb274:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fb278:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb27c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fb280:	d002      	beq.n	23fb288 <__adddf3+0x84>
 23fb282:	4252      	negs	r2, r2
 23fb284:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fb288:	ea94 0f05 	teq	r4, r5
 23fb28c:	f000 80a7 	beq.w	23fb3de <__adddf3+0x1da>
 23fb290:	f1a4 0401 	sub.w	r4, r4, #1
 23fb294:	f1d5 0e20 	rsbs	lr, r5, #32
 23fb298:	db0d      	blt.n	23fb2b6 <__adddf3+0xb2>
 23fb29a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fb29e:	fa22 f205 	lsr.w	r2, r2, r5
 23fb2a2:	1880      	adds	r0, r0, r2
 23fb2a4:	f141 0100 	adc.w	r1, r1, #0
 23fb2a8:	fa03 f20e 	lsl.w	r2, r3, lr
 23fb2ac:	1880      	adds	r0, r0, r2
 23fb2ae:	fa43 f305 	asr.w	r3, r3, r5
 23fb2b2:	4159      	adcs	r1, r3
 23fb2b4:	e00e      	b.n	23fb2d4 <__adddf3+0xd0>
 23fb2b6:	f1a5 0520 	sub.w	r5, r5, #32
 23fb2ba:	f10e 0e20 	add.w	lr, lr, #32
 23fb2be:	2a01      	cmp	r2, #1
 23fb2c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fb2c4:	bf28      	it	cs
 23fb2c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fb2ca:	fa43 f305 	asr.w	r3, r3, r5
 23fb2ce:	18c0      	adds	r0, r0, r3
 23fb2d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fb2d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb2d8:	d507      	bpl.n	23fb2ea <__adddf3+0xe6>
 23fb2da:	f04f 0e00 	mov.w	lr, #0
 23fb2de:	f1dc 0c00 	rsbs	ip, ip, #0
 23fb2e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fb2e6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fb2ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fb2ee:	d31b      	bcc.n	23fb328 <__adddf3+0x124>
 23fb2f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fb2f4:	d30c      	bcc.n	23fb310 <__adddf3+0x10c>
 23fb2f6:	0849      	lsrs	r1, r1, #1
 23fb2f8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fb2fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fb300:	f104 0401 	add.w	r4, r4, #1
 23fb304:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fb308:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fb30c:	f080 809a 	bcs.w	23fb444 <__adddf3+0x240>
 23fb310:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fb314:	bf08      	it	eq
 23fb316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb31a:	f150 0000 	adcs.w	r0, r0, #0
 23fb31e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb322:	ea41 0105 	orr.w	r1, r1, r5
 23fb326:	bd30      	pop	{r4, r5, pc}
 23fb328:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fb32c:	4140      	adcs	r0, r0
 23fb32e:	eb41 0101 	adc.w	r1, r1, r1
 23fb332:	3c01      	subs	r4, #1
 23fb334:	bf28      	it	cs
 23fb336:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fb33a:	d2e9      	bcs.n	23fb310 <__adddf3+0x10c>
 23fb33c:	f091 0f00 	teq	r1, #0
 23fb340:	bf04      	itt	eq
 23fb342:	4601      	moveq	r1, r0
 23fb344:	2000      	moveq	r0, #0
 23fb346:	fab1 f381 	clz	r3, r1
 23fb34a:	bf08      	it	eq
 23fb34c:	3320      	addeq	r3, #32
 23fb34e:	f1a3 030b 	sub.w	r3, r3, #11
 23fb352:	f1b3 0220 	subs.w	r2, r3, #32
 23fb356:	da0c      	bge.n	23fb372 <__adddf3+0x16e>
 23fb358:	320c      	adds	r2, #12
 23fb35a:	dd08      	ble.n	23fb36e <__adddf3+0x16a>
 23fb35c:	f102 0c14 	add.w	ip, r2, #20
 23fb360:	f1c2 020c 	rsb	r2, r2, #12
 23fb364:	fa01 f00c 	lsl.w	r0, r1, ip
 23fb368:	fa21 f102 	lsr.w	r1, r1, r2
 23fb36c:	e00c      	b.n	23fb388 <__adddf3+0x184>
 23fb36e:	f102 0214 	add.w	r2, r2, #20
 23fb372:	bfd8      	it	le
 23fb374:	f1c2 0c20 	rsble	ip, r2, #32
 23fb378:	fa01 f102 	lsl.w	r1, r1, r2
 23fb37c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fb380:	bfdc      	itt	le
 23fb382:	ea41 010c 	orrle.w	r1, r1, ip
 23fb386:	4090      	lslle	r0, r2
 23fb388:	1ae4      	subs	r4, r4, r3
 23fb38a:	bfa2      	ittt	ge
 23fb38c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fb390:	4329      	orrge	r1, r5
 23fb392:	bd30      	popge	{r4, r5, pc}
 23fb394:	ea6f 0404 	mvn.w	r4, r4
 23fb398:	3c1f      	subs	r4, #31
 23fb39a:	da1c      	bge.n	23fb3d6 <__adddf3+0x1d2>
 23fb39c:	340c      	adds	r4, #12
 23fb39e:	dc0e      	bgt.n	23fb3be <__adddf3+0x1ba>
 23fb3a0:	f104 0414 	add.w	r4, r4, #20
 23fb3a4:	f1c4 0220 	rsb	r2, r4, #32
 23fb3a8:	fa20 f004 	lsr.w	r0, r0, r4
 23fb3ac:	fa01 f302 	lsl.w	r3, r1, r2
 23fb3b0:	ea40 0003 	orr.w	r0, r0, r3
 23fb3b4:	fa21 f304 	lsr.w	r3, r1, r4
 23fb3b8:	ea45 0103 	orr.w	r1, r5, r3
 23fb3bc:	bd30      	pop	{r4, r5, pc}
 23fb3be:	f1c4 040c 	rsb	r4, r4, #12
 23fb3c2:	f1c4 0220 	rsb	r2, r4, #32
 23fb3c6:	fa20 f002 	lsr.w	r0, r0, r2
 23fb3ca:	fa01 f304 	lsl.w	r3, r1, r4
 23fb3ce:	ea40 0003 	orr.w	r0, r0, r3
 23fb3d2:	4629      	mov	r1, r5
 23fb3d4:	bd30      	pop	{r4, r5, pc}
 23fb3d6:	fa21 f004 	lsr.w	r0, r1, r4
 23fb3da:	4629      	mov	r1, r5
 23fb3dc:	bd30      	pop	{r4, r5, pc}
 23fb3de:	f094 0f00 	teq	r4, #0
 23fb3e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fb3e6:	bf06      	itte	eq
 23fb3e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fb3ec:	3401      	addeq	r4, #1
 23fb3ee:	3d01      	subne	r5, #1
 23fb3f0:	e74e      	b.n	23fb290 <__adddf3+0x8c>
 23fb3f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb3f6:	bf18      	it	ne
 23fb3f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fb3fc:	d029      	beq.n	23fb452 <__adddf3+0x24e>
 23fb3fe:	ea94 0f05 	teq	r4, r5
 23fb402:	bf08      	it	eq
 23fb404:	ea90 0f02 	teqeq	r0, r2
 23fb408:	d005      	beq.n	23fb416 <__adddf3+0x212>
 23fb40a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fb40e:	bf04      	itt	eq
 23fb410:	4619      	moveq	r1, r3
 23fb412:	4610      	moveq	r0, r2
 23fb414:	bd30      	pop	{r4, r5, pc}
 23fb416:	ea91 0f03 	teq	r1, r3
 23fb41a:	bf1e      	ittt	ne
 23fb41c:	2100      	movne	r1, #0
 23fb41e:	2000      	movne	r0, #0
 23fb420:	bd30      	popne	{r4, r5, pc}
 23fb422:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fb426:	d105      	bne.n	23fb434 <__adddf3+0x230>
 23fb428:	0040      	lsls	r0, r0, #1
 23fb42a:	4149      	adcs	r1, r1
 23fb42c:	bf28      	it	cs
 23fb42e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fb432:	bd30      	pop	{r4, r5, pc}
 23fb434:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fb438:	bf3c      	itt	cc
 23fb43a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fb43e:	bd30      	popcc	{r4, r5, pc}
 23fb440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb444:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fb448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb44c:	f04f 0000 	mov.w	r0, #0
 23fb450:	bd30      	pop	{r4, r5, pc}
 23fb452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fb456:	bf1a      	itte	ne
 23fb458:	4619      	movne	r1, r3
 23fb45a:	4610      	movne	r0, r2
 23fb45c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fb460:	bf1c      	itt	ne
 23fb462:	460b      	movne	r3, r1
 23fb464:	4602      	movne	r2, r0
 23fb466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb46a:	bf06      	itte	eq
 23fb46c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fb470:	ea91 0f03 	teqeq	r1, r3
 23fb474:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fb478:	bd30      	pop	{r4, r5, pc}
 23fb47a:	bf00      	nop

023fb47c <__aeabi_ui2d>:
 23fb47c:	f090 0f00 	teq	r0, #0
 23fb480:	bf04      	itt	eq
 23fb482:	2100      	moveq	r1, #0
 23fb484:	4770      	bxeq	lr
 23fb486:	b530      	push	{r4, r5, lr}
 23fb488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb48c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb490:	f04f 0500 	mov.w	r5, #0
 23fb494:	f04f 0100 	mov.w	r1, #0
 23fb498:	e750      	b.n	23fb33c <__adddf3+0x138>
 23fb49a:	bf00      	nop

023fb49c <__aeabi_i2d>:
 23fb49c:	f090 0f00 	teq	r0, #0
 23fb4a0:	bf04      	itt	eq
 23fb4a2:	2100      	moveq	r1, #0
 23fb4a4:	4770      	bxeq	lr
 23fb4a6:	b530      	push	{r4, r5, lr}
 23fb4a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb4ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb4b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fb4b4:	bf48      	it	mi
 23fb4b6:	4240      	negmi	r0, r0
 23fb4b8:	f04f 0100 	mov.w	r1, #0
 23fb4bc:	e73e      	b.n	23fb33c <__adddf3+0x138>
 23fb4be:	bf00      	nop

023fb4c0 <__aeabi_f2d>:
 23fb4c0:	0042      	lsls	r2, r0, #1
 23fb4c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fb4c6:	ea4f 0131 	mov.w	r1, r1, rrx
 23fb4ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fb4ce:	bf1f      	itttt	ne
 23fb4d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fb4d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fb4d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fb4dc:	4770      	bxne	lr
 23fb4de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fb4e2:	bf08      	it	eq
 23fb4e4:	4770      	bxeq	lr
 23fb4e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fb4ea:	bf04      	itt	eq
 23fb4ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fb4f0:	4770      	bxeq	lr
 23fb4f2:	b530      	push	{r4, r5, lr}
 23fb4f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fb4f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fb4fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb500:	e71c      	b.n	23fb33c <__adddf3+0x138>
 23fb502:	bf00      	nop

023fb504 <__aeabi_ul2d>:
 23fb504:	ea50 0201 	orrs.w	r2, r0, r1
 23fb508:	bf08      	it	eq
 23fb50a:	4770      	bxeq	lr
 23fb50c:	b530      	push	{r4, r5, lr}
 23fb50e:	f04f 0500 	mov.w	r5, #0
 23fb512:	e00a      	b.n	23fb52a <__aeabi_l2d+0x16>

023fb514 <__aeabi_l2d>:
 23fb514:	ea50 0201 	orrs.w	r2, r0, r1
 23fb518:	bf08      	it	eq
 23fb51a:	4770      	bxeq	lr
 23fb51c:	b530      	push	{r4, r5, lr}
 23fb51e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fb522:	d502      	bpl.n	23fb52a <__aeabi_l2d+0x16>
 23fb524:	4240      	negs	r0, r0
 23fb526:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fb52a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fb52e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fb532:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fb536:	f43f aed8 	beq.w	23fb2ea <__adddf3+0xe6>
 23fb53a:	f04f 0203 	mov.w	r2, #3
 23fb53e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb542:	bf18      	it	ne
 23fb544:	3203      	addne	r2, #3
 23fb546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fb54a:	bf18      	it	ne
 23fb54c:	3203      	addne	r2, #3
 23fb54e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fb552:	f1c2 0320 	rsb	r3, r2, #32
 23fb556:	fa00 fc03 	lsl.w	ip, r0, r3
 23fb55a:	fa20 f002 	lsr.w	r0, r0, r2
 23fb55e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fb562:	ea40 000e 	orr.w	r0, r0, lr
 23fb566:	fa21 f102 	lsr.w	r1, r1, r2
 23fb56a:	4414      	add	r4, r2
 23fb56c:	e6bd      	b.n	23fb2ea <__adddf3+0xe6>
 23fb56e:	bf00      	nop

023fb570 <__aeabi_dmul>:
 23fb570:	b570      	push	{r4, r5, r6, lr}
 23fb572:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb576:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb57a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb57e:	bf1d      	ittte	ne
 23fb580:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb584:	ea94 0f0c 	teqne	r4, ip
 23fb588:	ea95 0f0c 	teqne	r5, ip
 23fb58c:	f000 f8de 	bleq	23fb74c <__aeabi_dmul+0x1dc>
 23fb590:	442c      	add	r4, r5
 23fb592:	ea81 0603 	eor.w	r6, r1, r3
 23fb596:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fb59a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fb59e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fb5a2:	bf18      	it	ne
 23fb5a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fb5a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb5ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fb5b0:	d038      	beq.n	23fb624 <__aeabi_dmul+0xb4>
 23fb5b2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fb5b6:	f04f 0500 	mov.w	r5, #0
 23fb5ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fb5be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fb5c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fb5c6:	f04f 0600 	mov.w	r6, #0
 23fb5ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fb5ce:	f09c 0f00 	teq	ip, #0
 23fb5d2:	bf18      	it	ne
 23fb5d4:	f04e 0e01 	orrne.w	lr, lr, #1
 23fb5d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fb5dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fb5e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fb5e4:	d204      	bcs.n	23fb5f0 <__aeabi_dmul+0x80>
 23fb5e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fb5ea:	416d      	adcs	r5, r5
 23fb5ec:	eb46 0606 	adc.w	r6, r6, r6
 23fb5f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fb5f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fb5f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fb5fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fb600:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fb604:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb608:	bf88      	it	hi
 23fb60a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb60e:	d81e      	bhi.n	23fb64e <__aeabi_dmul+0xde>
 23fb610:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fb614:	bf08      	it	eq
 23fb616:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fb61a:	f150 0000 	adcs.w	r0, r0, #0
 23fb61e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb622:	bd70      	pop	{r4, r5, r6, pc}
 23fb624:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fb628:	ea46 0101 	orr.w	r1, r6, r1
 23fb62c:	ea40 0002 	orr.w	r0, r0, r2
 23fb630:	ea81 0103 	eor.w	r1, r1, r3
 23fb634:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fb638:	bfc2      	ittt	gt
 23fb63a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb63e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb642:	bd70      	popgt	{r4, r5, r6, pc}
 23fb644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb648:	f04f 0e00 	mov.w	lr, #0
 23fb64c:	3c01      	subs	r4, #1
 23fb64e:	f300 80ab 	bgt.w	23fb7a8 <__aeabi_dmul+0x238>
 23fb652:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fb656:	bfde      	ittt	le
 23fb658:	2000      	movle	r0, #0
 23fb65a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fb65e:	bd70      	pople	{r4, r5, r6, pc}
 23fb660:	f1c4 0400 	rsb	r4, r4, #0
 23fb664:	3c20      	subs	r4, #32
 23fb666:	da35      	bge.n	23fb6d4 <__aeabi_dmul+0x164>
 23fb668:	340c      	adds	r4, #12
 23fb66a:	dc1b      	bgt.n	23fb6a4 <__aeabi_dmul+0x134>
 23fb66c:	f104 0414 	add.w	r4, r4, #20
 23fb670:	f1c4 0520 	rsb	r5, r4, #32
 23fb674:	fa00 f305 	lsl.w	r3, r0, r5
 23fb678:	fa20 f004 	lsr.w	r0, r0, r4
 23fb67c:	fa01 f205 	lsl.w	r2, r1, r5
 23fb680:	ea40 0002 	orr.w	r0, r0, r2
 23fb684:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fb688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fb68c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb690:	fa21 f604 	lsr.w	r6, r1, r4
 23fb694:	eb42 0106 	adc.w	r1, r2, r6
 23fb698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb69c:	bf08      	it	eq
 23fb69e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb6a2:	bd70      	pop	{r4, r5, r6, pc}
 23fb6a4:	f1c4 040c 	rsb	r4, r4, #12
 23fb6a8:	f1c4 0520 	rsb	r5, r4, #32
 23fb6ac:	fa00 f304 	lsl.w	r3, r0, r4
 23fb6b0:	fa20 f005 	lsr.w	r0, r0, r5
 23fb6b4:	fa01 f204 	lsl.w	r2, r1, r4
 23fb6b8:	ea40 0002 	orr.w	r0, r0, r2
 23fb6bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb6c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fb6c4:	f141 0100 	adc.w	r1, r1, #0
 23fb6c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb6cc:	bf08      	it	eq
 23fb6ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb6d2:	bd70      	pop	{r4, r5, r6, pc}
 23fb6d4:	f1c4 0520 	rsb	r5, r4, #32
 23fb6d8:	fa00 f205 	lsl.w	r2, r0, r5
 23fb6dc:	ea4e 0e02 	orr.w	lr, lr, r2
 23fb6e0:	fa20 f304 	lsr.w	r3, r0, r4
 23fb6e4:	fa01 f205 	lsl.w	r2, r1, r5
 23fb6e8:	ea43 0302 	orr.w	r3, r3, r2
 23fb6ec:	fa21 f004 	lsr.w	r0, r1, r4
 23fb6f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb6f4:	fa21 f204 	lsr.w	r2, r1, r4
 23fb6f8:	ea20 0002 	bic.w	r0, r0, r2
 23fb6fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fb700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fb704:	bf08      	it	eq
 23fb706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fb70a:	bd70      	pop	{r4, r5, r6, pc}
 23fb70c:	f094 0f00 	teq	r4, #0
 23fb710:	d10f      	bne.n	23fb732 <__aeabi_dmul+0x1c2>
 23fb712:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fb716:	0040      	lsls	r0, r0, #1
 23fb718:	eb41 0101 	adc.w	r1, r1, r1
 23fb71c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb720:	bf08      	it	eq
 23fb722:	3c01      	subeq	r4, #1
 23fb724:	d0f7      	beq.n	23fb716 <__aeabi_dmul+0x1a6>
 23fb726:	ea41 0106 	orr.w	r1, r1, r6
 23fb72a:	f095 0f00 	teq	r5, #0
 23fb72e:	bf18      	it	ne
 23fb730:	4770      	bxne	lr
 23fb732:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fb736:	0052      	lsls	r2, r2, #1
 23fb738:	eb43 0303 	adc.w	r3, r3, r3
 23fb73c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fb740:	bf08      	it	eq
 23fb742:	3d01      	subeq	r5, #1
 23fb744:	d0f7      	beq.n	23fb736 <__aeabi_dmul+0x1c6>
 23fb746:	ea43 0306 	orr.w	r3, r3, r6
 23fb74a:	4770      	bx	lr
 23fb74c:	ea94 0f0c 	teq	r4, ip
 23fb750:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb754:	bf18      	it	ne
 23fb756:	ea95 0f0c 	teqne	r5, ip
 23fb75a:	d00c      	beq.n	23fb776 <__aeabi_dmul+0x206>
 23fb75c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb760:	bf18      	it	ne
 23fb762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb766:	d1d1      	bne.n	23fb70c <__aeabi_dmul+0x19c>
 23fb768:	ea81 0103 	eor.w	r1, r1, r3
 23fb76c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb770:	f04f 0000 	mov.w	r0, #0
 23fb774:	bd70      	pop	{r4, r5, r6, pc}
 23fb776:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb77a:	bf06      	itte	eq
 23fb77c:	4610      	moveq	r0, r2
 23fb77e:	4619      	moveq	r1, r3
 23fb780:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb784:	d019      	beq.n	23fb7ba <__aeabi_dmul+0x24a>
 23fb786:	ea94 0f0c 	teq	r4, ip
 23fb78a:	d102      	bne.n	23fb792 <__aeabi_dmul+0x222>
 23fb78c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fb790:	d113      	bne.n	23fb7ba <__aeabi_dmul+0x24a>
 23fb792:	ea95 0f0c 	teq	r5, ip
 23fb796:	d105      	bne.n	23fb7a4 <__aeabi_dmul+0x234>
 23fb798:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fb79c:	bf1c      	itt	ne
 23fb79e:	4610      	movne	r0, r2
 23fb7a0:	4619      	movne	r1, r3
 23fb7a2:	d10a      	bne.n	23fb7ba <__aeabi_dmul+0x24a>
 23fb7a4:	ea81 0103 	eor.w	r1, r1, r3
 23fb7a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fb7ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb7b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fb7b4:	f04f 0000 	mov.w	r0, #0
 23fb7b8:	bd70      	pop	{r4, r5, r6, pc}
 23fb7ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fb7be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fb7c2:	bd70      	pop	{r4, r5, r6, pc}

023fb7c4 <__aeabi_ddiv>:
 23fb7c4:	b570      	push	{r4, r5, r6, lr}
 23fb7c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fb7ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fb7ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fb7d2:	bf1d      	ittte	ne
 23fb7d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fb7d8:	ea94 0f0c 	teqne	r4, ip
 23fb7dc:	ea95 0f0c 	teqne	r5, ip
 23fb7e0:	f000 f8a7 	bleq	23fb932 <__aeabi_ddiv+0x16e>
 23fb7e4:	eba4 0405 	sub.w	r4, r4, r5
 23fb7e8:	ea81 0e03 	eor.w	lr, r1, r3
 23fb7ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb7f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fb7f4:	f000 8088 	beq.w	23fb908 <__aeabi_ddiv+0x144>
 23fb7f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fb7fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fb800:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fb804:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fb808:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fb80c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fb810:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fb814:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fb818:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fb81c:	429d      	cmp	r5, r3
 23fb81e:	bf08      	it	eq
 23fb820:	4296      	cmpeq	r6, r2
 23fb822:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fb826:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fb82a:	d202      	bcs.n	23fb832 <__aeabi_ddiv+0x6e>
 23fb82c:	085b      	lsrs	r3, r3, #1
 23fb82e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb832:	1ab6      	subs	r6, r6, r2
 23fb834:	eb65 0503 	sbc.w	r5, r5, r3
 23fb838:	085b      	lsrs	r3, r3, #1
 23fb83a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb83e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fb842:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fb846:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb84a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb84e:	bf22      	ittt	cs
 23fb850:	1ab6      	subcs	r6, r6, r2
 23fb852:	4675      	movcs	r5, lr
 23fb854:	ea40 000c 	orrcs.w	r0, r0, ip
 23fb858:	085b      	lsrs	r3, r3, #1
 23fb85a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb85e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb862:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb866:	bf22      	ittt	cs
 23fb868:	1ab6      	subcs	r6, r6, r2
 23fb86a:	4675      	movcs	r5, lr
 23fb86c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fb870:	085b      	lsrs	r3, r3, #1
 23fb872:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb876:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb87a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb87e:	bf22      	ittt	cs
 23fb880:	1ab6      	subcs	r6, r6, r2
 23fb882:	4675      	movcs	r5, lr
 23fb884:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fb888:	085b      	lsrs	r3, r3, #1
 23fb88a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fb88e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fb892:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fb896:	bf22      	ittt	cs
 23fb898:	1ab6      	subcs	r6, r6, r2
 23fb89a:	4675      	movcs	r5, lr
 23fb89c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fb8a0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fb8a4:	d018      	beq.n	23fb8d8 <__aeabi_ddiv+0x114>
 23fb8a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fb8aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fb8ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fb8b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fb8b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fb8ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fb8be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fb8c2:	d1c0      	bne.n	23fb846 <__aeabi_ddiv+0x82>
 23fb8c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb8c8:	d10b      	bne.n	23fb8e2 <__aeabi_ddiv+0x11e>
 23fb8ca:	ea41 0100 	orr.w	r1, r1, r0
 23fb8ce:	f04f 0000 	mov.w	r0, #0
 23fb8d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fb8d6:	e7b6      	b.n	23fb846 <__aeabi_ddiv+0x82>
 23fb8d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fb8dc:	bf04      	itt	eq
 23fb8de:	4301      	orreq	r1, r0
 23fb8e0:	2000      	moveq	r0, #0
 23fb8e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fb8e6:	bf88      	it	hi
 23fb8e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fb8ec:	f63f aeaf 	bhi.w	23fb64e <__aeabi_dmul+0xde>
 23fb8f0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fb8f4:	bf04      	itt	eq
 23fb8f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fb8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fb8fe:	f150 0000 	adcs.w	r0, r0, #0
 23fb902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fb906:	bd70      	pop	{r4, r5, r6, pc}
 23fb908:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fb90c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fb910:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fb914:	bfc2      	ittt	gt
 23fb916:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fb91a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fb91e:	bd70      	popgt	{r4, r5, r6, pc}
 23fb920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fb924:	f04f 0e00 	mov.w	lr, #0
 23fb928:	3c01      	subs	r4, #1
 23fb92a:	e690      	b.n	23fb64e <__aeabi_dmul+0xde>
 23fb92c:	ea45 0e06 	orr.w	lr, r5, r6
 23fb930:	e68d      	b.n	23fb64e <__aeabi_dmul+0xde>
 23fb932:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fb936:	ea94 0f0c 	teq	r4, ip
 23fb93a:	bf08      	it	eq
 23fb93c:	ea95 0f0c 	teqeq	r5, ip
 23fb940:	f43f af3b 	beq.w	23fb7ba <__aeabi_dmul+0x24a>
 23fb944:	ea94 0f0c 	teq	r4, ip
 23fb948:	d10a      	bne.n	23fb960 <__aeabi_ddiv+0x19c>
 23fb94a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fb94e:	f47f af34 	bne.w	23fb7ba <__aeabi_dmul+0x24a>
 23fb952:	ea95 0f0c 	teq	r5, ip
 23fb956:	f47f af25 	bne.w	23fb7a4 <__aeabi_dmul+0x234>
 23fb95a:	4610      	mov	r0, r2
 23fb95c:	4619      	mov	r1, r3
 23fb95e:	e72c      	b.n	23fb7ba <__aeabi_dmul+0x24a>
 23fb960:	ea95 0f0c 	teq	r5, ip
 23fb964:	d106      	bne.n	23fb974 <__aeabi_ddiv+0x1b0>
 23fb966:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fb96a:	f43f aefd 	beq.w	23fb768 <__aeabi_dmul+0x1f8>
 23fb96e:	4610      	mov	r0, r2
 23fb970:	4619      	mov	r1, r3
 23fb972:	e722      	b.n	23fb7ba <__aeabi_dmul+0x24a>
 23fb974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fb978:	bf18      	it	ne
 23fb97a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fb97e:	f47f aec5 	bne.w	23fb70c <__aeabi_dmul+0x19c>
 23fb982:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fb986:	f47f af0d 	bne.w	23fb7a4 <__aeabi_dmul+0x234>
 23fb98a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fb98e:	f47f aeeb 	bne.w	23fb768 <__aeabi_dmul+0x1f8>
 23fb992:	e712      	b.n	23fb7ba <__aeabi_dmul+0x24a>

023fb994 <__aeabi_d2iz>:
 23fb994:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb998:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fb99c:	d215      	bcs.n	23fb9ca <__aeabi_d2iz+0x36>
 23fb99e:	d511      	bpl.n	23fb9c4 <__aeabi_d2iz+0x30>
 23fb9a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fb9a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fb9a8:	d912      	bls.n	23fb9d0 <__aeabi_d2iz+0x3c>
 23fb9aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fb9ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fb9b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fb9b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fb9ba:	fa23 f002 	lsr.w	r0, r3, r2
 23fb9be:	bf18      	it	ne
 23fb9c0:	4240      	negne	r0, r0
 23fb9c2:	4770      	bx	lr
 23fb9c4:	f04f 0000 	mov.w	r0, #0
 23fb9c8:	4770      	bx	lr
 23fb9ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fb9ce:	d105      	bne.n	23fb9dc <__aeabi_d2iz+0x48>
 23fb9d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fb9d4:	bf08      	it	eq
 23fb9d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fb9da:	4770      	bx	lr
 23fb9dc:	f04f 0000 	mov.w	r0, #0
 23fb9e0:	4770      	bx	lr
 23fb9e2:	bf00      	nop

023fb9e4 <__aeabi_d2f>:
 23fb9e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fb9e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fb9ec:	bf24      	itt	cs
 23fb9ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fb9f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fb9f6:	d90d      	bls.n	23fba14 <__aeabi_d2f+0x30>
 23fb9f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fb9fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fba00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fba04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fba08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fba0c:	bf08      	it	eq
 23fba0e:	f020 0001 	biceq.w	r0, r0, #1
 23fba12:	4770      	bx	lr
 23fba14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fba18:	d121      	bne.n	23fba5e <__aeabi_d2f+0x7a>
 23fba1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fba1e:	bfbc      	itt	lt
 23fba20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fba24:	4770      	bxlt	lr
 23fba26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fba2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fba2e:	f1c2 0218 	rsb	r2, r2, #24
 23fba32:	f1c2 0c20 	rsb	ip, r2, #32
 23fba36:	fa10 f30c 	lsls.w	r3, r0, ip
 23fba3a:	fa20 f002 	lsr.w	r0, r0, r2
 23fba3e:	bf18      	it	ne
 23fba40:	f040 0001 	orrne.w	r0, r0, #1
 23fba44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fba48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fba4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fba50:	ea40 000c 	orr.w	r0, r0, ip
 23fba54:	fa23 f302 	lsr.w	r3, r3, r2
 23fba58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fba5c:	e7cc      	b.n	23fb9f8 <__aeabi_d2f+0x14>
 23fba5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fba62:	d107      	bne.n	23fba74 <__aeabi_d2f+0x90>
 23fba64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fba68:	bf1e      	ittt	ne
 23fba6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fba6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fba72:	4770      	bxne	lr
 23fba74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fba78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fba7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fba80:	4770      	bx	lr
 23fba82:	bf00      	nop

023fba84 <strcmp>:
 23fba84:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fba88:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fba8c:	2a01      	cmp	r2, #1
 23fba8e:	bf28      	it	cs
 23fba90:	429a      	cmpcs	r2, r3
 23fba92:	d0f7      	beq.n	23fba84 <strcmp>
 23fba94:	1ad0      	subs	r0, r2, r3
 23fba96:	4770      	bx	lr

023fba98 <strlen>:
 23fba98:	4603      	mov	r3, r0
 23fba9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fba9e:	2a00      	cmp	r2, #0
 23fbaa0:	d1fb      	bne.n	23fba9a <strlen+0x2>
 23fbaa2:	1a18      	subs	r0, r3, r0
 23fbaa4:	3801      	subs	r0, #1
 23fbaa6:	4770      	bx	lr

023fbaa8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fbaa8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fbaaa:	f001 fbfb 	bl	23fd2a4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fbaae:	2500      	movs	r5, #0
 23fbab0:	4e05      	ldr	r6, [pc, #20]	; (23fbac8 <module_user_init+0x20>)
 23fbab2:	4c06      	ldr	r4, [pc, #24]	; (23fbacc <module_user_init+0x24>)
 23fbab4:	1ba4      	subs	r4, r4, r6
 23fbab6:	08a4      	lsrs	r4, r4, #2
 23fbab8:	42ac      	cmp	r4, r5
 23fbaba:	d100      	bne.n	23fbabe <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fbabc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fbabe:	f856 3b04 	ldr.w	r3, [r6], #4
 23fbac2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fbac4:	3501      	adds	r5, #1
 23fbac6:	e7f7      	b.n	23fbab8 <module_user_init+0x10>
 23fbac8:	023fffd4 	.word	0x023fffd4
 23fbacc:	023ffff8 	.word	0x023ffff8

023fbad0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fbad0:	f000 b860 	b.w	23fbb94 <setup>

023fbad4 <module_user_loop>:
}

void module_user_loop() {
 23fbad4:	b508      	push	{r3, lr}
    loop();
 23fbad6:	f000 f88f 	bl	23fbbf8 <loop>
    _post_loop();
}
 23fbada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fbade:	f001 bb99 	b.w	23fd214 <_post_loop>

023fbae2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fbae2:	f000 bec1 	b.w	23fc868 <malloc>

023fbae6 <_Znaj>:
 23fbae6:	f000 bebf 	b.w	23fc868 <malloc>

023fbaea <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fbaea:	f000 becb 	b.w	23fc884 <free>
	...

023fbaf0 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fbaf0:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fbaf2:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fbaf4:	4a02      	ldr	r2, [pc, #8]	; (23fbb00 <__cxa_pure_virtual+0x10>)
 23fbaf6:	4903      	ldr	r1, [pc, #12]	; (23fbb04 <__cxa_pure_virtual+0x14>)
 23fbaf8:	f000 fd74 	bl	23fc5e4 <panic_>
  while (1);
 23fbafc:	e7fe      	b.n	23fbafc <__cxa_pure_virtual+0xc>
 23fbafe:	bf00      	nop
 23fbb00:	023fc495 	.word	0x023fc495
 23fbb04:	023ff99c 	.word	0x023ff99c

023fbb08 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fbb08:	7800      	ldrb	r0, [r0, #0]
 23fbb0a:	fab0 f080 	clz	r0, r0
 23fbb0e:	0940      	lsrs	r0, r0, #5
 23fbb10:	4770      	bx	lr

023fbb12 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fbb12:	2301      	movs	r3, #1
 23fbb14:	7003      	strb	r3, [r0, #0]
 23fbb16:	4770      	bx	lr

023fbb18 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fbb18:	4770      	bx	lr
	...

023fbb1c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fbb1c:	b510      	push	{r4, lr}
 23fbb1e:	4604      	mov	r4, r0
 23fbb20:	4b09      	ldr	r3, [pc, #36]	; (23fbb48 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fbb22:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fbb24:	f001 fd88 	bl	23fd638 <_ZN5spark10LogManager8instanceEv>
 23fbb28:	4621      	mov	r1, r4
 23fbb2a:	f001 ffd1 	bl	23fdad0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fbb2e:	f001 fa9b 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fbb32:	f001 fa8d 	bl	23fd050 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fbb36:	4620      	mov	r0, r4
 23fbb38:	4b04      	ldr	r3, [pc, #16]	; (23fbb4c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fbb3a:	f840 3b04 	str.w	r3, [r0], #4
 23fbb3e:	f001 fe63 	bl	23fd808 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fbb42:	4620      	mov	r0, r4
 23fbb44:	bd10      	pop	{r4, pc}
 23fbb46:	bf00      	nop
 23fbb48:	023ff9ec 	.word	0x023ff9ec
 23fbb4c:	023ff9d4 	.word	0x023ff9d4

023fbb50 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fbb50:	b510      	push	{r4, lr}
 23fbb52:	4604      	mov	r4, r0
    }
 23fbb54:	f7ff ffe2 	bl	23fbb1c <_ZN5spark16SerialLogHandlerD1Ev>
 23fbb58:	4620      	mov	r0, r4
 23fbb5a:	2124      	movs	r1, #36	; 0x24
 23fbb5c:	f7ff ffc5 	bl	23fbaea <_ZdlPvj>
 23fbb60:	4620      	mov	r0, r4
 23fbb62:	bd10      	pop	{r4, pc}

023fbb64 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fbb64:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fbb66:	f04f 0c20 	mov.w	ip, #32
 23fbb6a:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fbb6c:	b500      	push	{lr}
 23fbb6e:	b08c      	sub	sp, #48	; 0x30
 23fbb70:	aa0d      	add	r2, sp, #52	; 0x34
 23fbb72:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fbb76:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbb7a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fbb7e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fbb80:	6801      	ldr	r1, [r0, #0]
 23fbb82:	aa04      	add	r2, sp, #16
 23fbb84:	201e      	movs	r0, #30
 23fbb86:	f000 fd49 	bl	23fc61c <log_message_v>
}
 23fbb8a:	b00c      	add	sp, #48	; 0x30
 23fbb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbb90:	b003      	add	sp, #12
 23fbb92:	4770      	bx	lr

023fbb94 <setup>:
void float2Bytes(float,byte*);
// 	timer.changePeriodFromISR(newPeriod);
// }

void setup()
{
 23fbb94:	b508      	push	{r3, lr}
	// In order to set a pin, you must tell Device OS that the pin is
	// an OUTPUT pin. This is often done from setup() since you only need
	// to do it once.
	(void)logHandler; // Does nothing, just to eliminate the unused variable warning

	BLE.on();
 23fbb96:	f002 fd83 	bl	23fe6a0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbb9a:	f002 fd9d 	bl	23fe6d8 <_ZNK8particle14BleLocalDevice2onEv>
	// pinMode(MY_LED, OUTPUT);
	pinMode(ledPin1G, OUTPUT_OPEN_DRAIN_PULLUP);
 23fbb9e:	4b10      	ldr	r3, [pc, #64]	; (23fbbe0 <setup+0x4c>)
 23fbba0:	2108      	movs	r1, #8
 23fbba2:	8818      	ldrh	r0, [r3, #0]
 23fbba4:	f003 fba0 	bl	23ff2e8 <pinMode>
	pinMode(ledPin1R, OUTPUT_OPEN_DRAIN_PULLUP);
 23fbba8:	4b0e      	ldr	r3, [pc, #56]	; (23fbbe4 <setup+0x50>)
 23fbbaa:	2108      	movs	r1, #8
 23fbbac:	8818      	ldrh	r0, [r3, #0]
 23fbbae:	f003 fb9b 	bl	23ff2e8 <pinMode>
	pinMode(ledPin2G, OUTPUT_OPEN_DRAIN_PULLUP);
 23fbbb2:	4b0d      	ldr	r3, [pc, #52]	; (23fbbe8 <setup+0x54>)
 23fbbb4:	2108      	movs	r1, #8
 23fbbb6:	8818      	ldrh	r0, [r3, #0]
 23fbbb8:	f003 fb96 	bl	23ff2e8 <pinMode>
	pinMode(ledPin2R, OUTPUT_OPEN_DRAIN_PULLUP);
 23fbbbc:	4b0b      	ldr	r3, [pc, #44]	; (23fbbec <setup+0x58>)
 23fbbbe:	2108      	movs	r1, #8
 23fbbc0:	8818      	ldrh	r0, [r3, #0]
 23fbbc2:	f003 fb91 	bl	23ff2e8 <pinMode>
	// pinMode(ledPin2, OUTPUT);
	pinMode(ledPinW, OUTPUT);
 23fbbc6:	4b0a      	ldr	r3, [pc, #40]	; (23fbbf0 <setup+0x5c>)
 23fbbc8:	2101      	movs	r1, #1
 23fbbca:	8818      	ldrh	r0, [r3, #0]
 23fbbcc:	f003 fb8c 	bl	23ff2e8 <pinMode>
	pinMode(buttonPin, INPUT_PULLDOWN);
 23fbbd0:	4b08      	ldr	r3, [pc, #32]	; (23fbbf4 <setup+0x60>)
 23fbbd2:	2103      	movs	r1, #3
 23fbbd4:	8818      	ldrh	r0, [r3, #0]

	// timer.start();
}
 23fbbd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pinMode(buttonPin, INPUT_PULLDOWN);
 23fbbda:	f003 bb85 	b.w	23ff2e8 <pinMode>
 23fbbde:	bf00      	nop
 23fbbe0:	1007ad58 	.word	0x1007ad58
 23fbbe4:	1007ad5c 	.word	0x1007ad5c
 23fbbe8:	1007ad60 	.word	0x1007ad60
 23fbbec:	1007ad64 	.word	0x1007ad64
 23fbbf0:	1007ad68 	.word	0x1007ad68
 23fbbf4:	1007ad50 	.word	0x1007ad50

023fbbf8 <loop>:

// The loop() method is called frequently.
void loop()
{
 23fbbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	a = !a;
 23fbbfc:	4c8c      	ldr	r4, [pc, #560]	; (23fbe30 <loop+0x238>)
{
 23fbbfe:	b08c      	sub	sp, #48	; 0x30
	a = !a;
 23fbc00:	6823      	ldr	r3, [r4, #0]
 23fbc02:	fab3 f383 	clz	r3, r3
 23fbc06:	095b      	lsrs	r3, r3, #5
 23fbc08:	6023      	str	r3, [r4, #0]
	// POTENTIOMETER AND WHITE LED
	potentiometer = analogRead(analogPin4);
 23fbc0a:	4b8a      	ldr	r3, [pc, #552]	; (23fbe34 <loop+0x23c>)
 23fbc0c:	8818      	ldrh	r0, [r3, #0]
 23fbc0e:	f003 fba8 	bl	23ff362 <analogRead>
 23fbc12:	4b89      	ldr	r3, [pc, #548]	; (23fbe38 <loop+0x240>)
	if (potentiometer < 200){
 23fbc14:	28c7      	cmp	r0, #199	; 0xc7
	potentiometer = analogRead(analogPin4);
 23fbc16:	6018      	str	r0, [r3, #0]
	if (potentiometer < 200){
 23fbc18:	f340 80c6 	ble.w	23fbda8 <loop+0x1b0>
		duty_cycle = 0;
	} else{
		duty_cycle = (potentiometer-200)/15.278;
 23fbc1c:	38c8      	subs	r0, #200	; 0xc8
 23fbc1e:	f7ff fc3d 	bl	23fb49c <__aeabi_i2d>
 23fbc22:	a37b      	add	r3, pc, #492	; (adr r3, 23fbe10 <loop+0x218>)
 23fbc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc28:	f7ff fdcc 	bl	23fb7c4 <__aeabi_ddiv>
 23fbc2c:	f7ff feb2 	bl	23fb994 <__aeabi_d2iz>
 23fbc30:	4601      	mov	r1, r0
 23fbc32:	4b82      	ldr	r3, [pc, #520]	; (23fbe3c <loop+0x244>)
	}
	analogWrite(ledPinW,duty_cycle);

	// READING
	movement = analogRead(analogPin);
 23fbc34:	4e82      	ldr	r6, [pc, #520]	; (23fbe40 <loop+0x248>)
 23fbc36:	6019      	str	r1, [r3, #0]
	analogWrite(ledPinW,duty_cycle);
 23fbc38:	4b82      	ldr	r3, [pc, #520]	; (23fbe44 <loop+0x24c>)
	lux_array[0] = lux;
	sum = 0;
	for (i=0;i < 5;i++) {
		sum = sum + lux_array[i];
	}
	lux_avg = sum/5;
 23fbc3a:	f8df 825c 	ldr.w	r8, [pc, #604]	; 23fbe98 <loop+0x2a0>
	analogWrite(ledPinW,duty_cycle);
 23fbc3e:	8818      	ldrh	r0, [r3, #0]
 23fbc40:	f003 fba1 	bl	23ff386 <_Z11analogWritetm>
	movement = analogRead(analogPin);
 23fbc44:	4b80      	ldr	r3, [pc, #512]	; (23fbe48 <loop+0x250>)
 23fbc46:	4d81      	ldr	r5, [pc, #516]	; (23fbe4c <loop+0x254>)
 23fbc48:	8818      	ldrh	r0, [r3, #0]
 23fbc4a:	f003 fb8a 	bl	23ff362 <analogRead>
	adc_lux = analogRead(analogPin2);
 23fbc4e:	4b80      	ldr	r3, [pc, #512]	; (23fbe50 <loop+0x258>)
	movement = analogRead(analogPin);
 23fbc50:	8030      	strh	r0, [r6, #0]
	adc_lux = analogRead(analogPin2);
 23fbc52:	8818      	ldrh	r0, [r3, #0]
 23fbc54:	f003 fb85 	bl	23ff362 <analogRead>
 23fbc58:	4b7e      	ldr	r3, [pc, #504]	; (23fbe54 <loop+0x25c>)
 23fbc5a:	6018      	str	r0, [r3, #0]
	float lux = -206.2*adc_lux/4096*3.3+473.43;
 23fbc5c:	f7ff fc1e 	bl	23fb49c <__aeabi_i2d>
 23fbc60:	a36d      	add	r3, pc, #436	; (adr r3, 23fbe18 <loop+0x220>)
 23fbc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc66:	f7ff fc83 	bl	23fb570 <__aeabi_dmul>
 23fbc6a:	2200      	movs	r2, #0
 23fbc6c:	4b7a      	ldr	r3, [pc, #488]	; (23fbe58 <loop+0x260>)
 23fbc6e:	f7ff fc7f 	bl	23fb570 <__aeabi_dmul>
 23fbc72:	a36b      	add	r3, pc, #428	; (adr r3, 23fbe20 <loop+0x228>)
 23fbc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc78:	f7ff fc7a 	bl	23fb570 <__aeabi_dmul>
 23fbc7c:	a36a      	add	r3, pc, #424	; (adr r3, 23fbe28 <loop+0x230>)
 23fbc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fbc82:	f7ff fabf 	bl	23fb204 <__adddf3>
 23fbc86:	f7ff fead 	bl	23fb9e4 <__aeabi_d2f>
		sum = sum + lux_array[i];
 23fbc8a:	eddf 7a74 	vldr	s15, [pc, #464]	; 23fbe5c <loop+0x264>
	float lux = -206.2*adc_lux/4096*3.3+473.43;
 23fbc8e:	ee07 0a10 	vmov	s14, r0
		lux_array[i+1] = lux_array[i];
 23fbc92:	4b73      	ldr	r3, [pc, #460]	; (23fbe60 <loop+0x268>)
		sum = sum + lux_array[i];
 23fbc94:	ee77 7a27 	vadd.f32	s15, s14, s15
		lux_array[i+1] = lux_array[i];
 23fbc98:	edd3 6a00 	vldr	s13, [r3]
		sum = sum + lux_array[i];
 23fbc9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23fbca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23fbca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23fbca8:	2205      	movs	r2, #5
 23fbcaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
		lux_array[i+1] = lux_array[i];
 23fbcae:	edc3 6a01 	vstr	s13, [r3, #4]
 23fbcb2:	edc3 6a02 	vstr	s13, [r3, #8]
 23fbcb6:	edc3 6a03 	vstr	s13, [r3, #12]
 23fbcba:	edc3 6a04 	vstr	s13, [r3, #16]
	lux_avg = sum/5;
 23fbcbe:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
	lux_array[0] = lux;
 23fbcc2:	6018      	str	r0, [r3, #0]
	for (i=0;i < 5;i++) {
 23fbcc4:	4b67      	ldr	r3, [pc, #412]	; (23fbe64 <loop+0x26c>)
	lux_avg = sum/5;
 23fbcc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23fbcca:	601a      	str	r2, [r3, #0]
 23fbccc:	4b66      	ldr	r3, [pc, #408]	; (23fbe68 <loop+0x270>)
 23fbcce:	ed88 7a00 	vstr	s14, [r8]
 23fbcd2:	edc3 7a00 	vstr	s15, [r3]
	// LED 2
	if ((lux_avg > 20)&(movement > 2000)){
 23fbcd6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 23fbcda:	eeb4 7a67 	vcmp.f32	s14, s15
 23fbcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fbce2:	8832      	ldrh	r2, [r6, #0]
 23fbce4:	4b61      	ldr	r3, [pc, #388]	; (23fbe6c <loop+0x274>)
 23fbce6:	dd61      	ble.n	23fbdac <loop+0x1b4>
 23fbce8:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 23fbcec:	d963      	bls.n	23fbdb6 <loop+0x1be>
			led2 = G2;
 23fbcee:	2200      	movs	r2, #0
	//timer 60s
	timer = 5*60;
	} else if (movement > 2000) {
			led2 = R2;
 23fbcf0:	702a      	strb	r2, [r5, #0]
	//timer 60s
	timer = 5*60;
 23fbcf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 23fbcf6:	601a      	str	r2, [r3, #0]
	} else if (timer <=0) {
		led2 = OFF;
	}

	// BUTTON LED OPERATION
	buttonPin = digitalRead(D5);
 23fbcf8:	2005      	movs	r0, #5
 23fbcfa:	f003 fb1f 	bl	23ff33c <digitalRead>
 23fbcfe:	4b5c      	ldr	r3, [pc, #368]	; (23fbe70 <loop+0x278>)
	// Log.info("%d", debounce);
	if (debounce <=  0) {
 23fbd00:	4a5c      	ldr	r2, [pc, #368]	; (23fbe74 <loop+0x27c>)
	buttonPin = digitalRead(D5);
 23fbd02:	6018      	str	r0, [r3, #0]
	if (debounce <=  0) {
 23fbd04:	6813      	ldr	r3, [r2, #0]
 23fbd06:	4f5c      	ldr	r7, [pc, #368]	; (23fbe78 <loop+0x280>)
 23fbd08:	2b00      	cmp	r3, #0
 23fbd0a:	dc5a      	bgt.n	23fbdc2 <loop+0x1ca>
		if (buttonPin == 1) {
 23fbd0c:	2801      	cmp	r0, #1
 23fbd0e:	d106      	bne.n	23fbd1e <loop+0x126>
			if (led1 == G1) {
 23fbd10:	783b      	ldrb	r3, [r7, #0]
 23fbd12:	fab3 f383 	clz	r3, r3
 23fbd16:	095b      	lsrs	r3, r3, #5
 23fbd18:	703b      	strb	r3, [r7, #0]
				led1 = R1;
			} else {
				led1 = G1;
			}
			debounce = 10;
 23fbd1a:	230a      	movs	r3, #10
		}
	} else {
		debounce--;  
 23fbd1c:	6013      	str	r3, [r2, #0]
	// 16-bit: Company ID (0xffff)
	// Byte: Internal packet identifier (0x55)
	// 32-bit: Color code

	// Company ID (0xffff internal use/testing)
	buf[offset++] = 0xab;
 23fbd1e:	23ab      	movs	r3, #171	; 0xab
 23fbd20:	f88d 3010 	strb.w	r3, [sp, #16]
	buf[offset++] = 0xcd;
 23fbd24:	23cd      	movs	r3, #205	; 0xcd
 23fbd26:	f88d 3011 	strb.w	r3, [sp, #17]

	// Internal packet type. This is arbitrary, but provides an extra
	// check to make sure the data is my data, since we use the 0xffff company
	// code.
	buf[offset++] = 0x33;
 23fbd2a:	2333      	movs	r3, #51	; 0x33
	Log.info("lux = {%f}",lux_avg);
 23fbd2c:	f8d8 0000 	ldr.w	r0, [r8]
	buf[offset++] = 0x33;
 23fbd30:	f88d 3012 	strb.w	r3, [sp, #18]
	Log.info("lux = {%f}",lux_avg);
 23fbd34:	f7ff fbc4 	bl	23fb4c0 <__aeabi_f2d>
 23fbd38:	460b      	mov	r3, r1
 23fbd3a:	4602      	mov	r2, r0
 23fbd3c:	494f      	ldr	r1, [pc, #316]	; (23fbe7c <loop+0x284>)
 23fbd3e:	4850      	ldr	r0, [pc, #320]	; (23fbe80 <loop+0x288>)
 23fbd40:	f7ff ff10 	bl	23fbb64 <_ZNK5spark6Logger4infoEPKcz>
	Log.info("movement = {%d}",movement);
 23fbd44:	8832      	ldrh	r2, [r6, #0]
 23fbd46:	494f      	ldr	r1, [pc, #316]	; (23fbe84 <loop+0x28c>)
 23fbd48:	484d      	ldr	r0, [pc, #308]	; (23fbe80 <loop+0x288>)
 23fbd4a:	f7ff ff0b 	bl	23fbb64 <_ZNK5spark6Logger4infoEPKcz>
	// Our specific data, color code
	// float* pf = &lux_avg;
	memcpy(&buf[offset], &lux_avg, 4);
 23fbd4e:	f8d8 3000 	ldr.w	r3, [r8]
	// Log.info("pf = {%f}",pf);
	offset += 4;
	memcpy(&buf[offset], &movement, 2); 
	offset += 2;

	BleAdvertisingData advData;
 23fbd52:	a801      	add	r0, sp, #4
	memcpy(&buf[offset], &lux_avg, 4);
 23fbd54:	f8cd 3013 	str.w	r3, [sp, #19]
	memcpy(&buf[offset], &movement, 2); 
 23fbd58:	8833      	ldrh	r3, [r6, #0]
 23fbd5a:	f8ad 3017 	strh.w	r3, [sp, #23]
	BleAdvertisingData advData;
 23fbd5e:	f002 fe2f 	bl	23fe9c0 <_ZN8particle18BleAdvertisingDataC1Ev>
	advData.appendCustomData(buf, offset);
 23fbd62:	2300      	movs	r3, #0
 23fbd64:	2209      	movs	r2, #9
 23fbd66:	a904      	add	r1, sp, #16
 23fbd68:	a801      	add	r0, sp, #4
 23fbd6a:	f002 fe3c 	bl	23fe9e6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>

	// Advertise every 100 milliseconds. Unit is 0.625 millisecond intervals.
	BLE.setAdvertisingInterval(160);
 23fbd6e:	f002 fc97 	bl	23fe6a0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbd72:	21a0      	movs	r1, #160	; 0xa0
 23fbd74:	f002 fcb7 	bl	23fe6e6 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>

	// Continuously advertise
	BLE.advertise(&advData);
 23fbd78:	f002 fc92 	bl	23fe6a0 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbd7c:	a901      	add	r1, sp, #4
 23fbd7e:	2200      	movs	r2, #0
 23fbd80:	f002 fd0e 	bl	23fe7a0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
	
	switch(led1){
 23fbd84:	7839      	ldrb	r1, [r7, #0]
 23fbd86:	b1f1      	cbz	r1, 23fbdc6 <loop+0x1ce>
 23fbd88:	2901      	cmp	r1, #1
 23fbd8a:	d027      	beq.n	23fbddc <loop+0x1e4>
		// flashing red
		digitalWrite(ledPin1G,1);
		digitalWrite(ledPin1R,a);
		break;
	};
	switch(led2){
 23fbd8c:	7829      	ldrb	r1, [r5, #0]
 23fbd8e:	2901      	cmp	r1, #1
 23fbd90:	d02a      	beq.n	23fbde8 <loop+0x1f0>
 23fbd92:	2902      	cmp	r1, #2
 23fbd94:	d03a      	beq.n	23fbe0c <loop+0x214>
 23fbd96:	2900      	cmp	r1, #0
 23fbd98:	d12f      	bne.n	23fbdfa <loop+0x202>
	case G2:
		// flashing green
		digitalWrite(ledPin2G,a);
 23fbd9a:	7821      	ldrb	r1, [r4, #0]
		// flashing red
		digitalWrite(ledPin2G,1);
		digitalWrite(ledPin2R,a);
		break;
	case OFF:
		digitalWrite(ledPin2G,1);
 23fbd9c:	4b3a      	ldr	r3, [pc, #232]	; (23fbe88 <loop+0x290>)
 23fbd9e:	8818      	ldrh	r0, [r3, #0]
 23fbda0:	f003 fab3 	bl	23ff30a <digitalWrite>
		digitalWrite(ledPin2R,1);
 23fbda4:	2101      	movs	r1, #1
 23fbda6:	e024      	b.n	23fbdf2 <loop+0x1fa>
		duty_cycle = 0;
 23fbda8:	2100      	movs	r1, #0
 23fbdaa:	e742      	b.n	23fbc32 <loop+0x3a>
	} else if (movement > 2000) {
 23fbdac:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 23fbdb0:	d901      	bls.n	23fbdb6 <loop+0x1be>
			led2 = R2;
 23fbdb2:	2201      	movs	r2, #1
 23fbdb4:	e79c      	b.n	23fbcf0 <loop+0xf8>
	} else if (timer <=0) {
 23fbdb6:	681b      	ldr	r3, [r3, #0]
 23fbdb8:	2b00      	cmp	r3, #0
		led2 = OFF;
 23fbdba:	bfdc      	itt	le
 23fbdbc:	2302      	movle	r3, #2
 23fbdbe:	702b      	strble	r3, [r5, #0]
 23fbdc0:	e79a      	b.n	23fbcf8 <loop+0x100>
		debounce--;  
 23fbdc2:	3b01      	subs	r3, #1
 23fbdc4:	e7aa      	b.n	23fbd1c <loop+0x124>
		digitalWrite(ledPin1G,a);
 23fbdc6:	4b31      	ldr	r3, [pc, #196]	; (23fbe8c <loop+0x294>)
 23fbdc8:	7821      	ldrb	r1, [r4, #0]
 23fbdca:	8818      	ldrh	r0, [r3, #0]
 23fbdcc:	f003 fa9d 	bl	23ff30a <digitalWrite>
		digitalWrite(ledPin1R,1);
 23fbdd0:	2101      	movs	r1, #1
		digitalWrite(ledPin1R,a);
 23fbdd2:	4b2f      	ldr	r3, [pc, #188]	; (23fbe90 <loop+0x298>)
 23fbdd4:	8818      	ldrh	r0, [r3, #0]
 23fbdd6:	f003 fa98 	bl	23ff30a <digitalWrite>
		break;
 23fbdda:	e7d7      	b.n	23fbd8c <loop+0x194>
		digitalWrite(ledPin1G,1);
 23fbddc:	4b2b      	ldr	r3, [pc, #172]	; (23fbe8c <loop+0x294>)
 23fbdde:	8818      	ldrh	r0, [r3, #0]
 23fbde0:	f003 fa93 	bl	23ff30a <digitalWrite>
		digitalWrite(ledPin1R,a);
 23fbde4:	7821      	ldrb	r1, [r4, #0]
 23fbde6:	e7f4      	b.n	23fbdd2 <loop+0x1da>
		digitalWrite(ledPin2G,1);
 23fbde8:	4b27      	ldr	r3, [pc, #156]	; (23fbe88 <loop+0x290>)
 23fbdea:	8818      	ldrh	r0, [r3, #0]
 23fbdec:	f003 fa8d 	bl	23ff30a <digitalWrite>
		digitalWrite(ledPin2R,a);
 23fbdf0:	7821      	ldrb	r1, [r4, #0]
		digitalWrite(ledPin2R,1);
 23fbdf2:	4b28      	ldr	r3, [pc, #160]	; (23fbe94 <loop+0x29c>)
 23fbdf4:	8818      	ldrh	r0, [r3, #0]
 23fbdf6:	f003 fa88 	bl	23ff30a <digitalWrite>
	// 	digitalWrite(ledPin1G,1);
	// } else{
	// 	digitalWrite(ledPin1G,0);
	// }
	// Log.info("Green = %d, Red = %d",digitalRead(ledPin2G), digitalRead(ledPin2R));
	delay(200);
 23fbdfa:	20c8      	movs	r0, #200	; 0xc8
 23fbdfc:	f001 f9d9 	bl	23fd1b2 <delay>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fbe00:	9801      	ldr	r0, [sp, #4]
 23fbe02:	f000 fd3f 	bl	23fc884 <free>
	// And repeat! 
}
 23fbe06:	b00c      	add	sp, #48	; 0x30
 23fbe08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		digitalWrite(ledPin2G,1);
 23fbe0c:	2101      	movs	r1, #1
 23fbe0e:	e7c5      	b.n	23fbd9c <loop+0x1a4>
 23fbe10:	04189375 	.word	0x04189375
 23fbe14:	402e8e56 	.word	0x402e8e56
 23fbe18:	66666666 	.word	0x66666666
 23fbe1c:	c069c666 	.word	0xc069c666
 23fbe20:	66666666 	.word	0x66666666
 23fbe24:	400a6666 	.word	0x400a6666
 23fbe28:	47ae147b 	.word	0x47ae147b
 23fbe2c:	407d96e1 	.word	0x407d96e1
 23fbe30:	1007ade4 	.word	0x1007ade4
 23fbe34:	1007ad4c 	.word	0x1007ad4c
 23fbe38:	1007ae3c 	.word	0x1007ae3c
 23fbe3c:	1007adf0 	.word	0x1007adf0
 23fbe40:	1007ae38 	.word	0x1007ae38
 23fbe44:	1007ad68 	.word	0x1007ad68
 23fbe48:	1007ad44 	.word	0x1007ad44
 23fbe4c:	1007ad54 	.word	0x1007ad54
 23fbe50:	1007ad48 	.word	0x1007ad48
 23fbe54:	1007ade8 	.word	0x1007ade8
 23fbe58:	3f300000 	.word	0x3f300000
 23fbe5c:	00000000 	.word	0x00000000
 23fbe60:	1007ae20 	.word	0x1007ae20
 23fbe64:	1007adf4 	.word	0x1007adf4
 23fbe68:	1007ae40 	.word	0x1007ae40
 23fbe6c:	1007ad6c 	.word	0x1007ad6c
 23fbe70:	1007ad50 	.word	0x1007ad50
 23fbe74:	1007adec 	.word	0x1007adec
 23fbe78:	1007adf8 	.word	0x1007adf8
 23fbe7c:	023ff9b1 	.word	0x023ff9b1
 23fbe80:	1007ae94 	.word	0x1007ae94
 23fbe84:	023ff9bc 	.word	0x023ff9bc
 23fbe88:	1007ad60 	.word	0x1007ad60
 23fbe8c:	1007ad58 	.word	0x1007ad58
 23fbe90:	1007ad5c 	.word	0x1007ad5c
 23fbe94:	1007ad64 	.word	0x1007ad64
 23fbe98:	1007ae34 	.word	0x1007ae34

023fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbe9c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fbe9e:	2614      	movs	r6, #20
 23fbea0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbea4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbea6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fbeaa:	42ae      	cmp	r6, r5
 23fbeac:	d004      	beq.n	23fbeb8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fbeae:	4628      	mov	r0, r5
 23fbeb0:	f003 f850 	bl	23fef54 <_ZN6StringD1Ev>
 23fbeb4:	3514      	adds	r5, #20
 23fbeb6:	e7f8      	b.n	23fbeaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fbeb8:	6820      	ldr	r0, [r4, #0]
 23fbeba:	f000 fce3 	bl	23fc884 <free>
    AllocatorT::free(data_);
}
 23fbebe:	4620      	mov	r0, r4
 23fbec0:	bd70      	pop	{r4, r5, r6, pc}

023fbec2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fbec2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fbec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbec6:	4604      	mov	r4, r0
 23fbec8:	460d      	mov	r5, r1
 23fbeca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fbecc:	d916      	bls.n	23fbefc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fbece:	4290      	cmp	r0, r2
 23fbed0:	d215      	bcs.n	23fbefe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fbed2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fbed6:	1a75      	subs	r5, r6, r1
 23fbed8:	f1a1 0714 	sub.w	r7, r1, #20
 23fbedc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fbede:	42b7      	cmp	r7, r6
 23fbee0:	d01c      	beq.n	23fbf1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fbee2:	b12c      	cbz	r4, 23fbef0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fbee4:	4631      	mov	r1, r6
 23fbee6:	4620      	mov	r0, r4
 23fbee8:	f003 f89c 	bl	23ff024 <_ZN6StringC1EOS_>
 23fbeec:	7c33      	ldrb	r3, [r6, #16]
 23fbeee:	7423      	strb	r3, [r4, #16]
 23fbef0:	4630      	mov	r0, r6
 23fbef2:	f003 f82f 	bl	23fef54 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fbef6:	3e14      	subs	r6, #20
 23fbef8:	3c14      	subs	r4, #20
 23fbefa:	e7f0      	b.n	23fbede <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fbefc:	d00e      	beq.n	23fbf1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fbefe:	42b5      	cmp	r5, r6
 23fbf00:	d00c      	beq.n	23fbf1c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fbf02:	b12c      	cbz	r4, 23fbf10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fbf04:	4629      	mov	r1, r5
 23fbf06:	4620      	mov	r0, r4
 23fbf08:	f003 f88c 	bl	23ff024 <_ZN6StringC1EOS_>
 23fbf0c:	7c2b      	ldrb	r3, [r5, #16]
 23fbf0e:	7423      	strb	r3, [r4, #16]
 23fbf10:	4628      	mov	r0, r5
 23fbf12:	f003 f81f 	bl	23fef54 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fbf16:	3514      	adds	r5, #20
 23fbf18:	3414      	adds	r4, #20
 23fbf1a:	e7f0      	b.n	23fbefe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fbf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fbf1e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fbf24:	e9c0 3300 	strd	r3, r3, [r0]
 23fbf28:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf2a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf2c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf2e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fbf30:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fbf32:	dd24      	ble.n	23fbf7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fbf34:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fbf38:	fb08 f007 	mul.w	r0, r8, r7
 23fbf3c:	f000 fc94 	bl	23fc868 <malloc>
            if (!d) {
 23fbf40:	4605      	mov	r5, r0
 23fbf42:	b1e0      	cbz	r0, 23fbf7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fbf44:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fbf48:	fb08 1202 	mla	r2, r8, r2, r1
 23fbf4c:	f7ff ffb9 	bl	23fbec2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fbf50:	6820      	ldr	r0, [r4, #0]
 23fbf52:	f000 fc97 	bl	23fc884 <free>
        data_ = d;
 23fbf56:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fbf58:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fbf5a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fbf5e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fbf62:	45b8      	cmp	r8, r7
 23fbf64:	d009      	beq.n	23fbf7a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fbf66:	4639      	mov	r1, r7
 23fbf68:	4628      	mov	r0, r5
 23fbf6a:	f003 f875 	bl	23ff058 <_ZN6StringC1ERKS_>
 23fbf6e:	7c3b      	ldrb	r3, [r7, #16]
 23fbf70:	3514      	adds	r5, #20
 23fbf72:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fbf76:	3714      	adds	r7, #20
 23fbf78:	e7f3      	b.n	23fbf62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fbf7a:	6873      	ldr	r3, [r6, #4]
 23fbf7c:	6063      	str	r3, [r4, #4]
}
 23fbf7e:	4620      	mov	r0, r4
 23fbf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fbf84 <_GLOBAL__sub_I_ledPin1G>:
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 23fbf84:	b5f0      	push	{r4, r5, r6, r7, lr}
        capacity_(0) {
 23fbf86:	2500      	movs	r5, #0
 23fbf88:	b08d      	sub	sp, #52	; 0x34
 23fbf8a:	e9cd 5500 	strd	r5, r5, [sp]
 23fbf8e:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fbf90:	f001 f86a 	bl	23fd068 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fbf94:	4c1c      	ldr	r4, [pc, #112]	; (23fc008 <_GLOBAL__sub_I_ledPin1G+0x84>)
 23fbf96:	4606      	mov	r6, r0
 23fbf98:	4627      	mov	r7, r4
 23fbf9a:	4669      	mov	r1, sp
 23fbf9c:	a803      	add	r0, sp, #12
 23fbf9e:	f7ff ffbe 	bl	23fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fbfa2:	a903      	add	r1, sp, #12
 23fbfa4:	a806      	add	r0, sp, #24
 23fbfa6:	f7ff ffba 	bl	23fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fbfaa:	4b18      	ldr	r3, [pc, #96]	; (23fc00c <_GLOBAL__sub_I_ledPin1G+0x88>)
 23fbfac:	a906      	add	r1, sp, #24
 23fbfae:	f847 3b04 	str.w	r3, [r7], #4
 23fbfb2:	a809      	add	r0, sp, #36	; 0x24
 23fbfb4:	f7ff ffb3 	bl	23fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fbfb8:	aa09      	add	r2, sp, #36	; 0x24
 23fbfba:	211e      	movs	r1, #30
 23fbfbc:	4638      	mov	r0, r7
 23fbfbe:	f001 fe69 	bl	23fdc94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fbfc2:	a809      	add	r0, sp, #36	; 0x24
 23fbfc4:	f7ff ff6a 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fbfc8:	a806      	add	r0, sp, #24
 23fbfca:	f7ff ff67 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fbfce:	4b10      	ldr	r3, [pc, #64]	; (23fc010 <_GLOBAL__sub_I_ledPin1G+0x8c>)
 23fbfd0:	a803      	add	r0, sp, #12
 23fbfd2:	6023      	str	r3, [r4, #0]
 23fbfd4:	6226      	str	r6, [r4, #32]
 23fbfd6:	f7ff ff61 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fbfda:	4b0e      	ldr	r3, [pc, #56]	; (23fc014 <_GLOBAL__sub_I_ledPin1G+0x90>)
 23fbfdc:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fbfde:	f001 f843 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fbfe2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fbfe6:	f001 f82f 	bl	23fd048 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fbfea:	f001 fb25 	bl	23fd638 <_ZN5spark10LogManager8instanceEv>
 23fbfee:	4621      	mov	r1, r4
 23fbff0:	f001 fd28 	bl	23fda44 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
 23fbff4:	4668      	mov	r0, sp
 23fbff6:	f7ff ff51 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED);
 23fbffa:	4629      	mov	r1, r5
 23fbffc:	2001      	movs	r0, #1
 23fbffe:	b00d      	add	sp, #52	; 0x34
 23fc000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
 23fc004:	f000 bc06 	b.w	23fc814 <system_thread_set_state>
 23fc008:	1007adfc 	.word	0x1007adfc
 23fc00c:	023ff9d4 	.word	0x023ff9d4
 23fc010:	023ffba4 	.word	0x023ffba4
 23fc014:	023ff9ec 	.word	0x023ff9ec

023fc018 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fc018:	b509      	push	{r0, r3, lr}
 23fc01a:	4804      	ldr	r0, [pc, #16]	; (23fc02c <HAL_USB_USART_Init+0x14>)
 23fc01c:	6800      	ldr	r0, [r0, #0]
 23fc01e:	4b04      	ldr	r3, [pc, #16]	; (23fc030 <HAL_USB_USART_Init+0x18>)
 23fc020:	4403      	add	r3, r0
 23fc022:	681b      	ldr	r3, [r3, #0]
 23fc024:	681b      	ldr	r3, [r3, #0]
 23fc026:	9302      	str	r3, [sp, #8]
 23fc028:	bd09      	pop	{r0, r3, pc}
 23fc02a:	0000      	.short	0x0000
 23fc02c:	1007ad40 	.word	0x1007ad40
 23fc030:	00000034 	.word	0x00000034

023fc034 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fc034:	b509      	push	{r0, r3, lr}
 23fc036:	4804      	ldr	r0, [pc, #16]	; (23fc048 <HAL_USB_USART_Begin+0x14>)
 23fc038:	6800      	ldr	r0, [r0, #0]
 23fc03a:	4b04      	ldr	r3, [pc, #16]	; (23fc04c <HAL_USB_USART_Begin+0x18>)
 23fc03c:	4403      	add	r3, r0
 23fc03e:	681b      	ldr	r3, [r3, #0]
 23fc040:	685b      	ldr	r3, [r3, #4]
 23fc042:	9302      	str	r3, [sp, #8]
 23fc044:	bd09      	pop	{r0, r3, pc}
 23fc046:	0000      	.short	0x0000
 23fc048:	1007ad40 	.word	0x1007ad40
 23fc04c:	00000034 	.word	0x00000034

023fc050 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fc050:	b509      	push	{r0, r3, lr}
 23fc052:	4804      	ldr	r0, [pc, #16]	; (23fc064 <HAL_USB_USART_End+0x14>)
 23fc054:	6800      	ldr	r0, [r0, #0]
 23fc056:	4b04      	ldr	r3, [pc, #16]	; (23fc068 <HAL_USB_USART_End+0x18>)
 23fc058:	4403      	add	r3, r0
 23fc05a:	681b      	ldr	r3, [r3, #0]
 23fc05c:	689b      	ldr	r3, [r3, #8]
 23fc05e:	9302      	str	r3, [sp, #8]
 23fc060:	bd09      	pop	{r0, r3, pc}
 23fc062:	0000      	.short	0x0000
 23fc064:	1007ad40 	.word	0x1007ad40
 23fc068:	00000034 	.word	0x00000034

023fc06c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fc06c:	b509      	push	{r0, r3, lr}
 23fc06e:	4804      	ldr	r0, [pc, #16]	; (23fc080 <HAL_USB_USART_Available_Data+0x14>)
 23fc070:	6800      	ldr	r0, [r0, #0]
 23fc072:	4b04      	ldr	r3, [pc, #16]	; (23fc084 <HAL_USB_USART_Available_Data+0x18>)
 23fc074:	4403      	add	r3, r0
 23fc076:	681b      	ldr	r3, [r3, #0]
 23fc078:	691b      	ldr	r3, [r3, #16]
 23fc07a:	9302      	str	r3, [sp, #8]
 23fc07c:	bd09      	pop	{r0, r3, pc}
 23fc07e:	0000      	.short	0x0000
 23fc080:	1007ad40 	.word	0x1007ad40
 23fc084:	00000034 	.word	0x00000034

023fc088 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fc088:	b509      	push	{r0, r3, lr}
 23fc08a:	4804      	ldr	r0, [pc, #16]	; (23fc09c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fc08c:	6800      	ldr	r0, [r0, #0]
 23fc08e:	4b04      	ldr	r3, [pc, #16]	; (23fc0a0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fc090:	4403      	add	r3, r0
 23fc092:	681b      	ldr	r3, [r3, #0]
 23fc094:	695b      	ldr	r3, [r3, #20]
 23fc096:	9302      	str	r3, [sp, #8]
 23fc098:	bd09      	pop	{r0, r3, pc}
 23fc09a:	0000      	.short	0x0000
 23fc09c:	1007ad40 	.word	0x1007ad40
 23fc0a0:	00000034 	.word	0x00000034

023fc0a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc0a4:	b509      	push	{r0, r3, lr}
 23fc0a6:	4804      	ldr	r0, [pc, #16]	; (23fc0b8 <HAL_USB_USART_Receive_Data+0x14>)
 23fc0a8:	6800      	ldr	r0, [r0, #0]
 23fc0aa:	4b04      	ldr	r3, [pc, #16]	; (23fc0bc <HAL_USB_USART_Receive_Data+0x18>)
 23fc0ac:	4403      	add	r3, r0
 23fc0ae:	681b      	ldr	r3, [r3, #0]
 23fc0b0:	699b      	ldr	r3, [r3, #24]
 23fc0b2:	9302      	str	r3, [sp, #8]
 23fc0b4:	bd09      	pop	{r0, r3, pc}
 23fc0b6:	0000      	.short	0x0000
 23fc0b8:	1007ad40 	.word	0x1007ad40
 23fc0bc:	00000034 	.word	0x00000034

023fc0c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fc0c0:	b509      	push	{r0, r3, lr}
 23fc0c2:	4804      	ldr	r0, [pc, #16]	; (23fc0d4 <HAL_USB_USART_Send_Data+0x14>)
 23fc0c4:	6800      	ldr	r0, [r0, #0]
 23fc0c6:	4b04      	ldr	r3, [pc, #16]	; (23fc0d8 <HAL_USB_USART_Send_Data+0x18>)
 23fc0c8:	4403      	add	r3, r0
 23fc0ca:	681b      	ldr	r3, [r3, #0]
 23fc0cc:	69db      	ldr	r3, [r3, #28]
 23fc0ce:	9302      	str	r3, [sp, #8]
 23fc0d0:	bd09      	pop	{r0, r3, pc}
 23fc0d2:	0000      	.short	0x0000
 23fc0d4:	1007ad40 	.word	0x1007ad40
 23fc0d8:	00000034 	.word	0x00000034

023fc0dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fc0dc:	b509      	push	{r0, r3, lr}
 23fc0de:	4804      	ldr	r0, [pc, #16]	; (23fc0f0 <HAL_USB_USART_Flush_Data+0x14>)
 23fc0e0:	6800      	ldr	r0, [r0, #0]
 23fc0e2:	4b04      	ldr	r3, [pc, #16]	; (23fc0f4 <HAL_USB_USART_Flush_Data+0x18>)
 23fc0e4:	4403      	add	r3, r0
 23fc0e6:	681b      	ldr	r3, [r3, #0]
 23fc0e8:	6a1b      	ldr	r3, [r3, #32]
 23fc0ea:	9302      	str	r3, [sp, #8]
 23fc0ec:	bd09      	pop	{r0, r3, pc}
 23fc0ee:	0000      	.short	0x0000
 23fc0f0:	1007ad40 	.word	0x1007ad40
 23fc0f4:	00000034 	.word	0x00000034

023fc0f8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fc0f8:	b509      	push	{r0, r3, lr}
 23fc0fa:	4804      	ldr	r0, [pc, #16]	; (23fc10c <hal_spi_init+0x14>)
 23fc0fc:	6800      	ldr	r0, [r0, #0]
 23fc0fe:	4b04      	ldr	r3, [pc, #16]	; (23fc110 <hal_spi_init+0x18>)
 23fc100:	4403      	add	r3, r0
 23fc102:	681b      	ldr	r3, [r3, #0]
 23fc104:	69db      	ldr	r3, [r3, #28]
 23fc106:	9302      	str	r3, [sp, #8]
 23fc108:	bd09      	pop	{r0, r3, pc}
 23fc10a:	0000      	.short	0x0000
 23fc10c:	1007ad40 	.word	0x1007ad40
 23fc110:	00000018 	.word	0x00000018

023fc114 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fc114:	b509      	push	{r0, r3, lr}
 23fc116:	4804      	ldr	r0, [pc, #16]	; (23fc128 <hal_spi_is_enabled+0x14>)
 23fc118:	6800      	ldr	r0, [r0, #0]
 23fc11a:	4b04      	ldr	r3, [pc, #16]	; (23fc12c <hal_spi_is_enabled+0x18>)
 23fc11c:	4403      	add	r3, r0
 23fc11e:	681b      	ldr	r3, [r3, #0]
 23fc120:	6a1b      	ldr	r3, [r3, #32]
 23fc122:	9302      	str	r3, [sp, #8]
 23fc124:	bd09      	pop	{r0, r3, pc}
 23fc126:	0000      	.short	0x0000
 23fc128:	1007ad40 	.word	0x1007ad40
 23fc12c:	00000018 	.word	0x00000018

023fc130 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fc130:	b509      	push	{r0, r3, lr}
 23fc132:	4804      	ldr	r0, [pc, #16]	; (23fc144 <hal_i2c_write+0x14>)
 23fc134:	6800      	ldr	r0, [r0, #0]
 23fc136:	4b04      	ldr	r3, [pc, #16]	; (23fc148 <hal_i2c_write+0x18>)
 23fc138:	4403      	add	r3, r0
 23fc13a:	681b      	ldr	r3, [r3, #0]
 23fc13c:	6a1b      	ldr	r3, [r3, #32]
 23fc13e:	9302      	str	r3, [sp, #8]
 23fc140:	bd09      	pop	{r0, r3, pc}
 23fc142:	0000      	.short	0x0000
 23fc144:	1007ad40 	.word	0x1007ad40
 23fc148:	00000010 	.word	0x00000010

023fc14c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fc14c:	b509      	push	{r0, r3, lr}
 23fc14e:	4804      	ldr	r0, [pc, #16]	; (23fc160 <hal_i2c_available+0x14>)
 23fc150:	6800      	ldr	r0, [r0, #0]
 23fc152:	4b04      	ldr	r3, [pc, #16]	; (23fc164 <hal_i2c_available+0x18>)
 23fc154:	4403      	add	r3, r0
 23fc156:	681b      	ldr	r3, [r3, #0]
 23fc158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc15a:	9302      	str	r3, [sp, #8]
 23fc15c:	bd09      	pop	{r0, r3, pc}
 23fc15e:	0000      	.short	0x0000
 23fc160:	1007ad40 	.word	0x1007ad40
 23fc164:	00000010 	.word	0x00000010

023fc168 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fc168:	b509      	push	{r0, r3, lr}
 23fc16a:	4804      	ldr	r0, [pc, #16]	; (23fc17c <hal_i2c_read+0x14>)
 23fc16c:	6800      	ldr	r0, [r0, #0]
 23fc16e:	4b04      	ldr	r3, [pc, #16]	; (23fc180 <hal_i2c_read+0x18>)
 23fc170:	4403      	add	r3, r0
 23fc172:	681b      	ldr	r3, [r3, #0]
 23fc174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc176:	9302      	str	r3, [sp, #8]
 23fc178:	bd09      	pop	{r0, r3, pc}
 23fc17a:	0000      	.short	0x0000
 23fc17c:	1007ad40 	.word	0x1007ad40
 23fc180:	00000010 	.word	0x00000010

023fc184 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fc184:	b509      	push	{r0, r3, lr}
 23fc186:	4804      	ldr	r0, [pc, #16]	; (23fc198 <hal_i2c_peek+0x14>)
 23fc188:	6800      	ldr	r0, [r0, #0]
 23fc18a:	4b04      	ldr	r3, [pc, #16]	; (23fc19c <hal_i2c_peek+0x18>)
 23fc18c:	4403      	add	r3, r0
 23fc18e:	681b      	ldr	r3, [r3, #0]
 23fc190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc192:	9302      	str	r3, [sp, #8]
 23fc194:	bd09      	pop	{r0, r3, pc}
 23fc196:	0000      	.short	0x0000
 23fc198:	1007ad40 	.word	0x1007ad40
 23fc19c:	00000010 	.word	0x00000010

023fc1a0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fc1a0:	b509      	push	{r0, r3, lr}
 23fc1a2:	4804      	ldr	r0, [pc, #16]	; (23fc1b4 <hal_i2c_flush+0x14>)
 23fc1a4:	6800      	ldr	r0, [r0, #0]
 23fc1a6:	4b04      	ldr	r3, [pc, #16]	; (23fc1b8 <hal_i2c_flush+0x18>)
 23fc1a8:	4403      	add	r3, r0
 23fc1aa:	681b      	ldr	r3, [r3, #0]
 23fc1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc1ae:	9302      	str	r3, [sp, #8]
 23fc1b0:	bd09      	pop	{r0, r3, pc}
 23fc1b2:	0000      	.short	0x0000
 23fc1b4:	1007ad40 	.word	0x1007ad40
 23fc1b8:	00000010 	.word	0x00000010

023fc1bc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fc1bc:	b509      	push	{r0, r3, lr}
 23fc1be:	4804      	ldr	r0, [pc, #16]	; (23fc1d0 <hal_i2c_is_enabled+0x14>)
 23fc1c0:	6800      	ldr	r0, [r0, #0]
 23fc1c2:	4b04      	ldr	r3, [pc, #16]	; (23fc1d4 <hal_i2c_is_enabled+0x18>)
 23fc1c4:	4403      	add	r3, r0
 23fc1c6:	681b      	ldr	r3, [r3, #0]
 23fc1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc1ca:	9302      	str	r3, [sp, #8]
 23fc1cc:	bd09      	pop	{r0, r3, pc}
 23fc1ce:	0000      	.short	0x0000
 23fc1d0:	1007ad40 	.word	0x1007ad40
 23fc1d4:	00000010 	.word	0x00000010

023fc1d8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fc1d8:	b509      	push	{r0, r3, lr}
 23fc1da:	4804      	ldr	r0, [pc, #16]	; (23fc1ec <hal_i2c_init+0x14>)
 23fc1dc:	6800      	ldr	r0, [r0, #0]
 23fc1de:	4b04      	ldr	r3, [pc, #16]	; (23fc1f0 <hal_i2c_init+0x18>)
 23fc1e0:	4403      	add	r3, r0
 23fc1e2:	681b      	ldr	r3, [r3, #0]
 23fc1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc1e6:	9302      	str	r3, [sp, #8]
 23fc1e8:	bd09      	pop	{r0, r3, pc}
 23fc1ea:	0000      	.short	0x0000
 23fc1ec:	1007ad40 	.word	0x1007ad40
 23fc1f0:	00000010 	.word	0x00000010

023fc1f4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fc1f4:	b509      	push	{r0, r3, lr}
 23fc1f6:	4804      	ldr	r0, [pc, #16]	; (23fc208 <hal_usart_end+0x14>)
 23fc1f8:	6800      	ldr	r0, [r0, #0]
 23fc1fa:	4b04      	ldr	r3, [pc, #16]	; (23fc20c <hal_usart_end+0x18>)
 23fc1fc:	4403      	add	r3, r0
 23fc1fe:	681b      	ldr	r3, [r3, #0]
 23fc200:	689b      	ldr	r3, [r3, #8]
 23fc202:	9302      	str	r3, [sp, #8]
 23fc204:	bd09      	pop	{r0, r3, pc}
 23fc206:	0000      	.short	0x0000
 23fc208:	1007ad40 	.word	0x1007ad40
 23fc20c:	00000024 	.word	0x00000024

023fc210 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fc210:	b509      	push	{r0, r3, lr}
 23fc212:	4804      	ldr	r0, [pc, #16]	; (23fc224 <hal_usart_write+0x14>)
 23fc214:	6800      	ldr	r0, [r0, #0]
 23fc216:	4b04      	ldr	r3, [pc, #16]	; (23fc228 <hal_usart_write+0x18>)
 23fc218:	4403      	add	r3, r0
 23fc21a:	681b      	ldr	r3, [r3, #0]
 23fc21c:	68db      	ldr	r3, [r3, #12]
 23fc21e:	9302      	str	r3, [sp, #8]
 23fc220:	bd09      	pop	{r0, r3, pc}
 23fc222:	0000      	.short	0x0000
 23fc224:	1007ad40 	.word	0x1007ad40
 23fc228:	00000024 	.word	0x00000024

023fc22c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fc22c:	b509      	push	{r0, r3, lr}
 23fc22e:	4804      	ldr	r0, [pc, #16]	; (23fc240 <hal_usart_available+0x14>)
 23fc230:	6800      	ldr	r0, [r0, #0]
 23fc232:	4b04      	ldr	r3, [pc, #16]	; (23fc244 <hal_usart_available+0x18>)
 23fc234:	4403      	add	r3, r0
 23fc236:	681b      	ldr	r3, [r3, #0]
 23fc238:	691b      	ldr	r3, [r3, #16]
 23fc23a:	9302      	str	r3, [sp, #8]
 23fc23c:	bd09      	pop	{r0, r3, pc}
 23fc23e:	0000      	.short	0x0000
 23fc240:	1007ad40 	.word	0x1007ad40
 23fc244:	00000024 	.word	0x00000024

023fc248 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fc248:	b509      	push	{r0, r3, lr}
 23fc24a:	4804      	ldr	r0, [pc, #16]	; (23fc25c <hal_usart_read+0x14>)
 23fc24c:	6800      	ldr	r0, [r0, #0]
 23fc24e:	4b04      	ldr	r3, [pc, #16]	; (23fc260 <hal_usart_read+0x18>)
 23fc250:	4403      	add	r3, r0
 23fc252:	681b      	ldr	r3, [r3, #0]
 23fc254:	695b      	ldr	r3, [r3, #20]
 23fc256:	9302      	str	r3, [sp, #8]
 23fc258:	bd09      	pop	{r0, r3, pc}
 23fc25a:	0000      	.short	0x0000
 23fc25c:	1007ad40 	.word	0x1007ad40
 23fc260:	00000024 	.word	0x00000024

023fc264 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fc264:	b509      	push	{r0, r3, lr}
 23fc266:	4804      	ldr	r0, [pc, #16]	; (23fc278 <hal_usart_peek+0x14>)
 23fc268:	6800      	ldr	r0, [r0, #0]
 23fc26a:	4b04      	ldr	r3, [pc, #16]	; (23fc27c <hal_usart_peek+0x18>)
 23fc26c:	4403      	add	r3, r0
 23fc26e:	681b      	ldr	r3, [r3, #0]
 23fc270:	699b      	ldr	r3, [r3, #24]
 23fc272:	9302      	str	r3, [sp, #8]
 23fc274:	bd09      	pop	{r0, r3, pc}
 23fc276:	0000      	.short	0x0000
 23fc278:	1007ad40 	.word	0x1007ad40
 23fc27c:	00000024 	.word	0x00000024

023fc280 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fc280:	b509      	push	{r0, r3, lr}
 23fc282:	4804      	ldr	r0, [pc, #16]	; (23fc294 <hal_usart_flush+0x14>)
 23fc284:	6800      	ldr	r0, [r0, #0]
 23fc286:	4b04      	ldr	r3, [pc, #16]	; (23fc298 <hal_usart_flush+0x18>)
 23fc288:	4403      	add	r3, r0
 23fc28a:	681b      	ldr	r3, [r3, #0]
 23fc28c:	69db      	ldr	r3, [r3, #28]
 23fc28e:	9302      	str	r3, [sp, #8]
 23fc290:	bd09      	pop	{r0, r3, pc}
 23fc292:	0000      	.short	0x0000
 23fc294:	1007ad40 	.word	0x1007ad40
 23fc298:	00000024 	.word	0x00000024

023fc29c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fc29c:	b509      	push	{r0, r3, lr}
 23fc29e:	4804      	ldr	r0, [pc, #16]	; (23fc2b0 <hal_usart_is_enabled+0x14>)
 23fc2a0:	6800      	ldr	r0, [r0, #0]
 23fc2a2:	4b04      	ldr	r3, [pc, #16]	; (23fc2b4 <hal_usart_is_enabled+0x18>)
 23fc2a4:	4403      	add	r3, r0
 23fc2a6:	681b      	ldr	r3, [r3, #0]
 23fc2a8:	6a1b      	ldr	r3, [r3, #32]
 23fc2aa:	9302      	str	r3, [sp, #8]
 23fc2ac:	bd09      	pop	{r0, r3, pc}
 23fc2ae:	0000      	.short	0x0000
 23fc2b0:	1007ad40 	.word	0x1007ad40
 23fc2b4:	00000024 	.word	0x00000024

023fc2b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fc2b8:	b509      	push	{r0, r3, lr}
 23fc2ba:	4804      	ldr	r0, [pc, #16]	; (23fc2cc <hal_usart_available_data_for_write+0x14>)
 23fc2bc:	6800      	ldr	r0, [r0, #0]
 23fc2be:	4b04      	ldr	r3, [pc, #16]	; (23fc2d0 <hal_usart_available_data_for_write+0x18>)
 23fc2c0:	4403      	add	r3, r0
 23fc2c2:	681b      	ldr	r3, [r3, #0]
 23fc2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc2c6:	9302      	str	r3, [sp, #8]
 23fc2c8:	bd09      	pop	{r0, r3, pc}
 23fc2ca:	0000      	.short	0x0000
 23fc2cc:	1007ad40 	.word	0x1007ad40
 23fc2d0:	00000024 	.word	0x00000024

023fc2d4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fc2d4:	b509      	push	{r0, r3, lr}
 23fc2d6:	4804      	ldr	r0, [pc, #16]	; (23fc2e8 <hal_usart_begin_config+0x14>)
 23fc2d8:	6800      	ldr	r0, [r0, #0]
 23fc2da:	4b04      	ldr	r3, [pc, #16]	; (23fc2ec <hal_usart_begin_config+0x18>)
 23fc2dc:	4403      	add	r3, r0
 23fc2de:	681b      	ldr	r3, [r3, #0]
 23fc2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc2e2:	9302      	str	r3, [sp, #8]
 23fc2e4:	bd09      	pop	{r0, r3, pc}
 23fc2e6:	0000      	.short	0x0000
 23fc2e8:	1007ad40 	.word	0x1007ad40
 23fc2ec:	00000024 	.word	0x00000024

023fc2f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fc2f0:	b509      	push	{r0, r3, lr}
 23fc2f2:	4804      	ldr	r0, [pc, #16]	; (23fc304 <hal_usart_init_ex+0x14>)
 23fc2f4:	6800      	ldr	r0, [r0, #0]
 23fc2f6:	4b04      	ldr	r3, [pc, #16]	; (23fc308 <hal_usart_init_ex+0x18>)
 23fc2f8:	4403      	add	r3, r0
 23fc2fa:	681b      	ldr	r3, [r3, #0]
 23fc2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc2fe:	9302      	str	r3, [sp, #8]
 23fc300:	bd09      	pop	{r0, r3, pc}
 23fc302:	0000      	.short	0x0000
 23fc304:	1007ad40 	.word	0x1007ad40
 23fc308:	00000024 	.word	0x00000024

023fc30c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fc30c:	b509      	push	{r0, r3, lr}
 23fc30e:	4804      	ldr	r0, [pc, #16]	; (23fc320 <inet_inet_ntop+0x14>)
 23fc310:	6800      	ldr	r0, [r0, #0]
 23fc312:	4b04      	ldr	r3, [pc, #16]	; (23fc324 <inet_inet_ntop+0x18>)
 23fc314:	4403      	add	r3, r0
 23fc316:	681b      	ldr	r3, [r3, #0]
 23fc318:	695b      	ldr	r3, [r3, #20]
 23fc31a:	9302      	str	r3, [sp, #8]
 23fc31c:	bd09      	pop	{r0, r3, pc}
 23fc31e:	0000      	.short	0x0000
 23fc320:	1007ad40 	.word	0x1007ad40
 23fc324:	0000004c 	.word	0x0000004c

023fc328 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fc328:	b509      	push	{r0, r3, lr}
 23fc32a:	4804      	ldr	r0, [pc, #16]	; (23fc33c <os_mutex_recursive_create+0x14>)
 23fc32c:	6800      	ldr	r0, [r0, #0]
 23fc32e:	4b04      	ldr	r3, [pc, #16]	; (23fc340 <os_mutex_recursive_create+0x18>)
 23fc330:	4403      	add	r3, r0
 23fc332:	681b      	ldr	r3, [r3, #0]
 23fc334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc336:	9302      	str	r3, [sp, #8]
 23fc338:	bd09      	pop	{r0, r3, pc}
 23fc33a:	0000      	.short	0x0000
 23fc33c:	1007ad40 	.word	0x1007ad40
 23fc340:	00000030 	.word	0x00000030

023fc344 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fc344:	b509      	push	{r0, r3, lr}
 23fc346:	4804      	ldr	r0, [pc, #16]	; (23fc358 <os_mutex_recursive_destroy+0x14>)
 23fc348:	6800      	ldr	r0, [r0, #0]
 23fc34a:	4b04      	ldr	r3, [pc, #16]	; (23fc35c <os_mutex_recursive_destroy+0x18>)
 23fc34c:	4403      	add	r3, r0
 23fc34e:	681b      	ldr	r3, [r3, #0]
 23fc350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc352:	9302      	str	r3, [sp, #8]
 23fc354:	bd09      	pop	{r0, r3, pc}
 23fc356:	0000      	.short	0x0000
 23fc358:	1007ad40 	.word	0x1007ad40
 23fc35c:	00000030 	.word	0x00000030

023fc360 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fc360:	b509      	push	{r0, r3, lr}
 23fc362:	4804      	ldr	r0, [pc, #16]	; (23fc374 <os_mutex_recursive_lock+0x14>)
 23fc364:	6800      	ldr	r0, [r0, #0]
 23fc366:	4b04      	ldr	r3, [pc, #16]	; (23fc378 <os_mutex_recursive_lock+0x18>)
 23fc368:	4403      	add	r3, r0
 23fc36a:	681b      	ldr	r3, [r3, #0]
 23fc36c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc36e:	9302      	str	r3, [sp, #8]
 23fc370:	bd09      	pop	{r0, r3, pc}
 23fc372:	0000      	.short	0x0000
 23fc374:	1007ad40 	.word	0x1007ad40
 23fc378:	00000030 	.word	0x00000030

023fc37c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fc37c:	b509      	push	{r0, r3, lr}
 23fc37e:	4804      	ldr	r0, [pc, #16]	; (23fc390 <os_mutex_recursive_unlock+0x14>)
 23fc380:	6800      	ldr	r0, [r0, #0]
 23fc382:	4b04      	ldr	r3, [pc, #16]	; (23fc394 <os_mutex_recursive_unlock+0x18>)
 23fc384:	4403      	add	r3, r0
 23fc386:	681b      	ldr	r3, [r3, #0]
 23fc388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc38a:	9302      	str	r3, [sp, #8]
 23fc38c:	bd09      	pop	{r0, r3, pc}
 23fc38e:	0000      	.short	0x0000
 23fc390:	1007ad40 	.word	0x1007ad40
 23fc394:	00000030 	.word	0x00000030

023fc398 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23fc398:	b509      	push	{r0, r3, lr}
 23fc39a:	4804      	ldr	r0, [pc, #16]	; (23fc3ac <hal_ble_stack_init+0x14>)
 23fc39c:	6800      	ldr	r0, [r0, #0]
 23fc39e:	4b04      	ldr	r3, [pc, #16]	; (23fc3b0 <hal_ble_stack_init+0x18>)
 23fc3a0:	4403      	add	r3, r0
 23fc3a2:	681b      	ldr	r3, [r3, #0]
 23fc3a4:	689b      	ldr	r3, [r3, #8]
 23fc3a6:	9302      	str	r3, [sp, #8]
 23fc3a8:	bd09      	pop	{r0, r3, pc}
 23fc3aa:	0000      	.short	0x0000
 23fc3ac:	1007ad40 	.word	0x1007ad40
 23fc3b0:	00000060 	.word	0x00000060

023fc3b4 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
 23fc3b4:	b509      	push	{r0, r3, lr}
 23fc3b6:	4804      	ldr	r0, [pc, #16]	; (23fc3c8 <hal_ble_gap_set_advertising_parameters+0x14>)
 23fc3b8:	6800      	ldr	r0, [r0, #0]
 23fc3ba:	4b04      	ldr	r3, [pc, #16]	; (23fc3cc <hal_ble_gap_set_advertising_parameters+0x18>)
 23fc3bc:	4403      	add	r3, r0
 23fc3be:	681b      	ldr	r3, [r3, #0]
 23fc3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fc3c2:	9302      	str	r3, [sp, #8]
 23fc3c4:	bd09      	pop	{r0, r3, pc}
 23fc3c6:	0000      	.short	0x0000
 23fc3c8:	1007ad40 	.word	0x1007ad40
 23fc3cc:	00000060 	.word	0x00000060

023fc3d0 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
 23fc3d0:	b509      	push	{r0, r3, lr}
 23fc3d2:	4804      	ldr	r0, [pc, #16]	; (23fc3e4 <hal_ble_gap_get_advertising_parameters+0x14>)
 23fc3d4:	6800      	ldr	r0, [r0, #0]
 23fc3d6:	4b04      	ldr	r3, [pc, #16]	; (23fc3e8 <hal_ble_gap_get_advertising_parameters+0x18>)
 23fc3d8:	4403      	add	r3, r0
 23fc3da:	681b      	ldr	r3, [r3, #0]
 23fc3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fc3de:	9302      	str	r3, [sp, #8]
 23fc3e0:	bd09      	pop	{r0, r3, pc}
 23fc3e2:	0000      	.short	0x0000
 23fc3e4:	1007ad40 	.word	0x1007ad40
 23fc3e8:	00000060 	.word	0x00000060

023fc3ec <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
 23fc3ec:	b509      	push	{r0, r3, lr}
 23fc3ee:	4804      	ldr	r0, [pc, #16]	; (23fc400 <hal_ble_gap_set_advertising_data+0x14>)
 23fc3f0:	6800      	ldr	r0, [r0, #0]
 23fc3f2:	4b04      	ldr	r3, [pc, #16]	; (23fc404 <hal_ble_gap_set_advertising_data+0x18>)
 23fc3f4:	4403      	add	r3, r0
 23fc3f6:	681b      	ldr	r3, [r3, #0]
 23fc3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc3fa:	9302      	str	r3, [sp, #8]
 23fc3fc:	bd09      	pop	{r0, r3, pc}
 23fc3fe:	0000      	.short	0x0000
 23fc400:	1007ad40 	.word	0x1007ad40
 23fc404:	00000060 	.word	0x00000060

023fc408 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
 23fc408:	b509      	push	{r0, r3, lr}
 23fc40a:	4804      	ldr	r0, [pc, #16]	; (23fc41c <hal_ble_gap_set_scan_response_data+0x14>)
 23fc40c:	6800      	ldr	r0, [r0, #0]
 23fc40e:	4b04      	ldr	r3, [pc, #16]	; (23fc420 <hal_ble_gap_set_scan_response_data+0x18>)
 23fc410:	4403      	add	r3, r0
 23fc412:	681b      	ldr	r3, [r3, #0]
 23fc414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fc416:	9302      	str	r3, [sp, #8]
 23fc418:	bd09      	pop	{r0, r3, pc}
 23fc41a:	0000      	.short	0x0000
 23fc41c:	1007ad40 	.word	0x1007ad40
 23fc420:	00000060 	.word	0x00000060

023fc424 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
 23fc424:	b509      	push	{r0, r3, lr}
 23fc426:	4804      	ldr	r0, [pc, #16]	; (23fc438 <hal_ble_gap_start_advertising+0x14>)
 23fc428:	6800      	ldr	r0, [r0, #0]
 23fc42a:	4b04      	ldr	r3, [pc, #16]	; (23fc43c <hal_ble_gap_start_advertising+0x18>)
 23fc42c:	4403      	add	r3, r0
 23fc42e:	681b      	ldr	r3, [r3, #0]
 23fc430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 23fc432:	9302      	str	r3, [sp, #8]
 23fc434:	bd09      	pop	{r0, r3, pc}
 23fc436:	0000      	.short	0x0000
 23fc438:	1007ad40 	.word	0x1007ad40
 23fc43c:	00000060 	.word	0x00000060

023fc440 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23fc440:	b509      	push	{r0, r3, lr}
 23fc442:	4804      	ldr	r0, [pc, #16]	; (23fc454 <hal_ble_gap_disconnect+0x14>)
 23fc444:	6800      	ldr	r0, [r0, #0]
 23fc446:	4b04      	ldr	r3, [pc, #16]	; (23fc458 <hal_ble_gap_disconnect+0x18>)
 23fc448:	4403      	add	r3, r0
 23fc44a:	681b      	ldr	r3, [r3, #0]
 23fc44c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fc450:	9302      	str	r3, [sp, #8]
 23fc452:	bd09      	pop	{r0, r3, pc}
 23fc454:	1007ad40 	.word	0x1007ad40
 23fc458:	00000060 	.word	0x00000060

023fc45c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23fc45c:	b509      	push	{r0, r3, lr}
 23fc45e:	4804      	ldr	r0, [pc, #16]	; (23fc470 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23fc460:	6800      	ldr	r0, [r0, #0]
 23fc462:	4b04      	ldr	r3, [pc, #16]	; (23fc474 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23fc464:	4403      	add	r3, r0
 23fc466:	681b      	ldr	r3, [r3, #0]
 23fc468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23fc46c:	9302      	str	r3, [sp, #8]
 23fc46e:	bd09      	pop	{r0, r3, pc}
 23fc470:	1007ad40 	.word	0x1007ad40
 23fc474:	00000060 	.word	0x00000060

023fc478 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc478:	b509      	push	{r0, r3, lr}
 23fc47a:	4804      	ldr	r0, [pc, #16]	; (23fc48c <HAL_RNG_GetRandomNumber+0x14>)
 23fc47c:	6800      	ldr	r0, [r0, #0]
 23fc47e:	4b04      	ldr	r3, [pc, #16]	; (23fc490 <HAL_RNG_GetRandomNumber+0x18>)
 23fc480:	4403      	add	r3, r0
 23fc482:	681b      	ldr	r3, [r3, #0]
 23fc484:	685b      	ldr	r3, [r3, #4]
 23fc486:	9302      	str	r3, [sp, #8]
 23fc488:	bd09      	pop	{r0, r3, pc}
 23fc48a:	0000      	.short	0x0000
 23fc48c:	1007ad40 	.word	0x1007ad40
 23fc490:	00000000 	.word	0x00000000

023fc494 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc494:	b509      	push	{r0, r3, lr}
 23fc496:	4804      	ldr	r0, [pc, #16]	; (23fc4a8 <HAL_Delay_Microseconds+0x14>)
 23fc498:	6800      	ldr	r0, [r0, #0]
 23fc49a:	4b04      	ldr	r3, [pc, #16]	; (23fc4ac <HAL_Delay_Microseconds+0x18>)
 23fc49c:	4403      	add	r3, r0
 23fc49e:	681b      	ldr	r3, [r3, #0]
 23fc4a0:	68db      	ldr	r3, [r3, #12]
 23fc4a2:	9302      	str	r3, [sp, #8]
 23fc4a4:	bd09      	pop	{r0, r3, pc}
 23fc4a6:	0000      	.short	0x0000
 23fc4a8:	1007ad40 	.word	0x1007ad40
 23fc4ac:	00000000 	.word	0x00000000

023fc4b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc4b0:	b509      	push	{r0, r3, lr}
 23fc4b2:	4804      	ldr	r0, [pc, #16]	; (23fc4c4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc4b4:	6800      	ldr	r0, [r0, #0]
 23fc4b6:	4b04      	ldr	r3, [pc, #16]	; (23fc4c8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc4b8:	4403      	add	r3, r0
 23fc4ba:	681b      	ldr	r3, [r3, #0]
 23fc4bc:	695b      	ldr	r3, [r3, #20]
 23fc4be:	9302      	str	r3, [sp, #8]
 23fc4c0:	bd09      	pop	{r0, r3, pc}
 23fc4c2:	0000      	.short	0x0000
 23fc4c4:	1007ad40 	.word	0x1007ad40
 23fc4c8:	00000000 	.word	0x00000000

023fc4cc <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fc4cc:	b509      	push	{r0, r3, lr}
 23fc4ce:	4804      	ldr	r0, [pc, #16]	; (23fc4e0 <hal_pin_validate_function+0x14>)
 23fc4d0:	6800      	ldr	r0, [r0, #0]
 23fc4d2:	4b04      	ldr	r3, [pc, #16]	; (23fc4e4 <hal_pin_validate_function+0x18>)
 23fc4d4:	4403      	add	r3, r0
 23fc4d6:	681b      	ldr	r3, [r3, #0]
 23fc4d8:	685b      	ldr	r3, [r3, #4]
 23fc4da:	9302      	str	r3, [sp, #8]
 23fc4dc:	bd09      	pop	{r0, r3, pc}
 23fc4de:	0000      	.short	0x0000
 23fc4e0:	1007ad40 	.word	0x1007ad40
 23fc4e4:	00000014 	.word	0x00000014

023fc4e8 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc4e8:	b509      	push	{r0, r3, lr}
 23fc4ea:	4804      	ldr	r0, [pc, #16]	; (23fc4fc <hal_gpio_mode+0x14>)
 23fc4ec:	6800      	ldr	r0, [r0, #0]
 23fc4ee:	4b04      	ldr	r3, [pc, #16]	; (23fc500 <hal_gpio_mode+0x18>)
 23fc4f0:	4403      	add	r3, r0
 23fc4f2:	681b      	ldr	r3, [r3, #0]
 23fc4f4:	689b      	ldr	r3, [r3, #8]
 23fc4f6:	9302      	str	r3, [sp, #8]
 23fc4f8:	bd09      	pop	{r0, r3, pc}
 23fc4fa:	0000      	.short	0x0000
 23fc4fc:	1007ad40 	.word	0x1007ad40
 23fc500:	00000014 	.word	0x00000014

023fc504 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc504:	b509      	push	{r0, r3, lr}
 23fc506:	4804      	ldr	r0, [pc, #16]	; (23fc518 <hal_gpio_get_mode+0x14>)
 23fc508:	6800      	ldr	r0, [r0, #0]
 23fc50a:	4b04      	ldr	r3, [pc, #16]	; (23fc51c <hal_gpio_get_mode+0x18>)
 23fc50c:	4403      	add	r3, r0
 23fc50e:	681b      	ldr	r3, [r3, #0]
 23fc510:	68db      	ldr	r3, [r3, #12]
 23fc512:	9302      	str	r3, [sp, #8]
 23fc514:	bd09      	pop	{r0, r3, pc}
 23fc516:	0000      	.short	0x0000
 23fc518:	1007ad40 	.word	0x1007ad40
 23fc51c:	00000014 	.word	0x00000014

023fc520 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc520:	b509      	push	{r0, r3, lr}
 23fc522:	4804      	ldr	r0, [pc, #16]	; (23fc534 <hal_gpio_write+0x14>)
 23fc524:	6800      	ldr	r0, [r0, #0]
 23fc526:	4b04      	ldr	r3, [pc, #16]	; (23fc538 <hal_gpio_write+0x18>)
 23fc528:	4403      	add	r3, r0
 23fc52a:	681b      	ldr	r3, [r3, #0]
 23fc52c:	691b      	ldr	r3, [r3, #16]
 23fc52e:	9302      	str	r3, [sp, #8]
 23fc530:	bd09      	pop	{r0, r3, pc}
 23fc532:	0000      	.short	0x0000
 23fc534:	1007ad40 	.word	0x1007ad40
 23fc538:	00000014 	.word	0x00000014

023fc53c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fc53c:	b509      	push	{r0, r3, lr}
 23fc53e:	4804      	ldr	r0, [pc, #16]	; (23fc550 <hal_gpio_read+0x14>)
 23fc540:	6800      	ldr	r0, [r0, #0]
 23fc542:	4b04      	ldr	r3, [pc, #16]	; (23fc554 <hal_gpio_read+0x18>)
 23fc544:	4403      	add	r3, r0
 23fc546:	681b      	ldr	r3, [r3, #0]
 23fc548:	695b      	ldr	r3, [r3, #20]
 23fc54a:	9302      	str	r3, [sp, #8]
 23fc54c:	bd09      	pop	{r0, r3, pc}
 23fc54e:	0000      	.short	0x0000
 23fc550:	1007ad40 	.word	0x1007ad40
 23fc554:	00000014 	.word	0x00000014

023fc558 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
 23fc558:	b509      	push	{r0, r3, lr}
 23fc55a:	4804      	ldr	r0, [pc, #16]	; (23fc56c <HAL_DAC_Write+0x14>)
 23fc55c:	6800      	ldr	r0, [r0, #0]
 23fc55e:	4b04      	ldr	r3, [pc, #16]	; (23fc570 <HAL_DAC_Write+0x18>)
 23fc560:	4403      	add	r3, r0
 23fc562:	681b      	ldr	r3, [r3, #0]
 23fc564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fc566:	9302      	str	r3, [sp, #8]
 23fc568:	bd09      	pop	{r0, r3, pc}
 23fc56a:	0000      	.short	0x0000
 23fc56c:	1007ad40 	.word	0x1007ad40
 23fc570:	00000014 	.word	0x00000014

023fc574 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fc574:	b509      	push	{r0, r3, lr}
 23fc576:	4804      	ldr	r0, [pc, #16]	; (23fc588 <hal_adc_read+0x14>)
 23fc578:	6800      	ldr	r0, [r0, #0]
 23fc57a:	4b04      	ldr	r3, [pc, #16]	; (23fc58c <hal_adc_read+0x18>)
 23fc57c:	4403      	add	r3, r0
 23fc57e:	681b      	ldr	r3, [r3, #0]
 23fc580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc582:	9302      	str	r3, [sp, #8]
 23fc584:	bd09      	pop	{r0, r3, pc}
 23fc586:	0000      	.short	0x0000
 23fc588:	1007ad40 	.word	0x1007ad40
 23fc58c:	00000014 	.word	0x00000014

023fc590 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 23fc590:	b509      	push	{r0, r3, lr}
 23fc592:	4804      	ldr	r0, [pc, #16]	; (23fc5a4 <hal_pwm_write_ext+0x14>)
 23fc594:	6800      	ldr	r0, [r0, #0]
 23fc596:	4b04      	ldr	r3, [pc, #16]	; (23fc5a8 <hal_pwm_write_ext+0x18>)
 23fc598:	4403      	add	r3, r0
 23fc59a:	681b      	ldr	r3, [r3, #0]
 23fc59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 23fc59e:	9302      	str	r3, [sp, #8]
 23fc5a0:	bd09      	pop	{r0, r3, pc}
 23fc5a2:	0000      	.short	0x0000
 23fc5a4:	1007ad40 	.word	0x1007ad40
 23fc5a8:	00000014 	.word	0x00000014

023fc5ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc5ac:	b509      	push	{r0, r3, lr}
 23fc5ae:	4804      	ldr	r0, [pc, #16]	; (23fc5c0 <netdb_freeaddrinfo+0x14>)
 23fc5b0:	6800      	ldr	r0, [r0, #0]
 23fc5b2:	4b04      	ldr	r3, [pc, #16]	; (23fc5c4 <netdb_freeaddrinfo+0x18>)
 23fc5b4:	4403      	add	r3, r0
 23fc5b6:	681b      	ldr	r3, [r3, #0]
 23fc5b8:	689b      	ldr	r3, [r3, #8]
 23fc5ba:	9302      	str	r3, [sp, #8]
 23fc5bc:	bd09      	pop	{r0, r3, pc}
 23fc5be:	0000      	.short	0x0000
 23fc5c0:	1007ad40 	.word	0x1007ad40
 23fc5c4:	00000050 	.word	0x00000050

023fc5c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc5c8:	b509      	push	{r0, r3, lr}
 23fc5ca:	4804      	ldr	r0, [pc, #16]	; (23fc5dc <netdb_getaddrinfo+0x14>)
 23fc5cc:	6800      	ldr	r0, [r0, #0]
 23fc5ce:	4b04      	ldr	r3, [pc, #16]	; (23fc5e0 <netdb_getaddrinfo+0x18>)
 23fc5d0:	4403      	add	r3, r0
 23fc5d2:	681b      	ldr	r3, [r3, #0]
 23fc5d4:	68db      	ldr	r3, [r3, #12]
 23fc5d6:	9302      	str	r3, [sp, #8]
 23fc5d8:	bd09      	pop	{r0, r3, pc}
 23fc5da:	0000      	.short	0x0000
 23fc5dc:	1007ad40 	.word	0x1007ad40
 23fc5e0:	00000050 	.word	0x00000050

023fc5e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc5e4:	b509      	push	{r0, r3, lr}
 23fc5e6:	4804      	ldr	r0, [pc, #16]	; (23fc5f8 <panic_+0x14>)
 23fc5e8:	6800      	ldr	r0, [r0, #0]
 23fc5ea:	4b04      	ldr	r3, [pc, #16]	; (23fc5fc <panic_+0x18>)
 23fc5ec:	4403      	add	r3, r0
 23fc5ee:	681b      	ldr	r3, [r3, #0]
 23fc5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc5f2:	9302      	str	r3, [sp, #8]
 23fc5f4:	bd09      	pop	{r0, r3, pc}
 23fc5f6:	0000      	.short	0x0000
 23fc5f8:	1007ad40 	.word	0x1007ad40
 23fc5fc:	00000048 	.word	0x00000048

023fc600 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fc600:	b509      	push	{r0, r3, lr}
 23fc602:	4804      	ldr	r0, [pc, #16]	; (23fc614 <log_message+0x14>)
 23fc604:	6800      	ldr	r0, [r0, #0]
 23fc606:	4b04      	ldr	r3, [pc, #16]	; (23fc618 <log_message+0x18>)
 23fc608:	4403      	add	r3, r0
 23fc60a:	681b      	ldr	r3, [r3, #0]
 23fc60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc60e:	9302      	str	r3, [sp, #8]
 23fc610:	bd09      	pop	{r0, r3, pc}
 23fc612:	0000      	.short	0x0000
 23fc614:	1007ad40 	.word	0x1007ad40
 23fc618:	00000048 	.word	0x00000048

023fc61c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fc61c:	b509      	push	{r0, r3, lr}
 23fc61e:	4804      	ldr	r0, [pc, #16]	; (23fc630 <log_message_v+0x14>)
 23fc620:	6800      	ldr	r0, [r0, #0]
 23fc622:	4b04      	ldr	r3, [pc, #16]	; (23fc634 <log_message_v+0x18>)
 23fc624:	4403      	add	r3, r0
 23fc626:	681b      	ldr	r3, [r3, #0]
 23fc628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fc62a:	9302      	str	r3, [sp, #8]
 23fc62c:	bd09      	pop	{r0, r3, pc}
 23fc62e:	0000      	.short	0x0000
 23fc630:	1007ad40 	.word	0x1007ad40
 23fc634:	00000048 	.word	0x00000048

023fc638 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fc638:	b509      	push	{r0, r3, lr}
 23fc63a:	4804      	ldr	r0, [pc, #16]	; (23fc64c <log_level_name+0x14>)
 23fc63c:	6800      	ldr	r0, [r0, #0]
 23fc63e:	4b04      	ldr	r3, [pc, #16]	; (23fc650 <log_level_name+0x18>)
 23fc640:	4403      	add	r3, r0
 23fc642:	681b      	ldr	r3, [r3, #0]
 23fc644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fc646:	9302      	str	r3, [sp, #8]
 23fc648:	bd09      	pop	{r0, r3, pc}
 23fc64a:	0000      	.short	0x0000
 23fc64c:	1007ad40 	.word	0x1007ad40
 23fc650:	00000048 	.word	0x00000048

023fc654 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fc654:	b509      	push	{r0, r3, lr}
 23fc656:	4804      	ldr	r0, [pc, #16]	; (23fc668 <log_set_callbacks+0x14>)
 23fc658:	6800      	ldr	r0, [r0, #0]
 23fc65a:	4b04      	ldr	r3, [pc, #16]	; (23fc66c <log_set_callbacks+0x18>)
 23fc65c:	4403      	add	r3, r0
 23fc65e:	681b      	ldr	r3, [r3, #0]
 23fc660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fc662:	9302      	str	r3, [sp, #8]
 23fc664:	bd09      	pop	{r0, r3, pc}
 23fc666:	0000      	.short	0x0000
 23fc668:	1007ad40 	.word	0x1007ad40
 23fc66c:	00000048 	.word	0x00000048

023fc670 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc670:	b509      	push	{r0, r3, lr}
 23fc672:	4804      	ldr	r0, [pc, #16]	; (23fc684 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc674:	6800      	ldr	r0, [r0, #0]
 23fc676:	4b04      	ldr	r3, [pc, #16]	; (23fc688 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc678:	4403      	add	r3, r0
 23fc67a:	681b      	ldr	r3, [r3, #0]
 23fc67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc67e:	9302      	str	r3, [sp, #8]
 23fc680:	bd09      	pop	{r0, r3, pc}
 23fc682:	0000      	.short	0x0000
 23fc684:	1007ad40 	.word	0x1007ad40
 23fc688:	0000002c 	.word	0x0000002c

023fc68c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc68c:	b509      	push	{r0, r3, lr}
 23fc68e:	4804      	ldr	r0, [pc, #16]	; (23fc6a0 <network_connect+0x14>)
 23fc690:	6800      	ldr	r0, [r0, #0]
 23fc692:	4b04      	ldr	r3, [pc, #16]	; (23fc6a4 <network_connect+0x18>)
 23fc694:	4403      	add	r3, r0
 23fc696:	681b      	ldr	r3, [r3, #0]
 23fc698:	685b      	ldr	r3, [r3, #4]
 23fc69a:	9302      	str	r3, [sp, #8]
 23fc69c:	bd09      	pop	{r0, r3, pc}
 23fc69e:	0000      	.short	0x0000
 23fc6a0:	1007ad40 	.word	0x1007ad40
 23fc6a4:	00000028 	.word	0x00000028

023fc6a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc6a8:	b509      	push	{r0, r3, lr}
 23fc6aa:	4804      	ldr	r0, [pc, #16]	; (23fc6bc <network_connecting+0x14>)
 23fc6ac:	6800      	ldr	r0, [r0, #0]
 23fc6ae:	4b04      	ldr	r3, [pc, #16]	; (23fc6c0 <network_connecting+0x18>)
 23fc6b0:	4403      	add	r3, r0
 23fc6b2:	681b      	ldr	r3, [r3, #0]
 23fc6b4:	689b      	ldr	r3, [r3, #8]
 23fc6b6:	9302      	str	r3, [sp, #8]
 23fc6b8:	bd09      	pop	{r0, r3, pc}
 23fc6ba:	0000      	.short	0x0000
 23fc6bc:	1007ad40 	.word	0x1007ad40
 23fc6c0:	00000028 	.word	0x00000028

023fc6c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc6c4:	b509      	push	{r0, r3, lr}
 23fc6c6:	4804      	ldr	r0, [pc, #16]	; (23fc6d8 <network_disconnect+0x14>)
 23fc6c8:	6800      	ldr	r0, [r0, #0]
 23fc6ca:	4b04      	ldr	r3, [pc, #16]	; (23fc6dc <network_disconnect+0x18>)
 23fc6cc:	4403      	add	r3, r0
 23fc6ce:	681b      	ldr	r3, [r3, #0]
 23fc6d0:	68db      	ldr	r3, [r3, #12]
 23fc6d2:	9302      	str	r3, [sp, #8]
 23fc6d4:	bd09      	pop	{r0, r3, pc}
 23fc6d6:	0000      	.short	0x0000
 23fc6d8:	1007ad40 	.word	0x1007ad40
 23fc6dc:	00000028 	.word	0x00000028

023fc6e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc6e0:	b509      	push	{r0, r3, lr}
 23fc6e2:	4804      	ldr	r0, [pc, #16]	; (23fc6f4 <network_ready+0x14>)
 23fc6e4:	6800      	ldr	r0, [r0, #0]
 23fc6e6:	4b04      	ldr	r3, [pc, #16]	; (23fc6f8 <network_ready+0x18>)
 23fc6e8:	4403      	add	r3, r0
 23fc6ea:	681b      	ldr	r3, [r3, #0]
 23fc6ec:	691b      	ldr	r3, [r3, #16]
 23fc6ee:	9302      	str	r3, [sp, #8]
 23fc6f0:	bd09      	pop	{r0, r3, pc}
 23fc6f2:	0000      	.short	0x0000
 23fc6f4:	1007ad40 	.word	0x1007ad40
 23fc6f8:	00000028 	.word	0x00000028

023fc6fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc6fc:	b509      	push	{r0, r3, lr}
 23fc6fe:	4804      	ldr	r0, [pc, #16]	; (23fc710 <network_on+0x14>)
 23fc700:	6800      	ldr	r0, [r0, #0]
 23fc702:	4b04      	ldr	r3, [pc, #16]	; (23fc714 <network_on+0x18>)
 23fc704:	4403      	add	r3, r0
 23fc706:	681b      	ldr	r3, [r3, #0]
 23fc708:	695b      	ldr	r3, [r3, #20]
 23fc70a:	9302      	str	r3, [sp, #8]
 23fc70c:	bd09      	pop	{r0, r3, pc}
 23fc70e:	0000      	.short	0x0000
 23fc710:	1007ad40 	.word	0x1007ad40
 23fc714:	00000028 	.word	0x00000028

023fc718 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc718:	b509      	push	{r0, r3, lr}
 23fc71a:	4804      	ldr	r0, [pc, #16]	; (23fc72c <network_off+0x14>)
 23fc71c:	6800      	ldr	r0, [r0, #0]
 23fc71e:	4b04      	ldr	r3, [pc, #16]	; (23fc730 <network_off+0x18>)
 23fc720:	4403      	add	r3, r0
 23fc722:	681b      	ldr	r3, [r3, #0]
 23fc724:	699b      	ldr	r3, [r3, #24]
 23fc726:	9302      	str	r3, [sp, #8]
 23fc728:	bd09      	pop	{r0, r3, pc}
 23fc72a:	0000      	.short	0x0000
 23fc72c:	1007ad40 	.word	0x1007ad40
 23fc730:	00000028 	.word	0x00000028

023fc734 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc734:	b509      	push	{r0, r3, lr}
 23fc736:	4804      	ldr	r0, [pc, #16]	; (23fc748 <network_listen+0x14>)
 23fc738:	6800      	ldr	r0, [r0, #0]
 23fc73a:	4b04      	ldr	r3, [pc, #16]	; (23fc74c <network_listen+0x18>)
 23fc73c:	4403      	add	r3, r0
 23fc73e:	681b      	ldr	r3, [r3, #0]
 23fc740:	69db      	ldr	r3, [r3, #28]
 23fc742:	9302      	str	r3, [sp, #8]
 23fc744:	bd09      	pop	{r0, r3, pc}
 23fc746:	0000      	.short	0x0000
 23fc748:	1007ad40 	.word	0x1007ad40
 23fc74c:	00000028 	.word	0x00000028

023fc750 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc750:	b509      	push	{r0, r3, lr}
 23fc752:	4804      	ldr	r0, [pc, #16]	; (23fc764 <network_listening+0x14>)
 23fc754:	6800      	ldr	r0, [r0, #0]
 23fc756:	4b04      	ldr	r3, [pc, #16]	; (23fc768 <network_listening+0x18>)
 23fc758:	4403      	add	r3, r0
 23fc75a:	681b      	ldr	r3, [r3, #0]
 23fc75c:	6a1b      	ldr	r3, [r3, #32]
 23fc75e:	9302      	str	r3, [sp, #8]
 23fc760:	bd09      	pop	{r0, r3, pc}
 23fc762:	0000      	.short	0x0000
 23fc764:	1007ad40 	.word	0x1007ad40
 23fc768:	00000028 	.word	0x00000028

023fc76c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc76c:	b509      	push	{r0, r3, lr}
 23fc76e:	4804      	ldr	r0, [pc, #16]	; (23fc780 <network_set_listen_timeout+0x14>)
 23fc770:	6800      	ldr	r0, [r0, #0]
 23fc772:	4b04      	ldr	r3, [pc, #16]	; (23fc784 <network_set_listen_timeout+0x18>)
 23fc774:	4403      	add	r3, r0
 23fc776:	681b      	ldr	r3, [r3, #0]
 23fc778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc77a:	9302      	str	r3, [sp, #8]
 23fc77c:	bd09      	pop	{r0, r3, pc}
 23fc77e:	0000      	.short	0x0000
 23fc780:	1007ad40 	.word	0x1007ad40
 23fc784:	00000028 	.word	0x00000028

023fc788 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc788:	b509      	push	{r0, r3, lr}
 23fc78a:	4804      	ldr	r0, [pc, #16]	; (23fc79c <network_get_listen_timeout+0x14>)
 23fc78c:	6800      	ldr	r0, [r0, #0]
 23fc78e:	4b04      	ldr	r3, [pc, #16]	; (23fc7a0 <network_get_listen_timeout+0x18>)
 23fc790:	4403      	add	r3, r0
 23fc792:	681b      	ldr	r3, [r3, #0]
 23fc794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc796:	9302      	str	r3, [sp, #8]
 23fc798:	bd09      	pop	{r0, r3, pc}
 23fc79a:	0000      	.short	0x0000
 23fc79c:	1007ad40 	.word	0x1007ad40
 23fc7a0:	00000028 	.word	0x00000028

023fc7a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc7a4:	b509      	push	{r0, r3, lr}
 23fc7a6:	4804      	ldr	r0, [pc, #16]	; (23fc7b8 <network_is_on+0x14>)
 23fc7a8:	6800      	ldr	r0, [r0, #0]
 23fc7aa:	4b04      	ldr	r3, [pc, #16]	; (23fc7bc <network_is_on+0x18>)
 23fc7ac:	4403      	add	r3, r0
 23fc7ae:	681b      	ldr	r3, [r3, #0]
 23fc7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc7b2:	9302      	str	r3, [sp, #8]
 23fc7b4:	bd09      	pop	{r0, r3, pc}
 23fc7b6:	0000      	.short	0x0000
 23fc7b8:	1007ad40 	.word	0x1007ad40
 23fc7bc:	00000028 	.word	0x00000028

023fc7c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc7c0:	b509      	push	{r0, r3, lr}
 23fc7c2:	4804      	ldr	r0, [pc, #16]	; (23fc7d4 <network_is_off+0x14>)
 23fc7c4:	6800      	ldr	r0, [r0, #0]
 23fc7c6:	4b04      	ldr	r3, [pc, #16]	; (23fc7d8 <network_is_off+0x18>)
 23fc7c8:	4403      	add	r3, r0
 23fc7ca:	681b      	ldr	r3, [r3, #0]
 23fc7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc7ce:	9302      	str	r3, [sp, #8]
 23fc7d0:	bd09      	pop	{r0, r3, pc}
 23fc7d2:	0000      	.short	0x0000
 23fc7d4:	1007ad40 	.word	0x1007ad40
 23fc7d8:	00000028 	.word	0x00000028

023fc7dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc7dc:	b509      	push	{r0, r3, lr}
 23fc7de:	4804      	ldr	r0, [pc, #16]	; (23fc7f0 <set_system_mode+0x14>)
 23fc7e0:	6800      	ldr	r0, [r0, #0]
 23fc7e2:	4b04      	ldr	r3, [pc, #16]	; (23fc7f4 <set_system_mode+0x18>)
 23fc7e4:	4403      	add	r3, r0
 23fc7e6:	681b      	ldr	r3, [r3, #0]
 23fc7e8:	685b      	ldr	r3, [r3, #4]
 23fc7ea:	9302      	str	r3, [sp, #8]
 23fc7ec:	bd09      	pop	{r0, r3, pc}
 23fc7ee:	0000      	.short	0x0000
 23fc7f0:	1007ad40 	.word	0x1007ad40
 23fc7f4:	00000008 	.word	0x00000008

023fc7f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fc7f8:	b509      	push	{r0, r3, lr}
 23fc7fa:	4804      	ldr	r0, [pc, #16]	; (23fc80c <system_delay_ms+0x14>)
 23fc7fc:	6800      	ldr	r0, [r0, #0]
 23fc7fe:	4b04      	ldr	r3, [pc, #16]	; (23fc810 <system_delay_ms+0x18>)
 23fc800:	4403      	add	r3, r0
 23fc802:	681b      	ldr	r3, [r3, #0]
 23fc804:	695b      	ldr	r3, [r3, #20]
 23fc806:	9302      	str	r3, [sp, #8]
 23fc808:	bd09      	pop	{r0, r3, pc}
 23fc80a:	0000      	.short	0x0000
 23fc80c:	1007ad40 	.word	0x1007ad40
 23fc810:	00000008 	.word	0x00000008

023fc814 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fc814:	b509      	push	{r0, r3, lr}
 23fc816:	4804      	ldr	r0, [pc, #16]	; (23fc828 <system_thread_set_state+0x14>)
 23fc818:	6800      	ldr	r0, [r0, #0]
 23fc81a:	4b04      	ldr	r3, [pc, #16]	; (23fc82c <system_thread_set_state+0x18>)
 23fc81c:	4403      	add	r3, r0
 23fc81e:	681b      	ldr	r3, [r3, #0]
 23fc820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc822:	9302      	str	r3, [sp, #8]
 23fc824:	bd09      	pop	{r0, r3, pc}
 23fc826:	0000      	.short	0x0000
 23fc828:	1007ad40 	.word	0x1007ad40
 23fc82c:	00000008 	.word	0x00000008

023fc830 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc830:	b509      	push	{r0, r3, lr}
 23fc832:	4804      	ldr	r0, [pc, #16]	; (23fc844 <system_ctrl_set_app_request_handler+0x14>)
 23fc834:	6800      	ldr	r0, [r0, #0]
 23fc836:	4b04      	ldr	r3, [pc, #16]	; (23fc848 <system_ctrl_set_app_request_handler+0x18>)
 23fc838:	4403      	add	r3, r0
 23fc83a:	681b      	ldr	r3, [r3, #0]
 23fc83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc840:	9302      	str	r3, [sp, #8]
 23fc842:	bd09      	pop	{r0, r3, pc}
 23fc844:	1007ad40 	.word	0x1007ad40
 23fc848:	00000008 	.word	0x00000008

023fc84c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc84c:	b509      	push	{r0, r3, lr}
 23fc84e:	4804      	ldr	r0, [pc, #16]	; (23fc860 <system_ctrl_set_result+0x14>)
 23fc850:	6800      	ldr	r0, [r0, #0]
 23fc852:	4b04      	ldr	r3, [pc, #16]	; (23fc864 <system_ctrl_set_result+0x18>)
 23fc854:	4403      	add	r3, r0
 23fc856:	681b      	ldr	r3, [r3, #0]
 23fc858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc85c:	9302      	str	r3, [sp, #8]
 23fc85e:	bd09      	pop	{r0, r3, pc}
 23fc860:	1007ad40 	.word	0x1007ad40
 23fc864:	00000008 	.word	0x00000008

023fc868 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc868:	b509      	push	{r0, r3, lr}
 23fc86a:	4804      	ldr	r0, [pc, #16]	; (23fc87c <malloc+0x14>)
 23fc86c:	6800      	ldr	r0, [r0, #0]
 23fc86e:	4b04      	ldr	r3, [pc, #16]	; (23fc880 <malloc+0x18>)
 23fc870:	4403      	add	r3, r0
 23fc872:	681b      	ldr	r3, [r3, #0]
 23fc874:	681b      	ldr	r3, [r3, #0]
 23fc876:	9302      	str	r3, [sp, #8]
 23fc878:	bd09      	pop	{r0, r3, pc}
 23fc87a:	0000      	.short	0x0000
 23fc87c:	1007ad40 	.word	0x1007ad40
 23fc880:	00000004 	.word	0x00000004

023fc884 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc884:	b509      	push	{r0, r3, lr}
 23fc886:	4804      	ldr	r0, [pc, #16]	; (23fc898 <free+0x14>)
 23fc888:	6800      	ldr	r0, [r0, #0]
 23fc88a:	4b04      	ldr	r3, [pc, #16]	; (23fc89c <free+0x18>)
 23fc88c:	4403      	add	r3, r0
 23fc88e:	681b      	ldr	r3, [r3, #0]
 23fc890:	685b      	ldr	r3, [r3, #4]
 23fc892:	9302      	str	r3, [sp, #8]
 23fc894:	bd09      	pop	{r0, r3, pc}
 23fc896:	0000      	.short	0x0000
 23fc898:	1007ad40 	.word	0x1007ad40
 23fc89c:	00000004 	.word	0x00000004

023fc8a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc8a0:	b509      	push	{r0, r3, lr}
 23fc8a2:	4804      	ldr	r0, [pc, #16]	; (23fc8b4 <realloc+0x14>)
 23fc8a4:	6800      	ldr	r0, [r0, #0]
 23fc8a6:	4b04      	ldr	r3, [pc, #16]	; (23fc8b8 <realloc+0x18>)
 23fc8a8:	4403      	add	r3, r0
 23fc8aa:	681b      	ldr	r3, [r3, #0]
 23fc8ac:	689b      	ldr	r3, [r3, #8]
 23fc8ae:	9302      	str	r3, [sp, #8]
 23fc8b0:	bd09      	pop	{r0, r3, pc}
 23fc8b2:	0000      	.short	0x0000
 23fc8b4:	1007ad40 	.word	0x1007ad40
 23fc8b8:	00000004 	.word	0x00000004

023fc8bc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc8bc:	b509      	push	{r0, r3, lr}
 23fc8be:	4804      	ldr	r0, [pc, #16]	; (23fc8d0 <vsnprintf+0x14>)
 23fc8c0:	6800      	ldr	r0, [r0, #0]
 23fc8c2:	4b04      	ldr	r3, [pc, #16]	; (23fc8d4 <vsnprintf+0x18>)
 23fc8c4:	4403      	add	r3, r0
 23fc8c6:	681b      	ldr	r3, [r3, #0]
 23fc8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc8ca:	9302      	str	r3, [sp, #8]
 23fc8cc:	bd09      	pop	{r0, r3, pc}
 23fc8ce:	0000      	.short	0x0000
 23fc8d0:	1007ad40 	.word	0x1007ad40
 23fc8d4:	00000004 	.word	0x00000004

023fc8d8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fc8d8:	b509      	push	{r0, r3, lr}
 23fc8da:	4804      	ldr	r0, [pc, #16]	; (23fc8ec <abort+0x14>)
 23fc8dc:	6800      	ldr	r0, [r0, #0]
 23fc8de:	4b04      	ldr	r3, [pc, #16]	; (23fc8f0 <abort+0x18>)
 23fc8e0:	4403      	add	r3, r0
 23fc8e2:	681b      	ldr	r3, [r3, #0]
 23fc8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc8e6:	9302      	str	r3, [sp, #8]
 23fc8e8:	bd09      	pop	{r0, r3, pc}
 23fc8ea:	0000      	.short	0x0000
 23fc8ec:	1007ad40 	.word	0x1007ad40
 23fc8f0:	00000004 	.word	0x00000004

023fc8f4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fc8f4:	b509      	push	{r0, r3, lr}
 23fc8f6:	4804      	ldr	r0, [pc, #16]	; (23fc908 <__errno+0x14>)
 23fc8f8:	6800      	ldr	r0, [r0, #0]
 23fc8fa:	4b04      	ldr	r3, [pc, #16]	; (23fc90c <__errno+0x18>)
 23fc8fc:	4403      	add	r3, r0
 23fc8fe:	681b      	ldr	r3, [r3, #0]
 23fc900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc902:	9302      	str	r3, [sp, #8]
 23fc904:	bd09      	pop	{r0, r3, pc}
 23fc906:	0000      	.short	0x0000
 23fc908:	1007ad40 	.word	0x1007ad40
 23fc90c:	00000004 	.word	0x00000004

023fc910 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc910:	b509      	push	{r0, r3, lr}
 23fc912:	4804      	ldr	r0, [pc, #16]	; (23fc924 <__assert_func+0x14>)
 23fc914:	6800      	ldr	r0, [r0, #0]
 23fc916:	4b04      	ldr	r3, [pc, #16]	; (23fc928 <__assert_func+0x18>)
 23fc918:	4403      	add	r3, r0
 23fc91a:	681b      	ldr	r3, [r3, #0]
 23fc91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc91e:	9302      	str	r3, [sp, #8]
 23fc920:	bd09      	pop	{r0, r3, pc}
 23fc922:	0000      	.short	0x0000
 23fc924:	1007ad40 	.word	0x1007ad40
 23fc928:	00000004 	.word	0x00000004

023fc92c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc92c:	b509      	push	{r0, r3, lr}
 23fc92e:	4804      	ldr	r0, [pc, #16]	; (23fc940 <newlib_impure_ptr_callback+0x14>)
 23fc930:	6800      	ldr	r0, [r0, #0]
 23fc932:	4b04      	ldr	r3, [pc, #16]	; (23fc944 <newlib_impure_ptr_callback+0x18>)
 23fc934:	4403      	add	r3, r0
 23fc936:	681b      	ldr	r3, [r3, #0]
 23fc938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc93a:	9302      	str	r3, [sp, #8]
 23fc93c:	bd09      	pop	{r0, r3, pc}
 23fc93e:	0000      	.short	0x0000
 23fc940:	1007ad40 	.word	0x1007ad40
 23fc944:	00000004 	.word	0x00000004

023fc948 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fc948:	2300      	movs	r3, #0
 23fc94a:	6840      	ldr	r0, [r0, #4]
 23fc94c:	461a      	mov	r2, r3
 23fc94e:	f7ff be9d 	b.w	23fc68c <network_connect>

023fc952 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fc952:	2200      	movs	r2, #0
 23fc954:	2102      	movs	r1, #2
 23fc956:	6840      	ldr	r0, [r0, #4]
 23fc958:	f7ff beb4 	b.w	23fc6c4 <network_disconnect>

023fc95c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fc95c:	2200      	movs	r2, #0
 23fc95e:	6840      	ldr	r0, [r0, #4]
 23fc960:	4611      	mov	r1, r2
 23fc962:	f7ff bea1 	b.w	23fc6a8 <network_connecting>

023fc966 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fc966:	2200      	movs	r2, #0
 23fc968:	6840      	ldr	r0, [r0, #4]
 23fc96a:	4611      	mov	r1, r2
 23fc96c:	f7ff beb8 	b.w	23fc6e0 <network_ready>

023fc970 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fc970:	2300      	movs	r3, #0
 23fc972:	6840      	ldr	r0, [r0, #4]
 23fc974:	461a      	mov	r2, r3
 23fc976:	4619      	mov	r1, r3
 23fc978:	f7ff bec0 	b.w	23fc6fc <network_on>

023fc97c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fc97c:	2300      	movs	r3, #0
 23fc97e:	6840      	ldr	r0, [r0, #4]
 23fc980:	461a      	mov	r2, r3
 23fc982:	4619      	mov	r1, r3
 23fc984:	f7ff bec8 	b.w	23fc718 <network_off>

023fc988 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fc988:	2100      	movs	r1, #0
 23fc98a:	6840      	ldr	r0, [r0, #4]
 23fc98c:	f7ff bf0a 	b.w	23fc7a4 <network_is_on>

023fc990 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fc990:	2100      	movs	r1, #0
 23fc992:	6840      	ldr	r0, [r0, #4]
 23fc994:	f7ff bf14 	b.w	23fc7c0 <network_is_off>

023fc998 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fc998:	2200      	movs	r2, #0
 23fc99a:	6840      	ldr	r0, [r0, #4]
 23fc99c:	f081 0101 	eor.w	r1, r1, #1
 23fc9a0:	f7ff bec8 	b.w	23fc734 <network_listen>

023fc9a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fc9a4:	2200      	movs	r2, #0
 23fc9a6:	6840      	ldr	r0, [r0, #4]
 23fc9a8:	f7ff bee0 	b.w	23fc76c <network_set_listen_timeout>

023fc9ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fc9ac:	2200      	movs	r2, #0
 23fc9ae:	6840      	ldr	r0, [r0, #4]
 23fc9b0:	4611      	mov	r1, r2
 23fc9b2:	f7ff bee9 	b.w	23fc788 <network_get_listen_timeout>

023fc9b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fc9b6:	2200      	movs	r2, #0
 23fc9b8:	6840      	ldr	r0, [r0, #4]
 23fc9ba:	4611      	mov	r1, r2
 23fc9bc:	f7ff bec8 	b.w	23fc750 <network_listening>

023fc9c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fc9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc9c4:	b095      	sub	sp, #84	; 0x54
 23fc9c6:	4614      	mov	r4, r2
 23fc9c8:	460d      	mov	r5, r1
 23fc9ca:	4607      	mov	r7, r0
    IPAddress addr;
 23fc9cc:	f000 fbaa 	bl	23fd124 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fc9d0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fc9d2:	221c      	movs	r2, #28
 23fc9d4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fc9d6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fc9d8:	f002 fe59 	bl	23ff68e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fc9dc:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc9de:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fc9e0:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc9e2:	2100      	movs	r1, #0
 23fc9e4:	466b      	mov	r3, sp
 23fc9e6:	aa0c      	add	r2, sp, #48	; 0x30
 23fc9e8:	f7ff fdee 	bl	23fc5c8 <netdb_getaddrinfo>
    if (!r) {
 23fc9ec:	4604      	mov	r4, r0
 23fc9ee:	2800      	cmp	r0, #0
 23fc9f0:	d14b      	bne.n	23fca8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc9f2:	4602      	mov	r2, r0
 23fc9f4:	2101      	movs	r1, #1
 23fc9f6:	6868      	ldr	r0, [r5, #4]
 23fc9f8:	f7ff fe72 	bl	23fc6e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc9fc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc9fe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fca00:	4622      	mov	r2, r4
 23fca02:	6868      	ldr	r0, [r5, #4]
 23fca04:	f7ff fe6c 	bl	23fc6e0 <network_ready>
        bool ok = false;
 23fca08:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fca0a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fca0c:	9e00      	ldr	r6, [sp, #0]
 23fca0e:	2e00      	cmp	r6, #0
 23fca10:	d03b      	beq.n	23fca8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fca12:	2900      	cmp	r1, #0
 23fca14:	d139      	bne.n	23fca8a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fca16:	6873      	ldr	r3, [r6, #4]
 23fca18:	2b02      	cmp	r3, #2
 23fca1a:	d003      	beq.n	23fca24 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fca1c:	2b0a      	cmp	r3, #10
 23fca1e:	d011      	beq.n	23fca44 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fca20:	69f6      	ldr	r6, [r6, #28]
 23fca22:	e7f4      	b.n	23fca0e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fca24:	f1b8 0f00 	cmp.w	r8, #0
 23fca28:	d0fa      	beq.n	23fca20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fca2a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fca2c:	a806      	add	r0, sp, #24
 23fca2e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fca30:	1d3c      	adds	r4, r7, #4
 23fca32:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fca34:	f000 fba4 	bl	23fd180 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fca38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fca3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fca3c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fca3e:	4641      	mov	r1, r8
 23fca40:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fca42:	e7ed      	b.n	23fca20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fca44:	f1b9 0f00 	cmp.w	r9, #0
 23fca48:	d0ea      	beq.n	23fca20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fca4a:	2210      	movs	r2, #16
 23fca4c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fca4e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fca50:	f002 fe1d 	bl	23ff68e <memset>
                    a.v = 6;
 23fca54:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fca56:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fca58:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fca5c:	f104 0308 	add.w	r3, r4, #8
 23fca60:	3418      	adds	r4, #24
 23fca62:	462a      	mov	r2, r5
 23fca64:	6818      	ldr	r0, [r3, #0]
 23fca66:	6859      	ldr	r1, [r3, #4]
 23fca68:	3308      	adds	r3, #8
 23fca6a:	c203      	stmia	r2!, {r0, r1}
 23fca6c:	42a3      	cmp	r3, r4
 23fca6e:	4615      	mov	r5, r2
 23fca70:	d1f7      	bne.n	23fca62 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fca72:	a901      	add	r1, sp, #4
 23fca74:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fca76:	1d3c      	adds	r4, r7, #4
 23fca78:	ad07      	add	r5, sp, #28
 23fca7a:	f000 fb61 	bl	23fd140 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fca7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fca80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fca82:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fca84:	4649      	mov	r1, r9
 23fca86:	7023      	strb	r3, [r4, #0]
                    break;
 23fca88:	e7ca      	b.n	23fca20 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fca8a:	9800      	ldr	r0, [sp, #0]
 23fca8c:	f7ff fd8e 	bl	23fc5ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fca90:	4638      	mov	r0, r7
 23fca92:	b015      	add	sp, #84	; 0x54
 23fca94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fca98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fca98:	4b02      	ldr	r3, [pc, #8]	; (23fcaa4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fca9a:	4a03      	ldr	r2, [pc, #12]	; (23fcaa8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fca9c:	601a      	str	r2, [r3, #0]
 23fca9e:	2200      	movs	r2, #0
 23fcaa0:	605a      	str	r2, [r3, #4]

} // spark
 23fcaa2:	4770      	bx	lr
 23fcaa4:	1007ae44 	.word	0x1007ae44
 23fcaa8:	023ffa04 	.word	0x023ffa04

023fcaac <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fcaac:	2200      	movs	r2, #0
 23fcaae:	6840      	ldr	r0, [r0, #4]
 23fcab0:	4611      	mov	r1, r2
 23fcab2:	f7ff be15 	b.w	23fc6e0 <network_ready>

023fcab6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcab6:	2200      	movs	r2, #0
 23fcab8:	6840      	ldr	r0, [r0, #4]
 23fcaba:	4611      	mov	r1, r2
 23fcabc:	f7ff be48 	b.w	23fc750 <network_listening>

023fcac0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcac0:	2200      	movs	r2, #0
 23fcac2:	6840      	ldr	r0, [r0, #4]
 23fcac4:	4611      	mov	r1, r2
 23fcac6:	f7ff be5f 	b.w	23fc788 <network_get_listen_timeout>

023fcaca <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcaca:	2200      	movs	r2, #0
 23fcacc:	6840      	ldr	r0, [r0, #4]
 23fcace:	f7ff be4d 	b.w	23fc76c <network_set_listen_timeout>

023fcad2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcad2:	2200      	movs	r2, #0
 23fcad4:	6840      	ldr	r0, [r0, #4]
 23fcad6:	f081 0101 	eor.w	r1, r1, #1
 23fcada:	f7ff be2b 	b.w	23fc734 <network_listen>

023fcade <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcade:	2300      	movs	r3, #0
 23fcae0:	6840      	ldr	r0, [r0, #4]
 23fcae2:	461a      	mov	r2, r3
 23fcae4:	4619      	mov	r1, r3
 23fcae6:	f7ff be17 	b.w	23fc718 <network_off>

023fcaea <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcaea:	2300      	movs	r3, #0
 23fcaec:	6840      	ldr	r0, [r0, #4]
 23fcaee:	461a      	mov	r2, r3
 23fcaf0:	4619      	mov	r1, r3
 23fcaf2:	f7ff be03 	b.w	23fc6fc <network_on>

023fcaf6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcaf6:	2200      	movs	r2, #0
 23fcaf8:	6840      	ldr	r0, [r0, #4]
 23fcafa:	4611      	mov	r1, r2
 23fcafc:	f7ff bdd4 	b.w	23fc6a8 <network_connecting>

023fcb00 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcb00:	2200      	movs	r2, #0
 23fcb02:	2102      	movs	r1, #2
 23fcb04:	6840      	ldr	r0, [r0, #4]
 23fcb06:	f7ff bddd 	b.w	23fc6c4 <network_disconnect>

023fcb0a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcb0a:	2300      	movs	r3, #0
 23fcb0c:	6840      	ldr	r0, [r0, #4]
 23fcb0e:	461a      	mov	r2, r3
 23fcb10:	f7ff bdbc 	b.w	23fc68c <network_connect>

023fcb14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fcb14:	2204      	movs	r2, #4
 23fcb16:	4b02      	ldr	r3, [pc, #8]	; (23fcb20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fcb18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fcb1a:	4a02      	ldr	r2, [pc, #8]	; (23fcb24 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fcb1c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fcb1e:	4770      	bx	lr
 23fcb20:	1007ae4c 	.word	0x1007ae4c
 23fcb24:	023ffa40 	.word	0x023ffa40

023fcb28 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fcb28:	4770      	bx	lr

023fcb2a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fcb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcb2c:	4606      	mov	r6, r0
 23fcb2e:	4615      	mov	r5, r2
 23fcb30:	460c      	mov	r4, r1
 23fcb32:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fcb34:	42bc      	cmp	r4, r7
 23fcb36:	d006      	beq.n	23fcb46 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fcb38:	6833      	ldr	r3, [r6, #0]
 23fcb3a:	4630      	mov	r0, r6
 23fcb3c:	689b      	ldr	r3, [r3, #8]
 23fcb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fcb42:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fcb44:	e7f6      	b.n	23fcb34 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fcb46:	4628      	mov	r0, r5
 23fcb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcb4a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fcb4a:	2200      	movs	r2, #0
 23fcb4c:	7c00      	ldrb	r0, [r0, #16]
 23fcb4e:	f7ff baef 	b.w	23fc130 <hal_i2c_write>

023fcb52 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fcb52:	2100      	movs	r1, #0
 23fcb54:	7c00      	ldrb	r0, [r0, #16]
 23fcb56:	f7ff baf9 	b.w	23fc14c <hal_i2c_available>

023fcb5a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fcb5a:	2100      	movs	r1, #0
 23fcb5c:	7c00      	ldrb	r0, [r0, #16]
 23fcb5e:	f7ff bb03 	b.w	23fc168 <hal_i2c_read>

023fcb62 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fcb62:	2100      	movs	r1, #0
 23fcb64:	7c00      	ldrb	r0, [r0, #16]
 23fcb66:	f7ff bb0d 	b.w	23fc184 <hal_i2c_peek>

023fcb6a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fcb6a:	2100      	movs	r1, #0
 23fcb6c:	7c00      	ldrb	r0, [r0, #16]
 23fcb6e:	f7ff bb17 	b.w	23fc1a0 <hal_i2c_flush>

023fcb72 <_ZN7TwoWireD0Ev>:
 23fcb72:	b510      	push	{r4, lr}
 23fcb74:	4604      	mov	r4, r0
 23fcb76:	2114      	movs	r1, #20
 23fcb78:	f7fe ffb7 	bl	23fbaea <_ZdlPvj>
 23fcb7c:	4620      	mov	r0, r4
 23fcb7e:	bd10      	pop	{r4, pc}

023fcb80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcb80:	b538      	push	{r3, r4, r5, lr}
 23fcb82:	4604      	mov	r4, r0
 23fcb84:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fcb86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fcb8a:	2200      	movs	r2, #0
 23fcb8c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fcb90:	4b09      	ldr	r3, [pc, #36]	; (23fcbb8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fcb92:	4608      	mov	r0, r1
  _i2c = i2c;
 23fcb94:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fcb96:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fcb98:	4629      	mov	r1, r5
 23fcb9a:	f7ff fb1d 	bl	23fc1d8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcb9e:	30bf      	adds	r0, #191	; 0xbf
 23fcba0:	d108      	bne.n	23fcbb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fcba2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fcba4:	07db      	lsls	r3, r3, #31
 23fcba6:	d505      	bpl.n	23fcbb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fcba8:	6868      	ldr	r0, [r5, #4]
 23fcbaa:	f7ff fe6b 	bl	23fc884 <free>
    free(conf.tx_buffer);
 23fcbae:	68e8      	ldr	r0, [r5, #12]
 23fcbb0:	f7ff fe68 	bl	23fc884 <free>
}
 23fcbb4:	4620      	mov	r0, r4
 23fcbb6:	bd38      	pop	{r3, r4, r5, pc}
 23fcbb8:	023ffa84 	.word	0x023ffa84

023fcbbc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fcbbc:	2201      	movs	r2, #1
 23fcbbe:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fcbc2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fcbc6:	4618      	mov	r0, r3
 23fcbc8:	2901      	cmp	r1, #1
 23fcbca:	d108      	bne.n	23fcbde <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fcbcc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fcbd0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fcbd4:	3a01      	subs	r2, #1
 23fcbd6:	f103 0310 	add.w	r3, r3, #16
 23fcbda:	d1f2      	bne.n	23fcbc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fcbdc:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fcbde:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fcbe0:	bf04      	itt	eq
 23fcbe2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fcbe6:	1852      	addeq	r2, r2, r1
 23fcbe8:	e7f4      	b.n	23fcbd4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fcbea <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcbea:	b40e      	push	{r1, r2, r3}
 23fcbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcbee:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbf0:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fcbf2:	af00      	add	r7, sp, #0
 23fcbf4:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fcbf8:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcbfc:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcbfe:	462b      	mov	r3, r5
 23fcc00:	1878      	adds	r0, r7, r1
 23fcc02:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fcc04:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc06:	f7ff fe59 	bl	23fc8bc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fcc0a:	280f      	cmp	r0, #15
 23fcc0c:	687a      	ldr	r2, [r7, #4]
 23fcc0e:	d91a      	bls.n	23fcc46 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fcc10:	f100 0308 	add.w	r3, r0, #8
 23fcc14:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fcc18:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fcc1a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc1e:	1c41      	adds	r1, r0, #1
 23fcc20:	462b      	mov	r3, r5
 23fcc22:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fcc24:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcc26:	f7ff fe49 	bl	23fc8bc <vsnprintf>
        if (n > 0) {
 23fcc2a:	1e02      	subs	r2, r0, #0
 23fcc2c:	dd04      	ble.n	23fcc38 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fcc2e:	6823      	ldr	r3, [r4, #0]
 23fcc30:	4669      	mov	r1, sp
 23fcc32:	4620      	mov	r0, r4
 23fcc34:	689b      	ldr	r3, [r3, #8]
 23fcc36:	4798      	blx	r3
 23fcc38:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fcc3a:	3720      	adds	r7, #32
 23fcc3c:	46bd      	mov	sp, r7
 23fcc3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcc42:	b003      	add	sp, #12
 23fcc44:	4770      	bx	lr
    } else if (n > 0) {
 23fcc46:	2800      	cmp	r0, #0
 23fcc48:	d0f7      	beq.n	23fcc3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fcc4a:	6823      	ldr	r3, [r4, #0]
 23fcc4c:	4602      	mov	r2, r0
 23fcc4e:	689b      	ldr	r3, [r3, #8]
 23fcc50:	4620      	mov	r0, r4
 23fcc52:	f107 0110 	add.w	r1, r7, #16
 23fcc56:	4798      	blx	r3
}
 23fcc58:	e7ef      	b.n	23fcc3a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fcc5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fcc5a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fcc5c:	6843      	ldr	r3, [r0, #4]
    {
 23fcc5e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fcc60:	3b01      	subs	r3, #1
 23fcc62:	6043      	str	r3, [r0, #4]
 23fcc64:	b963      	cbnz	r3, 23fcc80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fcc66:	6803      	ldr	r3, [r0, #0]
 23fcc68:	689b      	ldr	r3, [r3, #8]
 23fcc6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fcc6c:	68a3      	ldr	r3, [r4, #8]
 23fcc6e:	3b01      	subs	r3, #1
 23fcc70:	60a3      	str	r3, [r4, #8]
 23fcc72:	b92b      	cbnz	r3, 23fcc80 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fcc74:	6823      	ldr	r3, [r4, #0]
 23fcc76:	4620      	mov	r0, r4
        }
    }
 23fcc78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fcc7c:	68db      	ldr	r3, [r3, #12]
 23fcc7e:	4718      	bx	r3
    }
 23fcc80:	bd10      	pop	{r4, pc}

023fcc82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcc82:	b538      	push	{r3, r4, r5, lr}
 23fcc84:	680b      	ldr	r3, [r1, #0]
 23fcc86:	4604      	mov	r4, r0
 23fcc88:	6003      	str	r3, [r0, #0]
 23fcc8a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fcc8c:	6843      	ldr	r3, [r0, #4]
 23fcc8e:	429d      	cmp	r5, r3
 23fcc90:	d008      	beq.n	23fcca4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fcc92:	b115      	cbz	r5, 23fcc9a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fcc94:	686b      	ldr	r3, [r5, #4]
 23fcc96:	3301      	adds	r3, #1
 23fcc98:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fcc9a:	6860      	ldr	r0, [r4, #4]
 23fcc9c:	b108      	cbz	r0, 23fcca2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fcc9e:	f7ff ffdc 	bl	23fcc5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fcca2:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fcca4:	bd38      	pop	{r3, r4, r5, pc}

023fcca6 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fcca6:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcca8:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fccaa:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fccae:	2201      	movs	r2, #1
 23fccb0:	689b      	ldr	r3, [r3, #8]
 23fccb2:	f10d 0107 	add.w	r1, sp, #7
 23fccb6:	4798      	blx	r3
}
 23fccb8:	b003      	add	sp, #12
 23fccba:	f85d fb04 	ldr.w	pc, [sp], #4

023fccbe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fccbe:	460b      	mov	r3, r1
 23fccc0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fccc2:	2200      	movs	r2, #0
 23fccc4:	b510      	push	{r4, lr}
 23fccc6:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fccc8:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fcccc:	6083      	str	r3, [r0, #8]
    if (t) {
 23fccce:	b90b      	cbnz	r3, 23fccd4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fccd0:	4620      	mov	r0, r4
 23fccd2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fccd4:	f7ff ffd5 	bl	23fcc82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fccd8:	e7fa      	b.n	23fccd0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fccda <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fccda:	6883      	ldr	r3, [r0, #8]
 23fccdc:	b1eb      	cbz	r3, 23fcd1a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fccde:	781a      	ldrb	r2, [r3, #0]
 23fcce0:	2a03      	cmp	r2, #3
 23fcce2:	d81a      	bhi.n	23fcd1a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fcce4:	e8df f002 	tbb	[pc, r2]
 23fcce8:	1b021704 	.word	0x1b021704
 23fccec:	2005      	movs	r0, #5
 23fccee:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fccf0:	6802      	ldr	r2, [r0, #0]
 23fccf2:	685b      	ldr	r3, [r3, #4]
 23fccf4:	6852      	ldr	r2, [r2, #4]
 23fccf6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fccf8:	282d      	cmp	r0, #45	; 0x2d
 23fccfa:	d012      	beq.n	23fcd22 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fccfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fcd00:	2b09      	cmp	r3, #9
 23fcd02:	d90e      	bls.n	23fcd22 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fcd04:	2874      	cmp	r0, #116	; 0x74
 23fcd06:	d00e      	beq.n	23fcd26 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fcd08:	2866      	cmp	r0, #102	; 0x66
 23fcd0a:	d00c      	beq.n	23fcd26 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fcd0c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fcd10:	4258      	negs	r0, r3
 23fcd12:	4158      	adcs	r0, r3
 23fcd14:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fcd16:	2006      	movs	r0, #6
 23fcd18:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fcd1a:	2000      	movs	r0, #0
 23fcd1c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fcd1e:	2004      	movs	r0, #4
 23fcd20:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fcd22:	2003      	movs	r0, #3
 23fcd24:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fcd26:	2002      	movs	r0, #2
}
 23fcd28:	4770      	bx	lr

023fcd2a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fcd2a:	b510      	push	{r4, lr}
 23fcd2c:	4604      	mov	r4, r0
    switch (type()) {
 23fcd2e:	f7ff ffd4 	bl	23fccda <_ZNK5spark9JSONValue4typeEv>
 23fcd32:	2802      	cmp	r0, #2
 23fcd34:	d00e      	beq.n	23fcd54 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fcd36:	1ec3      	subs	r3, r0, #3
 23fcd38:	b2db      	uxtb	r3, r3
 23fcd3a:	2b01      	cmp	r3, #1
 23fcd3c:	d814      	bhi.n	23fcd68 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fcd3e:	6822      	ldr	r2, [r4, #0]
 23fcd40:	68a3      	ldr	r3, [r4, #8]
 23fcd42:	6850      	ldr	r0, [r2, #4]
 23fcd44:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fcd46:	220a      	movs	r2, #10
}
 23fcd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fcd4c:	2100      	movs	r1, #0
 23fcd4e:	4418      	add	r0, r3
 23fcd50:	f002 bd9e 	b.w	23ff890 <strtol>
        const char* const s = d_->json + t_->start;
 23fcd54:	6822      	ldr	r2, [r4, #0]
 23fcd56:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fcd58:	6852      	ldr	r2, [r2, #4]
 23fcd5a:	685b      	ldr	r3, [r3, #4]
 23fcd5c:	5cd0      	ldrb	r0, [r2, r3]
 23fcd5e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fcd62:	4258      	negs	r0, r3
 23fcd64:	4158      	adcs	r0, r3
}
 23fcd66:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fcd68:	2000      	movs	r0, #0
 23fcd6a:	e7fc      	b.n	23fcd66 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fcd6c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcd6c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcd6e:	2300      	movs	r3, #0
 23fcd70:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcd72:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fcd76:	480e      	ldr	r0, [pc, #56]	; (23fcdb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fcd78:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fcd7c:	b1a9      	cbz	r1, 23fcdaa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fcd7e:	780b      	ldrb	r3, [r1, #0]
 23fcd80:	2b03      	cmp	r3, #3
 23fcd82:	d006      	beq.n	23fcd92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fcd84:	b98b      	cbnz	r3, 23fcdaa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fcd86:	6813      	ldr	r3, [r2, #0]
 23fcd88:	6858      	ldr	r0, [r3, #4]
 23fcd8a:	684b      	ldr	r3, [r1, #4]
 23fcd8c:	5cc3      	ldrb	r3, [r0, r3]
 23fcd8e:	2b6e      	cmp	r3, #110	; 0x6e
 23fcd90:	d007      	beq.n	23fcda2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fcd92:	6813      	ldr	r3, [r2, #0]
 23fcd94:	684d      	ldr	r5, [r1, #4]
 23fcd96:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fcd98:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fcd9a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fcd9c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fcd9e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fcda0:	60e3      	str	r3, [r4, #12]
 23fcda2:	4611      	mov	r1, r2
 23fcda4:	4620      	mov	r0, r4
 23fcda6:	f7ff ff6c 	bl	23fcc82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcdaa:	4620      	mov	r0, r4
 23fcdac:	bd38      	pop	{r3, r4, r5, pc}
 23fcdae:	bf00      	nop
 23fcdb0:	023ffb6a 	.word	0x023ffb6a

023fcdb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fcdb4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fcdb6:	2500      	movs	r5, #0
 23fcdb8:	460b      	mov	r3, r1
 23fcdba:	4604      	mov	r4, r0
 23fcdbc:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fcdbe:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fcdc2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fcdc6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fcdca:	b14b      	cbz	r3, 23fcde0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fcdcc:	781a      	ldrb	r2, [r3, #0]
 23fcdce:	2a01      	cmp	r2, #1
 23fcdd0:	d106      	bne.n	23fcde0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fcdd2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fcdd6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fcdd8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fcdda:	6143      	str	r3, [r0, #20]
 23fcddc:	f7ff ff51 	bl	23fcc82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fcde0:	4620      	mov	r0, r4
 23fcde2:	bd38      	pop	{r3, r4, r5, pc}

023fcde4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fcde4:	b510      	push	{r4, lr}
    if (!n_) {
 23fcde6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fcde8:	4604      	mov	r4, r0
    if (!n_) {
 23fcdea:	b163      	cbz	r3, 23fce06 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fcdec:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fcdee:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fcdf0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fcdf2:	3010      	adds	r0, #16
 23fcdf4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fcdf6:	6120      	str	r0, [r4, #16]
    --n_;
 23fcdf8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fcdfa:	b113      	cbz	r3, 23fce02 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fcdfc:	f7ff fede 	bl	23fcbbc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fce00:	60a0      	str	r0, [r4, #8]
    return true;
 23fce02:	2001      	movs	r0, #1
 23fce04:	e000      	b.n	23fce08 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fce06:	4618      	mov	r0, r3
}
 23fce08:	bd10      	pop	{r4, pc}

023fce0a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fce0a:	b510      	push	{r4, lr}
    write('}');
 23fce0c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fce0e:	4604      	mov	r4, r0
    write('}');
 23fce10:	f7ff ff49 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fce14:	2301      	movs	r3, #1
}
 23fce16:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce18:	7123      	strb	r3, [r4, #4]
}
 23fce1a:	bd10      	pop	{r4, pc}

023fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fce1c:	b508      	push	{r3, lr}
    switch (state_) {
 23fce1e:	7903      	ldrb	r3, [r0, #4]
 23fce20:	2b01      	cmp	r3, #1
 23fce22:	d002      	beq.n	23fce2a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fce24:	2b02      	cmp	r3, #2
 23fce26:	d004      	beq.n	23fce32 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fce28:	bd08      	pop	{r3, pc}
        write(',');
 23fce2a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fce2c:	f7ff ff3b 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
}
 23fce30:	e7fa      	b.n	23fce28 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fce32:	213a      	movs	r1, #58	; 0x3a
 23fce34:	e7fa      	b.n	23fce2c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fce36 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fce36:	b510      	push	{r4, lr}
 23fce38:	4604      	mov	r4, r0
    writeSeparator();
 23fce3a:	f7ff ffef 	bl	23fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fce3e:	4620      	mov	r0, r4
 23fce40:	217b      	movs	r1, #123	; 0x7b
 23fce42:	f7ff ff30 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fce46:	2300      	movs	r3, #0
}
 23fce48:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fce4a:	7123      	strb	r3, [r4, #4]
}
 23fce4c:	bd10      	pop	{r4, pc}
	...

023fce50 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fce50:	b513      	push	{r0, r1, r4, lr}
 23fce52:	4604      	mov	r4, r0
 23fce54:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fce56:	f7ff ffe1 	bl	23fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fce5a:	6823      	ldr	r3, [r4, #0]
 23fce5c:	4620      	mov	r0, r4
 23fce5e:	68db      	ldr	r3, [r3, #12]
 23fce60:	9a01      	ldr	r2, [sp, #4]
 23fce62:	4903      	ldr	r1, [pc, #12]	; (23fce70 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fce64:	4798      	blx	r3
    state_ = NEXT;
 23fce66:	2301      	movs	r3, #1
}
 23fce68:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce6a:	7123      	strb	r3, [r4, #4]
}
 23fce6c:	b002      	add	sp, #8
 23fce6e:	bd10      	pop	{r4, pc}
 23fce70:	023ffaa4 	.word	0x023ffaa4

023fce74 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fce74:	b513      	push	{r0, r1, r4, lr}
 23fce76:	4604      	mov	r4, r0
 23fce78:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fce7a:	f7ff ffcf 	bl	23fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fce7e:	6823      	ldr	r3, [r4, #0]
 23fce80:	4620      	mov	r0, r4
 23fce82:	68db      	ldr	r3, [r3, #12]
 23fce84:	9a01      	ldr	r2, [sp, #4]
 23fce86:	4903      	ldr	r1, [pc, #12]	; (23fce94 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fce88:	4798      	blx	r3
    state_ = NEXT;
 23fce8a:	2301      	movs	r3, #1
}
 23fce8c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fce8e:	7123      	strb	r3, [r4, #4]
}
 23fce90:	b002      	add	sp, #8
 23fce92:	bd10      	pop	{r4, pc}
 23fce94:	023ffaa7 	.word	0x023ffaa7

023fce98 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fce9c:	460d      	mov	r5, r1
 23fce9e:	4690      	mov	r8, r2
    write('"');
 23fcea0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fcea2:	4604      	mov	r4, r0
 23fcea4:	462f      	mov	r7, r5
    write('"');
 23fcea6:	f7ff fefe 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fceaa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fcf50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fceae:	44a8      	add	r8, r5
    while (s != end) {
 23fceb0:	4547      	cmp	r7, r8
 23fceb2:	46ba      	mov	sl, r7
 23fceb4:	d03d      	beq.n	23fcf32 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fceb6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fceba:	2e22      	cmp	r6, #34	; 0x22
 23fcebc:	d006      	beq.n	23fcecc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fcebe:	2e5c      	cmp	r6, #92	; 0x5c
 23fcec0:	d004      	beq.n	23fcecc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fcec2:	4630      	mov	r0, r6
 23fcec4:	f002 fba4 	bl	23ff610 <isprint>
 23fcec8:	2800      	cmp	r0, #0
 23fceca:	d1f1      	bne.n	23fceb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fcecc:	6823      	ldr	r3, [r4, #0]
 23fcece:	4629      	mov	r1, r5
 23fced0:	4620      	mov	r0, r4
 23fced2:	689b      	ldr	r3, [r3, #8]
 23fced4:	ebaa 0205 	sub.w	r2, sl, r5
 23fced8:	4798      	blx	r3
            write('\\');
 23fceda:	215c      	movs	r1, #92	; 0x5c
 23fcedc:	4620      	mov	r0, r4
 23fcede:	f7ff fee2 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fcee2:	2e0d      	cmp	r6, #13
 23fcee4:	d80a      	bhi.n	23fcefc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fcee6:	2e07      	cmp	r6, #7
 23fcee8:	d91c      	bls.n	23fcf24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fceea:	f1a6 0308 	sub.w	r3, r6, #8
 23fceee:	2b05      	cmp	r3, #5
 23fcef0:	d818      	bhi.n	23fcf24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fcef2:	e8df f003 	tbb	[pc, r3]
 23fcef6:	0f0d      	.short	0x0f0d
 23fcef8:	15131711 	.word	0x15131711
 23fcefc:	2e22      	cmp	r6, #34	; 0x22
 23fcefe:	d001      	beq.n	23fcf04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fcf00:	2e5c      	cmp	r6, #92	; 0x5c
 23fcf02:	d10f      	bne.n	23fcf24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fcf04:	4631      	mov	r1, r6
                write('b');
 23fcf06:	4620      	mov	r0, r4
 23fcf08:	f7ff fecd 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fcf0c:	463d      	mov	r5, r7
    while (s != end) {
 23fcf0e:	e7cf      	b.n	23fceb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fcf10:	2162      	movs	r1, #98	; 0x62
 23fcf12:	e7f8      	b.n	23fcf06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fcf14:	2174      	movs	r1, #116	; 0x74
 23fcf16:	e7f6      	b.n	23fcf06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fcf18:	216e      	movs	r1, #110	; 0x6e
 23fcf1a:	e7f4      	b.n	23fcf06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fcf1c:	2166      	movs	r1, #102	; 0x66
 23fcf1e:	e7f2      	b.n	23fcf06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fcf20:	2172      	movs	r1, #114	; 0x72
 23fcf22:	e7f0      	b.n	23fcf06 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fcf24:	6823      	ldr	r3, [r4, #0]
 23fcf26:	4632      	mov	r2, r6
 23fcf28:	4649      	mov	r1, r9
 23fcf2a:	4620      	mov	r0, r4
 23fcf2c:	68db      	ldr	r3, [r3, #12]
 23fcf2e:	4798      	blx	r3
                break;
 23fcf30:	e7ec      	b.n	23fcf0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fcf32:	42bd      	cmp	r5, r7
 23fcf34:	d005      	beq.n	23fcf42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fcf36:	6823      	ldr	r3, [r4, #0]
 23fcf38:	4629      	mov	r1, r5
 23fcf3a:	4620      	mov	r0, r4
 23fcf3c:	689b      	ldr	r3, [r3, #8]
 23fcf3e:	1b7a      	subs	r2, r7, r5
 23fcf40:	4798      	blx	r3
    }
    write('"');
 23fcf42:	2122      	movs	r1, #34	; 0x22
 23fcf44:	4620      	mov	r0, r4
 23fcf46:	f7ff feae 	bl	23fcca6 <_ZN5spark10JSONWriter5writeEc>
}
 23fcf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fcf4e:	bf00      	nop
 23fcf50:	023ffaaa 	.word	0x023ffaaa

023fcf54 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fcf54:	b513      	push	{r0, r1, r4, lr}
 23fcf56:	4604      	mov	r4, r0
 23fcf58:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcf5c:	f7ff ff5e 	bl	23fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fcf60:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcf64:	4620      	mov	r0, r4
 23fcf66:	f7ff ff97 	bl	23fce98 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fcf6a:	2302      	movs	r3, #2
}
 23fcf6c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fcf6e:	7123      	strb	r3, [r4, #4]
}
 23fcf70:	b002      	add	sp, #8
 23fcf72:	bd10      	pop	{r4, pc}

023fcf74 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fcf74:	b513      	push	{r0, r1, r4, lr}
 23fcf76:	4604      	mov	r4, r0
 23fcf78:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcf7c:	f7ff ff4e 	bl	23fce1c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fcf80:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcf84:	4620      	mov	r0, r4
 23fcf86:	f7ff ff87 	bl	23fce98 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fcf8a:	2301      	movs	r3, #1
}
 23fcf8c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcf8e:	7123      	strb	r3, [r4, #4]
}
 23fcf90:	b002      	add	sp, #8
 23fcf92:	bd10      	pop	{r4, pc}

023fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fcf94:	b510      	push	{r4, lr}
 23fcf96:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fcf98:	6800      	ldr	r0, [r0, #0]
 23fcf9a:	b108      	cbz	r0, 23fcfa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fcf9c:	f7ff fe5d 	bl	23fcc5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fcfa0:	4620      	mov	r0, r4
 23fcfa2:	bd10      	pop	{r4, pc}

023fcfa4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fcfa4:	7441      	strb	r1, [r0, #17]
}
 23fcfa6:	4770      	bx	lr

023fcfa8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fcfa8:	4770      	bx	lr

023fcfaa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fcfaa:	4770      	bx	lr

023fcfac <_ZN9USBSerial4readEv>:
{
 23fcfac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fcfae:	2100      	movs	r1, #0
 23fcfb0:	7c00      	ldrb	r0, [r0, #16]
 23fcfb2:	f7ff f877 	bl	23fc0a4 <HAL_USB_USART_Receive_Data>
}
 23fcfb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fcfba:	bd08      	pop	{r3, pc}

023fcfbc <_ZN9USBSerial4peekEv>:
{
 23fcfbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fcfbe:	2101      	movs	r1, #1
 23fcfc0:	7c00      	ldrb	r0, [r0, #16]
 23fcfc2:	f7ff f86f 	bl	23fc0a4 <HAL_USB_USART_Receive_Data>
}
 23fcfc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fcfca:	bd08      	pop	{r3, pc}

023fcfcc <_ZN9USBSerial17availableForWriteEv>:
{
 23fcfcc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fcfce:	7c00      	ldrb	r0, [r0, #16]
 23fcfd0:	f7ff f85a 	bl	23fc088 <HAL_USB_USART_Available_Data_For_Write>
}
 23fcfd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fcfd8:	bd08      	pop	{r3, pc}

023fcfda <_ZN9USBSerial9availableEv>:
{
 23fcfda:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fcfdc:	7c00      	ldrb	r0, [r0, #16]
 23fcfde:	f7ff f845 	bl	23fc06c <HAL_USB_USART_Available_Data>
}
 23fcfe2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fcfe6:	bd08      	pop	{r3, pc}

023fcfe8 <_ZN9USBSerial5writeEh>:
{
 23fcfe8:	b513      	push	{r0, r1, r4, lr}
 23fcfea:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fcfec:	7c00      	ldrb	r0, [r0, #16]
{
 23fcfee:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fcff0:	f7ff f84a 	bl	23fc088 <HAL_USB_USART_Available_Data_For_Write>
 23fcff4:	2800      	cmp	r0, #0
 23fcff6:	9901      	ldr	r1, [sp, #4]
 23fcff8:	dc01      	bgt.n	23fcffe <_ZN9USBSerial5writeEh+0x16>
 23fcffa:	7c60      	ldrb	r0, [r4, #17]
 23fcffc:	b120      	cbz	r0, 23fd008 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fcffe:	7c20      	ldrb	r0, [r4, #16]
 23fd000:	f7ff f85e 	bl	23fc0c0 <HAL_USB_USART_Send_Data>
 23fd004:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd008:	b002      	add	sp, #8
 23fd00a:	bd10      	pop	{r4, pc}

023fd00c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd00c:	7c00      	ldrb	r0, [r0, #16]
 23fd00e:	f7ff b865 	b.w	23fc0dc <HAL_USB_USART_Flush_Data>

023fd012 <_ZN9USBSerialD0Ev>:
 23fd012:	b510      	push	{r4, lr}
 23fd014:	4604      	mov	r4, r0
 23fd016:	2114      	movs	r1, #20
 23fd018:	f7fe fd67 	bl	23fbaea <_ZdlPvj>
 23fd01c:	4620      	mov	r0, r4
 23fd01e:	bd10      	pop	{r4, pc}

023fd020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd020:	b510      	push	{r4, lr}
 23fd022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd026:	4604      	mov	r4, r0
 23fd028:	4608      	mov	r0, r1
 23fd02a:	2100      	movs	r1, #0
 23fd02c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd030:	4b04      	ldr	r3, [pc, #16]	; (23fd044 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd032:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd034:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd036:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd038:	4611      	mov	r1, r2
  _blocking = true;
 23fd03a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd03c:	f7fe ffec 	bl	23fc018 <HAL_USB_USART_Init>
}
 23fd040:	4620      	mov	r0, r4
 23fd042:	bd10      	pop	{r4, pc}
 23fd044:	023ffab8 	.word	0x023ffab8

023fd048 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd048:	2200      	movs	r2, #0
 23fd04a:	7c00      	ldrb	r0, [r0, #16]
 23fd04c:	f7fe bff2 	b.w	23fc034 <HAL_USB_USART_Begin>

023fd050 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fd050:	7c00      	ldrb	r0, [r0, #16]
 23fd052:	f7fe bffd 	b.w	23fc050 <HAL_USB_USART_End>

023fd056 <_Z19acquireSerialBufferv>:
{
 23fd056:	b510      	push	{r4, lr}
 23fd058:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd05a:	2214      	movs	r2, #20
 23fd05c:	2100      	movs	r1, #0
 23fd05e:	f002 fb16 	bl	23ff68e <memset>
}
 23fd062:	4620      	mov	r0, r4
 23fd064:	bd10      	pop	{r4, pc}
	...

023fd068 <_Z16_fetch_usbserialv>:
{
 23fd068:	b510      	push	{r4, lr}
 23fd06a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd06c:	a803      	add	r0, sp, #12
 23fd06e:	f7ff fff2 	bl	23fd056 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd072:	4c0c      	ldr	r4, [pc, #48]	; (23fd0a4 <_Z16_fetch_usbserialv+0x3c>)
 23fd074:	e8d4 1f8f 	ldab	r1, [r4]
 23fd078:	f011 0101 	ands.w	r1, r1, #1
 23fd07c:	d10f      	bne.n	23fd09e <_Z16_fetch_usbserialv+0x36>
 23fd07e:	4620      	mov	r0, r4
 23fd080:	9101      	str	r1, [sp, #4]
 23fd082:	f7fe fd41 	bl	23fbb08 <__cxa_guard_acquire>
 23fd086:	9901      	ldr	r1, [sp, #4]
 23fd088:	b148      	cbz	r0, 23fd09e <_Z16_fetch_usbserialv+0x36>
 23fd08a:	aa03      	add	r2, sp, #12
 23fd08c:	4806      	ldr	r0, [pc, #24]	; (23fd0a8 <_Z16_fetch_usbserialv+0x40>)
 23fd08e:	f7ff ffc7 	bl	23fd020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd092:	4620      	mov	r0, r4
 23fd094:	f7fe fd3d 	bl	23fbb12 <__cxa_guard_release>
 23fd098:	4804      	ldr	r0, [pc, #16]	; (23fd0ac <_Z16_fetch_usbserialv+0x44>)
 23fd09a:	f002 fab3 	bl	23ff604 <atexit>
	return _usbserial;
}
 23fd09e:	4802      	ldr	r0, [pc, #8]	; (23fd0a8 <_Z16_fetch_usbserialv+0x40>)
 23fd0a0:	b008      	add	sp, #32
 23fd0a2:	bd10      	pop	{r4, pc}
 23fd0a4:	1007ae54 	.word	0x1007ae54
 23fd0a8:	1007ae58 	.word	0x1007ae58
 23fd0ac:	023fcfa9 	.word	0x023fcfa9

023fd0b0 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fd0b0:	4770      	bx	lr

023fd0b2 <_ZN9IPAddressD0Ev>:
 23fd0b2:	b510      	push	{r4, lr}
 23fd0b4:	4604      	mov	r4, r0
 23fd0b6:	2118      	movs	r1, #24
 23fd0b8:	f7fe fd17 	bl	23fbaea <_ZdlPvj>
 23fd0bc:	4620      	mov	r0, r4
 23fd0be:	bd10      	pop	{r4, pc}

023fd0c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd0c2:	7d03      	ldrb	r3, [r0, #20]
{
 23fd0c4:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd0c6:	2b06      	cmp	r3, #6
 23fd0c8:	f04f 0400 	mov.w	r4, #0
{
 23fd0cc:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0ce:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd0d2:	d012      	beq.n	23fd0fa <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd0d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd0d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd0dc:	220a      	movs	r2, #10
 23fd0de:	4630      	mov	r0, r6
 23fd0e0:	f001 f91b 	bl	23fe31a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd0e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd0e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd0e8:	d019      	beq.n	23fd11e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd0ea:	2c00      	cmp	r4, #0
 23fd0ec:	d0f4      	beq.n	23fd0d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd0ee:	212e      	movs	r1, #46	; 0x2e
 23fd0f0:	4630      	mov	r0, r6
 23fd0f2:	f001 f90f 	bl	23fe314 <_ZN5Print5printEc>
 23fd0f6:	4404      	add	r4, r0
 23fd0f8:	e7ee      	b.n	23fd0d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd0fa:	232f      	movs	r3, #47	; 0x2f
 23fd0fc:	466a      	mov	r2, sp
 23fd0fe:	4639      	mov	r1, r7
 23fd100:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd102:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd106:	f7ff f901 	bl	23fc30c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd10a:	4668      	mov	r0, sp
 23fd10c:	f7fe fcc4 	bl	23fba98 <strlen>
 23fd110:	6833      	ldr	r3, [r6, #0]
 23fd112:	4602      	mov	r2, r0
 23fd114:	4669      	mov	r1, sp
 23fd116:	4630      	mov	r0, r6
 23fd118:	68db      	ldr	r3, [r3, #12]
 23fd11a:	4798      	blx	r3
 23fd11c:	4604      	mov	r4, r0
    }
    return n;
}
 23fd11e:	4620      	mov	r0, r4
 23fd120:	b00d      	add	sp, #52	; 0x34
 23fd122:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd124 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd124:	b510      	push	{r4, lr}
 23fd126:	4604      	mov	r4, r0
 23fd128:	4b04      	ldr	r3, [pc, #16]	; (23fd13c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd12a:	2211      	movs	r2, #17
 23fd12c:	2100      	movs	r1, #0
 23fd12e:	f840 3b04 	str.w	r3, [r0], #4
 23fd132:	f002 faac 	bl	23ff68e <memset>
}
 23fd136:	4620      	mov	r0, r4
 23fd138:	bd10      	pop	{r4, pc}
 23fd13a:	bf00      	nop
 23fd13c:	023ffae8 	.word	0x023ffae8

023fd140 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd140:	4603      	mov	r3, r0
 23fd142:	4a07      	ldr	r2, [pc, #28]	; (23fd160 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd144:	b510      	push	{r4, lr}
 23fd146:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd14a:	f101 0210 	add.w	r2, r1, #16
 23fd14e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd152:	4291      	cmp	r1, r2
 23fd154:	f843 4b04 	str.w	r4, [r3], #4
 23fd158:	d1f9      	bne.n	23fd14e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd15a:	780a      	ldrb	r2, [r1, #0]
 23fd15c:	701a      	strb	r2, [r3, #0]
}
 23fd15e:	bd10      	pop	{r4, pc}
 23fd160:	023ffae8 	.word	0x023ffae8

023fd164 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd164:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd166:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd16a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd16e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd172:	2304      	movs	r3, #4
 23fd174:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd178:	6041      	str	r1, [r0, #4]
 23fd17a:	7503      	strb	r3, [r0, #20]
}
 23fd17c:	bd10      	pop	{r4, pc}
	...

023fd180 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd180:	b507      	push	{r0, r1, r2, lr}
 23fd182:	4b06      	ldr	r3, [pc, #24]	; (23fd19c <_ZN9IPAddressC1EPKh+0x1c>)
 23fd184:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd186:	78cb      	ldrb	r3, [r1, #3]
 23fd188:	9300      	str	r3, [sp, #0]
 23fd18a:	788b      	ldrb	r3, [r1, #2]
 23fd18c:	784a      	ldrb	r2, [r1, #1]
 23fd18e:	7809      	ldrb	r1, [r1, #0]
 23fd190:	f7ff ffe8 	bl	23fd164 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd194:	b003      	add	sp, #12
 23fd196:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd19a:	bf00      	nop
 23fd19c:	023ffae8 	.word	0x023ffae8

023fd1a0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fd1a0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fd1a2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fd1a4:	4604      	mov	r4, r0
      if (_M_manager)
 23fd1a6:	b113      	cbz	r3, 23fd1ae <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd1a8:	2203      	movs	r2, #3
 23fd1aa:	4601      	mov	r1, r0
 23fd1ac:	4798      	blx	r3
    }
 23fd1ae:	4620      	mov	r0, r4
 23fd1b0:	bd10      	pop	{r4, pc}

023fd1b2 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd1b2:	2100      	movs	r1, #0
 23fd1b4:	f7ff bb20 	b.w	23fc7f8 <system_delay_ms>

023fd1b8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd1b8:	4b01      	ldr	r3, [pc, #4]	; (23fd1c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd1ba:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd1bc:	4770      	bx	lr
 23fd1be:	bf00      	nop
 23fd1c0:	1007ad7c 	.word	0x1007ad7c

023fd1c4 <serialEventRun>:
{
 23fd1c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd1c6:	4b0f      	ldr	r3, [pc, #60]	; (23fd204 <serialEventRun+0x40>)
 23fd1c8:	b143      	cbz	r3, 23fd1dc <serialEventRun+0x18>
 23fd1ca:	f7ff ff4d 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fd1ce:	6803      	ldr	r3, [r0, #0]
 23fd1d0:	691b      	ldr	r3, [r3, #16]
 23fd1d2:	4798      	blx	r3
 23fd1d4:	2800      	cmp	r0, #0
 23fd1d6:	dd01      	ble.n	23fd1dc <serialEventRun+0x18>
        serialEvent();
 23fd1d8:	e000      	b.n	23fd1dc <serialEventRun+0x18>
 23fd1da:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd1dc:	4b0a      	ldr	r3, [pc, #40]	; (23fd208 <serialEventRun+0x44>)
 23fd1de:	b143      	cbz	r3, 23fd1f2 <serialEventRun+0x2e>
 23fd1e0:	f001 ffb4 	bl	23ff14c <_Z22__fetch_global_Serial1v>
 23fd1e4:	6803      	ldr	r3, [r0, #0]
 23fd1e6:	691b      	ldr	r3, [r3, #16]
 23fd1e8:	4798      	blx	r3
 23fd1ea:	2800      	cmp	r0, #0
 23fd1ec:	dd01      	ble.n	23fd1f2 <serialEventRun+0x2e>
        serialEvent1();
 23fd1ee:	e000      	b.n	23fd1f2 <serialEventRun+0x2e>
 23fd1f0:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd1f2:	4b06      	ldr	r3, [pc, #24]	; (23fd20c <serialEventRun+0x48>)
 23fd1f4:	b10b      	cbz	r3, 23fd1fa <serialEventRun+0x36>
 23fd1f6:	f001 ffef 	bl	23ff1d8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd1fa:	4b05      	ldr	r3, [pc, #20]	; (23fd210 <serialEventRun+0x4c>)
 23fd1fc:	b10b      	cbz	r3, 23fd202 <serialEventRun+0x3e>
 23fd1fe:	f002 f821 	bl	23ff244 <_Z15serialEventRun3v>
}
 23fd202:	bd08      	pop	{r3, pc}
	...

023fd214 <_post_loop>:
{
 23fd214:	b508      	push	{r3, lr}
	serialEventRun();
 23fd216:	f7ff ffd5 	bl	23fd1c4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd21a:	f7ff f949 	bl	23fc4b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd21e:	4b01      	ldr	r3, [pc, #4]	; (23fd224 <_post_loop+0x10>)
 23fd220:	6018      	str	r0, [r3, #0]
}
 23fd222:	bd08      	pop	{r3, pc}
 23fd224:	1007aefc 	.word	0x1007aefc

023fd228 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd228:	4805      	ldr	r0, [pc, #20]	; (23fd240 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd22a:	4a06      	ldr	r2, [pc, #24]	; (23fd244 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd22c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd22e:	1a12      	subs	r2, r2, r0
 23fd230:	4905      	ldr	r1, [pc, #20]	; (23fd248 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd232:	f002 fa05 	bl	23ff640 <memcpy>
    __backup_sram_signature = signature;
 23fd236:	4b05      	ldr	r3, [pc, #20]	; (23fd24c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd238:	4a05      	ldr	r2, [pc, #20]	; (23fd250 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd23a:	601a      	str	r2, [r3, #0]
}
 23fd23c:	bd08      	pop	{r3, pc}
 23fd23e:	bf00      	nop
 23fd240:	1007b400 	.word	0x1007b400
 23fd244:	1007b404 	.word	0x1007b404
 23fd248:	085fff34 	.word	0x085fff34
 23fd24c:	1007b400 	.word	0x1007b400
 23fd250:	9a271c1e 	.word	0x9a271c1e

023fd254 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd254:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd256:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd258:	461a      	mov	r2, r3
 23fd25a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd25e:	9300      	str	r3, [sp, #0]
 23fd260:	f7ff faf4 	bl	23fc84c <system_ctrl_set_result>
}
 23fd264:	b003      	add	sp, #12
 23fd266:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd26c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd26c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd26e:	8843      	ldrh	r3, [r0, #2]
 23fd270:	2b0a      	cmp	r3, #10
 23fd272:	d008      	beq.n	23fd286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd274:	2b50      	cmp	r3, #80	; 0x50
 23fd276:	d10b      	bne.n	23fd290 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd278:	4b09      	ldr	r3, [pc, #36]	; (23fd2a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd27a:	681b      	ldr	r3, [r3, #0]
 23fd27c:	b14b      	cbz	r3, 23fd292 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd27e:	b003      	add	sp, #12
 23fd280:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd284:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd286:	f7ff ffe5 	bl	23fd254 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd28a:	b003      	add	sp, #12
 23fd28c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd290:	2300      	movs	r3, #0
 23fd292:	461a      	mov	r2, r3
 23fd294:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd298:	9300      	str	r3, [sp, #0]
 23fd29a:	f7ff fad7 	bl	23fc84c <system_ctrl_set_result>
}
 23fd29e:	e7f4      	b.n	23fd28a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd2a0:	1007ae70 	.word	0x1007ae70

023fd2a4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd2a4:	2100      	movs	r1, #0
{
 23fd2a6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd2a8:	4811      	ldr	r0, [pc, #68]	; (23fd2f0 <module_user_init_hook+0x4c>)
 23fd2aa:	f7ff fb3f 	bl	23fc92c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd2ae:	4b11      	ldr	r3, [pc, #68]	; (23fd2f4 <module_user_init_hook+0x50>)
 23fd2b0:	681a      	ldr	r2, [r3, #0]
 23fd2b2:	4b11      	ldr	r3, [pc, #68]	; (23fd2f8 <module_user_init_hook+0x54>)
 23fd2b4:	429a      	cmp	r2, r3
 23fd2b6:	bf0c      	ite	eq
 23fd2b8:	2201      	moveq	r2, #1
 23fd2ba:	2200      	movne	r2, #0
 23fd2bc:	4b0f      	ldr	r3, [pc, #60]	; (23fd2fc <module_user_init_hook+0x58>)
 23fd2be:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd2c0:	d001      	beq.n	23fd2c6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd2c2:	f7ff ffb1 	bl	23fd228 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd2c6:	f7ff f8d7 	bl	23fc478 <HAL_RNG_GetRandomNumber>
 23fd2ca:	4604      	mov	r4, r0
    srand(seed);
 23fd2cc:	f002 f9e8 	bl	23ff6a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd2d0:	4b0b      	ldr	r3, [pc, #44]	; (23fd300 <module_user_init_hook+0x5c>)
 23fd2d2:	b113      	cbz	r3, 23fd2da <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd2d4:	4620      	mov	r0, r4
 23fd2d6:	e000      	b.n	23fd2da <module_user_init_hook+0x36>
 23fd2d8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd2da:	2100      	movs	r1, #0
 23fd2dc:	4808      	ldr	r0, [pc, #32]	; (23fd300 <module_user_init_hook+0x5c>)
 23fd2de:	f7ff f9c7 	bl	23fc670 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd2e6:	2100      	movs	r1, #0
 23fd2e8:	4806      	ldr	r0, [pc, #24]	; (23fd304 <module_user_init_hook+0x60>)
 23fd2ea:	f7ff baa1 	b.w	23fc830 <system_ctrl_set_app_request_handler>
 23fd2ee:	bf00      	nop
 23fd2f0:	023fd1b9 	.word	0x023fd1b9
 23fd2f4:	1007b400 	.word	0x1007b400
 23fd2f8:	9a271c1e 	.word	0x9a271c1e
 23fd2fc:	1007ae6c 	.word	0x1007ae6c
 23fd300:	00000000 	.word	0x00000000
 23fd304:	023fd26d 	.word	0x023fd26d

023fd308 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd308:	2200      	movs	r2, #0
 23fd30a:	4b01      	ldr	r3, [pc, #4]	; (23fd310 <_GLOBAL__sub_I_RGB+0x8>)
 23fd30c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd30e:	4770      	bx	lr
 23fd310:	1007ae74 	.word	0x1007ae74

023fd314 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd314:	4b02      	ldr	r3, [pc, #8]	; (23fd320 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd316:	681a      	ldr	r2, [r3, #0]
 23fd318:	4b02      	ldr	r3, [pc, #8]	; (23fd324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd31a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd31c:	4770      	bx	lr
 23fd31e:	bf00      	nop
 23fd320:	1007ad70 	.word	0x1007ad70
 23fd324:	1007ae84 	.word	0x1007ae84

023fd328 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fd328:	6880      	ldr	r0, [r0, #8]
 23fd32a:	6803      	ldr	r3, [r0, #0]
 23fd32c:	68db      	ldr	r3, [r3, #12]
 23fd32e:	4718      	bx	r3

023fd330 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd330:	4770      	bx	lr

023fd332 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fd332:	4608      	mov	r0, r1
 23fd334:	b111      	cbz	r1, 23fd33c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fd336:	680b      	ldr	r3, [r1, #0]
 23fd338:	685b      	ldr	r3, [r3, #4]
 23fd33a:	4718      	bx	r3
}
 23fd33c:	4770      	bx	lr

023fd33e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fd33e:	4770      	bx	lr

023fd340 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd340:	4770      	bx	lr

023fd342 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fd342:	4770      	bx	lr

023fd344 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd344:	4770      	bx	lr

023fd346 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fd346:	b538      	push	{r3, r4, r5, lr}
 23fd348:	4604      	mov	r4, r0
 23fd34a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fd34c:	6800      	ldr	r0, [r0, #0]
 23fd34e:	212e      	movs	r1, #46	; 0x2e
 23fd350:	f002 f9e1 	bl	23ff716 <strchrnul>
    size = s - category;
 23fd354:	6823      	ldr	r3, [r4, #0]
 23fd356:	1ac3      	subs	r3, r0, r3
 23fd358:	602b      	str	r3, [r5, #0]
    if (size) {
 23fd35a:	b123      	cbz	r3, 23fd366 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fd35c:	7803      	ldrb	r3, [r0, #0]
 23fd35e:	b103      	cbz	r3, 23fd362 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fd360:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fd362:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd364:	6020      	str	r0, [r4, #0]
}
 23fd366:	4618      	mov	r0, r3
 23fd368:	bd38      	pop	{r3, r4, r5, pc}

023fd36a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd36a:	b510      	push	{r4, lr}
 23fd36c:	4604      	mov	r4, r0
 23fd36e:	210c      	movs	r1, #12
 23fd370:	f7fe fbbb 	bl	23fbaea <_ZdlPvj>
 23fd374:	4620      	mov	r0, r4
 23fd376:	bd10      	pop	{r4, pc}

023fd378 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fd378:	b510      	push	{r4, lr}
 23fd37a:	4604      	mov	r4, r0
 23fd37c:	2104      	movs	r1, #4
 23fd37e:	f7fe fbb4 	bl	23fbaea <_ZdlPvj>
 23fd382:	4620      	mov	r0, r4
 23fd384:	bd10      	pop	{r4, pc}

023fd386 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fd386:	b510      	push	{r4, lr}
 23fd388:	4604      	mov	r4, r0
 23fd38a:	2104      	movs	r1, #4
 23fd38c:	f7fe fbad 	bl	23fbaea <_ZdlPvj>
 23fd390:	4620      	mov	r0, r4
 23fd392:	bd10      	pop	{r4, pc}

023fd394 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fd394:	f7fe bfe4 	b.w	23fc360 <os_mutex_recursive_lock>

023fd398 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fd398:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fd39a:	f7fe fb73 	bl	23fba84 <strcmp>
}
 23fd39e:	fab0 f080 	clz	r0, r0
 23fd3a2:	0940      	lsrs	r0, r0, #5
 23fd3a4:	bd08      	pop	{r3, pc}

023fd3a6 <__tcf_1>:
 23fd3a6:	4770      	bx	lr

023fd3a8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fd3a8:	b510      	push	{r4, lr}
 23fd3aa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fd3ac:	f7ff fe5c 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fd3b0:	4284      	cmp	r4, r0
 23fd3b2:	d105      	bne.n	23fd3c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fd3b4:	f7ff fe58 	bl	23fd068 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fd3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fd3bc:	f7ff be48 	b.w	23fd050 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fd3c0:	f001 fec4 	bl	23ff14c <_Z22__fetch_global_Serial1v>
 23fd3c4:	4284      	cmp	r4, r0
 23fd3c6:	d105      	bne.n	23fd3d4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fd3c8:	f001 fec0 	bl	23ff14c <_Z22__fetch_global_Serial1v>
}
 23fd3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fd3d0:	f001 bd5f 	b.w	23fee92 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fd3d4:	b12c      	cbz	r4, 23fd3e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fd3d6:	6823      	ldr	r3, [r4, #0]
 23fd3d8:	4620      	mov	r0, r4
}
 23fd3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd3de:	685b      	ldr	r3, [r3, #4]
 23fd3e0:	4718      	bx	r3
 23fd3e2:	bd10      	pop	{r4, pc}

023fd3e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd3e4:	680b      	ldr	r3, [r1, #0]
 23fd3e6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd3e8:	684b      	ldr	r3, [r1, #4]
 23fd3ea:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd3ec:	b113      	cbz	r3, 23fd3f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd3ee:	685a      	ldr	r2, [r3, #4]
 23fd3f0:	3201      	adds	r2, #1
 23fd3f2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd3f4:	4770      	bx	lr

023fd3f6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fd3f6:	b513      	push	{r0, r1, r4, lr}
 23fd3f8:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fd3fa:	4608      	mov	r0, r1
 23fd3fc:	9101      	str	r1, [sp, #4]
 23fd3fe:	f7fe fb4b 	bl	23fba98 <strlen>
 23fd402:	4602      	mov	r2, r0
 23fd404:	4620      	mov	r0, r4
 23fd406:	9901      	ldr	r1, [sp, #4]
}
 23fd408:	b002      	add	sp, #8
 23fd40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fd40e:	f7ff bdb1 	b.w	23fcf74 <_ZN5spark10JSONWriter5valueEPKcj>

023fd412 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fd412:	b513      	push	{r0, r1, r4, lr}
 23fd414:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fd416:	4608      	mov	r0, r1
 23fd418:	9101      	str	r1, [sp, #4]
 23fd41a:	f7fe fb3d 	bl	23fba98 <strlen>
 23fd41e:	4602      	mov	r2, r0
 23fd420:	4620      	mov	r0, r4
 23fd422:	6823      	ldr	r3, [r4, #0]
 23fd424:	9901      	ldr	r1, [sp, #4]
 23fd426:	68db      	ldr	r3, [r3, #12]
}
 23fd428:	b002      	add	sp, #8
 23fd42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fd42e:	4718      	bx	r3

023fd430 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fd430:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fd432:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fd434:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fd438:	2201      	movs	r2, #1
 23fd43a:	68db      	ldr	r3, [r3, #12]
 23fd43c:	f10d 0107 	add.w	r1, sp, #7
 23fd440:	4798      	blx	r3
}
 23fd442:	b003      	add	sp, #12
 23fd444:	f85d fb04 	ldr.w	pc, [sp], #4

023fd448 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd448:	680a      	ldr	r2, [r1, #0]
 23fd44a:	b510      	push	{r4, lr}
 23fd44c:	6002      	str	r2, [r0, #0]
 23fd44e:	684a      	ldr	r2, [r1, #4]
 23fd450:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fd452:	2200      	movs	r2, #0
 23fd454:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd458:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd45a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd45c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd45e:	6084      	str	r4, [r0, #8]
 23fd460:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd462:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd464:	60c4      	str	r4, [r0, #12]
 23fd466:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd468:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd46a:	6104      	str	r4, [r0, #16]
 23fd46c:	bd10      	pop	{r4, pc}
	...

023fd470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fd474:	f04f 0a14 	mov.w	sl, #20
 23fd478:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fd47c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fd47e:	4645      	mov	r5, r8
 23fd480:	fb0a f404 	mul.w	r4, sl, r4
 23fd484:	9300      	str	r3, [sp, #0]
 23fd486:	4b17      	ldr	r3, [pc, #92]	; (23fd4e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd488:	10a4      	asrs	r4, r4, #2
 23fd48a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fd48c:	2c00      	cmp	r4, #0
 23fd48e:	dd21      	ble.n	23fd4d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fd490:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fd492:	fb0a f006 	mul.w	r0, sl, r6
 23fd496:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fd49a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fd49e:	463a      	mov	r2, r7
 23fd4a0:	455f      	cmp	r7, fp
 23fd4a2:	bf28      	it	cs
 23fd4a4:	465a      	movcs	r2, fp
 23fd4a6:	5828      	ldr	r0, [r5, r0]
 23fd4a8:	9101      	str	r1, [sp, #4]
 23fd4aa:	f002 f946 	bl	23ff73a <strncmp>
                if (cmp == 0) {
 23fd4ae:	2800      	cmp	r0, #0
 23fd4b0:	f04f 0301 	mov.w	r3, #1
 23fd4b4:	9901      	ldr	r1, [sp, #4]
 23fd4b6:	d10b      	bne.n	23fd4d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd4b8:	455f      	cmp	r7, fp
 23fd4ba:	d103      	bne.n	23fd4c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd4bc:	9a00      	ldr	r2, [sp, #0]
 23fd4be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd4c0:	4634      	mov	r4, r6
 23fd4c2:	e7e3      	b.n	23fd48c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd4c4:	d9fc      	bls.n	23fd4c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd4c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd4c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd4cc:	3e01      	subs	r6, #1
 23fd4ce:	e7f7      	b.n	23fd4c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd4d0:	dbf9      	blt.n	23fd4c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd4d2:	e7f5      	b.n	23fd4c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd4d4:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd4d8:	4802      	ldr	r0, [pc, #8]	; (23fd4e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd4da:	10ad      	asrs	r5, r5, #2
 23fd4dc:	4368      	muls	r0, r5
 23fd4de:	b003      	add	sp, #12
 23fd4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd4e4:	cccccccd 	.word	0xcccccccd

023fd4e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd4e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd4ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd4ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd4ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd4f0:	b303      	cbz	r3, 23fd534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd4f2:	b1f9      	cbz	r1, 23fd534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd4f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd4f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd4fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd4fc:	a903      	add	r1, sp, #12
 23fd4fe:	a801      	add	r0, sp, #4
 23fd500:	f7ff ff21 	bl	23fd346 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd504:	4601      	mov	r1, r0
 23fd506:	b1a8      	cbz	r0, 23fd534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd508:	f10d 030b 	add.w	r3, sp, #11
 23fd50c:	4620      	mov	r0, r4
 23fd50e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd510:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd514:	f7ff ffac 	bl	23fd470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd518:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd51c:	b153      	cbz	r3, 23fd534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd51e:	6823      	ldr	r3, [r4, #0]
 23fd520:	2414      	movs	r4, #20
 23fd522:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd526:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd52a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd52c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd52e:	bfa8      	it	ge
 23fd530:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd532:	e7e3      	b.n	23fd4fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd534:	4628      	mov	r0, r5
 23fd536:	b004      	add	sp, #16
 23fd538:	bd70      	pop	{r4, r5, r6, pc}

023fd53a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd53a:	b40e      	push	{r1, r2, r3}
 23fd53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd53e:	b08c      	sub	sp, #48	; 0x30
 23fd540:	af00      	add	r7, sp, #0
 23fd542:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd546:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd54a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd54c:	462b      	mov	r3, r5
 23fd54e:	2120      	movs	r1, #32
 23fd550:	f107 0010 	add.w	r0, r7, #16
 23fd554:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd556:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd558:	f7ff f9b0 	bl	23fc8bc <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd55c:	281f      	cmp	r0, #31
 23fd55e:	687a      	ldr	r2, [r7, #4]
 23fd560:	d91a      	bls.n	23fd598 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd562:	f100 0308 	add.w	r3, r0, #8
 23fd566:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd56a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd56c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd570:	1c41      	adds	r1, r0, #1
 23fd572:	462b      	mov	r3, r5
 23fd574:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd576:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd578:	f7ff f9a0 	bl	23fc8bc <vsnprintf>
        if (n > 0) {
 23fd57c:	1e02      	subs	r2, r0, #0
 23fd57e:	dd04      	ble.n	23fd58a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd580:	6823      	ldr	r3, [r4, #0]
 23fd582:	4669      	mov	r1, sp
 23fd584:	4620      	mov	r0, r4
 23fd586:	68db      	ldr	r3, [r3, #12]
 23fd588:	4798      	blx	r3
 23fd58a:	46b5      	mov	sp, r6
}
 23fd58c:	3730      	adds	r7, #48	; 0x30
 23fd58e:	46bd      	mov	sp, r7
 23fd590:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd594:	b003      	add	sp, #12
 23fd596:	4770      	bx	lr
    } else if (n > 0) {
 23fd598:	2800      	cmp	r0, #0
 23fd59a:	d0f7      	beq.n	23fd58c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd59c:	6823      	ldr	r3, [r4, #0]
 23fd59e:	4602      	mov	r2, r0
 23fd5a0:	68db      	ldr	r3, [r3, #12]
 23fd5a2:	4620      	mov	r0, r4
 23fd5a4:	f107 0110 	add.w	r1, r7, #16
 23fd5a8:	4798      	blx	r3
}
 23fd5aa:	e7ef      	b.n	23fd58c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd5ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd5ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd5ae:	4c08      	ldr	r4, [pc, #32]	; (23fd5d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd5b0:	e8d4 3f8f 	ldab	r3, [r4]
 23fd5b4:	07db      	lsls	r3, r3, #31
 23fd5b6:	d409      	bmi.n	23fd5cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd5b8:	4620      	mov	r0, r4
 23fd5ba:	f7fe faa5 	bl	23fbb08 <__cxa_guard_acquire>
 23fd5be:	b128      	cbz	r0, 23fd5cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd5c0:	4620      	mov	r0, r4
 23fd5c2:	f7fe faa6 	bl	23fbb12 <__cxa_guard_release>
 23fd5c6:	4803      	ldr	r0, [pc, #12]	; (23fd5d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd5c8:	f002 f81c 	bl	23ff604 <atexit>
}
 23fd5cc:	4802      	ldr	r0, [pc, #8]	; (23fd5d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd5ce:	bd10      	pop	{r4, pc}
 23fd5d0:	1007ae8c 	.word	0x1007ae8c
 23fd5d4:	023fd33f 	.word	0x023fd33f
 23fd5d8:	1007ad74 	.word	0x1007ad74

023fd5dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd5dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd5de:	4c08      	ldr	r4, [pc, #32]	; (23fd600 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd5e0:	e8d4 3f8f 	ldab	r3, [r4]
 23fd5e4:	07db      	lsls	r3, r3, #31
 23fd5e6:	d409      	bmi.n	23fd5fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd5e8:	4620      	mov	r0, r4
 23fd5ea:	f7fe fa8d 	bl	23fbb08 <__cxa_guard_acquire>
 23fd5ee:	b128      	cbz	r0, 23fd5fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd5f0:	4620      	mov	r0, r4
 23fd5f2:	f7fe fa8e 	bl	23fbb12 <__cxa_guard_release>
 23fd5f6:	4803      	ldr	r0, [pc, #12]	; (23fd604 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd5f8:	f002 f804 	bl	23ff604 <atexit>
    return &factory;
}
 23fd5fc:	4802      	ldr	r0, [pc, #8]	; (23fd608 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd5fe:	bd10      	pop	{r4, pc}
 23fd600:	1007ae90 	.word	0x1007ae90
 23fd604:	023fd3a7 	.word	0x023fd3a7
 23fd608:	1007ad78 	.word	0x1007ad78

023fd60c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd60c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd60e:	2500      	movs	r5, #0
 23fd610:	4604      	mov	r4, r0
 23fd612:	e9c0 5500 	strd	r5, r5, [r0]
 23fd616:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd61a:	6085      	str	r5, [r0, #8]
 23fd61c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd61e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd622:	f7fe fe81 	bl	23fc328 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd626:	f7ff ffc1 	bl	23fd5ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd62a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd62c:	f7ff ffd6 	bl	23fd5dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd630:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd632:	6220      	str	r0, [r4, #32]
}
 23fd634:	4620      	mov	r0, r4
 23fd636:	bd38      	pop	{r3, r4, r5, pc}

023fd638 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd638:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd63a:	4c0a      	ldr	r4, [pc, #40]	; (23fd664 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd63c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd640:	07db      	lsls	r3, r3, #31
 23fd642:	d40c      	bmi.n	23fd65e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd644:	4620      	mov	r0, r4
 23fd646:	f7fe fa5f 	bl	23fbb08 <__cxa_guard_acquire>
 23fd64a:	b140      	cbz	r0, 23fd65e <_ZN5spark10LogManager8instanceEv+0x26>
 23fd64c:	4806      	ldr	r0, [pc, #24]	; (23fd668 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd64e:	f7ff ffdd 	bl	23fd60c <_ZN5spark10LogManagerC1Ev>
 23fd652:	4620      	mov	r0, r4
 23fd654:	f7fe fa5d 	bl	23fbb12 <__cxa_guard_release>
 23fd658:	4804      	ldr	r0, [pc, #16]	; (23fd66c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd65a:	f001 ffd3 	bl	23ff604 <atexit>
    return &mgr;
}
 23fd65e:	4802      	ldr	r0, [pc, #8]	; (23fd668 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd660:	bd10      	pop	{r4, pc}
 23fd662:	bf00      	nop
 23fd664:	1007ae88 	.word	0x1007ae88
 23fd668:	1007ae98 	.word	0x1007ae98
 23fd66c:	023fdbad 	.word	0x023fdbad

023fd670 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd670:	2300      	movs	r3, #0
 23fd672:	4a02      	ldr	r2, [pc, #8]	; (23fd67c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd674:	4902      	ldr	r1, [pc, #8]	; (23fd680 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd676:	4803      	ldr	r0, [pc, #12]	; (23fd684 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd678:	f7fe bfec 	b.w	23fc654 <log_set_callbacks>
 23fd67c:	023fd995 	.word	0x023fd995
 23fd680:	023fd921 	.word	0x023fd921
 23fd684:	023fd8a1 	.word	0x023fd8a1

023fd688 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd688:	2300      	movs	r3, #0
 23fd68a:	461a      	mov	r2, r3
 23fd68c:	4619      	mov	r1, r3
 23fd68e:	4618      	mov	r0, r3
 23fd690:	f7fe bfe0 	b.w	23fc654 <log_set_callbacks>

023fd694 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd696:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd698:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd69a:	4668      	mov	r0, sp
 23fd69c:	f7ff fea2 	bl	23fd3e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd6a0:	466a      	mov	r2, sp
 23fd6a2:	4629      	mov	r1, r5
 23fd6a4:	4620      	mov	r0, r4
 23fd6a6:	f7ff fb85 	bl	23fcdb4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd6aa:	a801      	add	r0, sp, #4
 23fd6ac:	f7ff fc72 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6b0:	4620      	mov	r0, r4
 23fd6b2:	b003      	add	sp, #12
 23fd6b4:	bd30      	pop	{r4, r5, pc}

023fd6b6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd6b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd6b8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd6ba:	68cd      	ldr	r5, [r1, #12]
 23fd6bc:	4668      	mov	r0, sp
 23fd6be:	f7ff fe91 	bl	23fd3e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd6c2:	466a      	mov	r2, sp
 23fd6c4:	4629      	mov	r1, r5
 23fd6c6:	4620      	mov	r0, r4
 23fd6c8:	f7ff fb50 	bl	23fcd6c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd6cc:	a801      	add	r0, sp, #4
 23fd6ce:	f7ff fc61 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6d2:	4620      	mov	r0, r4
 23fd6d4:	b003      	add	sp, #12
 23fd6d6:	bd30      	pop	{r4, r5, pc}

023fd6d8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd6da:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd6dc:	690d      	ldr	r5, [r1, #16]
 23fd6de:	4668      	mov	r0, sp
 23fd6e0:	f7ff fe80 	bl	23fd3e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd6e4:	466a      	mov	r2, sp
 23fd6e6:	4629      	mov	r1, r5
 23fd6e8:	4620      	mov	r0, r4
 23fd6ea:	f7ff fae8 	bl	23fccbe <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd6ee:	a801      	add	r0, sp, #4
 23fd6f0:	f7ff fc50 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6f4:	4620      	mov	r0, r4
 23fd6f6:	b003      	add	sp, #12
 23fd6f8:	bd30      	pop	{r4, r5, pc}
	...

023fd6fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd6fc:	b570      	push	{r4, r5, r6, lr}
 23fd6fe:	b08a      	sub	sp, #40	; 0x28
 23fd700:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd702:	4601      	mov	r1, r0
 23fd704:	a804      	add	r0, sp, #16
 23fd706:	f7ff ffc5 	bl	23fd694 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd70a:	4e14      	ldr	r6, [pc, #80]	; (23fd75c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd70c:	a804      	add	r0, sp, #16
 23fd70e:	f7ff fb69 	bl	23fcde4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fd712:	b1e8      	cbz	r0, 23fd750 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd714:	4668      	mov	r0, sp
 23fd716:	a904      	add	r1, sp, #16
 23fd718:	f7ff ffcd 	bl	23fd6b6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd71c:	4631      	mov	r1, r6
 23fd71e:	9802      	ldr	r0, [sp, #8]
 23fd720:	f7ff fe3a 	bl	23fd398 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd724:	4604      	mov	r4, r0
 23fd726:	b110      	cbz	r0, 23fd72e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd728:	1e2c      	subs	r4, r5, #0
 23fd72a:	bf18      	it	ne
 23fd72c:	2401      	movne	r4, #1
 23fd72e:	a801      	add	r0, sp, #4
 23fd730:	f7ff fc30 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd734:	2c00      	cmp	r4, #0
 23fd736:	d0e9      	beq.n	23fd70c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd738:	4668      	mov	r0, sp
 23fd73a:	a904      	add	r1, sp, #16
 23fd73c:	f7ff ffcc 	bl	23fd6d8 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd740:	4668      	mov	r0, sp
 23fd742:	f7ff faf2 	bl	23fcd2a <_ZNK5spark9JSONValue5toIntEv>
 23fd746:	6028      	str	r0, [r5, #0]
 23fd748:	a801      	add	r0, sp, #4
 23fd74a:	f7ff fc23 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd74e:	e7dd      	b.n	23fd70c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd750:	a805      	add	r0, sp, #20
 23fd752:	f7ff fc1f 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd756:	b00a      	add	sp, #40	; 0x28
 23fd758:	bd70      	pop	{r4, r5, r6, pc}
 23fd75a:	bf00      	nop
 23fd75c:	023ffb10 	.word	0x023ffb10

023fd760 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd762:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd764:	4913      	ldr	r1, [pc, #76]	; (23fd7b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd766:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd768:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd76a:	f7fe f98b 	bl	23fba84 <strcmp>
 23fd76e:	b950      	cbnz	r0, 23fd786 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd770:	f7ff fc7a 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fd774:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd778:	f7ff fc66 	bl	23fd048 <_ZN9USBSerial5beginEl>
}
 23fd77c:	b003      	add	sp, #12
 23fd77e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd782:	f7ff bc71 	b.w	23fd068 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd786:	4620      	mov	r0, r4
 23fd788:	490b      	ldr	r1, [pc, #44]	; (23fd7b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd78a:	f7fe f97b 	bl	23fba84 <strcmp>
 23fd78e:	b978      	cbnz	r0, 23fd7b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd790:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd794:	a901      	add	r1, sp, #4
 23fd796:	4628      	mov	r0, r5
        int baud = 9600;
 23fd798:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd79a:	f7ff ffaf 	bl	23fd6fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd79e:	f001 fcd5 	bl	23ff14c <_Z22__fetch_global_Serial1v>
 23fd7a2:	9901      	ldr	r1, [sp, #4]
 23fd7a4:	f001 fb72 	bl	23fee8c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd7a8:	f001 fcd0 	bl	23ff14c <_Z22__fetch_global_Serial1v>
}
 23fd7ac:	b003      	add	sp, #12
 23fd7ae:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd7b0:	2000      	movs	r0, #0
 23fd7b2:	e7fb      	b.n	23fd7ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd7b4:	023ffb15 	.word	0x023ffb15
 23fd7b8:	023ffb1c 	.word	0x023ffb1c

023fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd7bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd7be:	2614      	movs	r6, #20
 23fd7c0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd7c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd7c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd7ca:	42ae      	cmp	r6, r5
 23fd7cc:	d005      	beq.n	23fd7da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd7ce:	f105 0008 	add.w	r0, r5, #8
 23fd7d2:	f7ff fff3 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd7d6:	3514      	adds	r5, #20
 23fd7d8:	e7f7      	b.n	23fd7ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd7da:	6820      	ldr	r0, [r4, #0]
 23fd7dc:	f7ff f852 	bl	23fc884 <free>
}
 23fd7e0:	4620      	mov	r0, r4
 23fd7e2:	bd70      	pop	{r4, r5, r6, pc}

023fd7e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd7e4:	b570      	push	{r4, r5, r6, lr}
 23fd7e6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd7e8:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd7ec:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd7f0:	42ae      	cmp	r6, r5
 23fd7f2:	d004      	beq.n	23fd7fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd7f4:	4628      	mov	r0, r5
 23fd7f6:	f001 fbad 	bl	23fef54 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd7fa:	3510      	adds	r5, #16
 23fd7fc:	e7f8      	b.n	23fd7f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd7fe:	6820      	ldr	r0, [r4, #0]
 23fd800:	f7ff f840 	bl	23fc884 <free>
}
 23fd804:	4620      	mov	r0, r4
 23fd806:	bd70      	pop	{r4, r5, r6, pc}

023fd808 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd808:	b510      	push	{r4, lr}
 23fd80a:	4604      	mov	r4, r0
 23fd80c:	300c      	adds	r0, #12
 23fd80e:	f7ff ffd5 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd812:	4620      	mov	r0, r4
 23fd814:	f7ff ffe6 	bl	23fd7e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd818:	4620      	mov	r0, r4
 23fd81a:	bd10      	pop	{r4, pc}

023fd81c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd81c:	b510      	push	{r4, lr}
 23fd81e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd820:	4b03      	ldr	r3, [pc, #12]	; (23fd830 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd822:	f840 3b04 	str.w	r3, [r0], #4
 23fd826:	f7ff ffef 	bl	23fd808 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd82a:	4620      	mov	r0, r4
 23fd82c:	bd10      	pop	{r4, pc}
 23fd82e:	bf00      	nop
 23fd830:	023ff9d4 	.word	0x023ff9d4

023fd834 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd834:	b510      	push	{r4, lr}
 23fd836:	4604      	mov	r4, r0
 23fd838:	f7ff fff0 	bl	23fd81c <_ZN5spark16StreamLogHandlerD1Ev>
 23fd83c:	4620      	mov	r0, r4
 23fd83e:	2124      	movs	r1, #36	; 0x24
 23fd840:	f7fe f953 	bl	23fbaea <_ZdlPvj>
 23fd844:	4620      	mov	r0, r4
 23fd846:	bd10      	pop	{r4, pc}

023fd848 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd848:	b510      	push	{r4, lr}
 23fd84a:	4604      	mov	r4, r0
 23fd84c:	4b02      	ldr	r3, [pc, #8]	; (23fd858 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd84e:	6003      	str	r3, [r0, #0]
 23fd850:	f7ff ffe4 	bl	23fd81c <_ZN5spark16StreamLogHandlerD1Ev>
 23fd854:	4620      	mov	r0, r4
 23fd856:	bd10      	pop	{r4, pc}
 23fd858:	023ffbbc 	.word	0x023ffbbc

023fd85c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd85c:	b510      	push	{r4, lr}
 23fd85e:	4604      	mov	r4, r0
 23fd860:	f7ff fff2 	bl	23fd848 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd864:	4620      	mov	r0, r4
 23fd866:	2124      	movs	r1, #36	; 0x24
 23fd868:	f7fe f93f 	bl	23fbaea <_ZdlPvj>
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	bd10      	pop	{r4, pc}

023fd870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fd870:	2200      	movs	r2, #0
 23fd872:	e9c0 2200 	strd	r2, r2, [r0]
 23fd876:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd878:	b510      	push	{r4, lr}
 23fd87a:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd87c:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd87e:	6004      	str	r4, [r0, #0]
 23fd880:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd882:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd884:	6044      	str	r4, [r0, #4]
 23fd886:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd888:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd88a:	6084      	str	r4, [r0, #8]
}
 23fd88c:	bd10      	pop	{r4, pc}

023fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fd88e:	b510      	push	{r4, lr}
 23fd890:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd892:	6803      	ldr	r3, [r0, #0]
 23fd894:	6818      	ldr	r0, [r3, #0]
 23fd896:	f7fe fd71 	bl	23fc37c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd89a:	4620      	mov	r0, r4
 23fd89c:	bd10      	pop	{r4, pc}
	...

023fd8a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd8a4:	b087      	sub	sp, #28
 23fd8a6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd8a8:	4b1c      	ldr	r3, [pc, #112]	; (23fd91c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd8aa:	4680      	mov	r8, r0
 23fd8ac:	685b      	ldr	r3, [r3, #4]
 23fd8ae:	4689      	mov	r9, r1
 23fd8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd8b4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd8b6:	b96b      	cbnz	r3, 23fd8d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd8b8:	f7ff febe 	bl	23fd638 <_ZN5spark10LogManager8instanceEv>
 23fd8bc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd8be:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd8c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd8c4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd8c6:	f7ff fd65 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd8ca:	7b23      	ldrb	r3, [r4, #12]
 23fd8cc:	b12b      	cbz	r3, 23fd8da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd8ce:	a805      	add	r0, sp, #20
 23fd8d0:	f7ff ffdd 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd8d4:	b007      	add	sp, #28
 23fd8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd8da:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd8dc:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd8e0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd8e2:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd8e6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd8ea:	45aa      	cmp	sl, r5
 23fd8ec:	d012      	beq.n	23fd914 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd8ee:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd8f2:	4631      	mov	r1, r6
 23fd8f4:	1d38      	adds	r0, r7, #4
 23fd8f6:	f7ff fdf7 	bl	23fd4e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd8fa:	4581      	cmp	r9, r0
 23fd8fc:	d3f5      	bcc.n	23fd8ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd8fe:	9a03      	ldr	r2, [sp, #12]
 23fd900:	683b      	ldr	r3, [r7, #0]
 23fd902:	9200      	str	r2, [sp, #0]
 23fd904:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd908:	464a      	mov	r2, r9
 23fd90a:	4633      	mov	r3, r6
 23fd90c:	4641      	mov	r1, r8
 23fd90e:	4638      	mov	r0, r7
 23fd910:	47d8      	blx	fp
 23fd912:	e7ea      	b.n	23fd8ea <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd914:	2300      	movs	r3, #0
 23fd916:	7323      	strb	r3, [r4, #12]
 23fd918:	e7d9      	b.n	23fd8ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd91a:	bf00      	nop
 23fd91c:	e000ed00 	.word	0xe000ed00

023fd920 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd924:	469b      	mov	fp, r3
 23fd926:	4b1a      	ldr	r3, [pc, #104]	; (23fd990 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd928:	4680      	mov	r8, r0
 23fd92a:	685b      	ldr	r3, [r3, #4]
 23fd92c:	4689      	mov	r9, r1
 23fd92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd932:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd934:	b96b      	cbnz	r3, 23fd952 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd936:	f7ff fe7f 	bl	23fd638 <_ZN5spark10LogManager8instanceEv>
 23fd93a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd93c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd940:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd942:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd944:	f7ff fd26 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd948:	7b23      	ldrb	r3, [r4, #12]
 23fd94a:	b12b      	cbz	r3, 23fd958 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd94c:	a801      	add	r0, sp, #4
 23fd94e:	f7ff ff9e 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd952:	b003      	add	sp, #12
 23fd954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd958:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd95a:	b2f6      	uxtb	r6, r6
 23fd95c:	7323      	strb	r3, [r4, #12]
 23fd95e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd962:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd966:	4555      	cmp	r5, sl
 23fd968:	d00e      	beq.n	23fd988 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd96a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd96e:	4659      	mov	r1, fp
 23fd970:	1d38      	adds	r0, r7, #4
 23fd972:	f7ff fdb9 	bl	23fd4e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd976:	4286      	cmp	r6, r0
 23fd978:	d3f5      	bcc.n	23fd966 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd97a:	683b      	ldr	r3, [r7, #0]
 23fd97c:	464a      	mov	r2, r9
 23fd97e:	4641      	mov	r1, r8
 23fd980:	4638      	mov	r0, r7
 23fd982:	68db      	ldr	r3, [r3, #12]
 23fd984:	4798      	blx	r3
 23fd986:	e7ee      	b.n	23fd966 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd988:	2300      	movs	r3, #0
 23fd98a:	7323      	strb	r3, [r4, #12]
 23fd98c:	e7de      	b.n	23fd94c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd98e:	bf00      	nop
 23fd990:	e000ed00 	.word	0xe000ed00

023fd994 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd998:	4b16      	ldr	r3, [pc, #88]	; (23fd9f4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd99a:	4605      	mov	r5, r0
 23fd99c:	685b      	ldr	r3, [r3, #4]
 23fd99e:	460f      	mov	r7, r1
 23fd9a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd9a4:	bb1b      	cbnz	r3, 23fd9ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd9a6:	f7ff fe47 	bl	23fd638 <_ZN5spark10LogManager8instanceEv>
 23fd9aa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd9ac:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd9b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd9b2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd9b4:	f7ff fcee 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd9b8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd9bc:	2446      	movs	r4, #70	; 0x46
 23fd9be:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd9c2:	45b0      	cmp	r8, r6
 23fd9c4:	d109      	bne.n	23fd9da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd9c6:	a801      	add	r0, sp, #4
 23fd9c8:	f7ff ff61 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd9cc:	42a5      	cmp	r5, r4
 23fd9ce:	bfb4      	ite	lt
 23fd9d0:	2000      	movlt	r0, #0
 23fd9d2:	2001      	movge	r0, #1
}
 23fd9d4:	b002      	add	sp, #8
 23fd9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd9da:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd9de:	4639      	mov	r1, r7
 23fd9e0:	3004      	adds	r0, #4
 23fd9e2:	f7ff fd81 	bl	23fd4e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd9e6:	4284      	cmp	r4, r0
 23fd9e8:	bfa8      	it	ge
 23fd9ea:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd9ec:	e7e9      	b.n	23fd9c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd9ee:	2000      	movs	r0, #0
 23fd9f0:	e7f0      	b.n	23fd9d4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd9f2:	bf00      	nop
 23fd9f4:	e000ed00 	.word	0xe000ed00

023fd9f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd9fa:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd9fe:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fda00:	4604      	mov	r4, r0
 23fda02:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fda04:	db0d      	blt.n	23fda22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fda06:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fda08:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fda0a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fda0c:	dd04      	ble.n	23fda18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fda0e:	00b9      	lsls	r1, r7, #2
 23fda10:	f7fe ff46 	bl	23fc8a0 <realloc>
            if (!d) {
 23fda14:	b918      	cbnz	r0, 23fda1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fda16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fda18:	f7fe ff34 	bl	23fc884 <free>
        T* d = nullptr;
 23fda1c:	2000      	movs	r0, #0
        data_ = d;
 23fda1e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fda20:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fda22:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fda24:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fda26:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fda2a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fda2c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fda30:	1d08      	adds	r0, r1, #4
 23fda32:	f001 fe12 	bl	23ff65a <memmove>
    new(p) T(std::move(value));
 23fda36:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fda3a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fda3c:	2001      	movs	r0, #1
    ++size_;
 23fda3e:	3301      	adds	r3, #1
 23fda40:	6063      	str	r3, [r4, #4]
    return true;
 23fda42:	e7e8      	b.n	23fda16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fda44 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fda44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fda46:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fda48:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fda4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fda4e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fda50:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fda52:	f7ff fc9f 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fda56:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fda5a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fda5e:	4293      	cmp	r3, r2
 23fda60:	4619      	mov	r1, r3
 23fda62:	d00a      	beq.n	23fda7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fda64:	6809      	ldr	r1, [r1, #0]
 23fda66:	3304      	adds	r3, #4
 23fda68:	42a9      	cmp	r1, r5
 23fda6a:	d1f8      	bne.n	23fda5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fda6c:	a801      	add	r0, sp, #4
 23fda6e:	f7ff ff0e 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fda72:	2500      	movs	r5, #0
}
 23fda74:	4628      	mov	r0, r5
 23fda76:	b003      	add	sp, #12
 23fda78:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fda7a:	4629      	mov	r1, r5
 23fda7c:	4620      	mov	r0, r4
 23fda7e:	f7ff ffbb 	bl	23fd9f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fda82:	4605      	mov	r5, r0
 23fda84:	2800      	cmp	r0, #0
 23fda86:	d0f1      	beq.n	23fda6c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fda88:	6863      	ldr	r3, [r4, #4]
 23fda8a:	2b01      	cmp	r3, #1
 23fda8c:	d101      	bne.n	23fda92 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fda8e:	f7ff fdef 	bl	23fd670 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fda92:	a801      	add	r0, sp, #4
 23fda94:	f7ff fefb 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fda98:	e7ec      	b.n	23fda74 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fda9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fda9a:	460b      	mov	r3, r1
 23fda9c:	b570      	push	{r4, r5, r6, lr}
 23fda9e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fdaa0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fdaa4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fdaa8:	4282      	cmp	r2, r0
 23fdaaa:	d00f      	beq.n	23fdacc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fdaac:	4601      	mov	r1, r0
            if (*p == value) {
 23fdaae:	681d      	ldr	r5, [r3, #0]
 23fdab0:	f851 6b04 	ldr.w	r6, [r1], #4
 23fdab4:	42ae      	cmp	r6, r5
 23fdab6:	d107      	bne.n	23fdac8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdab8:	1a52      	subs	r2, r2, r1
 23fdaba:	f001 fdce 	bl	23ff65a <memmove>
    return true;
 23fdabe:	2001      	movs	r0, #1
    --size_;
 23fdac0:	6863      	ldr	r3, [r4, #4]
 23fdac2:	3b01      	subs	r3, #1
 23fdac4:	6063      	str	r3, [r4, #4]
}
 23fdac6:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fdac8:	4608      	mov	r0, r1
 23fdaca:	e7ed      	b.n	23fdaa8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fdacc:	2000      	movs	r0, #0
 23fdace:	e7fa      	b.n	23fdac6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fdad0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdad2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fdad4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdad8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fdada:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdadc:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fdade:	f7ff fc59 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fdae2:	4620      	mov	r0, r4
 23fdae4:	a901      	add	r1, sp, #4
 23fdae6:	f7ff ffd8 	bl	23fda9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fdaea:	b118      	cbz	r0, 23fdaf4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fdaec:	6863      	ldr	r3, [r4, #4]
 23fdaee:	b90b      	cbnz	r3, 23fdaf4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fdaf0:	f7ff fdca 	bl	23fd688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdaf4:	a803      	add	r0, sp, #12
 23fdaf6:	f7ff feca 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdafa:	b004      	add	sp, #16
 23fdafc:	bd10      	pop	{r4, pc}

023fdafe <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fdafe:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fdb00:	b570      	push	{r4, r5, r6, lr}
 23fdb02:	4604      	mov	r4, r0
 23fdb04:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fdb08:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdb0c:	42ae      	cmp	r6, r5
 23fdb0e:	d015      	beq.n	23fdb3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fdb10:	4620      	mov	r0, r4
 23fdb12:	f105 0110 	add.w	r1, r5, #16
 23fdb16:	f7ff ffc0 	bl	23fda9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fdb1a:	6863      	ldr	r3, [r4, #4]
 23fdb1c:	b90b      	cbnz	r3, 23fdb22 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fdb1e:	f7ff fdb3 	bl	23fd688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fdb22:	69e0      	ldr	r0, [r4, #28]
 23fdb24:	6929      	ldr	r1, [r5, #16]
 23fdb26:	6803      	ldr	r3, [r0, #0]
 23fdb28:	68db      	ldr	r3, [r3, #12]
 23fdb2a:	4798      	blx	r3
        if (h.stream) {
 23fdb2c:	6969      	ldr	r1, [r5, #20]
 23fdb2e:	b119      	cbz	r1, 23fdb38 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fdb30:	6a20      	ldr	r0, [r4, #32]
 23fdb32:	6803      	ldr	r3, [r0, #0]
 23fdb34:	68db      	ldr	r3, [r3, #12]
 23fdb36:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fdb38:	3518      	adds	r5, #24
 23fdb3a:	e7e7      	b.n	23fdb0c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fdb3c:	2618      	movs	r6, #24
 23fdb3e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdb42:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdb46:	42ae      	cmp	r6, r5
 23fdb48:	d004      	beq.n	23fdb54 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fdb4a:	4628      	mov	r0, r5
 23fdb4c:	f001 fa02 	bl	23fef54 <_ZN6StringD1Ev>
 23fdb50:	3518      	adds	r5, #24
 23fdb52:	e7f8      	b.n	23fdb46 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fdb54:	2300      	movs	r3, #0
 23fdb56:	6163      	str	r3, [r4, #20]
}
 23fdb58:	bd70      	pop	{r4, r5, r6, pc}

023fdb5a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fdb5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fdb5c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fdb5e:	f7ff fd93 	bl	23fd688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fdb62:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fdb66:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdb68:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdb6a:	f7ff fc13 	bl	23fd394 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fdb6e:	4620      	mov	r0, r4
 23fdb70:	f7ff ffc5 	bl	23fdafe <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fdb74:	a801      	add	r0, sp, #4
 23fdb76:	f7ff fe8a 	bl	23fd88e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fdb7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fdb7c:	b108      	cbz	r0, 23fdb82 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fdb7e:	f7fe fbe1 	bl	23fc344 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fdb82:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fdb86:	2618      	movs	r6, #24
 23fdb88:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fdb8c:	42ae      	cmp	r6, r5
 23fdb8e:	d004      	beq.n	23fdb9a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fdb90:	4628      	mov	r0, r5
 23fdb92:	f001 f9df 	bl	23fef54 <_ZN6StringD1Ev>
 23fdb96:	3518      	adds	r5, #24
 23fdb98:	e7f8      	b.n	23fdb8c <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fdb9a:	6920      	ldr	r0, [r4, #16]
 23fdb9c:	f7fe fe72 	bl	23fc884 <free>
 23fdba0:	6820      	ldr	r0, [r4, #0]
 23fdba2:	f7fe fe6f 	bl	23fc884 <free>
}
 23fdba6:	4620      	mov	r0, r4
 23fdba8:	b002      	add	sp, #8
 23fdbaa:	bd70      	pop	{r4, r5, r6, pc}

023fdbac <__tcf_2>:
    static LogManager mgr;
 23fdbac:	4801      	ldr	r0, [pc, #4]	; (23fdbb4 <__tcf_2+0x8>)
 23fdbae:	f7ff bfd4 	b.w	23fdb5a <_ZN5spark10LogManagerD1Ev>
 23fdbb2:	bf00      	nop
 23fdbb4:	1007ae98 	.word	0x1007ae98

023fdbb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fdbb8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fdbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdbbc:	4604      	mov	r4, r0
 23fdbbe:	460d      	mov	r5, r1
 23fdbc0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdbc2:	d915      	bls.n	23fdbf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fdbc4:	4290      	cmp	r0, r2
 23fdbc6:	d214      	bcs.n	23fdbf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fdbc8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fdbcc:	1a75      	subs	r5, r6, r1
 23fdbce:	f1a1 0714 	sub.w	r7, r1, #20
 23fdbd2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdbd4:	42b7      	cmp	r7, r6
 23fdbd6:	d01a      	beq.n	23fdc0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fdbd8:	b11c      	cbz	r4, 23fdbe2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fdbda:	4631      	mov	r1, r6
 23fdbdc:	4620      	mov	r0, r4
 23fdbde:	f7ff fc33 	bl	23fd448 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fdbe2:	f106 0008 	add.w	r0, r6, #8
 23fdbe6:	f7ff fde9 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fdbea:	3e14      	subs	r6, #20
 23fdbec:	3c14      	subs	r4, #20
 23fdbee:	e7f1      	b.n	23fdbd4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fdbf0:	d00d      	beq.n	23fdc0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fdbf2:	42b5      	cmp	r5, r6
 23fdbf4:	d00b      	beq.n	23fdc0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fdbf6:	b11c      	cbz	r4, 23fdc00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fdbf8:	4629      	mov	r1, r5
 23fdbfa:	4620      	mov	r0, r4
 23fdbfc:	f7ff fc24 	bl	23fd448 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fdc00:	f105 0008 	add.w	r0, r5, #8
 23fdc04:	f7ff fdda 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fdc08:	3514      	adds	r5, #20
 23fdc0a:	3414      	adds	r4, #20
 23fdc0c:	e7f1      	b.n	23fdbf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fdc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdc10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fdc10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fdc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdc14:	4604      	mov	r4, r0
 23fdc16:	460d      	mov	r5, r1
 23fdc18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fdc1a:	d914      	bls.n	23fdc46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fdc1c:	4290      	cmp	r0, r2
 23fdc1e:	d213      	bcs.n	23fdc48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fdc20:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fdc24:	1a75      	subs	r5, r6, r1
 23fdc26:	f1a1 0710 	sub.w	r7, r1, #16
 23fdc2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdc2c:	42b7      	cmp	r7, r6
 23fdc2e:	d018      	beq.n	23fdc62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fdc30:	b11c      	cbz	r4, 23fdc3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fdc32:	4631      	mov	r1, r6
 23fdc34:	4620      	mov	r0, r4
 23fdc36:	f001 f9f5 	bl	23ff024 <_ZN6StringC1EOS_>
                end->~T();
 23fdc3a:	4630      	mov	r0, r6
 23fdc3c:	f001 f98a 	bl	23fef54 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fdc40:	3e10      	subs	r6, #16
 23fdc42:	3c10      	subs	r4, #16
 23fdc44:	e7f2      	b.n	23fdc2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fdc46:	d00c      	beq.n	23fdc62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fdc48:	42b5      	cmp	r5, r6
 23fdc4a:	d00a      	beq.n	23fdc62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fdc4c:	b11c      	cbz	r4, 23fdc56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fdc4e:	4629      	mov	r1, r5
 23fdc50:	4620      	mov	r0, r4
 23fdc52:	f001 f9e7 	bl	23ff024 <_ZN6StringC1EOS_>
                p->~T();
 23fdc56:	4628      	mov	r0, r5
 23fdc58:	f001 f97c 	bl	23fef54 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fdc5c:	3510      	adds	r5, #16
 23fdc5e:	3410      	adds	r4, #16
 23fdc60:	e7f2      	b.n	23fdc48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fdc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdc64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fdc64:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fdc66:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fdc68:	4605      	mov	r5, r0
        if (n > 0) {
 23fdc6a:	dd11      	ble.n	23fdc90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fdc6c:	0130      	lsls	r0, r6, #4
 23fdc6e:	f7fe fdfb 	bl	23fc868 <malloc>
            if (!d) {
 23fdc72:	4604      	mov	r4, r0
 23fdc74:	b158      	cbz	r0, 23fdc8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fdc76:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdc7a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fdc7e:	f7ff ffc7 	bl	23fdc10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fdc82:	6828      	ldr	r0, [r5, #0]
 23fdc84:	f7fe fdfe 	bl	23fc884 <free>
        return true;
 23fdc88:	2001      	movs	r0, #1
        data_ = d;
 23fdc8a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fdc8c:	60ae      	str	r6, [r5, #8]
    }
 23fdc8e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fdc90:	2400      	movs	r4, #0
 23fdc92:	e7f6      	b.n	23fdc82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fdc94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdc98:	4690      	mov	r8, r2
        capacity_(0) {
 23fdc9a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdc9c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fdc9e:	b095      	sub	sp, #84	; 0x54
 23fdca0:	9103      	str	r1, [sp, #12]
    return size_;
 23fdca2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fdca6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fdca8:	4299      	cmp	r1, r3
        capacity_(0) {
 23fdcaa:	e9c0 3300 	strd	r3, r3, [r0]
 23fdcae:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fdcb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fdcb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fdcba:	7602      	strb	r2, [r0, #24]
 23fdcbc:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fdcbe:	dc23      	bgt.n	23fdd08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fdcc0:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fdcc4:	2314      	movs	r3, #20
 23fdcc6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fdcca:	42af      	cmp	r7, r5
 23fdccc:	d03b      	beq.n	23fdd46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fdcce:	4629      	mov	r1, r5
 23fdcd0:	a80b      	add	r0, sp, #44	; 0x2c
 23fdcd2:	f001 f9a7 	bl	23ff024 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fdcd6:	a90b      	add	r1, sp, #44	; 0x2c
 23fdcd8:	a80f      	add	r0, sp, #60	; 0x3c
 23fdcda:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fdcdc:	f001 f9a2 	bl	23ff024 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdce0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fdce4:	4299      	cmp	r1, r3
 23fdce6:	da1b      	bge.n	23fdd20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fdce8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fdcea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fdcec:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fdcf0:	4631      	mov	r1, r6
 23fdcf2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fdcf6:	f106 0010 	add.w	r0, r6, #16
 23fdcfa:	f7ff ff89 	bl	23fdc10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fdcfe:	b9ee      	cbnz	r6, 23fdd3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fdd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fdd02:	3301      	adds	r3, #1
 23fdd04:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fdd06:	e011      	b.n	23fdd2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fdd08:	a808      	add	r0, sp, #32
 23fdd0a:	f7ff ffab 	bl	23fdc64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdd0e:	2800      	cmp	r0, #0
 23fdd10:	d1d6      	bne.n	23fdcc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fdd12:	a808      	add	r0, sp, #32
 23fdd14:	f7ff fd66 	bl	23fd7e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fdd18:	4620      	mov	r0, r4
 23fdd1a:	b015      	add	sp, #84	; 0x54
 23fdd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdd20:	3101      	adds	r1, #1
 23fdd22:	a808      	add	r0, sp, #32
 23fdd24:	f7ff ff9e 	bl	23fdc64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fdd28:	2800      	cmp	r0, #0
 23fdd2a:	d1dd      	bne.n	23fdce8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fdd2c:	a80f      	add	r0, sp, #60	; 0x3c
 23fdd2e:	f001 f911 	bl	23fef54 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fdd32:	a80b      	add	r0, sp, #44	; 0x2c
 23fdd34:	f001 f90e 	bl	23fef54 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fdd38:	3514      	adds	r5, #20
 23fdd3a:	e7c6      	b.n	23fdcca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fdd3c:	4630      	mov	r0, r6
 23fdd3e:	a90f      	add	r1, sp, #60	; 0x3c
 23fdd40:	f001 f970 	bl	23ff024 <_ZN6StringC1EOS_>
 23fdd44:	e7dc      	b.n	23fdd00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fdd46:	2600      	movs	r6, #0
 23fdd48:	f04f 0914 	mov.w	r9, #20
 23fdd4c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fdd50:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fdd52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fdd56:	429e      	cmp	r6, r3
 23fdd58:	da7c      	bge.n	23fde54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fdd5a:	0133      	lsls	r3, r6, #4
 23fdd5c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fdd5e:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fdd60:	b90b      	cbnz	r3, 23fdd66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fdd62:	3601      	adds	r6, #1
 23fdd64:	e7f5      	b.n	23fdd52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fdd66:	2300      	movs	r3, #0
 23fdd68:	9307      	str	r3, [sp, #28]
 23fdd6a:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fdd6e:	ad0b      	add	r5, sp, #44	; 0x2c
 23fdd70:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fdd72:	a907      	add	r1, sp, #28
 23fdd74:	a806      	add	r0, sp, #24
 23fdd76:	f7ff fae6 	bl	23fd346 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdd7a:	4682      	mov	sl, r0
 23fdd7c:	2800      	cmp	r0, #0
 23fdd7e:	d0f0      	beq.n	23fdd62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fdd80:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdd84:	4601      	mov	r1, r0
            bool found = false;
 23fdd86:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdd8a:	4628      	mov	r0, r5
 23fdd8c:	9a07      	ldr	r2, [sp, #28]
 23fdd8e:	f10d 0317 	add.w	r3, sp, #23
 23fdd92:	f7ff fb6d 	bl	23fd470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdd96:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdd9a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fdd9c:	2f00      	cmp	r7, #0
 23fdd9e:	d14a      	bne.n	23fde36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fdda0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fdda4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fdda8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fddac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fddb0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fddb4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fddb8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fddba:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fddbe:	4293      	cmp	r3, r2
 23fddc0:	db17      	blt.n	23fddf2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fddc2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fddc6:	f1ba 0f00 	cmp.w	sl, #0
 23fddca:	dd30      	ble.n	23fde2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fddcc:	fb09 f00a 	mul.w	r0, r9, sl
 23fddd0:	f7fe fd4a 	bl	23fc868 <malloc>
            if (!d) {
 23fddd4:	4683      	mov	fp, r0
 23fddd6:	b360      	cbz	r0, 23fde32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fddd8:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fdddc:	fb09 1202 	mla	r2, r9, r2, r1
 23fdde0:	f7ff feea 	bl	23fdbb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fdde4:	6828      	ldr	r0, [r5, #0]
 23fdde6:	f7fe fd4d 	bl	23fc884 <free>
        data_ = d;
 23fddea:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fddee:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fddf2:	682b      	ldr	r3, [r5, #0]
 23fddf4:	9a01      	ldr	r2, [sp, #4]
 23fddf6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fddfa:	686a      	ldr	r2, [r5, #4]
 23fddfc:	4651      	mov	r1, sl
 23fddfe:	fb09 3202 	mla	r2, r9, r2, r3
 23fde02:	f10a 0014 	add.w	r0, sl, #20
 23fde06:	f7ff fed7 	bl	23fdbb8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fde0a:	f1ba 0f00 	cmp.w	sl, #0
 23fde0e:	d003      	beq.n	23fde18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fde10:	4650      	mov	r0, sl
 23fde12:	a90f      	add	r1, sp, #60	; 0x3c
 23fde14:	f7ff fb18 	bl	23fd448 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fde18:	686b      	ldr	r3, [r5, #4]
 23fde1a:	3301      	adds	r3, #1
 23fde1c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fde1e:	a811      	add	r0, sp, #68	; 0x44
 23fde20:	f7ff fccc 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fde24:	b13f      	cbz	r7, 23fde36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fde26:	a80b      	add	r0, sp, #44	; 0x2c
 23fde28:	f7ff fcc8 	bl	23fd7bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fde2c:	e771      	b.n	23fdd12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fde2e:	46bb      	mov	fp, r7
 23fde30:	e7d8      	b.n	23fdde4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fde32:	2701      	movs	r7, #1
 23fde34:	e7f3      	b.n	23fde1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fde36:	9b01      	ldr	r3, [sp, #4]
 23fde38:	682d      	ldr	r5, [r5, #0]
 23fde3a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fde3e:	9b06      	ldr	r3, [sp, #24]
 23fde40:	781b      	ldrb	r3, [r3, #0]
 23fde42:	b92b      	cbnz	r3, 23fde50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fde44:	f8d8 3000 	ldr.w	r3, [r8]
 23fde48:	9a02      	ldr	r2, [sp, #8]
 23fde4a:	4413      	add	r3, r2
 23fde4c:	7c1b      	ldrb	r3, [r3, #16]
 23fde4e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fde50:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fde52:	e78e      	b.n	23fdd72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde54:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fde56:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde58:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fde5a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde5c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fde5e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fde60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fde62:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde64:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fde66:	60a2      	str	r2, [r4, #8]
 23fde68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fde6a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde6c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fde6e:	60e2      	str	r2, [r4, #12]
 23fde70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fde72:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fde74:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fde76:	6122      	str	r2, [r4, #16]
 23fde78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fde7a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fde7c:	9b03      	ldr	r3, [sp, #12]
 23fde7e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fde80:	6162      	str	r2, [r4, #20]
 23fde82:	7623      	strb	r3, [r4, #24]
 23fde84:	e7cf      	b.n	23fde26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fde88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fde88:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fde8a:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fde8c:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fde8e:	4617      	mov	r7, r2
 23fde90:	b087      	sub	sp, #28
 23fde92:	460d      	mov	r5, r1
        stream_(&stream) {
 23fde94:	4668      	mov	r0, sp
 23fde96:	4619      	mov	r1, r3
 23fde98:	f7fe f841 	bl	23fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fde9c:	4b0b      	ldr	r3, [pc, #44]	; (23fdecc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fde9e:	4669      	mov	r1, sp
 23fdea0:	f846 3b04 	str.w	r3, [r6], #4
 23fdea4:	a803      	add	r0, sp, #12
 23fdea6:	f7fe f83a 	bl	23fbf1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fdeaa:	4639      	mov	r1, r7
 23fdeac:	aa03      	add	r2, sp, #12
 23fdeae:	4630      	mov	r0, r6
 23fdeb0:	f7ff fef0 	bl	23fdc94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdeb4:	a803      	add	r0, sp, #12
 23fdeb6:	f7fd fff1 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fdeba:	4668      	mov	r0, sp
 23fdebc:	f7fd ffee 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fdec0:	4620      	mov	r0, r4
        stream_(&stream) {
 23fdec2:	4b03      	ldr	r3, [pc, #12]	; (23fded0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fdec4:	6225      	str	r5, [r4, #32]
 23fdec6:	6023      	str	r3, [r4, #0]
}
 23fdec8:	b007      	add	sp, #28
 23fdeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fdecc:	023ff9d4 	.word	0x023ff9d4
 23fded0:	023ffba4 	.word	0x023ffba4

023fded4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fded4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fded6:	460f      	mov	r7, r1
 23fded8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdeda:	4638      	mov	r0, r7
 23fdedc:	491c      	ldr	r1, [pc, #112]	; (23fdf50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fdede:	4616      	mov	r6, r2
 23fdee0:	461d      	mov	r5, r3
 23fdee2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fdee4:	f7fd fdce 	bl	23fba84 <strcmp>
 23fdee8:	b9c0      	cbnz	r0, 23fdf1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fdeea:	b1a4      	cbz	r4, 23fdf16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fdeec:	4629      	mov	r1, r5
 23fdeee:	a801      	add	r0, sp, #4
 23fdef0:	f7ff fcbe 	bl	23fd870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdef4:	2024      	movs	r0, #36	; 0x24
 23fdef6:	4917      	ldr	r1, [pc, #92]	; (23fdf54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdef8:	f001 fa6b 	bl	23ff3d2 <_ZnwjRKSt9nothrow_t>
 23fdefc:	4605      	mov	r5, r0
 23fdefe:	b130      	cbz	r0, 23fdf0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fdf00:	ab01      	add	r3, sp, #4
 23fdf02:	4632      	mov	r2, r6
 23fdf04:	4621      	mov	r1, r4
 23fdf06:	f7ff ffbf 	bl	23fde88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdf0a:	4b13      	ldr	r3, [pc, #76]	; (23fdf58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fdf0c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdf0e:	a801      	add	r0, sp, #4
 23fdf10:	f7fd ffc4 	bl	23fbe9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fdf14:	462c      	mov	r4, r5
}
 23fdf16:	4620      	mov	r0, r4
 23fdf18:	b005      	add	sp, #20
 23fdf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fdf1c:	4638      	mov	r0, r7
 23fdf1e:	490f      	ldr	r1, [pc, #60]	; (23fdf5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fdf20:	f7fd fdb0 	bl	23fba84 <strcmp>
 23fdf24:	b990      	cbnz	r0, 23fdf4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fdf26:	2c00      	cmp	r4, #0
 23fdf28:	d0f5      	beq.n	23fdf16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fdf2a:	4629      	mov	r1, r5
 23fdf2c:	a801      	add	r0, sp, #4
 23fdf2e:	f7ff fc9f 	bl	23fd870 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fdf32:	2024      	movs	r0, #36	; 0x24
 23fdf34:	4907      	ldr	r1, [pc, #28]	; (23fdf54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fdf36:	f001 fa4c 	bl	23ff3d2 <_ZnwjRKSt9nothrow_t>
 23fdf3a:	4605      	mov	r5, r0
 23fdf3c:	2800      	cmp	r0, #0
 23fdf3e:	d0e6      	beq.n	23fdf0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fdf40:	4632      	mov	r2, r6
 23fdf42:	4621      	mov	r1, r4
 23fdf44:	ab01      	add	r3, sp, #4
 23fdf46:	f7ff ff9f 	bl	23fde88 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fdf4a:	e7e0      	b.n	23fdf0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fdf4c:	2400      	movs	r4, #0
 23fdf4e:	e7e2      	b.n	23fdf16 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fdf50:	023ffb24 	.word	0x023ffb24
 23fdf54:	023ffd48 	.word	0x023ffd48
 23fdf58:	023ffbbc 	.word	0x023ffbbc
 23fdf5c:	023ffb28 	.word	0x023ffb28

023fdf60 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fdf60:	4b01      	ldr	r3, [pc, #4]	; (23fdf68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fdf62:	4a02      	ldr	r2, [pc, #8]	; (23fdf6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fdf64:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fdf66:	4770      	bx	lr
 23fdf68:	1007ae94 	.word	0x1007ae94
 23fdf6c:	023ffb39 	.word	0x023ffb39

023fdf70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fdf74:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fdf76:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdf7a:	4604      	mov	r4, r0
 23fdf7c:	460e      	mov	r6, r1
 23fdf7e:	4617      	mov	r7, r2
 23fdf80:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fdf82:	f7ff f871 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fdf86:	4581      	cmp	r9, r0
 23fdf88:	d04d      	beq.n	23fe026 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fdf8a:	792b      	ldrb	r3, [r5, #4]
 23fdf8c:	0719      	lsls	r1, r3, #28
 23fdf8e:	d504      	bpl.n	23fdf9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fdf90:	4620      	mov	r0, r4
 23fdf92:	696a      	ldr	r2, [r5, #20]
 23fdf94:	4954      	ldr	r1, [pc, #336]	; (23fe0e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fdf96:	f7ff fad0 	bl	23fd53a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fdf9a:	f1b8 0f00 	cmp.w	r8, #0
 23fdf9e:	d00d      	beq.n	23fdfbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fdfa0:	215b      	movs	r1, #91	; 0x5b
 23fdfa2:	4620      	mov	r0, r4
 23fdfa4:	f7ff fa44 	bl	23fd430 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fdfa8:	4641      	mov	r1, r8
 23fdfaa:	4620      	mov	r0, r4
 23fdfac:	f7ff fa31 	bl	23fd412 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fdfb0:	6823      	ldr	r3, [r4, #0]
 23fdfb2:	2202      	movs	r2, #2
 23fdfb4:	4620      	mov	r0, r4
 23fdfb6:	68db      	ldr	r3, [r3, #12]
 23fdfb8:	494c      	ldr	r1, [pc, #304]	; (23fe0ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fdfba:	4798      	blx	r3
    if (attr.has_file) {
 23fdfbc:	792b      	ldrb	r3, [r5, #4]
 23fdfbe:	07da      	lsls	r2, r3, #31
 23fdfc0:	d524      	bpl.n	23fe00c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fdfc2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fdfc6:	212f      	movs	r1, #47	; 0x2f
 23fdfc8:	4640      	mov	r0, r8
 23fdfca:	f001 fbca 	bl	23ff762 <strrchr>
    if (s1) {
 23fdfce:	b108      	cbz	r0, 23fdfd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fdfd0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdfd4:	4641      	mov	r1, r8
 23fdfd6:	4620      	mov	r0, r4
 23fdfd8:	f7ff fa1b 	bl	23fd412 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdfdc:	792b      	ldrb	r3, [r5, #4]
 23fdfde:	079b      	lsls	r3, r3, #30
 23fdfe0:	d508      	bpl.n	23fdff4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdfe2:	213a      	movs	r1, #58	; 0x3a
 23fdfe4:	4620      	mov	r0, r4
 23fdfe6:	f7ff fa23 	bl	23fd430 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdfea:	4620      	mov	r0, r4
 23fdfec:	68ea      	ldr	r2, [r5, #12]
 23fdfee:	4940      	ldr	r1, [pc, #256]	; (23fe0f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdff0:	f7ff faa3 	bl	23fd53a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdff4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdff6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdff8:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdffc:	4620      	mov	r0, r4
            write(", ", 2);
 23fdffe:	f04f 0202 	mov.w	r2, #2
 23fe002:	68db      	ldr	r3, [r3, #12]
 23fe004:	bf14      	ite	ne
 23fe006:	493b      	ldrne	r1, [pc, #236]	; (23fe0f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe008:	493b      	ldreq	r1, [pc, #236]	; (23fe0f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe00a:	4798      	blx	r3
    if (attr.has_function) {
 23fe00c:	792b      	ldrb	r3, [r5, #4]
 23fe00e:	0758      	lsls	r0, r3, #29
 23fe010:	d51d      	bpl.n	23fe04e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe012:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe014:	460b      	mov	r3, r1
 23fe016:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe018:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe01c:	b160      	cbz	r0, 23fe038 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe01e:	2820      	cmp	r0, #32
 23fe020:	d108      	bne.n	23fe034 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe022:	4619      	mov	r1, r3
 23fe024:	e7f7      	b.n	23fe016 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe026:	4835      	ldr	r0, [pc, #212]	; (23fe0fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe028:	f7fe fcc5 	bl	23fc9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fe02c:	2800      	cmp	r0, #0
 23fe02e:	d0ac      	beq.n	23fdf8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe034:	2828      	cmp	r0, #40	; 0x28
 23fe036:	d1ee      	bne.n	23fe016 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe038:	6823      	ldr	r3, [r4, #0]
 23fe03a:	1a52      	subs	r2, r2, r1
 23fe03c:	4620      	mov	r0, r4
 23fe03e:	68db      	ldr	r3, [r3, #12]
 23fe040:	4798      	blx	r3
        write("(): ", 4);
 23fe042:	6823      	ldr	r3, [r4, #0]
 23fe044:	2204      	movs	r2, #4
 23fe046:	4620      	mov	r0, r4
 23fe048:	68db      	ldr	r3, [r3, #12]
 23fe04a:	492d      	ldr	r1, [pc, #180]	; (23fe100 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe04c:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe04e:	2100      	movs	r1, #0
 23fe050:	4638      	mov	r0, r7
 23fe052:	f7fe faf1 	bl	23fc638 <log_level_name>
 23fe056:	4601      	mov	r1, r0
    write(s);
 23fe058:	4620      	mov	r0, r4
 23fe05a:	f7ff f9da 	bl	23fd412 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe05e:	6823      	ldr	r3, [r4, #0]
 23fe060:	2202      	movs	r2, #2
 23fe062:	4620      	mov	r0, r4
 23fe064:	68db      	ldr	r3, [r3, #12]
 23fe066:	4924      	ldr	r1, [pc, #144]	; (23fe0f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe068:	4798      	blx	r3
    if (msg) {
 23fe06a:	b11e      	cbz	r6, 23fe074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe06c:	4631      	mov	r1, r6
 23fe06e:	4620      	mov	r0, r4
 23fe070:	f7ff f9cf 	bl	23fd412 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe074:	792b      	ldrb	r3, [r5, #4]
 23fe076:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe07a:	d02c      	beq.n	23fe0d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe07c:	6823      	ldr	r3, [r4, #0]
 23fe07e:	4921      	ldr	r1, [pc, #132]	; (23fe104 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe080:	68db      	ldr	r3, [r3, #12]
 23fe082:	2202      	movs	r2, #2
 23fe084:	4620      	mov	r0, r4
 23fe086:	4798      	blx	r3
        if (attr.has_code) {
 23fe088:	792b      	ldrb	r3, [r5, #4]
 23fe08a:	06d9      	lsls	r1, r3, #27
 23fe08c:	d50a      	bpl.n	23fe0a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe08e:	6823      	ldr	r3, [r4, #0]
 23fe090:	2207      	movs	r2, #7
 23fe092:	4620      	mov	r0, r4
 23fe094:	491c      	ldr	r1, [pc, #112]	; (23fe108 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe096:	68db      	ldr	r3, [r3, #12]
 23fe098:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe09a:	4620      	mov	r0, r4
 23fe09c:	69aa      	ldr	r2, [r5, #24]
 23fe09e:	491b      	ldr	r1, [pc, #108]	; (23fe10c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe0a0:	f7ff fa4b 	bl	23fd53a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe0a4:	792b      	ldrb	r3, [r5, #4]
 23fe0a6:	069a      	lsls	r2, r3, #26
 23fe0a8:	d511      	bpl.n	23fe0ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe0aa:	06db      	lsls	r3, r3, #27
 23fe0ac:	d505      	bpl.n	23fe0ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe0ae:	6823      	ldr	r3, [r4, #0]
 23fe0b0:	2202      	movs	r2, #2
 23fe0b2:	4620      	mov	r0, r4
 23fe0b4:	68db      	ldr	r3, [r3, #12]
 23fe0b6:	490f      	ldr	r1, [pc, #60]	; (23fe0f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe0b8:	4798      	blx	r3
            write("details = ", 10);
 23fe0ba:	6823      	ldr	r3, [r4, #0]
 23fe0bc:	4620      	mov	r0, r4
 23fe0be:	4914      	ldr	r1, [pc, #80]	; (23fe110 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe0c0:	220a      	movs	r2, #10
 23fe0c2:	68db      	ldr	r3, [r3, #12]
 23fe0c4:	4798      	blx	r3
            write(attr.details);
 23fe0c6:	4620      	mov	r0, r4
 23fe0c8:	69e9      	ldr	r1, [r5, #28]
 23fe0ca:	f7ff f9a2 	bl	23fd412 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe0ce:	215d      	movs	r1, #93	; 0x5d
 23fe0d0:	4620      	mov	r0, r4
 23fe0d2:	f7ff f9ad 	bl	23fd430 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe0d6:	6823      	ldr	r3, [r4, #0]
 23fe0d8:	4620      	mov	r0, r4
}
 23fe0da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe0de:	2202      	movs	r2, #2
 23fe0e0:	68db      	ldr	r3, [r3, #12]
 23fe0e2:	490c      	ldr	r1, [pc, #48]	; (23fe114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe0e4:	4718      	bx	r3
 23fe0e6:	bf00      	nop
 23fe0e8:	023ffb3d 	.word	0x023ffb3d
 23fe0ec:	023ffb44 	.word	0x023ffb44
 23fe0f0:	023ffaa4 	.word	0x023ffaa4
 23fe0f4:	023ffb47 	.word	0x023ffb47
 23fe0f8:	023ffb4c 	.word	0x023ffb4c
 23fe0fc:	1007ae44 	.word	0x1007ae44
 23fe100:	023ffb4a 	.word	0x023ffb4a
 23fe104:	023ffb4f 	.word	0x023ffb4f
 23fe108:	023ffb52 	.word	0x023ffb52
 23fe10c:	023ffb5a 	.word	0x023ffb5a
 23fe110:	023ffb5d 	.word	0x023ffb5d
 23fe114:	023ffb68 	.word	0x023ffb68

023fe118 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe11c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe11e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe120:	460d      	mov	r5, r1
 23fe122:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe124:	f7fe ffa0 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fe128:	4287      	cmp	r7, r0
 23fe12a:	d007      	beq.n	23fe13c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe12c:	6a20      	ldr	r0, [r4, #32]
 23fe12e:	4632      	mov	r2, r6
 23fe130:	6803      	ldr	r3, [r0, #0]
 23fe132:	4629      	mov	r1, r5
}
 23fe134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe138:	68db      	ldr	r3, [r3, #12]
 23fe13a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe13c:	4803      	ldr	r0, [pc, #12]	; (23fe14c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe13e:	f7fe fc3a 	bl	23fc9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fe142:	2800      	cmp	r0, #0
 23fe144:	d0f2      	beq.n	23fe12c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe14a:	bf00      	nop
 23fe14c:	1007ae44 	.word	0x1007ae44

023fe150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe154:	b085      	sub	sp, #20
    return stream_;
 23fe156:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe15a:	4605      	mov	r5, r0
 23fe15c:	460f      	mov	r7, r1
 23fe15e:	4690      	mov	r8, r2
 23fe160:	461e      	mov	r6, r3
 23fe162:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe164:	f7fe ff80 	bl	23fd068 <_Z16_fetch_usbserialv>
 23fe168:	4581      	cmp	r9, r0
 23fe16a:	d105      	bne.n	23fe178 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe16c:	4849      	ldr	r0, [pc, #292]	; (23fe294 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe16e:	f7fe fc22 	bl	23fc9b6 <_ZN5spark12NetworkClass9listeningEv>
 23fe172:	2800      	cmp	r0, #0
 23fe174:	f040 808a 	bne.w	23fe28c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe178:	f04f 0900 	mov.w	r9, #0
 23fe17c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fe17e:	4a46      	ldr	r2, [pc, #280]	; (23fe298 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe180:	a801      	add	r0, sp, #4
 23fe182:	9201      	str	r2, [sp, #4]
 23fe184:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fe186:	f88d 9008 	strb.w	r9, [sp, #8]
 23fe18a:	f7fe fe54 	bl	23fce36 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe18e:	4649      	mov	r1, r9
 23fe190:	4640      	mov	r0, r8
 23fe192:	f7fe fa51 	bl	23fc638 <log_level_name>
 23fe196:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe198:	4940      	ldr	r1, [pc, #256]	; (23fe29c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe19a:	2201      	movs	r2, #1
 23fe19c:	a801      	add	r0, sp, #4
 23fe19e:	f7fe fed9 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe1a2:	4641      	mov	r1, r8
 23fe1a4:	f7ff f927 	bl	23fd3f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe1a8:	b13f      	cbz	r7, 23fe1ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fe1aa:	493d      	ldr	r1, [pc, #244]	; (23fe2a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe1ac:	2201      	movs	r2, #1
 23fe1ae:	a801      	add	r0, sp, #4
 23fe1b0:	f7fe fed0 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe1b4:	4639      	mov	r1, r7
 23fe1b6:	f7ff f91e 	bl	23fd3f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe1ba:	b13e      	cbz	r6, 23fe1cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fe1bc:	4939      	ldr	r1, [pc, #228]	; (23fe2a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe1be:	2201      	movs	r2, #1
 23fe1c0:	a801      	add	r0, sp, #4
 23fe1c2:	f7fe fec7 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe1c6:	4631      	mov	r1, r6
 23fe1c8:	f7ff f915 	bl	23fd3f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe1cc:	7923      	ldrb	r3, [r4, #4]
 23fe1ce:	07df      	lsls	r7, r3, #31
 23fe1d0:	d50e      	bpl.n	23fe1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fe1d2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe1d4:	212f      	movs	r1, #47	; 0x2f
 23fe1d6:	4630      	mov	r0, r6
 23fe1d8:	f001 fac3 	bl	23ff762 <strrchr>
    if (s1) {
 23fe1dc:	b100      	cbz	r0, 23fe1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fe1de:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe1e0:	4931      	ldr	r1, [pc, #196]	; (23fe2a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe1e2:	2201      	movs	r2, #1
 23fe1e4:	a801      	add	r0, sp, #4
 23fe1e6:	f7fe feb5 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe1ea:	4631      	mov	r1, r6
 23fe1ec:	f7ff f903 	bl	23fd3f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe1f0:	7923      	ldrb	r3, [r4, #4]
 23fe1f2:	079e      	lsls	r6, r3, #30
 23fe1f4:	d507      	bpl.n	23fe206 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fe1f6:	492d      	ldr	r1, [pc, #180]	; (23fe2ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe1f8:	2202      	movs	r2, #2
 23fe1fa:	a801      	add	r0, sp, #4
 23fe1fc:	f7fe feaa 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe200:	68e1      	ldr	r1, [r4, #12]
 23fe202:	f7fe fe25 	bl	23fce50 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe206:	7923      	ldrb	r3, [r4, #4]
 23fe208:	0758      	lsls	r0, r3, #29
 23fe20a:	d514      	bpl.n	23fe236 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe20c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe20e:	4633      	mov	r3, r6
 23fe210:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe212:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe216:	b12a      	cbz	r2, 23fe224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fe218:	2a20      	cmp	r2, #32
 23fe21a:	d101      	bne.n	23fe220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fe21c:	461e      	mov	r6, r3
 23fe21e:	e7f7      	b.n	23fe210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fe220:	2a28      	cmp	r2, #40	; 0x28
 23fe222:	d1f5      	bne.n	23fe210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fe224:	2202      	movs	r2, #2
 23fe226:	4922      	ldr	r1, [pc, #136]	; (23fe2b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe228:	a801      	add	r0, sp, #4
 23fe22a:	f7fe fe93 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe22e:	4631      	mov	r1, r6
 23fe230:	1bba      	subs	r2, r7, r6
 23fe232:	f7fe fe9f 	bl	23fcf74 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe236:	7923      	ldrb	r3, [r4, #4]
 23fe238:	0719      	lsls	r1, r3, #28
 23fe23a:	d507      	bpl.n	23fe24c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fe23c:	491d      	ldr	r1, [pc, #116]	; (23fe2b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe23e:	2201      	movs	r2, #1
 23fe240:	a801      	add	r0, sp, #4
 23fe242:	f7fe fe87 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe246:	6961      	ldr	r1, [r4, #20]
 23fe248:	f7fe fe14 	bl	23fce74 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe24c:	7923      	ldrb	r3, [r4, #4]
 23fe24e:	06da      	lsls	r2, r3, #27
 23fe250:	d508      	bpl.n	23fe264 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe252:	2204      	movs	r2, #4
 23fe254:	4918      	ldr	r1, [pc, #96]	; (23fe2b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe256:	eb0d 0002 	add.w	r0, sp, r2
 23fe25a:	f7fe fe7b 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe25e:	69a1      	ldr	r1, [r4, #24]
 23fe260:	f7fe fdf6 	bl	23fce50 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe264:	7923      	ldrb	r3, [r4, #4]
 23fe266:	069b      	lsls	r3, r3, #26
 23fe268:	d507      	bpl.n	23fe27a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe26a:	4914      	ldr	r1, [pc, #80]	; (23fe2bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe26c:	2206      	movs	r2, #6
 23fe26e:	a801      	add	r0, sp, #4
 23fe270:	f7fe fe70 	bl	23fcf54 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe274:	69e1      	ldr	r1, [r4, #28]
 23fe276:	f7ff f8be 	bl	23fd3f6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe27a:	a801      	add	r0, sp, #4
 23fe27c:	f7fe fdc5 	bl	23fce0a <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe280:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe282:	2202      	movs	r2, #2
 23fe284:	6803      	ldr	r3, [r0, #0]
 23fe286:	490e      	ldr	r1, [pc, #56]	; (23fe2c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe288:	68db      	ldr	r3, [r3, #12]
 23fe28a:	4798      	blx	r3
}
 23fe28c:	b005      	add	sp, #20
 23fe28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe292:	bf00      	nop
 23fe294:	1007ae44 	.word	0x1007ae44
 23fe298:	023ffb8c 	.word	0x023ffb8c
 23fe29c:	023ffb1a 	.word	0x023ffb1a
 23fe2a0:	023ffb6b 	.word	0x023ffb6b
 23fe2a4:	023ffecf 	.word	0x023ffecf
 23fe2a8:	023ffb6d 	.word	0x023ffb6d
 23fe2ac:	023ffb6f 	.word	0x023ffb6f
 23fe2b0:	023ffb72 	.word	0x023ffb72
 23fe2b4:	023ffb75 	.word	0x023ffb75
 23fe2b8:	023ffb77 	.word	0x023ffb77
 23fe2bc:	023ffb7c 	.word	0x023ffb7c
 23fe2c0:	023ffb68 	.word	0x023ffb68

023fe2c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe2c6:	4606      	mov	r6, r0
 23fe2c8:	460d      	mov	r5, r1
  size_t n = 0;
 23fe2ca:	2400      	movs	r4, #0
 23fe2cc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe2ce:	42bd      	cmp	r5, r7
 23fe2d0:	d00c      	beq.n	23fe2ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe2d2:	6833      	ldr	r3, [r6, #0]
 23fe2d4:	4630      	mov	r0, r6
 23fe2d6:	689b      	ldr	r3, [r3, #8]
 23fe2d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe2dc:	4798      	blx	r3
     if (chunk>=0)
 23fe2de:	1e03      	subs	r3, r0, #0
 23fe2e0:	db01      	blt.n	23fe2e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe2e2:	441c      	add	r4, r3
  while (size--) {
 23fe2e4:	e7f3      	b.n	23fe2ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe2e6:	2c00      	cmp	r4, #0
 23fe2e8:	bf08      	it	eq
 23fe2ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe2ec:	4620      	mov	r0, r4
 23fe2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe2f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe2f0:	b513      	push	{r0, r1, r4, lr}
 23fe2f2:	4604      	mov	r4, r0
    }
 23fe2f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe2f6:	b159      	cbz	r1, 23fe310 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe2f8:	9101      	str	r1, [sp, #4]
 23fe2fa:	f7fd fbcd 	bl	23fba98 <strlen>
 23fe2fe:	4602      	mov	r2, r0
 23fe300:	4620      	mov	r0, r4
 23fe302:	6823      	ldr	r3, [r4, #0]
 23fe304:	9901      	ldr	r1, [sp, #4]
 23fe306:	68db      	ldr	r3, [r3, #12]
    }
 23fe308:	b002      	add	sp, #8
 23fe30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe30e:	4718      	bx	r3
    }
 23fe310:	b002      	add	sp, #8
 23fe312:	bd10      	pop	{r4, pc}

023fe314 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe314:	6803      	ldr	r3, [r0, #0]
 23fe316:	689b      	ldr	r3, [r3, #8]
 23fe318:	4718      	bx	r3

023fe31a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe31a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe31c:	2a01      	cmp	r2, #1
 23fe31e:	bf98      	it	ls
 23fe320:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe322:	b530      	push	{r4, r5, lr}
 23fe324:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe326:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe32a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe32c:	460d      	mov	r5, r1
 23fe32e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe332:	fb01 5312 	mls	r3, r1, r2, r5
 23fe336:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe33a:	2b09      	cmp	r3, #9
 23fe33c:	bf94      	ite	ls
 23fe33e:	3330      	addls	r3, #48	; 0x30
 23fe340:	3337      	addhi	r3, #55	; 0x37
 23fe342:	b2db      	uxtb	r3, r3
  } while(n);
 23fe344:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe346:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe34a:	d9ef      	bls.n	23fe32c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe34c:	4621      	mov	r1, r4
 23fe34e:	f7ff ffcf 	bl	23fe2f0 <_ZN5Print5writeEPKc>
}
 23fe352:	b00b      	add	sp, #44	; 0x2c
 23fe354:	bd30      	pop	{r4, r5, pc}

023fe356 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe356:	4770      	bx	lr

023fe358 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fe358:	4b06      	ldr	r3, [pc, #24]	; (23fe374 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fe35a:	b510      	push	{r4, lr}
	    ||
 23fe35c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fe35e:	f100 040c 	add.w	r4, r0, #12
 23fe362:	d005      	beq.n	23fe370 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fe364:	4608      	mov	r0, r1
 23fe366:	f001 f83b 	bl	23ff3e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fe36a:	2800      	cmp	r0, #0
 23fe36c:	bf08      	it	eq
 23fe36e:	2400      	moveq	r4, #0
      }
 23fe370:	4620      	mov	r0, r4
 23fe372:	bd10      	pop	{r4, pc}
 23fe374:	023ffa74 	.word	0x023ffa74

023fe378 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe378:	b510      	push	{r4, lr}
 23fe37a:	4604      	mov	r4, r0
 23fe37c:	2130      	movs	r1, #48	; 0x30
 23fe37e:	f7fd fbb4 	bl	23fbaea <_ZdlPvj>
 23fe382:	4620      	mov	r0, r4
 23fe384:	bd10      	pop	{r4, pc}

023fe386 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fe386:	2130      	movs	r1, #48	; 0x30
 23fe388:	f7fd bbaf 	b.w	23fbaea <_ZdlPvj>

023fe38c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fe38c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fe38e:	2500      	movs	r5, #0
 23fe390:	1cec      	adds	r4, r5, #3
 23fe392:	428c      	cmp	r4, r1
 23fe394:	d80d      	bhi.n	23fe3b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fe396:	1c6e      	adds	r6, r5, #1
 23fe398:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fe39a:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fe39c:	4297      	cmp	r7, r2
 23fe39e:	d105      	bne.n	23fe3ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fe3a0:	4426      	add	r6, r4
 23fe3a2:	42b1      	cmp	r1, r6
 23fe3a4:	d305      	bcc.n	23fe3b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fe3a6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fe3a8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fe3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fe3ac:	3401      	adds	r4, #1
 23fe3ae:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fe3b0:	e7ee      	b.n	23fe390 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fe3b2:	2000      	movs	r0, #0
 23fe3b4:	e7f9      	b.n	23fe3aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

023fe3b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fe3b6:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fe3b8:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fe3ba:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fe3bc:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fe3be:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fe3c0:	d008      	beq.n	23fe3d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fe3c2:	b111      	cbz	r1, 23fe3ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fe3c4:	684b      	ldr	r3, [r1, #4]
 23fe3c6:	3301      	adds	r3, #1
 23fe3c8:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fe3ca:	6828      	ldr	r0, [r5, #0]
 23fe3cc:	b108      	cbz	r0, 23fe3d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fe3ce:	f7fe fc44 	bl	23fcc5a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fe3d2:	602c      	str	r4, [r5, #0]
      }
 23fe3d4:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe3d8 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fe3d8:	2300      	movs	r3, #0
    WiringBleLock() :
 23fe3da:	b510      	push	{r4, lr}
            locked_(false) {
 23fe3dc:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23fe3de:	4b04      	ldr	r3, [pc, #16]	; (23fe3f0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fe3e0:	4604      	mov	r4, r0
 23fe3e2:	6818      	ldr	r0, [r3, #0]
 23fe3e4:	f7fd ffbc 	bl	23fc360 <os_mutex_recursive_lock>
        locked_ = true;
 23fe3e8:	2301      	movs	r3, #1
    }
 23fe3ea:	4620      	mov	r0, r4
        locked_ = true;
 23fe3ec:	7023      	strb	r3, [r4, #0]
    }
 23fe3ee:	bd10      	pop	{r4, pc}
 23fe3f0:	1007aec4 	.word	0x1007aec4

023fe3f4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fe3f4:	b510      	push	{r4, lr}
        if (locked_) {
 23fe3f6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fe3f8:	4604      	mov	r4, r0
        if (locked_) {
 23fe3fa:	b11b      	cbz	r3, 23fe404 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fe3fc:	4b02      	ldr	r3, [pc, #8]	; (23fe408 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fe3fe:	6818      	ldr	r0, [r3, #0]
 23fe400:	f7fd ffbc 	bl	23fc37c <os_mutex_recursive_unlock>
    }
 23fe404:	4620      	mov	r0, r4
 23fe406:	bd10      	pop	{r4, pc}
 23fe408:	1007aec4 	.word	0x1007aec4

023fe40c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fe40c:	b082      	sub	sp, #8
    address_ = addr;
 23fe40e:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fe410:	4603      	mov	r3, r0
    address_ = addr;
 23fe412:	6808      	ldr	r0, [r1, #0]
 23fe414:	6849      	ldr	r1, [r1, #4]
 23fe416:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fe418:	466a      	mov	r2, sp
 23fe41a:	ca03      	ldmia	r2!, {r0, r1}
 23fe41c:	6018      	str	r0, [r3, #0]
}
 23fe41e:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fe420:	6059      	str	r1, [r3, #4]
}
 23fe422:	b002      	add	sp, #8
 23fe424:	4770      	bx	lr

023fe426 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fe426:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fe428:	7982      	ldrb	r2, [r0, #6]
 23fe42a:	798b      	ldrb	r3, [r1, #6]
 23fe42c:	429a      	cmp	r2, r3
 23fe42e:	d106      	bne.n	23fe43e <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fe430:	2206      	movs	r2, #6
 23fe432:	f001 f8f5 	bl	23ff620 <memcmp>
 23fe436:	fab0 f080 	clz	r0, r0
 23fe43a:	0940      	lsrs	r0, r0, #5
}
 23fe43c:	bd08      	pop	{r3, pc}
    return false;
 23fe43e:	2000      	movs	r0, #0
 23fe440:	e7fc      	b.n	23fe43c <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fe444 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fe444:	b570      	push	{r4, r5, r6, lr}
 23fe446:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fe448:	4b38      	ldr	r3, [pc, #224]	; (23fe52c <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fe44a:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fe44c:	6818      	ldr	r0, [r3, #0]
 23fe44e:	889b      	ldrh	r3, [r3, #4]
 23fe450:	9000      	str	r0, [sp, #0]
 23fe452:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fe456:	4b36      	ldr	r3, [pc, #216]	; (23fe530 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fe458:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fe45a:	6818      	ldr	r0, [r3, #0]
 23fe45c:	889b      	ldrh	r3, [r3, #4]
 23fe45e:	9002      	str	r0, [sp, #8]
 23fe460:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fe464:	b97e      	cbnz	r6, 23fe486 <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fe466:	2206      	movs	r2, #6
 23fe468:	4669      	mov	r1, sp
 23fe46a:	4620      	mov	r0, r4
 23fe46c:	f001 f8d8 	bl	23ff620 <memcmp>
 23fe470:	b138      	cbz	r0, 23fe482 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fe472:	2206      	movs	r2, #6
 23fe474:	4620      	mov	r0, r4
 23fe476:	a902      	add	r1, sp, #8
 23fe478:	f001 f8d2 	bl	23ff620 <memcmp>
 23fe47c:	3800      	subs	r0, #0
 23fe47e:	bf18      	it	ne
 23fe480:	2001      	movne	r0, #1
}
 23fe482:	b006      	add	sp, #24
 23fe484:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fe486:	88a3      	ldrh	r3, [r4, #4]
 23fe488:	6820      	ldr	r0, [r4, #0]
 23fe48a:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fe48e:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fe492:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fe494:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fe496:	d124      	bne.n	23fe4e2 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fe498:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fe49c:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fe49e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fe4a2:	4669      	mov	r1, sp
 23fe4a4:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fe4a6:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fe4aa:	f001 f8b9 	bl	23ff620 <memcmp>
 23fe4ae:	2800      	cmp	r0, #0
 23fe4b0:	d03a      	beq.n	23fe528 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fe4b2:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fe4b6:	2206      	movs	r2, #6
 23fe4b8:	a902      	add	r1, sp, #8
 23fe4ba:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fe4bc:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fe4c0:	f001 f8ae 	bl	23ff620 <memcmp>
 23fe4c4:	b380      	cbz	r0, 23fe528 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fe4c6:	7960      	ldrb	r0, [r4, #5]
 23fe4c8:	2e01      	cmp	r6, #1
 23fe4ca:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fe4ce:	d104      	bne.n	23fe4da <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fe4d0:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fe4d2:	bf14      	ite	ne
 23fe4d4:	2000      	movne	r0, #0
 23fe4d6:	2001      	moveq	r0, #1
 23fe4d8:	e7d3      	b.n	23fe482 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fe4da:	fab0 f080 	clz	r0, r0
 23fe4de:	0940      	lsrs	r0, r0, #5
 23fe4e0:	e7cf      	b.n	23fe482 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fe4e2:	2e02      	cmp	r6, #2
 23fe4e4:	d11e      	bne.n	23fe524 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fe4e6:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fe4e8:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fe4ec:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fe4f0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fe4f4:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fe4f8:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fe4fc:	f001 f890 	bl	23ff620 <memcmp>
 23fe500:	b190      	cbz	r0, 23fe528 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fe502:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fe506:	2203      	movs	r2, #3
 23fe508:	f10d 010b 	add.w	r1, sp, #11
 23fe50c:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fe510:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fe514:	f001 f884 	bl	23ff620 <memcmp>
 23fe518:	b130      	cbz	r0, 23fe528 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fe51a:	7960      	ldrb	r0, [r4, #5]
 23fe51c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fe520:	2840      	cmp	r0, #64	; 0x40
 23fe522:	e7d6      	b.n	23fe4d2 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fe524:	2001      	movs	r0, #1
 23fe526:	e7ac      	b.n	23fe482 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fe528:	2000      	movs	r0, #0
 23fe52a:	e7aa      	b.n	23fe482 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fe52c:	023ff974 	.word	0x023ff974
 23fe530:	023ffc3a 	.word	0x023ffc3a

023fe534 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fe534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fe538:	6003      	str	r3, [r0, #0]
 23fe53a:	8083      	strh	r3, [r0, #4]
}
 23fe53c:	2000      	movs	r0, #0
 23fe53e:	4770      	bx	lr

023fe540 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fe540:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fe542:	4602      	mov	r2, r0
 23fe544:	b508      	push	{r3, lr}
        : address_{} {
 23fe546:	6001      	str	r1, [r0, #0]
 23fe548:	6041      	str	r1, [r0, #4]
    clear();
 23fe54a:	f7ff fff3 	bl	23fe534 <_ZN8particle10BleAddress5clearEv>
}
 23fe54e:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fe550:	7191      	strb	r1, [r2, #6]
}
 23fe552:	bd08      	pop	{r3, pc}

023fe554 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fe554:	b510      	push	{r4, lr}
    return data_ + size_;
 23fe556:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fe55a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fe55e:	4293      	cmp	r3, r2
 23fe560:	4618      	mov	r0, r3
 23fe562:	d005      	beq.n	23fe570 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fe564:	6804      	ldr	r4, [r0, #0]
 23fe566:	3308      	adds	r3, #8
 23fe568:	8824      	ldrh	r4, [r4, #0]
 23fe56a:	428c      	cmp	r4, r1
 23fe56c:	d1f7      	bne.n	23fe55e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
 23fe56e:	bd10      	pop	{r4, pc}
        return nullptr;
 23fe570:	2000      	movs	r0, #0
 23fe572:	e7fc      	b.n	23fe56e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>

023fe574 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fe574:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fe576:	2500      	movs	r5, #0
 23fe578:	4606      	mov	r6, r0
 23fe57a:	6005      	str	r5, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fe57c:	2030      	movs	r0, #48	; 0x30
 23fe57e:	f7fd fab0 	bl	23fbae2 <_Znwj>
	  auto __pi = ::new (__mem)
 23fe582:	4604      	mov	r4, r0
 23fe584:	b198      	cbz	r0, 23fe5ae <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe586:	2301      	movs	r3, #1
 23fe588:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fe58c:	4b0a      	ldr	r3, [pc, #40]	; (23fe5b8 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fe58e:	300e      	adds	r0, #14
 23fe590:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fe594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe598:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fe59c:	f7ff ffd0 	bl	23fe540 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fe5a0:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fe5a4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fe5a8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fe5ac:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fe5ae:	6074      	str	r4, [r6, #4]
 23fe5b0:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fe5b2:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fe5b4:	6034      	str	r4, [r6, #0]
 23fe5b6:	bd70      	pop	{r4, r5, r6, pc}
 23fe5b8:	023ffcc8 	.word	0x023ffcc8

023fe5bc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
 23fe5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe5be:	460d      	mov	r5, r1
 23fe5c0:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe5c2:	a801      	add	r0, sp, #4
 23fe5c4:	f7ff ff08 	bl	23fe3d8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fe5c8:	682a      	ldr	r2, [r5, #0]
 23fe5ca:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fe5cc:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fe5d0:	6023      	str	r3, [r4, #0]
 23fe5d2:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fe5d6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fe5d8:	f7ff ff0c 	bl	23fe3f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fe5dc:	4620      	mov	r0, r4
 23fe5de:	b003      	add	sp, #12
 23fe5e0:	bd30      	pop	{r4, r5, pc}

023fe5e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fe5e2:	b530      	push	{r4, r5, lr}
 23fe5e4:	4605      	mov	r5, r0
 23fe5e6:	460c      	mov	r4, r1
 23fe5e8:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fe5ea:	a801      	add	r0, sp, #4
 23fe5ec:	f7ff fef4 	bl	23fe3d8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fe5f0:	682a      	ldr	r2, [r5, #0]
 23fe5f2:	6823      	ldr	r3, [r4, #0]
 23fe5f4:	8812      	ldrh	r2, [r2, #0]
 23fe5f6:	881b      	ldrh	r3, [r3, #0]
 23fe5f8:	429a      	cmp	r2, r3
 23fe5fa:	d10d      	bne.n	23fe618 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fe5fc:	4629      	mov	r1, r5
 23fe5fe:	a802      	add	r0, sp, #8
 23fe600:	f7ff ffdc 	bl	23fe5bc <_ZNK8particle13BlePeerDevice7addressEv>
 23fe604:	4621      	mov	r1, r4
 23fe606:	a804      	add	r0, sp, #16
 23fe608:	f7ff ffd8 	bl	23fe5bc <_ZNK8particle13BlePeerDevice7addressEv>
 23fe60c:	a904      	add	r1, sp, #16
 23fe60e:	a802      	add	r0, sp, #8
 23fe610:	f7ff ff09 	bl	23fe426 <_ZNK8particle10BleAddresseqERKS0_>
 23fe614:	4604      	mov	r4, r0
 23fe616:	b900      	cbnz	r0, 23fe61a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fe618:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fe61a:	a801      	add	r0, sp, #4
 23fe61c:	f7ff feea 	bl	23fe3f4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe620:	4620      	mov	r0, r4
 23fe622:	b007      	add	sp, #28
 23fe624:	bd30      	pop	{r4, r5, pc}
	...

023fe628 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fe628:	b570      	push	{r4, r5, r6, lr}
 23fe62a:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fe62c:	2074      	movs	r0, #116	; 0x74
 23fe62e:	f7fd fa58 	bl	23fbae2 <_Znwj>
 23fe632:	4604      	mov	r4, r0
 23fe634:	b1a0      	cbz	r0, 23fe660 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fe636:	2500      	movs	r5, #0
 23fe638:	e9c0 5500 	strd	r5, r5, [r0]
 23fe63c:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fe640:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fe644:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fe648:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fe64a:	3024      	adds	r0, #36	; 0x24
 23fe64c:	f7ff ff92 	bl	23fe574 <_ZN8particle13BlePeerDeviceC1Ev>
 23fe650:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fe654:	f7ff ff8e 	bl	23fe574 <_ZN8particle13BlePeerDeviceC1Ev>
 23fe658:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fe65a:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fe65c:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fe65e:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fe660:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fe662:	b924      	cbnz	r4, 23fe66e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fe664:	200a      	movs	r0, #10
 23fe666:	4a0a      	ldr	r2, [pc, #40]	; (23fe690 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fe668:	490a      	ldr	r1, [pc, #40]	; (23fe694 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fe66a:	f7fd ffbb 	bl	23fc5e4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fe66e:	2000      	movs	r0, #0
 23fe670:	f7fd fe92 	bl	23fc398 <hal_ble_stack_init>
 23fe674:	b120      	cbz	r0, 23fe680 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fe676:	200a      	movs	r0, #10
 23fe678:	4a05      	ldr	r2, [pc, #20]	; (23fe690 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fe67a:	4907      	ldr	r1, [pc, #28]	; (23fe698 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fe67c:	f7fd ffb2 	bl	23fc5e4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fe680:	2200      	movs	r2, #0
 23fe682:	6831      	ldr	r1, [r6, #0]
 23fe684:	4805      	ldr	r0, [pc, #20]	; (23fe69c <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fe686:	f7fd fee9 	bl	23fc45c <hal_ble_set_callback_on_periph_link_events>
}
 23fe68a:	4630      	mov	r0, r6
 23fe68c:	bd70      	pop	{r4, r5, r6, pc}
 23fe68e:	bf00      	nop
 23fe690:	023fc495 	.word	0x023fc495
 23fe694:	023ffbfc 	.word	0x023ffbfc
 23fe698:	023ffc41 	.word	0x023ffc41
 23fe69c:	023feb05 	.word	0x023feb05

023fe6a0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fe6a0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fe6a2:	4c0a      	ldr	r4, [pc, #40]	; (23fe6cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fe6a4:	e8d4 3f8f 	ldab	r3, [r4]
 23fe6a8:	07db      	lsls	r3, r3, #31
 23fe6aa:	d40c      	bmi.n	23fe6c6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fe6ac:	4620      	mov	r0, r4
 23fe6ae:	f7fd fa2b 	bl	23fbb08 <__cxa_guard_acquire>
 23fe6b2:	b140      	cbz	r0, 23fe6c6 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fe6b4:	4806      	ldr	r0, [pc, #24]	; (23fe6d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fe6b6:	f7ff ffb7 	bl	23fe628 <_ZN8particle14BleLocalDeviceC1Ev>
 23fe6ba:	4620      	mov	r0, r4
 23fe6bc:	f7fd fa29 	bl	23fbb12 <__cxa_guard_release>
 23fe6c0:	4804      	ldr	r0, [pc, #16]	; (23fe6d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fe6c2:	f000 ff9f 	bl	23ff604 <atexit>
    return instance;
}
 23fe6c6:	4802      	ldr	r0, [pc, #8]	; (23fe6d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fe6c8:	bd10      	pop	{r4, pc}
 23fe6ca:	bf00      	nop
 23fe6cc:	1007aec0 	.word	0x1007aec0
 23fe6d0:	1007aec8 	.word	0x1007aec8
 23fe6d4:	023fedb1 	.word	0x023fedb1

023fe6d8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fe6d8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fe6da:	2000      	movs	r0, #0
 23fe6dc:	f7fd fe5c 	bl	23fc398 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fe6e0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fe6e4:	bd08      	pop	{r3, pc}

023fe6e6 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
 23fe6e6:	230c      	movs	r3, #12
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
 23fe6e8:	b530      	push	{r4, r5, lr}
    hal_ble_adv_params_t advParams = {};
 23fe6ea:	2400      	movs	r4, #0
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
 23fe6ec:	b085      	sub	sp, #20
    advParams.size = sizeof(hal_ble_adv_params_t);
 23fe6ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    advParams.version = BLE_API_VERSION;
 23fe6f2:	2303      	movs	r3, #3
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
 23fe6f4:	460d      	mov	r5, r1
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
 23fe6f6:	a801      	add	r0, sp, #4
 23fe6f8:	4621      	mov	r1, r4
    hal_ble_adv_params_t advParams = {};
 23fe6fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
 23fe6fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
 23fe702:	f7fd fe65 	bl	23fc3d0 <hal_ble_gap_get_advertising_parameters>
 23fe706:	2800      	cmp	r0, #0
 23fe708:	db05      	blt.n	23fe716 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
 23fe70a:	4621      	mov	r1, r4
 23fe70c:	a801      	add	r0, sp, #4
    advParams.interval = interval;
 23fe70e:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
 23fe712:	f7fd fe4f 	bl	23fc3b4 <hal_ble_gap_set_advertising_parameters>
}
 23fe716:	b005      	add	sp, #20
 23fe718:	bd30      	pop	{r4, r5, pc}

023fe71a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
 23fe71a:	b919      	cbnz	r1, 23fe724 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
 23fe71c:	460a      	mov	r2, r1
 23fe71e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
 23fe720:	f7fd be64 	b.w	23fc3ec <hal_ble_gap_set_advertising_data>
 23fe724:	2200      	movs	r2, #0
 23fe726:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fe72a:	e7f9      	b.n	23fe720 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

023fe72c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fe72c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fe72e:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fe730:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fe732:	6843      	ldr	r3, [r0, #4]
 23fe734:	db02      	blt.n	23fe73c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fe736:	1862      	adds	r2, r4, r1
 23fe738:	429a      	cmp	r2, r3
 23fe73a:	dd00      	ble.n	23fe73e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fe73c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fe73e:	682a      	ldr	r2, [r5, #0]
 23fe740:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fe742:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fe744:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe746:	1a52      	subs	r2, r2, r1
 23fe748:	f000 ff87 	bl	23ff65a <memmove>
    size_ -= n;
 23fe74c:	686a      	ldr	r2, [r5, #4]
 23fe74e:	1b12      	subs	r2, r2, r4
 23fe750:	606a      	str	r2, [r5, #4]
}
 23fe752:	bd38      	pop	{r3, r4, r5, pc}

023fe754 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fe754:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
 23fe756:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
 23fe758:	4604      	mov	r4, r0
 23fe75a:	460d      	mov	r5, r1
 23fe75c:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe760:	ab01      	add	r3, sp, #4
 23fe762:	f7ff fe13 	bl	23fe38c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
 23fe766:	4602      	mov	r2, r0
 23fe768:	b138      	cbz	r0, 23fe77a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
 23fe76a:	4620      	mov	r0, r4
 23fe76c:	9901      	ldr	r1, [sp, #4]
 23fe76e:	f7ff ffdd 	bl	23fe72c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
 23fe772:	4629      	mov	r1, r5
 23fe774:	4620      	mov	r0, r4
 23fe776:	f7ff ffed 	bl	23fe754 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
 23fe77a:	b003      	add	sp, #12
 23fe77c:	bd30      	pop	{r4, r5, pc}

023fe77e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
 23fe77e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
 23fe780:	460c      	mov	r4, r1
 23fe782:	b929      	cbnz	r1, 23fe790 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
 23fe784:	460a      	mov	r2, r1
 23fe786:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
 23fe788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23fe78c:	f7fd be3c 	b.w	23fc408 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
 23fe790:	2101      	movs	r1, #1
 23fe792:	4620      	mov	r0, r4
 23fe794:	f7ff ffde 	bl	23fe754 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
 23fe798:	e9d4 0100 	ldrd	r0, r1, [r4]
 23fe79c:	2200      	movs	r2, #0
 23fe79e:	e7f3      	b.n	23fe788 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

023fe7a0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
 23fe7a0:	b538      	push	{r3, r4, r5, lr}
 23fe7a2:	4604      	mov	r4, r0
 23fe7a4:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
 23fe7a6:	f7ff ffb8 	bl	23fe71a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
 23fe7aa:	2800      	cmp	r0, #0
 23fe7ac:	db0a      	blt.n	23fe7c4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
 23fe7ae:	4629      	mov	r1, r5
 23fe7b0:	4620      	mov	r0, r4
 23fe7b2:	f7ff ffe4 	bl	23fe77e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
 23fe7b6:	2800      	cmp	r0, #0
 23fe7b8:	db04      	blt.n	23fe7c4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
 23fe7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
 23fe7be:	2000      	movs	r0, #0
 23fe7c0:	f7fd be30 	b.w	23fc424 <hal_ble_gap_start_advertising>
}
 23fe7c4:	bd38      	pop	{r3, r4, r5, pc}

023fe7c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fe7c6:	680b      	ldr	r3, [r1, #0]
 23fe7c8:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fe7ca:	b113      	cbz	r3, 23fe7d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fe7cc:	685a      	ldr	r2, [r3, #4]
 23fe7ce:	3201      	adds	r2, #1
 23fe7d0:	605a      	str	r2, [r3, #4]
      }
 23fe7d2:	4770      	bx	lr

023fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe7d4:	b510      	push	{r4, lr}
 23fe7d6:	4604      	mov	r4, r0
 23fe7d8:	f851 3b04 	ldr.w	r3, [r1], #4
 23fe7dc:	f840 3b04 	str.w	r3, [r0], #4
 23fe7e0:	f7ff fff1 	bl	23fe7c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fe7e4:	4620      	mov	r0, r4
 23fe7e6:	bd10      	pop	{r4, pc}

023fe7e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe7e8:	b570      	push	{r4, r5, r6, lr}
 23fe7ea:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe7ec:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fe7f0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe7f4:	42ae      	cmp	r6, r5
 23fe7f6:	d004      	beq.n	23fe802 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
 23fe7f8:	1d28      	adds	r0, r5, #4
 23fe7fa:	f7fe fbcb 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe7fe:	3508      	adds	r5, #8
 23fe800:	e7f8      	b.n	23fe7f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fe802:	6820      	ldr	r0, [r4, #0]
 23fe804:	f7fe f83e 	bl	23fc884 <free>
}
 23fe808:	4620      	mov	r0, r4
 23fe80a:	bd70      	pop	{r4, r5, r6, pc}

023fe80c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fe80c:	b570      	push	{r4, r5, r6, lr}
 23fe80e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fe810:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fe814:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe818:	42ae      	cmp	r6, r5
 23fe81a:	d004      	beq.n	23fe826 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fe81c:	1d28      	adds	r0, r5, #4
 23fe81e:	f7fe fbb9 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe822:	3508      	adds	r5, #8
 23fe824:	e7f8      	b.n	23fe818 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fe826:	6820      	ldr	r0, [r4, #0]
 23fe828:	f7fe f82c 	bl	23fc884 <free>
}
 23fe82c:	4620      	mov	r0, r4
 23fe82e:	bd70      	pop	{r4, r5, r6, pc}

023fe830 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fe830:	b510      	push	{r4, lr}
 23fe832:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fe834:	3024      	adds	r0, #36	; 0x24
 23fe836:	f7ff ffe9 	bl	23fe80c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe83a:	f104 0018 	add.w	r0, r4, #24
 23fe83e:	f7ff ffd3 	bl	23fe7e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fe842:	bd10      	pop	{r4, pc}

023fe844 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe844:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe846:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe848:	b90a      	cbnz	r2, 23fe84e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fe84a:	f000 fdc6 	bl	23ff3da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe84e:	68c3      	ldr	r3, [r0, #12]
    }
 23fe850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe854:	4718      	bx	r3

023fe856 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fe856:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fe858:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fe85a:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe85c:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe85e:	dd03      	ble.n	23fe868 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fe860:	f7fe f81e 	bl	23fc8a0 <realloc>
            if (!d) {
 23fe864:	b918      	cbnz	r0, 23fe86e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fe866:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fe868:	f7fe f80c 	bl	23fc884 <free>
        T* d = nullptr;
 23fe86c:	2000      	movs	r0, #0
        data_ = d;
 23fe86e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe870:	60a5      	str	r5, [r4, #8]
        return true;
 23fe872:	2001      	movs	r0, #1
 23fe874:	e7f7      	b.n	23fe866 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fe876 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fe876:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fe878:	6883      	ldr	r3, [r0, #8]
 23fe87a:	428b      	cmp	r3, r1
 23fe87c:	da02      	bge.n	23fe884 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fe87e:	f7ff ffea 	bl	23fe856 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fe882:	bd08      	pop	{r3, pc}
    return true;
 23fe884:	2001      	movs	r0, #1
 23fe886:	e7fc      	b.n	23fe882 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fe888 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe88c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe88e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe890:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe892:	4419      	add	r1, r3
 23fe894:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe896:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe898:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe89a:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe89c:	dc12      	bgt.n	23fe8c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fe89e:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe8a0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe8a2:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe8a4:	4631      	mov	r1, r6
 23fe8a6:	1bd2      	subs	r2, r2, r7
 23fe8a8:	1970      	adds	r0, r6, r5
 23fe8aa:	f000 fed6 	bl	23ff65a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fe8ae:	462a      	mov	r2, r5
 23fe8b0:	4641      	mov	r1, r8
 23fe8b2:	4630      	mov	r0, r6
 23fe8b4:	f000 fec4 	bl	23ff640 <memcpy>
    return true;
 23fe8b8:	2001      	movs	r0, #1
    size_ += n;
 23fe8ba:	6863      	ldr	r3, [r4, #4]
 23fe8bc:	442b      	add	r3, r5
 23fe8be:	6063      	str	r3, [r4, #4]
}
 23fe8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe8c4:	f7ff ffc7 	bl	23fe856 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe8c8:	2800      	cmp	r0, #0
 23fe8ca:	d1e8      	bne.n	23fe89e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fe8cc:	e7f8      	b.n	23fe8c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fe8ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe8d0:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe8d2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fe8d6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe8d8:	4604      	mov	r4, r0
 23fe8da:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe8dc:	da0b      	bge.n	23fe8f6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fe8de:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe8e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe8e2:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe8e4:	1b52      	subs	r2, r2, r5
 23fe8e6:	1c48      	adds	r0, r1, #1
 23fe8e8:	f000 feb7 	bl	23ff65a <memmove>
    new(p) T(std::move(value));
 23fe8ec:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fe8ee:	6863      	ldr	r3, [r4, #4]
 23fe8f0:	3301      	adds	r3, #1
 23fe8f2:	6063      	str	r3, [r4, #4]
}
 23fe8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe8f6:	3101      	adds	r1, #1
 23fe8f8:	f7ff ffad 	bl	23fe856 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe8fc:	2800      	cmp	r0, #0
 23fe8fe:	d1ee      	bne.n	23fe8de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fe900:	e7f8      	b.n	23fe8f4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fe902 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe902:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fe904:	6841      	ldr	r1, [r0, #4]
 23fe906:	f7ff bfe2 	b.w	23fe8ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fe90a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe90a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fe90e:	4604      	mov	r4, r0
 23fe910:	461d      	mov	r5, r3
 23fe912:	460f      	mov	r7, r1
 23fe914:	ab01      	add	r3, sp, #4
 23fe916:	4690      	mov	r8, r2
 23fe918:	460a      	mov	r2, r1
 23fe91a:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe91e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fe922:	f7ff fd33 	bl	23fe38c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fe926:	1cae      	adds	r6, r5, #2
 23fe928:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fe92a:	6863      	ldr	r3, [r4, #4]
 23fe92c:	f1b9 0f00 	cmp.w	r9, #0
 23fe930:	d126      	bne.n	23fe980 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fe932:	b328      	cbz	r0, 23fe980 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe934:	4433      	add	r3, r6
 23fe936:	1a1b      	subs	r3, r3, r0
 23fe938:	2bff      	cmp	r3, #255	; 0xff
 23fe93a:	d809      	bhi.n	23fe950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fe93c:	4620      	mov	r0, r4
 23fe93e:	9901      	ldr	r1, [sp, #4]
 23fe940:	f7ff fef4 	bl	23fe72c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe944:	6861      	ldr	r1, [r4, #4]
 23fe946:	4620      	mov	r0, r4
 23fe948:	4431      	add	r1, r6
 23fe94a:	f7ff ff94 	bl	23fe876 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe94e:	b918      	cbnz	r0, 23fe958 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fe950:	6860      	ldr	r0, [r4, #4]
}
 23fe952:	b003      	add	sp, #12
 23fe954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fe958:	1c6a      	adds	r2, r5, #1
 23fe95a:	4620      	mov	r0, r4
 23fe95c:	9901      	ldr	r1, [sp, #4]
 23fe95e:	b2d2      	uxtb	r2, r2
 23fe960:	f7ff ffb5 	bl	23fe8ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fe964:	9901      	ldr	r1, [sp, #4]
 23fe966:	463a      	mov	r2, r7
 23fe968:	3101      	adds	r1, #1
 23fe96a:	4620      	mov	r0, r4
 23fe96c:	f7ff ffaf 	bl	23fe8ce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fe970:	462b      	mov	r3, r5
 23fe972:	4642      	mov	r2, r8
 23fe974:	9901      	ldr	r1, [sp, #4]
 23fe976:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fe978:	4620      	mov	r0, r4
 23fe97a:	f7ff ff85 	bl	23fe888 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fe97e:	e7e7      	b.n	23fe950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe980:	18f1      	adds	r1, r6, r3
 23fe982:	29ff      	cmp	r1, #255	; 0xff
 23fe984:	d8e4      	bhi.n	23fe950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe986:	4620      	mov	r0, r4
 23fe988:	f7ff ff75 	bl	23fe876 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe98c:	2800      	cmp	r0, #0
 23fe98e:	d0df      	beq.n	23fe950 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fe990:	1c69      	adds	r1, r5, #1
 23fe992:	4620      	mov	r0, r4
 23fe994:	b2c9      	uxtb	r1, r1
 23fe996:	f7ff ffb4 	bl	23fe902 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fe99a:	4639      	mov	r1, r7
 23fe99c:	4620      	mov	r0, r4
 23fe99e:	f7ff ffb0 	bl	23fe902 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fe9a2:	462b      	mov	r3, r5
 23fe9a4:	4642      	mov	r2, r8
 23fe9a6:	6861      	ldr	r1, [r4, #4]
 23fe9a8:	e7e6      	b.n	23fe978 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fe9aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe9aa:	b430      	push	{r4, r5}
 23fe9ac:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fe9b0:	b11a      	cbz	r2, 23fe9ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fe9b2:	9502      	str	r5, [sp, #8]
}
 23fe9b4:	bc30      	pop	{r4, r5}
 23fe9b6:	f7ff bfa8 	b.w	23fe90a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fe9ba:	6840      	ldr	r0, [r0, #4]
}
 23fe9bc:	bc30      	pop	{r4, r5}
 23fe9be:	4770      	bx	lr

023fe9c0 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fe9c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fe9c2:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe9c4:	2206      	movs	r2, #6
 23fe9c6:	e9c0 3300 	strd	r3, r3, [r0]
 23fe9ca:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe9cc:	9300      	str	r3, [sp, #0]
 23fe9ce:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fe9d0:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe9d2:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe9d6:	4619      	mov	r1, r3
 23fe9d8:	f10d 020f 	add.w	r2, sp, #15
 23fe9dc:	f7ff ffe5 	bl	23fe9aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fe9e0:	4620      	mov	r0, r4
 23fe9e2:	b004      	add	sp, #16
 23fe9e4:	bd10      	pop	{r4, pc}

023fe9e6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
 23fe9e6:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
 23fe9e8:	9300      	str	r3, [sp, #0]
 23fe9ea:	4613      	mov	r3, r2
 23fe9ec:	460a      	mov	r2, r1
 23fe9ee:	21ff      	movs	r1, #255	; 0xff
 23fe9f0:	f7ff ffdb 	bl	23fe9aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fe9f4:	b003      	add	sp, #12
 23fe9f6:	f85d fb04 	ldr.w	pc, [sp], #4

023fe9fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe9fa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe9fe:	4604      	mov	r4, r0
 23fea00:	460d      	mov	r5, r1
 23fea02:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fea04:	d914      	bls.n	23fea30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fea06:	4290      	cmp	r0, r2
 23fea08:	d213      	bcs.n	23fea32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fea0a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fea0e:	1a75      	subs	r5, r6, r1
 23fea10:	f1a1 0708 	sub.w	r7, r1, #8
 23fea14:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fea16:	42b7      	cmp	r7, r6
 23fea18:	d018      	beq.n	23fea4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fea1a:	b11c      	cbz	r4, 23fea24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fea1c:	4631      	mov	r1, r6
 23fea1e:	4620      	mov	r0, r4
 23fea20:	f7ff fed8 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fea24:	1d30      	adds	r0, r6, #4
 23fea26:	f7fe fab5 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fea2a:	3e08      	subs	r6, #8
 23fea2c:	3c08      	subs	r4, #8
 23fea2e:	e7f2      	b.n	23fea16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fea30:	d00c      	beq.n	23fea4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fea32:	42b5      	cmp	r5, r6
 23fea34:	d00a      	beq.n	23fea4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fea36:	b11c      	cbz	r4, 23fea40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fea38:	4629      	mov	r1, r5
 23fea3a:	4620      	mov	r0, r4
 23fea3c:	f7ff feca 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fea40:	1d28      	adds	r0, r5, #4
 23fea42:	f7fe faa7 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fea46:	3508      	adds	r5, #8
 23fea48:	3408      	adds	r4, #8
 23fea4a:	e7f2      	b.n	23fea32 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fea4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fea4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fea4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fea50:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fea52:	6846      	ldr	r6, [r0, #4]
 23fea54:	4668      	mov	r0, sp
 23fea56:	f7ff febd 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fea5a:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fea5e:	429f      	cmp	r7, r3
 23fea60:	db12      	blt.n	23fea88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fea62:	3701      	adds	r7, #1
        if (n > 0) {
 23fea64:	2f00      	cmp	r7, #0
 23fea66:	dd29      	ble.n	23feabc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fea68:	00f8      	lsls	r0, r7, #3
 23fea6a:	f7fd fefd 	bl	23fc868 <malloc>
            if (!d) {
 23fea6e:	4605      	mov	r5, r0
 23fea70:	b1f0      	cbz	r0, 23feab0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fea72:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fea76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fea7a:	f7ff ffbe 	bl	23fe9fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fea7e:	6820      	ldr	r0, [r4, #0]
 23fea80:	f7fd ff00 	bl	23fc884 <free>
        data_ = d;
 23fea84:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fea86:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fea88:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fea8a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fea8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fea90:	4631      	mov	r1, r6
 23fea92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fea96:	f106 0008 	add.w	r0, r6, #8
 23fea9a:	f7ff ffae 	bl	23fe9fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fea9e:	b11e      	cbz	r6, 23feaa8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23feaa0:	4669      	mov	r1, sp
 23feaa2:	4630      	mov	r0, r6
 23feaa4:	f7ff fe96 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23feaa8:	2501      	movs	r5, #1
    ++size_;
 23feaaa:	6863      	ldr	r3, [r4, #4]
 23feaac:	3301      	adds	r3, #1
 23feaae:	6063      	str	r3, [r4, #4]
 23feab0:	a801      	add	r0, sp, #4
 23feab2:	f7fe fa6f 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23feab6:	4628      	mov	r0, r5
 23feab8:	b003      	add	sp, #12
 23feaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23feabc:	2500      	movs	r5, #0
 23feabe:	e7de      	b.n	23fea7e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023feac0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23feac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feac2:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23feac4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23feac8:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23feaca:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23feace:	42a6      	cmp	r6, r4
 23fead0:	d005      	beq.n	23feade <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fead2:	4639      	mov	r1, r7
 23fead4:	4620      	mov	r0, r4
 23fead6:	f7ff fd84 	bl	23fe5e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23feada:	b108      	cbz	r0, 23feae0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23feadc:	b914      	cbnz	r4, 23feae4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23feade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23feae0:	3408      	adds	r4, #8
 23feae2:	e7f4      	b.n	23feace <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23feae4:	1d20      	adds	r0, r4, #4
 23feae6:	f7fe fa55 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23feaea:	e9d5 3200 	ldrd	r3, r2, [r5]
 23feaee:	4620      	mov	r0, r4
 23feaf0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23feaf4:	f104 0108 	add.w	r1, r4, #8
 23feaf8:	f7ff ff7f 	bl	23fe9fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23feafc:	686b      	ldr	r3, [r5, #4]
 23feafe:	3b01      	subs	r3, #1
 23feb00:	606b      	str	r3, [r5, #4]
    return true;
 23feb02:	e7ec      	b.n	23feade <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

023feb04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23feb04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23feb08:	4605      	mov	r5, r0
 23feb0a:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23feb0c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23feb0e:	460c      	mov	r4, r1
        WiringBleLock lk;
 23feb10:	f7ff fc62 	bl	23fe3d8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23feb14:	682e      	ldr	r6, [r5, #0]
 23feb16:	1ef3      	subs	r3, r6, #3
 23feb18:	2b0d      	cmp	r3, #13
 23feb1a:	d86a      	bhi.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23feb1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 23feb20:	0078000e 	.word	0x0078000e
 23feb24:	00fc0069 	.word	0x00fc0069
 23feb28:	00690069 	.word	0x00690069
 23feb2c:	00690069 	.word	0x00690069
 23feb30:	00c60069 	.word	0x00c60069
 23feb34:	00c600c6 	.word	0x00c600c6
 23feb38:	00c600c6 	.word	0x00c600c6
        return address_;
 23feb3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23feb3e:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23feb42:	3002      	adds	r0, #2
 23feb44:	f7ff fc7e 	bl	23fe444 <_ZNK8particle10BleAddress7isValidEv>
 23feb48:	b338      	cbz	r0, 23feb9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23feb4a:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23feb4c:	89aa      	ldrh	r2, [r5, #12]
 23feb4e:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23feb52:	a806      	add	r0, sp, #24
 23feb54:	801a      	strh	r2, [r3, #0]
 23feb56:	f7ff fe3d 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23feb5a:	a906      	add	r1, sp, #24
 23feb5c:	4630      	mov	r0, r6
 23feb5e:	f7ff ff76 	bl	23fea4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23feb62:	a807      	add	r0, sp, #28
 23feb64:	f7fe fa16 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23feb68:	a806      	add	r0, sp, #24
 23feb6a:	f7ff fd03 	bl	23fe574 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23feb6e:	9b06      	ldr	r3, [sp, #24]
 23feb70:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23feb74:	9907      	ldr	r1, [sp, #28]
 23feb76:	6263      	str	r3, [r4, #36]	; 0x24
 23feb78:	f7ff fc1d 	bl	23fe3b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23feb7c:	a807      	add	r0, sp, #28
 23feb7e:	f7fe fa09 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23feb82:	2120      	movs	r1, #32
 23feb84:	2300      	movs	r3, #0
 23feb86:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23feb8a:	4a6d      	ldr	r2, [pc, #436]	; (23fed40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23feb8c:	9200      	str	r2, [sp, #0]
 23feb8e:	2001      	movs	r0, #1
 23feb90:	496c      	ldr	r1, [pc, #432]	; (23fed44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23feb92:	aa06      	add	r2, sp, #24
 23feb94:	f7fd fd34 	bl	23fc600 <log_message>
 23feb98:	e02b      	b.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23feb9a:	a804      	add	r0, sp, #16
 23feb9c:	f7ff fcea 	bl	23fe574 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23feba0:	89aa      	ldrh	r2, [r5, #12]
 23feba2:	9b04      	ldr	r3, [sp, #16]
 23feba4:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23feba6:	6869      	ldr	r1, [r5, #4]
 23feba8:	9804      	ldr	r0, [sp, #16]
 23febaa:	3108      	adds	r1, #8
 23febac:	3002      	adds	r0, #2
 23febae:	f7ff fc2d 	bl	23fe40c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23febb2:	a904      	add	r1, sp, #16
 23febb4:	a806      	add	r0, sp, #24
 23febb6:	f7ff fe0d 	bl	23fe7d4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23febba:	4630      	mov	r0, r6
 23febbc:	a906      	add	r1, sp, #24
 23febbe:	f7ff ff46 	bl	23fea4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23febc2:	4605      	mov	r5, r0
 23febc4:	a807      	add	r0, sp, #28
 23febc6:	f7fe f9e5 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23febca:	b9c5      	cbnz	r5, 23febfe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23febcc:	2320      	movs	r3, #32
 23febce:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23febd2:	4b5d      	ldr	r3, [pc, #372]	; (23fed48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23febd4:	2001      	movs	r0, #1
 23febd6:	495b      	ldr	r1, [pc, #364]	; (23fed44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23febd8:	9300      	str	r3, [sp, #0]
 23febda:	aa06      	add	r2, sp, #24
 23febdc:	462b      	mov	r3, r5
 23febde:	f7fd fd0f 	bl	23fc600 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23febe2:	9b04      	ldr	r3, [sp, #16]
 23febe4:	4629      	mov	r1, r5
 23febe6:	8818      	ldrh	r0, [r3, #0]
 23febe8:	f7fd fc2a 	bl	23fc440 <hal_ble_gap_disconnect>
 23febec:	a805      	add	r0, sp, #20
 23febee:	f7fe f9d1 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23febf2:	a803      	add	r0, sp, #12
 23febf4:	f7ff fbfe 	bl	23fe3f4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23febf8:	b00f      	add	sp, #60	; 0x3c
 23febfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23febfe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fec00:	b123      	cbz	r3, 23fec0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fec02:	a904      	add	r1, sp, #16
 23fec04:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fec08:	f7ff fe1c 	bl	23fe844 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fec0c:	a805      	add	r0, sp, #20
 23fec0e:	e7b6      	b.n	23feb7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fec10:	4620      	mov	r0, r4
 23fec12:	89a9      	ldrh	r1, [r5, #12]
 23fec14:	f7ff fc9e 	bl	23fe554 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fec18:	4606      	mov	r6, r0
 23fec1a:	2800      	cmp	r0, #0
 23fec1c:	d0e9      	beq.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fec1e:	4601      	mov	r1, r0
 23fec20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fec24:	f7ff fcdd 	bl	23fe5e2 <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fec28:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fec2c:	b148      	cbz	r0, 23fec42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fec2e:	4631      	mov	r1, r6
 23fec30:	4640      	mov	r0, r8
 23fec32:	f7ff ff45 	bl	23feac0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fec36:	2220      	movs	r2, #32
 23fec38:	2300      	movs	r3, #0
 23fec3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fec3e:	4a43      	ldr	r2, [pc, #268]	; (23fed4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fec40:	e7a4      	b.n	23feb8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fec42:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fec46:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fec48:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fec4c:	8029      	strh	r1, [r5, #0]
 23fec4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fec52:	429a      	cmp	r2, r3
 23fec54:	d003      	beq.n	23fec5e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fec56:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fec5a:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fec5c:	e7f9      	b.n	23fec52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fec5e:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fec62:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fec66:	45b9      	cmp	r9, r7
 23fec68:	d004      	beq.n	23fec74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fec6a:	1d38      	adds	r0, r7, #4
 23fec6c:	f7fe f992 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fec70:	3708      	adds	r7, #8
 23fec72:	e7f8      	b.n	23fec66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fec74:	2300      	movs	r3, #0
 23fec76:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fec78:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fec7c:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fec80:	45b9      	cmp	r9, r7
 23fec82:	d004      	beq.n	23fec8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fec84:	1d38      	adds	r0, r7, #4
 23fec86:	f7fe f985 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fec8a:	3708      	adds	r7, #8
 23fec8c:	e7f8      	b.n	23fec80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fec8e:	2300      	movs	r3, #0
 23fec90:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fec92:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fec94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fec96:	b123      	cbz	r3, 23feca2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fec98:	4631      	mov	r1, r6
 23fec9a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fec9e:	f7ff fdd1 	bl	23fe844 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23feca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23feca6:	6833      	ldr	r3, [r6, #0]
 23feca8:	801a      	strh	r2, [r3, #0]
 23fecaa:	e7c0      	b.n	23fec2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fecac:	4620      	mov	r0, r4
 23fecae:	89a9      	ldrh	r1, [r5, #12]
 23fecb0:	f7ff fc50 	bl	23fe554 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fecb4:	2800      	cmp	r0, #0
 23fecb6:	d09c      	beq.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fecb8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fecba:	2b00      	cmp	r3, #0
 23fecbc:	d099      	beq.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fecbe:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fecc0:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fecc2:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fecc6:	d001      	beq.n	23feccc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fecc8:	2e10      	cmp	r6, #16
 23fecca:	d117      	bne.n	23fecfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23feccc:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fecce:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fecd0:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fecd2:	2506      	movs	r5, #6
                        };
 23fecd4:	f88d 3015 	strb.w	r3, [sp, #21]
 23fecd8:	9104      	str	r1, [sp, #16]
 23fecda:	ab09      	add	r3, sp, #36	; 0x24
 23fecdc:	f88d 2014 	strb.w	r2, [sp, #20]
 23fece0:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fece2:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fece6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fecea:	9508      	str	r5, [sp, #32]
 23fecec:	e883 0003 	stmia.w	r3, {r0, r1}
 23fecf0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fecf2:	a906      	add	r1, sp, #24
 23fecf4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fecf8:	4798      	blx	r3
 23fecfa:	e77a      	b.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fecfc:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fecfe:	bf01      	itttt	eq
 23fed00:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fed02:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fed04:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fed08:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fed0a:	bf1d      	ittte	ne
 23fed0c:	461a      	movne	r2, r3
 23fed0e:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fed10:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fed12:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fed16:	e7dd      	b.n	23fecd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fed18:	89a9      	ldrh	r1, [r5, #12]
 23fed1a:	4620      	mov	r0, r4
 23fed1c:	f7ff fc1a 	bl	23fe554 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fed20:	4601      	mov	r1, r0
 23fed22:	2800      	cmp	r0, #0
 23fed24:	f43f af65 	beq.w	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fed28:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fed2a:	2b00      	cmp	r3, #0
 23fed2c:	f43f af61 	beq.w	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fed30:	686b      	ldr	r3, [r5, #4]
 23fed32:	aa06      	add	r2, sp, #24
 23fed34:	9306      	str	r3, [sp, #24]
 23fed36:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fed3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fed3c:	4798      	blx	r3
 23fed3e:	e758      	b.n	23febf2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fed40:	023ffca9 	.word	0x023ffca9
 23fed44:	023ffc13 	.word	0x023ffc13
 23fed48:	023ffc83 	.word	0x023ffc83
 23fed4c:	023ffcb3 	.word	0x023ffcb3

023fed50 <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fed50:	b570      	push	{r4, r5, r6, lr}
 23fed52:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fed54:	3064      	adds	r0, #100	; 0x64
 23fed56:	f7fe fa23 	bl	23fd1a0 <_ZNSt14_Function_baseD1Ev>
 23fed5a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fed5e:	f7fe fa1f 	bl	23fd1a0 <_ZNSt14_Function_baseD1Ev>
 23fed62:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fed66:	f7fe fa1b 	bl	23fd1a0 <_ZNSt14_Function_baseD1Ev>
 23fed6a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fed6e:	f7fe fa17 	bl	23fd1a0 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fed72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fed76:	f7fe f90d 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fed7e:	f7fe f909 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fed82:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fed86:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fed8a:	42ae      	cmp	r6, r5
 23fed8c:	d004      	beq.n	23fed98 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fed8e:	1d28      	adds	r0, r5, #4
 23fed90:	f7fe f900 	bl	23fcf94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fed94:	3508      	adds	r5, #8
 23fed96:	e7f8      	b.n	23fed8a <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fed98:	69a0      	ldr	r0, [r4, #24]
 23fed9a:	f7fd fd73 	bl	23fc884 <free>
 23fed9e:	f104 000c 	add.w	r0, r4, #12
 23feda2:	f7ff fd33 	bl	23fe80c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23feda6:	4620      	mov	r0, r4
 23feda8:	f7ff fd1e 	bl	23fe7e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fedac:	4620      	mov	r0, r4
 23fedae:	bd70      	pop	{r4, r5, r6, pc}

023fedb0 <__tcf_0>:
    static BleLocalDevice instance;
 23fedb0:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fedb2:	4b06      	ldr	r3, [pc, #24]	; (23fedcc <__tcf_0+0x1c>)
 23fedb4:	681c      	ldr	r4, [r3, #0]
 23fedb6:	b144      	cbz	r4, 23fedca <__tcf_0+0x1a>
	delete __ptr;
 23fedb8:	4620      	mov	r0, r4
 23fedba:	f7ff ffc9 	bl	23fed50 <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fedbe:	4620      	mov	r0, r4
 23fedc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fedc4:	2174      	movs	r1, #116	; 0x74
 23fedc6:	f7fc be90 	b.w	23fbaea <_ZdlPvj>
 23fedca:	bd10      	pop	{r4, pc}
 23fedcc:	1007aec8 	.word	0x1007aec8

023fedd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23fedd0:	2300      	movs	r3, #0
 23fedd2:	4802      	ldr	r0, [pc, #8]	; (23feddc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fedd4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23fedd6:	f7fd baa7 	b.w	23fc328 <os_mutex_recursive_create>
 23fedda:	bf00      	nop
 23feddc:	1007aec4 	.word	0x1007aec4

023fede0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fede0:	4770      	bx	lr

023fede2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fede2:	7441      	strb	r1, [r0, #17]
}
 23fede4:	4770      	bx	lr

023fede6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fede6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fede8:	7c00      	ldrb	r0, [r0, #16]
 23fedea:	f7fd fa65 	bl	23fc2b8 <hal_usart_available_data_for_write>
}
 23fedee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fedf2:	bd08      	pop	{r3, pc}

023fedf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fedf4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fedf6:	7c00      	ldrb	r0, [r0, #16]
 23fedf8:	f7fd fa18 	bl	23fc22c <hal_usart_available>
}
 23fedfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fee00:	bd08      	pop	{r3, pc}

023fee02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fee02:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fee04:	7c00      	ldrb	r0, [r0, #16]
 23fee06:	f7fd fa2d 	bl	23fc264 <hal_usart_peek>
}
 23fee0a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee0e:	bd08      	pop	{r3, pc}

023fee10 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fee10:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fee12:	7c00      	ldrb	r0, [r0, #16]
 23fee14:	f7fd fa18 	bl	23fc248 <hal_usart_read>
}
 23fee18:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fee1c:	bd08      	pop	{r3, pc}

023fee1e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fee1e:	7c00      	ldrb	r0, [r0, #16]
 23fee20:	f7fd ba2e 	b.w	23fc280 <hal_usart_flush>

023fee24 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fee24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee26:	7c45      	ldrb	r5, [r0, #17]
{
 23fee28:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee2a:	b12d      	cbz	r5, 23fee38 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fee2c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fee2e:	b003      	add	sp, #12
 23fee30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fee34:	f7fd b9ec 	b.w	23fc210 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fee38:	7c00      	ldrb	r0, [r0, #16]
 23fee3a:	9101      	str	r1, [sp, #4]
 23fee3c:	f7fd fa3c 	bl	23fc2b8 <hal_usart_available_data_for_write>
 23fee40:	2800      	cmp	r0, #0
 23fee42:	9901      	ldr	r1, [sp, #4]
 23fee44:	dcf2      	bgt.n	23fee2c <_ZN11USARTSerial5writeEh+0x8>
}
 23fee46:	4628      	mov	r0, r5
 23fee48:	b003      	add	sp, #12
 23fee4a:	bd30      	pop	{r4, r5, pc}

023fee4c <_ZN11USARTSerialD0Ev>:
 23fee4c:	b510      	push	{r4, lr}
 23fee4e:	4604      	mov	r4, r0
 23fee50:	2114      	movs	r1, #20
 23fee52:	f7fc fe4a 	bl	23fbaea <_ZdlPvj>
 23fee56:	4620      	mov	r0, r4
 23fee58:	bd10      	pop	{r4, pc}
	...

023fee5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fee5c:	b510      	push	{r4, lr}
 23fee5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fee62:	4604      	mov	r4, r0
 23fee64:	4608      	mov	r0, r1
 23fee66:	4611      	mov	r1, r2
 23fee68:	2200      	movs	r2, #0
 23fee6a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fee6e:	4b04      	ldr	r3, [pc, #16]	; (23fee80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fee70:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fee72:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fee74:	2301      	movs	r3, #1
 23fee76:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fee78:	f7fd fa3a 	bl	23fc2f0 <hal_usart_init_ex>
}
 23fee7c:	4620      	mov	r0, r4
 23fee7e:	bd10      	pop	{r4, pc}
 23fee80:	023ffce4 	.word	0x023ffce4

023fee84 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fee84:	2300      	movs	r3, #0
 23fee86:	7c00      	ldrb	r0, [r0, #16]
 23fee88:	f7fd ba24 	b.w	23fc2d4 <hal_usart_begin_config>

023fee8c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fee8c:	2200      	movs	r2, #0
 23fee8e:	f7ff bff9 	b.w	23fee84 <_ZN11USARTSerial5beginEmm>

023fee92 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fee92:	7c00      	ldrb	r0, [r0, #16]
 23fee94:	f7fd b9ae 	b.w	23fc1f4 <hal_usart_end>

023fee98 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fee98:	7c00      	ldrb	r0, [r0, #16]
 23fee9a:	f7fd b9ff 	b.w	23fc29c <hal_usart_is_enabled>
	...

023feea0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23feea0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23feea2:	2000      	movs	r0, #0
 23feea4:	4b04      	ldr	r3, [pc, #16]	; (23feeb8 <_GLOBAL__sub_I_System+0x18>)
 23feea6:	601a      	str	r2, [r3, #0]
 23feea8:	4b04      	ldr	r3, [pc, #16]	; (23feebc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23feeaa:	4a05      	ldr	r2, [pc, #20]	; (23feec0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23feeac:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23feeb0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23feeb2:	f7fd bc93 	b.w	23fc7dc <set_system_mode>
 23feeb6:	bf00      	nop
 23feeb8:	1007aed8 	.word	0x1007aed8
 23feebc:	1007aecc 	.word	0x1007aecc
 23feec0:	ffff0000 	.word	0xffff0000

023feec4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23feec4:	b510      	push	{r4, lr}
 23feec6:	4604      	mov	r4, r0
 23feec8:	4608      	mov	r0, r1
{
    _spi = spi;
 23feeca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23feecc:	f7fd f914 	bl	23fc0f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23feed0:	2300      	movs	r3, #0
}
 23feed2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23feed4:	6063      	str	r3, [r4, #4]
}
 23feed6:	bd10      	pop	{r4, pc}

023feed8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23feed8:	2200      	movs	r2, #0
 23feeda:	6840      	ldr	r0, [r0, #4]
 23feedc:	4611      	mov	r1, r2
 23feede:	f7fd bc37 	b.w	23fc750 <network_listening>

023feee2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23feee2:	2200      	movs	r2, #0
 23feee4:	6840      	ldr	r0, [r0, #4]
 23feee6:	4611      	mov	r1, r2
 23feee8:	f7fd bc4e 	b.w	23fc788 <network_get_listen_timeout>

023feeec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23feeec:	2200      	movs	r2, #0
 23feeee:	6840      	ldr	r0, [r0, #4]
 23feef0:	f7fd bc3c 	b.w	23fc76c <network_set_listen_timeout>

023feef4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feef4:	2200      	movs	r2, #0
 23feef6:	6840      	ldr	r0, [r0, #4]
 23feef8:	f081 0101 	eor.w	r1, r1, #1
 23feefc:	f7fd bc1a 	b.w	23fc734 <network_listen>

023fef00 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fef00:	2300      	movs	r3, #0
 23fef02:	6840      	ldr	r0, [r0, #4]
 23fef04:	461a      	mov	r2, r3
 23fef06:	4619      	mov	r1, r3
 23fef08:	f7fd bc06 	b.w	23fc718 <network_off>

023fef0c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fef0c:	2300      	movs	r3, #0
 23fef0e:	6840      	ldr	r0, [r0, #4]
 23fef10:	461a      	mov	r2, r3
 23fef12:	4619      	mov	r1, r3
 23fef14:	f7fd bbf2 	b.w	23fc6fc <network_on>

023fef18 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fef18:	2200      	movs	r2, #0
 23fef1a:	6840      	ldr	r0, [r0, #4]
 23fef1c:	4611      	mov	r1, r2
 23fef1e:	f7fd bbdf 	b.w	23fc6e0 <network_ready>

023fef22 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fef22:	2200      	movs	r2, #0
 23fef24:	6840      	ldr	r0, [r0, #4]
 23fef26:	4611      	mov	r1, r2
 23fef28:	f7fd bbbe 	b.w	23fc6a8 <network_connecting>

023fef2c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fef2c:	2200      	movs	r2, #0
 23fef2e:	2102      	movs	r1, #2
 23fef30:	6840      	ldr	r0, [r0, #4]
 23fef32:	f7fd bbc7 	b.w	23fc6c4 <network_disconnect>

023fef36 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fef36:	2300      	movs	r3, #0
 23fef38:	6840      	ldr	r0, [r0, #4]
 23fef3a:	461a      	mov	r2, r3
 23fef3c:	f7fd bba6 	b.w	23fc68c <network_connect>

023fef40 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fef40:	2203      	movs	r2, #3
 23fef42:	4b02      	ldr	r3, [pc, #8]	; (23fef4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fef44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fef46:	4a02      	ldr	r2, [pc, #8]	; (23fef50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fef48:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fef4a:	4770      	bx	lr
 23fef4c:	1007aedc 	.word	0x1007aedc
 23fef50:	023ffd14 	.word	0x023ffd14

023fef54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fef54:	b510      	push	{r4, lr}
 23fef56:	4604      	mov	r4, r0
{
	free(buffer);
 23fef58:	6800      	ldr	r0, [r0, #0]
 23fef5a:	f7fd fc93 	bl	23fc884 <free>
}
 23fef5e:	4620      	mov	r0, r4
 23fef60:	bd10      	pop	{r4, pc}

023fef62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fef62:	b510      	push	{r4, lr}
 23fef64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fef66:	6800      	ldr	r0, [r0, #0]
 23fef68:	b108      	cbz	r0, 23fef6e <_ZN6String10invalidateEv+0xc>
 23fef6a:	f7fd fc8b 	bl	23fc884 <free>
	buffer = NULL;
 23fef6e:	2300      	movs	r3, #0
	capacity = len = 0;
 23fef70:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fef74:	6023      	str	r3, [r4, #0]
}
 23fef76:	bd10      	pop	{r4, pc}

023fef78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fef78:	b538      	push	{r3, r4, r5, lr}
 23fef7a:	4604      	mov	r4, r0
 23fef7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fef7e:	6800      	ldr	r0, [r0, #0]
 23fef80:	3101      	adds	r1, #1
 23fef82:	f7fd fc8d 	bl	23fc8a0 <realloc>
	if (newbuffer) {
 23fef86:	b110      	cbz	r0, 23fef8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fef88:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fef8c:	2001      	movs	r0, #1
	}
	return 0;
}
 23fef8e:	bd38      	pop	{r3, r4, r5, pc}

023fef90 <_ZN6String7reserveEj>:
{
 23fef90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fef92:	6803      	ldr	r3, [r0, #0]
{
 23fef94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fef96:	b123      	cbz	r3, 23fefa2 <_ZN6String7reserveEj+0x12>
 23fef98:	6843      	ldr	r3, [r0, #4]
 23fef9a:	428b      	cmp	r3, r1
 23fef9c:	d301      	bcc.n	23fefa2 <_ZN6String7reserveEj+0x12>
 23fef9e:	2001      	movs	r0, #1
}
 23fefa0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fefa2:	4620      	mov	r0, r4
 23fefa4:	f7ff ffe8 	bl	23fef78 <_ZN6String12changeBufferEj>
 23fefa8:	2800      	cmp	r0, #0
 23fefaa:	d0f9      	beq.n	23fefa0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fefac:	68a3      	ldr	r3, [r4, #8]
 23fefae:	2b00      	cmp	r3, #0
 23fefb0:	d1f5      	bne.n	23fef9e <_ZN6String7reserveEj+0xe>
 23fefb2:	6822      	ldr	r2, [r4, #0]
 23fefb4:	7013      	strb	r3, [r2, #0]
 23fefb6:	e7f2      	b.n	23fef9e <_ZN6String7reserveEj+0xe>

023fefb8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fefb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fefba:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fefbc:	4611      	mov	r1, r2
 23fefbe:	9201      	str	r2, [sp, #4]
{
 23fefc0:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fefc2:	f7ff ffe5 	bl	23fef90 <_ZN6String7reserveEj>
 23fefc6:	9a01      	ldr	r2, [sp, #4]
 23fefc8:	b928      	cbnz	r0, 23fefd6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fefca:	4620      	mov	r0, r4
 23fefcc:	f7ff ffc9 	bl	23fef62 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fefd0:	4620      	mov	r0, r4
 23fefd2:	b003      	add	sp, #12
 23fefd4:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fefd6:	4629      	mov	r1, r5
	len = length;
 23fefd8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fefda:	6820      	ldr	r0, [r4, #0]
 23fefdc:	f000 fb30 	bl	23ff640 <memcpy>
	buffer[len] = 0;
 23fefe0:	2100      	movs	r1, #0
 23fefe2:	6822      	ldr	r2, [r4, #0]
 23fefe4:	68a3      	ldr	r3, [r4, #8]
 23fefe6:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fefe8:	e7f2      	b.n	23fefd0 <_ZN6String4copyEPKcj+0x18>

023fefea <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fefea:	b538      	push	{r3, r4, r5, lr}
 23fefec:	4605      	mov	r5, r0
	if (buffer) {
 23fefee:	6800      	ldr	r0, [r0, #0]
{
 23feff0:	460c      	mov	r4, r1
	if (buffer) {
 23feff2:	b168      	cbz	r0, 23ff010 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23feff4:	686a      	ldr	r2, [r5, #4]
 23feff6:	688b      	ldr	r3, [r1, #8]
 23feff8:	429a      	cmp	r2, r3
 23feffa:	d307      	bcc.n	23ff00c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23feffc:	6809      	ldr	r1, [r1, #0]
 23feffe:	f000 fb94 	bl	23ff72a <strcpy>
			len = rhs.len;
 23ff002:	68a3      	ldr	r3, [r4, #8]
 23ff004:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff006:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff008:	60a3      	str	r3, [r4, #8]
}
 23ff00a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff00c:	f7fd fc3a 	bl	23fc884 <free>
	buffer = rhs.buffer;
 23ff010:	6823      	ldr	r3, [r4, #0]
 23ff012:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff014:	6863      	ldr	r3, [r4, #4]
 23ff016:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff018:	68a3      	ldr	r3, [r4, #8]
 23ff01a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff01c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff01e:	e9c4 3300 	strd	r3, r3, [r4]
 23ff022:	e7f1      	b.n	23ff008 <_ZN6String4moveERS_+0x1e>

023ff024 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff024:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff026:	b510      	push	{r4, lr}
 23ff028:	4604      	mov	r4, r0
	capacity = 0;
 23ff02a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff02e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff030:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff032:	f7ff ffda 	bl	23fefea <_ZN6String4moveERS_>
}
 23ff036:	4620      	mov	r0, r4
 23ff038:	bd10      	pop	{r4, pc}

023ff03a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff03a:	4288      	cmp	r0, r1
{
 23ff03c:	b510      	push	{r4, lr}
 23ff03e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff040:	d005      	beq.n	23ff04e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff042:	680b      	ldr	r3, [r1, #0]
 23ff044:	b12b      	cbz	r3, 23ff052 <_ZN6StringaSERKS_+0x18>
 23ff046:	688a      	ldr	r2, [r1, #8]
 23ff048:	4619      	mov	r1, r3
 23ff04a:	f7ff ffb5 	bl	23fefb8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff04e:	4620      	mov	r0, r4
 23ff050:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff052:	f7ff ff86 	bl	23fef62 <_ZN6String10invalidateEv>
 23ff056:	e7fa      	b.n	23ff04e <_ZN6StringaSERKS_+0x14>

023ff058 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff058:	2300      	movs	r3, #0
String::String(const String &value)
 23ff05a:	b510      	push	{r4, lr}
 23ff05c:	4604      	mov	r4, r0
	capacity = 0;
 23ff05e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff062:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff064:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff066:	f7ff ffe8 	bl	23ff03a <_ZN6StringaSERKS_>
}
 23ff06a:	4620      	mov	r0, r4
 23ff06c:	bd10      	pop	{r4, pc}

023ff06e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff06e:	4770      	bx	lr

023ff070 <_Z17acquireWireBufferv>:
{
 23ff070:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff072:	4b0a      	ldr	r3, [pc, #40]	; (23ff09c <_Z17acquireWireBufferv+0x2c>)
{
 23ff074:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff076:	6003      	str	r3, [r0, #0]
 23ff078:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff07a:	4909      	ldr	r1, [pc, #36]	; (23ff0a0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff07c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff07e:	2020      	movs	r0, #32
 23ff080:	f000 f9a9 	bl	23ff3d6 <_ZnajRKSt9nothrow_t>
	};
 23ff084:	2520      	movs	r5, #32
 23ff086:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff088:	4905      	ldr	r1, [pc, #20]	; (23ff0a0 <_Z17acquireWireBufferv+0x30>)
 23ff08a:	4628      	mov	r0, r5
	};
 23ff08c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff08e:	f000 f9a2 	bl	23ff3d6 <_ZnajRKSt9nothrow_t>
	};
 23ff092:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff096:	4620      	mov	r0, r4
 23ff098:	bd38      	pop	{r3, r4, r5, pc}
 23ff09a:	bf00      	nop
 23ff09c:	00010018 	.word	0x00010018
 23ff0a0:	023ffd48 	.word	0x023ffd48

023ff0a4 <_Z19__fetch_global_Wirev>:
{
 23ff0a4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff0a6:	4d0e      	ldr	r5, [pc, #56]	; (23ff0e0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff0a8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff0aa:	e8d5 1f8f 	ldab	r1, [r5]
 23ff0ae:	f011 0401 	ands.w	r4, r1, #1
 23ff0b2:	d111      	bne.n	23ff0d8 <_Z19__fetch_global_Wirev+0x34>
 23ff0b4:	4628      	mov	r0, r5
 23ff0b6:	f7fc fd27 	bl	23fbb08 <__cxa_guard_acquire>
 23ff0ba:	b168      	cbz	r0, 23ff0d8 <_Z19__fetch_global_Wirev+0x34>
 23ff0bc:	4668      	mov	r0, sp
 23ff0be:	f7ff ffd7 	bl	23ff070 <_Z17acquireWireBufferv>
 23ff0c2:	466a      	mov	r2, sp
 23ff0c4:	4621      	mov	r1, r4
 23ff0c6:	4807      	ldr	r0, [pc, #28]	; (23ff0e4 <_Z19__fetch_global_Wirev+0x40>)
 23ff0c8:	f7fd fd5a 	bl	23fcb80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff0cc:	4628      	mov	r0, r5
 23ff0ce:	f7fc fd20 	bl	23fbb12 <__cxa_guard_release>
 23ff0d2:	4805      	ldr	r0, [pc, #20]	; (23ff0e8 <_Z19__fetch_global_Wirev+0x44>)
 23ff0d4:	f000 fa96 	bl	23ff604 <atexit>
	return wire;
}
 23ff0d8:	4802      	ldr	r0, [pc, #8]	; (23ff0e4 <_Z19__fetch_global_Wirev+0x40>)
 23ff0da:	b007      	add	sp, #28
 23ff0dc:	bd30      	pop	{r4, r5, pc}
 23ff0de:	bf00      	nop
 23ff0e0:	1007aee4 	.word	0x1007aee4
 23ff0e4:	1007aee8 	.word	0x1007aee8
 23ff0e8:	023ff06f 	.word	0x023ff06f

023ff0ec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff0ec:	4770      	bx	lr
	...

023ff0f0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff0f0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff0f2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff0f4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff0f6:	462a      	mov	r2, r5
 23ff0f8:	2100      	movs	r1, #0
 23ff0fa:	f000 fac8 	bl	23ff68e <memset>
 23ff0fe:	8025      	strh	r5, [r4, #0]
 23ff100:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff102:	4907      	ldr	r1, [pc, #28]	; (23ff120 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff104:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff106:	8125      	strh	r5, [r4, #8]
 23ff108:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff10a:	f000 f964 	bl	23ff3d6 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff10e:	4904      	ldr	r1, [pc, #16]	; (23ff120 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff110:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff112:	4628      	mov	r0, r5
 23ff114:	f000 f95f 	bl	23ff3d6 <_ZnajRKSt9nothrow_t>
    };
 23ff118:	60e0      	str	r0, [r4, #12]
}
 23ff11a:	4620      	mov	r0, r4
 23ff11c:	bd38      	pop	{r3, r4, r5, pc}
 23ff11e:	bf00      	nop
 23ff120:	023ffd48 	.word	0x023ffd48

023ff124 <__tcf_2>:
 23ff124:	4770      	bx	lr

023ff126 <__tcf_1>:
 23ff126:	4770      	bx	lr

023ff128 <_Z20acquireSerial1Bufferv>:
{
 23ff128:	b510      	push	{r4, lr}
 23ff12a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff12c:	f7ff ffe0 	bl	23ff0f0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff130:	4620      	mov	r0, r4
 23ff132:	bd10      	pop	{r4, pc}

023ff134 <_Z20acquireSerial2Bufferv>:
 23ff134:	b510      	push	{r4, lr}
 23ff136:	4604      	mov	r4, r0
 23ff138:	f7ff ffda 	bl	23ff0f0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff13c:	4620      	mov	r0, r4
 23ff13e:	bd10      	pop	{r4, pc}

023ff140 <_Z20acquireSerial3Bufferv>:
 23ff140:	b510      	push	{r4, lr}
 23ff142:	4604      	mov	r4, r0
 23ff144:	f7ff ffd4 	bl	23ff0f0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff148:	4620      	mov	r0, r4
 23ff14a:	bd10      	pop	{r4, pc}

023ff14c <_Z22__fetch_global_Serial1v>:
{
 23ff14c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff14e:	4d0e      	ldr	r5, [pc, #56]	; (23ff188 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff150:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff152:	e8d5 1f8f 	ldab	r1, [r5]
 23ff156:	f011 0401 	ands.w	r4, r1, #1
 23ff15a:	d111      	bne.n	23ff180 <_Z22__fetch_global_Serial1v+0x34>
 23ff15c:	4628      	mov	r0, r5
 23ff15e:	f7fc fcd3 	bl	23fbb08 <__cxa_guard_acquire>
 23ff162:	b168      	cbz	r0, 23ff180 <_Z22__fetch_global_Serial1v+0x34>
 23ff164:	a801      	add	r0, sp, #4
 23ff166:	f7ff ffdf 	bl	23ff128 <_Z20acquireSerial1Bufferv>
 23ff16a:	4621      	mov	r1, r4
 23ff16c:	aa01      	add	r2, sp, #4
 23ff16e:	4807      	ldr	r0, [pc, #28]	; (23ff18c <_Z22__fetch_global_Serial1v+0x40>)
 23ff170:	f7ff fe74 	bl	23fee5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff174:	4628      	mov	r0, r5
 23ff176:	f7fc fccc 	bl	23fbb12 <__cxa_guard_release>
 23ff17a:	4805      	ldr	r0, [pc, #20]	; (23ff190 <_Z22__fetch_global_Serial1v+0x44>)
 23ff17c:	f000 fa42 	bl	23ff604 <atexit>
    return serial1;
}
 23ff180:	4802      	ldr	r0, [pc, #8]	; (23ff18c <_Z22__fetch_global_Serial1v+0x40>)
 23ff182:	b007      	add	sp, #28
 23ff184:	bd30      	pop	{r4, r5, pc}
 23ff186:	bf00      	nop
 23ff188:	1007af00 	.word	0x1007af00
 23ff18c:	1007af0c 	.word	0x1007af0c
 23ff190:	023ff0ed 	.word	0x023ff0ed

023ff194 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff194:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff196:	4c0d      	ldr	r4, [pc, #52]	; (23ff1cc <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff198:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff19a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff19e:	07db      	lsls	r3, r3, #31
 23ff1a0:	d411      	bmi.n	23ff1c6 <_Z22__fetch_global_Serial2v+0x32>
 23ff1a2:	4620      	mov	r0, r4
 23ff1a4:	f7fc fcb0 	bl	23fbb08 <__cxa_guard_acquire>
 23ff1a8:	b168      	cbz	r0, 23ff1c6 <_Z22__fetch_global_Serial2v+0x32>
 23ff1aa:	a801      	add	r0, sp, #4
 23ff1ac:	f7ff ffc2 	bl	23ff134 <_Z20acquireSerial2Bufferv>
 23ff1b0:	2101      	movs	r1, #1
 23ff1b2:	aa01      	add	r2, sp, #4
 23ff1b4:	4806      	ldr	r0, [pc, #24]	; (23ff1d0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff1b6:	f7ff fe51 	bl	23fee5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1ba:	4620      	mov	r0, r4
 23ff1bc:	f7fc fca9 	bl	23fbb12 <__cxa_guard_release>
 23ff1c0:	4804      	ldr	r0, [pc, #16]	; (23ff1d4 <_Z22__fetch_global_Serial2v+0x40>)
 23ff1c2:	f000 fa1f 	bl	23ff604 <atexit>
	return serial2;
}
 23ff1c6:	4802      	ldr	r0, [pc, #8]	; (23ff1d0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff1c8:	b006      	add	sp, #24
 23ff1ca:	bd10      	pop	{r4, pc}
 23ff1cc:	1007af04 	.word	0x1007af04
 23ff1d0:	1007af20 	.word	0x1007af20
 23ff1d4:	023ff127 	.word	0x023ff127

023ff1d8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff1d8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff1da:	f7ff ffdb 	bl	23ff194 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff1de:	4b07      	ldr	r3, [pc, #28]	; (23ff1fc <_Z15serialEventRun2v+0x24>)
 23ff1e0:	4604      	mov	r4, r0
 23ff1e2:	b153      	cbz	r3, 23ff1fa <_Z15serialEventRun2v+0x22>
 23ff1e4:	f7ff fe58 	bl	23fee98 <_ZN11USARTSerial9isEnabledEv>
 23ff1e8:	b138      	cbz	r0, 23ff1fa <_Z15serialEventRun2v+0x22>
 23ff1ea:	6823      	ldr	r3, [r4, #0]
 23ff1ec:	4620      	mov	r0, r4
 23ff1ee:	691b      	ldr	r3, [r3, #16]
 23ff1f0:	4798      	blx	r3
 23ff1f2:	2800      	cmp	r0, #0
 23ff1f4:	dd01      	ble.n	23ff1fa <_Z15serialEventRun2v+0x22>
        handler();
 23ff1f6:	e000      	b.n	23ff1fa <_Z15serialEventRun2v+0x22>
 23ff1f8:	bf00      	nop
}
 23ff1fa:	bd10      	pop	{r4, pc}
 23ff1fc:	00000000 	.word	0x00000000

023ff200 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff200:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff202:	4c0d      	ldr	r4, [pc, #52]	; (23ff238 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff204:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff206:	e8d4 3f8f 	ldab	r3, [r4]
 23ff20a:	07db      	lsls	r3, r3, #31
 23ff20c:	d411      	bmi.n	23ff232 <_Z22__fetch_global_Serial3v+0x32>
 23ff20e:	4620      	mov	r0, r4
 23ff210:	f7fc fc7a 	bl	23fbb08 <__cxa_guard_acquire>
 23ff214:	b168      	cbz	r0, 23ff232 <_Z22__fetch_global_Serial3v+0x32>
 23ff216:	a801      	add	r0, sp, #4
 23ff218:	f7ff ff92 	bl	23ff140 <_Z20acquireSerial3Bufferv>
 23ff21c:	2102      	movs	r1, #2
 23ff21e:	aa01      	add	r2, sp, #4
 23ff220:	4806      	ldr	r0, [pc, #24]	; (23ff23c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff222:	f7ff fe1b 	bl	23fee5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff226:	4620      	mov	r0, r4
 23ff228:	f7fc fc73 	bl	23fbb12 <__cxa_guard_release>
 23ff22c:	4804      	ldr	r0, [pc, #16]	; (23ff240 <_Z22__fetch_global_Serial3v+0x40>)
 23ff22e:	f000 f9e9 	bl	23ff604 <atexit>
	return serial3;
}
 23ff232:	4802      	ldr	r0, [pc, #8]	; (23ff23c <_Z22__fetch_global_Serial3v+0x3c>)
 23ff234:	b006      	add	sp, #24
 23ff236:	bd10      	pop	{r4, pc}
 23ff238:	1007af08 	.word	0x1007af08
 23ff23c:	1007af34 	.word	0x1007af34
 23ff240:	023ff125 	.word	0x023ff125

023ff244 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff244:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff246:	f7ff ffdb 	bl	23ff200 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff24a:	4b07      	ldr	r3, [pc, #28]	; (23ff268 <_Z15serialEventRun3v+0x24>)
 23ff24c:	4604      	mov	r4, r0
 23ff24e:	b153      	cbz	r3, 23ff266 <_Z15serialEventRun3v+0x22>
 23ff250:	f7ff fe22 	bl	23fee98 <_ZN11USARTSerial9isEnabledEv>
 23ff254:	b138      	cbz	r0, 23ff266 <_Z15serialEventRun3v+0x22>
 23ff256:	6823      	ldr	r3, [r4, #0]
 23ff258:	4620      	mov	r0, r4
 23ff25a:	691b      	ldr	r3, [r3, #16]
 23ff25c:	4798      	blx	r3
 23ff25e:	2800      	cmp	r0, #0
 23ff260:	dd01      	ble.n	23ff266 <_Z15serialEventRun3v+0x22>
        handler();
 23ff262:	e000      	b.n	23ff266 <_Z15serialEventRun3v+0x22>
 23ff264:	bf00      	nop
}
 23ff266:	bd10      	pop	{r4, pc}
 23ff268:	00000000 	.word	0x00000000

023ff26c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff26c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff26e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff270:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff272:	d902      	bls.n	23ff27a <pinAvailable+0xe>
    return false;
 23ff274:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff276:	b003      	add	sp, #12
 23ff278:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff27a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff27e:	2b02      	cmp	r3, #2
 23ff280:	d90b      	bls.n	23ff29a <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff282:	2801      	cmp	r0, #1
 23ff284:	d821      	bhi.n	23ff2ca <pinAvailable+0x5e>
 23ff286:	f7ff ff0d 	bl	23ff0a4 <_Z19__fetch_global_Wirev>
 23ff28a:	2100      	movs	r1, #0
 23ff28c:	7c00      	ldrb	r0, [r0, #16]
 23ff28e:	f7fc ff95 	bl	23fc1bc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff292:	f080 0001 	eor.w	r0, r0, #1
 23ff296:	b2c0      	uxtb	r0, r0
 23ff298:	e7ed      	b.n	23ff276 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff29a:	4d11      	ldr	r5, [pc, #68]	; (23ff2e0 <pinAvailable+0x74>)
 23ff29c:	e8d5 1f8f 	ldab	r1, [r5]
 23ff2a0:	f011 0101 	ands.w	r1, r1, #1
 23ff2a4:	d10b      	bne.n	23ff2be <pinAvailable+0x52>
 23ff2a6:	4628      	mov	r0, r5
 23ff2a8:	9101      	str	r1, [sp, #4]
 23ff2aa:	f7fc fc2d 	bl	23fbb08 <__cxa_guard_acquire>
 23ff2ae:	9901      	ldr	r1, [sp, #4]
 23ff2b0:	b128      	cbz	r0, 23ff2be <pinAvailable+0x52>
 23ff2b2:	480c      	ldr	r0, [pc, #48]	; (23ff2e4 <pinAvailable+0x78>)
 23ff2b4:	f7ff fe06 	bl	23feec4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff2b8:	4628      	mov	r0, r5
 23ff2ba:	f7fc fc2a 	bl	23fbb12 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff2be:	4b09      	ldr	r3, [pc, #36]	; (23ff2e4 <pinAvailable+0x78>)
 23ff2c0:	7818      	ldrb	r0, [r3, #0]
 23ff2c2:	f7fc ff27 	bl	23fc114 <hal_spi_is_enabled>
 23ff2c6:	2800      	cmp	r0, #0
 23ff2c8:	d1d4      	bne.n	23ff274 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff2ca:	3c08      	subs	r4, #8
 23ff2cc:	2c01      	cmp	r4, #1
 23ff2ce:	d805      	bhi.n	23ff2dc <pinAvailable+0x70>
 23ff2d0:	f7ff ff3c 	bl	23ff14c <_Z22__fetch_global_Serial1v>
 23ff2d4:	7c00      	ldrb	r0, [r0, #16]
 23ff2d6:	f7fc ffe1 	bl	23fc29c <hal_usart_is_enabled>
 23ff2da:	e7da      	b.n	23ff292 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff2dc:	2001      	movs	r0, #1
 23ff2de:	e7ca      	b.n	23ff276 <pinAvailable+0xa>
 23ff2e0:	1007af48 	.word	0x1007af48
 23ff2e4:	1007af4c 	.word	0x1007af4c

023ff2e8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff2e8:	281b      	cmp	r0, #27
{
 23ff2ea:	b538      	push	{r3, r4, r5, lr}
 23ff2ec:	4604      	mov	r4, r0
 23ff2ee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff2f0:	d80a      	bhi.n	23ff308 <pinMode+0x20>
 23ff2f2:	29ff      	cmp	r1, #255	; 0xff
 23ff2f4:	d008      	beq.n	23ff308 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff2f6:	f7ff ffb9 	bl	23ff26c <pinAvailable>
 23ff2fa:	b128      	cbz	r0, 23ff308 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff2fc:	4629      	mov	r1, r5
 23ff2fe:	4620      	mov	r0, r4
}
 23ff300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff304:	f7fd b8f0 	b.w	23fc4e8 <hal_gpio_mode>
}
 23ff308:	bd38      	pop	{r3, r4, r5, pc}

023ff30a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff30a:	b538      	push	{r3, r4, r5, lr}
 23ff30c:	4604      	mov	r4, r0
 23ff30e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff310:	f7fd f8f8 	bl	23fc504 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff314:	28ff      	cmp	r0, #255	; 0xff
 23ff316:	d010      	beq.n	23ff33a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff318:	2806      	cmp	r0, #6
 23ff31a:	d804      	bhi.n	23ff326 <digitalWrite+0x1c>
 23ff31c:	234d      	movs	r3, #77	; 0x4d
 23ff31e:	fa23 f000 	lsr.w	r0, r3, r0
 23ff322:	07c3      	lsls	r3, r0, #31
 23ff324:	d409      	bmi.n	23ff33a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff326:	4620      	mov	r0, r4
 23ff328:	f7ff ffa0 	bl	23ff26c <pinAvailable>
 23ff32c:	b128      	cbz	r0, 23ff33a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff32e:	4629      	mov	r1, r5
 23ff330:	4620      	mov	r0, r4
}
 23ff332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff336:	f7fd b8f3 	b.w	23fc520 <hal_gpio_write>
}
 23ff33a:	bd38      	pop	{r3, r4, r5, pc}

023ff33c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23ff33c:	b510      	push	{r4, lr}
 23ff33e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23ff340:	f7fd f8e0 	bl	23fc504 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23ff344:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23ff346:	b2db      	uxtb	r3, r3
 23ff348:	2b01      	cmp	r3, #1
 23ff34a:	d908      	bls.n	23ff35e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23ff34c:	4620      	mov	r0, r4
 23ff34e:	f7ff ff8d 	bl	23ff26c <pinAvailable>
 23ff352:	b120      	cbz	r0, 23ff35e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23ff354:	4620      	mov	r0, r4
}
 23ff356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23ff35a:	f7fd b8ef 	b.w	23fc53c <hal_gpio_read>
}
 23ff35e:	2000      	movs	r0, #0
 23ff360:	bd10      	pop	{r4, pc}

023ff362 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ff362:	b510      	push	{r4, lr}
 23ff364:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ff366:	f7ff ff81 	bl	23ff26c <pinAvailable>
 23ff36a:	b150      	cbz	r0, 23ff382 <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ff36c:	2103      	movs	r1, #3
 23ff36e:	4620      	mov	r0, r4
 23ff370:	f7fd f8ac 	bl	23fc4cc <hal_pin_validate_function>
 23ff374:	2803      	cmp	r0, #3
 23ff376:	d104      	bne.n	23ff382 <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ff378:	4620      	mov	r0, r4
}
 23ff37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ff37e:	f7fd b8f9 	b.w	23fc574 <hal_adc_read>
}
 23ff382:	2000      	movs	r0, #0
 23ff384:	bd10      	pop	{r4, pc}

023ff386 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
 23ff386:	b538      	push	{r3, r4, r5, lr}
 23ff388:	4604      	mov	r4, r0
 23ff38a:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 23ff38c:	f7ff ff6e 	bl	23ff26c <pinAvailable>
 23ff390:	b1f0      	cbz	r0, 23ff3d0 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23ff392:	2104      	movs	r1, #4
 23ff394:	4620      	mov	r0, r4
 23ff396:	f7fd f899 	bl	23fc4cc <hal_pin_validate_function>
 23ff39a:	2804      	cmp	r0, #4
 23ff39c:	d105      	bne.n	23ff3aa <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 23ff39e:	4620      	mov	r0, r4
 23ff3a0:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 23ff3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 23ff3a6:	f7fd b8d7 	b.w	23fc558 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23ff3aa:	2102      	movs	r1, #2
 23ff3ac:	4620      	mov	r0, r4
 23ff3ae:	f7fd f88d 	bl	23fc4cc <hal_pin_validate_function>
 23ff3b2:	2802      	cmp	r0, #2
 23ff3b4:	d10c      	bne.n	23ff3d0 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
 23ff3b6:	4620      	mov	r0, r4
 23ff3b8:	f7fd f8a4 	bl	23fc504 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23ff3bc:	2801      	cmp	r0, #1
 23ff3be:	d001      	beq.n	23ff3c4 <_Z11analogWritetm+0x3e>
 23ff3c0:	2804      	cmp	r0, #4
 23ff3c2:	d105      	bne.n	23ff3d0 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 23ff3c4:	4629      	mov	r1, r5
 23ff3c6:	4620      	mov	r0, r4
}
 23ff3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 23ff3cc:	f7fd b8e0 	b.w	23fc590 <hal_pwm_write_ext>
}
 23ff3d0:	bd38      	pop	{r3, r4, r5, pc}

023ff3d2 <_ZnwjRKSt9nothrow_t>:
 23ff3d2:	f7fc bb86 	b.w	23fbae2 <_Znwj>

023ff3d6 <_ZnajRKSt9nothrow_t>:
 23ff3d6:	f7fc bb86 	b.w	23fbae6 <_Znaj>

023ff3da <_ZSt25__throw_bad_function_callv>:
 23ff3da:	b508      	push	{r3, lr}
 23ff3dc:	f7fd fa7c 	bl	23fc8d8 <abort>

023ff3e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff3e0:	4901      	ldr	r1, [pc, #4]	; (23ff3e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff3e2:	f000 b8f9 	b.w	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff3e6:	bf00      	nop
 23ff3e8:	023ffd64 	.word	0x023ffd64

023ff3ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff3ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff3ee:	2400      	movs	r4, #0
 23ff3f0:	2310      	movs	r3, #16
 23ff3f2:	4615      	mov	r5, r2
 23ff3f4:	6812      	ldr	r2, [r2, #0]
 23ff3f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff3fa:	6803      	ldr	r3, [r0, #0]
 23ff3fc:	e9cd 4400 	strd	r4, r4, [sp]
 23ff400:	699e      	ldr	r6, [r3, #24]
 23ff402:	466b      	mov	r3, sp
 23ff404:	47b0      	blx	r6
 23ff406:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff40a:	f003 0306 	and.w	r3, r3, #6
 23ff40e:	2b06      	cmp	r3, #6
 23ff410:	bf05      	ittet	eq
 23ff412:	9b00      	ldreq	r3, [sp, #0]
 23ff414:	2001      	moveq	r0, #1
 23ff416:	4620      	movne	r0, r4
 23ff418:	602b      	streq	r3, [r5, #0]
 23ff41a:	b004      	add	sp, #16
 23ff41c:	bd70      	pop	{r4, r5, r6, pc}

023ff41e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff41e:	9800      	ldr	r0, [sp, #0]
 23ff420:	4290      	cmp	r0, r2
 23ff422:	bf14      	ite	ne
 23ff424:	2001      	movne	r0, #1
 23ff426:	2006      	moveq	r0, #6
 23ff428:	4770      	bx	lr
	...

023ff42c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff42c:	4b03      	ldr	r3, [pc, #12]	; (23ff43c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff42e:	b510      	push	{r4, lr}
 23ff430:	4604      	mov	r4, r0
 23ff432:	6003      	str	r3, [r0, #0]
 23ff434:	f000 f8cd 	bl	23ff5d2 <_ZNSt9type_infoD1Ev>
 23ff438:	4620      	mov	r0, r4
 23ff43a:	bd10      	pop	{r4, pc}
 23ff43c:	023ffda4 	.word	0x023ffda4

023ff440 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff440:	b510      	push	{r4, lr}
 23ff442:	4604      	mov	r4, r0
 23ff444:	f7ff fff2 	bl	23ff42c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff448:	2108      	movs	r1, #8
 23ff44a:	4620      	mov	r0, r4
 23ff44c:	f7fc fb4d 	bl	23fbaea <_ZdlPvj>
 23ff450:	4620      	mov	r0, r4
 23ff452:	bd10      	pop	{r4, pc}

023ff454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff458:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff45c:	461f      	mov	r7, r3
 23ff45e:	4606      	mov	r6, r0
 23ff460:	4615      	mov	r5, r2
 23ff462:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff466:	4598      	cmp	r8, r3
 23ff468:	d107      	bne.n	23ff47a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff46a:	9907      	ldr	r1, [sp, #28]
 23ff46c:	f000 f8b4 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff470:	b118      	cbz	r0, 23ff47a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff472:	7165      	strb	r5, [r4, #5]
 23ff474:	2000      	movs	r0, #0
 23ff476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff47a:	4639      	mov	r1, r7
 23ff47c:	4630      	mov	r0, r6
 23ff47e:	f000 f8ab 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff482:	2800      	cmp	r0, #0
 23ff484:	d0f6      	beq.n	23ff474 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff486:	2301      	movs	r3, #1
 23ff488:	f8c4 8000 	str.w	r8, [r4]
 23ff48c:	7125      	strb	r5, [r4, #4]
 23ff48e:	71a3      	strb	r3, [r4, #6]
 23ff490:	e7f0      	b.n	23ff474 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff492 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff492:	b538      	push	{r3, r4, r5, lr}
 23ff494:	4615      	mov	r5, r2
 23ff496:	461c      	mov	r4, r3
 23ff498:	f000 f89e 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff49c:	b120      	cbz	r0, 23ff4a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff49e:	2308      	movs	r3, #8
 23ff4a0:	6025      	str	r5, [r4, #0]
 23ff4a2:	60e3      	str	r3, [r4, #12]
 23ff4a4:	2306      	movs	r3, #6
 23ff4a6:	7123      	strb	r3, [r4, #4]
 23ff4a8:	bd38      	pop	{r3, r4, r5, pc}

023ff4aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff4aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff4ac:	4605      	mov	r5, r0
 23ff4ae:	460c      	mov	r4, r1
 23ff4b0:	461e      	mov	r6, r3
 23ff4b2:	9201      	str	r2, [sp, #4]
 23ff4b4:	f000 f890 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff4b8:	b950      	cbnz	r0, 23ff4d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff4ba:	2e03      	cmp	r6, #3
 23ff4bc:	d808      	bhi.n	23ff4d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff4be:	6823      	ldr	r3, [r4, #0]
 23ff4c0:	4629      	mov	r1, r5
 23ff4c2:	9a01      	ldr	r2, [sp, #4]
 23ff4c4:	4620      	mov	r0, r4
 23ff4c6:	695b      	ldr	r3, [r3, #20]
 23ff4c8:	b002      	add	sp, #8
 23ff4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff4ce:	4718      	bx	r3
 23ff4d0:	b002      	add	sp, #8
 23ff4d2:	bd70      	pop	{r4, r5, r6, pc}

023ff4d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff4d4:	4b03      	ldr	r3, [pc, #12]	; (23ff4e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff4d6:	b510      	push	{r4, lr}
 23ff4d8:	4604      	mov	r4, r0
 23ff4da:	6003      	str	r3, [r0, #0]
 23ff4dc:	f7ff ffa6 	bl	23ff42c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff4e0:	4620      	mov	r0, r4
 23ff4e2:	bd10      	pop	{r4, pc}
 23ff4e4:	023ffe04 	.word	0x023ffe04

023ff4e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff4e8:	b510      	push	{r4, lr}
 23ff4ea:	4604      	mov	r4, r0
 23ff4ec:	f7ff fff2 	bl	23ff4d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff4f0:	210c      	movs	r1, #12
 23ff4f2:	4620      	mov	r0, r4
 23ff4f4:	f7fc faf9 	bl	23fbaea <_ZdlPvj>
 23ff4f8:	4620      	mov	r0, r4
 23ff4fa:	bd10      	pop	{r4, pc}

023ff4fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff4fe:	9f08      	ldr	r7, [sp, #32]
 23ff500:	4605      	mov	r5, r0
 23ff502:	460e      	mov	r6, r1
 23ff504:	4614      	mov	r4, r2
 23ff506:	4297      	cmp	r7, r2
 23ff508:	d00a      	beq.n	23ff520 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff50a:	68a8      	ldr	r0, [r5, #8]
 23ff50c:	4631      	mov	r1, r6
 23ff50e:	6802      	ldr	r2, [r0, #0]
 23ff510:	9708      	str	r7, [sp, #32]
 23ff512:	6a15      	ldr	r5, [r2, #32]
 23ff514:	4622      	mov	r2, r4
 23ff516:	46ac      	mov	ip, r5
 23ff518:	b003      	add	sp, #12
 23ff51a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff51e:	4760      	bx	ip
 23ff520:	4619      	mov	r1, r3
 23ff522:	9301      	str	r3, [sp, #4]
 23ff524:	f000 f858 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff528:	9b01      	ldr	r3, [sp, #4]
 23ff52a:	2800      	cmp	r0, #0
 23ff52c:	d0ed      	beq.n	23ff50a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff52e:	2006      	movs	r0, #6
 23ff530:	b003      	add	sp, #12
 23ff532:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff534:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff538:	460d      	mov	r5, r1
 23ff53a:	4619      	mov	r1, r3
 23ff53c:	4681      	mov	r9, r0
 23ff53e:	4617      	mov	r7, r2
 23ff540:	4698      	mov	r8, r3
 23ff542:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff546:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff54a:	f000 f845 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff54e:	b190      	cbz	r0, 23ff576 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff550:	2d00      	cmp	r5, #0
 23ff552:	6034      	str	r4, [r6, #0]
 23ff554:	7137      	strb	r7, [r6, #4]
 23ff556:	db09      	blt.n	23ff56c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff558:	1961      	adds	r1, r4, r5
 23ff55a:	458a      	cmp	sl, r1
 23ff55c:	bf0c      	ite	eq
 23ff55e:	2106      	moveq	r1, #6
 23ff560:	2101      	movne	r1, #1
 23ff562:	71b1      	strb	r1, [r6, #6]
 23ff564:	2000      	movs	r0, #0
 23ff566:	b001      	add	sp, #4
 23ff568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff56c:	3502      	adds	r5, #2
 23ff56e:	d1f9      	bne.n	23ff564 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff570:	2301      	movs	r3, #1
 23ff572:	71b3      	strb	r3, [r6, #6]
 23ff574:	e7f6      	b.n	23ff564 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff576:	4554      	cmp	r4, sl
 23ff578:	d106      	bne.n	23ff588 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff57a:	4659      	mov	r1, fp
 23ff57c:	4648      	mov	r0, r9
 23ff57e:	f000 f82b 	bl	23ff5d8 <_ZNKSt9type_infoeqERKS_>
 23ff582:	b108      	cbz	r0, 23ff588 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff584:	7177      	strb	r7, [r6, #5]
 23ff586:	e7ed      	b.n	23ff564 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff588:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff58c:	463a      	mov	r2, r7
 23ff58e:	4629      	mov	r1, r5
 23ff590:	6803      	ldr	r3, [r0, #0]
 23ff592:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff596:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff59a:	69dc      	ldr	r4, [r3, #28]
 23ff59c:	4643      	mov	r3, r8
 23ff59e:	46a4      	mov	ip, r4
 23ff5a0:	b001      	add	sp, #4
 23ff5a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff5a6:	4760      	bx	ip

023ff5a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff5ac:	4607      	mov	r7, r0
 23ff5ae:	460c      	mov	r4, r1
 23ff5b0:	4615      	mov	r5, r2
 23ff5b2:	461e      	mov	r6, r3
 23ff5b4:	f7ff ff6d 	bl	23ff492 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff5b8:	b948      	cbnz	r0, 23ff5ce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff5ba:	68b8      	ldr	r0, [r7, #8]
 23ff5bc:	462a      	mov	r2, r5
 23ff5be:	4621      	mov	r1, r4
 23ff5c0:	6803      	ldr	r3, [r0, #0]
 23ff5c2:	699f      	ldr	r7, [r3, #24]
 23ff5c4:	4633      	mov	r3, r6
 23ff5c6:	46bc      	mov	ip, r7
 23ff5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff5cc:	4760      	bx	ip
 23ff5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff5d2 <_ZNSt9type_infoD1Ev>:
 23ff5d2:	4770      	bx	lr

023ff5d4 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff5d4:	2000      	movs	r0, #0
 23ff5d6:	4770      	bx	lr

023ff5d8 <_ZNKSt9type_infoeqERKS_>:
 23ff5d8:	4281      	cmp	r1, r0
 23ff5da:	b508      	push	{r3, lr}
 23ff5dc:	d00e      	beq.n	23ff5fc <_ZNKSt9type_infoeqERKS_+0x24>
 23ff5de:	6840      	ldr	r0, [r0, #4]
 23ff5e0:	7803      	ldrb	r3, [r0, #0]
 23ff5e2:	2b2a      	cmp	r3, #42	; 0x2a
 23ff5e4:	d00c      	beq.n	23ff600 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff5e6:	6849      	ldr	r1, [r1, #4]
 23ff5e8:	780b      	ldrb	r3, [r1, #0]
 23ff5ea:	2b2a      	cmp	r3, #42	; 0x2a
 23ff5ec:	bf08      	it	eq
 23ff5ee:	3101      	addeq	r1, #1
 23ff5f0:	f7fc fa48 	bl	23fba84 <strcmp>
 23ff5f4:	fab0 f080 	clz	r0, r0
 23ff5f8:	0940      	lsrs	r0, r0, #5
 23ff5fa:	bd08      	pop	{r3, pc}
 23ff5fc:	2001      	movs	r0, #1
 23ff5fe:	e7fc      	b.n	23ff5fa <_ZNKSt9type_infoeqERKS_+0x22>
 23ff600:	2000      	movs	r0, #0
 23ff602:	e7fa      	b.n	23ff5fa <_ZNKSt9type_infoeqERKS_+0x22>

023ff604 <atexit>:
 23ff604:	2300      	movs	r3, #0
 23ff606:	4601      	mov	r1, r0
 23ff608:	461a      	mov	r2, r3
 23ff60a:	4618      	mov	r0, r3
 23ff60c:	f000 b94a 	b.w	23ff8a4 <__register_exitproc>

023ff610 <isprint>:
 23ff610:	4b02      	ldr	r3, [pc, #8]	; (23ff61c <isprint+0xc>)
 23ff612:	4418      	add	r0, r3
 23ff614:	7840      	ldrb	r0, [r0, #1]
 23ff616:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff61a:	4770      	bx	lr
 23ff61c:	023ffed1 	.word	0x023ffed1

023ff620 <memcmp>:
 23ff620:	3901      	subs	r1, #1
 23ff622:	4402      	add	r2, r0
 23ff624:	b510      	push	{r4, lr}
 23ff626:	4290      	cmp	r0, r2
 23ff628:	d101      	bne.n	23ff62e <memcmp+0xe>
 23ff62a:	2000      	movs	r0, #0
 23ff62c:	e005      	b.n	23ff63a <memcmp+0x1a>
 23ff62e:	7803      	ldrb	r3, [r0, #0]
 23ff630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff634:	42a3      	cmp	r3, r4
 23ff636:	d001      	beq.n	23ff63c <memcmp+0x1c>
 23ff638:	1b18      	subs	r0, r3, r4
 23ff63a:	bd10      	pop	{r4, pc}
 23ff63c:	3001      	adds	r0, #1
 23ff63e:	e7f2      	b.n	23ff626 <memcmp+0x6>

023ff640 <memcpy>:
 23ff640:	440a      	add	r2, r1
 23ff642:	1e43      	subs	r3, r0, #1
 23ff644:	4291      	cmp	r1, r2
 23ff646:	d100      	bne.n	23ff64a <memcpy+0xa>
 23ff648:	4770      	bx	lr
 23ff64a:	b510      	push	{r4, lr}
 23ff64c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff650:	4291      	cmp	r1, r2
 23ff652:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff656:	d1f9      	bne.n	23ff64c <memcpy+0xc>
 23ff658:	bd10      	pop	{r4, pc}

023ff65a <memmove>:
 23ff65a:	4288      	cmp	r0, r1
 23ff65c:	b510      	push	{r4, lr}
 23ff65e:	eb01 0402 	add.w	r4, r1, r2
 23ff662:	d902      	bls.n	23ff66a <memmove+0x10>
 23ff664:	4284      	cmp	r4, r0
 23ff666:	4623      	mov	r3, r4
 23ff668:	d807      	bhi.n	23ff67a <memmove+0x20>
 23ff66a:	1e43      	subs	r3, r0, #1
 23ff66c:	42a1      	cmp	r1, r4
 23ff66e:	d008      	beq.n	23ff682 <memmove+0x28>
 23ff670:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff674:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff678:	e7f8      	b.n	23ff66c <memmove+0x12>
 23ff67a:	4402      	add	r2, r0
 23ff67c:	4601      	mov	r1, r0
 23ff67e:	428a      	cmp	r2, r1
 23ff680:	d100      	bne.n	23ff684 <memmove+0x2a>
 23ff682:	bd10      	pop	{r4, pc}
 23ff684:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff688:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff68c:	e7f7      	b.n	23ff67e <memmove+0x24>

023ff68e <memset>:
 23ff68e:	4402      	add	r2, r0
 23ff690:	4603      	mov	r3, r0
 23ff692:	4293      	cmp	r3, r2
 23ff694:	d100      	bne.n	23ff698 <memset+0xa>
 23ff696:	4770      	bx	lr
 23ff698:	f803 1b01 	strb.w	r1, [r3], #1
 23ff69c:	e7f9      	b.n	23ff692 <memset+0x4>
	...

023ff6a0 <srand>:
 23ff6a0:	b538      	push	{r3, r4, r5, lr}
 23ff6a2:	4b10      	ldr	r3, [pc, #64]	; (23ff6e4 <srand+0x44>)
 23ff6a4:	4604      	mov	r4, r0
 23ff6a6:	681d      	ldr	r5, [r3, #0]
 23ff6a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff6aa:	b9b3      	cbnz	r3, 23ff6da <srand+0x3a>
 23ff6ac:	2018      	movs	r0, #24
 23ff6ae:	f7fd f8db 	bl	23fc868 <malloc>
 23ff6b2:	4602      	mov	r2, r0
 23ff6b4:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff6b6:	b920      	cbnz	r0, 23ff6c2 <srand+0x22>
 23ff6b8:	4b0b      	ldr	r3, [pc, #44]	; (23ff6e8 <srand+0x48>)
 23ff6ba:	2142      	movs	r1, #66	; 0x42
 23ff6bc:	480b      	ldr	r0, [pc, #44]	; (23ff6ec <srand+0x4c>)
 23ff6be:	f7fd f927 	bl	23fc910 <__assert_func>
 23ff6c2:	490b      	ldr	r1, [pc, #44]	; (23ff6f0 <srand+0x50>)
 23ff6c4:	4b0b      	ldr	r3, [pc, #44]	; (23ff6f4 <srand+0x54>)
 23ff6c6:	e9c0 1300 	strd	r1, r3, [r0]
 23ff6ca:	4b0b      	ldr	r3, [pc, #44]	; (23ff6f8 <srand+0x58>)
 23ff6cc:	2100      	movs	r1, #0
 23ff6ce:	6083      	str	r3, [r0, #8]
 23ff6d0:	230b      	movs	r3, #11
 23ff6d2:	8183      	strh	r3, [r0, #12]
 23ff6d4:	2001      	movs	r0, #1
 23ff6d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff6da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff6dc:	2200      	movs	r2, #0
 23ff6de:	611c      	str	r4, [r3, #16]
 23ff6e0:	615a      	str	r2, [r3, #20]
 23ff6e2:	bd38      	pop	{r3, r4, r5, pc}
 23ff6e4:	1007ad7c 	.word	0x1007ad7c
 23ff6e8:	023ffe3d 	.word	0x023ffe3d
 23ff6ec:	023ffe54 	.word	0x023ffe54
 23ff6f0:	abcd330e 	.word	0xabcd330e
 23ff6f4:	e66d1234 	.word	0xe66d1234
 23ff6f8:	0005deec 	.word	0x0005deec

023ff6fc <strchr>:
 23ff6fc:	b2c9      	uxtb	r1, r1
 23ff6fe:	4603      	mov	r3, r0
 23ff700:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff704:	b11a      	cbz	r2, 23ff70e <strchr+0x12>
 23ff706:	428a      	cmp	r2, r1
 23ff708:	d1f9      	bne.n	23ff6fe <strchr+0x2>
 23ff70a:	4618      	mov	r0, r3
 23ff70c:	4770      	bx	lr
 23ff70e:	2900      	cmp	r1, #0
 23ff710:	bf18      	it	ne
 23ff712:	2300      	movne	r3, #0
 23ff714:	e7f9      	b.n	23ff70a <strchr+0xe>

023ff716 <strchrnul>:
 23ff716:	b510      	push	{r4, lr}
 23ff718:	4604      	mov	r4, r0
 23ff71a:	f7ff ffef 	bl	23ff6fc <strchr>
 23ff71e:	b918      	cbnz	r0, 23ff728 <strchrnul+0x12>
 23ff720:	4620      	mov	r0, r4
 23ff722:	f7fc f9b9 	bl	23fba98 <strlen>
 23ff726:	4420      	add	r0, r4
 23ff728:	bd10      	pop	{r4, pc}

023ff72a <strcpy>:
 23ff72a:	4603      	mov	r3, r0
 23ff72c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff730:	f803 2b01 	strb.w	r2, [r3], #1
 23ff734:	2a00      	cmp	r2, #0
 23ff736:	d1f9      	bne.n	23ff72c <strcpy+0x2>
 23ff738:	4770      	bx	lr

023ff73a <strncmp>:
 23ff73a:	b510      	push	{r4, lr}
 23ff73c:	b17a      	cbz	r2, 23ff75e <strncmp+0x24>
 23ff73e:	4603      	mov	r3, r0
 23ff740:	3901      	subs	r1, #1
 23ff742:	1884      	adds	r4, r0, r2
 23ff744:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff748:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff74c:	4290      	cmp	r0, r2
 23ff74e:	d101      	bne.n	23ff754 <strncmp+0x1a>
 23ff750:	42a3      	cmp	r3, r4
 23ff752:	d101      	bne.n	23ff758 <strncmp+0x1e>
 23ff754:	1a80      	subs	r0, r0, r2
 23ff756:	bd10      	pop	{r4, pc}
 23ff758:	2800      	cmp	r0, #0
 23ff75a:	d1f3      	bne.n	23ff744 <strncmp+0xa>
 23ff75c:	e7fa      	b.n	23ff754 <strncmp+0x1a>
 23ff75e:	4610      	mov	r0, r2
 23ff760:	e7f9      	b.n	23ff756 <strncmp+0x1c>

023ff762 <strrchr>:
 23ff762:	b538      	push	{r3, r4, r5, lr}
 23ff764:	4603      	mov	r3, r0
 23ff766:	460c      	mov	r4, r1
 23ff768:	b969      	cbnz	r1, 23ff786 <strrchr+0x24>
 23ff76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff76e:	f7ff bfc5 	b.w	23ff6fc <strchr>
 23ff772:	1c43      	adds	r3, r0, #1
 23ff774:	4605      	mov	r5, r0
 23ff776:	4621      	mov	r1, r4
 23ff778:	4618      	mov	r0, r3
 23ff77a:	f7ff ffbf 	bl	23ff6fc <strchr>
 23ff77e:	2800      	cmp	r0, #0
 23ff780:	d1f7      	bne.n	23ff772 <strrchr+0x10>
 23ff782:	4628      	mov	r0, r5
 23ff784:	bd38      	pop	{r3, r4, r5, pc}
 23ff786:	2500      	movs	r5, #0
 23ff788:	e7f5      	b.n	23ff776 <strrchr+0x14>
	...

023ff78c <_strtol_l.constprop.0>:
 23ff78c:	2b01      	cmp	r3, #1
 23ff78e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff792:	d001      	beq.n	23ff798 <_strtol_l.constprop.0+0xc>
 23ff794:	2b24      	cmp	r3, #36	; 0x24
 23ff796:	d906      	bls.n	23ff7a6 <_strtol_l.constprop.0+0x1a>
 23ff798:	f7fd f8ac 	bl	23fc8f4 <__errno>
 23ff79c:	2316      	movs	r3, #22
 23ff79e:	6003      	str	r3, [r0, #0]
 23ff7a0:	2000      	movs	r0, #0
 23ff7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff7a6:	460d      	mov	r5, r1
 23ff7a8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff88c <_strtol_l.constprop.0+0x100>
 23ff7ac:	462e      	mov	r6, r5
 23ff7ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff7b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff7b6:	f017 0708 	ands.w	r7, r7, #8
 23ff7ba:	d1f7      	bne.n	23ff7ac <_strtol_l.constprop.0+0x20>
 23ff7bc:	2c2d      	cmp	r4, #45	; 0x2d
 23ff7be:	d132      	bne.n	23ff826 <_strtol_l.constprop.0+0x9a>
 23ff7c0:	782c      	ldrb	r4, [r5, #0]
 23ff7c2:	2701      	movs	r7, #1
 23ff7c4:	1cb5      	adds	r5, r6, #2
 23ff7c6:	2b00      	cmp	r3, #0
 23ff7c8:	d05b      	beq.n	23ff882 <_strtol_l.constprop.0+0xf6>
 23ff7ca:	2b10      	cmp	r3, #16
 23ff7cc:	d109      	bne.n	23ff7e2 <_strtol_l.constprop.0+0x56>
 23ff7ce:	2c30      	cmp	r4, #48	; 0x30
 23ff7d0:	d107      	bne.n	23ff7e2 <_strtol_l.constprop.0+0x56>
 23ff7d2:	782c      	ldrb	r4, [r5, #0]
 23ff7d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff7d8:	2c58      	cmp	r4, #88	; 0x58
 23ff7da:	d14d      	bne.n	23ff878 <_strtol_l.constprop.0+0xec>
 23ff7dc:	786c      	ldrb	r4, [r5, #1]
 23ff7de:	2310      	movs	r3, #16
 23ff7e0:	3502      	adds	r5, #2
 23ff7e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff7e6:	f04f 0c00 	mov.w	ip, #0
 23ff7ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff7ee:	4666      	mov	r6, ip
 23ff7f0:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff7f4:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff7f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff7fc:	f1be 0f09 	cmp.w	lr, #9
 23ff800:	d816      	bhi.n	23ff830 <_strtol_l.constprop.0+0xa4>
 23ff802:	4674      	mov	r4, lr
 23ff804:	42a3      	cmp	r3, r4
 23ff806:	dd24      	ble.n	23ff852 <_strtol_l.constprop.0+0xc6>
 23ff808:	f1bc 0f00 	cmp.w	ip, #0
 23ff80c:	db1e      	blt.n	23ff84c <_strtol_l.constprop.0+0xc0>
 23ff80e:	45b1      	cmp	r9, r6
 23ff810:	d31c      	bcc.n	23ff84c <_strtol_l.constprop.0+0xc0>
 23ff812:	d101      	bne.n	23ff818 <_strtol_l.constprop.0+0x8c>
 23ff814:	45a2      	cmp	sl, r4
 23ff816:	db19      	blt.n	23ff84c <_strtol_l.constprop.0+0xc0>
 23ff818:	fb06 4603 	mla	r6, r6, r3, r4
 23ff81c:	f04f 0c01 	mov.w	ip, #1
 23ff820:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff824:	e7e8      	b.n	23ff7f8 <_strtol_l.constprop.0+0x6c>
 23ff826:	2c2b      	cmp	r4, #43	; 0x2b
 23ff828:	bf04      	itt	eq
 23ff82a:	782c      	ldrbeq	r4, [r5, #0]
 23ff82c:	1cb5      	addeq	r5, r6, #2
 23ff82e:	e7ca      	b.n	23ff7c6 <_strtol_l.constprop.0+0x3a>
 23ff830:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff834:	f1be 0f19 	cmp.w	lr, #25
 23ff838:	d801      	bhi.n	23ff83e <_strtol_l.constprop.0+0xb2>
 23ff83a:	3c37      	subs	r4, #55	; 0x37
 23ff83c:	e7e2      	b.n	23ff804 <_strtol_l.constprop.0+0x78>
 23ff83e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff842:	f1be 0f19 	cmp.w	lr, #25
 23ff846:	d804      	bhi.n	23ff852 <_strtol_l.constprop.0+0xc6>
 23ff848:	3c57      	subs	r4, #87	; 0x57
 23ff84a:	e7db      	b.n	23ff804 <_strtol_l.constprop.0+0x78>
 23ff84c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff850:	e7e6      	b.n	23ff820 <_strtol_l.constprop.0+0x94>
 23ff852:	f1bc 0f00 	cmp.w	ip, #0
 23ff856:	da05      	bge.n	23ff864 <_strtol_l.constprop.0+0xd8>
 23ff858:	2322      	movs	r3, #34	; 0x22
 23ff85a:	4646      	mov	r6, r8
 23ff85c:	6003      	str	r3, [r0, #0]
 23ff85e:	b942      	cbnz	r2, 23ff872 <_strtol_l.constprop.0+0xe6>
 23ff860:	4630      	mov	r0, r6
 23ff862:	e79e      	b.n	23ff7a2 <_strtol_l.constprop.0+0x16>
 23ff864:	b107      	cbz	r7, 23ff868 <_strtol_l.constprop.0+0xdc>
 23ff866:	4276      	negs	r6, r6
 23ff868:	2a00      	cmp	r2, #0
 23ff86a:	d0f9      	beq.n	23ff860 <_strtol_l.constprop.0+0xd4>
 23ff86c:	f1bc 0f00 	cmp.w	ip, #0
 23ff870:	d000      	beq.n	23ff874 <_strtol_l.constprop.0+0xe8>
 23ff872:	1e69      	subs	r1, r5, #1
 23ff874:	6011      	str	r1, [r2, #0]
 23ff876:	e7f3      	b.n	23ff860 <_strtol_l.constprop.0+0xd4>
 23ff878:	2430      	movs	r4, #48	; 0x30
 23ff87a:	2b00      	cmp	r3, #0
 23ff87c:	d1b1      	bne.n	23ff7e2 <_strtol_l.constprop.0+0x56>
 23ff87e:	2308      	movs	r3, #8
 23ff880:	e7af      	b.n	23ff7e2 <_strtol_l.constprop.0+0x56>
 23ff882:	2c30      	cmp	r4, #48	; 0x30
 23ff884:	d0a5      	beq.n	23ff7d2 <_strtol_l.constprop.0+0x46>
 23ff886:	230a      	movs	r3, #10
 23ff888:	e7ab      	b.n	23ff7e2 <_strtol_l.constprop.0+0x56>
 23ff88a:	bf00      	nop
 23ff88c:	023ffed2 	.word	0x023ffed2

023ff890 <strtol>:
 23ff890:	4613      	mov	r3, r2
 23ff892:	460a      	mov	r2, r1
 23ff894:	4601      	mov	r1, r0
 23ff896:	4802      	ldr	r0, [pc, #8]	; (23ff8a0 <strtol+0x10>)
 23ff898:	6800      	ldr	r0, [r0, #0]
 23ff89a:	f7ff bf77 	b.w	23ff78c <_strtol_l.constprop.0>
 23ff89e:	bf00      	nop
 23ff8a0:	1007ad7c 	.word	0x1007ad7c

023ff8a4 <__register_exitproc>:
 23ff8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff8a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff968 <__register_exitproc+0xc4>
 23ff8ac:	4606      	mov	r6, r0
 23ff8ae:	461f      	mov	r7, r3
 23ff8b0:	460d      	mov	r5, r1
 23ff8b2:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8b6:	4691      	mov	r9, r2
 23ff8b8:	f000 f858 	bl	23ff96c <__retarget_lock_acquire_recursive>
 23ff8bc:	4b26      	ldr	r3, [pc, #152]	; (23ff958 <__register_exitproc+0xb4>)
 23ff8be:	681c      	ldr	r4, [r3, #0]
 23ff8c0:	b934      	cbnz	r4, 23ff8d0 <__register_exitproc+0x2c>
 23ff8c2:	4c26      	ldr	r4, [pc, #152]	; (23ff95c <__register_exitproc+0xb8>)
 23ff8c4:	601c      	str	r4, [r3, #0]
 23ff8c6:	4b26      	ldr	r3, [pc, #152]	; (23ff960 <__register_exitproc+0xbc>)
 23ff8c8:	b113      	cbz	r3, 23ff8d0 <__register_exitproc+0x2c>
 23ff8ca:	681b      	ldr	r3, [r3, #0]
 23ff8cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff8d0:	6863      	ldr	r3, [r4, #4]
 23ff8d2:	2b1f      	cmp	r3, #31
 23ff8d4:	dd07      	ble.n	23ff8e6 <__register_exitproc+0x42>
 23ff8d6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8da:	f000 f849 	bl	23ff970 <__retarget_lock_release_recursive>
 23ff8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff8e6:	b35e      	cbz	r6, 23ff940 <__register_exitproc+0x9c>
 23ff8e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff8ec:	b988      	cbnz	r0, 23ff912 <__register_exitproc+0x6e>
 23ff8ee:	4b1d      	ldr	r3, [pc, #116]	; (23ff964 <__register_exitproc+0xc0>)
 23ff8f0:	b923      	cbnz	r3, 23ff8fc <__register_exitproc+0x58>
 23ff8f2:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8f6:	f000 f83a 	bl	23ff96e <__retarget_lock_release>
 23ff8fa:	e7f0      	b.n	23ff8de <__register_exitproc+0x3a>
 23ff8fc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff900:	f7fc ffb2 	bl	23fc868 <malloc>
 23ff904:	2800      	cmp	r0, #0
 23ff906:	d0f4      	beq.n	23ff8f2 <__register_exitproc+0x4e>
 23ff908:	2300      	movs	r3, #0
 23ff90a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff90e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff912:	6863      	ldr	r3, [r4, #4]
 23ff914:	2201      	movs	r2, #1
 23ff916:	2e02      	cmp	r6, #2
 23ff918:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff91c:	fa02 f203 	lsl.w	r2, r2, r3
 23ff920:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff924:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff928:	ea43 0302 	orr.w	r3, r3, r2
 23ff92c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff930:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff934:	bf02      	ittt	eq
 23ff936:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff93a:	4313      	orreq	r3, r2
 23ff93c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff940:	6863      	ldr	r3, [r4, #4]
 23ff942:	f8d8 0000 	ldr.w	r0, [r8]
 23ff946:	1c5a      	adds	r2, r3, #1
 23ff948:	3302      	adds	r3, #2
 23ff94a:	6062      	str	r2, [r4, #4]
 23ff94c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff950:	f000 f80e 	bl	23ff970 <__retarget_lock_release_recursive>
 23ff954:	2000      	movs	r0, #0
 23ff956:	e7c4      	b.n	23ff8e2 <__register_exitproc+0x3e>
 23ff958:	1007afe0 	.word	0x1007afe0
 23ff95c:	1007af54 	.word	0x1007af54
 23ff960:	00000000 	.word	0x00000000
 23ff964:	023fc869 	.word	0x023fc869
 23ff968:	1007ade0 	.word	0x1007ade0

023ff96c <__retarget_lock_acquire_recursive>:
 23ff96c:	4770      	bx	lr

023ff96e <__retarget_lock_release>:
 23ff96e:	4770      	bx	lr

023ff970 <__retarget_lock_release_recursive>:
 23ff970:	4770      	bx	lr
	...

023ff974 <link_const_data_start>:
 23ff974:	00000000 	.word	0x00000000
 23ff978:	34fb0000 	.word	0x34fb0000
 23ff97c:	00805f9b 	.word	0x00805f9b
 23ff980:	10008000 	.word	0x10008000
	...

023ff98c <dynalib_user>:
 23ff98c:	023fbaa9 023fbad1 023fbad5 00000000     ..?...?...?.....
 23ff99c:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff9ac:	6c617574 78756c00 7b203d20 007d6625     tual.lux = {%f}.
 23ff9bc:	65766f6d 746e656d 7b203d20 007d6425     movement = {%d}.

023ff9cc <_ZTVN5spark10LogHandlerE>:
	...
 23ff9dc:	023fbaf1 023fbb19                       ..?...?.

023ff9e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff9ec:	023fbb1d 023fbb51 023fdf71 023fe119     ..?.Q.?.q.?...?.

023ff9fc <_ZTVN5spark12NetworkClassE>:
	...
 23ffa04:	023fc949 023fc953 023fc95d 023fc967     I.?.S.?.].?.g.?.
 23ffa14:	023fc971 023fc97d 023fc989 023fc991     q.?.}.?...?...?.
 23ffa24:	023fc999 023fc9a5 023fc9ad 023fc9b7     ..?...?...?...?.
 23ffa34:	023fc9c1                                ..?.

023ffa38 <_ZTVN5spark9WiFiClassE>:
	...
 23ffa40:	023fcb0b 023fcb01 023fcaf7 023fcaad     ..?...?...?...?.
 23ffa50:	023fcaeb 023fcadf 023fc989 023fc991     ..?...?...?...?.
 23ffa60:	023fcad3 023fcacb 023fcac1 023fcab7     ..?...?...?...?.
 23ffa70:	023fc9c1                                ..?.

023ffa74 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffa7c <_ZTV7TwoWire>:
	...
 23ffa84:	023fcb29 023fcb73 023fcb4b 023fcb2b     ).?.s.?.K.?.+.?.
 23ffa94:	023fcb53 023fcb5b 023fcb63 023fcb6b     S.?.[.?.c.?.k.?.
 23ffaa4:	25006425 25750075 00783430              %d.%u.u%04x.

023ffab0 <_ZTV9USBSerial>:
	...
 23ffab8:	023fcfab 023fd013 023fcfe9 023fe2c5     ..?...?...?...?.
 23ffac8:	023fcfdb 023fcfad 023fcfbd 023fd00d     ..?...?...?...?.
 23ffad8:	023fcfcd 023fcfa5                       ..?...?.

023ffae0 <_ZTV9IPAddress>:
	...
 23ffae8:	023fd0c1 023fd0b1 023fd0b3 252d5925     ..?...?...?.%Y-%
 23ffaf8:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffb08:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffb18:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffb28:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffb38:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffb48:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffb58:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffb68:	6d000a0d 6c006600 6e66006e 63007400     ...m.f.ln.fn.t.c
 23ffb78:	0065646f 61746564 00006c69              ode.detail..

023ffb84 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb8c:	023fd345 023fd36b 023fd329 023fcbeb     E.?.k.?.).?...?.

023ffb9c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffba4:	023fd81d 023fd835 023fdf71 023fe119     ..?.5.?.q.?...?.

023ffbb4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffbbc:	023fd849 023fd85d 023fe151 023fd331     I.?.].?.Q.?.1.?.

023ffbcc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbd4:	023fd343 023fd379 023fded5 023fd333     C.?.y.?...?.3.?.

023ffbe4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbec:	023fd341 023fd387 023fd761 023fd3a9     A.?...?.a.?...?.
 23ffbfc:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffc0c:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffc1c:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffc2c:	20676e69 76726573 73656369 ffff002e     ing services....
 23ffc3c:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ffc4c:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ffc5c:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ffc6c:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ffc7c:	4f4e5f52 4600454e 656c6961 6f742064     R_NONE.Failed to
 23ffc8c:	70706120 20646e65 72656570 6e654320      append peer Cen
 23ffc9c:	6c617274 76656420 2e656369 6e6f4300     tral device..Con
 23ffcac:	7463656e 44006465 6f637369 63656e6e     nected.Disconnec
 23ffcbc:	00646574                                ted.

023ffcc0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffcc8:	023fe357 023fe379 023fe831 023fe387     W.?.y.?.1.?...?.
 23ffcd8:	023fe359                                Y.?.

023ffcdc <_ZTV11USARTSerial>:
	...
 23ffce4:	023fede1 023fee4d 023fee25 023fe2c5     ..?.M.?.%.?...?.
 23ffcf4:	023fedf5 023fee11 023fee03 023fee1f     ..?...?...?...?.
 23ffd04:	023fede3 023fede7                       ..?...?.

023ffd0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffd14:	023fef37 023fef2d 023fef23 023fef19     7.?.-.?.#.?...?.
 23ffd24:	023fef0d 023fef01 023fc989 023fc991     ..?...?...?...?.
 23ffd34:	023feef5 023feeed 023feee3 023feed9     ..?...?...?...?.
 23ffd44:	023fc9c1                                ..?.

023ffd48 <_ZSt7nothrow>:
	...

023ffd49 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd49:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd59:	5f646572 00676174                        red_tag....

023ffd64 <_ZTISt19_Sp_make_shared_tag>:
 23ffd64:	023ffda4 023ffd49                       ..?.I.?.

023ffd6c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd6c:	023ffe04 023ffd78 023ffe28              ..?.x.?.(.?.

023ffd78 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd78:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd88:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd98:	00000045                                E...

023ffd9c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd9c:	00000000 023ffd6c 023ff42d 023ff441     ....l.?.-.?.A.?.
 23ffdac:	023ff5d5 023ff5d5 023ff4ab 023ff3ed     ..?...?...?...?.
 23ffdbc:	023ff493 023ff455 023ff41f              ..?.U.?...?.

023ffdc8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc8:	023ffe04 023ffdd4 023ffd6c              ..?...?.l.?.

023ffdd4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf4:	456f666e 00000000                       nfoE....

023ffdfc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdfc:	00000000 023ffdc8 023ff4d5 023ff4e9     ......?...?...?.
 23ffe0c:	023ff5d5 023ff5d5 023ff4ab 023ff3ed     ..?...?...?...?.
 23ffe1c:	023ff5a9 023ff535 023ff4fd              ..?.5.?...?.

023ffe28 <_ZTISt9type_info>:
 23ffe28:	023ffda4 023ffe30                       ..?.0.?.

023ffe30 <_ZTSSt9type_info>:
 23ffe30:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe40:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe50:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe60:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe70:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe80:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe90:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffea0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeb0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffec0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffed1 <_ctype_>:
 23ffed1:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffee1:	20202020 20202020 20202020 20202020                     
 23ffef1:	10108820 10101010 10101010 10101010      ...............
 23fff01:	04040410 04040404 10040404 10101010     ................
 23fff11:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff21:	01010101 01010101 01010101 10101010     ................
 23fff31:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff41:	02020202 02020202 02020202 10101010     ................
 23fff51:	00000020 00000000 00000000 00000000      ...............
	...

023fffd2 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fbf85 	.word	0x023fbf85
 23fffd8:	023fca99 	.word	0x023fca99
 23fffdc:	023fcb15 	.word	0x023fcb15
 23fffe0:	023fd309 	.word	0x023fd309
 23fffe4:	023fd315 	.word	0x023fd315
 23fffe8:	023fdf61 	.word	0x023fdf61
 23fffec:	023fedd1 	.word	0x023fedd1
 23ffff0:	023feea1 	.word	0x023feea1
 23ffff4:	023fef41 	.word	0x023fef41
