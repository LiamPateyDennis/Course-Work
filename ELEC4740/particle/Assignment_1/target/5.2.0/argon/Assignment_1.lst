
/home/elec4740/Documents/particle/Assignment_1/target/5.2.0/argon/Assignment_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000480c  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b882c  000b882c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000a0  2003e578  000b8850  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001d8  2003e618  2003e618  0001e618  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b88f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b88f4  000b88f4  000188f4  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b88fa  000b88fa  000188fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b891e  000b891e  0001891e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00136a03  00000000  00000000  00018922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001453c  00000000  00000000  0014f325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003228  00000000  00000000  00163861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003839a  00000000  00000000  00166a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00040998  00000000  00000000  0019ee23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001463f1  00000000  00000000  001df7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004034d  00000000  00000000  00325bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000b728  00000000  00000000  00365ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000907c  00000000  00000000  00371624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2iz>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b47c4:	d215      	bcs.n	b47f2 <__aeabi_d2iz+0x36>
   b47c6:	d511      	bpl.n	b47ec <__aeabi_d2iz+0x30>
   b47c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b47cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b47d0:	d912      	bls.n	b47f8 <__aeabi_d2iz+0x3c>
   b47d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b47d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b47da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b47de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b47e2:	fa23 f002 	lsr.w	r0, r3, r2
   b47e6:	bf18      	it	ne
   b47e8:	4240      	negne	r0, r0
   b47ea:	4770      	bx	lr
   b47ec:	f04f 0000 	mov.w	r0, #0
   b47f0:	4770      	bx	lr
   b47f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b47f6:	d105      	bne.n	b4804 <__aeabi_d2iz+0x48>
   b47f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	bf08      	it	eq
   b47fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4802:	4770      	bx	lr
   b4804:	f04f 0000 	mov.w	r0, #0
   b4808:	4770      	bx	lr
   b480a:	bf00      	nop

000b480c <__aeabi_d2f>:
   b480c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4814:	bf24      	itt	cs
   b4816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b481a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b481e:	d90d      	bls.n	b483c <__aeabi_d2f+0x30>
   b4820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b482c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4834:	bf08      	it	eq
   b4836:	f020 0001 	biceq.w	r0, r0, #1
   b483a:	4770      	bx	lr
   b483c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4840:	d121      	bne.n	b4886 <__aeabi_d2f+0x7a>
   b4842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4846:	bfbc      	itt	lt
   b4848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b484c:	4770      	bxlt	lr
   b484e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4852:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4856:	f1c2 0218 	rsb	r2, r2, #24
   b485a:	f1c2 0c20 	rsb	ip, r2, #32
   b485e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4862:	fa20 f002 	lsr.w	r0, r0, r2
   b4866:	bf18      	it	ne
   b4868:	f040 0001 	orrne.w	r0, r0, #1
   b486c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4874:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4878:	ea40 000c 	orr.w	r0, r0, ip
   b487c:	fa23 f302 	lsr.w	r3, r3, r2
   b4880:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4884:	e7cc      	b.n	b4820 <__aeabi_d2f+0x14>
   b4886:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b488a:	d107      	bne.n	b489c <__aeabi_d2f+0x90>
   b488c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4890:	bf1e      	ittt	ne
   b4892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b489a:	4770      	bxne	lr
   b489c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b48a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b48a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b48a8:	4770      	bx	lr
   b48aa:	bf00      	nop

000b48ac <strcmp>:
   b48ac:	f810 2b01 	ldrb.w	r2, [r0], #1
   b48b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   b48b4:	2a01      	cmp	r2, #1
   b48b6:	bf28      	it	cs
   b48b8:	429a      	cmpcs	r2, r3
   b48ba:	d0f7      	beq.n	b48ac <strcmp>
   b48bc:	1ad0      	subs	r0, r2, r3
   b48be:	4770      	bx	lr

000b48c0 <strlen>:
   b48c0:	4603      	mov	r3, r0
   b48c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b48c6:	2a00      	cmp	r2, #0
   b48c8:	d1fb      	bne.n	b48c2 <strlen+0x2>
   b48ca:	1a18      	subs	r0, r3, r0
   b48cc:	3801      	subs	r0, #1
   b48ce:	4770      	bx	lr

000b48d0 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b48d0:	4809      	ldr	r0, [pc, #36]	; (b48f8 <module_user_pre_init+0x28>)
   b48d2:	490a      	ldr	r1, [pc, #40]	; (b48fc <module_user_pre_init+0x2c>)
   b48d4:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b48d6:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b48d8:	d005      	beq.n	b48e6 <module_user_pre_init+0x16>
   b48da:	4a09      	ldr	r2, [pc, #36]	; (b4900 <module_user_pre_init+0x30>)
   b48dc:	4282      	cmp	r2, r0
   b48de:	d002      	beq.n	b48e6 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b48e0:	1a12      	subs	r2, r2, r0
   b48e2:	f003 facf 	bl	b7e84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b48e6:	4807      	ldr	r0, [pc, #28]	; (b4904 <module_user_pre_init+0x34>)
   b48e8:	4a07      	ldr	r2, [pc, #28]	; (b4908 <module_user_pre_init+0x38>)
   b48ea:	2100      	movs	r1, #0
   b48ec:	1a12      	subs	r2, r2, r0
   b48ee:	f003 faf1 	bl	b7ed4 <memset>
    return &link_global_data_start;
}
   b48f2:	4801      	ldr	r0, [pc, #4]	; (b48f8 <module_user_pre_init+0x28>)
   b48f4:	bd08      	pop	{r3, pc}
   b48f6:	bf00      	nop
   b48f8:	2003e578 	.word	0x2003e578
   b48fc:	000b8850 	.word	0x000b8850
   b4900:	2003e618 	.word	0x2003e618
   b4904:	2003e618 	.word	0x2003e618
   b4908:	2003e7f0 	.word	0x2003e7f0

000b490c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b490c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b490e:	4e07      	ldr	r6, [pc, #28]	; (b492c <module_user_init+0x20>)
   b4910:	4c07      	ldr	r4, [pc, #28]	; (b4930 <module_user_init+0x24>)
    module_user_init_hook();
   b4912:	f001 fa41 	bl	b5d98 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4916:	1ba4      	subs	r4, r4, r6
   b4918:	08a4      	lsrs	r4, r4, #2
   b491a:	2500      	movs	r5, #0
   b491c:	42ac      	cmp	r4, r5
   b491e:	d100      	bne.n	b4922 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4920:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4922:	f856 3b04 	ldr.w	r3, [r6], #4
   b4926:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4928:	3501      	adds	r5, #1
   b492a:	e7f7      	b.n	b491c <module_user_init+0x10>
   b492c:	000b8808 	.word	0x000b8808
   b4930:	000b882c 	.word	0x000b882c

000b4934 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4934:	f000 b860 	b.w	b49f8 <setup>

000b4938 <module_user_loop>:
}

void module_user_loop() {
   b4938:	b508      	push	{r3, lr}
    loop();
   b493a:	f000 f891 	bl	b4a60 <loop>
    _post_loop();
}
   b493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4942:	f001 b9e1 	b.w	b5d08 <_post_loop>

000b4946 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4946:	f000 bd25 	b.w	b5394 <malloc>

000b494a <_Znaj>:
   b494a:	f000 bd23 	b.w	b5394 <malloc>

000b494e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b494e:	f000 bd29 	b.w	b53a4 <free>
	...

000b4954 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4954:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4956:	4a03      	ldr	r2, [pc, #12]	; (b4964 <__cxa_pure_virtual+0x10>)
   b4958:	4903      	ldr	r1, [pc, #12]	; (b4968 <__cxa_pure_virtual+0x14>)
   b495a:	200c      	movs	r0, #12
   b495c:	f000 fc5e 	bl	b521c <panic_>
  while (1);
   b4960:	e7fe      	b.n	b4960 <__cxa_pure_virtual+0xc>
   b4962:	bf00      	nop
   b4964:	000b515d 	.word	0x000b515d
   b4968:	000b81c8 	.word	0x000b81c8

000b496c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b496c:	7800      	ldrb	r0, [r0, #0]
   b496e:	fab0 f080 	clz	r0, r0
   b4972:	0940      	lsrs	r0, r0, #5
   b4974:	4770      	bx	lr

000b4976 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4976:	2301      	movs	r3, #1
   b4978:	7003      	strb	r3, [r0, #0]
   b497a:	4770      	bx	lr

000b497c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b497c:	4770      	bx	lr
	...

000b4980 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4980:	4b0a      	ldr	r3, [pc, #40]	; (b49ac <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4982:	b510      	push	{r4, lr}
   b4984:	4604      	mov	r4, r0
   b4986:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4988:	f001 fbce 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b498c:	4621      	mov	r1, r4
   b498e:	f001 fe18 	bl	b65c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4992:	f001 f8ed 	bl	b5b70 <_Z16_fetch_usbserialv>
   b4996:	f001 f8df 	bl	b5b58 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b499a:	4620      	mov	r0, r4
   b499c:	4b04      	ldr	r3, [pc, #16]	; (b49b0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b499e:	f840 3b04 	str.w	r3, [r0], #4
   b49a2:	f001 fca9 	bl	b62f8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b49a6:	4620      	mov	r0, r4
   b49a8:	bd10      	pop	{r4, pc}
   b49aa:	bf00      	nop
   b49ac:	000b8224 	.word	0x000b8224
   b49b0:	000b820c 	.word	0x000b820c

000b49b4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b49b4:	b510      	push	{r4, lr}
   b49b6:	4604      	mov	r4, r0
    }
   b49b8:	f7ff ffe2 	bl	b4980 <_ZN5spark16SerialLogHandlerD1Ev>
   b49bc:	4620      	mov	r0, r4
   b49be:	2124      	movs	r1, #36	; 0x24
   b49c0:	f7ff ffc5 	bl	b494e <_ZdlPvj>
   b49c4:	4620      	mov	r0, r4
   b49c6:	bd10      	pop	{r4, pc}

000b49c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b49c8:	b40e      	push	{r1, r2, r3}
   b49ca:	b500      	push	{lr}
   b49cc:	b08c      	sub	sp, #48	; 0x30
   b49ce:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b49d0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b49d4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b49d8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b49da:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b49de:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b49e0:	6801      	ldr	r1, [r0, #0]
   b49e2:	aa04      	add	r2, sp, #16
   b49e4:	201e      	movs	r0, #30
    attr.flags = 0;
   b49e6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b49ea:	f000 fc27 	bl	b523c <log_message_v>
}
   b49ee:	b00c      	add	sp, #48	; 0x30
   b49f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b49f4:	b003      	add	sp, #12
   b49f6:	4770      	bx	lr

000b49f8 <setup>:
void float2Bytes(float,byte*);
// 	timer.changePeriodFromISR(newPeriod);
// }

void setup()
{
   b49f8:	b508      	push	{r3, lr}
	// In order to set a pin, you must tell Device OS that the pin is
	// an OUTPUT pin. This is often done from setup() since you only need
	// to do it once.
	(void)logHandler; // Does nothing, just to eliminate the unused variable warning

	BLE.on();
   b49fa:	f002 fb37 	bl	b706c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b49fe:	f002 fb51 	bl	b70a4 <_ZNK8particle14BleLocalDevice2onEv>
	// pinMode(MY_LED, OUTPUT);
	pinMode(ledPin1G, OUTPUT_OPEN_DRAIN_PULLUP);
   b4a02:	4b10      	ldr	r3, [pc, #64]	; (b4a44 <setup+0x4c>)
   b4a04:	2108      	movs	r1, #8
   b4a06:	8818      	ldrh	r0, [r3, #0]
   b4a08:	f003 f88a 	bl	b7b20 <pinMode>
	pinMode(ledPin1R, OUTPUT_OPEN_DRAIN_PULLUP);
   b4a0c:	4b0e      	ldr	r3, [pc, #56]	; (b4a48 <setup+0x50>)
   b4a0e:	2108      	movs	r1, #8
   b4a10:	8818      	ldrh	r0, [r3, #0]
   b4a12:	f003 f885 	bl	b7b20 <pinMode>
	pinMode(ledPin2G, OUTPUT_OPEN_DRAIN_PULLUP);
   b4a16:	4b0d      	ldr	r3, [pc, #52]	; (b4a4c <setup+0x54>)
   b4a18:	2108      	movs	r1, #8
   b4a1a:	8818      	ldrh	r0, [r3, #0]
   b4a1c:	f003 f880 	bl	b7b20 <pinMode>
	pinMode(ledPin2R, OUTPUT_OPEN_DRAIN_PULLUP);
   b4a20:	4b0b      	ldr	r3, [pc, #44]	; (b4a50 <setup+0x58>)
   b4a22:	2108      	movs	r1, #8
   b4a24:	8818      	ldrh	r0, [r3, #0]
   b4a26:	f003 f87b 	bl	b7b20 <pinMode>
	// pinMode(ledPin2, OUTPUT);
	pinMode(ledPinW, OUTPUT);
   b4a2a:	4b0a      	ldr	r3, [pc, #40]	; (b4a54 <setup+0x5c>)
   b4a2c:	2101      	movs	r1, #1
   b4a2e:	8818      	ldrh	r0, [r3, #0]
   b4a30:	f003 f876 	bl	b7b20 <pinMode>
	pinMode(buttonPin, INPUT_PULLDOWN);
   b4a34:	4b08      	ldr	r3, [pc, #32]	; (b4a58 <setup+0x60>)
   b4a36:	2103      	movs	r1, #3
   b4a38:	8818      	ldrh	r0, [r3, #0]

	
}
   b4a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pinMode(buttonPin, INPUT_PULLDOWN);
   b4a3e:	f003 b86f 	b.w	b7b20 <pinMode>
   b4a42:	bf00      	nop
   b4a44:	2003e58c 	.word	0x2003e58c
   b4a48:	2003e590 	.word	0x2003e590
   b4a4c:	2003e594 	.word	0x2003e594
   b4a50:	2003e598 	.word	0x2003e598
   b4a54:	2003e59c 	.word	0x2003e59c
   b4a58:	2003e584 	.word	0x2003e584
   b4a5c:	00000000 	.word	0x00000000

000b4a60 <loop>:

// The loop() method is called frequently.
void loop()
{
   b4a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	a = !a;
   b4a64:	4c9a      	ldr	r4, [pc, #616]	; (b4cd0 <loop+0x270>)
   b4a66:	6823      	ldr	r3, [r4, #0]
   b4a68:	fab3 f383 	clz	r3, r3
   b4a6c:	095b      	lsrs	r3, r3, #5
   b4a6e:	6023      	str	r3, [r4, #0]
	// POTENTIOMETER AND WHITE LED
	potentiometer = analogRead(analogPin4);
   b4a70:	4b98      	ldr	r3, [pc, #608]	; (b4cd4 <loop+0x274>)
{
   b4a72:	b08d      	sub	sp, #52	; 0x34
	potentiometer = analogRead(analogPin4);
   b4a74:	8818      	ldrh	r0, [r3, #0]
   b4a76:	f003 f890 	bl	b7b9a <analogRead>
   b4a7a:	4b97      	ldr	r3, [pc, #604]	; (b4cd8 <loop+0x278>)
	if (potentiometer < 200){
   b4a7c:	28c7      	cmp	r0, #199	; 0xc7
	potentiometer = analogRead(analogPin4);
   b4a7e:	6018      	str	r0, [r3, #0]
	if (potentiometer < 200){
   b4a80:	f340 80df 	ble.w	b4c42 <loop+0x1e2>
		duty_cycle = 0;
	} else{
		duty_cycle = (potentiometer-200)/15.278;
   b4a84:	38c8      	subs	r0, #200	; 0xc8
   b4a86:	f7ff fc1d 	bl	b42c4 <__aeabi_i2d>
   b4a8a:	a389      	add	r3, pc, #548	; (adr r3, b4cb0 <loop+0x250>)
   b4a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4a90:	f7ff fdac 	bl	b45ec <__aeabi_ddiv>
   b4a94:	f7ff fe92 	bl	b47bc <__aeabi_d2iz>
   b4a98:	4601      	mov	r1, r0
   b4a9a:	4b90      	ldr	r3, [pc, #576]	; (b4cdc <loop+0x27c>)
	}
	analogWrite(ledPinW,duty_cycle);

	// READING
	movement = analogRead(analogPin);
   b4a9c:	4f90      	ldr	r7, [pc, #576]	; (b4ce0 <loop+0x280>)
   b4a9e:	6019      	str	r1, [r3, #0]
	analogWrite(ledPinW,duty_cycle);
   b4aa0:	4b90      	ldr	r3, [pc, #576]	; (b4ce4 <loop+0x284>)
	lux_array[0] = lux;
	sum = 0;
	for (i=0;i < 5;i++) {
		sum = sum + lux_array[i];
	}
	lux_avg = sum/5;
   b4aa2:	f8df 929c 	ldr.w	r9, [pc, #668]	; b4d40 <loop+0x2e0>
	analogWrite(ledPinW,duty_cycle);
   b4aa6:	8818      	ldrh	r0, [r3, #0]
   b4aa8:	4e8f      	ldr	r6, [pc, #572]	; (b4ce8 <loop+0x288>)
   b4aaa:	f003 f88d 	bl	b7bc8 <_Z11analogWritetm>
	movement = analogRead(analogPin);
   b4aae:	4b8f      	ldr	r3, [pc, #572]	; (b4cec <loop+0x28c>)
   b4ab0:	8818      	ldrh	r0, [r3, #0]
   b4ab2:	f003 f872 	bl	b7b9a <analogRead>
	adc_lux = analogRead(analogPin2);
   b4ab6:	4b8e      	ldr	r3, [pc, #568]	; (b4cf0 <loop+0x290>)
	movement = analogRead(analogPin);
   b4ab8:	8038      	strh	r0, [r7, #0]
	adc_lux = analogRead(analogPin2);
   b4aba:	8818      	ldrh	r0, [r3, #0]
   b4abc:	f003 f86d 	bl	b7b9a <analogRead>
   b4ac0:	4b8c      	ldr	r3, [pc, #560]	; (b4cf4 <loop+0x294>)
   b4ac2:	6018      	str	r0, [r3, #0]
	float lux = -206.2*adc_lux/4096*3.3+473.43;
   b4ac4:	f7ff fbfe 	bl	b42c4 <__aeabi_i2d>
   b4ac8:	a37b      	add	r3, pc, #492	; (adr r3, b4cb8 <loop+0x258>)
   b4aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ace:	f7ff fc63 	bl	b4398 <__aeabi_dmul>
   b4ad2:	4b89      	ldr	r3, [pc, #548]	; (b4cf8 <loop+0x298>)
   b4ad4:	2200      	movs	r2, #0
   b4ad6:	f7ff fc5f 	bl	b4398 <__aeabi_dmul>
   b4ada:	a379      	add	r3, pc, #484	; (adr r3, b4cc0 <loop+0x260>)
   b4adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4ae0:	f7ff fc5a 	bl	b4398 <__aeabi_dmul>
   b4ae4:	a378      	add	r3, pc, #480	; (adr r3, b4cc8 <loop+0x268>)
   b4ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4aea:	f7ff fa9f 	bl	b402c <__adddf3>
   b4aee:	f7ff fe8d 	bl	b480c <__aeabi_d2f>
		lux_array[i+1] = lux_array[i];
   b4af2:	4b82      	ldr	r3, [pc, #520]	; (b4cfc <loop+0x29c>)
		sum = sum + lux_array[i];
   b4af4:	eddf 7a82 	vldr	s15, [pc, #520]	; b4d00 <loop+0x2a0>
		lux_array[i+1] = lux_array[i];
   b4af8:	edd3 6a00 	vldr	s13, [r3]
	lux_array[0] = lux;
   b4afc:	6018      	str	r0, [r3, #0]
	float lux = -206.2*adc_lux/4096*3.3+473.43;
   b4afe:	ee07 0a10 	vmov	s14, r0
		sum = sum + lux_array[i];
   b4b02:	ee77 7a27 	vadd.f32	s15, s14, s15
		lux_array[i+1] = lux_array[i];
   b4b06:	edc3 6a01 	vstr	s13, [r3, #4]
		sum = sum + lux_array[i];
   b4b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
		lux_array[i+1] = lux_array[i];
   b4b0e:	edc3 6a02 	vstr	s13, [r3, #8]
		sum = sum + lux_array[i];
   b4b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
		lux_array[i+1] = lux_array[i];
   b4b16:	edc3 6a03 	vstr	s13, [r3, #12]
		sum = sum + lux_array[i];
   b4b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
		lux_array[i+1] = lux_array[i];
   b4b1e:	edc3 6a04 	vstr	s13, [r3, #16]
		sum = sum + lux_array[i];
   b4b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
	lux_avg = sum/5;
   b4b26:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4b2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   b4b2e:	4b75      	ldr	r3, [pc, #468]	; (b4d04 <loop+0x2a4>)
   b4b30:	2205      	movs	r2, #5
   b4b32:	601a      	str	r2, [r3, #0]
   b4b34:	4b74      	ldr	r3, [pc, #464]	; (b4d08 <loop+0x2a8>)
	// LED 2
	if ((lux_avg > 20)&(movement > 2000)){
   b4b36:	883a      	ldrh	r2, [r7, #0]
   b4b38:	edc3 7a00 	vstr	s15, [r3]
   b4b3c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
   b4b40:	eeb4 7a67 	vcmp.f32	s14, s15
   b4b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4b48:	4b70      	ldr	r3, [pc, #448]	; (b4d0c <loop+0x2ac>)
	lux_avg = sum/5;
   b4b4a:	ed89 7a00 	vstr	s14, [r9]
	if ((lux_avg > 20)&(movement > 2000)){
   b4b4e:	dd7a      	ble.n	b4c46 <loop+0x1e6>
   b4b50:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
   b4b54:	d97c      	bls.n	b4c50 <loop+0x1f0>
			led2 = G2;
   b4b56:	2200      	movs	r2, #0
	//timer 60s
	timer = 5*60; 
	} else if (movement > 2000) {
			led2 = R2;
   b4b58:	7032      	strb	r2, [r6, #0]
	//timer 60s
	timer = 5*60;
   b4b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
   b4b5e:	601a      	str	r2, [r3, #0]
	} else if (timer <=0) {
		led2 = OFF;
	}

	// BUTTON LED OPERATION
	buttonPin = digitalRead(D5);
   b4b60:	2005      	movs	r0, #5
   b4b62:	f003 f807 	bl	b7b74 <digitalRead>
   b4b66:	4b6a      	ldr	r3, [pc, #424]	; (b4d10 <loop+0x2b0>)
	// Log.info("%d", debounce);
	if (debounce <=  0) {
   b4b68:	4a6a      	ldr	r2, [pc, #424]	; (b4d14 <loop+0x2b4>)
	buttonPin = digitalRead(D5);
   b4b6a:	6018      	str	r0, [r3, #0]
	if (debounce <=  0) {
   b4b6c:	6813      	ldr	r3, [r2, #0]
   b4b6e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; b4d44 <loop+0x2e4>
   b4b72:	2b00      	cmp	r3, #0
   b4b74:	dc72      	bgt.n	b4c5c <loop+0x1fc>
		if (buttonPin == 1) {
   b4b76:	2801      	cmp	r0, #1
   b4b78:	d108      	bne.n	b4b8c <loop+0x12c>
			if (led1 == G1) {
   b4b7a:	f898 3000 	ldrb.w	r3, [r8]
   b4b7e:	fab3 f383 	clz	r3, r3
   b4b82:	095b      	lsrs	r3, r3, #5
   b4b84:	f888 3000 	strb.w	r3, [r8]
				led1 = R1;
			} else {
				led1 = G1;
			}
			debounce = 10;
   b4b88:	230a      	movs	r3, #10
		}
	} else {
		debounce--;  
   b4b8a:	6013      	str	r3, [r2, #0]
	// 16-bit: Company ID (0xffff)
	// Byte: Internal packet identifier (0x55)
	// 32-bit: Color code

	// Company ID (0xffff internal use/testing)
	buf[offset++] = 0xab;
   b4b8c:	23ab      	movs	r3, #171	; 0xab
	buf[offset++] = 0xcd;
	// Internal packet type. This is arbitrary, but provides an extra
	// check to make sure the data is my data, since we use the 0xffff company
	// code.
	buf[offset++] = 0x33;
   b4b8e:	4d62      	ldr	r5, [pc, #392]	; (b4d18 <loop+0x2b8>)
	buf[offset++] = 0xab;
   b4b90:	f88d 3010 	strb.w	r3, [sp, #16]
	buf[offset++] = 0xcd;
   b4b94:	23cd      	movs	r3, #205	; 0xcd
   b4b96:	f88d 3011 	strb.w	r3, [sp, #17]
	buf[offset++] = 0x33;
   b4b9a:	2303      	movs	r3, #3
	Log.info("lux = {%f}",lux_avg);
   b4b9c:	f8d9 0000 	ldr.w	r0, [r9]
	buf[offset++] = 0x33;
   b4ba0:	602b      	str	r3, [r5, #0]
   b4ba2:	2333      	movs	r3, #51	; 0x33
   b4ba4:	f88d 3012 	strb.w	r3, [sp, #18]
	Log.info("lux = {%f}",lux_avg);
   b4ba8:	f7ff fb9e 	bl	b42e8 <__aeabi_f2d>
   b4bac:	460b      	mov	r3, r1
   b4bae:	4602      	mov	r2, r0
   b4bb0:	495a      	ldr	r1, [pc, #360]	; (b4d1c <loop+0x2bc>)
   b4bb2:	485b      	ldr	r0, [pc, #364]	; (b4d20 <loop+0x2c0>)
   b4bb4:	f7ff ff08 	bl	b49c8 <_ZNK5spark6Logger4infoEPKcz>
	Log.info("movement = {%d}",movement);
   b4bb8:	883a      	ldrh	r2, [r7, #0]
   b4bba:	495a      	ldr	r1, [pc, #360]	; (b4d24 <loop+0x2c4>)
   b4bbc:	4858      	ldr	r0, [pc, #352]	; (b4d20 <loop+0x2c0>)
   b4bbe:	f7ff ff03 	bl	b49c8 <_ZNK5spark6Logger4infoEPKcz>
	// Our specific data, color code
	// float* pf = &lux_avg;
	memcpy(&buf[offset], &lux_avg, 4);
   b4bc2:	682b      	ldr	r3, [r5, #0]
   b4bc4:	f8d9 1000 	ldr.w	r1, [r9]
	// Log.info("pf = {%f}",pf);
	offset += 4;
	memcpy(&buf[offset], &movement, 2); 
	offset += 2;
	memcpy(&buf[offset], &check, 1); 
	Log.info("check = %x",check);
   b4bc8:	4855      	ldr	r0, [pc, #340]	; (b4d20 <loop+0x2c0>)
	memcpy(&buf[offset], &lux_avg, 4);
   b4bca:	aa0c      	add	r2, sp, #48	; 0x30
   b4bcc:	441a      	add	r2, r3
	offset += 2;
   b4bce:	3306      	adds	r3, #6
	memcpy(&buf[offset], &lux_avg, 4);
   b4bd0:	f842 1c20 	str.w	r1, [r2, #-32]
	memcpy(&buf[offset], &movement, 2); 
   b4bd4:	8839      	ldrh	r1, [r7, #0]
   b4bd6:	f822 1c1c 	strh.w	r1, [r2, #-28]
	memcpy(&buf[offset], &check, 1); 
   b4bda:	a90c      	add	r1, sp, #48	; 0x30
   b4bdc:	4a52      	ldr	r2, [pc, #328]	; (b4d28 <loop+0x2c8>)
	offset += 2;
   b4bde:	602b      	str	r3, [r5, #0]
	memcpy(&buf[offset], &check, 1); 
   b4be0:	440b      	add	r3, r1
   b4be2:	7812      	ldrb	r2, [r2, #0]
   b4be4:	f803 2c20 	strb.w	r2, [r3, #-32]
	Log.info("check = %x",check);
   b4be8:	4950      	ldr	r1, [pc, #320]	; (b4d2c <loop+0x2cc>)
   b4bea:	f7ff feed 	bl	b49c8 <_ZNK5spark6Logger4infoEPKcz>
	offset += 1;
   b4bee:	682b      	ldr	r3, [r5, #0]

	// timer.start();
	BleAdvertisingData advData;
   b4bf0:	a801      	add	r0, sp, #4
	offset += 1;
   b4bf2:	3301      	adds	r3, #1
   b4bf4:	602b      	str	r3, [r5, #0]
	BleAdvertisingData advData;
   b4bf6:	f002 fbeb 	bl	b73d0 <_ZN8particle18BleAdvertisingDataC1Ev>
	advData.appendCustomData(buf, offset);
   b4bfa:	682a      	ldr	r2, [r5, #0]
   b4bfc:	2300      	movs	r3, #0
   b4bfe:	a904      	add	r1, sp, #16
   b4c00:	a801      	add	r0, sp, #4
   b4c02:	f002 fbf8 	bl	b73f6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>

	// Advertise every 100 milliseconds. Unit is 0.625 millisecond intervals.
	BLE.setAdvertisingInterval(250);
   b4c06:	f002 fa31 	bl	b706c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c0a:	21fa      	movs	r1, #250	; 0xfa
   b4c0c:	f002 fa51 	bl	b70b2 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>

	// Continuously advertise
	BLE.advertise(&advData);
   b4c10:	f002 fa2c 	bl	b706c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c14:	a901      	add	r1, sp, #4
   b4c16:	2200      	movs	r2, #0
   b4c18:	f002 faa8 	bl	b716c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

	
	
	switch(led1){
   b4c1c:	f898 1000 	ldrb.w	r1, [r8]
   b4c20:	b1f1      	cbz	r1, b4c60 <loop+0x200>
   b4c22:	2901      	cmp	r1, #1
   b4c24:	d027      	beq.n	b4c76 <loop+0x216>
		// flashing red
		digitalWrite(ledPin1G,1);
		digitalWrite(ledPin1R,a);
		break;
	};
	switch(led2){
   b4c26:	7831      	ldrb	r1, [r6, #0]
   b4c28:	2901      	cmp	r1, #1
   b4c2a:	d02a      	beq.n	b4c82 <loop+0x222>
   b4c2c:	2902      	cmp	r1, #2
   b4c2e:	d03a      	beq.n	b4ca6 <loop+0x246>
   b4c30:	2900      	cmp	r1, #0
   b4c32:	d12f      	bne.n	b4c94 <loop+0x234>
	case G2:
		// flashing green
		digitalWrite(ledPin2G,a);
   b4c34:	7821      	ldrb	r1, [r4, #0]
		// flashing red
		digitalWrite(ledPin2G,1);
		digitalWrite(ledPin2R,a);
		break;
	case OFF:
		digitalWrite(ledPin2G,1);
   b4c36:	4b3e      	ldr	r3, [pc, #248]	; (b4d30 <loop+0x2d0>)
   b4c38:	8818      	ldrh	r0, [r3, #0]
   b4c3a:	f002 ff82 	bl	b7b42 <digitalWrite>
		digitalWrite(ledPin2R,1);
   b4c3e:	2101      	movs	r1, #1
   b4c40:	e024      	b.n	b4c8c <loop+0x22c>
		duty_cycle = 0;
   b4c42:	2100      	movs	r1, #0
   b4c44:	e729      	b.n	b4a9a <loop+0x3a>
	} else if (movement > 2000) {
   b4c46:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
   b4c4a:	d901      	bls.n	b4c50 <loop+0x1f0>
			led2 = R2;
   b4c4c:	2201      	movs	r2, #1
   b4c4e:	e783      	b.n	b4b58 <loop+0xf8>
	} else if (timer <=0) {
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	2b00      	cmp	r3, #0
		led2 = OFF;
   b4c54:	bfdc      	itt	le
   b4c56:	2302      	movle	r3, #2
   b4c58:	7033      	strble	r3, [r6, #0]
   b4c5a:	e781      	b.n	b4b60 <loop+0x100>
		debounce--;  
   b4c5c:	3b01      	subs	r3, #1
   b4c5e:	e794      	b.n	b4b8a <loop+0x12a>
		digitalWrite(ledPin1G,a);
   b4c60:	4b34      	ldr	r3, [pc, #208]	; (b4d34 <loop+0x2d4>)
   b4c62:	7821      	ldrb	r1, [r4, #0]
   b4c64:	8818      	ldrh	r0, [r3, #0]
   b4c66:	f002 ff6c 	bl	b7b42 <digitalWrite>
		digitalWrite(ledPin1R,1);
   b4c6a:	2101      	movs	r1, #1
		digitalWrite(ledPin1R,a);
   b4c6c:	4b32      	ldr	r3, [pc, #200]	; (b4d38 <loop+0x2d8>)
   b4c6e:	8818      	ldrh	r0, [r3, #0]
   b4c70:	f002 ff67 	bl	b7b42 <digitalWrite>
		break;
   b4c74:	e7d7      	b.n	b4c26 <loop+0x1c6>
		digitalWrite(ledPin1G,1);
   b4c76:	4b2f      	ldr	r3, [pc, #188]	; (b4d34 <loop+0x2d4>)
   b4c78:	8818      	ldrh	r0, [r3, #0]
   b4c7a:	f002 ff62 	bl	b7b42 <digitalWrite>
		digitalWrite(ledPin1R,a);
   b4c7e:	7821      	ldrb	r1, [r4, #0]
   b4c80:	e7f4      	b.n	b4c6c <loop+0x20c>
		digitalWrite(ledPin2G,1);
   b4c82:	4b2b      	ldr	r3, [pc, #172]	; (b4d30 <loop+0x2d0>)
   b4c84:	8818      	ldrh	r0, [r3, #0]
   b4c86:	f002 ff5c 	bl	b7b42 <digitalWrite>
		digitalWrite(ledPin2R,a);
   b4c8a:	7821      	ldrb	r1, [r4, #0]
		digitalWrite(ledPin2R,1);
   b4c8c:	4b2b      	ldr	r3, [pc, #172]	; (b4d3c <loop+0x2dc>)
   b4c8e:	8818      	ldrh	r0, [r3, #0]
   b4c90:	f002 ff57 	bl	b7b42 <digitalWrite>
	// 	digitalWrite(ledPin1G,1);
	// } else{
	// 	digitalWrite(ledPin1G,0);
	// }
	// Log.info("Green = %d, Red = %d",digitalRead(ledPin2G), digitalRead(ledPin2R));
	delay(200);
   b4c94:	20c8      	movs	r0, #200	; 0xc8
   b4c96:	f001 f812 	bl	b5cbe <delay>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4c9a:	9801      	ldr	r0, [sp, #4]
   b4c9c:	f000 fb82 	bl	b53a4 <free>
	// And repeat! 
}
   b4ca0:	b00d      	add	sp, #52	; 0x34
   b4ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		digitalWrite(ledPin2G,1);
   b4ca6:	2101      	movs	r1, #1
   b4ca8:	e7c5      	b.n	b4c36 <loop+0x1d6>
   b4caa:	bf00      	nop
   b4cac:	f3af 8000 	nop.w
   b4cb0:	04189375 	.word	0x04189375
   b4cb4:	402e8e56 	.word	0x402e8e56
   b4cb8:	66666666 	.word	0x66666666
   b4cbc:	c069c666 	.word	0xc069c666
   b4cc0:	66666666 	.word	0x66666666
   b4cc4:	400a6666 	.word	0x400a6666
   b4cc8:	47ae147b 	.word	0x47ae147b
   b4ccc:	407d96e1 	.word	0x407d96e1
   b4cd0:	2003e618 	.word	0x2003e618
   b4cd4:	2003e580 	.word	0x2003e580
   b4cd8:	2003e674 	.word	0x2003e674
   b4cdc:	2003e624 	.word	0x2003e624
   b4ce0:	2003e66c 	.word	0x2003e66c
   b4ce4:	2003e59c 	.word	0x2003e59c
   b4ce8:	2003e589 	.word	0x2003e589
   b4cec:	2003e578 	.word	0x2003e578
   b4cf0:	2003e57c 	.word	0x2003e57c
   b4cf4:	2003e61c 	.word	0x2003e61c
   b4cf8:	3f300000 	.word	0x3f300000
   b4cfc:	2003e654 	.word	0x2003e654
   b4d00:	00000000 	.word	0x00000000
   b4d04:	2003e628 	.word	0x2003e628
   b4d08:	2003e678 	.word	0x2003e678
   b4d0c:	2003e5a0 	.word	0x2003e5a0
   b4d10:	2003e584 	.word	0x2003e584
   b4d14:	2003e620 	.word	0x2003e620
   b4d18:	2003e670 	.word	0x2003e670
   b4d1c:	000b81dd 	.word	0x000b81dd
   b4d20:	2003e6cc 	.word	0x2003e6cc
   b4d24:	000b81e8 	.word	0x000b81e8
   b4d28:	2003e588 	.word	0x2003e588
   b4d2c:	000b81f8 	.word	0x000b81f8
   b4d30:	2003e594 	.word	0x2003e594
   b4d34:	2003e58c 	.word	0x2003e58c
   b4d38:	2003e590 	.word	0x2003e590
   b4d3c:	2003e598 	.word	0x2003e598
   b4d40:	2003e668 	.word	0x2003e668
   b4d44:	2003e62c 	.word	0x2003e62c

000b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4d4a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4d4e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4d50:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4d52:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4d56:	42ae      	cmp	r6, r5
   b4d58:	d004      	beq.n	b4d64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4d5a:	4628      	mov	r0, r5
   b4d5c:	f002 fd96 	bl	b788c <_ZN6StringD1Ev>
   b4d60:	3514      	adds	r5, #20
   b4d62:	e7f8      	b.n	b4d56 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4d64:	6820      	ldr	r0, [r4, #0]
   b4d66:	f000 fb1d 	bl	b53a4 <free>
    AllocatorT::free(data_);
}
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	bd70      	pop	{r4, r5, r6, pc}

000b4d6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4d6e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d72:	4604      	mov	r4, r0
   b4d74:	460d      	mov	r5, r1
   b4d76:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4d78:	d916      	bls.n	b4da8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4d7a:	4290      	cmp	r0, r2
   b4d7c:	d215      	bcs.n	b4daa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4d7e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4d82:	1a75      	subs	r5, r6, r1
   b4d84:	f1a1 0714 	sub.w	r7, r1, #20
   b4d88:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4d8a:	42b7      	cmp	r7, r6
   b4d8c:	d01c      	beq.n	b4dc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4d8e:	b12c      	cbz	r4, b4d9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4d90:	4631      	mov	r1, r6
   b4d92:	4620      	mov	r0, r4
   b4d94:	f002 fde2 	bl	b795c <_ZN6StringC1EOS_>
   b4d98:	7c33      	ldrb	r3, [r6, #16]
   b4d9a:	7423      	strb	r3, [r4, #16]
   b4d9c:	4630      	mov	r0, r6
   b4d9e:	f002 fd75 	bl	b788c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4da2:	3e14      	subs	r6, #20
   b4da4:	3c14      	subs	r4, #20
   b4da6:	e7f0      	b.n	b4d8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4da8:	d00e      	beq.n	b4dc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4daa:	42b5      	cmp	r5, r6
   b4dac:	d00c      	beq.n	b4dc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4dae:	b12c      	cbz	r4, b4dbc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4db0:	4629      	mov	r1, r5
   b4db2:	4620      	mov	r0, r4
   b4db4:	f002 fdd2 	bl	b795c <_ZN6StringC1EOS_>
   b4db8:	7c2b      	ldrb	r3, [r5, #16]
   b4dba:	7423      	strb	r3, [r4, #16]
   b4dbc:	4628      	mov	r0, r5
   b4dbe:	f002 fd65 	bl	b788c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4dc2:	3514      	adds	r5, #20
   b4dc4:	3414      	adds	r4, #20
   b4dc6:	e7f0      	b.n	b4daa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4dce:	2300      	movs	r3, #0
   b4dd0:	e9c0 3300 	strd	r3, r3, [r0]
   b4dd4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4dd6:	684f      	ldr	r7, [r1, #4]
   b4dd8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4dda:	4604      	mov	r4, r0
   b4ddc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4dde:	dd23      	ble.n	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4de0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4de4:	fb08 f007 	mul.w	r0, r8, r7
   b4de8:	f000 fad4 	bl	b5394 <malloc>
            if (!d) {
   b4dec:	4605      	mov	r5, r0
   b4dee:	b1d8      	cbz	r0, b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4df0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4df4:	fb08 1202 	mla	r2, r8, r2, r1
   b4df8:	f7ff ffb9 	bl	b4d6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4dfc:	6820      	ldr	r0, [r4, #0]
   b4dfe:	f000 fad1 	bl	b53a4 <free>
        data_ = d;
   b4e02:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e04:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e06:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e0a:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e0e:	45b8      	cmp	r8, r7
   b4e10:	d008      	beq.n	b4e24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e12:	4639      	mov	r1, r7
   b4e14:	4628      	mov	r0, r5
   b4e16:	f002 fdbb 	bl	b7990 <_ZN6StringC1ERKS_>
   b4e1a:	7c3b      	ldrb	r3, [r7, #16]
   b4e1c:	742b      	strb	r3, [r5, #16]
   b4e1e:	3714      	adds	r7, #20
   b4e20:	3514      	adds	r5, #20
   b4e22:	e7f4      	b.n	b4e0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e24:	6873      	ldr	r3, [r6, #4]
   b4e26:	6063      	str	r3, [r4, #4]
}
   b4e28:	4620      	mov	r0, r4
   b4e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4e30 <_GLOBAL__sub_I_ledPin1G>:
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
   b4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4e32:	b08d      	sub	sp, #52	; 0x34
        capacity_(0) {
   b4e34:	2500      	movs	r5, #0
   b4e36:	e9cd 5500 	strd	r5, r5, [sp]
   b4e3a:	9502      	str	r5, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4e3c:	f000 fe98 	bl	b5b70 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4e40:	4c1c      	ldr	r4, [pc, #112]	; (b4eb4 <_GLOBAL__sub_I_ledPin1G+0x84>)
   b4e42:	4606      	mov	r6, r0
   b4e44:	4669      	mov	r1, sp
   b4e46:	a803      	add	r0, sp, #12
   b4e48:	f7ff ffbf 	bl	b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e4c:	4627      	mov	r7, r4
        stream_(&stream) {
   b4e4e:	a903      	add	r1, sp, #12
   b4e50:	a806      	add	r0, sp, #24
   b4e52:	f7ff ffba 	bl	b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4e56:	4b18      	ldr	r3, [pc, #96]	; (b4eb8 <_GLOBAL__sub_I_ledPin1G+0x88>)
   b4e58:	f847 3b04 	str.w	r3, [r7], #4
   b4e5c:	a906      	add	r1, sp, #24
   b4e5e:	a809      	add	r0, sp, #36	; 0x24
   b4e60:	f7ff ffb3 	bl	b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4e64:	aa09      	add	r2, sp, #36	; 0x24
   b4e66:	211e      	movs	r1, #30
   b4e68:	4638      	mov	r0, r7
   b4e6a:	f001 fc8d 	bl	b6788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4e6e:	a809      	add	r0, sp, #36	; 0x24
   b4e70:	f7ff ff6a 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4e74:	a806      	add	r0, sp, #24
   b4e76:	f7ff ff67 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e7a:	4b10      	ldr	r3, [pc, #64]	; (b4ebc <_GLOBAL__sub_I_ledPin1G+0x8c>)
   b4e7c:	6023      	str	r3, [r4, #0]
   b4e7e:	a803      	add	r0, sp, #12
   b4e80:	6226      	str	r6, [r4, #32]
   b4e82:	f7ff ff61 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4e86:	4b0e      	ldr	r3, [pc, #56]	; (b4ec0 <_GLOBAL__sub_I_ledPin1G+0x90>)
   b4e88:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4e8a:	f000 fe71 	bl	b5b70 <_Z16_fetch_usbserialv>
   b4e8e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4e92:	f000 fe5d 	bl	b5b50 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4e96:	f001 f947 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b4e9a:	4621      	mov	r1, r4
   b4e9c:	f001 fb4a 	bl	b6534 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4ea0:	4668      	mov	r0, sp
   b4ea2:	f7ff ff51 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
SYSTEM_THREAD(ENABLED);
   b4ea6:	4629      	mov	r1, r5
   b4ea8:	2001      	movs	r0, #1
   b4eaa:	b00d      	add	sp, #52	; 0x34
   b4eac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
SYSTEM_THREAD(ENABLED);
   b4eb0:	f000 ba54 	b.w	b535c <system_thread_set_state>
   b4eb4:	2003e630 	.word	0x2003e630
   b4eb8:	000b820c 	.word	0x000b820c
   b4ebc:	000b83dc 	.word	0x000b83dc
   b4ec0:	000b8224 	.word	0x000b8224

000b4ec4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <HAL_USB_USART_Init+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	681b      	ldr	r3, [r3, #0]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003024c 	.word	0x0003024c

000b4ed4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <HAL_USB_USART_Begin+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	685b      	ldr	r3, [r3, #4]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003024c 	.word	0x0003024c

000b4ee4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <HAL_USB_USART_End+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	689b      	ldr	r3, [r3, #8]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003024c 	.word	0x0003024c

000b4ef4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <HAL_USB_USART_Available_Data+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	691b      	ldr	r3, [r3, #16]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	0003024c 	.word	0x0003024c

000b4f04 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	695b      	ldr	r3, [r3, #20]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003024c 	.word	0x0003024c

000b4f14 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <HAL_USB_USART_Receive_Data+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	699b      	ldr	r3, [r3, #24]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003024c 	.word	0x0003024c

000b4f24 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <HAL_USB_USART_Send_Data+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	69db      	ldr	r3, [r3, #28]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	0003024c 	.word	0x0003024c

000b4f34 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <HAL_USB_USART_Flush_Data+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6a1b      	ldr	r3, [r3, #32]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003024c 	.word	0x0003024c

000b4f44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_spi_init+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	69db      	ldr	r3, [r3, #28]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030230 	.word	0x00030230

000b4f54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_spi_is_enabled+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	6a1b      	ldr	r3, [r3, #32]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030230 	.word	0x00030230

000b4f64 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_i2c_write+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	6a1b      	ldr	r3, [r3, #32]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030228 	.word	0x00030228

000b4f74 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_i2c_available+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030228 	.word	0x00030228

000b4f84 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_i2c_read+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030228 	.word	0x00030228

000b4f94 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_i2c_peek+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030228 	.word	0x00030228

000b4fa4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_i2c_flush+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030228 	.word	0x00030228

000b4fb4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_i2c_is_enabled+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030228 	.word	0x00030228

000b4fc4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_i2c_init+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030228 	.word	0x00030228

000b4fd4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_usart_end+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	689b      	ldr	r3, [r3, #8]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	0003023c 	.word	0x0003023c

000b4fe4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_usart_write+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	68db      	ldr	r3, [r3, #12]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	0003023c 	.word	0x0003023c

000b4ff4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_usart_available+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	691b      	ldr	r3, [r3, #16]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	0003023c 	.word	0x0003023c

000b5004 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_usart_read+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	695b      	ldr	r3, [r3, #20]
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	0003023c 	.word	0x0003023c

000b5014 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_usart_peek+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	699b      	ldr	r3, [r3, #24]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003023c 	.word	0x0003023c

000b5024 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_usart_flush+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	69db      	ldr	r3, [r3, #28]
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003023c 	.word	0x0003023c

000b5034 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <hal_usart_is_enabled+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6a1b      	ldr	r3, [r3, #32]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	0003023c 	.word	0x0003023c

000b5044 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_usart_available_data_for_write+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	0003023c 	.word	0x0003023c

000b5054 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <hal_usart_begin_config+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	0003023c 	.word	0x0003023c

000b5064 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_usart_init_ex+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	0003023c 	.word	0x0003023c

000b5074 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <inet_inet_ntop+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	695b      	ldr	r3, [r3, #20]
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030264 	.word	0x00030264

000b5084 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <os_mutex_recursive_create+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030248 	.word	0x00030248

000b5094 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <os_mutex_recursive_destroy+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030248 	.word	0x00030248

000b50a4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <os_mutex_recursive_lock+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030248 	.word	0x00030248

000b50b4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <os_mutex_recursive_unlock+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030248 	.word	0x00030248

000b50c4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <hal_ble_stack_init+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	689b      	ldr	r3, [r3, #8]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	00030278 	.word	0x00030278

000b50d4 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <hal_ble_gap_set_advertising_parameters+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	00030278 	.word	0x00030278

000b50e4 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <hal_ble_gap_get_advertising_parameters+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	00030278 	.word	0x00030278

000b50f4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <hal_ble_gap_set_advertising_data+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	00030278 	.word	0x00030278

000b5104 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <hal_ble_gap_set_scan_response_data+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	00030278 	.word	0x00030278

000b5114 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <hal_ble_gap_start_advertising+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	00030278 	.word	0x00030278

000b5124 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b03      	ldr	r3, [pc, #12]	; (b5134 <hal_ble_gap_disconnect+0x10>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b512e:	9301      	str	r3, [sp, #4]
   b5130:	bd08      	pop	{r3, pc}
   b5132:	0000      	.short	0x0000
   b5134:	00030278 	.word	0x00030278

000b5138 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b03      	ldr	r3, [pc, #12]	; (b5148 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5142:	9301      	str	r3, [sp, #4]
   b5144:	bd08      	pop	{r3, pc}
   b5146:	0000      	.short	0x0000
   b5148:	00030278 	.word	0x00030278

000b514c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b514c:	b508      	push	{r3, lr}
   b514e:	4b02      	ldr	r3, [pc, #8]	; (b5158 <HAL_RNG_GetRandomNumber+0xc>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	685b      	ldr	r3, [r3, #4]
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	bd08      	pop	{r3, pc}
   b5158:	00030218 	.word	0x00030218

000b515c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b515c:	b508      	push	{r3, lr}
   b515e:	4b02      	ldr	r3, [pc, #8]	; (b5168 <HAL_Delay_Microseconds+0xc>)
   b5160:	681b      	ldr	r3, [r3, #0]
   b5162:	68db      	ldr	r3, [r3, #12]
   b5164:	9301      	str	r3, [sp, #4]
   b5166:	bd08      	pop	{r3, pc}
   b5168:	00030218 	.word	0x00030218

000b516c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b516c:	b508      	push	{r3, lr}
   b516e:	4b02      	ldr	r3, [pc, #8]	; (b5178 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5170:	681b      	ldr	r3, [r3, #0]
   b5172:	695b      	ldr	r3, [r3, #20]
   b5174:	9301      	str	r3, [sp, #4]
   b5176:	bd08      	pop	{r3, pc}
   b5178:	00030218 	.word	0x00030218

000b517c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b517c:	b508      	push	{r3, lr}
   b517e:	4b02      	ldr	r3, [pc, #8]	; (b5188 <hal_pin_validate_function+0xc>)
   b5180:	681b      	ldr	r3, [r3, #0]
   b5182:	685b      	ldr	r3, [r3, #4]
   b5184:	9301      	str	r3, [sp, #4]
   b5186:	bd08      	pop	{r3, pc}
   b5188:	0003022c 	.word	0x0003022c

000b518c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b518c:	b508      	push	{r3, lr}
   b518e:	4b02      	ldr	r3, [pc, #8]	; (b5198 <hal_gpio_mode+0xc>)
   b5190:	681b      	ldr	r3, [r3, #0]
   b5192:	689b      	ldr	r3, [r3, #8]
   b5194:	9301      	str	r3, [sp, #4]
   b5196:	bd08      	pop	{r3, pc}
   b5198:	0003022c 	.word	0x0003022c

000b519c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <hal_gpio_get_mode+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	68db      	ldr	r3, [r3, #12]
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	0003022c 	.word	0x0003022c

000b51ac <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <hal_gpio_write+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	691b      	ldr	r3, [r3, #16]
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	0003022c 	.word	0x0003022c

000b51bc <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <hal_gpio_read+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	695b      	ldr	r3, [r3, #20]
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	0003022c 	.word	0x0003022c

000b51cc <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <HAL_DAC_Write+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	0003022c 	.word	0x0003022c

000b51dc <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <hal_adc_read+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	0003022c 	.word	0x0003022c

000b51ec <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <hal_pwm_write_ext+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	0003022c 	.word	0x0003022c

000b51fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <netdb_freeaddrinfo+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	689b      	ldr	r3, [r3, #8]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030268 	.word	0x00030268

000b520c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <netdb_getaddrinfo+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	68db      	ldr	r3, [r3, #12]
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030268 	.word	0x00030268

000b521c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <panic_+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	00030260 	.word	0x00030260

000b522c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <log_message+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	00030260 	.word	0x00030260

000b523c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <log_message_v+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030260 	.word	0x00030260

000b524c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <log_level_name+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030260 	.word	0x00030260

000b525c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <log_set_callbacks+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030260 	.word	0x00030260

000b526c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030244 	.word	0x00030244

000b527c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <network_connect+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	685b      	ldr	r3, [r3, #4]
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	00030240 	.word	0x00030240

000b528c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <network_connecting+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030240 	.word	0x00030240

000b529c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <network_disconnect+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	68db      	ldr	r3, [r3, #12]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030240 	.word	0x00030240

000b52ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <network_ready+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	691b      	ldr	r3, [r3, #16]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030240 	.word	0x00030240

000b52bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <network_on+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	695b      	ldr	r3, [r3, #20]
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030240 	.word	0x00030240

000b52cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <network_off+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	699b      	ldr	r3, [r3, #24]
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	00030240 	.word	0x00030240

000b52dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <network_listen+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	69db      	ldr	r3, [r3, #28]
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	00030240 	.word	0x00030240

000b52ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b52ec:	b508      	push	{r3, lr}
   b52ee:	4b02      	ldr	r3, [pc, #8]	; (b52f8 <network_listening+0xc>)
   b52f0:	681b      	ldr	r3, [r3, #0]
   b52f2:	6a1b      	ldr	r3, [r3, #32]
   b52f4:	9301      	str	r3, [sp, #4]
   b52f6:	bd08      	pop	{r3, pc}
   b52f8:	00030240 	.word	0x00030240

000b52fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b52fc:	b508      	push	{r3, lr}
   b52fe:	4b02      	ldr	r3, [pc, #8]	; (b5308 <network_set_listen_timeout+0xc>)
   b5300:	681b      	ldr	r3, [r3, #0]
   b5302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5304:	9301      	str	r3, [sp, #4]
   b5306:	bd08      	pop	{r3, pc}
   b5308:	00030240 	.word	0x00030240

000b530c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b530c:	b508      	push	{r3, lr}
   b530e:	4b02      	ldr	r3, [pc, #8]	; (b5318 <network_get_listen_timeout+0xc>)
   b5310:	681b      	ldr	r3, [r3, #0]
   b5312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5314:	9301      	str	r3, [sp, #4]
   b5316:	bd08      	pop	{r3, pc}
   b5318:	00030240 	.word	0x00030240

000b531c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b02      	ldr	r3, [pc, #8]	; (b5328 <network_is_on+0xc>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5324:	9301      	str	r3, [sp, #4]
   b5326:	bd08      	pop	{r3, pc}
   b5328:	00030240 	.word	0x00030240

000b532c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b532c:	b508      	push	{r3, lr}
   b532e:	4b02      	ldr	r3, [pc, #8]	; (b5338 <network_is_off+0xc>)
   b5330:	681b      	ldr	r3, [r3, #0]
   b5332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5334:	9301      	str	r3, [sp, #4]
   b5336:	bd08      	pop	{r3, pc}
   b5338:	00030240 	.word	0x00030240

000b533c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b533c:	b508      	push	{r3, lr}
   b533e:	4b02      	ldr	r3, [pc, #8]	; (b5348 <set_system_mode+0xc>)
   b5340:	681b      	ldr	r3, [r3, #0]
   b5342:	685b      	ldr	r3, [r3, #4]
   b5344:	9301      	str	r3, [sp, #4]
   b5346:	bd08      	pop	{r3, pc}
   b5348:	00030220 	.word	0x00030220

000b534c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b534c:	b508      	push	{r3, lr}
   b534e:	4b02      	ldr	r3, [pc, #8]	; (b5358 <system_delay_ms+0xc>)
   b5350:	681b      	ldr	r3, [r3, #0]
   b5352:	695b      	ldr	r3, [r3, #20]
   b5354:	9301      	str	r3, [sp, #4]
   b5356:	bd08      	pop	{r3, pc}
   b5358:	00030220 	.word	0x00030220

000b535c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b535c:	b508      	push	{r3, lr}
   b535e:	4b02      	ldr	r3, [pc, #8]	; (b5368 <system_thread_set_state+0xc>)
   b5360:	681b      	ldr	r3, [r3, #0]
   b5362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5364:	9301      	str	r3, [sp, #4]
   b5366:	bd08      	pop	{r3, pc}
   b5368:	00030220 	.word	0x00030220

000b536c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b03      	ldr	r3, [pc, #12]	; (b537c <system_ctrl_set_app_request_handler+0x10>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5376:	9301      	str	r3, [sp, #4]
   b5378:	bd08      	pop	{r3, pc}
   b537a:	0000      	.short	0x0000
   b537c:	00030220 	.word	0x00030220

000b5380 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b03      	ldr	r3, [pc, #12]	; (b5390 <system_ctrl_set_result+0x10>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b538a:	9301      	str	r3, [sp, #4]
   b538c:	bd08      	pop	{r3, pc}
   b538e:	0000      	.short	0x0000
   b5390:	00030220 	.word	0x00030220

000b5394 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5394:	b508      	push	{r3, lr}
   b5396:	4b02      	ldr	r3, [pc, #8]	; (b53a0 <malloc+0xc>)
   b5398:	681b      	ldr	r3, [r3, #0]
   b539a:	681b      	ldr	r3, [r3, #0]
   b539c:	9301      	str	r3, [sp, #4]
   b539e:	bd08      	pop	{r3, pc}
   b53a0:	0003021c 	.word	0x0003021c

000b53a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b53a4:	b508      	push	{r3, lr}
   b53a6:	4b02      	ldr	r3, [pc, #8]	; (b53b0 <free+0xc>)
   b53a8:	681b      	ldr	r3, [r3, #0]
   b53aa:	685b      	ldr	r3, [r3, #4]
   b53ac:	9301      	str	r3, [sp, #4]
   b53ae:	bd08      	pop	{r3, pc}
   b53b0:	0003021c 	.word	0x0003021c

000b53b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b53b4:	b508      	push	{r3, lr}
   b53b6:	4b02      	ldr	r3, [pc, #8]	; (b53c0 <realloc+0xc>)
   b53b8:	681b      	ldr	r3, [r3, #0]
   b53ba:	689b      	ldr	r3, [r3, #8]
   b53bc:	9301      	str	r3, [sp, #4]
   b53be:	bd08      	pop	{r3, pc}
   b53c0:	0003021c 	.word	0x0003021c

000b53c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b53c4:	b508      	push	{r3, lr}
   b53c6:	4b02      	ldr	r3, [pc, #8]	; (b53d0 <vsnprintf+0xc>)
   b53c8:	681b      	ldr	r3, [r3, #0]
   b53ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b53cc:	9301      	str	r3, [sp, #4]
   b53ce:	bd08      	pop	{r3, pc}
   b53d0:	0003021c 	.word	0x0003021c

000b53d4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b53d4:	b508      	push	{r3, lr}
   b53d6:	4b02      	ldr	r3, [pc, #8]	; (b53e0 <abort+0xc>)
   b53d8:	681b      	ldr	r3, [r3, #0]
   b53da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53dc:	9301      	str	r3, [sp, #4]
   b53de:	bd08      	pop	{r3, pc}
   b53e0:	0003021c 	.word	0x0003021c

000b53e4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b53e4:	b508      	push	{r3, lr}
   b53e6:	4b02      	ldr	r3, [pc, #8]	; (b53f0 <__errno+0xc>)
   b53e8:	681b      	ldr	r3, [r3, #0]
   b53ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b53ec:	9301      	str	r3, [sp, #4]
   b53ee:	bd08      	pop	{r3, pc}
   b53f0:	0003021c 	.word	0x0003021c

000b53f4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b53f4:	b508      	push	{r3, lr}
   b53f6:	4b02      	ldr	r3, [pc, #8]	; (b5400 <__assert_func+0xc>)
   b53f8:	681b      	ldr	r3, [r3, #0]
   b53fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53fc:	9301      	str	r3, [sp, #4]
   b53fe:	bd08      	pop	{r3, pc}
   b5400:	0003021c 	.word	0x0003021c

000b5404 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b02      	ldr	r3, [pc, #8]	; (b5410 <newlib_impure_ptr_callback+0xc>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b540c:	9301      	str	r3, [sp, #4]
   b540e:	bd08      	pop	{r3, pc}
   b5410:	0003021c 	.word	0x0003021c

000b5414 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5414:	2300      	movs	r3, #0
   b5416:	6840      	ldr	r0, [r0, #4]
   b5418:	461a      	mov	r2, r3
   b541a:	f7ff bf2f 	b.w	b527c <network_connect>

000b541e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b541e:	6840      	ldr	r0, [r0, #4]
   b5420:	2200      	movs	r2, #0
   b5422:	2102      	movs	r1, #2
   b5424:	f7ff bf3a 	b.w	b529c <network_disconnect>

000b5428 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5428:	2200      	movs	r2, #0
   b542a:	6840      	ldr	r0, [r0, #4]
   b542c:	4611      	mov	r1, r2
   b542e:	f7ff bf2d 	b.w	b528c <network_connecting>

000b5432 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5432:	2200      	movs	r2, #0
   b5434:	6840      	ldr	r0, [r0, #4]
   b5436:	4611      	mov	r1, r2
   b5438:	f7ff bf38 	b.w	b52ac <network_ready>

000b543c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b543c:	2300      	movs	r3, #0
   b543e:	6840      	ldr	r0, [r0, #4]
   b5440:	461a      	mov	r2, r3
   b5442:	4619      	mov	r1, r3
   b5444:	f7ff bf3a 	b.w	b52bc <network_on>

000b5448 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5448:	2300      	movs	r3, #0
   b544a:	6840      	ldr	r0, [r0, #4]
   b544c:	461a      	mov	r2, r3
   b544e:	4619      	mov	r1, r3
   b5450:	f7ff bf3c 	b.w	b52cc <network_off>

000b5454 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5454:	6840      	ldr	r0, [r0, #4]
   b5456:	2100      	movs	r1, #0
   b5458:	f7ff bf60 	b.w	b531c <network_is_on>

000b545c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b545c:	6840      	ldr	r0, [r0, #4]
   b545e:	2100      	movs	r1, #0
   b5460:	f7ff bf64 	b.w	b532c <network_is_off>

000b5464 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5464:	6840      	ldr	r0, [r0, #4]
   b5466:	2200      	movs	r2, #0
   b5468:	f081 0101 	eor.w	r1, r1, #1
   b546c:	f7ff bf36 	b.w	b52dc <network_listen>

000b5470 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5470:	6840      	ldr	r0, [r0, #4]
   b5472:	2200      	movs	r2, #0
   b5474:	f7ff bf42 	b.w	b52fc <network_set_listen_timeout>

000b5478 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5478:	2200      	movs	r2, #0
   b547a:	6840      	ldr	r0, [r0, #4]
   b547c:	4611      	mov	r1, r2
   b547e:	f7ff bf45 	b.w	b530c <network_get_listen_timeout>

000b5482 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5482:	2200      	movs	r2, #0
   b5484:	6840      	ldr	r0, [r0, #4]
   b5486:	4611      	mov	r1, r2
   b5488:	f7ff bf30 	b.w	b52ec <network_listening>

000b548c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5490:	b095      	sub	sp, #84	; 0x54
   b5492:	4614      	mov	r4, r2
   b5494:	460d      	mov	r5, r1
   b5496:	4607      	mov	r7, r0
    IPAddress addr;
   b5498:	f000 fbca 	bl	b5c30 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b549c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b549e:	221c      	movs	r2, #28
   b54a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b54a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b54a4:	f002 fd16 	bl	b7ed4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b54a8:	2340      	movs	r3, #64	; 0x40
   b54aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b54ac:	4620      	mov	r0, r4
   b54ae:	466b      	mov	r3, sp
   b54b0:	aa0c      	add	r2, sp, #48	; 0x30
   b54b2:	2100      	movs	r1, #0
   b54b4:	f7ff feaa 	bl	b520c <netdb_getaddrinfo>
    if (!r) {
   b54b8:	4604      	mov	r4, r0
   b54ba:	2800      	cmp	r0, #0
   b54bc:	d14b      	bne.n	b5556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54be:	4602      	mov	r2, r0
   b54c0:	2101      	movs	r1, #1
   b54c2:	6868      	ldr	r0, [r5, #4]
   b54c4:	f7ff fef2 	bl	b52ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b54ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54cc:	4622      	mov	r2, r4
   b54ce:	6868      	ldr	r0, [r5, #4]
   b54d0:	f7ff feec 	bl	b52ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b54d6:	4681      	mov	r9, r0
        bool ok = false;
   b54d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54da:	2e00      	cmp	r6, #0
   b54dc:	d03b      	beq.n	b5556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b54de:	2900      	cmp	r1, #0
   b54e0:	d139      	bne.n	b5556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b54e2:	6873      	ldr	r3, [r6, #4]
   b54e4:	2b02      	cmp	r3, #2
   b54e6:	d003      	beq.n	b54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b54e8:	2b0a      	cmp	r3, #10
   b54ea:	d011      	beq.n	b5510 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b54ec:	69f6      	ldr	r6, [r6, #28]
   b54ee:	e7f4      	b.n	b54da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b54f0:	f1b8 0f00 	cmp.w	r8, #0
   b54f4:	d0fa      	beq.n	b54ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b54f6:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b54f8:	a806      	add	r0, sp, #24
   b54fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b54fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b54fe:	f000 fbc5 	bl	b5c8c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5504:	1d3c      	adds	r4, r7, #4
   b5506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5508:	682b      	ldr	r3, [r5, #0]
   b550a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b550c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b550e:	e7ed      	b.n	b54ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5510:	f1b9 0f00 	cmp.w	r9, #0
   b5514:	d0ea      	beq.n	b54ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5516:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5518:	2210      	movs	r2, #16
   b551a:	a801      	add	r0, sp, #4
   b551c:	f002 fcda 	bl	b7ed4 <memset>
                    a.v = 6;
   b5520:	2306      	movs	r3, #6
   b5522:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5526:	ad01      	add	r5, sp, #4
   b5528:	f104 0308 	add.w	r3, r4, #8
   b552c:	3418      	adds	r4, #24
   b552e:	6818      	ldr	r0, [r3, #0]
   b5530:	6859      	ldr	r1, [r3, #4]
   b5532:	462a      	mov	r2, r5
   b5534:	c203      	stmia	r2!, {r0, r1}
   b5536:	3308      	adds	r3, #8
   b5538:	42a3      	cmp	r3, r4
   b553a:	4615      	mov	r5, r2
   b553c:	d1f7      	bne.n	b552e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b553e:	a901      	add	r1, sp, #4
   b5540:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5542:	ad07      	add	r5, sp, #28
   b5544:	f000 fb82 	bl	b5c4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b554a:	1d3c      	adds	r4, r7, #4
   b554c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b554e:	682b      	ldr	r3, [r5, #0]
   b5550:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5552:	4649      	mov	r1, r9
   b5554:	e7ca      	b.n	b54ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5556:	9800      	ldr	r0, [sp, #0]
   b5558:	f7ff fe50 	bl	b51fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b555c:	4638      	mov	r0, r7
   b555e:	b015      	add	sp, #84	; 0x54
   b5560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5564 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5564:	4b02      	ldr	r3, [pc, #8]	; (b5570 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5566:	4a03      	ldr	r2, [pc, #12]	; (b5574 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5568:	601a      	str	r2, [r3, #0]
   b556a:	2200      	movs	r2, #0
   b556c:	605a      	str	r2, [r3, #4]

} // spark
   b556e:	4770      	bx	lr
   b5570:	2003e67c 	.word	0x2003e67c
   b5574:	000b823c 	.word	0x000b823c

000b5578 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5578:	2200      	movs	r2, #0
   b557a:	6840      	ldr	r0, [r0, #4]
   b557c:	4611      	mov	r1, r2
   b557e:	f7ff be95 	b.w	b52ac <network_ready>

000b5582 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5582:	2200      	movs	r2, #0
   b5584:	6840      	ldr	r0, [r0, #4]
   b5586:	4611      	mov	r1, r2
   b5588:	f7ff beb0 	b.w	b52ec <network_listening>

000b558c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b558c:	2200      	movs	r2, #0
   b558e:	6840      	ldr	r0, [r0, #4]
   b5590:	4611      	mov	r1, r2
   b5592:	f7ff bebb 	b.w	b530c <network_get_listen_timeout>

000b5596 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5596:	6840      	ldr	r0, [r0, #4]
   b5598:	2200      	movs	r2, #0
   b559a:	f7ff beaf 	b.w	b52fc <network_set_listen_timeout>

000b559e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b559e:	6840      	ldr	r0, [r0, #4]
   b55a0:	2200      	movs	r2, #0
   b55a2:	f081 0101 	eor.w	r1, r1, #1
   b55a6:	f7ff be99 	b.w	b52dc <network_listen>

000b55aa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b55aa:	2300      	movs	r3, #0
   b55ac:	6840      	ldr	r0, [r0, #4]
   b55ae:	461a      	mov	r2, r3
   b55b0:	4619      	mov	r1, r3
   b55b2:	f7ff be8b 	b.w	b52cc <network_off>

000b55b6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b55b6:	2300      	movs	r3, #0
   b55b8:	6840      	ldr	r0, [r0, #4]
   b55ba:	461a      	mov	r2, r3
   b55bc:	4619      	mov	r1, r3
   b55be:	f7ff be7d 	b.w	b52bc <network_on>

000b55c2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55c2:	2200      	movs	r2, #0
   b55c4:	6840      	ldr	r0, [r0, #4]
   b55c6:	4611      	mov	r1, r2
   b55c8:	f7ff be60 	b.w	b528c <network_connecting>

000b55cc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b55cc:	6840      	ldr	r0, [r0, #4]
   b55ce:	2200      	movs	r2, #0
   b55d0:	2102      	movs	r1, #2
   b55d2:	f7ff be63 	b.w	b529c <network_disconnect>

000b55d6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b55d6:	2300      	movs	r3, #0
   b55d8:	6840      	ldr	r0, [r0, #4]
   b55da:	461a      	mov	r2, r3
   b55dc:	f7ff be4e 	b.w	b527c <network_connect>

000b55e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b55e0:	4b02      	ldr	r3, [pc, #8]	; (b55ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b55e2:	2204      	movs	r2, #4
   b55e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b55e6:	4a02      	ldr	r2, [pc, #8]	; (b55f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b55e8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b55ea:	4770      	bx	lr
   b55ec:	2003e684 	.word	0x2003e684
   b55f0:	000b8278 	.word	0x000b8278

000b55f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b55f4:	4770      	bx	lr

000b55f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b55f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55f8:	4606      	mov	r6, r0
   b55fa:	4615      	mov	r5, r2
   b55fc:	460c      	mov	r4, r1
   b55fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5600:	42bc      	cmp	r4, r7
   b5602:	d006      	beq.n	b5612 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5604:	6833      	ldr	r3, [r6, #0]
   b5606:	f814 1b01 	ldrb.w	r1, [r4], #1
   b560a:	689b      	ldr	r3, [r3, #8]
   b560c:	4630      	mov	r0, r6
   b560e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5610:	e7f6      	b.n	b5600 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5612:	4628      	mov	r0, r5
   b5614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5616 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5616:	7c00      	ldrb	r0, [r0, #16]
   b5618:	2200      	movs	r2, #0
   b561a:	f7ff bca3 	b.w	b4f64 <hal_i2c_write>

000b561e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b561e:	7c00      	ldrb	r0, [r0, #16]
   b5620:	2100      	movs	r1, #0
   b5622:	f7ff bca7 	b.w	b4f74 <hal_i2c_available>

000b5626 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5626:	7c00      	ldrb	r0, [r0, #16]
   b5628:	2100      	movs	r1, #0
   b562a:	f7ff bcab 	b.w	b4f84 <hal_i2c_read>

000b562e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b562e:	7c00      	ldrb	r0, [r0, #16]
   b5630:	2100      	movs	r1, #0
   b5632:	f7ff bcaf 	b.w	b4f94 <hal_i2c_peek>

000b5636 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5636:	7c00      	ldrb	r0, [r0, #16]
   b5638:	2100      	movs	r1, #0
   b563a:	f7ff bcb3 	b.w	b4fa4 <hal_i2c_flush>

000b563e <_ZN7TwoWireD0Ev>:
   b563e:	b510      	push	{r4, lr}
   b5640:	2114      	movs	r1, #20
   b5642:	4604      	mov	r4, r0
   b5644:	f7ff f983 	bl	b494e <_ZdlPvj>
   b5648:	4620      	mov	r0, r4
   b564a:	bd10      	pop	{r4, pc}

000b564c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b564c:	b538      	push	{r3, r4, r5, lr}
   b564e:	4604      	mov	r4, r0
   b5650:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5656:	2200      	movs	r2, #0
   b5658:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b565c:	4b09      	ldr	r3, [pc, #36]	; (b5684 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b565e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5660:	4608      	mov	r0, r1
   b5662:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5664:	4629      	mov	r1, r5
   b5666:	f7ff fcad 	bl	b4fc4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b566a:	30bf      	adds	r0, #191	; 0xbf
   b566c:	d108      	bne.n	b5680 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b566e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5670:	07db      	lsls	r3, r3, #31
   b5672:	d505      	bpl.n	b5680 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5674:	6868      	ldr	r0, [r5, #4]
   b5676:	f7ff fe95 	bl	b53a4 <free>
    free(conf.tx_buffer);
   b567a:	68e8      	ldr	r0, [r5, #12]
   b567c:	f7ff fe92 	bl	b53a4 <free>
}
   b5680:	4620      	mov	r0, r4
   b5682:	bd38      	pop	{r3, r4, r5, pc}
   b5684:	000b82bc 	.word	0x000b82bc

000b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5688:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b568a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b568c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b568e:	b17c      	cbz	r4, b56b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5690:	6863      	ldr	r3, [r4, #4]
   b5692:	3b01      	subs	r3, #1
   b5694:	6063      	str	r3, [r4, #4]
   b5696:	b95b      	cbnz	r3, b56b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5698:	6823      	ldr	r3, [r4, #0]
   b569a:	4620      	mov	r0, r4
   b569c:	689b      	ldr	r3, [r3, #8]
   b569e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b56a0:	68a3      	ldr	r3, [r4, #8]
   b56a2:	3b01      	subs	r3, #1
   b56a4:	60a3      	str	r3, [r4, #8]
   b56a6:	b91b      	cbnz	r3, b56b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b56a8:	6823      	ldr	r3, [r4, #0]
   b56aa:	4620      	mov	r0, r4
   b56ac:	68db      	ldr	r3, [r3, #12]
   b56ae:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b56b0:	4628      	mov	r0, r5
   b56b2:	bd38      	pop	{r3, r4, r5, pc}

000b56b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b56b4:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b56b6:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b56b8:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b56ba:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b56bc:	dd03      	ble.n	b56c6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b56be:	f7ff fe79 	bl	b53b4 <realloc>
            if (!d) {
   b56c2:	b918      	cbnz	r0, b56cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b56c4:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b56c6:	f7ff fe6d 	bl	b53a4 <free>
        T* d = nullptr;
   b56ca:	2000      	movs	r0, #0
        data_ = d;
   b56cc:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b56ce:	60a5      	str	r5, [r4, #8]
        return true;
   b56d0:	2001      	movs	r0, #1
   b56d2:	e7f7      	b.n	b56c4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b56d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b56d4:	f100 0310 	add.w	r3, r0, #16
   b56d8:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b56da:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b56de:	2901      	cmp	r1, #1
   b56e0:	4618      	mov	r0, r3
   b56e2:	d108      	bne.n	b56f6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b56e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b56e8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b56ec:	3a01      	subs	r2, #1
   b56ee:	f103 0310 	add.w	r3, r3, #16
   b56f2:	d1f2      	bne.n	b56da <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b56f4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b56f6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b56f8:	bf04      	itt	eq
   b56fa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b56fe:	1852      	addeq	r2, r2, r1
   b5700:	e7f4      	b.n	b56ec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5702 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5702:	b40e      	push	{r1, r2, r3}
   b5704:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5706:	b088      	sub	sp, #32
   b5708:	af00      	add	r7, sp, #0
   b570a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b570e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5710:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5714:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5716:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5718:	462b      	mov	r3, r5
   b571a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b571c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b571e:	f7ff fe51 	bl	b53c4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b5722:	280f      	cmp	r0, #15
   b5724:	687a      	ldr	r2, [r7, #4]
   b5726:	d91a      	bls.n	b575e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b5728:	f100 0308 	add.w	r3, r0, #8
   b572c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b5730:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b5732:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5736:	1c41      	adds	r1, r0, #1
   b5738:	462b      	mov	r3, r5
   b573a:	4668      	mov	r0, sp
        va_start(args, fmt);
   b573c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b573e:	f7ff fe41 	bl	b53c4 <vsnprintf>
        if (n > 0) {
   b5742:	1e02      	subs	r2, r0, #0
   b5744:	dd04      	ble.n	b5750 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b5746:	6823      	ldr	r3, [r4, #0]
   b5748:	4669      	mov	r1, sp
   b574a:	689b      	ldr	r3, [r3, #8]
   b574c:	4620      	mov	r0, r4
   b574e:	4798      	blx	r3
   b5750:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b5752:	3720      	adds	r7, #32
   b5754:	46bd      	mov	sp, r7
   b5756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b575a:	b003      	add	sp, #12
   b575c:	4770      	bx	lr
    } else if (n > 0) {
   b575e:	2800      	cmp	r0, #0
   b5760:	d0f7      	beq.n	b5752 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b5762:	6823      	ldr	r3, [r4, #0]
   b5764:	4602      	mov	r2, r0
   b5766:	689b      	ldr	r3, [r3, #8]
   b5768:	f107 0110 	add.w	r1, r7, #16
   b576c:	4620      	mov	r0, r4
   b576e:	4798      	blx	r3
}
   b5770:	e7ef      	b.n	b5752 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b5772 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5772:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5774:	6843      	ldr	r3, [r0, #4]
   b5776:	3b01      	subs	r3, #1
    {
   b5778:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b577a:	6043      	str	r3, [r0, #4]
   b577c:	b963      	cbnz	r3, b5798 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b577e:	6803      	ldr	r3, [r0, #0]
   b5780:	689b      	ldr	r3, [r3, #8]
   b5782:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5784:	68a3      	ldr	r3, [r4, #8]
   b5786:	3b01      	subs	r3, #1
   b5788:	60a3      	str	r3, [r4, #8]
   b578a:	b92b      	cbnz	r3, b5798 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b578c:	6823      	ldr	r3, [r4, #0]
   b578e:	4620      	mov	r0, r4
   b5790:	68db      	ldr	r3, [r3, #12]
    }
   b5792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5796:	4718      	bx	r3
    }
   b5798:	bd10      	pop	{r4, pc}

000b579a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b579a:	b538      	push	{r3, r4, r5, lr}
   b579c:	680b      	ldr	r3, [r1, #0]
   b579e:	6003      	str	r3, [r0, #0]
   b57a0:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b57a2:	6843      	ldr	r3, [r0, #4]
   b57a4:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b57a6:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b57a8:	d008      	beq.n	b57bc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b57aa:	b115      	cbz	r5, b57b2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b57ac:	686b      	ldr	r3, [r5, #4]
   b57ae:	3301      	adds	r3, #1
   b57b0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b57b2:	6860      	ldr	r0, [r4, #4]
   b57b4:	b108      	cbz	r0, b57ba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b57b6:	f7ff ffdc 	bl	b5772 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b57ba:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b57bc:	bd38      	pop	{r3, r4, r5, pc}

000b57be <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b57be:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b57c0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b57c2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b57c6:	689b      	ldr	r3, [r3, #8]
   b57c8:	2201      	movs	r2, #1
   b57ca:	f10d 0107 	add.w	r1, sp, #7
   b57ce:	4798      	blx	r3
}
   b57d0:	b003      	add	sp, #12
   b57d2:	f85d fb04 	ldr.w	pc, [sp], #4

000b57d6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b57d6:	460b      	mov	r3, r1
   b57d8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b57da:	2200      	movs	r2, #0
   b57dc:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b57de:	e9c0 2200 	strd	r2, r2, [r0]
   b57e2:	4604      	mov	r4, r0
        t_ = t;
   b57e4:	6083      	str	r3, [r0, #8]
    if (t) {
   b57e6:	b90b      	cbnz	r3, b57ec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b57e8:	4620      	mov	r0, r4
   b57ea:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b57ec:	f7ff ffd5 	bl	b579a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b57f0:	e7fa      	b.n	b57e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b57f2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b57f2:	6883      	ldr	r3, [r0, #8]
   b57f4:	b1eb      	cbz	r3, b5832 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b57f6:	781a      	ldrb	r2, [r3, #0]
   b57f8:	2a03      	cmp	r2, #3
   b57fa:	d81a      	bhi.n	b5832 <_ZNK5spark9JSONValue4typeEv+0x40>
   b57fc:	e8df f002 	tbb	[pc, r2]
   b5800:	1b021704 	.word	0x1b021704
   b5804:	2005      	movs	r0, #5
   b5806:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b5808:	6802      	ldr	r2, [r0, #0]
   b580a:	685b      	ldr	r3, [r3, #4]
   b580c:	6852      	ldr	r2, [r2, #4]
   b580e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5810:	282d      	cmp	r0, #45	; 0x2d
   b5812:	d012      	beq.n	b583a <_ZNK5spark9JSONValue4typeEv+0x48>
   b5814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b5818:	2b09      	cmp	r3, #9
   b581a:	d90e      	bls.n	b583a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b581c:	2874      	cmp	r0, #116	; 0x74
   b581e:	d00e      	beq.n	b583e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b5820:	2866      	cmp	r0, #102	; 0x66
   b5822:	d00c      	beq.n	b583e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b5824:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b5828:	4258      	negs	r0, r3
   b582a:	4158      	adcs	r0, r3
   b582c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b582e:	2006      	movs	r0, #6
   b5830:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b5832:	2000      	movs	r0, #0
   b5834:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b5836:	2004      	movs	r0, #4
   b5838:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b583a:	2003      	movs	r0, #3
   b583c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b583e:	2002      	movs	r0, #2
}
   b5840:	4770      	bx	lr

000b5842 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b5842:	b510      	push	{r4, lr}
   b5844:	4604      	mov	r4, r0
    switch (type()) {
   b5846:	f7ff ffd4 	bl	b57f2 <_ZNK5spark9JSONValue4typeEv>
   b584a:	2802      	cmp	r0, #2
   b584c:	d00e      	beq.n	b586c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b584e:	1ec3      	subs	r3, r0, #3
   b5850:	b2db      	uxtb	r3, r3
   b5852:	2b01      	cmp	r3, #1
   b5854:	d814      	bhi.n	b5880 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b5856:	6822      	ldr	r2, [r4, #0]
   b5858:	68a3      	ldr	r3, [r4, #8]
   b585a:	6850      	ldr	r0, [r2, #4]
   b585c:	685b      	ldr	r3, [r3, #4]
}
   b585e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b5862:	220a      	movs	r2, #10
   b5864:	2100      	movs	r1, #0
   b5866:	4418      	add	r0, r3
   b5868:	f002 bc34 	b.w	b80d4 <strtol>
        const char* const s = d_->json + t_->start;
   b586c:	6822      	ldr	r2, [r4, #0]
   b586e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b5870:	6852      	ldr	r2, [r2, #4]
   b5872:	685b      	ldr	r3, [r3, #4]
   b5874:	5cd0      	ldrb	r0, [r2, r3]
   b5876:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b587a:	4258      	negs	r0, r3
   b587c:	4158      	adcs	r0, r3
}
   b587e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5880:	2000      	movs	r0, #0
   b5882:	e7fc      	b.n	b587e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5884 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5884:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5886:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b5888:	e9c0 3300 	strd	r3, r3, [r0]
   b588c:	4604      	mov	r4, r0
        n_(0) {
   b588e:	480e      	ldr	r0, [pc, #56]	; (b58c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5890:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5894:	b1a9      	cbz	r1, b58c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b5896:	780b      	ldrb	r3, [r1, #0]
   b5898:	2b03      	cmp	r3, #3
   b589a:	d006      	beq.n	b58aa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b589c:	b98b      	cbnz	r3, b58c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b589e:	6813      	ldr	r3, [r2, #0]
   b58a0:	6858      	ldr	r0, [r3, #4]
   b58a2:	684b      	ldr	r3, [r1, #4]
   b58a4:	5cc3      	ldrb	r3, [r0, r3]
   b58a6:	2b6e      	cmp	r3, #110	; 0x6e
   b58a8:	d007      	beq.n	b58ba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b58aa:	6813      	ldr	r3, [r2, #0]
   b58ac:	684d      	ldr	r5, [r1, #4]
   b58ae:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b58b0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b58b2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b58b4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b58b6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b58b8:	60e3      	str	r3, [r4, #12]
   b58ba:	4611      	mov	r1, r2
   b58bc:	4620      	mov	r0, r4
   b58be:	f7ff ff6c 	bl	b579a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b58c2:	4620      	mov	r0, r4
   b58c4:	bd38      	pop	{r3, r4, r5, pc}
   b58c6:	bf00      	nop
   b58c8:	000b83a2 	.word	0x000b83a2

000b58cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b58cc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b58ce:	2500      	movs	r5, #0
   b58d0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b58d2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b58d6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b58da:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b58de:	4604      	mov	r4, r0
   b58e0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b58e2:	b14b      	cbz	r3, b58f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b58e4:	781a      	ldrb	r2, [r3, #0]
   b58e6:	2a01      	cmp	r2, #1
   b58e8:	d106      	bne.n	b58f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b58ea:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b58ee:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b58f0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b58f2:	6143      	str	r3, [r0, #20]
   b58f4:	f7ff ff51 	bl	b579a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b58f8:	4620      	mov	r0, r4
   b58fa:	bd38      	pop	{r3, r4, r5, pc}

000b58fc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b58fc:	b510      	push	{r4, lr}
    if (!n_) {
   b58fe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5900:	4604      	mov	r4, r0
    if (!n_) {
   b5902:	b163      	cbz	r3, b591e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5904:	6880      	ldr	r0, [r0, #8]
   b5906:	60e0      	str	r0, [r4, #12]
    --n_;
   b5908:	3b01      	subs	r3, #1
    ++t_;
   b590a:	3010      	adds	r0, #16
   b590c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b590e:	6120      	str	r0, [r4, #16]
    --n_;
   b5910:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5912:	b113      	cbz	r3, b591a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5914:	f7ff fede 	bl	b56d4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b5918:	60a0      	str	r0, [r4, #8]
    return true;
   b591a:	2001      	movs	r0, #1
   b591c:	e000      	b.n	b5920 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b591e:	4618      	mov	r0, r3
}
   b5920:	bd10      	pop	{r4, pc}

000b5922 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5922:	b510      	push	{r4, lr}
    write('}');
   b5924:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b5926:	4604      	mov	r4, r0
    write('}');
   b5928:	f7ff ff49 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b592c:	2301      	movs	r3, #1
   b592e:	7123      	strb	r3, [r4, #4]
}
   b5930:	4620      	mov	r0, r4
   b5932:	bd10      	pop	{r4, pc}

000b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b5934:	b508      	push	{r3, lr}
    switch (state_) {
   b5936:	7903      	ldrb	r3, [r0, #4]
   b5938:	2b01      	cmp	r3, #1
   b593a:	d002      	beq.n	b5942 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b593c:	2b02      	cmp	r3, #2
   b593e:	d004      	beq.n	b594a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b5940:	bd08      	pop	{r3, pc}
        write(',');
   b5942:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b5944:	f7ff ff3b 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
}
   b5948:	e7fa      	b.n	b5940 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b594a:	213a      	movs	r1, #58	; 0x3a
   b594c:	e7fa      	b.n	b5944 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b594e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b594e:	b510      	push	{r4, lr}
   b5950:	4604      	mov	r4, r0
    writeSeparator();
   b5952:	f7ff ffef 	bl	b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b5956:	4620      	mov	r0, r4
   b5958:	217b      	movs	r1, #123	; 0x7b
   b595a:	f7ff ff30 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b595e:	2300      	movs	r3, #0
   b5960:	7123      	strb	r3, [r4, #4]
}
   b5962:	4620      	mov	r0, r4
   b5964:	bd10      	pop	{r4, pc}
	...

000b5968 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b5968:	b513      	push	{r0, r1, r4, lr}
   b596a:	4604      	mov	r4, r0
   b596c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b596e:	f7ff ffe1 	bl	b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b5972:	6823      	ldr	r3, [r4, #0]
   b5974:	9a01      	ldr	r2, [sp, #4]
   b5976:	68db      	ldr	r3, [r3, #12]
   b5978:	4903      	ldr	r1, [pc, #12]	; (b5988 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b597a:	4620      	mov	r0, r4
   b597c:	4798      	blx	r3
    state_ = NEXT;
   b597e:	2301      	movs	r3, #1
}
   b5980:	4620      	mov	r0, r4
    state_ = NEXT;
   b5982:	7123      	strb	r3, [r4, #4]
}
   b5984:	b002      	add	sp, #8
   b5986:	bd10      	pop	{r4, pc}
   b5988:	000b82dc 	.word	0x000b82dc

000b598c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b598c:	b513      	push	{r0, r1, r4, lr}
   b598e:	4604      	mov	r4, r0
   b5990:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5992:	f7ff ffcf 	bl	b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5996:	6823      	ldr	r3, [r4, #0]
   b5998:	9a01      	ldr	r2, [sp, #4]
   b599a:	68db      	ldr	r3, [r3, #12]
   b599c:	4903      	ldr	r1, [pc, #12]	; (b59ac <_ZN5spark10JSONWriter5valueEj+0x20>)
   b599e:	4620      	mov	r0, r4
   b59a0:	4798      	blx	r3
    state_ = NEXT;
   b59a2:	2301      	movs	r3, #1
}
   b59a4:	4620      	mov	r0, r4
    state_ = NEXT;
   b59a6:	7123      	strb	r3, [r4, #4]
}
   b59a8:	b002      	add	sp, #8
   b59aa:	bd10      	pop	{r4, pc}
   b59ac:	000b82df 	.word	0x000b82df

000b59b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b59b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b59b4:	460d      	mov	r5, r1
    write('"');
   b59b6:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b59b8:	4690      	mov	r8, r2
   b59ba:	4604      	mov	r4, r0
    write('"');
   b59bc:	f7ff feff 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b59c0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5a68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b59c4:	44a8      	add	r8, r5
    const char *s = str;
   b59c6:	462f      	mov	r7, r5
    while (s != end) {
   b59c8:	4547      	cmp	r7, r8
   b59ca:	46ba      	mov	sl, r7
   b59cc:	d03d      	beq.n	b5a4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b59ce:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b59d2:	2e22      	cmp	r6, #34	; 0x22
   b59d4:	d006      	beq.n	b59e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b59d6:	2e5c      	cmp	r6, #92	; 0x5c
   b59d8:	d004      	beq.n	b59e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b59da:	4630      	mov	r0, r6
   b59dc:	f002 fa3a 	bl	b7e54 <isprint>
   b59e0:	2800      	cmp	r0, #0
   b59e2:	d1f1      	bne.n	b59c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b59e4:	6823      	ldr	r3, [r4, #0]
   b59e6:	ebaa 0205 	sub.w	r2, sl, r5
   b59ea:	689b      	ldr	r3, [r3, #8]
   b59ec:	4629      	mov	r1, r5
   b59ee:	4620      	mov	r0, r4
   b59f0:	4798      	blx	r3
            write('\\');
   b59f2:	215c      	movs	r1, #92	; 0x5c
   b59f4:	4620      	mov	r0, r4
   b59f6:	f7ff fee2 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b59fa:	2e0d      	cmp	r6, #13
   b59fc:	d80a      	bhi.n	b5a14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b59fe:	2e07      	cmp	r6, #7
   b5a00:	d91c      	bls.n	b5a3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5a02:	f1a6 0308 	sub.w	r3, r6, #8
   b5a06:	2b05      	cmp	r3, #5
   b5a08:	d818      	bhi.n	b5a3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5a0a:	e8df f003 	tbb	[pc, r3]
   b5a0e:	0f0d      	.short	0x0f0d
   b5a10:	15131711 	.word	0x15131711
   b5a14:	2e22      	cmp	r6, #34	; 0x22
   b5a16:	d001      	beq.n	b5a1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5a18:	2e5c      	cmp	r6, #92	; 0x5c
   b5a1a:	d10f      	bne.n	b5a3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5a1c:	4631      	mov	r1, r6
                write('b');
   b5a1e:	4620      	mov	r0, r4
   b5a20:	f7ff fecd 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5a24:	463d      	mov	r5, r7
    while (s != end) {
   b5a26:	e7cf      	b.n	b59c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5a28:	2162      	movs	r1, #98	; 0x62
   b5a2a:	e7f8      	b.n	b5a1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5a2c:	2174      	movs	r1, #116	; 0x74
   b5a2e:	e7f6      	b.n	b5a1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5a30:	216e      	movs	r1, #110	; 0x6e
   b5a32:	e7f4      	b.n	b5a1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5a34:	2166      	movs	r1, #102	; 0x66
   b5a36:	e7f2      	b.n	b5a1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5a38:	2172      	movs	r1, #114	; 0x72
   b5a3a:	e7f0      	b.n	b5a1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5a3c:	6823      	ldr	r3, [r4, #0]
   b5a3e:	4632      	mov	r2, r6
   b5a40:	68db      	ldr	r3, [r3, #12]
   b5a42:	4649      	mov	r1, r9
   b5a44:	4620      	mov	r0, r4
   b5a46:	4798      	blx	r3
                break;
   b5a48:	e7ec      	b.n	b5a24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5a4a:	42bd      	cmp	r5, r7
   b5a4c:	d005      	beq.n	b5a5a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5a4e:	6823      	ldr	r3, [r4, #0]
   b5a50:	1b7a      	subs	r2, r7, r5
   b5a52:	689b      	ldr	r3, [r3, #8]
   b5a54:	4629      	mov	r1, r5
   b5a56:	4620      	mov	r0, r4
   b5a58:	4798      	blx	r3
    }
    write('"');
   b5a5a:	2122      	movs	r1, #34	; 0x22
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f7ff feae 	bl	b57be <_ZN5spark10JSONWriter5writeEc>
}
   b5a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5a66:	bf00      	nop
   b5a68:	000b82e2 	.word	0x000b82e2

000b5a6c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5a6c:	b513      	push	{r0, r1, r4, lr}
   b5a6e:	4604      	mov	r4, r0
   b5a70:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5a74:	f7ff ff5e 	bl	b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5a78:	4620      	mov	r0, r4
   b5a7a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5a7e:	f7ff ff97 	bl	b59b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5a82:	2302      	movs	r3, #2
}
   b5a84:	4620      	mov	r0, r4
    state_ = VALUE;
   b5a86:	7123      	strb	r3, [r4, #4]
}
   b5a88:	b002      	add	sp, #8
   b5a8a:	bd10      	pop	{r4, pc}

000b5a8c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5a8c:	b513      	push	{r0, r1, r4, lr}
   b5a8e:	4604      	mov	r4, r0
   b5a90:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5a94:	f7ff ff4e 	bl	b5934 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5a98:	4620      	mov	r0, r4
   b5a9a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5a9e:	f7ff ff87 	bl	b59b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5aa2:	2301      	movs	r3, #1
}
   b5aa4:	4620      	mov	r0, r4
    state_ = NEXT;
   b5aa6:	7123      	strb	r3, [r4, #4]
}
   b5aa8:	b002      	add	sp, #8
   b5aaa:	bd10      	pop	{r4, pc}

000b5aac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5aac:	7441      	strb	r1, [r0, #17]
}
   b5aae:	4770      	bx	lr

000b5ab0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ab0:	4770      	bx	lr

000b5ab2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ab2:	4770      	bx	lr

000b5ab4 <_ZN9USBSerial4readEv>:
{
   b5ab4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5ab6:	2100      	movs	r1, #0
   b5ab8:	7c00      	ldrb	r0, [r0, #16]
   b5aba:	f7ff fa2b 	bl	b4f14 <HAL_USB_USART_Receive_Data>
}
   b5abe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ac2:	bd08      	pop	{r3, pc}

000b5ac4 <_ZN9USBSerial4peekEv>:
{
   b5ac4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5ac6:	2101      	movs	r1, #1
   b5ac8:	7c00      	ldrb	r0, [r0, #16]
   b5aca:	f7ff fa23 	bl	b4f14 <HAL_USB_USART_Receive_Data>
}
   b5ace:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ad2:	bd08      	pop	{r3, pc}

000b5ad4 <_ZN9USBSerial17availableForWriteEv>:
{
   b5ad4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5ad6:	7c00      	ldrb	r0, [r0, #16]
   b5ad8:	f7ff fa14 	bl	b4f04 <HAL_USB_USART_Available_Data_For_Write>
}
   b5adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ae0:	bd08      	pop	{r3, pc}

000b5ae2 <_ZN9USBSerial9availableEv>:
{
   b5ae2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ae4:	7c00      	ldrb	r0, [r0, #16]
   b5ae6:	f7ff fa05 	bl	b4ef4 <HAL_USB_USART_Available_Data>
}
   b5aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5aee:	bd08      	pop	{r3, pc}

000b5af0 <_ZN9USBSerial5writeEh>:
{
   b5af0:	b513      	push	{r0, r1, r4, lr}
   b5af2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5af4:	7c00      	ldrb	r0, [r0, #16]
{
   b5af6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5af8:	f7ff fa04 	bl	b4f04 <HAL_USB_USART_Available_Data_For_Write>
   b5afc:	2800      	cmp	r0, #0
   b5afe:	9901      	ldr	r1, [sp, #4]
   b5b00:	dc01      	bgt.n	b5b06 <_ZN9USBSerial5writeEh+0x16>
   b5b02:	7c60      	ldrb	r0, [r4, #17]
   b5b04:	b120      	cbz	r0, b5b10 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5b06:	7c20      	ldrb	r0, [r4, #16]
   b5b08:	f7ff fa0c 	bl	b4f24 <HAL_USB_USART_Send_Data>
   b5b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b10:	b002      	add	sp, #8
   b5b12:	bd10      	pop	{r4, pc}

000b5b14 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b14:	7c00      	ldrb	r0, [r0, #16]
   b5b16:	f7ff ba0d 	b.w	b4f34 <HAL_USB_USART_Flush_Data>

000b5b1a <_ZN9USBSerialD0Ev>:
   b5b1a:	b510      	push	{r4, lr}
   b5b1c:	2114      	movs	r1, #20
   b5b1e:	4604      	mov	r4, r0
   b5b20:	f7fe ff15 	bl	b494e <_ZdlPvj>
   b5b24:	4620      	mov	r0, r4
   b5b26:	bd10      	pop	{r4, pc}

000b5b28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5b28:	b510      	push	{r4, lr}
   b5b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b2e:	4604      	mov	r4, r0
   b5b30:	4608      	mov	r0, r1
   b5b32:	2100      	movs	r1, #0
   b5b34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5b38:	4b04      	ldr	r3, [pc, #16]	; (b5b4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5b3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b3c:	2301      	movs	r3, #1
  _serial = serial;
   b5b3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5b42:	4611      	mov	r1, r2
   b5b44:	f7ff f9be 	bl	b4ec4 <HAL_USB_USART_Init>
}
   b5b48:	4620      	mov	r0, r4
   b5b4a:	bd10      	pop	{r4, pc}
   b5b4c:	000b82f0 	.word	0x000b82f0

000b5b50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5b50:	7c00      	ldrb	r0, [r0, #16]
   b5b52:	2200      	movs	r2, #0
   b5b54:	f7ff b9be 	b.w	b4ed4 <HAL_USB_USART_Begin>

000b5b58 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5b58:	7c00      	ldrb	r0, [r0, #16]
   b5b5a:	f7ff b9c3 	b.w	b4ee4 <HAL_USB_USART_End>

000b5b5e <_Z19acquireSerialBufferv>:
{
   b5b5e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5b60:	2214      	movs	r2, #20
{
   b5b62:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5b64:	2100      	movs	r1, #0
   b5b66:	f002 f9b5 	bl	b7ed4 <memset>
}
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	bd10      	pop	{r4, pc}
	...

000b5b70 <_Z16_fetch_usbserialv>:
{
   b5b70:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b72:	4c0f      	ldr	r4, [pc, #60]	; (b5bb0 <_Z16_fetch_usbserialv+0x40>)
{
   b5b74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b76:	a803      	add	r0, sp, #12
   b5b78:	f7ff fff1 	bl	b5b5e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b7c:	7821      	ldrb	r1, [r4, #0]
   b5b7e:	f3bf 8f5b 	dmb	ish
   b5b82:	f011 0101 	ands.w	r1, r1, #1
   b5b86:	d10f      	bne.n	b5ba8 <_Z16_fetch_usbserialv+0x38>
   b5b88:	4620      	mov	r0, r4
   b5b8a:	9101      	str	r1, [sp, #4]
   b5b8c:	f7fe feee 	bl	b496c <__cxa_guard_acquire>
   b5b90:	9901      	ldr	r1, [sp, #4]
   b5b92:	b148      	cbz	r0, b5ba8 <_Z16_fetch_usbserialv+0x38>
   b5b94:	aa03      	add	r2, sp, #12
   b5b96:	4807      	ldr	r0, [pc, #28]	; (b5bb4 <_Z16_fetch_usbserialv+0x44>)
   b5b98:	f7ff ffc6 	bl	b5b28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	f7fe feea 	bl	b4976 <__cxa_guard_release>
   b5ba2:	4805      	ldr	r0, [pc, #20]	; (b5bb8 <_Z16_fetch_usbserialv+0x48>)
   b5ba4:	f002 f950 	bl	b7e48 <atexit>
	return _usbserial;
}
   b5ba8:	4802      	ldr	r0, [pc, #8]	; (b5bb4 <_Z16_fetch_usbserialv+0x44>)
   b5baa:	b008      	add	sp, #32
   b5bac:	bd10      	pop	{r4, pc}
   b5bae:	bf00      	nop
   b5bb0:	2003e68c 	.word	0x2003e68c
   b5bb4:	2003e690 	.word	0x2003e690
   b5bb8:	000b5ab1 	.word	0x000b5ab1

000b5bbc <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5bbc:	4770      	bx	lr

000b5bbe <_ZN9IPAddressD0Ev>:
   b5bbe:	b510      	push	{r4, lr}
   b5bc0:	2118      	movs	r1, #24
   b5bc2:	4604      	mov	r4, r0
   b5bc4:	f7fe fec3 	bl	b494e <_ZdlPvj>
   b5bc8:	4620      	mov	r0, r4
   b5bca:	bd10      	pop	{r4, pc}

000b5bcc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5bce:	7d03      	ldrb	r3, [r0, #20]
   b5bd0:	2b06      	cmp	r3, #6
{
   b5bd2:	b08d      	sub	sp, #52	; 0x34
   b5bd4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5bd6:	f100 0704 	add.w	r7, r0, #4
   b5bda:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5bde:	d012      	beq.n	b5c06 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5be0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5be4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5be8:	220a      	movs	r2, #10
   b5bea:	4630      	mov	r0, r6
   b5bec:	f001 f90d 	bl	b6e0a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5bf0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5bf2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5bf4:	d019      	beq.n	b5c2a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5bf6:	2c00      	cmp	r4, #0
   b5bf8:	d0f4      	beq.n	b5be4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5bfa:	212e      	movs	r1, #46	; 0x2e
   b5bfc:	4630      	mov	r0, r6
   b5bfe:	f001 f901 	bl	b6e04 <_ZN5Print5printEc>
   b5c02:	4404      	add	r4, r0
   b5c04:	e7ee      	b.n	b5be4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c06:	232f      	movs	r3, #47	; 0x2f
   b5c08:	466a      	mov	r2, sp
   b5c0a:	4639      	mov	r1, r7
   b5c0c:	200a      	movs	r0, #10
		buf[0] = 0;
   b5c0e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c12:	f7ff fa2f 	bl	b5074 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5c16:	4668      	mov	r0, sp
   b5c18:	f7fe fe52 	bl	b48c0 <strlen>
   b5c1c:	6833      	ldr	r3, [r6, #0]
   b5c1e:	4602      	mov	r2, r0
   b5c20:	68db      	ldr	r3, [r3, #12]
   b5c22:	4669      	mov	r1, sp
   b5c24:	4630      	mov	r0, r6
   b5c26:	4798      	blx	r3
   b5c28:	4604      	mov	r4, r0
    }
    return n;
}
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	b00d      	add	sp, #52	; 0x34
   b5c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c30 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5c30:	b510      	push	{r4, lr}
   b5c32:	4b05      	ldr	r3, [pc, #20]	; (b5c48 <_ZN9IPAddressC1Ev+0x18>)
   b5c34:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5c36:	2211      	movs	r2, #17
   b5c38:	f840 3b04 	str.w	r3, [r0], #4
   b5c3c:	2100      	movs	r1, #0
   b5c3e:	f002 f949 	bl	b7ed4 <memset>
}
   b5c42:	4620      	mov	r0, r4
   b5c44:	bd10      	pop	{r4, pc}
   b5c46:	bf00      	nop
   b5c48:	000b8320 	.word	0x000b8320

000b5c4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5c4c:	4603      	mov	r3, r0
   b5c4e:	4a07      	ldr	r2, [pc, #28]	; (b5c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5c50:	b510      	push	{r4, lr}
   b5c52:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5c56:	f101 0210 	add.w	r2, r1, #16
   b5c5a:	f851 4b04 	ldr.w	r4, [r1], #4
   b5c5e:	f843 4b04 	str.w	r4, [r3], #4
   b5c62:	4291      	cmp	r1, r2
   b5c64:	d1f9      	bne.n	b5c5a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5c66:	780a      	ldrb	r2, [r1, #0]
   b5c68:	701a      	strb	r2, [r3, #0]
}
   b5c6a:	bd10      	pop	{r4, pc}
   b5c6c:	000b8320 	.word	0x000b8320

000b5c70 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5c70:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5c72:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5c76:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5c7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5c7e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5c82:	2304      	movs	r3, #4
   b5c84:	6041      	str	r1, [r0, #4]
   b5c86:	7503      	strb	r3, [r0, #20]
}
   b5c88:	bd10      	pop	{r4, pc}
	...

000b5c8c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5c8c:	b507      	push	{r0, r1, r2, lr}
   b5c8e:	4b06      	ldr	r3, [pc, #24]	; (b5ca8 <_ZN9IPAddressC1EPKh+0x1c>)
   b5c90:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5c92:	78cb      	ldrb	r3, [r1, #3]
   b5c94:	9300      	str	r3, [sp, #0]
   b5c96:	788b      	ldrb	r3, [r1, #2]
   b5c98:	784a      	ldrb	r2, [r1, #1]
   b5c9a:	7809      	ldrb	r1, [r1, #0]
   b5c9c:	f7ff ffe8 	bl	b5c70 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5ca0:	b003      	add	sp, #12
   b5ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   b5ca6:	bf00      	nop
   b5ca8:	000b8320 	.word	0x000b8320

000b5cac <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5cac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5cae:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5cb0:	4604      	mov	r4, r0
      if (_M_manager)
   b5cb2:	b113      	cbz	r3, b5cba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5cb4:	2203      	movs	r2, #3
   b5cb6:	4601      	mov	r1, r0
   b5cb8:	4798      	blx	r3
    }
   b5cba:	4620      	mov	r0, r4
   b5cbc:	bd10      	pop	{r4, pc}

000b5cbe <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5cbe:	2100      	movs	r1, #0
   b5cc0:	f7ff bb44 	b.w	b534c <system_delay_ms>

000b5cc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5cc4:	4b01      	ldr	r3, [pc, #4]	; (b5ccc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5cc6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5cc8:	4770      	bx	lr
   b5cca:	bf00      	nop
   b5ccc:	2003e5b0 	.word	0x2003e5b0

000b5cd0 <serialEventRun>:
{
   b5cd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5cd2:	4b0b      	ldr	r3, [pc, #44]	; (b5d00 <serialEventRun+0x30>)
   b5cd4:	b143      	cbz	r3, b5ce8 <serialEventRun+0x18>
   b5cd6:	f7ff ff4b 	bl	b5b70 <_Z16_fetch_usbserialv>
   b5cda:	6803      	ldr	r3, [r0, #0]
   b5cdc:	691b      	ldr	r3, [r3, #16]
   b5cde:	4798      	blx	r3
   b5ce0:	2800      	cmp	r0, #0
   b5ce2:	dd01      	ble.n	b5ce8 <serialEventRun+0x18>
        serialEvent();
   b5ce4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5ce8:	4b06      	ldr	r3, [pc, #24]	; (b5d04 <serialEventRun+0x34>)
   b5cea:	b143      	cbz	r3, b5cfe <serialEventRun+0x2e>
   b5cec:	f001 feb6 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b5cf0:	6803      	ldr	r3, [r0, #0]
   b5cf2:	691b      	ldr	r3, [r3, #16]
   b5cf4:	4798      	blx	r3
   b5cf6:	2800      	cmp	r0, #0
   b5cf8:	dd01      	ble.n	b5cfe <serialEventRun+0x2e>
        serialEvent1();
   b5cfa:	f3af 8000 	nop.w
}
   b5cfe:	bd08      	pop	{r3, pc}
	...

000b5d08 <_post_loop>:
{
   b5d08:	b508      	push	{r3, lr}
	serialEventRun();
   b5d0a:	f7ff ffe1 	bl	b5cd0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5d0e:	f7ff fa2d 	bl	b516c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5d12:	4b01      	ldr	r3, [pc, #4]	; (b5d18 <_post_loop+0x10>)
   b5d14:	6018      	str	r0, [r3, #0]
}
   b5d16:	bd08      	pop	{r3, pc}
   b5d18:	2003e734 	.word	0x2003e734

000b5d1c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d1c:	4805      	ldr	r0, [pc, #20]	; (b5d34 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5d1e:	4a06      	ldr	r2, [pc, #24]	; (b5d38 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5d20:	4906      	ldr	r1, [pc, #24]	; (b5d3c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5d22:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d24:	1a12      	subs	r2, r2, r0
   b5d26:	f002 f8ad 	bl	b7e84 <memcpy>
    __backup_sram_signature = signature;
   b5d2a:	4b05      	ldr	r3, [pc, #20]	; (b5d40 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5d2c:	4a05      	ldr	r2, [pc, #20]	; (b5d44 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5d2e:	601a      	str	r2, [r3, #0]
}
   b5d30:	bd08      	pop	{r3, pc}
   b5d32:	bf00      	nop
   b5d34:	2003f400 	.word	0x2003f400
   b5d38:	2003f404 	.word	0x2003f404
   b5d3c:	000b88f0 	.word	0x000b88f0
   b5d40:	2003f400 	.word	0x2003f400
   b5d44:	9a271c1e 	.word	0x9a271c1e

000b5d48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5d48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d4a:	2300      	movs	r3, #0
   b5d4c:	9300      	str	r3, [sp, #0]
   b5d4e:	461a      	mov	r2, r3
   b5d50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d54:	f7ff fb14 	bl	b5380 <system_ctrl_set_result>
}
   b5d58:	b003      	add	sp, #12
   b5d5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5d60 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5d60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5d62:	8843      	ldrh	r3, [r0, #2]
   b5d64:	2b0a      	cmp	r3, #10
   b5d66:	d008      	beq.n	b5d7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5d68:	2b50      	cmp	r3, #80	; 0x50
   b5d6a:	d10b      	bne.n	b5d84 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5d6c:	4b09      	ldr	r3, [pc, #36]	; (b5d94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5d6e:	681b      	ldr	r3, [r3, #0]
   b5d70:	b14b      	cbz	r3, b5d86 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5d72:	b003      	add	sp, #12
   b5d74:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5d78:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5d7a:	f7ff ffe5 	bl	b5d48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5d7e:	b003      	add	sp, #12
   b5d80:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d84:	2300      	movs	r3, #0
   b5d86:	9300      	str	r3, [sp, #0]
   b5d88:	461a      	mov	r2, r3
   b5d8a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5d8e:	f7ff faf7 	bl	b5380 <system_ctrl_set_result>
}
   b5d92:	e7f4      	b.n	b5d7e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5d94:	2003e6a8 	.word	0x2003e6a8

000b5d98 <module_user_init_hook>:
{
   b5d98:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5d9a:	4812      	ldr	r0, [pc, #72]	; (b5de4 <module_user_init_hook+0x4c>)
   b5d9c:	2100      	movs	r1, #0
   b5d9e:	f7ff fb31 	bl	b5404 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5da2:	4b11      	ldr	r3, [pc, #68]	; (b5de8 <module_user_init_hook+0x50>)
   b5da4:	681a      	ldr	r2, [r3, #0]
   b5da6:	4b11      	ldr	r3, [pc, #68]	; (b5dec <module_user_init_hook+0x54>)
   b5da8:	429a      	cmp	r2, r3
   b5daa:	4b11      	ldr	r3, [pc, #68]	; (b5df0 <module_user_init_hook+0x58>)
   b5dac:	bf0c      	ite	eq
   b5dae:	2201      	moveq	r2, #1
   b5db0:	2200      	movne	r2, #0
   b5db2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5db4:	d001      	beq.n	b5dba <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5db6:	f7ff ffb1 	bl	b5d1c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5dba:	f7ff f9c7 	bl	b514c <HAL_RNG_GetRandomNumber>
   b5dbe:	4604      	mov	r4, r0
    srand(seed);
   b5dc0:	f002 f890 	bl	b7ee4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5dc4:	4b0b      	ldr	r3, [pc, #44]	; (b5df4 <module_user_init_hook+0x5c>)
   b5dc6:	b113      	cbz	r3, b5dce <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5dc8:	4620      	mov	r0, r4
   b5dca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5dce:	2100      	movs	r1, #0
   b5dd0:	4808      	ldr	r0, [pc, #32]	; (b5df4 <module_user_init_hook+0x5c>)
   b5dd2:	f7ff fa4b 	bl	b526c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5dda:	4807      	ldr	r0, [pc, #28]	; (b5df8 <module_user_init_hook+0x60>)
   b5ddc:	2100      	movs	r1, #0
   b5dde:	f7ff bac5 	b.w	b536c <system_ctrl_set_app_request_handler>
   b5de2:	bf00      	nop
   b5de4:	000b5cc5 	.word	0x000b5cc5
   b5de8:	2003f400 	.word	0x2003f400
   b5dec:	9a271c1e 	.word	0x9a271c1e
   b5df0:	2003e6a4 	.word	0x2003e6a4
   b5df4:	00000000 	.word	0x00000000
   b5df8:	000b5d61 	.word	0x000b5d61

000b5dfc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5dfc:	4b01      	ldr	r3, [pc, #4]	; (b5e04 <_GLOBAL__sub_I_RGB+0x8>)
   b5dfe:	2200      	movs	r2, #0
   b5e00:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5e02:	4770      	bx	lr
   b5e04:	2003e6ac 	.word	0x2003e6ac

000b5e08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5e08:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5e0a:	681a      	ldr	r2, [r3, #0]
   b5e0c:	4b02      	ldr	r3, [pc, #8]	; (b5e18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5e0e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5e10:	4770      	bx	lr
   b5e12:	bf00      	nop
   b5e14:	2003e5a4 	.word	0x2003e5a4
   b5e18:	2003e6bc 	.word	0x2003e6bc

000b5e1c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5e1c:	6880      	ldr	r0, [r0, #8]
   b5e1e:	6803      	ldr	r3, [r0, #0]
   b5e20:	68db      	ldr	r3, [r3, #12]
   b5e22:	4718      	bx	r3

000b5e24 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5e24:	4770      	bx	lr

000b5e26 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5e26:	4608      	mov	r0, r1
   b5e28:	b111      	cbz	r1, b5e30 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5e2a:	680b      	ldr	r3, [r1, #0]
   b5e2c:	685b      	ldr	r3, [r3, #4]
   b5e2e:	4718      	bx	r3
}
   b5e30:	4770      	bx	lr

000b5e32 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5e32:	4770      	bx	lr

000b5e34 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5e34:	4770      	bx	lr

000b5e36 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5e36:	4770      	bx	lr

000b5e38 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5e38:	4770      	bx	lr

000b5e3a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5e3a:	b538      	push	{r3, r4, r5, lr}
   b5e3c:	4604      	mov	r4, r0
   b5e3e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5e40:	6800      	ldr	r0, [r0, #0]
   b5e42:	212e      	movs	r1, #46	; 0x2e
   b5e44:	f002 f889 	bl	b7f5a <strchrnul>
    size = s - category;
   b5e48:	6823      	ldr	r3, [r4, #0]
   b5e4a:	1ac3      	subs	r3, r0, r3
   b5e4c:	602b      	str	r3, [r5, #0]
    if (size) {
   b5e4e:	b123      	cbz	r3, b5e5a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5e50:	7803      	ldrb	r3, [r0, #0]
   b5e52:	b103      	cbz	r3, b5e56 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5e54:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5e56:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5e58:	6020      	str	r0, [r4, #0]
}
   b5e5a:	4618      	mov	r0, r3
   b5e5c:	bd38      	pop	{r3, r4, r5, pc}

000b5e5e <_ZN5spark16JSONStreamWriterD0Ev>:
   b5e5e:	b510      	push	{r4, lr}
   b5e60:	210c      	movs	r1, #12
   b5e62:	4604      	mov	r4, r0
   b5e64:	f7fe fd73 	bl	b494e <_ZdlPvj>
   b5e68:	4620      	mov	r0, r4
   b5e6a:	bd10      	pop	{r4, pc}

000b5e6c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5e6c:	b510      	push	{r4, lr}
   b5e6e:	2104      	movs	r1, #4
   b5e70:	4604      	mov	r4, r0
   b5e72:	f7fe fd6c 	bl	b494e <_ZdlPvj>
   b5e76:	4620      	mov	r0, r4
   b5e78:	bd10      	pop	{r4, pc}

000b5e7a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5e7a:	b510      	push	{r4, lr}
   b5e7c:	2104      	movs	r1, #4
   b5e7e:	4604      	mov	r4, r0
   b5e80:	f7fe fd65 	bl	b494e <_ZdlPvj>
   b5e84:	4620      	mov	r0, r4
   b5e86:	bd10      	pop	{r4, pc}

000b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5e88:	f7ff b90c 	b.w	b50a4 <os_mutex_recursive_lock>

000b5e8c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5e8c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5e8e:	f7fe fd0d 	bl	b48ac <strcmp>
}
   b5e92:	fab0 f080 	clz	r0, r0
   b5e96:	0940      	lsrs	r0, r0, #5
   b5e98:	bd08      	pop	{r3, pc}

000b5e9a <__tcf_1>:
   b5e9a:	4770      	bx	lr

000b5e9c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5e9c:	b510      	push	{r4, lr}
   b5e9e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5ea0:	f7ff fe66 	bl	b5b70 <_Z16_fetch_usbserialv>
   b5ea4:	4284      	cmp	r4, r0
   b5ea6:	d010      	beq.n	b5eca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5ea8:	f001 fdd8 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b5eac:	4284      	cmp	r4, r0
   b5eae:	d105      	bne.n	b5ebc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5eb0:	f001 fdd4 	bl	b7a5c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5eb8:	f001 bc8b 	b.w	b77d2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5ebc:	b12c      	cbz	r4, b5eca <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5ebe:	6823      	ldr	r3, [r4, #0]
   b5ec0:	4620      	mov	r0, r4
   b5ec2:	685b      	ldr	r3, [r3, #4]
}
   b5ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5ec8:	4718      	bx	r3
   b5eca:	bd10      	pop	{r4, pc}

000b5ecc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ecc:	680b      	ldr	r3, [r1, #0]
   b5ece:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5ed0:	684b      	ldr	r3, [r1, #4]
   b5ed2:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5ed4:	b113      	cbz	r3, b5edc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5ed6:	685a      	ldr	r2, [r3, #4]
   b5ed8:	3201      	adds	r2, #1
   b5eda:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5edc:	4770      	bx	lr

000b5ede <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5ede:	b513      	push	{r0, r1, r4, lr}
   b5ee0:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5ee2:	4608      	mov	r0, r1
   b5ee4:	9101      	str	r1, [sp, #4]
   b5ee6:	f7fe fceb 	bl	b48c0 <strlen>
   b5eea:	9901      	ldr	r1, [sp, #4]
   b5eec:	4602      	mov	r2, r0
   b5eee:	4620      	mov	r0, r4
}
   b5ef0:	b002      	add	sp, #8
   b5ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5ef6:	f7ff bdc9 	b.w	b5a8c <_ZN5spark10JSONWriter5valueEPKcj>

000b5efa <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5efa:	b513      	push	{r0, r1, r4, lr}
   b5efc:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5efe:	4608      	mov	r0, r1
   b5f00:	9101      	str	r1, [sp, #4]
   b5f02:	f7fe fcdd 	bl	b48c0 <strlen>
   b5f06:	6823      	ldr	r3, [r4, #0]
   b5f08:	9901      	ldr	r1, [sp, #4]
   b5f0a:	68db      	ldr	r3, [r3, #12]
   b5f0c:	4602      	mov	r2, r0
   b5f0e:	4620      	mov	r0, r4
}
   b5f10:	b002      	add	sp, #8
   b5f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5f16:	4718      	bx	r3

000b5f18 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5f18:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5f1a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5f1c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5f20:	68db      	ldr	r3, [r3, #12]
   b5f22:	2201      	movs	r2, #1
   b5f24:	f10d 0107 	add.w	r1, sp, #7
   b5f28:	4798      	blx	r3
}
   b5f2a:	b003      	add	sp, #12
   b5f2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5f30:	680a      	ldr	r2, [r1, #0]
   b5f32:	6002      	str	r2, [r0, #0]
   b5f34:	684a      	ldr	r2, [r1, #4]
   b5f36:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b5f38:	2200      	movs	r2, #0
   b5f3a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5f3e:	b510      	push	{r4, lr}
   b5f40:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5f42:	688c      	ldr	r4, [r1, #8]
   b5f44:	6084      	str	r4, [r0, #8]
   b5f46:	68cc      	ldr	r4, [r1, #12]
   b5f48:	60c4      	str	r4, [r0, #12]
   b5f4a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f4c:	608a      	str	r2, [r1, #8]
   b5f4e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5f50:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f52:	610a      	str	r2, [r1, #16]
   b5f54:	bd10      	pop	{r4, pc}
	...

000b5f58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5f5c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5f60:	f04f 0a14 	mov.w	sl, #20
   b5f64:	9300      	str	r3, [sp, #0]
   b5f66:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5f6a:	4b18      	ldr	r3, [pc, #96]	; (b5fcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5f6c:	10a4      	asrs	r4, r4, #2
   b5f6e:	4617      	mov	r7, r2
   b5f70:	435c      	muls	r4, r3
   b5f72:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5f74:	2c00      	cmp	r4, #0
   b5f76:	dd21      	ble.n	b5fbc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5f78:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5f7a:	fb0a f006 	mul.w	r0, sl, r6
   b5f7e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5f82:	463a      	mov	r2, r7
   b5f84:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b5f88:	5828      	ldr	r0, [r5, r0]
   b5f8a:	9101      	str	r1, [sp, #4]
   b5f8c:	455f      	cmp	r7, fp
   b5f8e:	bf28      	it	cs
   b5f90:	465a      	movcs	r2, fp
   b5f92:	f001 fff4 	bl	b7f7e <strncmp>
                if (cmp == 0) {
   b5f96:	2800      	cmp	r0, #0
   b5f98:	9901      	ldr	r1, [sp, #4]
   b5f9a:	f04f 0301 	mov.w	r3, #1
   b5f9e:	d10b      	bne.n	b5fb8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5fa0:	455f      	cmp	r7, fp
   b5fa2:	d103      	bne.n	b5fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5fa4:	9a00      	ldr	r2, [sp, #0]
   b5fa6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5fa8:	4634      	mov	r4, r6
   b5faa:	e7e3      	b.n	b5f74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5fac:	d9fc      	bls.n	b5fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5fae:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5fb0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5fb4:	3e01      	subs	r6, #1
   b5fb6:	e7f7      	b.n	b5fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b5fb8:	dbf9      	blt.n	b5fae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b5fba:	e7f5      	b.n	b5fa8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5fbc:	eba5 0508 	sub.w	r5, r5, r8
}
   b5fc0:	4802      	ldr	r0, [pc, #8]	; (b5fcc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5fc2:	10ad      	asrs	r5, r5, #2
   b5fc4:	4368      	muls	r0, r5
   b5fc6:	b003      	add	sp, #12
   b5fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5fcc:	cccccccd 	.word	0xcccccccd

000b5fd0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5fd2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5fd4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5fd6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b5fd8:	b303      	cbz	r3, b601c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b5fda:	b1f9      	cbz	r1, b601c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5fdc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5fde:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5fe2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5fe4:	a903      	add	r1, sp, #12
   b5fe6:	a801      	add	r0, sp, #4
   b5fe8:	f7ff ff27 	bl	b5e3a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5fec:	4601      	mov	r1, r0
   b5fee:	b1a8      	cbz	r0, b601c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ff0:	f10d 030b 	add.w	r3, sp, #11
   b5ff4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b5ff6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	f7ff ffac 	bl	b5f58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6000:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6004:	b153      	cbz	r3, b601c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6006:	6823      	ldr	r3, [r4, #0]
   b6008:	2414      	movs	r4, #20
   b600a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b600e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6010:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6014:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6016:	bfa8      	it	ge
   b6018:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b601a:	e7e3      	b.n	b5fe4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b601c:	4628      	mov	r0, r5
   b601e:	b004      	add	sp, #16
   b6020:	bd70      	pop	{r4, r5, r6, pc}

000b6022 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6022:	b40e      	push	{r1, r2, r3}
   b6024:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6026:	b08c      	sub	sp, #48	; 0x30
   b6028:	af00      	add	r7, sp, #0
   b602a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b602e:	4604      	mov	r4, r0
   b6030:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6034:	607a      	str	r2, [r7, #4]
   b6036:	462b      	mov	r3, r5
   b6038:	2120      	movs	r1, #32
   b603a:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b603e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6040:	f7ff f9c0 	bl	b53c4 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b6044:	281f      	cmp	r0, #31
   b6046:	687a      	ldr	r2, [r7, #4]
   b6048:	d91a      	bls.n	b6080 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b604a:	f100 0308 	add.w	r3, r0, #8
   b604e:	f023 0307 	bic.w	r3, r3, #7
        }
   b6052:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6054:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6058:	1c41      	adds	r1, r0, #1
   b605a:	462b      	mov	r3, r5
   b605c:	4668      	mov	r0, sp
        va_start(args, fmt);
   b605e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6060:	f7ff f9b0 	bl	b53c4 <vsnprintf>
        if (n > 0) {
   b6064:	1e02      	subs	r2, r0, #0
   b6066:	dd04      	ble.n	b6072 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6068:	6823      	ldr	r3, [r4, #0]
   b606a:	4669      	mov	r1, sp
   b606c:	68db      	ldr	r3, [r3, #12]
   b606e:	4620      	mov	r0, r4
   b6070:	4798      	blx	r3
   b6072:	46b5      	mov	sp, r6
}
   b6074:	3730      	adds	r7, #48	; 0x30
   b6076:	46bd      	mov	sp, r7
   b6078:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b607c:	b003      	add	sp, #12
   b607e:	4770      	bx	lr
    } else if (n > 0) {
   b6080:	2800      	cmp	r0, #0
   b6082:	d0f7      	beq.n	b6074 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6084:	6823      	ldr	r3, [r4, #0]
   b6086:	4602      	mov	r2, r0
   b6088:	68db      	ldr	r3, [r3, #12]
   b608a:	f107 0110 	add.w	r1, r7, #16
   b608e:	4620      	mov	r0, r4
   b6090:	4798      	blx	r3
}
   b6092:	e7ef      	b.n	b6074 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6094 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6094:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6096:	4c09      	ldr	r4, [pc, #36]	; (b60bc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6098:	7823      	ldrb	r3, [r4, #0]
   b609a:	f3bf 8f5b 	dmb	ish
   b609e:	07db      	lsls	r3, r3, #31
   b60a0:	d409      	bmi.n	b60b6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b60a2:	4620      	mov	r0, r4
   b60a4:	f7fe fc62 	bl	b496c <__cxa_guard_acquire>
   b60a8:	b128      	cbz	r0, b60b6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b60aa:	4620      	mov	r0, r4
   b60ac:	f7fe fc63 	bl	b4976 <__cxa_guard_release>
   b60b0:	4803      	ldr	r0, [pc, #12]	; (b60c0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b60b2:	f001 fec9 	bl	b7e48 <atexit>
}
   b60b6:	4803      	ldr	r0, [pc, #12]	; (b60c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b60b8:	bd10      	pop	{r4, pc}
   b60ba:	bf00      	nop
   b60bc:	2003e6c4 	.word	0x2003e6c4
   b60c0:	000b5e33 	.word	0x000b5e33
   b60c4:	2003e5a8 	.word	0x2003e5a8

000b60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b60c8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b60ca:	4c09      	ldr	r4, [pc, #36]	; (b60f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b60cc:	7823      	ldrb	r3, [r4, #0]
   b60ce:	f3bf 8f5b 	dmb	ish
   b60d2:	07db      	lsls	r3, r3, #31
   b60d4:	d409      	bmi.n	b60ea <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60d6:	4620      	mov	r0, r4
   b60d8:	f7fe fc48 	bl	b496c <__cxa_guard_acquire>
   b60dc:	b128      	cbz	r0, b60ea <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b60de:	4620      	mov	r0, r4
   b60e0:	f7fe fc49 	bl	b4976 <__cxa_guard_release>
   b60e4:	4803      	ldr	r0, [pc, #12]	; (b60f4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b60e6:	f001 feaf 	bl	b7e48 <atexit>
    return &factory;
}
   b60ea:	4803      	ldr	r0, [pc, #12]	; (b60f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b60ec:	bd10      	pop	{r4, pc}
   b60ee:	bf00      	nop
   b60f0:	2003e6c8 	.word	0x2003e6c8
   b60f4:	000b5e9b 	.word	0x000b5e9b
   b60f8:	2003e5ac 	.word	0x2003e5ac

000b60fc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b60fc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b60fe:	2500      	movs	r5, #0
   b6100:	4604      	mov	r4, r0
   b6102:	e9c0 5500 	strd	r5, r5, [r0]
   b6106:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b610a:	6085      	str	r5, [r0, #8]
   b610c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b610e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6112:	f7fe ffb7 	bl	b5084 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6116:	f7ff ffbd 	bl	b6094 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b611a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b611c:	f7ff ffd4 	bl	b60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b6120:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6122:	6220      	str	r0, [r4, #32]
}
   b6124:	4620      	mov	r0, r4
   b6126:	bd38      	pop	{r3, r4, r5, pc}

000b6128 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b6128:	b510      	push	{r4, lr}
    static LogManager mgr;
   b612a:	4c0a      	ldr	r4, [pc, #40]	; (b6154 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b612c:	7823      	ldrb	r3, [r4, #0]
   b612e:	f3bf 8f5b 	dmb	ish
   b6132:	07db      	lsls	r3, r3, #31
   b6134:	d40c      	bmi.n	b6150 <_ZN5spark10LogManager8instanceEv+0x28>
   b6136:	4620      	mov	r0, r4
   b6138:	f7fe fc18 	bl	b496c <__cxa_guard_acquire>
   b613c:	b140      	cbz	r0, b6150 <_ZN5spark10LogManager8instanceEv+0x28>
   b613e:	4806      	ldr	r0, [pc, #24]	; (b6158 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6140:	f7ff ffdc 	bl	b60fc <_ZN5spark10LogManagerC1Ev>
   b6144:	4620      	mov	r0, r4
   b6146:	f7fe fc16 	bl	b4976 <__cxa_guard_release>
   b614a:	4804      	ldr	r0, [pc, #16]	; (b615c <_ZN5spark10LogManager8instanceEv+0x34>)
   b614c:	f001 fe7c 	bl	b7e48 <atexit>
    return &mgr;
}
   b6150:	4801      	ldr	r0, [pc, #4]	; (b6158 <_ZN5spark10LogManager8instanceEv+0x30>)
   b6152:	bd10      	pop	{r4, pc}
   b6154:	2003e6c0 	.word	0x2003e6c0
   b6158:	2003e6d0 	.word	0x2003e6d0
   b615c:	000b66a1 	.word	0x000b66a1

000b6160 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6160:	4a02      	ldr	r2, [pc, #8]	; (b616c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b6162:	4903      	ldr	r1, [pc, #12]	; (b6170 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b6164:	4803      	ldr	r0, [pc, #12]	; (b6174 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b6166:	2300      	movs	r3, #0
   b6168:	f7ff b878 	b.w	b525c <log_set_callbacks>
   b616c:	000b6485 	.word	0x000b6485
   b6170:	000b6411 	.word	0x000b6411
   b6174:	000b6391 	.word	0x000b6391

000b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6178:	2300      	movs	r3, #0
   b617a:	461a      	mov	r2, r3
   b617c:	4619      	mov	r1, r3
   b617e:	4618      	mov	r0, r3
   b6180:	f7ff b86c 	b.w	b525c <log_set_callbacks>

000b6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6184:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b6186:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6188:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b618a:	4668      	mov	r0, sp
   b618c:	f7ff fe9e 	bl	b5ecc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6190:	466a      	mov	r2, sp
   b6192:	4629      	mov	r1, r5
   b6194:	4620      	mov	r0, r4
   b6196:	f7ff fb99 	bl	b58cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b619a:	a801      	add	r0, sp, #4
   b619c:	f7ff fa74 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61a0:	4620      	mov	r0, r4
   b61a2:	b003      	add	sp, #12
   b61a4:	bd30      	pop	{r4, r5, pc}

000b61a6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b61a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b61a8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b61aa:	4604      	mov	r4, r0
   b61ac:	4668      	mov	r0, sp
   b61ae:	f7ff fe8d 	bl	b5ecc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b61b2:	466a      	mov	r2, sp
   b61b4:	4629      	mov	r1, r5
   b61b6:	4620      	mov	r0, r4
   b61b8:	f7ff fb64 	bl	b5884 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61bc:	a801      	add	r0, sp, #4
   b61be:	f7ff fa63 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61c2:	4620      	mov	r0, r4
   b61c4:	b003      	add	sp, #12
   b61c6:	bd30      	pop	{r4, r5, pc}

000b61c8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b61ca:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b61cc:	4604      	mov	r4, r0
   b61ce:	4668      	mov	r0, sp
   b61d0:	f7ff fe7c 	bl	b5ecc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b61d4:	466a      	mov	r2, sp
   b61d6:	4629      	mov	r1, r5
   b61d8:	4620      	mov	r0, r4
   b61da:	f7ff fafc 	bl	b57d6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b61de:	a801      	add	r0, sp, #4
   b61e0:	f7ff fa52 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b61e4:	4620      	mov	r0, r4
   b61e6:	b003      	add	sp, #12
   b61e8:	bd30      	pop	{r4, r5, pc}
	...

000b61ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b61ec:	b570      	push	{r4, r5, r6, lr}
   b61ee:	b08a      	sub	sp, #40	; 0x28
   b61f0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b61f2:	4601      	mov	r1, r0
   b61f4:	a804      	add	r0, sp, #16
   b61f6:	f7ff ffc5 	bl	b6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b61fa:	4e14      	ldr	r6, [pc, #80]	; (b624c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b61fc:	a804      	add	r0, sp, #16
   b61fe:	f7ff fb7d 	bl	b58fc <_ZN5spark18JSONObjectIterator4nextEv>
   b6202:	b1e8      	cbz	r0, b6240 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b6204:	a904      	add	r1, sp, #16
   b6206:	4668      	mov	r0, sp
   b6208:	f7ff ffcd 	bl	b61a6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b620c:	9802      	ldr	r0, [sp, #8]
   b620e:	4631      	mov	r1, r6
   b6210:	f7ff fe3c 	bl	b5e8c <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b6214:	4604      	mov	r4, r0
   b6216:	b110      	cbz	r0, b621e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b6218:	1e2c      	subs	r4, r5, #0
   b621a:	bf18      	it	ne
   b621c:	2401      	movne	r4, #1
   b621e:	a801      	add	r0, sp, #4
   b6220:	f7ff fa32 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6224:	2c00      	cmp	r4, #0
   b6226:	d0e9      	beq.n	b61fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b6228:	a904      	add	r1, sp, #16
   b622a:	4668      	mov	r0, sp
   b622c:	f7ff ffcc 	bl	b61c8 <_ZNK5spark18JSONObjectIterator5valueEv>
   b6230:	4668      	mov	r0, sp
   b6232:	f7ff fb06 	bl	b5842 <_ZNK5spark9JSONValue5toIntEv>
   b6236:	6028      	str	r0, [r5, #0]
   b6238:	a801      	add	r0, sp, #4
   b623a:	f7ff fa25 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b623e:	e7dd      	b.n	b61fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b6240:	a805      	add	r0, sp, #20
   b6242:	f7ff fa21 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6246:	b00a      	add	sp, #40	; 0x28
   b6248:	bd70      	pop	{r4, r5, r6, pc}
   b624a:	bf00      	nop
   b624c:	000b8348 	.word	0x000b8348

000b6250 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6250:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6252:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b6254:	4620      	mov	r0, r4
   b6256:	4913      	ldr	r1, [pc, #76]	; (b62a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6258:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b625a:	f7fe fb27 	bl	b48ac <strcmp>
   b625e:	b950      	cbnz	r0, b6276 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6260:	f7ff fc86 	bl	b5b70 <_Z16_fetch_usbserialv>
   b6264:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6268:	f7ff fc72 	bl	b5b50 <_ZN9USBSerial5beginEl>
}
   b626c:	b003      	add	sp, #12
   b626e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b6272:	f7ff bc7d 	b.w	b5b70 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b6276:	490c      	ldr	r1, [pc, #48]	; (b62a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6278:	4620      	mov	r0, r4
   b627a:	f7fe fb17 	bl	b48ac <strcmp>
   b627e:	b978      	cbnz	r0, b62a0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6280:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b6284:	a901      	add	r1, sp, #4
   b6286:	4628      	mov	r0, r5
        int baud = 9600;
   b6288:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b628a:	f7ff ffaf 	bl	b61ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b628e:	f001 fbe5 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b6292:	9901      	ldr	r1, [sp, #4]
   b6294:	f001 fa9a 	bl	b77cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6298:	f001 fbe0 	bl	b7a5c <_Z22__fetch_global_Serial1v>
}
   b629c:	b003      	add	sp, #12
   b629e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b62a0:	2000      	movs	r0, #0
   b62a2:	e7fb      	b.n	b629c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b62a4:	000b834d 	.word	0x000b834d
   b62a8:	000b8354 	.word	0x000b8354

000b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b62ae:	e9d0 5300 	ldrd	r5, r3, [r0]
   b62b2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62b4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b62b6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b62ba:	42ae      	cmp	r6, r5
   b62bc:	d005      	beq.n	b62ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b62be:	f105 0008 	add.w	r0, r5, #8
   b62c2:	f7ff fff3 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b62c6:	3514      	adds	r5, #20
   b62c8:	e7f7      	b.n	b62ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b62ca:	6820      	ldr	r0, [r4, #0]
   b62cc:	f7ff f86a 	bl	b53a4 <free>
}
   b62d0:	4620      	mov	r0, r4
   b62d2:	bd70      	pop	{r4, r5, r6, pc}

000b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b62d6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b62da:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b62dc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b62e0:	42ae      	cmp	r6, r5
   b62e2:	d004      	beq.n	b62ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b62e4:	4628      	mov	r0, r5
   b62e6:	f001 fad1 	bl	b788c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b62ea:	3510      	adds	r5, #16
   b62ec:	e7f8      	b.n	b62e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b62ee:	6820      	ldr	r0, [r4, #0]
   b62f0:	f7ff f858 	bl	b53a4 <free>
}
   b62f4:	4620      	mov	r0, r4
   b62f6:	bd70      	pop	{r4, r5, r6, pc}

000b62f8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b62f8:	b510      	push	{r4, lr}
   b62fa:	4604      	mov	r4, r0
   b62fc:	300c      	adds	r0, #12
   b62fe:	f7ff ffd5 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6302:	4620      	mov	r0, r4
   b6304:	f7ff ffe6 	bl	b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b6308:	4620      	mov	r0, r4
   b630a:	bd10      	pop	{r4, pc}

000b630c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b630c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b630e:	4b04      	ldr	r3, [pc, #16]	; (b6320 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b6310:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b6312:	f840 3b04 	str.w	r3, [r0], #4
   b6316:	f7ff ffef 	bl	b62f8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b631a:	4620      	mov	r0, r4
   b631c:	bd10      	pop	{r4, pc}
   b631e:	bf00      	nop
   b6320:	000b820c 	.word	0x000b820c

000b6324 <_ZN5spark16StreamLogHandlerD0Ev>:
   b6324:	b510      	push	{r4, lr}
   b6326:	4604      	mov	r4, r0
   b6328:	f7ff fff0 	bl	b630c <_ZN5spark16StreamLogHandlerD1Ev>
   b632c:	4620      	mov	r0, r4
   b632e:	2124      	movs	r1, #36	; 0x24
   b6330:	f7fe fb0d 	bl	b494e <_ZdlPvj>
   b6334:	4620      	mov	r0, r4
   b6336:	bd10      	pop	{r4, pc}

000b6338 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b6338:	b510      	push	{r4, lr}
   b633a:	4b03      	ldr	r3, [pc, #12]	; (b6348 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b633c:	6003      	str	r3, [r0, #0]
   b633e:	4604      	mov	r4, r0
   b6340:	f7ff ffe4 	bl	b630c <_ZN5spark16StreamLogHandlerD1Ev>
   b6344:	4620      	mov	r0, r4
   b6346:	bd10      	pop	{r4, pc}
   b6348:	000b83f4 	.word	0x000b83f4

000b634c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b634c:	b510      	push	{r4, lr}
   b634e:	4604      	mov	r4, r0
   b6350:	f7ff fff2 	bl	b6338 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b6354:	4620      	mov	r0, r4
   b6356:	2124      	movs	r1, #36	; 0x24
   b6358:	f7fe faf9 	bl	b494e <_ZdlPvj>
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6360:	2200      	movs	r2, #0
   b6362:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b6366:	b510      	push	{r4, lr}
        capacity_(0) {
   b6368:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b636a:	680c      	ldr	r4, [r1, #0]
   b636c:	6004      	str	r4, [r0, #0]
   b636e:	684c      	ldr	r4, [r1, #4]
   b6370:	6044      	str	r4, [r0, #4]
   b6372:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6374:	600a      	str	r2, [r1, #0]
   b6376:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6378:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b637a:	608a      	str	r2, [r1, #8]
}
   b637c:	bd10      	pop	{r4, pc}

000b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b637e:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6380:	6803      	ldr	r3, [r0, #0]
   b6382:	4604      	mov	r4, r0
   b6384:	6818      	ldr	r0, [r3, #0]
   b6386:	f7fe fe95 	bl	b50b4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b638a:	4620      	mov	r0, r4
   b638c:	bd10      	pop	{r4, pc}
	...

000b6390 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6394:	b087      	sub	sp, #28
   b6396:	4680      	mov	r8, r0
   b6398:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b639a:	4b1c      	ldr	r3, [pc, #112]	; (b640c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b639c:	685b      	ldr	r3, [r3, #4]
   b639e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b63a2:	4689      	mov	r9, r1
   b63a4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b63a6:	b96b      	cbnz	r3, b63c4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b63a8:	f7ff febe 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b63ac:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b63ae:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b63b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b63b4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b63b6:	f7ff fd67 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b63ba:	7b23      	ldrb	r3, [r4, #12]
   b63bc:	b12b      	cbz	r3, b63ca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b63be:	a805      	add	r0, sp, #20
   b63c0:	f7ff ffdd 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b63c4:	b007      	add	sp, #28
   b63c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b63ca:	2301      	movs	r3, #1
   b63cc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b63ce:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b63d2:	fa5f f989 	uxtb.w	r9, r9
   b63d6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b63da:	45aa      	cmp	sl, r5
   b63dc:	d012      	beq.n	b6404 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b63de:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b63e2:	4631      	mov	r1, r6
   b63e4:	1d38      	adds	r0, r7, #4
   b63e6:	f7ff fdf3 	bl	b5fd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b63ea:	4581      	cmp	r9, r0
   b63ec:	d3f5      	bcc.n	b63da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b63ee:	683b      	ldr	r3, [r7, #0]
   b63f0:	9a03      	ldr	r2, [sp, #12]
   b63f2:	9200      	str	r2, [sp, #0]
   b63f4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b63f8:	464a      	mov	r2, r9
   b63fa:	4633      	mov	r3, r6
   b63fc:	4641      	mov	r1, r8
   b63fe:	4638      	mov	r0, r7
   b6400:	47d8      	blx	fp
   b6402:	e7ea      	b.n	b63da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b6404:	2300      	movs	r3, #0
   b6406:	7323      	strb	r3, [r4, #12]
   b6408:	e7d9      	b.n	b63be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b640a:	bf00      	nop
   b640c:	e000ed00 	.word	0xe000ed00

000b6410 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b6410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6414:	469b      	mov	fp, r3
   b6416:	4b1a      	ldr	r3, [pc, #104]	; (b6480 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b6418:	685b      	ldr	r3, [r3, #4]
   b641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b641e:	4680      	mov	r8, r0
   b6420:	4689      	mov	r9, r1
   b6422:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b6424:	b96b      	cbnz	r3, b6442 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b6426:	f7ff fe7f 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
   b642a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b642c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b6430:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6432:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6434:	f7ff fd28 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b6438:	7b23      	ldrb	r3, [r4, #12]
   b643a:	b12b      	cbz	r3, b6448 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b643c:	a801      	add	r0, sp, #4
   b643e:	f7ff ff9e 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6442:	b003      	add	sp, #12
   b6444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b6448:	2301      	movs	r3, #1
   b644a:	7323      	strb	r3, [r4, #12]
   b644c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b6450:	b2f6      	uxtb	r6, r6
   b6452:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6456:	4555      	cmp	r5, sl
   b6458:	d00e      	beq.n	b6478 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b645a:	f855 7b04 	ldr.w	r7, [r5], #4
   b645e:	4659      	mov	r1, fp
   b6460:	1d38      	adds	r0, r7, #4
   b6462:	f7ff fdb5 	bl	b5fd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6466:	4286      	cmp	r6, r0
   b6468:	d3f5      	bcc.n	b6456 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b646a:	683b      	ldr	r3, [r7, #0]
   b646c:	464a      	mov	r2, r9
   b646e:	68db      	ldr	r3, [r3, #12]
   b6470:	4641      	mov	r1, r8
   b6472:	4638      	mov	r0, r7
   b6474:	4798      	blx	r3
   b6476:	e7ee      	b.n	b6456 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6478:	2300      	movs	r3, #0
   b647a:	7323      	strb	r3, [r4, #12]
   b647c:	e7de      	b.n	b643c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b647e:	bf00      	nop
   b6480:	e000ed00 	.word	0xe000ed00

000b6484 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b6484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6488:	4b16      	ldr	r3, [pc, #88]	; (b64e4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b648a:	685b      	ldr	r3, [r3, #4]
   b648c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6490:	4605      	mov	r5, r0
   b6492:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b6494:	bb1b      	cbnz	r3, b64de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b6496:	f7ff fe47 	bl	b6128 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b649a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b649e:	4604      	mov	r4, r0
   b64a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b64a2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b64a4:	f7ff fcf0 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
   b64a8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b64ac:	2446      	movs	r4, #70	; 0x46
   b64ae:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b64b2:	45b0      	cmp	r8, r6
   b64b4:	d109      	bne.n	b64ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b64b6:	a801      	add	r0, sp, #4
   b64b8:	f7ff ff61 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b64bc:	42a5      	cmp	r5, r4
   b64be:	bfb4      	ite	lt
   b64c0:	2000      	movlt	r0, #0
   b64c2:	2001      	movge	r0, #1
}
   b64c4:	b002      	add	sp, #8
   b64c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b64ca:	f856 0b04 	ldr.w	r0, [r6], #4
   b64ce:	4639      	mov	r1, r7
   b64d0:	3004      	adds	r0, #4
   b64d2:	f7ff fd7d 	bl	b5fd0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b64d6:	4284      	cmp	r4, r0
   b64d8:	bfa8      	it	ge
   b64da:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b64dc:	e7e9      	b.n	b64b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b64de:	2000      	movs	r0, #0
   b64e0:	e7f0      	b.n	b64c4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b64e2:	bf00      	nop
   b64e4:	e000ed00 	.word	0xe000ed00

000b64e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64ea:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b64ee:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64f0:	4604      	mov	r4, r0
   b64f2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64f4:	db0d      	blt.n	b6512 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b64f6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b64f8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b64fa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b64fc:	dd04      	ble.n	b6508 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b64fe:	00b9      	lsls	r1, r7, #2
   b6500:	f7fe ff58 	bl	b53b4 <realloc>
            if (!d) {
   b6504:	b918      	cbnz	r0, b650e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b6506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b6508:	f7fe ff4c 	bl	b53a4 <free>
        T* d = nullptr;
   b650c:	2000      	movs	r0, #0
        data_ = d;
   b650e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6510:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6512:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6514:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6516:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b651a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b651c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b6520:	1d08      	adds	r0, r1, #4
   b6522:	f001 fcbd 	bl	b7ea0 <memmove>
    new(p) T(std::move(value));
   b6526:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b652a:	6863      	ldr	r3, [r4, #4]
   b652c:	3301      	adds	r3, #1
   b652e:	6063      	str	r3, [r4, #4]
    return true;
   b6530:	2001      	movs	r0, #1
   b6532:	e7e8      	b.n	b6506 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b6534 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b6534:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b6536:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b653a:	4604      	mov	r4, r0
   b653c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b653e:	9301      	str	r3, [sp, #4]
   b6540:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b6542:	f7ff fca1 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b6546:	e9d4 3200 	ldrd	r3, r2, [r4]
   b654a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b654e:	4293      	cmp	r3, r2
   b6550:	4619      	mov	r1, r3
   b6552:	d00b      	beq.n	b656c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b6554:	6809      	ldr	r1, [r1, #0]
   b6556:	42a9      	cmp	r1, r5
   b6558:	f103 0304 	add.w	r3, r3, #4
   b655c:	d1f7      	bne.n	b654e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b655e:	a801      	add	r0, sp, #4
   b6560:	f7ff ff0d 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6564:	2500      	movs	r5, #0
}
   b6566:	4628      	mov	r0, r5
   b6568:	b003      	add	sp, #12
   b656a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b656c:	4629      	mov	r1, r5
   b656e:	4620      	mov	r0, r4
   b6570:	f7ff ffba 	bl	b64e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b6574:	4605      	mov	r5, r0
   b6576:	2800      	cmp	r0, #0
   b6578:	d0f1      	beq.n	b655e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b657a:	6863      	ldr	r3, [r4, #4]
   b657c:	2b01      	cmp	r3, #1
   b657e:	d101      	bne.n	b6584 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6580:	f7ff fdee 	bl	b6160 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6584:	a801      	add	r0, sp, #4
   b6586:	f7ff fefa 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b658a:	e7ec      	b.n	b6566 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b658c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b658c:	b570      	push	{r4, r5, r6, lr}
   b658e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6590:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6594:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b6596:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b659a:	4282      	cmp	r2, r0
   b659c:	d00f      	beq.n	b65be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b659e:	4601      	mov	r1, r0
            if (*p == value) {
   b65a0:	681d      	ldr	r5, [r3, #0]
   b65a2:	f851 6b04 	ldr.w	r6, [r1], #4
   b65a6:	42ae      	cmp	r6, r5
   b65a8:	d107      	bne.n	b65ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65aa:	1a52      	subs	r2, r2, r1
   b65ac:	f001 fc78 	bl	b7ea0 <memmove>
    --size_;
   b65b0:	6863      	ldr	r3, [r4, #4]
   b65b2:	3b01      	subs	r3, #1
   b65b4:	6063      	str	r3, [r4, #4]
    return true;
   b65b6:	2001      	movs	r0, #1
}
   b65b8:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b65ba:	4608      	mov	r0, r1
   b65bc:	e7ed      	b.n	b659a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b65be:	2000      	movs	r0, #0
   b65c0:	e7fa      	b.n	b65b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b65c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b65c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b65c4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b65c8:	4604      	mov	r4, r0
   b65ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b65cc:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65ce:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b65d0:	f7ff fc5a 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b65d4:	a901      	add	r1, sp, #4
   b65d6:	4620      	mov	r0, r4
   b65d8:	f7ff ffd8 	bl	b658c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b65dc:	b118      	cbz	r0, b65e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b65de:	6863      	ldr	r3, [r4, #4]
   b65e0:	b90b      	cbnz	r3, b65e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b65e2:	f7ff fdc9 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b65e6:	a803      	add	r0, sp, #12
   b65e8:	f7ff fec9 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b65ec:	b004      	add	sp, #16
   b65ee:	bd10      	pop	{r4, pc}

000b65f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b65f0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b65f2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b65f6:	2318      	movs	r3, #24
   b65f8:	4604      	mov	r4, r0
   b65fa:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b65fe:	42ae      	cmp	r6, r5
   b6600:	d015      	beq.n	b662e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b6602:	f105 0110 	add.w	r1, r5, #16
   b6606:	4620      	mov	r0, r4
   b6608:	f7ff ffc0 	bl	b658c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b660c:	6863      	ldr	r3, [r4, #4]
   b660e:	b90b      	cbnz	r3, b6614 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b6610:	f7ff fdb2 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b6614:	69e0      	ldr	r0, [r4, #28]
   b6616:	6929      	ldr	r1, [r5, #16]
   b6618:	6803      	ldr	r3, [r0, #0]
   b661a:	68db      	ldr	r3, [r3, #12]
   b661c:	4798      	blx	r3
        if (h.stream) {
   b661e:	6969      	ldr	r1, [r5, #20]
   b6620:	b119      	cbz	r1, b662a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b6622:	6a20      	ldr	r0, [r4, #32]
   b6624:	6803      	ldr	r3, [r0, #0]
   b6626:	68db      	ldr	r3, [r3, #12]
   b6628:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b662a:	3518      	adds	r5, #24
   b662c:	e7e7      	b.n	b65fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b662e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6632:	2618      	movs	r6, #24
   b6634:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6638:	42ae      	cmp	r6, r5
   b663a:	d004      	beq.n	b6646 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b663c:	4628      	mov	r0, r5
   b663e:	f001 f925 	bl	b788c <_ZN6StringD1Ev>
   b6642:	3518      	adds	r5, #24
   b6644:	e7f8      	b.n	b6638 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b6646:	2300      	movs	r3, #0
   b6648:	6163      	str	r3, [r4, #20]
}
   b664a:	bd70      	pop	{r4, r5, r6, pc}

000b664c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b664c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b664e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b6650:	f7ff fd92 	bl	b6178 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b6654:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6658:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b665a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b665c:	f7ff fc14 	bl	b5e88 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6660:	4620      	mov	r0, r4
   b6662:	f7ff ffc5 	bl	b65f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b6666:	a801      	add	r0, sp, #4
   b6668:	f7ff fe89 	bl	b637e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b666c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b666e:	b108      	cbz	r0, b6674 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6670:	f7fe fd10 	bl	b5094 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b6674:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6678:	2618      	movs	r6, #24
   b667a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b667e:	42ae      	cmp	r6, r5
   b6680:	d004      	beq.n	b668c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b6682:	4628      	mov	r0, r5
   b6684:	f001 f902 	bl	b788c <_ZN6StringD1Ev>
   b6688:	3518      	adds	r5, #24
   b668a:	e7f8      	b.n	b667e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b668c:	6920      	ldr	r0, [r4, #16]
   b668e:	f7fe fe89 	bl	b53a4 <free>
   b6692:	6820      	ldr	r0, [r4, #0]
   b6694:	f7fe fe86 	bl	b53a4 <free>
}
   b6698:	4620      	mov	r0, r4
   b669a:	b002      	add	sp, #8
   b669c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b66a0 <__tcf_2>:
    static LogManager mgr;
   b66a0:	4801      	ldr	r0, [pc, #4]	; (b66a8 <__tcf_2+0x8>)
   b66a2:	f7ff bfd3 	b.w	b664c <_ZN5spark10LogManagerD1Ev>
   b66a6:	bf00      	nop
   b66a8:	2003e6d0 	.word	0x2003e6d0

000b66ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b66ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b66ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b66b0:	4604      	mov	r4, r0
   b66b2:	460d      	mov	r5, r1
   b66b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b66b6:	d915      	bls.n	b66e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b66b8:	4290      	cmp	r0, r2
   b66ba:	d214      	bcs.n	b66e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b66bc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b66c0:	1a75      	subs	r5, r6, r1
   b66c2:	f1a1 0714 	sub.w	r7, r1, #20
   b66c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b66c8:	42b7      	cmp	r7, r6
   b66ca:	d01a      	beq.n	b6702 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b66cc:	b11c      	cbz	r4, b66d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b66ce:	4631      	mov	r1, r6
   b66d0:	4620      	mov	r0, r4
   b66d2:	f7ff fc2d 	bl	b5f30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b66d6:	f106 0008 	add.w	r0, r6, #8
   b66da:	f7ff fde7 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b66de:	3e14      	subs	r6, #20
   b66e0:	3c14      	subs	r4, #20
   b66e2:	e7f1      	b.n	b66c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b66e4:	d00d      	beq.n	b6702 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b66e6:	42b5      	cmp	r5, r6
   b66e8:	d00b      	beq.n	b6702 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b66ea:	b11c      	cbz	r4, b66f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b66ec:	4629      	mov	r1, r5
   b66ee:	4620      	mov	r0, r4
   b66f0:	f7ff fc1e 	bl	b5f30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b66f4:	f105 0008 	add.w	r0, r5, #8
   b66f8:	f7ff fdd8 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b66fc:	3514      	adds	r5, #20
   b66fe:	3414      	adds	r4, #20
   b6700:	e7f1      	b.n	b66e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b6702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b6704:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6708:	4604      	mov	r4, r0
   b670a:	460d      	mov	r5, r1
   b670c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b670e:	d914      	bls.n	b673a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b6710:	4290      	cmp	r0, r2
   b6712:	d213      	bcs.n	b673c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b6714:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b6718:	1a75      	subs	r5, r6, r1
   b671a:	f1a1 0710 	sub.w	r7, r1, #16
   b671e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6720:	42b7      	cmp	r7, r6
   b6722:	d018      	beq.n	b6756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b6724:	b11c      	cbz	r4, b672e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b6726:	4631      	mov	r1, r6
   b6728:	4620      	mov	r0, r4
   b672a:	f001 f917 	bl	b795c <_ZN6StringC1EOS_>
                end->~T();
   b672e:	4630      	mov	r0, r6
   b6730:	f001 f8ac 	bl	b788c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6734:	3e10      	subs	r6, #16
   b6736:	3c10      	subs	r4, #16
   b6738:	e7f2      	b.n	b6720 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b673a:	d00c      	beq.n	b6756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b673c:	42b5      	cmp	r5, r6
   b673e:	d00a      	beq.n	b6756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b6740:	b11c      	cbz	r4, b674a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b6742:	4629      	mov	r1, r5
   b6744:	4620      	mov	r0, r4
   b6746:	f001 f909 	bl	b795c <_ZN6StringC1EOS_>
                p->~T();
   b674a:	4628      	mov	r0, r5
   b674c:	f001 f89e 	bl	b788c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6750:	3510      	adds	r5, #16
   b6752:	3410      	adds	r4, #16
   b6754:	e7f2      	b.n	b673c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b6756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6758 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6758:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b675a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b675c:	4605      	mov	r5, r0
        if (n > 0) {
   b675e:	dd11      	ble.n	b6784 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6760:	0130      	lsls	r0, r6, #4
   b6762:	f7fe fe17 	bl	b5394 <malloc>
            if (!d) {
   b6766:	4604      	mov	r4, r0
   b6768:	b158      	cbz	r0, b6782 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b676a:	e9d5 1200 	ldrd	r1, r2, [r5]
   b676e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b6772:	f7ff ffc7 	bl	b6704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b6776:	6828      	ldr	r0, [r5, #0]
   b6778:	f7fe fe14 	bl	b53a4 <free>
        data_ = d;
   b677c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b677e:	60ae      	str	r6, [r5, #8]
        return true;
   b6780:	2001      	movs	r0, #1
    }
   b6782:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6784:	2400      	movs	r4, #0
   b6786:	e7f6      	b.n	b6776 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b678c:	4690      	mov	r8, r2
   b678e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6790:	2300      	movs	r3, #0
   b6792:	9103      	str	r1, [sp, #12]
    return size_;
   b6794:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6798:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b679a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b679c:	4299      	cmp	r1, r3
        capacity_(0) {
   b679e:	e9c0 3300 	strd	r3, r3, [r0]
   b67a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b67a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b67aa:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b67ae:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b67b0:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b67b2:	dc23      	bgt.n	b67fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b67b4:	e9d8 5700 	ldrd	r5, r7, [r8]
   b67b8:	2314      	movs	r3, #20
   b67ba:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b67be:	42af      	cmp	r7, r5
   b67c0:	d03b      	beq.n	b683a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b67c2:	4629      	mov	r1, r5
   b67c4:	a80b      	add	r0, sp, #44	; 0x2c
   b67c6:	f001 f8c9 	bl	b795c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b67ca:	a90b      	add	r1, sp, #44	; 0x2c
   b67cc:	a80f      	add	r0, sp, #60	; 0x3c
   b67ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b67d0:	f001 f8c4 	bl	b795c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b67d4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b67d8:	4299      	cmp	r1, r3
   b67da:	da1b      	bge.n	b6814 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b67dc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b67de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b67e0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b67e4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b67e8:	4631      	mov	r1, r6
   b67ea:	f106 0010 	add.w	r0, r6, #16
   b67ee:	f7ff ff89 	bl	b6704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b67f2:	b9ee      	cbnz	r6, b6830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b67f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b67f6:	3301      	adds	r3, #1
   b67f8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b67fa:	e011      	b.n	b6820 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b67fc:	a808      	add	r0, sp, #32
   b67fe:	f7ff ffab 	bl	b6758 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b6802:	2800      	cmp	r0, #0
   b6804:	d1d6      	bne.n	b67b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b6806:	a808      	add	r0, sp, #32
   b6808:	f7ff fd64 	bl	b62d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b680c:	4620      	mov	r0, r4
   b680e:	b015      	add	sp, #84	; 0x54
   b6810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6814:	3101      	adds	r1, #1
   b6816:	a808      	add	r0, sp, #32
   b6818:	f7ff ff9e 	bl	b6758 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b681c:	2800      	cmp	r0, #0
   b681e:	d1dd      	bne.n	b67dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b6820:	a80f      	add	r0, sp, #60	; 0x3c
   b6822:	f001 f833 	bl	b788c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b6826:	a80b      	add	r0, sp, #44	; 0x2c
   b6828:	f001 f830 	bl	b788c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b682c:	3514      	adds	r5, #20
   b682e:	e7c6      	b.n	b67be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b6830:	a90f      	add	r1, sp, #60	; 0x3c
   b6832:	4630      	mov	r0, r6
   b6834:	f001 f892 	bl	b795c <_ZN6StringC1EOS_>
   b6838:	e7dc      	b.n	b67f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b683a:	2600      	movs	r6, #0
   b683c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b6840:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b6842:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b6846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b684a:	429e      	cmp	r6, r3
   b684c:	da7c      	bge.n	b6948 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b684e:	0133      	lsls	r3, r6, #4
   b6850:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b6852:	9306      	str	r3, [sp, #24]
        if (!category) {
   b6854:	b90b      	cbnz	r3, b685a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b6856:	3601      	adds	r6, #1
   b6858:	e7f5      	b.n	b6846 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b685a:	2300      	movs	r3, #0
   b685c:	9307      	str	r3, [sp, #28]
   b685e:	fb09 f306 	mul.w	r3, r9, r6
   b6862:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b6864:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b6866:	a907      	add	r1, sp, #28
   b6868:	a806      	add	r0, sp, #24
   b686a:	f7ff fae6 	bl	b5e3a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b686e:	4682      	mov	sl, r0
   b6870:	2800      	cmp	r0, #0
   b6872:	d0f0      	beq.n	b6856 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b6874:	f04f 0300 	mov.w	r3, #0
   b6878:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b687c:	4601      	mov	r1, r0
   b687e:	9a07      	ldr	r2, [sp, #28]
   b6880:	f10d 0317 	add.w	r3, sp, #23
   b6884:	4628      	mov	r0, r5
   b6886:	f7ff fb67 	bl	b5f58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b688a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b688e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6890:	2f00      	cmp	r7, #0
   b6892:	d14a      	bne.n	b692a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b6894:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6898:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b689c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b68a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b68a4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b68a8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b68ac:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68ae:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b68b2:	4293      	cmp	r3, r2
   b68b4:	db17      	blt.n	b68e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b68b6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b68ba:	f1ba 0f00 	cmp.w	sl, #0
   b68be:	dd30      	ble.n	b6922 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b68c0:	fb09 f00a 	mul.w	r0, r9, sl
   b68c4:	f7fe fd66 	bl	b5394 <malloc>
            if (!d) {
   b68c8:	4683      	mov	fp, r0
   b68ca:	b360      	cbz	r0, b6926 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b68cc:	e9d5 1200 	ldrd	r1, r2, [r5]
   b68d0:	fb09 1202 	mla	r2, r9, r2, r1
   b68d4:	f7ff feea 	bl	b66ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b68d8:	6828      	ldr	r0, [r5, #0]
   b68da:	f7fe fd63 	bl	b53a4 <free>
        data_ = d;
   b68de:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b68e2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b68e6:	682b      	ldr	r3, [r5, #0]
   b68e8:	9a01      	ldr	r2, [sp, #4]
   b68ea:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b68ee:	686a      	ldr	r2, [r5, #4]
   b68f0:	4651      	mov	r1, sl
   b68f2:	fb09 3202 	mla	r2, r9, r2, r3
   b68f6:	f10a 0014 	add.w	r0, sl, #20
   b68fa:	f7ff fed7 	bl	b66ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b68fe:	f1ba 0f00 	cmp.w	sl, #0
   b6902:	d003      	beq.n	b690c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b6904:	a90f      	add	r1, sp, #60	; 0x3c
   b6906:	4650      	mov	r0, sl
   b6908:	f7ff fb12 	bl	b5f30 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b690c:	686b      	ldr	r3, [r5, #4]
   b690e:	3301      	adds	r3, #1
   b6910:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b6912:	a811      	add	r0, sp, #68	; 0x44
   b6914:	f7ff fcca 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6918:	b13f      	cbz	r7, b692a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b691a:	a80b      	add	r0, sp, #44	; 0x2c
   b691c:	f7ff fcc6 	bl	b62ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b6920:	e771      	b.n	b6806 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b6922:	46bb      	mov	fp, r7
   b6924:	e7d8      	b.n	b68d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6926:	2701      	movs	r7, #1
   b6928:	e7f3      	b.n	b6912 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b692a:	9b01      	ldr	r3, [sp, #4]
   b692c:	682d      	ldr	r5, [r5, #0]
   b692e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b6932:	9b06      	ldr	r3, [sp, #24]
   b6934:	781b      	ldrb	r3, [r3, #0]
   b6936:	b92b      	cbnz	r3, b6944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b6938:	f8d8 3000 	ldr.w	r3, [r8]
   b693c:	9a02      	ldr	r2, [sp, #8]
   b693e:	4413      	add	r3, r2
   b6940:	7c1b      	ldrb	r3, [r3, #16]
   b6942:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b6944:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b6946:	e78e      	b.n	b6866 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6948:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b694a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b694c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b694e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6950:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6952:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b6954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b6956:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6958:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b695a:	60a2      	str	r2, [r4, #8]
   b695c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b695e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6960:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6962:	60e2      	str	r2, [r4, #12]
   b6964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6966:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6968:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b696a:	6122      	str	r2, [r4, #16]
   b696c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b696e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6970:	9b03      	ldr	r3, [sp, #12]
   b6972:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6974:	6162      	str	r2, [r4, #20]
   b6976:	7623      	strb	r3, [r4, #24]
   b6978:	e7cf      	b.n	b691a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b697c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b697c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b697e:	4604      	mov	r4, r0
   b6980:	b087      	sub	sp, #28
   b6982:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6984:	4626      	mov	r6, r4
        stream_(&stream) {
   b6986:	4619      	mov	r1, r3
   b6988:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b698a:	4617      	mov	r7, r2
        stream_(&stream) {
   b698c:	f7fe fa1d 	bl	b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6990:	4b0b      	ldr	r3, [pc, #44]	; (b69c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6992:	f846 3b04 	str.w	r3, [r6], #4
   b6996:	4669      	mov	r1, sp
   b6998:	a803      	add	r0, sp, #12
   b699a:	f7fe fa16 	bl	b4dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b699e:	aa03      	add	r2, sp, #12
   b69a0:	4639      	mov	r1, r7
   b69a2:	4630      	mov	r0, r6
   b69a4:	f7ff fef0 	bl	b6788 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b69a8:	a803      	add	r0, sp, #12
   b69aa:	f7fe f9cd 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b69ae:	4668      	mov	r0, sp
   b69b0:	f7fe f9ca 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b69b4:	4b03      	ldr	r3, [pc, #12]	; (b69c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b69b6:	6023      	str	r3, [r4, #0]
}
   b69b8:	4620      	mov	r0, r4
        stream_(&stream) {
   b69ba:	6225      	str	r5, [r4, #32]
}
   b69bc:	b007      	add	sp, #28
   b69be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b69c0:	000b820c 	.word	0x000b820c
   b69c4:	000b83dc 	.word	0x000b83dc

000b69c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b69c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69ca:	460f      	mov	r7, r1
   b69cc:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69ce:	491d      	ldr	r1, [pc, #116]	; (b6a44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b69d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69d2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b69d4:	4616      	mov	r6, r2
   b69d6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b69d8:	f7fd ff68 	bl	b48ac <strcmp>
   b69dc:	b9c0      	cbnz	r0, b6a10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b69de:	b1a4      	cbz	r4, b6a0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b69e0:	4629      	mov	r1, r5
   b69e2:	a801      	add	r0, sp, #4
   b69e4:	f7ff fcbc 	bl	b6360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b69e8:	4917      	ldr	r1, [pc, #92]	; (b6a48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b69ea:	2024      	movs	r0, #36	; 0x24
   b69ec:	f001 f912 	bl	b7c14 <_ZnwjRKSt9nothrow_t>
   b69f0:	4605      	mov	r5, r0
   b69f2:	b130      	cbz	r0, b6a02 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b69f4:	ab01      	add	r3, sp, #4
   b69f6:	4632      	mov	r2, r6
   b69f8:	4621      	mov	r1, r4
   b69fa:	f7ff ffbf 	bl	b697c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b69fe:	4b13      	ldr	r3, [pc, #76]	; (b6a4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6a00:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6a02:	a801      	add	r0, sp, #4
   b6a04:	f7fe f9a0 	bl	b4d48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a08:	462c      	mov	r4, r5
}
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	b005      	add	sp, #20
   b6a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6a10:	490f      	ldr	r1, [pc, #60]	; (b6a50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6a12:	4638      	mov	r0, r7
   b6a14:	f7fd ff4a 	bl	b48ac <strcmp>
   b6a18:	b990      	cbnz	r0, b6a40 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6a1a:	2c00      	cmp	r4, #0
   b6a1c:	d0f5      	beq.n	b6a0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6a1e:	4629      	mov	r1, r5
   b6a20:	a801      	add	r0, sp, #4
   b6a22:	f7ff fc9d 	bl	b6360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6a26:	4908      	ldr	r1, [pc, #32]	; (b6a48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6a28:	2024      	movs	r0, #36	; 0x24
   b6a2a:	f001 f8f3 	bl	b7c14 <_ZnwjRKSt9nothrow_t>
   b6a2e:	4605      	mov	r5, r0
   b6a30:	2800      	cmp	r0, #0
   b6a32:	d0e6      	beq.n	b6a02 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6a34:	ab01      	add	r3, sp, #4
   b6a36:	4632      	mov	r2, r6
   b6a38:	4621      	mov	r1, r4
   b6a3a:	f7ff ff9f 	bl	b697c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a3e:	e7e0      	b.n	b6a02 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6a40:	2400      	movs	r4, #0
   b6a42:	e7e2      	b.n	b6a0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6a44:	000b835c 	.word	0x000b835c
   b6a48:	000b857c 	.word	0x000b857c
   b6a4c:	000b83f4 	.word	0x000b83f4
   b6a50:	000b8360 	.word	0x000b8360

000b6a54 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6a54:	4b01      	ldr	r3, [pc, #4]	; (b6a5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6a56:	4a02      	ldr	r2, [pc, #8]	; (b6a60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6a58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6a5a:	4770      	bx	lr
   b6a5c:	2003e6cc 	.word	0x2003e6cc
   b6a60:	000b8371 	.word	0x000b8371

000b6a64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6a68:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6a6a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6a6e:	4604      	mov	r4, r0
   b6a70:	460e      	mov	r6, r1
   b6a72:	4617      	mov	r7, r2
   b6a74:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6a76:	f7ff f87b 	bl	b5b70 <_Z16_fetch_usbserialv>
   b6a7a:	4581      	cmp	r9, r0
   b6a7c:	d04c      	beq.n	b6b18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6a7e:	792b      	ldrb	r3, [r5, #4]
   b6a80:	0719      	lsls	r1, r3, #28
   b6a82:	d504      	bpl.n	b6a8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6a84:	696a      	ldr	r2, [r5, #20]
   b6a86:	4954      	ldr	r1, [pc, #336]	; (b6bd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6a88:	4620      	mov	r0, r4
   b6a8a:	f7ff faca 	bl	b6022 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6a8e:	f1b8 0f00 	cmp.w	r8, #0
   b6a92:	d00d      	beq.n	b6ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6a94:	215b      	movs	r1, #91	; 0x5b
   b6a96:	4620      	mov	r0, r4
   b6a98:	f7ff fa3e 	bl	b5f18 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6a9c:	4641      	mov	r1, r8
   b6a9e:	4620      	mov	r0, r4
   b6aa0:	f7ff fa2b 	bl	b5efa <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6aa4:	6823      	ldr	r3, [r4, #0]
   b6aa6:	494d      	ldr	r1, [pc, #308]	; (b6bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6aa8:	68db      	ldr	r3, [r3, #12]
   b6aaa:	2202      	movs	r2, #2
   b6aac:	4620      	mov	r0, r4
   b6aae:	4798      	blx	r3
    if (attr.has_file) {
   b6ab0:	792b      	ldrb	r3, [r5, #4]
   b6ab2:	07da      	lsls	r2, r3, #31
   b6ab4:	d523      	bpl.n	b6afe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6ab6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6aba:	212f      	movs	r1, #47	; 0x2f
   b6abc:	4640      	mov	r0, r8
   b6abe:	f001 fa72 	bl	b7fa6 <strrchr>
    if (s1) {
   b6ac2:	b108      	cbz	r0, b6ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6ac4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6ac8:	4641      	mov	r1, r8
   b6aca:	4620      	mov	r0, r4
   b6acc:	f7ff fa15 	bl	b5efa <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6ad0:	792b      	ldrb	r3, [r5, #4]
   b6ad2:	079b      	lsls	r3, r3, #30
   b6ad4:	d508      	bpl.n	b6ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6ad6:	213a      	movs	r1, #58	; 0x3a
   b6ad8:	4620      	mov	r0, r4
   b6ada:	f7ff fa1d 	bl	b5f18 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6ade:	68ea      	ldr	r2, [r5, #12]
   b6ae0:	493f      	ldr	r1, [pc, #252]	; (b6be0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6ae2:	4620      	mov	r0, r4
   b6ae4:	f7ff fa9d 	bl	b6022 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6ae8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6aea:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6aec:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6af0:	68db      	ldr	r3, [r3, #12]
   b6af2:	bf14      	ite	ne
   b6af4:	493b      	ldrne	r1, [pc, #236]	; (b6be4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6af6:	493c      	ldreq	r1, [pc, #240]	; (b6be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6af8:	2202      	movs	r2, #2
            write(": ", 2);
   b6afa:	4620      	mov	r0, r4
   b6afc:	4798      	blx	r3
    if (attr.has_function) {
   b6afe:	792b      	ldrb	r3, [r5, #4]
   b6b00:	0758      	lsls	r0, r3, #29
   b6b02:	d51d      	bpl.n	b6b40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6b04:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6b06:	460b      	mov	r3, r1
   b6b08:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6b0a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6b0e:	b160      	cbz	r0, b6b2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6b10:	2820      	cmp	r0, #32
   b6b12:	d108      	bne.n	b6b26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6b14:	4619      	mov	r1, r3
   b6b16:	e7f7      	b.n	b6b08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6b18:	4834      	ldr	r0, [pc, #208]	; (b6bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6b1a:	f7fe fcb2 	bl	b5482 <_ZN5spark12NetworkClass9listeningEv>
   b6b1e:	2800      	cmp	r0, #0
   b6b20:	d0ad      	beq.n	b6a7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6b26:	2828      	cmp	r0, #40	; 0x28
   b6b28:	d1ee      	bne.n	b6b08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6b2a:	6823      	ldr	r3, [r4, #0]
   b6b2c:	1a52      	subs	r2, r2, r1
   b6b2e:	68db      	ldr	r3, [r3, #12]
   b6b30:	4620      	mov	r0, r4
   b6b32:	4798      	blx	r3
        write("(): ", 4);
   b6b34:	6823      	ldr	r3, [r4, #0]
   b6b36:	492e      	ldr	r1, [pc, #184]	; (b6bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6b38:	68db      	ldr	r3, [r3, #12]
   b6b3a:	2204      	movs	r2, #4
   b6b3c:	4620      	mov	r0, r4
   b6b3e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6b40:	2100      	movs	r1, #0
   b6b42:	4638      	mov	r0, r7
   b6b44:	f7fe fb82 	bl	b524c <log_level_name>
   b6b48:	4601      	mov	r1, r0
    write(s);
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7ff f9d5 	bl	b5efa <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6b50:	6823      	ldr	r3, [r4, #0]
   b6b52:	4925      	ldr	r1, [pc, #148]	; (b6be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6b54:	68db      	ldr	r3, [r3, #12]
   b6b56:	2202      	movs	r2, #2
   b6b58:	4620      	mov	r0, r4
   b6b5a:	4798      	blx	r3
    if (msg) {
   b6b5c:	b11e      	cbz	r6, b6b66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6b5e:	4631      	mov	r1, r6
   b6b60:	4620      	mov	r0, r4
   b6b62:	f7ff f9ca 	bl	b5efa <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6b66:	792b      	ldrb	r3, [r5, #4]
   b6b68:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6b6c:	d02c      	beq.n	b6bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6b6e:	6823      	ldr	r3, [r4, #0]
   b6b70:	4920      	ldr	r1, [pc, #128]	; (b6bf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6b72:	68db      	ldr	r3, [r3, #12]
   b6b74:	2202      	movs	r2, #2
   b6b76:	4620      	mov	r0, r4
   b6b78:	4798      	blx	r3
        if (attr.has_code) {
   b6b7a:	792b      	ldrb	r3, [r5, #4]
   b6b7c:	06d9      	lsls	r1, r3, #27
   b6b7e:	d50a      	bpl.n	b6b96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6b80:	6823      	ldr	r3, [r4, #0]
   b6b82:	491d      	ldr	r1, [pc, #116]	; (b6bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6b84:	68db      	ldr	r3, [r3, #12]
   b6b86:	2207      	movs	r2, #7
   b6b88:	4620      	mov	r0, r4
   b6b8a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6b8c:	69aa      	ldr	r2, [r5, #24]
   b6b8e:	491b      	ldr	r1, [pc, #108]	; (b6bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6b90:	4620      	mov	r0, r4
   b6b92:	f7ff fa46 	bl	b6022 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6b96:	792b      	ldrb	r3, [r5, #4]
   b6b98:	069a      	lsls	r2, r3, #26
   b6b9a:	d511      	bpl.n	b6bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6b9c:	06db      	lsls	r3, r3, #27
   b6b9e:	d505      	bpl.n	b6bac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6ba0:	6823      	ldr	r3, [r4, #0]
   b6ba2:	4910      	ldr	r1, [pc, #64]	; (b6be4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6ba4:	68db      	ldr	r3, [r3, #12]
   b6ba6:	2202      	movs	r2, #2
   b6ba8:	4620      	mov	r0, r4
   b6baa:	4798      	blx	r3
            write("details = ", 10);
   b6bac:	6823      	ldr	r3, [r4, #0]
   b6bae:	4914      	ldr	r1, [pc, #80]	; (b6c00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6bb0:	68db      	ldr	r3, [r3, #12]
   b6bb2:	4620      	mov	r0, r4
   b6bb4:	220a      	movs	r2, #10
   b6bb6:	4798      	blx	r3
            write(attr.details);
   b6bb8:	69e9      	ldr	r1, [r5, #28]
   b6bba:	4620      	mov	r0, r4
   b6bbc:	f7ff f99d 	bl	b5efa <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6bc0:	215d      	movs	r1, #93	; 0x5d
   b6bc2:	4620      	mov	r0, r4
   b6bc4:	f7ff f9a8 	bl	b5f18 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6bc8:	6823      	ldr	r3, [r4, #0]
   b6bca:	490e      	ldr	r1, [pc, #56]	; (b6c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6bcc:	68db      	ldr	r3, [r3, #12]
   b6bce:	4620      	mov	r0, r4
   b6bd0:	2202      	movs	r2, #2
}
   b6bd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6bd6:	4718      	bx	r3
   b6bd8:	000b8375 	.word	0x000b8375
   b6bdc:	000b837c 	.word	0x000b837c
   b6be0:	000b82dc 	.word	0x000b82dc
   b6be4:	000b837f 	.word	0x000b837f
   b6be8:	000b8384 	.word	0x000b8384
   b6bec:	2003e67c 	.word	0x2003e67c
   b6bf0:	000b8382 	.word	0x000b8382
   b6bf4:	000b8387 	.word	0x000b8387
   b6bf8:	000b838a 	.word	0x000b838a
   b6bfc:	000b8392 	.word	0x000b8392
   b6c00:	000b8395 	.word	0x000b8395
   b6c04:	000b83a0 	.word	0x000b83a0

000b6c08 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c0c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6c0e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6c10:	460d      	mov	r5, r1
   b6c12:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6c14:	f7fe ffac 	bl	b5b70 <_Z16_fetch_usbserialv>
   b6c18:	4287      	cmp	r7, r0
   b6c1a:	d007      	beq.n	b6c2c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6c1c:	6a20      	ldr	r0, [r4, #32]
   b6c1e:	6803      	ldr	r3, [r0, #0]
   b6c20:	4632      	mov	r2, r6
   b6c22:	4629      	mov	r1, r5
   b6c24:	68db      	ldr	r3, [r3, #12]
}
   b6c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6c2a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6c2c:	4803      	ldr	r0, [pc, #12]	; (b6c3c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6c2e:	f7fe fc28 	bl	b5482 <_ZN5spark12NetworkClass9listeningEv>
   b6c32:	2800      	cmp	r0, #0
   b6c34:	d0f2      	beq.n	b6c1c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6c3a:	bf00      	nop
   b6c3c:	2003e67c 	.word	0x2003e67c

000b6c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c44:	b085      	sub	sp, #20
    return stream_;
   b6c46:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6c4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6c4c:	4605      	mov	r5, r0
   b6c4e:	460f      	mov	r7, r1
   b6c50:	4690      	mov	r8, r2
   b6c52:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6c54:	f7fe ff8c 	bl	b5b70 <_Z16_fetch_usbserialv>
   b6c58:	4581      	cmp	r9, r0
   b6c5a:	d105      	bne.n	b6c68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6c5c:	4849      	ldr	r0, [pc, #292]	; (b6d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6c5e:	f7fe fc10 	bl	b5482 <_ZN5spark12NetworkClass9listeningEv>
   b6c62:	2800      	cmp	r0, #0
   b6c64:	f040 808a 	bne.w	b6d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6c68:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6c6a:	4a47      	ldr	r2, [pc, #284]	; (b6d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6c6c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6c6e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6c72:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6c74:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6c76:	f88d 9008 	strb.w	r9, [sp, #8]
   b6c7a:	f7fe fe68 	bl	b594e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6c7e:	4649      	mov	r1, r9
   b6c80:	4640      	mov	r0, r8
   b6c82:	f7fe fae3 	bl	b524c <log_level_name>
    json.name("l", 1).value(s);
   b6c86:	4941      	ldr	r1, [pc, #260]	; (b6d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6c88:	4680      	mov	r8, r0
   b6c8a:	2201      	movs	r2, #1
   b6c8c:	a801      	add	r0, sp, #4
   b6c8e:	f7fe feed 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6c92:	4641      	mov	r1, r8
   b6c94:	f7ff f923 	bl	b5ede <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6c98:	b13f      	cbz	r7, b6caa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6c9a:	493d      	ldr	r1, [pc, #244]	; (b6d90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6c9c:	2201      	movs	r2, #1
   b6c9e:	a801      	add	r0, sp, #4
   b6ca0:	f7fe fee4 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6ca4:	4639      	mov	r1, r7
   b6ca6:	f7ff f91a 	bl	b5ede <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6caa:	b13e      	cbz	r6, b6cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6cac:	4939      	ldr	r1, [pc, #228]	; (b6d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6cae:	2201      	movs	r2, #1
   b6cb0:	a801      	add	r0, sp, #4
   b6cb2:	f7fe fedb 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6cb6:	4631      	mov	r1, r6
   b6cb8:	f7ff f911 	bl	b5ede <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6cbc:	7923      	ldrb	r3, [r4, #4]
   b6cbe:	07df      	lsls	r7, r3, #31
   b6cc0:	d50e      	bpl.n	b6ce0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6cc2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6cc4:	212f      	movs	r1, #47	; 0x2f
   b6cc6:	4630      	mov	r0, r6
   b6cc8:	f001 f96d 	bl	b7fa6 <strrchr>
    if (s1) {
   b6ccc:	b100      	cbz	r0, b6cd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6cce:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6cd0:	4931      	ldr	r1, [pc, #196]	; (b6d98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6cd2:	2201      	movs	r2, #1
   b6cd4:	a801      	add	r0, sp, #4
   b6cd6:	f7fe fec9 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6cda:	4631      	mov	r1, r6
   b6cdc:	f7ff f8ff 	bl	b5ede <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6ce0:	7923      	ldrb	r3, [r4, #4]
   b6ce2:	079e      	lsls	r6, r3, #30
   b6ce4:	d507      	bpl.n	b6cf6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6ce6:	492d      	ldr	r1, [pc, #180]	; (b6d9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6ce8:	2202      	movs	r2, #2
   b6cea:	a801      	add	r0, sp, #4
   b6cec:	f7fe febe 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6cf0:	68e1      	ldr	r1, [r4, #12]
   b6cf2:	f7fe fe39 	bl	b5968 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6cf6:	7923      	ldrb	r3, [r4, #4]
   b6cf8:	0758      	lsls	r0, r3, #29
   b6cfa:	d514      	bpl.n	b6d26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6cfc:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6cfe:	4633      	mov	r3, r6
   b6d00:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6d02:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6d06:	b12a      	cbz	r2, b6d14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6d08:	2a20      	cmp	r2, #32
   b6d0a:	d101      	bne.n	b6d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6d0c:	461e      	mov	r6, r3
   b6d0e:	e7f7      	b.n	b6d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6d10:	2a28      	cmp	r2, #40	; 0x28
   b6d12:	d1f5      	bne.n	b6d00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6d14:	4922      	ldr	r1, [pc, #136]	; (b6da0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6d16:	2202      	movs	r2, #2
   b6d18:	a801      	add	r0, sp, #4
   b6d1a:	f7fe fea7 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6d1e:	1bba      	subs	r2, r7, r6
   b6d20:	4631      	mov	r1, r6
   b6d22:	f7fe feb3 	bl	b5a8c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6d26:	7923      	ldrb	r3, [r4, #4]
   b6d28:	0719      	lsls	r1, r3, #28
   b6d2a:	d507      	bpl.n	b6d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6d2c:	491d      	ldr	r1, [pc, #116]	; (b6da4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6d2e:	2201      	movs	r2, #1
   b6d30:	a801      	add	r0, sp, #4
   b6d32:	f7fe fe9b 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6d36:	6961      	ldr	r1, [r4, #20]
   b6d38:	f7fe fe28 	bl	b598c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6d3c:	7923      	ldrb	r3, [r4, #4]
   b6d3e:	06da      	lsls	r2, r3, #27
   b6d40:	d508      	bpl.n	b6d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6d42:	2204      	movs	r2, #4
   b6d44:	4918      	ldr	r1, [pc, #96]	; (b6da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6d46:	eb0d 0002 	add.w	r0, sp, r2
   b6d4a:	f7fe fe8f 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6d4e:	69a1      	ldr	r1, [r4, #24]
   b6d50:	f7fe fe0a 	bl	b5968 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6d54:	7923      	ldrb	r3, [r4, #4]
   b6d56:	069b      	lsls	r3, r3, #26
   b6d58:	d507      	bpl.n	b6d6a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6d5a:	4914      	ldr	r1, [pc, #80]	; (b6dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6d5c:	2206      	movs	r2, #6
   b6d5e:	a801      	add	r0, sp, #4
   b6d60:	f7fe fe84 	bl	b5a6c <_ZN5spark10JSONWriter4nameEPKcj>
   b6d64:	69e1      	ldr	r1, [r4, #28]
   b6d66:	f7ff f8ba 	bl	b5ede <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6d6a:	a801      	add	r0, sp, #4
   b6d6c:	f7fe fdd9 	bl	b5922 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6d70:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6d72:	490f      	ldr	r1, [pc, #60]	; (b6db0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6d74:	6803      	ldr	r3, [r0, #0]
   b6d76:	2202      	movs	r2, #2
   b6d78:	68db      	ldr	r3, [r3, #12]
   b6d7a:	4798      	blx	r3
}
   b6d7c:	b005      	add	sp, #20
   b6d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6d82:	bf00      	nop
   b6d84:	2003e67c 	.word	0x2003e67c
   b6d88:	000b83c4 	.word	0x000b83c4
   b6d8c:	000b8352 	.word	0x000b8352
   b6d90:	000b83a3 	.word	0x000b83a3
   b6d94:	000b8703 	.word	0x000b8703
   b6d98:	000b83a5 	.word	0x000b83a5
   b6d9c:	000b83a7 	.word	0x000b83a7
   b6da0:	000b83aa 	.word	0x000b83aa
   b6da4:	000b83ad 	.word	0x000b83ad
   b6da8:	000b83af 	.word	0x000b83af
   b6dac:	000b83b4 	.word	0x000b83b4
   b6db0:	000b83a0 	.word	0x000b83a0

000b6db4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6db6:	4606      	mov	r6, r0
   b6db8:	460d      	mov	r5, r1
  size_t n = 0;
   b6dba:	188f      	adds	r7, r1, r2
   b6dbc:	2400      	movs	r4, #0
  while (size--) {
   b6dbe:	42bd      	cmp	r5, r7
   b6dc0:	d00c      	beq.n	b6ddc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6dc2:	6833      	ldr	r3, [r6, #0]
   b6dc4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6dc8:	689b      	ldr	r3, [r3, #8]
   b6dca:	4630      	mov	r0, r6
   b6dcc:	4798      	blx	r3
     if (chunk>=0)
   b6dce:	1e03      	subs	r3, r0, #0
   b6dd0:	db01      	blt.n	b6dd6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6dd2:	441c      	add	r4, r3
  while (size--) {
   b6dd4:	e7f3      	b.n	b6dbe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6dd6:	2c00      	cmp	r4, #0
   b6dd8:	bf08      	it	eq
   b6dda:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6ddc:	4620      	mov	r0, r4
   b6dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6de0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6de0:	b513      	push	{r0, r1, r4, lr}
   b6de2:	4604      	mov	r4, r0
    }
   b6de4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6de6:	b159      	cbz	r1, b6e00 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6de8:	9101      	str	r1, [sp, #4]
   b6dea:	f7fd fd69 	bl	b48c0 <strlen>
   b6dee:	6823      	ldr	r3, [r4, #0]
   b6df0:	9901      	ldr	r1, [sp, #4]
   b6df2:	68db      	ldr	r3, [r3, #12]
   b6df4:	4602      	mov	r2, r0
   b6df6:	4620      	mov	r0, r4
    }
   b6df8:	b002      	add	sp, #8
   b6dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6dfe:	4718      	bx	r3
    }
   b6e00:	b002      	add	sp, #8
   b6e02:	bd10      	pop	{r4, pc}

000b6e04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6e04:	6803      	ldr	r3, [r0, #0]
   b6e06:	689b      	ldr	r3, [r3, #8]
   b6e08:	4718      	bx	r3

000b6e0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6e0a:	b530      	push	{r4, r5, lr}
   b6e0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6e0e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6e10:	2a01      	cmp	r2, #1
  *str = '\0';
   b6e12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6e16:	bf98      	it	ls
   b6e18:	220a      	movls	r2, #10
   b6e1a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6e1c:	460d      	mov	r5, r1
   b6e1e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6e22:	fb01 5312 	mls	r3, r1, r2, r5
   b6e26:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e2a:	2b09      	cmp	r3, #9
   b6e2c:	bf94      	ite	ls
   b6e2e:	3330      	addls	r3, #48	; 0x30
   b6e30:	3337      	addhi	r3, #55	; 0x37
   b6e32:	b2db      	uxtb	r3, r3
  } while(n);
   b6e34:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6e36:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6e3a:	d9ef      	bls.n	b6e1c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6e3c:	4621      	mov	r1, r4
   b6e3e:	f7ff ffcf 	bl	b6de0 <_ZN5Print5writeEPKc>
}
   b6e42:	b00b      	add	sp, #44	; 0x2c
   b6e44:	bd30      	pop	{r4, r5, pc}

000b6e46 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e46:	4770      	bx	lr

000b6e48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6e48:	4b06      	ldr	r3, [pc, #24]	; (b6e64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6e4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6e4c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6e4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6e52:	d005      	beq.n	b6e60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e54:	4608      	mov	r0, r1
   b6e56:	f000 fee5 	bl	b7c24 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e5a:	2800      	cmp	r0, #0
   b6e5c:	bf08      	it	eq
   b6e5e:	2400      	moveq	r4, #0
      }
   b6e60:	4620      	mov	r0, r4
   b6e62:	bd10      	pop	{r4, pc}
   b6e64:	000b82ac 	.word	0x000b82ac

000b6e68 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e68:	b510      	push	{r4, lr}
   b6e6a:	2130      	movs	r1, #48	; 0x30
   b6e6c:	4604      	mov	r4, r0
   b6e6e:	f7fd fd6e 	bl	b494e <_ZdlPvj>
   b6e72:	4620      	mov	r0, r4
   b6e74:	bd10      	pop	{r4, pc}

000b6e76 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6e76:	2130      	movs	r1, #48	; 0x30
   b6e78:	f7fd bd69 	b.w	b494e <_ZdlPvj>

000b6e7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6e7e:	2500      	movs	r5, #0
   b6e80:	1cec      	adds	r4, r5, #3
   b6e82:	428c      	cmp	r4, r1
   b6e84:	d80d      	bhi.n	b6ea2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6e86:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6e88:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6e8a:	5d87      	ldrb	r7, [r0, r6]
   b6e8c:	4297      	cmp	r7, r2
   b6e8e:	d105      	bne.n	b6e9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6e90:	4426      	add	r6, r4
   b6e92:	42b1      	cmp	r1, r6
   b6e94:	d305      	bcc.n	b6ea2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6e96:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6e98:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6e9c:	3401      	adds	r4, #1
   b6e9e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6ea0:	e7ee      	b.n	b6e80 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6ea2:	2000      	movs	r0, #0
   b6ea4:	e7f9      	b.n	b6e9a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6ea8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6ea8:	b510      	push	{r4, lr}
            locked_(false) {
   b6eaa:	2300      	movs	r3, #0
   b6eac:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b6eae:	4b04      	ldr	r3, [pc, #16]	; (b6ec0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6eb0:	4604      	mov	r4, r0
   b6eb2:	6818      	ldr	r0, [r3, #0]
   b6eb4:	f7fe f8f6 	bl	b50a4 <os_mutex_recursive_lock>
        locked_ = true;
   b6eb8:	2301      	movs	r3, #1
   b6eba:	7023      	strb	r3, [r4, #0]
    }
   b6ebc:	4620      	mov	r0, r4
   b6ebe:	bd10      	pop	{r4, pc}
   b6ec0:	2003e6fc 	.word	0x2003e6fc

000b6ec4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6ec4:	b510      	push	{r4, lr}
        if (locked_) {
   b6ec6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6ec8:	4604      	mov	r4, r0
        if (locked_) {
   b6eca:	b11b      	cbz	r3, b6ed4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6ecc:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6ece:	6818      	ldr	r0, [r3, #0]
   b6ed0:	f7fe f8f0 	bl	b50b4 <os_mutex_recursive_unlock>
    }
   b6ed4:	4620      	mov	r0, r4
   b6ed6:	bd10      	pop	{r4, pc}
   b6ed8:	2003e6fc 	.word	0x2003e6fc

000b6edc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6edc:	b082      	sub	sp, #8
   b6ede:	4603      	mov	r3, r0
    address_ = addr;
   b6ee0:	6808      	ldr	r0, [r1, #0]
   b6ee2:	6849      	ldr	r1, [r1, #4]
   b6ee4:	466a      	mov	r2, sp
   b6ee6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b6ee8:	466a      	mov	r2, sp
   b6eea:	ca03      	ldmia	r2!, {r0, r1}
   b6eec:	6018      	str	r0, [r3, #0]
}
   b6eee:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6ef0:	6059      	str	r1, [r3, #4]
}
   b6ef2:	b002      	add	sp, #8
   b6ef4:	4770      	bx	lr

000b6ef6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b6ef6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b6ef8:	7982      	ldrb	r2, [r0, #6]
   b6efa:	798b      	ldrb	r3, [r1, #6]
   b6efc:	429a      	cmp	r2, r3
   b6efe:	d106      	bne.n	b6f0e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6f00:	2206      	movs	r2, #6
   b6f02:	f000 ffaf 	bl	b7e64 <memcmp>
   b6f06:	fab0 f080 	clz	r0, r0
   b6f0a:	0940      	lsrs	r0, r0, #5
}
   b6f0c:	bd08      	pop	{r3, pc}
    return false;
   b6f0e:	2000      	movs	r0, #0
   b6f10:	e7fc      	b.n	b6f0c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6f12 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6f16:	6003      	str	r3, [r0, #0]
   b6f18:	8083      	strh	r3, [r0, #4]
}
   b6f1a:	2000      	movs	r0, #0
   b6f1c:	4770      	bx	lr

000b6f1e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6f1e:	b508      	push	{r3, lr}
   b6f20:	4602      	mov	r2, r0
        : address_{} {
   b6f22:	2100      	movs	r1, #0
   b6f24:	6001      	str	r1, [r0, #0]
   b6f26:	6041      	str	r1, [r0, #4]
    clear();
   b6f28:	f7ff fff3 	bl	b6f12 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6f2c:	7191      	strb	r1, [r2, #6]
}
   b6f2e:	4610      	mov	r0, r2
   b6f30:	bd08      	pop	{r3, pc}

000b6f32 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6f32:	b510      	push	{r4, lr}
    return data_ + size_;
   b6f34:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6f38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6f3c:	4293      	cmp	r3, r2
   b6f3e:	4618      	mov	r0, r3
   b6f40:	d006      	beq.n	b6f50 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6f42:	6804      	ldr	r4, [r0, #0]
   b6f44:	8824      	ldrh	r4, [r4, #0]
   b6f46:	428c      	cmp	r4, r1
   b6f48:	f103 0308 	add.w	r3, r3, #8
   b6f4c:	d1f6      	bne.n	b6f3c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b6f4e:	bd10      	pop	{r4, pc}
        return nullptr;
   b6f50:	2000      	movs	r0, #0
   b6f52:	e7fc      	b.n	b6f4e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b6f54 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6f54:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6f56:	2500      	movs	r5, #0
   b6f58:	6005      	str	r5, [r0, #0]
   b6f5a:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6f5c:	2030      	movs	r0, #48	; 0x30
   b6f5e:	f7fd fcf2 	bl	b4946 <_Znwj>
	  auto __pi = ::new (__mem)
   b6f62:	4604      	mov	r4, r0
   b6f64:	b188      	cbz	r0, b6f8a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6f66:	2301      	movs	r3, #1
   b6f68:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6f6c:	4b09      	ldr	r3, [pc, #36]	; (b6f94 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6f6e:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6f74:	8183      	strh	r3, [r0, #12]
   b6f76:	300e      	adds	r0, #14
   b6f78:	f7ff ffd1 	bl	b6f1e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6f7c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6f80:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6f84:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6f88:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6f8a:	6074      	str	r4, [r6, #4]
   b6f8c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6f8e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6f90:	4630      	mov	r0, r6
   b6f92:	bd70      	pop	{r4, r5, r6, pc}
   b6f94:	000b84fc 	.word	0x000b84fc

000b6f98 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f9a:	460d      	mov	r5, r1
   b6f9c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6f9e:	a801      	add	r0, sp, #4
   b6fa0:	f7ff ff82 	bl	b6ea8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6fa4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6fa6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6faa:	6023      	str	r3, [r4, #0]
   b6fac:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6fb0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6fb2:	a801      	add	r0, sp, #4
   b6fb4:	f7ff ff86 	bl	b6ec4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6fb8:	4620      	mov	r0, r4
   b6fba:	b003      	add	sp, #12
   b6fbc:	bd30      	pop	{r4, r5, pc}

000b6fbe <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6fbe:	b530      	push	{r4, r5, lr}
   b6fc0:	4605      	mov	r5, r0
   b6fc2:	b087      	sub	sp, #28
   b6fc4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6fc6:	a801      	add	r0, sp, #4
   b6fc8:	f7ff ff6e 	bl	b6ea8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6fcc:	682a      	ldr	r2, [r5, #0]
   b6fce:	6823      	ldr	r3, [r4, #0]
   b6fd0:	8812      	ldrh	r2, [r2, #0]
   b6fd2:	881b      	ldrh	r3, [r3, #0]
   b6fd4:	429a      	cmp	r2, r3
   b6fd6:	d10d      	bne.n	b6ff4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6fd8:	4629      	mov	r1, r5
   b6fda:	a802      	add	r0, sp, #8
   b6fdc:	f7ff ffdc 	bl	b6f98 <_ZNK8particle13BlePeerDevice7addressEv>
   b6fe0:	4621      	mov	r1, r4
   b6fe2:	a804      	add	r0, sp, #16
   b6fe4:	f7ff ffd8 	bl	b6f98 <_ZNK8particle13BlePeerDevice7addressEv>
   b6fe8:	a904      	add	r1, sp, #16
   b6fea:	a802      	add	r0, sp, #8
   b6fec:	f7ff ff83 	bl	b6ef6 <_ZNK8particle10BleAddresseqERKS0_>
   b6ff0:	4604      	mov	r4, r0
   b6ff2:	b900      	cbnz	r0, b6ff6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6ff4:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6ff6:	a801      	add	r0, sp, #4
   b6ff8:	f7ff ff64 	bl	b6ec4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	b007      	add	sp, #28
   b7000:	bd30      	pop	{r4, r5, pc}
	...

000b7004 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7004:	b510      	push	{r4, lr}
   b7006:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7008:	2064      	movs	r0, #100	; 0x64
   b700a:	f7fd fc9c 	bl	b4946 <_Znwj>
   b700e:	b168      	cbz	r0, b702c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7010:	2300      	movs	r3, #0
   b7012:	e9c0 3300 	strd	r3, r3, [r0]
   b7016:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b701a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b701e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7022:	6203      	str	r3, [r0, #32]
   b7024:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7026:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7028:	64c3      	str	r3, [r0, #76]	; 0x4c
   b702a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b702c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b702e:	b920      	cbnz	r0, b703a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7030:	4a0a      	ldr	r2, [pc, #40]	; (b705c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7032:	490b      	ldr	r1, [pc, #44]	; (b7060 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7034:	200a      	movs	r0, #10
   b7036:	f7fe f8f1 	bl	b521c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b703a:	2000      	movs	r0, #0
   b703c:	f7fe f842 	bl	b50c4 <hal_ble_stack_init>
   b7040:	b120      	cbz	r0, b704c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7042:	4a06      	ldr	r2, [pc, #24]	; (b705c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7044:	4907      	ldr	r1, [pc, #28]	; (b7064 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7046:	200a      	movs	r0, #10
   b7048:	f7fe f8e8 	bl	b521c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b704c:	6821      	ldr	r1, [r4, #0]
   b704e:	4806      	ldr	r0, [pc, #24]	; (b7068 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7050:	2200      	movs	r2, #0
   b7052:	f7fe f871 	bl	b5138 <hal_ble_set_callback_on_periph_link_events>
}
   b7056:	4620      	mov	r0, r4
   b7058:	bd10      	pop	{r4, pc}
   b705a:	bf00      	nop
   b705c:	000b515d 	.word	0x000b515d
   b7060:	000b8434 	.word	0x000b8434
   b7064:	000b8472 	.word	0x000b8472
   b7068:	000b7515 	.word	0x000b7515

000b706c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b706c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b706e:	4c0a      	ldr	r4, [pc, #40]	; (b7098 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7070:	7823      	ldrb	r3, [r4, #0]
   b7072:	f3bf 8f5b 	dmb	ish
   b7076:	07db      	lsls	r3, r3, #31
   b7078:	d40c      	bmi.n	b7094 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b707a:	4620      	mov	r0, r4
   b707c:	f7fd fc76 	bl	b496c <__cxa_guard_acquire>
   b7080:	b140      	cbz	r0, b7094 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7082:	4806      	ldr	r0, [pc, #24]	; (b709c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7084:	f7ff ffbe 	bl	b7004 <_ZN8particle14BleLocalDeviceC1Ev>
   b7088:	4620      	mov	r0, r4
   b708a:	f7fd fc74 	bl	b4976 <__cxa_guard_release>
   b708e:	4804      	ldr	r0, [pc, #16]	; (b70a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7090:	f000 feda 	bl	b7e48 <atexit>
    return instance;
}
   b7094:	4801      	ldr	r0, [pc, #4]	; (b709c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7096:	bd10      	pop	{r4, pc}
   b7098:	2003e6f8 	.word	0x2003e6f8
   b709c:	2003e700 	.word	0x2003e700
   b70a0:	000b7211 	.word	0x000b7211

000b70a4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b70a4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b70a6:	2000      	movs	r0, #0
   b70a8:	f7fe f80c 	bl	b50c4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b70ac:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b70b0:	bd08      	pop	{r3, pc}

000b70b2 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b70b2:	b530      	push	{r4, r5, lr}
   b70b4:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b70b6:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b70b8:	230c      	movs	r3, #12
   b70ba:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b70be:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b70c0:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b70c2:	4621      	mov	r1, r4
   b70c4:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b70c6:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b70ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b70ce:	f7fe f809 	bl	b50e4 <hal_ble_gap_get_advertising_parameters>
   b70d2:	2800      	cmp	r0, #0
   b70d4:	db05      	blt.n	b70e2 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b70d6:	4621      	mov	r1, r4
   b70d8:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b70da:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b70de:	f7fd fff9 	bl	b50d4 <hal_ble_gap_set_advertising_parameters>
}
   b70e2:	b005      	add	sp, #20
   b70e4:	bd30      	pop	{r4, r5, pc}

000b70e6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b70e6:	b919      	cbnz	r1, b70f0 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b70e8:	460a      	mov	r2, r1
   b70ea:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b70ec:	f7fe b802 	b.w	b50f4 <hal_ble_gap_set_advertising_data>
   b70f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b70f4:	2200      	movs	r2, #0
   b70f6:	e7f9      	b.n	b70ec <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b70f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b70f8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b70fa:	1e14      	subs	r4, r2, #0
   b70fc:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b70fe:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7100:	db02      	blt.n	b7108 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b7102:	1862      	adds	r2, r4, r1
   b7104:	429a      	cmp	r2, r3
   b7106:	dd00      	ble.n	b710a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7108:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b710a:	682a      	ldr	r2, [r5, #0]
   b710c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b710e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7110:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7112:	1a52      	subs	r2, r2, r1
   b7114:	f000 fec4 	bl	b7ea0 <memmove>
    size_ -= n;
   b7118:	686a      	ldr	r2, [r5, #4]
   b711a:	1b12      	subs	r2, r2, r4
   b711c:	606a      	str	r2, [r5, #4]
}
   b711e:	bd38      	pop	{r3, r4, r5, pc}

000b7120 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7120:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b7122:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7124:	4604      	mov	r4, r0
   b7126:	460d      	mov	r5, r1
   b7128:	ab01      	add	r3, sp, #4
   b712a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b712e:	f7ff fea5 	bl	b6e7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b7132:	4602      	mov	r2, r0
   b7134:	b138      	cbz	r0, b7146 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b7136:	9901      	ldr	r1, [sp, #4]
   b7138:	4620      	mov	r0, r4
   b713a:	f7ff ffdd 	bl	b70f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b713e:	4629      	mov	r1, r5
   b7140:	4620      	mov	r0, r4
   b7142:	f7ff ffed 	bl	b7120 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b7146:	b003      	add	sp, #12
   b7148:	bd30      	pop	{r4, r5, pc}

000b714a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b714a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b714c:	460c      	mov	r4, r1
   b714e:	b929      	cbnz	r1, b715c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b7150:	460a      	mov	r2, r1
   b7152:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b7154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7158:	f7fd bfd4 	b.w	b5104 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b715c:	2101      	movs	r1, #1
   b715e:	4620      	mov	r0, r4
   b7160:	f7ff ffde 	bl	b7120 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b7164:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7168:	2200      	movs	r2, #0
   b716a:	e7f3      	b.n	b7154 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b716c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b716c:	b538      	push	{r3, r4, r5, lr}
   b716e:	4604      	mov	r4, r0
   b7170:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b7172:	f7ff ffb8 	bl	b70e6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7176:	2800      	cmp	r0, #0
   b7178:	db0a      	blt.n	b7190 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b717a:	4629      	mov	r1, r5
   b717c:	4620      	mov	r0, r4
   b717e:	f7ff ffe4 	bl	b714a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b7182:	2800      	cmp	r0, #0
   b7184:	db04      	blt.n	b7190 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b7186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b718a:	2000      	movs	r0, #0
   b718c:	f7fd bfc2 	b.w	b5114 <hal_ble_gap_start_advertising>
}
   b7190:	bd38      	pop	{r3, r4, r5, pc}

000b7192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b7192:	680b      	ldr	r3, [r1, #0]
   b7194:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7196:	b113      	cbz	r3, b719e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7198:	685a      	ldr	r2, [r3, #4]
   b719a:	3201      	adds	r2, #1
   b719c:	605a      	str	r2, [r3, #4]
      }
   b719e:	4770      	bx	lr

000b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b71a0:	b510      	push	{r4, lr}
   b71a2:	f851 3b04 	ldr.w	r3, [r1], #4
   b71a6:	4604      	mov	r4, r0
   b71a8:	f840 3b04 	str.w	r3, [r0], #4
   b71ac:	f7ff fff1 	bl	b7192 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b71b0:	4620      	mov	r0, r4
   b71b2:	bd10      	pop	{r4, pc}

000b71b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b71b6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71ba:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b71bc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b71c0:	42ae      	cmp	r6, r5
   b71c2:	d004      	beq.n	b71ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b71c4:	1d28      	adds	r0, r5, #4
   b71c6:	f7fe fa5f 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ca:	3508      	adds	r5, #8
   b71cc:	e7f8      	b.n	b71c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b71ce:	6820      	ldr	r0, [r4, #0]
   b71d0:	f7fe f8e8 	bl	b53a4 <free>
}
   b71d4:	4620      	mov	r0, r4
   b71d6:	bd70      	pop	{r4, r5, r6, pc}

000b71d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b71da:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71de:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b71e0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b71e4:	42ae      	cmp	r6, r5
   b71e6:	d004      	beq.n	b71f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b71e8:	1d28      	adds	r0, r5, #4
   b71ea:	f7fe fa4d 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71ee:	3508      	adds	r5, #8
   b71f0:	e7f8      	b.n	b71e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b71f2:	6820      	ldr	r0, [r4, #0]
   b71f4:	f7fe f8d6 	bl	b53a4 <free>
}
   b71f8:	4620      	mov	r0, r4
   b71fa:	bd70      	pop	{r4, r5, r6, pc}

000b71fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b71fc:	b510      	push	{r4, lr}
   b71fe:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b7200:	3024      	adds	r0, #36	; 0x24
   b7202:	f7ff ffe9 	bl	b71d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7206:	f104 0018 	add.w	r0, r4, #24
   b720a:	f7ff ffd3 	bl	b71b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b720e:	bd10      	pop	{r4, pc}

000b7210 <__tcf_0>:
    static BleLocalDevice instance;
   b7210:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b7212:	4b17      	ldr	r3, [pc, #92]	; (b7270 <__tcf_0+0x60>)
   b7214:	681c      	ldr	r4, [r3, #0]
   b7216:	b354      	cbz	r4, b726e <__tcf_0+0x5e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b7218:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b721c:	f7fe fd46 	bl	b5cac <_ZNSt14_Function_baseD1Ev>
   b7220:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7224:	f7fe fd42 	bl	b5cac <_ZNSt14_Function_baseD1Ev>
   b7228:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b722c:	f7fe fd3e 	bl	b5cac <_ZNSt14_Function_baseD1Ev>
   b7230:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7234:	f7fe fd3a 	bl	b5cac <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7238:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b723c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7240:	42ae      	cmp	r6, r5
   b7242:	d004      	beq.n	b724e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7244:	1d28      	adds	r0, r5, #4
   b7246:	f7fe fa1f 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b724a:	3508      	adds	r5, #8
   b724c:	e7f8      	b.n	b7240 <__tcf_0+0x30>
    ::free(ptr);
   b724e:	69a0      	ldr	r0, [r4, #24]
   b7250:	f7fe f8a8 	bl	b53a4 <free>
    ~BleLocalDeviceImpl() = default;
   b7254:	f104 000c 	add.w	r0, r4, #12
   b7258:	f7ff ffbe 	bl	b71d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b725c:	4620      	mov	r0, r4
   b725e:	f7ff ffa9 	bl	b71b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b7262:	4620      	mov	r0, r4
   b7264:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b726a:	f7fd bb70 	b.w	b494e <_ZdlPvj>
   b726e:	bd70      	pop	{r4, r5, r6, pc}
   b7270:	2003e700 	.word	0x2003e700

000b7274 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7274:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7276:	b510      	push	{r4, lr}
      if (_M_empty())
   b7278:	b90a      	cbnz	r2, b727e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b727a:	f000 fccf 	bl	b7c1c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b727e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7282:	68c3      	ldr	r3, [r0, #12]
   b7284:	4718      	bx	r3

000b7286 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7286:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7288:	6883      	ldr	r3, [r0, #8]
   b728a:	428b      	cmp	r3, r1
   b728c:	da02      	bge.n	b7294 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b728e:	f7fe fa11 	bl	b56b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b7292:	bd08      	pop	{r3, pc}
    return true;
   b7294:	2001      	movs	r0, #1
   b7296:	e7fc      	b.n	b7292 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7298 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b729c:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b729e:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b72a0:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b72a2:	4419      	add	r1, r3
   b72a4:	6883      	ldr	r3, [r0, #8]
   b72a6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b72a8:	4604      	mov	r4, r0
   b72aa:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b72ac:	dc12      	bgt.n	b72d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b72ae:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72b0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b72b2:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72b4:	1bd2      	subs	r2, r2, r7
   b72b6:	4631      	mov	r1, r6
   b72b8:	1970      	adds	r0, r6, r5
   b72ba:	f000 fdf1 	bl	b7ea0 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b72be:	462a      	mov	r2, r5
   b72c0:	4641      	mov	r1, r8
   b72c2:	4630      	mov	r0, r6
   b72c4:	f000 fdde 	bl	b7e84 <memcpy>
    size_ += n;
   b72c8:	6863      	ldr	r3, [r4, #4]
   b72ca:	442b      	add	r3, r5
   b72cc:	6063      	str	r3, [r4, #4]
    return true;
   b72ce:	2001      	movs	r0, #1
}
   b72d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b72d4:	f7fe f9ee 	bl	b56b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b72d8:	2800      	cmp	r0, #0
   b72da:	d1e8      	bne.n	b72ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b72dc:	e7f8      	b.n	b72d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b72de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b72de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72e0:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72e2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b72e6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b72e8:	4604      	mov	r4, r0
   b72ea:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b72ec:	da0b      	bge.n	b7306 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b72ee:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72f0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b72f2:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b72f4:	1b52      	subs	r2, r2, r5
   b72f6:	1c48      	adds	r0, r1, #1
   b72f8:	f000 fdd2 	bl	b7ea0 <memmove>
    new(p) T(std::move(value));
   b72fc:	557e      	strb	r6, [r7, r5]
    ++size_;
   b72fe:	6863      	ldr	r3, [r4, #4]
   b7300:	3301      	adds	r3, #1
   b7302:	6063      	str	r3, [r4, #4]
}
   b7304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7306:	3101      	adds	r1, #1
   b7308:	f7fe f9d4 	bl	b56b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b730c:	2800      	cmp	r0, #0
   b730e:	d1ee      	bne.n	b72ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7310:	e7f8      	b.n	b7304 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7312 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7312:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7314:	6841      	ldr	r1, [r0, #4]
   b7316:	f7ff bfe2 	b.w	b72de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b731a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b731a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b731e:	4604      	mov	r4, r0
   b7320:	461d      	mov	r5, r3
   b7322:	460f      	mov	r7, r1
   b7324:	ab01      	add	r3, sp, #4
   b7326:	4690      	mov	r8, r2
   b7328:	460a      	mov	r2, r1
   b732a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b732e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7332:	f7ff fda3 	bl	b6e7c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7336:	1cae      	adds	r6, r5, #2
   b7338:	6863      	ldr	r3, [r4, #4]
   b733a:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b733c:	f1b9 0f00 	cmp.w	r9, #0
   b7340:	d126      	bne.n	b7390 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7342:	b328      	cbz	r0, b7390 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7344:	4433      	add	r3, r6
   b7346:	1a1b      	subs	r3, r3, r0
   b7348:	2bff      	cmp	r3, #255	; 0xff
   b734a:	d809      	bhi.n	b7360 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b734c:	9901      	ldr	r1, [sp, #4]
   b734e:	4620      	mov	r0, r4
   b7350:	f7ff fed2 	bl	b70f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7354:	6861      	ldr	r1, [r4, #4]
   b7356:	4620      	mov	r0, r4
   b7358:	4431      	add	r1, r6
   b735a:	f7ff ff94 	bl	b7286 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b735e:	b918      	cbnz	r0, b7368 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7360:	6860      	ldr	r0, [r4, #4]
}
   b7362:	b003      	add	sp, #12
   b7364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7368:	1c6a      	adds	r2, r5, #1
   b736a:	9901      	ldr	r1, [sp, #4]
   b736c:	b2d2      	uxtb	r2, r2
   b736e:	4620      	mov	r0, r4
   b7370:	f7ff ffb5 	bl	b72de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7374:	9901      	ldr	r1, [sp, #4]
   b7376:	463a      	mov	r2, r7
   b7378:	3101      	adds	r1, #1
   b737a:	4620      	mov	r0, r4
   b737c:	f7ff ffaf 	bl	b72de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7380:	9901      	ldr	r1, [sp, #4]
   b7382:	462b      	mov	r3, r5
   b7384:	4642      	mov	r2, r8
   b7386:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7388:	4620      	mov	r0, r4
   b738a:	f7ff ff85 	bl	b7298 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b738e:	e7e7      	b.n	b7360 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7390:	18f1      	adds	r1, r6, r3
   b7392:	29ff      	cmp	r1, #255	; 0xff
   b7394:	d8e4      	bhi.n	b7360 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7396:	4620      	mov	r0, r4
   b7398:	f7ff ff75 	bl	b7286 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b739c:	2800      	cmp	r0, #0
   b739e:	d0df      	beq.n	b7360 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b73a0:	1c69      	adds	r1, r5, #1
   b73a2:	b2c9      	uxtb	r1, r1
   b73a4:	4620      	mov	r0, r4
   b73a6:	f7ff ffb4 	bl	b7312 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b73aa:	4639      	mov	r1, r7
   b73ac:	4620      	mov	r0, r4
   b73ae:	f7ff ffb0 	bl	b7312 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b73b2:	6861      	ldr	r1, [r4, #4]
   b73b4:	462b      	mov	r3, r5
   b73b6:	4642      	mov	r2, r8
   b73b8:	e7e6      	b.n	b7388 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b73ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b73ba:	b430      	push	{r4, r5}
   b73bc:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b73c0:	b11a      	cbz	r2, b73ca <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b73c2:	9502      	str	r5, [sp, #8]
}
   b73c4:	bc30      	pop	{r4, r5}
   b73c6:	f7ff bfa8 	b.w	b731a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b73ca:	6840      	ldr	r0, [r0, #4]
}
   b73cc:	bc30      	pop	{r4, r5}
   b73ce:	4770      	bx	lr

000b73d0 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b73d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b73d2:	2300      	movs	r3, #0
   b73d4:	e9c0 3300 	strd	r3, r3, [r0]
   b73d8:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b73da:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73dc:	9300      	str	r3, [sp, #0]
   b73de:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b73e0:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73e4:	4619      	mov	r1, r3
   b73e6:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b73ea:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b73ec:	f7ff ffe5 	bl	b73ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b73f0:	4620      	mov	r0, r4
   b73f2:	b004      	add	sp, #16
   b73f4:	bd10      	pop	{r4, pc}

000b73f6 <_ZN8particle18BleAdvertisingData16appendCustomDataEPKhjb>:
size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
   b73f6:	b507      	push	{r0, r1, r2, lr}
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
   b73f8:	9300      	str	r3, [sp, #0]
   b73fa:	4613      	mov	r3, r2
   b73fc:	460a      	mov	r2, r1
   b73fe:	21ff      	movs	r1, #255	; 0xff
   b7400:	f7ff ffdb 	bl	b73ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7404:	b003      	add	sp, #12
   b7406:	f85d fb04 	ldr.w	pc, [sp], #4

000b740a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b740a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b740e:	4604      	mov	r4, r0
   b7410:	460d      	mov	r5, r1
   b7412:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7414:	d914      	bls.n	b7440 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7416:	4290      	cmp	r0, r2
   b7418:	d213      	bcs.n	b7442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b741a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b741e:	1a75      	subs	r5, r6, r1
   b7420:	f1a1 0708 	sub.w	r7, r1, #8
   b7424:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7426:	42b7      	cmp	r7, r6
   b7428:	d018      	beq.n	b745c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b742a:	b11c      	cbz	r4, b7434 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b742c:	4631      	mov	r1, r6
   b742e:	4620      	mov	r0, r4
   b7430:	f7ff feb6 	bl	b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7434:	1d30      	adds	r0, r6, #4
   b7436:	f7fe f927 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b743a:	3e08      	subs	r6, #8
   b743c:	3c08      	subs	r4, #8
   b743e:	e7f2      	b.n	b7426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7440:	d00c      	beq.n	b745c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7442:	42b5      	cmp	r5, r6
   b7444:	d00a      	beq.n	b745c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7446:	b11c      	cbz	r4, b7450 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7448:	4629      	mov	r1, r5
   b744a:	4620      	mov	r0, r4
   b744c:	f7ff fea8 	bl	b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7450:	1d28      	adds	r0, r5, #4
   b7452:	f7fe f919 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7456:	3508      	adds	r5, #8
   b7458:	3408      	adds	r4, #8
   b745a:	e7f2      	b.n	b7442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b745c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b745e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b745e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7460:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7462:	6846      	ldr	r6, [r0, #4]
   b7464:	4668      	mov	r0, sp
   b7466:	f7ff fe9b 	bl	b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b746a:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b746e:	429f      	cmp	r7, r3
   b7470:	db12      	blt.n	b7498 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7472:	3701      	adds	r7, #1
        if (n > 0) {
   b7474:	2f00      	cmp	r7, #0
   b7476:	dd29      	ble.n	b74cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7478:	00f8      	lsls	r0, r7, #3
   b747a:	f7fd ff8b 	bl	b5394 <malloc>
            if (!d) {
   b747e:	4605      	mov	r5, r0
   b7480:	b1f0      	cbz	r0, b74c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7482:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7486:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b748a:	f7ff ffbe 	bl	b740a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b748e:	6820      	ldr	r0, [r4, #0]
   b7490:	f7fd ff88 	bl	b53a4 <free>
        data_ = d;
   b7494:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7496:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7498:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b749a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b749c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b74a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b74a4:	4631      	mov	r1, r6
   b74a6:	f106 0008 	add.w	r0, r6, #8
   b74aa:	f7ff ffae 	bl	b740a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b74ae:	b11e      	cbz	r6, b74b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b74b0:	4669      	mov	r1, sp
   b74b2:	4630      	mov	r0, r6
   b74b4:	f7ff fe74 	bl	b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b74b8:	6863      	ldr	r3, [r4, #4]
   b74ba:	3301      	adds	r3, #1
   b74bc:	6063      	str	r3, [r4, #4]
    return true;
   b74be:	2501      	movs	r5, #1
   b74c0:	a801      	add	r0, sp, #4
   b74c2:	f7fe f8e1 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b74c6:	4628      	mov	r0, r5
   b74c8:	b003      	add	sp, #12
   b74ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b74cc:	2500      	movs	r5, #0
   b74ce:	e7de      	b.n	b748e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b74d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b74d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b74d2:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b74d6:	4605      	mov	r5, r0
   b74d8:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b74da:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b74de:	42a6      	cmp	r6, r4
   b74e0:	d005      	beq.n	b74ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b74e2:	4639      	mov	r1, r7
   b74e4:	4620      	mov	r0, r4
   b74e6:	f7ff fd6a 	bl	b6fbe <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b74ea:	b108      	cbz	r0, b74f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b74ec:	b914      	cbnz	r4, b74f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b74ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b74f0:	3408      	adds	r4, #8
   b74f2:	e7f4      	b.n	b74de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b74f4:	1d20      	adds	r0, r4, #4
   b74f6:	f7fe f8c7 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b74fa:	e9d5 3200 	ldrd	r3, r2, [r5]
   b74fe:	f104 0108 	add.w	r1, r4, #8
   b7502:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7506:	4620      	mov	r0, r4
   b7508:	f7ff ff7f 	bl	b740a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b750c:	686b      	ldr	r3, [r5, #4]
   b750e:	3b01      	subs	r3, #1
   b7510:	606b      	str	r3, [r5, #4]
    return true;
   b7512:	e7ec      	b.n	b74ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7514 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7518:	4605      	mov	r5, r0
   b751a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b751c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b751e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7520:	f7ff fcc2 	bl	b6ea8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7524:	682e      	ldr	r6, [r5, #0]
   b7526:	1ef3      	subs	r3, r6, #3
   b7528:	2b0d      	cmp	r3, #13
   b752a:	d83c      	bhi.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b752c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7530:	0057000e 	.word	0x0057000e
   b7534:	00d3003b 	.word	0x00d3003b
   b7538:	003b003b 	.word	0x003b003b
   b753c:	003b003b 	.word	0x003b003b
   b7540:	009d003b 	.word	0x009d003b
   b7544:	009d009d 	.word	0x009d009d
   b7548:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b754c:	a804      	add	r0, sp, #16
   b754e:	f7ff fd01 	bl	b6f54 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b7552:	9b04      	ldr	r3, [sp, #16]
   b7554:	89aa      	ldrh	r2, [r5, #12]
   b7556:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7558:	6869      	ldr	r1, [r5, #4]
   b755a:	9804      	ldr	r0, [sp, #16]
   b755c:	3108      	adds	r1, #8
   b755e:	3002      	adds	r0, #2
   b7560:	f7ff fcbc 	bl	b6edc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7564:	a904      	add	r1, sp, #16
   b7566:	a806      	add	r0, sp, #24
   b7568:	f7ff fe1a 	bl	b71a0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b756c:	a906      	add	r1, sp, #24
   b756e:	f104 0018 	add.w	r0, r4, #24
   b7572:	f7ff ff74 	bl	b745e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7576:	4605      	mov	r5, r0
   b7578:	a807      	add	r0, sp, #28
   b757a:	f7fe f885 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b757e:	b9c5      	cbnz	r5, b75b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7580:	2320      	movs	r3, #32
   b7582:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b7586:	4b5e      	ldr	r3, [pc, #376]	; (b7700 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7588:	495e      	ldr	r1, [pc, #376]	; (b7704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b758a:	9300      	str	r3, [sp, #0]
   b758c:	aa06      	add	r2, sp, #24
   b758e:	462b      	mov	r3, r5
   b7590:	2001      	movs	r0, #1
   b7592:	f7fd fe4b 	bl	b522c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7596:	9b04      	ldr	r3, [sp, #16]
   b7598:	4629      	mov	r1, r5
   b759a:	8818      	ldrh	r0, [r3, #0]
   b759c:	f7fd fdc2 	bl	b5124 <hal_ble_gap_disconnect>
   b75a0:	a805      	add	r0, sp, #20
   b75a2:	f7fe f871 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b75a6:	a803      	add	r0, sp, #12
   b75a8:	f7ff fc8c 	bl	b6ec4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b75ac:	b00e      	add	sp, #56	; 0x38
   b75ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b75b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b75b4:	b123      	cbz	r3, b75c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b75b6:	a904      	add	r1, sp, #16
   b75b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b75bc:	f7ff fe5a 	bl	b7274 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b75c0:	a805      	add	r0, sp, #20
   b75c2:	f7fe f861 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b75c6:	2120      	movs	r1, #32
   b75c8:	2300      	movs	r3, #0
   b75ca:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b75ce:	4a4e      	ldr	r2, [pc, #312]	; (b7708 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b75d0:	9200      	str	r2, [sp, #0]
   b75d2:	494c      	ldr	r1, [pc, #304]	; (b7704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b75d4:	aa06      	add	r2, sp, #24
   b75d6:	2001      	movs	r0, #1
   b75d8:	f7fd fe28 	bl	b522c <log_message>
   b75dc:	e7e3      	b.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b75de:	89a9      	ldrh	r1, [r5, #12]
   b75e0:	4620      	mov	r0, r4
   b75e2:	f7ff fca6 	bl	b6f32 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b75e6:	4606      	mov	r6, r0
   b75e8:	2800      	cmp	r0, #0
   b75ea:	d0dc      	beq.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b75ec:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b75ee:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b75f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b75f6:	8029      	strh	r1, [r5, #0]
   b75f8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b75fc:	429a      	cmp	r2, r3
   b75fe:	d003      	beq.n	b7608 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7600:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7604:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7606:	e7f9      	b.n	b75fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7608:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b760c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7610:	45b8      	cmp	r8, r7
   b7612:	d004      	beq.n	b761e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b7614:	1d38      	adds	r0, r7, #4
   b7616:	f7fe f837 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b761a:	3708      	adds	r7, #8
   b761c:	e7f8      	b.n	b7610 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b761e:	2300      	movs	r3, #0
   b7620:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7622:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7626:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b762a:	45b8      	cmp	r8, r7
   b762c:	d004      	beq.n	b7638 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b762e:	1d38      	adds	r0, r7, #4
   b7630:	f7fe f82a 	bl	b5688 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7634:	3708      	adds	r7, #8
   b7636:	e7f8      	b.n	b762a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7638:	2300      	movs	r3, #0
   b763a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b763c:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b763e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7640:	b123      	cbz	r3, b764c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b7642:	4631      	mov	r1, r6
   b7644:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7648:	f7ff fe14 	bl	b7274 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b764c:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b764e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7652:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7654:	4631      	mov	r1, r6
   b7656:	f104 0018 	add.w	r0, r4, #24
   b765a:	f7ff ff39 	bl	b74d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b765e:	2220      	movs	r2, #32
   b7660:	2300      	movs	r3, #0
   b7662:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7666:	4a29      	ldr	r2, [pc, #164]	; (b770c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7668:	e7b2      	b.n	b75d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b766a:	89a9      	ldrh	r1, [r5, #12]
   b766c:	4620      	mov	r0, r4
   b766e:	f7ff fc60 	bl	b6f32 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7672:	2800      	cmp	r0, #0
   b7674:	d097      	beq.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7676:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7678:	2b00      	cmp	r3, #0
   b767a:	d094      	beq.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b767c:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b767e:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7680:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7684:	d001      	beq.n	b768a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7686:	2e10      	cmp	r6, #16
   b7688:	d117      	bne.n	b76ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b768a:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b768c:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b768e:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7690:	2506      	movs	r5, #6
                        };
   b7692:	f88d 3015 	strb.w	r3, [sp, #21]
   b7696:	9104      	str	r1, [sp, #16]
   b7698:	f88d 2014 	strb.w	r2, [sp, #20]
   b769c:	9006      	str	r0, [sp, #24]
   b769e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b76a2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b76a4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b76a8:	9508      	str	r5, [sp, #32]
   b76aa:	e883 0003 	stmia.w	r3, {r0, r1}
   b76ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b76b0:	a906      	add	r1, sp, #24
   b76b2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b76b6:	4798      	blx	r3
   b76b8:	e775      	b.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b76ba:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b76bc:	bf01      	itttt	eq
   b76be:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b76c0:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b76c2:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b76c6:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b76c8:	bf0f      	iteee	eq
   b76ca:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b76ce:	461a      	movne	r2, r3
   b76d0:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b76d2:	461d      	movne	r5, r3
   b76d4:	e7dd      	b.n	b7692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b76d6:	89a9      	ldrh	r1, [r5, #12]
   b76d8:	4620      	mov	r0, r4
   b76da:	f7ff fc2a 	bl	b6f32 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b76de:	4601      	mov	r1, r0
   b76e0:	2800      	cmp	r0, #0
   b76e2:	f43f af60 	beq.w	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b76e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b76e8:	2b00      	cmp	r3, #0
   b76ea:	f43f af5c 	beq.w	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b76ee:	686b      	ldr	r3, [r5, #4]
   b76f0:	9306      	str	r3, [sp, #24]
   b76f2:	aa06      	add	r2, sp, #24
   b76f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b76f6:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b76fa:	4798      	blx	r3
   b76fc:	e753      	b.n	b75a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b76fe:	bf00      	nop
   b7700:	000b84b4 	.word	0x000b84b4
   b7704:	000b844b 	.word	0x000b844b
   b7708:	000b84da 	.word	0x000b84da
   b770c:	000b84e4 	.word	0x000b84e4

000b7710 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7710:	4802      	ldr	r0, [pc, #8]	; (b771c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7712:	2300      	movs	r3, #0
   b7714:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7716:	f7fd bcb5 	b.w	b5084 <os_mutex_recursive_create>
   b771a:	bf00      	nop
   b771c:	2003e6fc 	.word	0x2003e6fc

000b7720 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7720:	4770      	bx	lr

000b7722 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7722:	7441      	strb	r1, [r0, #17]
}
   b7724:	4770      	bx	lr

000b7726 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7726:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7728:	7c00      	ldrb	r0, [r0, #16]
   b772a:	f7fd fc8b 	bl	b5044 <hal_usart_available_data_for_write>
}
   b772e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7732:	bd08      	pop	{r3, pc}

000b7734 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7734:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7736:	7c00      	ldrb	r0, [r0, #16]
   b7738:	f7fd fc5c 	bl	b4ff4 <hal_usart_available>
}
   b773c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7740:	bd08      	pop	{r3, pc}

000b7742 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7742:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7744:	7c00      	ldrb	r0, [r0, #16]
   b7746:	f7fd fc65 	bl	b5014 <hal_usart_peek>
}
   b774a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b774e:	bd08      	pop	{r3, pc}

000b7750 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7750:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7752:	7c00      	ldrb	r0, [r0, #16]
   b7754:	f7fd fc56 	bl	b5004 <hal_usart_read>
}
   b7758:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b775c:	bd08      	pop	{r3, pc}

000b775e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b775e:	7c00      	ldrb	r0, [r0, #16]
   b7760:	f7fd bc60 	b.w	b5024 <hal_usart_flush>

000b7764 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7764:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7766:	7c45      	ldrb	r5, [r0, #17]
{
   b7768:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b776a:	b12d      	cbz	r5, b7778 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b776c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b776e:	b003      	add	sp, #12
   b7770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7774:	f7fd bc36 	b.w	b4fe4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7778:	7c00      	ldrb	r0, [r0, #16]
   b777a:	9101      	str	r1, [sp, #4]
   b777c:	f7fd fc62 	bl	b5044 <hal_usart_available_data_for_write>
   b7780:	2800      	cmp	r0, #0
   b7782:	9901      	ldr	r1, [sp, #4]
   b7784:	dcf2      	bgt.n	b776c <_ZN11USARTSerial5writeEh+0x8>
}
   b7786:	4628      	mov	r0, r5
   b7788:	b003      	add	sp, #12
   b778a:	bd30      	pop	{r4, r5, pc}

000b778c <_ZN11USARTSerialD0Ev>:
   b778c:	b510      	push	{r4, lr}
   b778e:	2114      	movs	r1, #20
   b7790:	4604      	mov	r4, r0
   b7792:	f7fd f8dc 	bl	b494e <_ZdlPvj>
   b7796:	4620      	mov	r0, r4
   b7798:	bd10      	pop	{r4, pc}
	...

000b779c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b779c:	b510      	push	{r4, lr}
   b779e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77a2:	4604      	mov	r4, r0
   b77a4:	4608      	mov	r0, r1
   b77a6:	4611      	mov	r1, r2
   b77a8:	2200      	movs	r2, #0
   b77aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b77ae:	4b04      	ldr	r3, [pc, #16]	; (b77c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b77b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b77b2:	2301      	movs	r3, #1
  _serial = serial;
   b77b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b77b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b77b8:	f7fd fc54 	bl	b5064 <hal_usart_init_ex>
}
   b77bc:	4620      	mov	r0, r4
   b77be:	bd10      	pop	{r4, pc}
   b77c0:	000b8518 	.word	0x000b8518

000b77c4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b77c4:	7c00      	ldrb	r0, [r0, #16]
   b77c6:	2300      	movs	r3, #0
   b77c8:	f7fd bc44 	b.w	b5054 <hal_usart_begin_config>

000b77cc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b77cc:	2200      	movs	r2, #0
   b77ce:	f7ff bff9 	b.w	b77c4 <_ZN11USARTSerial5beginEmm>

000b77d2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b77d2:	7c00      	ldrb	r0, [r0, #16]
   b77d4:	f7fd bbfe 	b.w	b4fd4 <hal_usart_end>

000b77d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b77d8:	4b05      	ldr	r3, [pc, #20]	; (b77f0 <_GLOBAL__sub_I_System+0x18>)
   b77da:	2202      	movs	r2, #2
   b77dc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b77de:	4b05      	ldr	r3, [pc, #20]	; (b77f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b77e0:	4a05      	ldr	r2, [pc, #20]	; (b77f8 <_GLOBAL__sub_I_System+0x20>)
   b77e2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b77e4:	2000      	movs	r0, #0
   b77e6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b77ea:	f7fd bda7 	b.w	b533c <set_system_mode>
   b77ee:	bf00      	nop
   b77f0:	2003e710 	.word	0x2003e710
   b77f4:	2003e704 	.word	0x2003e704
   b77f8:	ffff0000 	.word	0xffff0000

000b77fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b77fc:	b510      	push	{r4, lr}
   b77fe:	4604      	mov	r4, r0
   b7800:	4608      	mov	r0, r1
{
    _spi = spi;
   b7802:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7804:	f7fd fb9e 	bl	b4f44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7808:	2300      	movs	r3, #0
   b780a:	6063      	str	r3, [r4, #4]
}
   b780c:	4620      	mov	r0, r4
   b780e:	bd10      	pop	{r4, pc}

000b7810 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7810:	2200      	movs	r2, #0
   b7812:	6840      	ldr	r0, [r0, #4]
   b7814:	4611      	mov	r1, r2
   b7816:	f7fd bd69 	b.w	b52ec <network_listening>

000b781a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b781a:	2200      	movs	r2, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	4611      	mov	r1, r2
   b7820:	f7fd bd74 	b.w	b530c <network_get_listen_timeout>

000b7824 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7824:	6840      	ldr	r0, [r0, #4]
   b7826:	2200      	movs	r2, #0
   b7828:	f7fd bd68 	b.w	b52fc <network_set_listen_timeout>

000b782c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b782c:	6840      	ldr	r0, [r0, #4]
   b782e:	2200      	movs	r2, #0
   b7830:	f081 0101 	eor.w	r1, r1, #1
   b7834:	f7fd bd52 	b.w	b52dc <network_listen>

000b7838 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7838:	2300      	movs	r3, #0
   b783a:	6840      	ldr	r0, [r0, #4]
   b783c:	461a      	mov	r2, r3
   b783e:	4619      	mov	r1, r3
   b7840:	f7fd bd44 	b.w	b52cc <network_off>

000b7844 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7844:	2300      	movs	r3, #0
   b7846:	6840      	ldr	r0, [r0, #4]
   b7848:	461a      	mov	r2, r3
   b784a:	4619      	mov	r1, r3
   b784c:	f7fd bd36 	b.w	b52bc <network_on>

000b7850 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7850:	2200      	movs	r2, #0
   b7852:	6840      	ldr	r0, [r0, #4]
   b7854:	4611      	mov	r1, r2
   b7856:	f7fd bd29 	b.w	b52ac <network_ready>

000b785a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b785a:	2200      	movs	r2, #0
   b785c:	6840      	ldr	r0, [r0, #4]
   b785e:	4611      	mov	r1, r2
   b7860:	f7fd bd14 	b.w	b528c <network_connecting>

000b7864 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7864:	6840      	ldr	r0, [r0, #4]
   b7866:	2200      	movs	r2, #0
   b7868:	2102      	movs	r1, #2
   b786a:	f7fd bd17 	b.w	b529c <network_disconnect>

000b786e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b786e:	2300      	movs	r3, #0
   b7870:	6840      	ldr	r0, [r0, #4]
   b7872:	461a      	mov	r2, r3
   b7874:	f7fd bd02 	b.w	b527c <network_connect>

000b7878 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7878:	4b02      	ldr	r3, [pc, #8]	; (b7884 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b787a:	2203      	movs	r2, #3
   b787c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b787e:	4a02      	ldr	r2, [pc, #8]	; (b7888 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7880:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7882:	4770      	bx	lr
   b7884:	2003e714 	.word	0x2003e714
   b7888:	000b8548 	.word	0x000b8548

000b788c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b788c:	b510      	push	{r4, lr}
   b788e:	4604      	mov	r4, r0
{
	free(buffer);
   b7890:	6800      	ldr	r0, [r0, #0]
   b7892:	f7fd fd87 	bl	b53a4 <free>
}
   b7896:	4620      	mov	r0, r4
   b7898:	bd10      	pop	{r4, pc}

000b789a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b789a:	b510      	push	{r4, lr}
   b789c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b789e:	6800      	ldr	r0, [r0, #0]
   b78a0:	b108      	cbz	r0, b78a6 <_ZN6String10invalidateEv+0xc>
   b78a2:	f7fd fd7f 	bl	b53a4 <free>
	buffer = NULL;
   b78a6:	2300      	movs	r3, #0
	capacity = len = 0;
   b78a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b78ac:	6023      	str	r3, [r4, #0]
}
   b78ae:	bd10      	pop	{r4, pc}

000b78b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b78b0:	b538      	push	{r3, r4, r5, lr}
   b78b2:	4604      	mov	r4, r0
   b78b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b78b6:	6800      	ldr	r0, [r0, #0]
   b78b8:	3101      	adds	r1, #1
   b78ba:	f7fd fd7b 	bl	b53b4 <realloc>
	if (newbuffer) {
   b78be:	b110      	cbz	r0, b78c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b78c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b78c4:	2001      	movs	r0, #1
	}
	return 0;
}
   b78c6:	bd38      	pop	{r3, r4, r5, pc}

000b78c8 <_ZN6String7reserveEj>:
{
   b78c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b78ca:	6803      	ldr	r3, [r0, #0]
{
   b78cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b78ce:	b123      	cbz	r3, b78da <_ZN6String7reserveEj+0x12>
   b78d0:	6843      	ldr	r3, [r0, #4]
   b78d2:	428b      	cmp	r3, r1
   b78d4:	d301      	bcc.n	b78da <_ZN6String7reserveEj+0x12>
   b78d6:	2001      	movs	r0, #1
}
   b78d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b78da:	4620      	mov	r0, r4
   b78dc:	f7ff ffe8 	bl	b78b0 <_ZN6String12changeBufferEj>
   b78e0:	2800      	cmp	r0, #0
   b78e2:	d0f9      	beq.n	b78d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b78e4:	68a3      	ldr	r3, [r4, #8]
   b78e6:	2b00      	cmp	r3, #0
   b78e8:	d1f5      	bne.n	b78d6 <_ZN6String7reserveEj+0xe>
   b78ea:	6822      	ldr	r2, [r4, #0]
   b78ec:	7013      	strb	r3, [r2, #0]
   b78ee:	e7f2      	b.n	b78d6 <_ZN6String7reserveEj+0xe>

000b78f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b78f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b78f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b78f4:	4611      	mov	r1, r2
   b78f6:	9201      	str	r2, [sp, #4]
{
   b78f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b78fa:	f7ff ffe5 	bl	b78c8 <_ZN6String7reserveEj>
   b78fe:	9a01      	ldr	r2, [sp, #4]
   b7900:	b928      	cbnz	r0, b790e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7902:	4620      	mov	r0, r4
   b7904:	f7ff ffc9 	bl	b789a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7908:	4620      	mov	r0, r4
   b790a:	b003      	add	sp, #12
   b790c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b790e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7910:	4629      	mov	r1, r5
   b7912:	6820      	ldr	r0, [r4, #0]
   b7914:	f000 fab6 	bl	b7e84 <memcpy>
	buffer[len] = 0;
   b7918:	6822      	ldr	r2, [r4, #0]
   b791a:	68a3      	ldr	r3, [r4, #8]
   b791c:	2100      	movs	r1, #0
   b791e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7920:	e7f2      	b.n	b7908 <_ZN6String4copyEPKcj+0x18>

000b7922 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7922:	b538      	push	{r3, r4, r5, lr}
   b7924:	4605      	mov	r5, r0
	if (buffer) {
   b7926:	6800      	ldr	r0, [r0, #0]
{
   b7928:	460c      	mov	r4, r1
	if (buffer) {
   b792a:	b168      	cbz	r0, b7948 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b792c:	686a      	ldr	r2, [r5, #4]
   b792e:	688b      	ldr	r3, [r1, #8]
   b7930:	429a      	cmp	r2, r3
   b7932:	d307      	bcc.n	b7944 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7934:	6809      	ldr	r1, [r1, #0]
   b7936:	f000 fb1a 	bl	b7f6e <strcpy>
			len = rhs.len;
   b793a:	68a3      	ldr	r3, [r4, #8]
   b793c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b793e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7940:	60a3      	str	r3, [r4, #8]
}
   b7942:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7944:	f7fd fd2e 	bl	b53a4 <free>
	buffer = rhs.buffer;
   b7948:	6823      	ldr	r3, [r4, #0]
   b794a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b794c:	6863      	ldr	r3, [r4, #4]
   b794e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7950:	68a3      	ldr	r3, [r4, #8]
   b7952:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7954:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7956:	e9c4 3300 	strd	r3, r3, [r4]
   b795a:	e7f1      	b.n	b7940 <_ZN6String4moveERS_+0x1e>

000b795c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b795c:	b510      	push	{r4, lr}
	buffer = NULL;
   b795e:	2300      	movs	r3, #0
	capacity = 0;
   b7960:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7964:	4604      	mov	r4, r0
	len = 0;
   b7966:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7968:	7303      	strb	r3, [r0, #12]
	move(rval);
   b796a:	f7ff ffda 	bl	b7922 <_ZN6String4moveERS_>
}
   b796e:	4620      	mov	r0, r4
   b7970:	bd10      	pop	{r4, pc}

000b7972 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7972:	4288      	cmp	r0, r1
{
   b7974:	b510      	push	{r4, lr}
   b7976:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7978:	d005      	beq.n	b7986 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b797a:	680b      	ldr	r3, [r1, #0]
   b797c:	b12b      	cbz	r3, b798a <_ZN6StringaSERKS_+0x18>
   b797e:	688a      	ldr	r2, [r1, #8]
   b7980:	4619      	mov	r1, r3
   b7982:	f7ff ffb5 	bl	b78f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7986:	4620      	mov	r0, r4
   b7988:	bd10      	pop	{r4, pc}
	else invalidate();
   b798a:	f7ff ff86 	bl	b789a <_ZN6String10invalidateEv>
   b798e:	e7fa      	b.n	b7986 <_ZN6StringaSERKS_+0x14>

000b7990 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7990:	b510      	push	{r4, lr}
	buffer = NULL;
   b7992:	2300      	movs	r3, #0
String::String(const String &value)
   b7994:	4604      	mov	r4, r0
	capacity = 0;
   b7996:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b799a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b799c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b799e:	f7ff ffe8 	bl	b7972 <_ZN6StringaSERKS_>
}
   b79a2:	4620      	mov	r0, r4
   b79a4:	bd10      	pop	{r4, pc}

000b79a6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79a6:	4770      	bx	lr

000b79a8 <_Z17acquireWireBufferv>:
{
   b79a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b79aa:	4b0a      	ldr	r3, [pc, #40]	; (b79d4 <_Z17acquireWireBufferv+0x2c>)
   b79ac:	6003      	str	r3, [r0, #0]
   b79ae:	2301      	movs	r3, #1
{
   b79b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b79b2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79b4:	4908      	ldr	r1, [pc, #32]	; (b79d8 <_Z17acquireWireBufferv+0x30>)
   b79b6:	2020      	movs	r0, #32
   b79b8:	f000 f92e 	bl	b7c18 <_ZnajRKSt9nothrow_t>
	};
   b79bc:	2520      	movs	r5, #32
   b79be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79c0:	4905      	ldr	r1, [pc, #20]	; (b79d8 <_Z17acquireWireBufferv+0x30>)
	};
   b79c2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b79c4:	4628      	mov	r0, r5
   b79c6:	f000 f927 	bl	b7c18 <_ZnajRKSt9nothrow_t>
	};
   b79ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b79ce:	4620      	mov	r0, r4
   b79d0:	bd38      	pop	{r3, r4, r5, pc}
   b79d2:	bf00      	nop
   b79d4:	00010018 	.word	0x00010018
   b79d8:	000b857c 	.word	0x000b857c

000b79dc <_Z19__fetch_global_Wirev>:
{
   b79dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79de:	4d0e      	ldr	r5, [pc, #56]	; (b7a18 <_Z19__fetch_global_Wirev+0x3c>)
   b79e0:	7829      	ldrb	r1, [r5, #0]
   b79e2:	f3bf 8f5b 	dmb	ish
   b79e6:	f011 0401 	ands.w	r4, r1, #1
{
   b79ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b79ec:	d111      	bne.n	b7a12 <_Z19__fetch_global_Wirev+0x36>
   b79ee:	4628      	mov	r0, r5
   b79f0:	f7fc ffbc 	bl	b496c <__cxa_guard_acquire>
   b79f4:	b168      	cbz	r0, b7a12 <_Z19__fetch_global_Wirev+0x36>
   b79f6:	4668      	mov	r0, sp
   b79f8:	f7ff ffd6 	bl	b79a8 <_Z17acquireWireBufferv>
   b79fc:	466a      	mov	r2, sp
   b79fe:	4621      	mov	r1, r4
   b7a00:	4806      	ldr	r0, [pc, #24]	; (b7a1c <_Z19__fetch_global_Wirev+0x40>)
   b7a02:	f7fd fe23 	bl	b564c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7a06:	4628      	mov	r0, r5
   b7a08:	f7fc ffb5 	bl	b4976 <__cxa_guard_release>
   b7a0c:	4804      	ldr	r0, [pc, #16]	; (b7a20 <_Z19__fetch_global_Wirev+0x44>)
   b7a0e:	f000 fa1b 	bl	b7e48 <atexit>
	return wire;
}
   b7a12:	4802      	ldr	r0, [pc, #8]	; (b7a1c <_Z19__fetch_global_Wirev+0x40>)
   b7a14:	b007      	add	sp, #28
   b7a16:	bd30      	pop	{r4, r5, pc}
   b7a18:	2003e71c 	.word	0x2003e71c
   b7a1c:	2003e720 	.word	0x2003e720
   b7a20:	000b79a7 	.word	0x000b79a7

000b7a24 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a24:	4770      	bx	lr
	...

000b7a28 <_Z20acquireSerial1Bufferv>:
{
   b7a28:	b538      	push	{r3, r4, r5, lr}
   b7a2a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7a2c:	2514      	movs	r5, #20
   b7a2e:	462a      	mov	r2, r5
   b7a30:	2100      	movs	r1, #0
   b7a32:	f000 fa4f 	bl	b7ed4 <memset>
   b7a36:	8025      	strh	r5, [r4, #0]
   b7a38:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a3a:	4907      	ldr	r1, [pc, #28]	; (b7a58 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7a3c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a3e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7a40:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a42:	f000 f8e9 	bl	b7c18 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a46:	4904      	ldr	r1, [pc, #16]	; (b7a58 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7a48:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a4a:	4628      	mov	r0, r5
   b7a4c:	f000 f8e4 	bl	b7c18 <_ZnajRKSt9nothrow_t>
    };
   b7a50:	60e0      	str	r0, [r4, #12]
}
   b7a52:	4620      	mov	r0, r4
   b7a54:	bd38      	pop	{r3, r4, r5, pc}
   b7a56:	bf00      	nop
   b7a58:	000b857c 	.word	0x000b857c

000b7a5c <_Z22__fetch_global_Serial1v>:
{
   b7a5c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a5e:	4d0e      	ldr	r5, [pc, #56]	; (b7a98 <_Z22__fetch_global_Serial1v+0x3c>)
   b7a60:	7829      	ldrb	r1, [r5, #0]
   b7a62:	f3bf 8f5b 	dmb	ish
   b7a66:	f011 0401 	ands.w	r4, r1, #1
{
   b7a6a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a6c:	d111      	bne.n	b7a92 <_Z22__fetch_global_Serial1v+0x36>
   b7a6e:	4628      	mov	r0, r5
   b7a70:	f7fc ff7c 	bl	b496c <__cxa_guard_acquire>
   b7a74:	b168      	cbz	r0, b7a92 <_Z22__fetch_global_Serial1v+0x36>
   b7a76:	a801      	add	r0, sp, #4
   b7a78:	f7ff ffd6 	bl	b7a28 <_Z20acquireSerial1Bufferv>
   b7a7c:	aa01      	add	r2, sp, #4
   b7a7e:	4621      	mov	r1, r4
   b7a80:	4806      	ldr	r0, [pc, #24]	; (b7a9c <_Z22__fetch_global_Serial1v+0x40>)
   b7a82:	f7ff fe8b 	bl	b779c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a86:	4628      	mov	r0, r5
   b7a88:	f7fc ff75 	bl	b4976 <__cxa_guard_release>
   b7a8c:	4804      	ldr	r0, [pc, #16]	; (b7aa0 <_Z22__fetch_global_Serial1v+0x44>)
   b7a8e:	f000 f9db 	bl	b7e48 <atexit>
    return serial1;
}
   b7a92:	4802      	ldr	r0, [pc, #8]	; (b7a9c <_Z22__fetch_global_Serial1v+0x40>)
   b7a94:	b007      	add	sp, #28
   b7a96:	bd30      	pop	{r4, r5, pc}
   b7a98:	2003e738 	.word	0x2003e738
   b7a9c:	2003e73c 	.word	0x2003e73c
   b7aa0:	000b7a25 	.word	0x000b7a25

000b7aa4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7aa4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7aa6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7aa8:	d902      	bls.n	b7ab0 <pinAvailable+0xc>
    return false;
   b7aaa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7aac:	b002      	add	sp, #8
   b7aae:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7ab0:	f1a0 030b 	sub.w	r3, r0, #11
   b7ab4:	2b02      	cmp	r3, #2
   b7ab6:	d81a      	bhi.n	b7aee <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7ab8:	4c17      	ldr	r4, [pc, #92]	; (b7b18 <pinAvailable+0x74>)
   b7aba:	7821      	ldrb	r1, [r4, #0]
   b7abc:	f3bf 8f5b 	dmb	ish
   b7ac0:	f011 0101 	ands.w	r1, r1, #1
   b7ac4:	d10b      	bne.n	b7ade <pinAvailable+0x3a>
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	9101      	str	r1, [sp, #4]
   b7aca:	f7fc ff4f 	bl	b496c <__cxa_guard_acquire>
   b7ace:	9901      	ldr	r1, [sp, #4]
   b7ad0:	b128      	cbz	r0, b7ade <pinAvailable+0x3a>
   b7ad2:	4812      	ldr	r0, [pc, #72]	; (b7b1c <pinAvailable+0x78>)
   b7ad4:	f7ff fe92 	bl	b77fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7ad8:	4620      	mov	r0, r4
   b7ada:	f7fc ff4c 	bl	b4976 <__cxa_guard_release>
   b7ade:	4b0f      	ldr	r3, [pc, #60]	; (b7b1c <pinAvailable+0x78>)
   b7ae0:	7818      	ldrb	r0, [r3, #0]
   b7ae2:	f7fd fa37 	bl	b4f54 <hal_spi_is_enabled>
   b7ae6:	2800      	cmp	r0, #0
   b7ae8:	d1df      	bne.n	b7aaa <pinAvailable+0x6>
  return true; // 'pin' is available
   b7aea:	2001      	movs	r0, #1
   b7aec:	e7de      	b.n	b7aac <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7aee:	2801      	cmp	r0, #1
   b7af0:	d809      	bhi.n	b7b06 <pinAvailable+0x62>
   b7af2:	f7ff ff73 	bl	b79dc <_Z19__fetch_global_Wirev>
   b7af6:	2100      	movs	r1, #0
   b7af8:	7c00      	ldrb	r0, [r0, #16]
   b7afa:	f7fd fa5b 	bl	b4fb4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7afe:	f080 0001 	eor.w	r0, r0, #1
   b7b02:	b2c0      	uxtb	r0, r0
   b7b04:	e7d2      	b.n	b7aac <pinAvailable+0x8>
   b7b06:	3809      	subs	r0, #9
   b7b08:	2801      	cmp	r0, #1
   b7b0a:	d8ee      	bhi.n	b7aea <pinAvailable+0x46>
   b7b0c:	f7ff ffa6 	bl	b7a5c <_Z22__fetch_global_Serial1v>
   b7b10:	7c00      	ldrb	r0, [r0, #16]
   b7b12:	f7fd fa8f 	bl	b5034 <hal_usart_is_enabled>
   b7b16:	e7f2      	b.n	b7afe <pinAvailable+0x5a>
   b7b18:	2003e750 	.word	0x2003e750
   b7b1c:	2003e754 	.word	0x2003e754

000b7b20 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b20:	2823      	cmp	r0, #35	; 0x23
{
   b7b22:	b538      	push	{r3, r4, r5, lr}
   b7b24:	4604      	mov	r4, r0
   b7b26:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7b28:	d80a      	bhi.n	b7b40 <pinMode+0x20>
   b7b2a:	29ff      	cmp	r1, #255	; 0xff
   b7b2c:	d008      	beq.n	b7b40 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7b2e:	f7ff ffb9 	bl	b7aa4 <pinAvailable>
   b7b32:	b128      	cbz	r0, b7b40 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7b34:	4629      	mov	r1, r5
   b7b36:	4620      	mov	r0, r4
}
   b7b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7b3c:	f7fd bb26 	b.w	b518c <hal_gpio_mode>
}
   b7b40:	bd38      	pop	{r3, r4, r5, pc}

000b7b42 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7b42:	b538      	push	{r3, r4, r5, lr}
   b7b44:	4604      	mov	r4, r0
   b7b46:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7b48:	f7fd fb28 	bl	b519c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7b4c:	28ff      	cmp	r0, #255	; 0xff
   b7b4e:	d010      	beq.n	b7b72 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7b50:	2806      	cmp	r0, #6
   b7b52:	d804      	bhi.n	b7b5e <digitalWrite+0x1c>
   b7b54:	234d      	movs	r3, #77	; 0x4d
   b7b56:	fa23 f000 	lsr.w	r0, r3, r0
   b7b5a:	07c3      	lsls	r3, r0, #31
   b7b5c:	d409      	bmi.n	b7b72 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7b5e:	4620      	mov	r0, r4
   b7b60:	f7ff ffa0 	bl	b7aa4 <pinAvailable>
   b7b64:	b128      	cbz	r0, b7b72 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7b66:	4629      	mov	r1, r5
   b7b68:	4620      	mov	r0, r4
}
   b7b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7b6e:	f7fd bb1d 	b.w	b51ac <hal_gpio_write>
}
   b7b72:	bd38      	pop	{r3, r4, r5, pc}

000b7b74 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7b74:	b510      	push	{r4, lr}
   b7b76:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7b78:	f7fd fb10 	bl	b519c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7b7c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7b7e:	b2db      	uxtb	r3, r3
   b7b80:	2b01      	cmp	r3, #1
   b7b82:	d908      	bls.n	b7b96 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7b84:	4620      	mov	r0, r4
   b7b86:	f7ff ff8d 	bl	b7aa4 <pinAvailable>
   b7b8a:	b120      	cbz	r0, b7b96 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7b8c:	4620      	mov	r0, r4
}
   b7b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7b92:	f7fd bb13 	b.w	b51bc <hal_gpio_read>
}
   b7b96:	2000      	movs	r0, #0
   b7b98:	bd10      	pop	{r4, pc}

000b7b9a <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7b9a:	280d      	cmp	r0, #13
{
   b7b9c:	b510      	push	{r4, lr}
   b7b9e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7ba0:	bf9c      	itt	ls
   b7ba2:	340e      	addls	r4, #14
   b7ba4:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b7ba6:	4620      	mov	r0, r4
   b7ba8:	f7ff ff7c 	bl	b7aa4 <pinAvailable>
   b7bac:	b150      	cbz	r0, b7bc4 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b7bae:	2103      	movs	r1, #3
   b7bb0:	4620      	mov	r0, r4
   b7bb2:	f7fd fae3 	bl	b517c <hal_pin_validate_function>
   b7bb6:	2803      	cmp	r0, #3
   b7bb8:	d104      	bne.n	b7bc4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7bba:	4620      	mov	r0, r4
}
   b7bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7bc0:	f7fd bb0c 	b.w	b51dc <hal_adc_read>
}
   b7bc4:	2000      	movs	r0, #0
   b7bc6:	bd10      	pop	{r4, pc}

000b7bc8 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b7bc8:	b538      	push	{r3, r4, r5, lr}
   b7bca:	4604      	mov	r4, r0
   b7bcc:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b7bce:	f7ff ff69 	bl	b7aa4 <pinAvailable>
   b7bd2:	b1f0      	cbz	r0, b7c12 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b7bd4:	2104      	movs	r1, #4
   b7bd6:	4620      	mov	r0, r4
   b7bd8:	f7fd fad0 	bl	b517c <hal_pin_validate_function>
   b7bdc:	2804      	cmp	r0, #4
   b7bde:	d105      	bne.n	b7bec <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b7be0:	b2a9      	uxth	r1, r5
   b7be2:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b7be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b7be8:	f7fd baf0 	b.w	b51cc <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b7bec:	2102      	movs	r1, #2
   b7bee:	4620      	mov	r0, r4
   b7bf0:	f7fd fac4 	bl	b517c <hal_pin_validate_function>
   b7bf4:	2802      	cmp	r0, #2
   b7bf6:	d10c      	bne.n	b7c12 <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b7bf8:	4620      	mov	r0, r4
   b7bfa:	f7fd facf 	bl	b519c <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b7bfe:	2801      	cmp	r0, #1
   b7c00:	d001      	beq.n	b7c06 <_Z11analogWritetm+0x3e>
   b7c02:	2804      	cmp	r0, #4
   b7c04:	d105      	bne.n	b7c12 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b7c06:	4629      	mov	r1, r5
   b7c08:	4620      	mov	r0, r4
}
   b7c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b7c0e:	f7fd baed 	b.w	b51ec <hal_pwm_write_ext>
}
   b7c12:	bd38      	pop	{r3, r4, r5, pc}

000b7c14 <_ZnwjRKSt9nothrow_t>:
   b7c14:	f7fc be97 	b.w	b4946 <_Znwj>

000b7c18 <_ZnajRKSt9nothrow_t>:
   b7c18:	f7fc be97 	b.w	b494a <_Znaj>

000b7c1c <_ZSt25__throw_bad_function_callv>:
   b7c1c:	b508      	push	{r3, lr}
   b7c1e:	f7fd fbd9 	bl	b53d4 <abort>
	...

000b7c24 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7c24:	4901      	ldr	r1, [pc, #4]	; (b7c2c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7c26:	f000 b8f9 	b.w	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7c2a:	bf00      	nop
   b7c2c:	000b8598 	.word	0x000b8598

000b7c30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7c32:	2400      	movs	r4, #0
   b7c34:	2310      	movs	r3, #16
   b7c36:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7c3a:	6803      	ldr	r3, [r0, #0]
   b7c3c:	4615      	mov	r5, r2
   b7c3e:	699e      	ldr	r6, [r3, #24]
   b7c40:	6812      	ldr	r2, [r2, #0]
   b7c42:	466b      	mov	r3, sp
   b7c44:	e9cd 4400 	strd	r4, r4, [sp]
   b7c48:	47b0      	blx	r6
   b7c4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7c4e:	f003 0306 	and.w	r3, r3, #6
   b7c52:	2b06      	cmp	r3, #6
   b7c54:	bf03      	ittte	eq
   b7c56:	9b00      	ldreq	r3, [sp, #0]
   b7c58:	602b      	streq	r3, [r5, #0]
   b7c5a:	2001      	moveq	r0, #1
   b7c5c:	4620      	movne	r0, r4
   b7c5e:	b004      	add	sp, #16
   b7c60:	bd70      	pop	{r4, r5, r6, pc}

000b7c62 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7c62:	9800      	ldr	r0, [sp, #0]
   b7c64:	4290      	cmp	r0, r2
   b7c66:	bf14      	ite	ne
   b7c68:	2001      	movne	r0, #1
   b7c6a:	2006      	moveq	r0, #6
   b7c6c:	4770      	bx	lr
	...

000b7c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7c70:	b510      	push	{r4, lr}
   b7c72:	4b03      	ldr	r3, [pc, #12]	; (b7c80 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7c74:	6003      	str	r3, [r0, #0]
   b7c76:	4604      	mov	r4, r0
   b7c78:	f000 f8cd 	bl	b7e16 <_ZNSt9type_infoD1Ev>
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	bd10      	pop	{r4, pc}
   b7c80:	000b85d8 	.word	0x000b85d8

000b7c84 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7c84:	b510      	push	{r4, lr}
   b7c86:	4604      	mov	r4, r0
   b7c88:	f7ff fff2 	bl	b7c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7c8c:	4620      	mov	r0, r4
   b7c8e:	2108      	movs	r1, #8
   b7c90:	f7fc fe5d 	bl	b494e <_ZdlPvj>
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd10      	pop	{r4, pc}

000b7c98 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c9c:	461f      	mov	r7, r3
   b7c9e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7ca2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7ca6:	4598      	cmp	r8, r3
   b7ca8:	4606      	mov	r6, r0
   b7caa:	4615      	mov	r5, r2
   b7cac:	d107      	bne.n	b7cbe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7cae:	9907      	ldr	r1, [sp, #28]
   b7cb0:	f000 f8b4 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7cb4:	b118      	cbz	r0, b7cbe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7cb6:	7165      	strb	r5, [r4, #5]
   b7cb8:	2000      	movs	r0, #0
   b7cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7cbe:	4639      	mov	r1, r7
   b7cc0:	4630      	mov	r0, r6
   b7cc2:	f000 f8ab 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7cc6:	2800      	cmp	r0, #0
   b7cc8:	d0f6      	beq.n	b7cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7cca:	2301      	movs	r3, #1
   b7ccc:	f8c4 8000 	str.w	r8, [r4]
   b7cd0:	7125      	strb	r5, [r4, #4]
   b7cd2:	71a3      	strb	r3, [r4, #6]
   b7cd4:	e7f0      	b.n	b7cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7cd6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7cd6:	b538      	push	{r3, r4, r5, lr}
   b7cd8:	4615      	mov	r5, r2
   b7cda:	461c      	mov	r4, r3
   b7cdc:	f000 f89e 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7ce0:	b120      	cbz	r0, b7cec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7ce2:	2308      	movs	r3, #8
   b7ce4:	60e3      	str	r3, [r4, #12]
   b7ce6:	2306      	movs	r3, #6
   b7ce8:	6025      	str	r5, [r4, #0]
   b7cea:	7123      	strb	r3, [r4, #4]
   b7cec:	bd38      	pop	{r3, r4, r5, pc}

000b7cee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7cf0:	4605      	mov	r5, r0
   b7cf2:	460c      	mov	r4, r1
   b7cf4:	9201      	str	r2, [sp, #4]
   b7cf6:	461e      	mov	r6, r3
   b7cf8:	f000 f890 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7cfc:	b950      	cbnz	r0, b7d14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7cfe:	2e03      	cmp	r6, #3
   b7d00:	d808      	bhi.n	b7d14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7d02:	6823      	ldr	r3, [r4, #0]
   b7d04:	9a01      	ldr	r2, [sp, #4]
   b7d06:	695b      	ldr	r3, [r3, #20]
   b7d08:	4629      	mov	r1, r5
   b7d0a:	4620      	mov	r0, r4
   b7d0c:	b002      	add	sp, #8
   b7d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7d12:	4718      	bx	r3
   b7d14:	b002      	add	sp, #8
   b7d16:	bd70      	pop	{r4, r5, r6, pc}

000b7d18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7d18:	b510      	push	{r4, lr}
   b7d1a:	4b03      	ldr	r3, [pc, #12]	; (b7d28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7d1c:	6003      	str	r3, [r0, #0]
   b7d1e:	4604      	mov	r4, r0
   b7d20:	f7ff ffa6 	bl	b7c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7d24:	4620      	mov	r0, r4
   b7d26:	bd10      	pop	{r4, pc}
   b7d28:	000b8638 	.word	0x000b8638

000b7d2c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7d2c:	b510      	push	{r4, lr}
   b7d2e:	4604      	mov	r4, r0
   b7d30:	f7ff fff2 	bl	b7d18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7d34:	4620      	mov	r0, r4
   b7d36:	210c      	movs	r1, #12
   b7d38:	f7fc fe09 	bl	b494e <_ZdlPvj>
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	bd10      	pop	{r4, pc}

000b7d40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7d42:	9f08      	ldr	r7, [sp, #32]
   b7d44:	4297      	cmp	r7, r2
   b7d46:	4605      	mov	r5, r0
   b7d48:	460e      	mov	r6, r1
   b7d4a:	4614      	mov	r4, r2
   b7d4c:	d00a      	beq.n	b7d64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7d4e:	68a8      	ldr	r0, [r5, #8]
   b7d50:	6802      	ldr	r2, [r0, #0]
   b7d52:	9708      	str	r7, [sp, #32]
   b7d54:	6a15      	ldr	r5, [r2, #32]
   b7d56:	4631      	mov	r1, r6
   b7d58:	4622      	mov	r2, r4
   b7d5a:	46ac      	mov	ip, r5
   b7d5c:	b003      	add	sp, #12
   b7d5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7d62:	4760      	bx	ip
   b7d64:	4619      	mov	r1, r3
   b7d66:	9301      	str	r3, [sp, #4]
   b7d68:	f000 f858 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7d6c:	9b01      	ldr	r3, [sp, #4]
   b7d6e:	2800      	cmp	r0, #0
   b7d70:	d0ed      	beq.n	b7d4e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7d72:	2006      	movs	r0, #6
   b7d74:	b003      	add	sp, #12
   b7d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7d78:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d7c:	460d      	mov	r5, r1
   b7d7e:	4619      	mov	r1, r3
   b7d80:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7d84:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7d88:	4681      	mov	r9, r0
   b7d8a:	4617      	mov	r7, r2
   b7d8c:	4698      	mov	r8, r3
   b7d8e:	f000 f845 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7d92:	b190      	cbz	r0, b7dba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7d94:	2d00      	cmp	r5, #0
   b7d96:	6034      	str	r4, [r6, #0]
   b7d98:	7137      	strb	r7, [r6, #4]
   b7d9a:	db09      	blt.n	b7db0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7d9c:	1961      	adds	r1, r4, r5
   b7d9e:	458a      	cmp	sl, r1
   b7da0:	bf0c      	ite	eq
   b7da2:	2106      	moveq	r1, #6
   b7da4:	2101      	movne	r1, #1
   b7da6:	71b1      	strb	r1, [r6, #6]
   b7da8:	2000      	movs	r0, #0
   b7daa:	b001      	add	sp, #4
   b7dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7db0:	3502      	adds	r5, #2
   b7db2:	d1f9      	bne.n	b7da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7db4:	2301      	movs	r3, #1
   b7db6:	71b3      	strb	r3, [r6, #6]
   b7db8:	e7f6      	b.n	b7da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7dba:	4554      	cmp	r4, sl
   b7dbc:	d106      	bne.n	b7dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7dbe:	4659      	mov	r1, fp
   b7dc0:	4648      	mov	r0, r9
   b7dc2:	f000 f82b 	bl	b7e1c <_ZNKSt9type_infoeqERKS_>
   b7dc6:	b108      	cbz	r0, b7dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7dc8:	7177      	strb	r7, [r6, #5]
   b7dca:	e7ed      	b.n	b7da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7dcc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7dd0:	6803      	ldr	r3, [r0, #0]
   b7dd2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7dd6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7dda:	69dc      	ldr	r4, [r3, #28]
   b7ddc:	463a      	mov	r2, r7
   b7dde:	4643      	mov	r3, r8
   b7de0:	4629      	mov	r1, r5
   b7de2:	46a4      	mov	ip, r4
   b7de4:	b001      	add	sp, #4
   b7de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dea:	4760      	bx	ip

000b7dec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7df0:	4607      	mov	r7, r0
   b7df2:	460c      	mov	r4, r1
   b7df4:	4615      	mov	r5, r2
   b7df6:	461e      	mov	r6, r3
   b7df8:	f7ff ff6d 	bl	b7cd6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7dfc:	b948      	cbnz	r0, b7e12 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7dfe:	68b8      	ldr	r0, [r7, #8]
   b7e00:	6803      	ldr	r3, [r0, #0]
   b7e02:	699f      	ldr	r7, [r3, #24]
   b7e04:	462a      	mov	r2, r5
   b7e06:	4633      	mov	r3, r6
   b7e08:	4621      	mov	r1, r4
   b7e0a:	46bc      	mov	ip, r7
   b7e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7e10:	4760      	bx	ip
   b7e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e16 <_ZNSt9type_infoD1Ev>:
   b7e16:	4770      	bx	lr

000b7e18 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7e18:	2000      	movs	r0, #0
   b7e1a:	4770      	bx	lr

000b7e1c <_ZNKSt9type_infoeqERKS_>:
   b7e1c:	4281      	cmp	r1, r0
   b7e1e:	b508      	push	{r3, lr}
   b7e20:	d00e      	beq.n	b7e40 <_ZNKSt9type_infoeqERKS_+0x24>
   b7e22:	6840      	ldr	r0, [r0, #4]
   b7e24:	7803      	ldrb	r3, [r0, #0]
   b7e26:	2b2a      	cmp	r3, #42	; 0x2a
   b7e28:	d00c      	beq.n	b7e44 <_ZNKSt9type_infoeqERKS_+0x28>
   b7e2a:	6849      	ldr	r1, [r1, #4]
   b7e2c:	780b      	ldrb	r3, [r1, #0]
   b7e2e:	2b2a      	cmp	r3, #42	; 0x2a
   b7e30:	bf08      	it	eq
   b7e32:	3101      	addeq	r1, #1
   b7e34:	f7fc fd3a 	bl	b48ac <strcmp>
   b7e38:	fab0 f080 	clz	r0, r0
   b7e3c:	0940      	lsrs	r0, r0, #5
   b7e3e:	bd08      	pop	{r3, pc}
   b7e40:	2001      	movs	r0, #1
   b7e42:	e7fc      	b.n	b7e3e <_ZNKSt9type_infoeqERKS_+0x22>
   b7e44:	2000      	movs	r0, #0
   b7e46:	e7fa      	b.n	b7e3e <_ZNKSt9type_infoeqERKS_+0x22>

000b7e48 <atexit>:
   b7e48:	2300      	movs	r3, #0
   b7e4a:	4601      	mov	r1, r0
   b7e4c:	461a      	mov	r2, r3
   b7e4e:	4618      	mov	r0, r3
   b7e50:	f000 b94a 	b.w	b80e8 <__register_exitproc>

000b7e54 <isprint>:
   b7e54:	4b02      	ldr	r3, [pc, #8]	; (b7e60 <isprint+0xc>)
   b7e56:	4418      	add	r0, r3
   b7e58:	7840      	ldrb	r0, [r0, #1]
   b7e5a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7e5e:	4770      	bx	lr
   b7e60:	000b8705 	.word	0x000b8705

000b7e64 <memcmp>:
   b7e64:	b510      	push	{r4, lr}
   b7e66:	3901      	subs	r1, #1
   b7e68:	4402      	add	r2, r0
   b7e6a:	4290      	cmp	r0, r2
   b7e6c:	d101      	bne.n	b7e72 <memcmp+0xe>
   b7e6e:	2000      	movs	r0, #0
   b7e70:	e005      	b.n	b7e7e <memcmp+0x1a>
   b7e72:	7803      	ldrb	r3, [r0, #0]
   b7e74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7e78:	42a3      	cmp	r3, r4
   b7e7a:	d001      	beq.n	b7e80 <memcmp+0x1c>
   b7e7c:	1b18      	subs	r0, r3, r4
   b7e7e:	bd10      	pop	{r4, pc}
   b7e80:	3001      	adds	r0, #1
   b7e82:	e7f2      	b.n	b7e6a <memcmp+0x6>

000b7e84 <memcpy>:
   b7e84:	440a      	add	r2, r1
   b7e86:	4291      	cmp	r1, r2
   b7e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7e8c:	d100      	bne.n	b7e90 <memcpy+0xc>
   b7e8e:	4770      	bx	lr
   b7e90:	b510      	push	{r4, lr}
   b7e92:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7e96:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7e9a:	4291      	cmp	r1, r2
   b7e9c:	d1f9      	bne.n	b7e92 <memcpy+0xe>
   b7e9e:	bd10      	pop	{r4, pc}

000b7ea0 <memmove>:
   b7ea0:	4288      	cmp	r0, r1
   b7ea2:	b510      	push	{r4, lr}
   b7ea4:	eb01 0402 	add.w	r4, r1, r2
   b7ea8:	d902      	bls.n	b7eb0 <memmove+0x10>
   b7eaa:	4284      	cmp	r4, r0
   b7eac:	4623      	mov	r3, r4
   b7eae:	d807      	bhi.n	b7ec0 <memmove+0x20>
   b7eb0:	1e43      	subs	r3, r0, #1
   b7eb2:	42a1      	cmp	r1, r4
   b7eb4:	d008      	beq.n	b7ec8 <memmove+0x28>
   b7eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7eba:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7ebe:	e7f8      	b.n	b7eb2 <memmove+0x12>
   b7ec0:	4402      	add	r2, r0
   b7ec2:	4601      	mov	r1, r0
   b7ec4:	428a      	cmp	r2, r1
   b7ec6:	d100      	bne.n	b7eca <memmove+0x2a>
   b7ec8:	bd10      	pop	{r4, pc}
   b7eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7ed2:	e7f7      	b.n	b7ec4 <memmove+0x24>

000b7ed4 <memset>:
   b7ed4:	4402      	add	r2, r0
   b7ed6:	4603      	mov	r3, r0
   b7ed8:	4293      	cmp	r3, r2
   b7eda:	d100      	bne.n	b7ede <memset+0xa>
   b7edc:	4770      	bx	lr
   b7ede:	f803 1b01 	strb.w	r1, [r3], #1
   b7ee2:	e7f9      	b.n	b7ed8 <memset+0x4>

000b7ee4 <srand>:
   b7ee4:	b538      	push	{r3, r4, r5, lr}
   b7ee6:	4b10      	ldr	r3, [pc, #64]	; (b7f28 <srand+0x44>)
   b7ee8:	681d      	ldr	r5, [r3, #0]
   b7eea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7eec:	4604      	mov	r4, r0
   b7eee:	b9b3      	cbnz	r3, b7f1e <srand+0x3a>
   b7ef0:	2018      	movs	r0, #24
   b7ef2:	f7fd fa4f 	bl	b5394 <malloc>
   b7ef6:	4602      	mov	r2, r0
   b7ef8:	63a8      	str	r0, [r5, #56]	; 0x38
   b7efa:	b920      	cbnz	r0, b7f06 <srand+0x22>
   b7efc:	4b0b      	ldr	r3, [pc, #44]	; (b7f2c <srand+0x48>)
   b7efe:	480c      	ldr	r0, [pc, #48]	; (b7f30 <srand+0x4c>)
   b7f00:	2142      	movs	r1, #66	; 0x42
   b7f02:	f7fd fa77 	bl	b53f4 <__assert_func>
   b7f06:	490b      	ldr	r1, [pc, #44]	; (b7f34 <srand+0x50>)
   b7f08:	4b0b      	ldr	r3, [pc, #44]	; (b7f38 <srand+0x54>)
   b7f0a:	e9c0 1300 	strd	r1, r3, [r0]
   b7f0e:	4b0b      	ldr	r3, [pc, #44]	; (b7f3c <srand+0x58>)
   b7f10:	6083      	str	r3, [r0, #8]
   b7f12:	230b      	movs	r3, #11
   b7f14:	8183      	strh	r3, [r0, #12]
   b7f16:	2100      	movs	r1, #0
   b7f18:	2001      	movs	r0, #1
   b7f1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7f1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f20:	2200      	movs	r2, #0
   b7f22:	611c      	str	r4, [r3, #16]
   b7f24:	615a      	str	r2, [r3, #20]
   b7f26:	bd38      	pop	{r3, r4, r5, pc}
   b7f28:	2003e5b0 	.word	0x2003e5b0
   b7f2c:	000b8671 	.word	0x000b8671
   b7f30:	000b8688 	.word	0x000b8688
   b7f34:	abcd330e 	.word	0xabcd330e
   b7f38:	e66d1234 	.word	0xe66d1234
   b7f3c:	0005deec 	.word	0x0005deec

000b7f40 <strchr>:
   b7f40:	b2c9      	uxtb	r1, r1
   b7f42:	4603      	mov	r3, r0
   b7f44:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7f48:	b11a      	cbz	r2, b7f52 <strchr+0x12>
   b7f4a:	428a      	cmp	r2, r1
   b7f4c:	d1f9      	bne.n	b7f42 <strchr+0x2>
   b7f4e:	4618      	mov	r0, r3
   b7f50:	4770      	bx	lr
   b7f52:	2900      	cmp	r1, #0
   b7f54:	bf18      	it	ne
   b7f56:	2300      	movne	r3, #0
   b7f58:	e7f9      	b.n	b7f4e <strchr+0xe>

000b7f5a <strchrnul>:
   b7f5a:	b510      	push	{r4, lr}
   b7f5c:	4604      	mov	r4, r0
   b7f5e:	f7ff ffef 	bl	b7f40 <strchr>
   b7f62:	b918      	cbnz	r0, b7f6c <strchrnul+0x12>
   b7f64:	4620      	mov	r0, r4
   b7f66:	f7fc fcab 	bl	b48c0 <strlen>
   b7f6a:	4420      	add	r0, r4
   b7f6c:	bd10      	pop	{r4, pc}

000b7f6e <strcpy>:
   b7f6e:	4603      	mov	r3, r0
   b7f70:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7f74:	f803 2b01 	strb.w	r2, [r3], #1
   b7f78:	2a00      	cmp	r2, #0
   b7f7a:	d1f9      	bne.n	b7f70 <strcpy+0x2>
   b7f7c:	4770      	bx	lr

000b7f7e <strncmp>:
   b7f7e:	b510      	push	{r4, lr}
   b7f80:	b17a      	cbz	r2, b7fa2 <strncmp+0x24>
   b7f82:	4603      	mov	r3, r0
   b7f84:	3901      	subs	r1, #1
   b7f86:	1884      	adds	r4, r0, r2
   b7f88:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7f8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7f90:	4290      	cmp	r0, r2
   b7f92:	d101      	bne.n	b7f98 <strncmp+0x1a>
   b7f94:	42a3      	cmp	r3, r4
   b7f96:	d101      	bne.n	b7f9c <strncmp+0x1e>
   b7f98:	1a80      	subs	r0, r0, r2
   b7f9a:	bd10      	pop	{r4, pc}
   b7f9c:	2800      	cmp	r0, #0
   b7f9e:	d1f3      	bne.n	b7f88 <strncmp+0xa>
   b7fa0:	e7fa      	b.n	b7f98 <strncmp+0x1a>
   b7fa2:	4610      	mov	r0, r2
   b7fa4:	e7f9      	b.n	b7f9a <strncmp+0x1c>

000b7fa6 <strrchr>:
   b7fa6:	b538      	push	{r3, r4, r5, lr}
   b7fa8:	4603      	mov	r3, r0
   b7faa:	460c      	mov	r4, r1
   b7fac:	b969      	cbnz	r1, b7fca <strrchr+0x24>
   b7fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7fb2:	f7ff bfc5 	b.w	b7f40 <strchr>
   b7fb6:	1c43      	adds	r3, r0, #1
   b7fb8:	4605      	mov	r5, r0
   b7fba:	4621      	mov	r1, r4
   b7fbc:	4618      	mov	r0, r3
   b7fbe:	f7ff ffbf 	bl	b7f40 <strchr>
   b7fc2:	2800      	cmp	r0, #0
   b7fc4:	d1f7      	bne.n	b7fb6 <strrchr+0x10>
   b7fc6:	4628      	mov	r0, r5
   b7fc8:	bd38      	pop	{r3, r4, r5, pc}
   b7fca:	2500      	movs	r5, #0
   b7fcc:	e7f5      	b.n	b7fba <strrchr+0x14>
	...

000b7fd0 <_strtol_l.constprop.0>:
   b7fd0:	2b01      	cmp	r3, #1
   b7fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7fd6:	d001      	beq.n	b7fdc <_strtol_l.constprop.0+0xc>
   b7fd8:	2b24      	cmp	r3, #36	; 0x24
   b7fda:	d906      	bls.n	b7fea <_strtol_l.constprop.0+0x1a>
   b7fdc:	f7fd fa02 	bl	b53e4 <__errno>
   b7fe0:	2316      	movs	r3, #22
   b7fe2:	6003      	str	r3, [r0, #0]
   b7fe4:	2000      	movs	r0, #0
   b7fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7fea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b80d0 <_strtol_l.constprop.0+0x100>
   b7fee:	460d      	mov	r5, r1
   b7ff0:	462e      	mov	r6, r5
   b7ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ff6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7ffa:	f017 0708 	ands.w	r7, r7, #8
   b7ffe:	d1f7      	bne.n	b7ff0 <_strtol_l.constprop.0+0x20>
   b8000:	2c2d      	cmp	r4, #45	; 0x2d
   b8002:	d132      	bne.n	b806a <_strtol_l.constprop.0+0x9a>
   b8004:	782c      	ldrb	r4, [r5, #0]
   b8006:	2701      	movs	r7, #1
   b8008:	1cb5      	adds	r5, r6, #2
   b800a:	2b00      	cmp	r3, #0
   b800c:	d05b      	beq.n	b80c6 <_strtol_l.constprop.0+0xf6>
   b800e:	2b10      	cmp	r3, #16
   b8010:	d109      	bne.n	b8026 <_strtol_l.constprop.0+0x56>
   b8012:	2c30      	cmp	r4, #48	; 0x30
   b8014:	d107      	bne.n	b8026 <_strtol_l.constprop.0+0x56>
   b8016:	782c      	ldrb	r4, [r5, #0]
   b8018:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b801c:	2c58      	cmp	r4, #88	; 0x58
   b801e:	d14d      	bne.n	b80bc <_strtol_l.constprop.0+0xec>
   b8020:	786c      	ldrb	r4, [r5, #1]
   b8022:	2310      	movs	r3, #16
   b8024:	3502      	adds	r5, #2
   b8026:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b802a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b802e:	f04f 0c00 	mov.w	ip, #0
   b8032:	fbb8 f9f3 	udiv	r9, r8, r3
   b8036:	4666      	mov	r6, ip
   b8038:	fb03 8a19 	mls	sl, r3, r9, r8
   b803c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8040:	f1be 0f09 	cmp.w	lr, #9
   b8044:	d816      	bhi.n	b8074 <_strtol_l.constprop.0+0xa4>
   b8046:	4674      	mov	r4, lr
   b8048:	42a3      	cmp	r3, r4
   b804a:	dd24      	ble.n	b8096 <_strtol_l.constprop.0+0xc6>
   b804c:	f1bc 0f00 	cmp.w	ip, #0
   b8050:	db1e      	blt.n	b8090 <_strtol_l.constprop.0+0xc0>
   b8052:	45b1      	cmp	r9, r6
   b8054:	d31c      	bcc.n	b8090 <_strtol_l.constprop.0+0xc0>
   b8056:	d101      	bne.n	b805c <_strtol_l.constprop.0+0x8c>
   b8058:	45a2      	cmp	sl, r4
   b805a:	db19      	blt.n	b8090 <_strtol_l.constprop.0+0xc0>
   b805c:	fb06 4603 	mla	r6, r6, r3, r4
   b8060:	f04f 0c01 	mov.w	ip, #1
   b8064:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8068:	e7e8      	b.n	b803c <_strtol_l.constprop.0+0x6c>
   b806a:	2c2b      	cmp	r4, #43	; 0x2b
   b806c:	bf04      	itt	eq
   b806e:	782c      	ldrbeq	r4, [r5, #0]
   b8070:	1cb5      	addeq	r5, r6, #2
   b8072:	e7ca      	b.n	b800a <_strtol_l.constprop.0+0x3a>
   b8074:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8078:	f1be 0f19 	cmp.w	lr, #25
   b807c:	d801      	bhi.n	b8082 <_strtol_l.constprop.0+0xb2>
   b807e:	3c37      	subs	r4, #55	; 0x37
   b8080:	e7e2      	b.n	b8048 <_strtol_l.constprop.0+0x78>
   b8082:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8086:	f1be 0f19 	cmp.w	lr, #25
   b808a:	d804      	bhi.n	b8096 <_strtol_l.constprop.0+0xc6>
   b808c:	3c57      	subs	r4, #87	; 0x57
   b808e:	e7db      	b.n	b8048 <_strtol_l.constprop.0+0x78>
   b8090:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8094:	e7e6      	b.n	b8064 <_strtol_l.constprop.0+0x94>
   b8096:	f1bc 0f00 	cmp.w	ip, #0
   b809a:	da05      	bge.n	b80a8 <_strtol_l.constprop.0+0xd8>
   b809c:	2322      	movs	r3, #34	; 0x22
   b809e:	6003      	str	r3, [r0, #0]
   b80a0:	4646      	mov	r6, r8
   b80a2:	b942      	cbnz	r2, b80b6 <_strtol_l.constprop.0+0xe6>
   b80a4:	4630      	mov	r0, r6
   b80a6:	e79e      	b.n	b7fe6 <_strtol_l.constprop.0+0x16>
   b80a8:	b107      	cbz	r7, b80ac <_strtol_l.constprop.0+0xdc>
   b80aa:	4276      	negs	r6, r6
   b80ac:	2a00      	cmp	r2, #0
   b80ae:	d0f9      	beq.n	b80a4 <_strtol_l.constprop.0+0xd4>
   b80b0:	f1bc 0f00 	cmp.w	ip, #0
   b80b4:	d000      	beq.n	b80b8 <_strtol_l.constprop.0+0xe8>
   b80b6:	1e69      	subs	r1, r5, #1
   b80b8:	6011      	str	r1, [r2, #0]
   b80ba:	e7f3      	b.n	b80a4 <_strtol_l.constprop.0+0xd4>
   b80bc:	2430      	movs	r4, #48	; 0x30
   b80be:	2b00      	cmp	r3, #0
   b80c0:	d1b1      	bne.n	b8026 <_strtol_l.constprop.0+0x56>
   b80c2:	2308      	movs	r3, #8
   b80c4:	e7af      	b.n	b8026 <_strtol_l.constprop.0+0x56>
   b80c6:	2c30      	cmp	r4, #48	; 0x30
   b80c8:	d0a5      	beq.n	b8016 <_strtol_l.constprop.0+0x46>
   b80ca:	230a      	movs	r3, #10
   b80cc:	e7ab      	b.n	b8026 <_strtol_l.constprop.0+0x56>
   b80ce:	bf00      	nop
   b80d0:	000b8706 	.word	0x000b8706

000b80d4 <strtol>:
   b80d4:	4613      	mov	r3, r2
   b80d6:	460a      	mov	r2, r1
   b80d8:	4601      	mov	r1, r0
   b80da:	4802      	ldr	r0, [pc, #8]	; (b80e4 <strtol+0x10>)
   b80dc:	6800      	ldr	r0, [r0, #0]
   b80de:	f7ff bf77 	b.w	b7fd0 <_strtol_l.constprop.0>
   b80e2:	bf00      	nop
   b80e4:	2003e5b0 	.word	0x2003e5b0

000b80e8 <__register_exitproc>:
   b80e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b80ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b81a8 <__register_exitproc+0xc0>
   b80f0:	4606      	mov	r6, r0
   b80f2:	f8d8 0000 	ldr.w	r0, [r8]
   b80f6:	461f      	mov	r7, r3
   b80f8:	460d      	mov	r5, r1
   b80fa:	4691      	mov	r9, r2
   b80fc:	f000 f856 	bl	b81ac <__retarget_lock_acquire_recursive>
   b8100:	4b25      	ldr	r3, [pc, #148]	; (b8198 <__register_exitproc+0xb0>)
   b8102:	681c      	ldr	r4, [r3, #0]
   b8104:	b934      	cbnz	r4, b8114 <__register_exitproc+0x2c>
   b8106:	4c25      	ldr	r4, [pc, #148]	; (b819c <__register_exitproc+0xb4>)
   b8108:	601c      	str	r4, [r3, #0]
   b810a:	4b25      	ldr	r3, [pc, #148]	; (b81a0 <__register_exitproc+0xb8>)
   b810c:	b113      	cbz	r3, b8114 <__register_exitproc+0x2c>
   b810e:	681b      	ldr	r3, [r3, #0]
   b8110:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8114:	6863      	ldr	r3, [r4, #4]
   b8116:	2b1f      	cmp	r3, #31
   b8118:	dd07      	ble.n	b812a <__register_exitproc+0x42>
   b811a:	f8d8 0000 	ldr.w	r0, [r8]
   b811e:	f000 f847 	bl	b81b0 <__retarget_lock_release_recursive>
   b8122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b812a:	b34e      	cbz	r6, b8180 <__register_exitproc+0x98>
   b812c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8130:	b988      	cbnz	r0, b8156 <__register_exitproc+0x6e>
   b8132:	4b1c      	ldr	r3, [pc, #112]	; (b81a4 <__register_exitproc+0xbc>)
   b8134:	b923      	cbnz	r3, b8140 <__register_exitproc+0x58>
   b8136:	f8d8 0000 	ldr.w	r0, [r8]
   b813a:	f000 f838 	bl	b81ae <__retarget_lock_release>
   b813e:	e7f0      	b.n	b8122 <__register_exitproc+0x3a>
   b8140:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8144:	f7fd f926 	bl	b5394 <malloc>
   b8148:	2800      	cmp	r0, #0
   b814a:	d0f4      	beq.n	b8136 <__register_exitproc+0x4e>
   b814c:	2300      	movs	r3, #0
   b814e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8152:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8156:	6863      	ldr	r3, [r4, #4]
   b8158:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b815c:	2201      	movs	r2, #1
   b815e:	409a      	lsls	r2, r3
   b8160:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8164:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8168:	4313      	orrs	r3, r2
   b816a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b816e:	2e02      	cmp	r6, #2
   b8170:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8174:	bf02      	ittt	eq
   b8176:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b817a:	4313      	orreq	r3, r2
   b817c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8180:	6863      	ldr	r3, [r4, #4]
   b8182:	f8d8 0000 	ldr.w	r0, [r8]
   b8186:	1c5a      	adds	r2, r3, #1
   b8188:	3302      	adds	r3, #2
   b818a:	6062      	str	r2, [r4, #4]
   b818c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8190:	f000 f80e 	bl	b81b0 <__retarget_lock_release_recursive>
   b8194:	2000      	movs	r0, #0
   b8196:	e7c6      	b.n	b8126 <__register_exitproc+0x3e>
   b8198:	2003e7e8 	.word	0x2003e7e8
   b819c:	2003e75c 	.word	0x2003e75c
   b81a0:	00000000 	.word	0x00000000
   b81a4:	000b5395 	.word	0x000b5395
   b81a8:	2003e614 	.word	0x2003e614

000b81ac <__retarget_lock_acquire_recursive>:
   b81ac:	4770      	bx	lr

000b81ae <__retarget_lock_release>:
   b81ae:	4770      	bx	lr

000b81b0 <__retarget_lock_release_recursive>:
   b81b0:	4770      	bx	lr

000b81b2 <link_code_end>:
	...

000b81b4 <dynalib_user>:
   b81b4:	48d1 000b 490d 000b 4935 000b 4939 000b     .H...I..5I..9I..
   b81c4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b81d4:	7620 7269 7574 6c61 6c00 7875 3d20 7b20      virtual.lux = {
   b81e4:	6625 007d 6f6d 6576 656d 746e 3d20 7b20     %f}.movement = {
   b81f4:	6425 007d 6863 6365 206b 203d 7825 0000     %d}.check = %x..

000b8204 <_ZTVN5spark10LogHandlerE>:
	...
   b8214:	4955 000b 497d 000b                         UI..}I..

000b821c <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8224:	4981 000b 49b5 000b 6a65 000b 6c09 000b     .I...I..ej...l..

000b8234 <_ZTVN5spark12NetworkClassE>:
	...
   b823c:	5415 000b 541f 000b 5429 000b 5433 000b     .T...T..)T..3T..
   b824c:	543d 000b 5449 000b 5455 000b 545d 000b     =T..IT..UT..]T..
   b825c:	5465 000b 5471 000b 5479 000b 5483 000b     eT..qT..yT...T..
   b826c:	548d 000b                                   .T..

000b8270 <_ZTVN5spark9WiFiClassE>:
	...
   b8278:	55d7 000b 55cd 000b 55c3 000b 5579 000b     .U...U...U..yU..
   b8288:	55b7 000b 55ab 000b 5455 000b 545d 000b     .U...U..UT..]T..
   b8298:	559f 000b 5597 000b 558d 000b 5583 000b     .U...U...U...U..
   b82a8:	548d 000b                                   .T..

000b82ac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b82b4 <_ZTV7TwoWire>:
	...
   b82bc:	55f5 000b 563f 000b 5617 000b 55f7 000b     .U..?V...V...U..
   b82cc:	561f 000b 5627 000b 562f 000b 5637 000b     .V..'V../V..7V..
   b82dc:	6425 2500 0075 2575 3430 0078               %d.%u.u%04x.

000b82e8 <_ZTV9USBSerial>:
	...
   b82f0:	5ab3 000b 5b1b 000b 5af1 000b 6db5 000b     .Z...[...Z...m..
   b8300:	5ae3 000b 5ab5 000b 5ac5 000b 5b15 000b     .Z...Z...Z...[..
   b8310:	5ad5 000b 5aad 000b                         .Z...Z..

000b8318 <_ZTV9IPAddress>:
	...
   b8320:	5bcd 000b 5bbd 000b 5bbf 000b 5925 252d     .[...[...[..%Y-%
   b8330:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b8340:	7361 7463 6d69 0065 6162 6475 5300 7265     asctime.baud.Ser
   b8350:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b8360:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b8370:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b8380:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b8390:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b83a0:	0a0d 6d00 6600 6c00 006e 6e66 7400 6300     ...m.f.ln.fn.t.c
   b83b0:	646f 0065 6564 6174 6c69 0000               ode.detail..

000b83bc <_ZTVN5spark16JSONStreamWriterE>:
	...
   b83c4:	5e39 000b 5e5f 000b 5e1d 000b 5703 000b     9^.._^...^...W..

000b83d4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b83dc:	630d 000b 6325 000b 6a65 000b 6c09 000b     .c..%c..ej...l..

000b83ec <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b83f4:	6339 000b 634d 000b 6c41 000b 5e25 000b     9c..Mc..Al..%^..

000b8404 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b840c:	5e37 000b 5e6d 000b 69c9 000b 5e27 000b     7^..m^...i..'^..

000b841c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8424:	5e35 000b 5e7b 000b 6251 000b 5e9d 000b     5^..{^..Qb...^..
   b8434:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   b8444:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   b8454:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   b8464:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   b8474:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   b8484:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   b8494:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   b84a4:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   b84b4:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b84c4:	7020 6565 2072 6543 746e 6172 206c 6564      peer Central de
   b84d4:	6976 6563 002e 6f43 6e6e 6365 6574 0064     vice..Connected.
   b84e4:	6944 6373 6e6f 656e 7463 6465 0000 0000     Disconnected....

000b84f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b84fc:	6e47 000b 6e69 000b 71fd 000b 6e77 000b     Gn..in...q..wn..
   b850c:	6e49 000b                                   In..

000b8510 <_ZTV11USARTSerial>:
	...
   b8518:	7721 000b 778d 000b 7765 000b 6db5 000b     !w...w..ew...m..
   b8528:	7735 000b 7751 000b 7743 000b 775f 000b     5w..Qw..Cw.._w..
   b8538:	7723 000b 7727 000b                         #w..'w..

000b8540 <_ZTVN5spark13EthernetClassE>:
	...
   b8548:	786f 000b 7865 000b 785b 000b 7851 000b     ox..ex..[x..Qx..
   b8558:	7845 000b 7839 000b 5455 000b 545d 000b     Ex..9x..UT..]T..
   b8568:	782d 000b 7825 000b 781b 000b 7811 000b     -x..%x...x...x..
   b8578:	548d 000b                                   .T..

000b857c <_ZSt7nothrow>:
	...

000b857d <_ZTSSt19_Sp_make_shared_tag>:
   b857d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b858d:	6572 5f64 6174 0067 0000                     red_tag....

000b8598 <_ZTISt19_Sp_make_shared_tag>:
   b8598:	85d8 000b 857d 000b                         ....}...

000b85a0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b85a0:	8638 000b 85ac 000b 865c 000b               8.......\...

000b85ac <_ZTSN10__cxxabiv117__class_type_infoE>:
   b85ac:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b85bc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b85cc:	0045 0000                                   E...

000b85d0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b85d0:	0000 0000 85a0 000b 7c71 000b 7c85 000b     ........q|...|..
   b85e0:	7e19 000b 7e19 000b 7cef 000b 7c31 000b     .~...~...|..1|..
   b85f0:	7cd7 000b 7c99 000b 7c63 000b               .|...|..c|..

000b85fc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b85fc:	8638 000b 8608 000b 85a0 000b               8...........

000b8608 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8608:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8618:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8628:	666e 456f 0000 0000                         nfoE....

000b8630 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8630:	0000 0000 85fc 000b 7d19 000b 7d2d 000b     .........}..-}..
   b8640:	7e19 000b 7e19 000b 7cef 000b 7c31 000b     .~...~...|..1|..
   b8650:	7ded 000b 7d79 000b 7d41 000b               .}..y}..A}..

000b865c <_ZTISt9type_info>:
   b865c:	85d8 000b 8664 000b                         ....d...

000b8664 <_ZTSSt9type_info>:
   b8664:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8674:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8684:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8694:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b86a4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b86b4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b86c4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b86d4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b86e4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b86f4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8705 <_ctype_>:
   b8705:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8715:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8725:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8735:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8745:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8755:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8765:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8775:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8785:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b8806 <link_const_data_end>:
	...

000b8808 <link_constructors_location>:
   b8808:	000b4e31 	.word	0x000b4e31
   b880c:	000b5565 	.word	0x000b5565
   b8810:	000b55e1 	.word	0x000b55e1
   b8814:	000b5dfd 	.word	0x000b5dfd
   b8818:	000b5e09 	.word	0x000b5e09
   b881c:	000b6a55 	.word	0x000b6a55
   b8820:	000b7711 	.word	0x000b7711
   b8824:	000b77d9 	.word	0x000b77d9
   b8828:	000b7879 	.word	0x000b7879
