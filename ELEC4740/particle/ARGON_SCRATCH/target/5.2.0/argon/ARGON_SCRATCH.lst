
/home/elec4740/Documents/particle/ARGON_SCRATCH/target/5.2.0/argon/ARGON_SCRATCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005468  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9488  000b9488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000098  2003e544  000b94ac  0000e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000214  2003e5dc  2003e5dc  0001e5dc  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9544  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9548  000b9548  00019548  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b954e  000b954e  0001954e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9572  000b9572  00019572  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0013860c  00000000  00000000  00019576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013ea2  00000000  00000000  00151b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003210  00000000  00000000  00165a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003723a  00000000  00000000  00168c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003ed3b  00000000  00000000  0019fe6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00146938  00000000  00000000  001deba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00040545  00000000  00000000  003254e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000b898  00000000  00000000  00365a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009094  00000000  00000000  003712c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__aeabi_d2f>:
   b47bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b47c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b47c4:	bf24      	itt	cs
   b47c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b47ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b47ce:	d90d      	bls.n	b47ec <__aeabi_d2f+0x30>
   b47d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b47d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b47d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b47dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b47e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b47e4:	bf08      	it	eq
   b47e6:	f020 0001 	biceq.w	r0, r0, #1
   b47ea:	4770      	bx	lr
   b47ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b47f0:	d121      	bne.n	b4836 <__aeabi_d2f+0x7a>
   b47f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b47f6:	bfbc      	itt	lt
   b47f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b47fc:	4770      	bxlt	lr
   b47fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4802:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4806:	f1c2 0218 	rsb	r2, r2, #24
   b480a:	f1c2 0c20 	rsb	ip, r2, #32
   b480e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4812:	fa20 f002 	lsr.w	r0, r0, r2
   b4816:	bf18      	it	ne
   b4818:	f040 0001 	orrne.w	r0, r0, #1
   b481c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4824:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4828:	ea40 000c 	orr.w	r0, r0, ip
   b482c:	fa23 f302 	lsr.w	r3, r3, r2
   b4830:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4834:	e7cc      	b.n	b47d0 <__aeabi_d2f+0x14>
   b4836:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b483a:	d107      	bne.n	b484c <__aeabi_d2f+0x90>
   b483c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4840:	bf1e      	ittt	ne
   b4842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b484a:	4770      	bxne	lr
   b484c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4858:	4770      	bx	lr
   b485a:	bf00      	nop

000b485c <strcmp>:
   b485c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4860:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4864:	2a01      	cmp	r2, #1
   b4866:	bf28      	it	cs
   b4868:	429a      	cmpcs	r2, r3
   b486a:	d0f7      	beq.n	b485c <strcmp>
   b486c:	1ad0      	subs	r0, r2, r3
   b486e:	4770      	bx	lr

000b4870 <strlen>:
   b4870:	4603      	mov	r3, r0
   b4872:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4876:	2a00      	cmp	r2, #0
   b4878:	d1fb      	bne.n	b4872 <strlen+0x2>
   b487a:	1a18      	subs	r0, r3, r0
   b487c:	3801      	subs	r0, #1
   b487e:	4770      	bx	lr

000b4880 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4880:	4809      	ldr	r0, [pc, #36]	; (b48a8 <module_user_pre_init+0x28>)
   b4882:	490a      	ldr	r1, [pc, #40]	; (b48ac <module_user_pre_init+0x2c>)
   b4884:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4886:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4888:	d005      	beq.n	b4896 <module_user_pre_init+0x16>
   b488a:	4a09      	ldr	r2, [pc, #36]	; (b48b0 <module_user_pre_init+0x30>)
   b488c:	4282      	cmp	r2, r0
   b488e:	d002      	beq.n	b4896 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4890:	1a12      	subs	r2, r2, r0
   b4892:	f004 f86d 	bl	b8970 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4896:	4807      	ldr	r0, [pc, #28]	; (b48b4 <module_user_pre_init+0x34>)
   b4898:	4a07      	ldr	r2, [pc, #28]	; (b48b8 <module_user_pre_init+0x38>)
   b489a:	2100      	movs	r1, #0
   b489c:	1a12      	subs	r2, r2, r0
   b489e:	f004 f88f 	bl	b89c0 <memset>
    return &link_global_data_start;
}
   b48a2:	4801      	ldr	r0, [pc, #4]	; (b48a8 <module_user_pre_init+0x28>)
   b48a4:	bd08      	pop	{r3, pc}
   b48a6:	bf00      	nop
   b48a8:	2003e544 	.word	0x2003e544
   b48ac:	000b94ac 	.word	0x000b94ac
   b48b0:	2003e5dc 	.word	0x2003e5dc
   b48b4:	2003e5dc 	.word	0x2003e5dc
   b48b8:	2003e7f0 	.word	0x2003e7f0

000b48bc <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48bc:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48be:	4e07      	ldr	r6, [pc, #28]	; (b48dc <module_user_init+0x20>)
   b48c0:	4c07      	ldr	r4, [pc, #28]	; (b48e0 <module_user_init+0x24>)
    module_user_init_hook();
   b48c2:	f001 fabd 	bl	b5e40 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c6:	1ba4      	subs	r4, r4, r6
   b48c8:	08a4      	lsrs	r4, r4, #2
   b48ca:	2500      	movs	r5, #0
   b48cc:	42ac      	cmp	r4, r5
   b48ce:	d100      	bne.n	b48d2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48d0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48d2:	f856 3b04 	ldr.w	r3, [r6], #4
   b48d6:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48d8:	3501      	adds	r5, #1
   b48da:	e7f7      	b.n	b48cc <module_user_init+0x10>
   b48dc:	000b9464 	.word	0x000b9464
   b48e0:	000b9488 	.word	0x000b9488

000b48e4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e4:	f000 b870 	b.w	b49c8 <setup>

000b48e8 <module_user_loop>:
}

void module_user_loop() {
   b48e8:	b508      	push	{r3, lr}
    loop();
   b48ea:	f000 f98f 	bl	b4c0c <loop>
    _post_loop();
}
   b48ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48f2:	f001 ba5d 	b.w	b5db0 <_post_loop>

000b48f6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48f6:	f000 bd8f 	b.w	b5418 <malloc>

000b48fa <_Znaj>:
   b48fa:	f000 bd8d 	b.w	b5418 <malloc>

000b48fe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b48fe:	f000 bd93 	b.w	b5428 <free>
	...

000b4904 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4904:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4906:	4a03      	ldr	r2, [pc, #12]	; (b4914 <__cxa_pure_virtual+0x10>)
   b4908:	4903      	ldr	r1, [pc, #12]	; (b4918 <__cxa_pure_virtual+0x14>)
   b490a:	200c      	movs	r0, #12
   b490c:	f000 fcd0 	bl	b52b0 <panic_>
  while (1);
   b4910:	e7fe      	b.n	b4910 <__cxa_pure_virtual+0xc>
   b4912:	bf00      	nop
   b4914:	000b5211 	.word	0x000b5211
   b4918:	000b8ce4 	.word	0x000b8ce4

000b491c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b491c:	7800      	ldrb	r0, [r0, #0]
   b491e:	fab0 f080 	clz	r0, r0
   b4922:	0940      	lsrs	r0, r0, #5
   b4924:	4770      	bx	lr

000b4926 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4926:	2301      	movs	r3, #1
   b4928:	7003      	strb	r3, [r0, #0]
   b492a:	4770      	bx	lr

000b492c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b492c:	4770      	bx	lr
	...

000b4930 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4930:	4b0a      	ldr	r3, [pc, #40]	; (b495c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4932:	b510      	push	{r4, lr}
   b4934:	4604      	mov	r4, r0
   b4936:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4938:	f001 fc4a 	bl	b61d0 <_ZN5spark10LogManager8instanceEv>
   b493c:	4621      	mov	r1, r4
   b493e:	f001 fe94 	bl	b666a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4942:	f001 f959 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b4946:	f001 f949 	bl	b5bdc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b494a:	4620      	mov	r0, r4
   b494c:	4b04      	ldr	r3, [pc, #16]	; (b4960 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b494e:	f840 3b04 	str.w	r3, [r0], #4
   b4952:	f001 fd25 	bl	b63a0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4956:	4620      	mov	r0, r4
   b4958:	bd10      	pop	{r4, pc}
   b495a:	bf00      	nop
   b495c:	000b8dc4 	.word	0x000b8dc4
   b4960:	000b8dac 	.word	0x000b8dac

000b4964 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4964:	b510      	push	{r4, lr}
   b4966:	4604      	mov	r4, r0
    }
   b4968:	f7ff ffe2 	bl	b4930 <_ZN5spark16SerialLogHandlerD1Ev>
   b496c:	4620      	mov	r0, r4
   b496e:	2124      	movs	r1, #36	; 0x24
   b4970:	f7ff ffc5 	bl	b48fe <_ZdlPvj>
   b4974:	4620      	mov	r0, r4
   b4976:	bd10      	pop	{r4, pc}

000b4978 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4978:	b40e      	push	{r1, r2, r3}
   b497a:	b500      	push	{lr}
   b497c:	b08c      	sub	sp, #48	; 0x30
   b497e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4980:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4984:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4988:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b498a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b498e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4990:	6801      	ldr	r1, [r0, #0]
   b4992:	aa04      	add	r2, sp, #16
   b4994:	201e      	movs	r0, #30
    attr.flags = 0;
   b4996:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b499a:	f000 fc99 	bl	b52d0 <log_message_v>
}
   b499e:	b00c      	add	sp, #48	; 0x30
   b49a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b49a4:	b003      	add	sp, #12
   b49a6:	4770      	bx	lr

000b49a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
BlePeerDevice peer;
uint16_t count;


void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context)
{
   b49a8:	b508      	push	{r3, lr}
 memcpy(&count,&data,2);
   b49aa:	4b04      	ldr	r3, [pc, #16]	; (b49bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
 Log.info("count = %d",count);
   b49ac:	4904      	ldr	r1, [pc, #16]	; (b49c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   b49ae:	b282      	uxth	r2, r0
 memcpy(&count,&data,2);
   b49b0:	801a      	strh	r2, [r3, #0]
 Log.info("count = %d",count);
   b49b2:	4804      	ldr	r0, [pc, #16]	; (b49c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   b49b4:	f7ff ffe0 	bl	b4978 <_ZNK5spark6Logger4infoEPKcz>


}
   b49b8:	bd08      	pop	{r3, pc}
   b49ba:	bf00      	nop
   b49bc:	2003e62c 	.word	0x2003e62c
   b49c0:	000b8cf9 	.word	0x000b8cf9
   b49c4:	2003e6c8 	.word	0x2003e6c8

000b49c8 <setup>:




void setup()
{
   b49c8:	b570      	push	{r4, r5, r6, lr}
   b49ca:	b090      	sub	sp, #64	; 0x40
 //(void)logHandler; // Does nothing, just to eliminate the unused variable warning
 Serial.begin(9600); //particle serial monitor --follow >code to put into bash
   b49cc:	f001 f914 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b49d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b49d4:	f001 f8fe 	bl	b5bd4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b49d8:	2000      	movs	r0, #0
   b49da:	f000 fc29 	bl	b5230 <hal_timer_millis>
        while (_while() && !_condition()) {
   b49de:	f247 5530 	movw	r5, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b49e2:	4604      	mov	r4, r0
   b49e4:	2000      	movs	r0, #0
   b49e6:	f000 fc23 	bl	b5230 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b49ea:	1b00      	subs	r0, r0, r4
   b49ec:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b49f0:	42a8      	cmp	r0, r5
   b49f2:	f171 0300 	sbcs.w	r3, r1, #0
   b49f6:	d207      	bcs.n	b4a08 <setup+0x40>
 waitFor(Serial.isConnected, 30000);
   b49f8:	f001 f8fe 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b49fc:	f001 f8f1 	bl	b5be2 <_ZN9USBSerial11isConnectedEv>
   b4a00:	b910      	cbnz	r0, b4a08 <setup+0x40>
            spark_process();
   b4a02:	f000 fc7d 	bl	b5300 <spark_process>
        while (_while() && !_condition()) {
   b4a06:	e7ed      	b.n	b49e4 <setup+0x1c>
   b4a08:	f001 f8f6 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b4a0c:	f001 f8e9 	bl	b5be2 <_ZN9USBSerial11isConnectedEv>
 //Output Pins
 pinMode(LED_ONE_RED,OUTPUT);
   b4a10:	4b3d      	ldr	r3, [pc, #244]	; (b4b08 <setup+0x140>)
   b4a12:	4c3e      	ldr	r4, [pc, #248]	; (b4b0c <setup+0x144>)
   b4a14:	8818      	ldrh	r0, [r3, #0]
   b4a16:	2101      	movs	r1, #1
   b4a18:	f003 fe38 	bl	b868c <pinMode>
 pinMode(LED_ONE_GREEN,OUTPUT); 
   b4a1c:	4b3c      	ldr	r3, [pc, #240]	; (b4b10 <setup+0x148>)
   b4a1e:	2101      	movs	r1, #1
   b4a20:	8818      	ldrh	r0, [r3, #0]
   b4a22:	f003 fe33 	bl	b868c <pinMode>
 pinMode(LED_TWO_RED,OUTPUT);
   b4a26:	4b3b      	ldr	r3, [pc, #236]	; (b4b14 <setup+0x14c>)
   b4a28:	2101      	movs	r1, #1
   b4a2a:	8818      	ldrh	r0, [r3, #0]
   b4a2c:	f003 fe2e 	bl	b868c <pinMode>
 pinMode(LED_TWO_GREEN,OUTPUT);
   b4a30:	4b39      	ldr	r3, [pc, #228]	; (b4b18 <setup+0x150>)
   b4a32:	2101      	movs	r1, #1
   b4a34:	8818      	ldrh	r0, [r3, #0]
   b4a36:	f003 fe29 	bl	b868c <pinMode>
 pinMode(PWM_FAN, OUTPUT);
   b4a3a:	4b38      	ldr	r3, [pc, #224]	; (b4b1c <setup+0x154>)
   b4a3c:	2101      	movs	r1, #1
   b4a3e:	8818      	ldrh	r0, [r3, #0]
   b4a40:	f003 fe24 	bl	b868c <pinMode>
 Serial.println("Output Pins Set");
   b4a44:	f001 f8d8 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b4a48:	4935      	ldr	r1, [pc, #212]	; (b4b20 <setup+0x158>)
   b4a4a:	f002 fa3e 	bl	b6eca <_ZN5Print7printlnEPKc>
 //Input Pins
 pinMode(TEMP_INPUT, INPUT);
   b4a4e:	4b35      	ldr	r3, [pc, #212]	; (b4b24 <setup+0x15c>)
   b4a50:	2100      	movs	r1, #0
   b4a52:	8818      	ldrh	r0, [r3, #0]
   b4a54:	f003 fe1a 	bl	b868c <pinMode>
 pinMode(SOUND_INPUT, INPUT);
   b4a58:	4b33      	ldr	r3, [pc, #204]	; (b4b28 <setup+0x160>)
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	8818      	ldrh	r0, [r3, #0]
   b4a5e:	f003 fe15 	bl	b868c <pinMode>
 pinMode(BUTTON, INPUT);
   b4a62:	4b32      	ldr	r3, [pc, #200]	; (b4b2c <setup+0x164>)
   b4a64:	2100      	movs	r1, #0
   b4a66:	8818      	ldrh	r0, [r3, #0]
   b4a68:	f003 fe10 	bl	b868c <pinMode>
 pinMode(POT,INPUT);
   b4a6c:	4b30      	ldr	r3, [pc, #192]	; (b4b30 <setup+0x168>)
   b4a6e:	2100      	movs	r1, #0
   b4a70:	8818      	ldrh	r0, [r3, #0]
   b4a72:	f003 fe0b 	bl	b868c <pinMode>
 Serial.println("Input Pins Set");
   b4a76:	f001 f8bf 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b4a7a:	492e      	ldr	r1, [pc, #184]	; (b4b34 <setup+0x16c>)
   b4a7c:	f002 fa25 	bl	b6eca <_ZN5Print7printlnEPKc>
 //Start Needed Timers
 // Time_1.start();
 // BlueTooth
 BLE.on();
   b4a80:	f002 fd9e 	bl	b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a84:	f002 fde6 	bl	b7654 <_ZNK8particle14BleLocalDevice2onEv>
 BLE.addCharacteristic(temperatureMeasurementCharacteristic);
   b4a88:	f002 fd9a 	bl	b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4a8c:	4a2a      	ldr	r2, [pc, #168]	; (b4b38 <setup+0x170>)
   b4a8e:	4601      	mov	r1, r0
   b4a90:	a80b      	add	r0, sp, #44	; 0x2c
   b4a92:	f003 fac5 	bl	b8020 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4a96:	a80b      	add	r0, sp, #44	; 0x2c
   b4a98:	f002 fe81 	bl	b779e <_ZN8particle17BleCharacteristicD1Ev>
 // BLE.addCharacteristic(soundMeasurementCharacteristic);
 // BLE.addCharacteristic(buttonMeasurementCharacteristic);
 peerCentralRx01.onDataReceived(onDataReceived, &peerCentralRx01);
   b4a9c:	4a27      	ldr	r2, [pc, #156]	; (b4b3c <setup+0x174>)
   b4a9e:	4928      	ldr	r1, [pc, #160]	; (b4b40 <setup+0x178>)
   b4aa0:	4610      	mov	r0, r2
   b4aa2:	f003 f947 	bl	b7d34 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
 BleAdvertisingData data;
   b4aa6:	a803      	add	r0, sp, #12
   b4aa8:	f002 ff9f 	bl	b79ea <_ZN8particle18BleAdvertisingDataC1Ev>
 data.appendServiceUUID(serviceUuid);
   b4aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4aae:	ad06      	add	r5, sp, #24
   b4ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4ab2:	ad06      	add	r5, sp, #24
   b4ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ab6:	6826      	ldr	r6, [r4, #0]
   b4ab8:	ac0b      	add	r4, sp, #44	; 0x2c
   b4aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4abc:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4abe:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ac0:	f002 fb78 	bl	b71b4 <_ZNK8particle7BleUuid4typeEv>
   b4ac4:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4ac6:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4ac8:	b9b4      	cbnz	r4, b4af8 <setup+0x130>
            uint16_t uuid16 = tempUUID.shorted();
   b4aca:	f002 fb8f 	bl	b71ec <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ace:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4ad0:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4ad4:	2302      	movs	r3, #2
   b4ad6:	f10d 020a 	add.w	r2, sp, #10
   b4ada:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4adc:	a803      	add	r0, sp, #12
   b4ade:	f002 ff79 	bl	b79d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
 BLE.advertise(&data);
   b4ae2:	f002 fd6d 	bl	b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ae6:	2200      	movs	r2, #0
   b4ae8:	a903      	add	r1, sp, #12
   b4aea:	f002 fe04 	bl	b76f6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4aee:	9803      	ldr	r0, [sp, #12]
   b4af0:	f000 fc9a 	bl	b5428 <free>
}
   b4af4:	b010      	add	sp, #64	; 0x40
   b4af6:	bd70      	pop	{r4, r5, r6, pc}
   b4af8:	f002 fb7a 	bl	b71f0 <_ZNK8particle7BleUuid8rawBytesEv>
   b4afc:	2300      	movs	r3, #0
   b4afe:	9300      	str	r3, [sp, #0]
   b4b00:	4602      	mov	r2, r0
   b4b02:	2310      	movs	r3, #16
   b4b04:	2107      	movs	r1, #7
   b4b06:	e7e9      	b.n	b4adc <setup+0x114>
   b4b08:	2003e550 	.word	0x2003e550
   b4b0c:	2003e604 	.word	0x2003e604
   b4b10:	2003e54c 	.word	0x2003e54c
   b4b14:	2003e558 	.word	0x2003e558
   b4b18:	2003e554 	.word	0x2003e554
   b4b1c:	2003e560 	.word	0x2003e560
   b4b20:	000b8d04 	.word	0x000b8d04
   b4b24:	2003e564 	.word	0x2003e564
   b4b28:	2003e5e0 	.word	0x2003e5e0
   b4b2c:	2003e544 	.word	0x2003e544
   b4b30:	2003e55c 	.word	0x2003e55c
   b4b34:	000b8d14 	.word	0x000b8d14
   b4b38:	2003e670 	.word	0x2003e670
   b4b3c:	2003e660 	.word	0x2003e660
   b4b40:	000b49a9 	.word	0x000b49a9

000b4b44 <_Z11Push_Buttonv>:
 }
}


uint16_t Push_Button()
{
   b4b44:	b538      	push	{r3, r4, r5, lr}
 uint16_t Read_Button = digitalRead(BUTTON);
   b4b46:	4b0b      	ldr	r3, [pc, #44]	; (b4b74 <_Z11Push_Buttonv+0x30>)
   b4b48:	8818      	ldrh	r0, [r3, #0]
   b4b4a:	f003 fdb0 	bl	b86ae <digitalRead>
   b4b4e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b50:	f000 fb66 	bl	b5220 <HAL_Timer_Get_Milli_Seconds>
 unsigned long currentTime = millis();
 // Check if enough time has passed since the last debounce
 if ((currentTime - lastDebounceTime) >= debounceTime) {
   b4b54:	4908      	ldr	r1, [pc, #32]	; (b4b78 <_Z11Push_Buttonv+0x34>)
   b4b56:	680b      	ldr	r3, [r1, #0]
   b4b58:	1ac3      	subs	r3, r0, r3
   b4b5a:	2b63      	cmp	r3, #99	; 0x63
   b4b5c:	4b07      	ldr	r3, [pc, #28]	; (b4b7c <_Z11Push_Buttonv+0x38>)
   b4b5e:	d907      	bls.n	b4b70 <_Z11Push_Buttonv+0x2c>
   // Update button state only if the reading has been stable for the debounce time
   if (Read_Button != Button_State) {
   b4b60:	781a      	ldrb	r2, [r3, #0]
   b4b62:	b2a4      	uxth	r4, r4
   b4b64:	42a2      	cmp	r2, r4
     Button_State = !Button_State; // Invert button state
   b4b66:	bf1e      	ittt	ne
   b4b68:	f082 0201 	eorne.w	r2, r2, #1
   b4b6c:	701a      	strbne	r2, [r3, #0]
     lastDebounceTime = currentTime; // Reset debounce timer
   b4b6e:	6008      	strne	r0, [r1, #0]
 else if (Button_State == FALSE)
 {
   Read_Button = 0;
 }
 return Read_Button;
}   
   b4b70:	7818      	ldrb	r0, [r3, #0]
   b4b72:	bd38      	pop	{r3, r4, r5, pc}
   b4b74:	2003e544 	.word	0x2003e544
   b4b78:	2003e630 	.word	0x2003e630
   b4b7c:	2003e548 	.word	0x2003e548

000b4b80 <_Z5Soundv>:
 
}


uint16_t Sound()
{
   b4b80:	b508      	push	{r3, lr}
 int Read_Sound = digitalRead(SOUND_INPUT);
   b4b82:	4b04      	ldr	r3, [pc, #16]	; (b4b94 <_Z5Soundv+0x14>)
   b4b84:	8818      	ldrh	r0, [r3, #0]
   b4b86:	f003 fd92 	bl	b86ae <digitalRead>
 else
 {
   S = 0;
 }
 return S;
} 
   b4b8a:	fab0 f080 	clz	r0, r0
   b4b8e:	0940      	lsrs	r0, r0, #5
   b4b90:	bd08      	pop	{r3, pc}
   b4b92:	bf00      	nop
   b4b94:	2003e5e0 	.word	0x2003e5e0

000b4b98 <_Z11Temperaturev>:


float Temperature()
{
   b4b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
for(int i = 0; i < 100; i++)
 {
   float adcData = analogRead(TEMP_INPUT);
   float voltage = adcData * (3.3 / 4095.0);
   b4b9c:	a718      	add	r7, pc, #96	; (adr r7, b4c00 <_Z11Temperaturev+0x68>)
   b4b9e:	e9d7 6700 	ldrd	r6, r7, [r7]
   float adcData = analogRead(TEMP_INPUT);
   b4ba2:	f8df 8064 	ldr.w	r8, [pc, #100]	; b4c08 <_Z11Temperaturev+0x70>
   float temperature = (voltage * 100);
   Total_temp = Total_temp + temperature;
   b4ba6:	4c14      	ldr	r4, [pc, #80]	; (b4bf8 <_Z11Temperaturev+0x60>)
{
   b4ba8:	2564      	movs	r5, #100	; 0x64
   float adcData = analogRead(TEMP_INPUT);
   b4baa:	f8b8 0000 	ldrh.w	r0, [r8]
   b4bae:	f003 fd91 	bl	b86d4 <analogRead>
   float voltage = adcData * (3.3 / 4095.0);
   b4bb2:	ee07 0a90 	vmov	s15, r0
   b4bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4bba:	ee17 0a90 	vmov	r0, s15
   b4bbe:	f7ff fb93 	bl	b42e8 <__aeabi_f2d>
   b4bc2:	4632      	mov	r2, r6
   b4bc4:	463b      	mov	r3, r7
   b4bc6:	f7ff fbe7 	bl	b4398 <__aeabi_dmul>
   b4bca:	f7ff fdf7 	bl	b47bc <__aeabi_d2f>
   Total_temp = Total_temp + temperature;
   b4bce:	edd4 7a00 	vldr	s15, [r4]
   b4bd2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; b4bfc <_Z11Temperaturev+0x64>
   b4bd6:	ee07 0a10 	vmov	s14, r0
   b4bda:	eee7 7a00 	vfma.f32	s15, s14, s0
for(int i = 0; i < 100; i++)
   b4bde:	3d01      	subs	r5, #1
   Total_temp = Total_temp + temperature;
   b4be0:	edc4 7a00 	vstr	s15, [r4]
for(int i = 0; i < 100; i++)
   b4be4:	d1e1      	bne.n	b4baa <_Z11Temperaturev+0x12>
 } 
 float Total_avg = Total_temp/100;
 Total_temp = 0;
   b4be6:	2300      	movs	r3, #0
 return Total_avg;
}
   b4be8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 Total_temp = 0;
   b4bec:	6023      	str	r3, [r4, #0]
}
   b4bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4bf2:	bf00      	nop
   b4bf4:	f3af 8000 	nop.w
   b4bf8:	2003e5ec 	.word	0x2003e5ec
   b4bfc:	42c80000 	.word	0x42c80000
   b4c00:	e734d9b4 	.word	0xe734d9b4
   b4c04:	3f4a680c 	.word	0x3f4a680c
   b4c08:	2003e564 	.word	0x2003e564

000b4c0c <loop>:
{
   b4c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 if(BLE.connected())
   b4c0e:	f002 fcd7 	bl	b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c12:	f002 fd2f 	bl	b7674 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c16:	b1c8      	cbz	r0, b4c4c <loop+0x40>
     Temp_S = Temperature();
   b4c18:	f7ff ffbe 	bl	b4b98 <_Z11Temperaturev>
   b4c1c:	4d0c      	ldr	r5, [pc, #48]	; (b4c50 <loop+0x44>)
     Sound_S = Sound();
   b4c1e:	4c0d      	ldr	r4, [pc, #52]	; (b4c54 <loop+0x48>)
     Temp_S = Temperature();
   b4c20:	ed85 0a00 	vstr	s0, [r5]
     Sound_S = Sound();
   b4c24:	f7ff ffac 	bl	b4b80 <_Z5Soundv>
   b4c28:	8020      	strh	r0, [r4, #0]
     Button_S = Push_Button();
   b4c2a:	f7ff ff8b 	bl	b4b44 <_Z11Push_Buttonv>
   b4c2e:	4b0a      	ldr	r3, [pc, #40]	; (b4c58 <loop+0x4c>)
     memcpy(&Temp_Buf[6], &Button_S, 2);
   b4c30:	f8ad 0006 	strh.w	r0, [sp, #6]
     Button_S = Push_Button();
   b4c34:	8018      	strh	r0, [r3, #0]
     memcpy(&Temp_Buf[0], &Temp_S, 4);
   b4c36:	682b      	ldr	r3, [r5, #0]
   b4c38:	9300      	str	r3, [sp, #0]
     memcpy(&Temp_Buf[4], &Sound_S, 2);
   b4c3a:	8823      	ldrh	r3, [r4, #0]
   b4c3c:	f8ad 3004 	strh.w	r3, [sp, #4]
     temperatureMeasurementCharacteristic.setValue(Temp_Buf, sizeof(Temp_Buf));
   b4c40:	4806      	ldr	r0, [pc, #24]	; (b4c5c <loop+0x50>)
   b4c42:	2300      	movs	r3, #0
   b4c44:	2208      	movs	r2, #8
   b4c46:	4669      	mov	r1, sp
   b4c48:	f002 fbaa 	bl	b73a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   b4c4c:	b003      	add	sp, #12
   b4c4e:	bd30      	pop	{r4, r5, pc}
   b4c50:	2003e5e8 	.word	0x2003e5e8
   b4c54:	2003e5e4 	.word	0x2003e5e4
   b4c58:	2003e5dc 	.word	0x2003e5dc
   b4c5c:	2003e670 	.word	0x2003e670

000b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4c60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4c62:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4c66:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4c68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4c6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4c6e:	42ae      	cmp	r6, r5
   b4c70:	d004      	beq.n	b4c7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4c72:	4628      	mov	r0, r5
   b4c74:	f003 fb9a 	bl	b83ac <_ZN6StringD1Ev>
   b4c78:	3514      	adds	r5, #20
   b4c7a:	e7f8      	b.n	b4c6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4c7c:	6820      	ldr	r0, [r4, #0]
   b4c7e:	f000 fbd3 	bl	b5428 <free>
    AllocatorT::free(data_);
}
   b4c82:	4620      	mov	r0, r4
   b4c84:	bd70      	pop	{r4, r5, r6, pc}

000b4c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c8a:	4604      	mov	r4, r0
   b4c8c:	460d      	mov	r5, r1
   b4c8e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4c90:	d916      	bls.n	b4cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4c92:	4290      	cmp	r0, r2
   b4c94:	d215      	bcs.n	b4cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4c96:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4c9a:	1a75      	subs	r5, r6, r1
   b4c9c:	f1a1 0714 	sub.w	r7, r1, #20
   b4ca0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4ca2:	42b7      	cmp	r7, r6
   b4ca4:	d01c      	beq.n	b4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4ca6:	b12c      	cbz	r4, b4cb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4ca8:	4631      	mov	r1, r6
   b4caa:	4620      	mov	r0, r4
   b4cac:	f003 fbfa 	bl	b84a4 <_ZN6StringC1EOS_>
   b4cb0:	7c33      	ldrb	r3, [r6, #16]
   b4cb2:	7423      	strb	r3, [r4, #16]
   b4cb4:	4630      	mov	r0, r6
   b4cb6:	f003 fb79 	bl	b83ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4cba:	3e14      	subs	r6, #20
   b4cbc:	3c14      	subs	r4, #20
   b4cbe:	e7f0      	b.n	b4ca2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4cc0:	d00e      	beq.n	b4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4cc2:	42b5      	cmp	r5, r6
   b4cc4:	d00c      	beq.n	b4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4cc6:	b12c      	cbz	r4, b4cd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4cc8:	4629      	mov	r1, r5
   b4cca:	4620      	mov	r0, r4
   b4ccc:	f003 fbea 	bl	b84a4 <_ZN6StringC1EOS_>
   b4cd0:	7c2b      	ldrb	r3, [r5, #16]
   b4cd2:	7423      	strb	r3, [r4, #16]
   b4cd4:	4628      	mov	r0, r5
   b4cd6:	f003 fb69 	bl	b83ac <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4cda:	3514      	adds	r5, #20
   b4cdc:	3414      	adds	r4, #20
   b4cde:	e7f0      	b.n	b4cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4ce6:	2300      	movs	r3, #0
   b4ce8:	e9c0 3300 	strd	r3, r3, [r0]
   b4cec:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cee:	684f      	ldr	r7, [r1, #4]
   b4cf0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cf2:	4604      	mov	r4, r0
   b4cf4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cf6:	dd23      	ble.n	b4d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4cf8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4cfc:	fb08 f007 	mul.w	r0, r8, r7
   b4d00:	f000 fb8a 	bl	b5418 <malloc>
            if (!d) {
   b4d04:	4605      	mov	r5, r0
   b4d06:	b1d8      	cbz	r0, b4d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4d08:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4d0c:	fb08 1202 	mla	r2, r8, r2, r1
   b4d10:	f7ff ffb9 	bl	b4c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4d14:	6820      	ldr	r0, [r4, #0]
   b4d16:	f000 fb87 	bl	b5428 <free>
        data_ = d;
   b4d1a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4d1c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4d1e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4d22:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4d26:	45b8      	cmp	r8, r7
   b4d28:	d008      	beq.n	b4d3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4d2a:	4639      	mov	r1, r7
   b4d2c:	4628      	mov	r0, r5
   b4d2e:	f003 fbd3 	bl	b84d8 <_ZN6StringC1ERKS_>
   b4d32:	7c3b      	ldrb	r3, [r7, #16]
   b4d34:	742b      	strb	r3, [r5, #16]
   b4d36:	3714      	adds	r7, #20
   b4d38:	3514      	adds	r5, #20
   b4d3a:	e7f4      	b.n	b4d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4d3c:	6873      	ldr	r3, [r6, #4]
   b4d3e:	6063      	str	r3, [r4, #4]
}
   b4d40:	4620      	mov	r0, r4
   b4d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4d48 <_GLOBAL__sub_I_logHandler>:
 {
     Pot_Read = 255;
 }
 analogWrite(PWM_FAN, Pot_Read);
 }  
}
   b4d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d4c:	b099      	sub	sp, #100	; 0x64
        capacity_(0) {
   b4d4e:	2500      	movs	r5, #0
   b4d50:	e9cd 5504 	strd	r5, r5, [sp, #16]
   b4d54:	9506      	str	r5, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b4d56:	f000 ff4f 	bl	b5bf8 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4d5a:	4c58      	ldr	r4, [pc, #352]	; (b4ebc <_GLOBAL__sub_I_logHandler+0x174>)
const BleUuid TempUuid("e503d4f7-ad9a-4131-a192-7150b3a7fc78");
   b4d5c:	f8df 8190 	ldr.w	r8, [pc, #400]	; b4ef0 <_GLOBAL__sub_I_logHandler+0x1a8>
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4d60:	f8df a190 	ldr.w	sl, [pc, #400]	; b4ef4 <_GLOBAL__sub_I_logHandler+0x1ac>
   b4d64:	4606      	mov	r6, r0
   b4d66:	a904      	add	r1, sp, #16
   b4d68:	a809      	add	r0, sp, #36	; 0x24
   b4d6a:	f7ff ffba 	bl	b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4d6e:	4627      	mov	r7, r4
        stream_(&stream) {
   b4d70:	a909      	add	r1, sp, #36	; 0x24
   b4d72:	a80e      	add	r0, sp, #56	; 0x38
   b4d74:	f7ff ffb5 	bl	b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4d78:	4b51      	ldr	r3, [pc, #324]	; (b4ec0 <_GLOBAL__sub_I_logHandler+0x178>)
   b4d7a:	f847 3b04 	str.w	r3, [r7], #4
   b4d7e:	a90e      	add	r1, sp, #56	; 0x38
   b4d80:	a813      	add	r0, sp, #76	; 0x4c
   b4d82:	f7ff ffae 	bl	b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4d86:	aa13      	add	r2, sp, #76	; 0x4c
   b4d88:	211e      	movs	r1, #30
   b4d8a:	4638      	mov	r0, r7
   b4d8c:	f001 fd50 	bl	b6830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4d90:	a813      	add	r0, sp, #76	; 0x4c
   b4d92:	f7ff ff65 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4d96:	a80e      	add	r0, sp, #56	; 0x38
   b4d98:	f7ff ff62 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4d9c:	4b49      	ldr	r3, [pc, #292]	; (b4ec4 <_GLOBAL__sub_I_logHandler+0x17c>)
   b4d9e:	6023      	str	r3, [r4, #0]
   b4da0:	6226      	str	r6, [r4, #32]
   b4da2:	a809      	add	r0, sp, #36	; 0x24
   b4da4:	f7ff ff5c 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4da8:	4b47      	ldr	r3, [pc, #284]	; (b4ec8 <_GLOBAL__sub_I_logHandler+0x180>)
   b4daa:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4dac:	f000 ff24 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b4db0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4db4:	f000 ff0e 	bl	b5bd4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4db8:	f001 fa0a 	bl	b61d0 <_ZN5spark10LogManager8instanceEv>
   b4dbc:	4621      	mov	r1, r4
const BleUuid serviceUuid("bfc37fc6-64b1-4f2d-a3e5-c0df90bd5cdd");
   b4dbe:	4c43      	ldr	r4, [pc, #268]	; (b4ecc <_GLOBAL__sub_I_logHandler+0x184>)
const BleUuid CentralRx01("11ba35cc-8edb-49a0-ac68-375dee5f77ff");
   b4dc0:	4e43      	ldr	r6, [pc, #268]	; (b4ed0 <_GLOBAL__sub_I_logHandler+0x188>)
   b4dc2:	f001 fc0b 	bl	b65dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; 
   b4dc6:	a804      	add	r0, sp, #16
   b4dc8:	f7ff ff4a 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
const BleUuid serviceUuid("bfc37fc6-64b1-4f2d-a3e5-c0df90bd5cdd");
   b4dcc:	4941      	ldr	r1, [pc, #260]	; (b4ed4 <_GLOBAL__sub_I_logHandler+0x18c>)
   b4dce:	4620      	mov	r0, r4
   b4dd0:	f002 fa8e 	bl	b72f0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid TempUuid("e503d4f7-ad9a-4131-a192-7150b3a7fc78");
   b4dd4:	4940      	ldr	r1, [pc, #256]	; (b4ed8 <_GLOBAL__sub_I_logHandler+0x190>)
   b4dd6:	4640      	mov	r0, r8
   b4dd8:	f002 fa8a 	bl	b72f0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid CentralRx01("11ba35cc-8edb-49a0-ac68-375dee5f77ff");
   b4ddc:	493f      	ldr	r1, [pc, #252]	; (b4edc <_GLOBAL__sub_I_logHandler+0x194>)
   b4dde:	4630      	mov	r0, r6
   b4de0:	f002 fa86 	bl	b72f0 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4de4:	46c4      	mov	ip, r8
   b4de6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4dea:	2710      	movs	r7, #16
   b4dec:	eb0d 0e07 	add.w	lr, sp, r7
   b4df0:	46a0      	mov	r8, r4
   b4df2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   b4df6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b4dfa:	f8dc 9000 	ldr.w	r9, [ip]
   b4dfe:	f8ce 9000 	str.w	r9, [lr]
   b4e02:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4e0a:	eb0d 0b07 	add.w	fp, sp, r7
   b4e0e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   b4e12:	f8d8 e000 	ldr.w	lr, [r8]
   b4e16:	f8cc e000 	str.w	lr, [ip]
   b4e1a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   b4e1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4e22:	f8cc 9000 	str.w	r9, [ip]
        BleUuid sUuid(svcUuid);
   b4e26:	f10d 0924 	add.w	r9, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4e2a:	e9ca 5500 	strd	r5, r5, [sl]
   b4e2e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   b4e32:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   b4e36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e3a:	ab13      	add	r3, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b4e3c:	f8cc e000 	str.w	lr, [ip]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e40:	463a      	mov	r2, r7
   b4e42:	9300      	str	r3, [sp, #0]
   b4e44:	4650      	mov	r0, sl
   b4e46:	ab0e      	add	r3, sp, #56	; 0x38
   b4e48:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4e4c:	4924      	ldr	r1, [pc, #144]	; (b4ee0 <_GLOBAL__sub_I_logHandler+0x198>)
   b4e4e:	f002 ffbd 	bl	b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4e52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4e54:	eb0d 0c07 	add.w	ip, sp, r7
   b4e58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e5e:	f8d6 e000 	ldr.w	lr, [r6]
   b4e62:	f8cc e000 	str.w	lr, [ip]
   b4e66:	ae09      	add	r6, sp, #36	; 0x24
   b4e68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        BleUuid cUuid(charUuid);
   b4e6a:	eb0d 0407 	add.w	r4, sp, r7
   b4e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e70:	f8d8 8000 	ldr.w	r8, [r8]
   b4e74:	f8c6 8000 	str.w	r8, [r6]
   b4e78:	ae0e      	add	r6, sp, #56	; 0x38
   b4e7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4e7c:	f8df c078 	ldr.w	ip, [pc, #120]	; b4ef8 <_GLOBAL__sub_I_logHandler+0x1b0>
   b4e80:	f8c6 e000 	str.w	lr, [r6]
        BleUuid sUuid(svcUuid);
   b4e84:	ac09      	add	r4, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4e86:	e9cc 5500 	strd	r5, r5, [ip]
   b4e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e8c:	ae13      	add	r6, sp, #76	; 0x4c
   b4e8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e90:	ab13      	add	r3, sp, #76	; 0x4c
        BleUuid sUuid(svcUuid);
   b4e92:	f8c6 8000 	str.w	r8, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4e96:	4660      	mov	r0, ip
   b4e98:	4912      	ldr	r1, [pc, #72]	; (b4ee4 <_GLOBAL__sub_I_logHandler+0x19c>)
   b4e9a:	9300      	str	r3, [sp, #0]
   b4e9c:	463a      	mov	r2, r7
   b4e9e:	ab0e      	add	r3, sp, #56	; 0x38
   b4ea0:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4ea4:	f002 ff92 	bl	b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleCharacteristic peerCentralRx01;
   b4ea8:	480f      	ldr	r0, [pc, #60]	; (b4ee8 <_GLOBAL__sub_I_logHandler+0x1a0>)
   b4eaa:	f002 fa5f 	bl	b736c <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b4eae:	480f      	ldr	r0, [pc, #60]	; (b4eec <_GLOBAL__sub_I_logHandler+0x1a4>)
}
   b4eb0:	b019      	add	sp, #100	; 0x64
   b4eb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
BlePeerDevice peer;
   b4eb6:	f002 baf7 	b.w	b74a8 <_ZN8particle13BlePeerDeviceC1Ev>
   b4eba:	bf00      	nop
   b4ebc:	2003e634 	.word	0x2003e634
   b4ec0:	000b8dac 	.word	0x000b8dac
   b4ec4:	000b8f78 	.word	0x000b8f78
   b4ec8:	000b8dc4 	.word	0x000b8dc4
   b4ecc:	2003e604 	.word	0x2003e604
   b4ed0:	2003e5f0 	.word	0x2003e5f0
   b4ed4:	000b8d23 	.word	0x000b8d23
   b4ed8:	000b8d48 	.word	0x000b8d48
   b4edc:	000b8d6d 	.word	0x000b8d6d
   b4ee0:	000b8d92 	.word	0x000b8d92
   b4ee4:	000b8d97 	.word	0x000b8d97
   b4ee8:	2003e660 	.word	0x2003e660
   b4eec:	2003e658 	.word	0x2003e658
   b4ef0:	2003e618 	.word	0x2003e618
   b4ef4:	2003e670 	.word	0x2003e670
   b4ef8:	2003e668 	.word	0x2003e668

000b4efc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <HAL_USB_USART_Init+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	681b      	ldr	r3, [r3, #0]
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	0003024c 	.word	0x0003024c

000b4f0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <HAL_USB_USART_Begin+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	685b      	ldr	r3, [r3, #4]
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	0003024c 	.word	0x0003024c

000b4f1c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <HAL_USB_USART_End+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	689b      	ldr	r3, [r3, #8]
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	0003024c 	.word	0x0003024c

000b4f2c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b02      	ldr	r3, [pc, #8]	; (b4f38 <HAL_USB_USART_Available_Data+0xc>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	691b      	ldr	r3, [r3, #16]
   b4f34:	9301      	str	r3, [sp, #4]
   b4f36:	bd08      	pop	{r3, pc}
   b4f38:	0003024c 	.word	0x0003024c

000b4f3c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b02      	ldr	r3, [pc, #8]	; (b4f48 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	695b      	ldr	r3, [r3, #20]
   b4f44:	9301      	str	r3, [sp, #4]
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	0003024c 	.word	0x0003024c

000b4f4c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f4c:	b508      	push	{r3, lr}
   b4f4e:	4b02      	ldr	r3, [pc, #8]	; (b4f58 <HAL_USB_USART_Receive_Data+0xc>)
   b4f50:	681b      	ldr	r3, [r3, #0]
   b4f52:	699b      	ldr	r3, [r3, #24]
   b4f54:	9301      	str	r3, [sp, #4]
   b4f56:	bd08      	pop	{r3, pc}
   b4f58:	0003024c 	.word	0x0003024c

000b4f5c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f5c:	b508      	push	{r3, lr}
   b4f5e:	4b02      	ldr	r3, [pc, #8]	; (b4f68 <HAL_USB_USART_Send_Data+0xc>)
   b4f60:	681b      	ldr	r3, [r3, #0]
   b4f62:	69db      	ldr	r3, [r3, #28]
   b4f64:	9301      	str	r3, [sp, #4]
   b4f66:	bd08      	pop	{r3, pc}
   b4f68:	0003024c 	.word	0x0003024c

000b4f6c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f6c:	b508      	push	{r3, lr}
   b4f6e:	4b02      	ldr	r3, [pc, #8]	; (b4f78 <HAL_USB_USART_Flush_Data+0xc>)
   b4f70:	681b      	ldr	r3, [r3, #0]
   b4f72:	6a1b      	ldr	r3, [r3, #32]
   b4f74:	9301      	str	r3, [sp, #4]
   b4f76:	bd08      	pop	{r3, pc}
   b4f78:	0003024c 	.word	0x0003024c

000b4f7c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4f7c:	b508      	push	{r3, lr}
   b4f7e:	4b02      	ldr	r3, [pc, #8]	; (b4f88 <HAL_USB_USART_Is_Connected+0xc>)
   b4f80:	681b      	ldr	r3, [r3, #0]
   b4f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f84:	9301      	str	r3, [sp, #4]
   b4f86:	bd08      	pop	{r3, pc}
   b4f88:	0003024c 	.word	0x0003024c

000b4f8c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4f8c:	b508      	push	{r3, lr}
   b4f8e:	4b02      	ldr	r3, [pc, #8]	; (b4f98 <hal_spi_init+0xc>)
   b4f90:	681b      	ldr	r3, [r3, #0]
   b4f92:	69db      	ldr	r3, [r3, #28]
   b4f94:	9301      	str	r3, [sp, #4]
   b4f96:	bd08      	pop	{r3, pc}
   b4f98:	00030230 	.word	0x00030230

000b4f9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4f9c:	b508      	push	{r3, lr}
   b4f9e:	4b02      	ldr	r3, [pc, #8]	; (b4fa8 <hal_spi_is_enabled+0xc>)
   b4fa0:	681b      	ldr	r3, [r3, #0]
   b4fa2:	6a1b      	ldr	r3, [r3, #32]
   b4fa4:	9301      	str	r3, [sp, #4]
   b4fa6:	bd08      	pop	{r3, pc}
   b4fa8:	00030230 	.word	0x00030230

000b4fac <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4fac:	b508      	push	{r3, lr}
   b4fae:	4b02      	ldr	r3, [pc, #8]	; (b4fb8 <hal_i2c_write+0xc>)
   b4fb0:	681b      	ldr	r3, [r3, #0]
   b4fb2:	6a1b      	ldr	r3, [r3, #32]
   b4fb4:	9301      	str	r3, [sp, #4]
   b4fb6:	bd08      	pop	{r3, pc}
   b4fb8:	00030228 	.word	0x00030228

000b4fbc <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4fbc:	b508      	push	{r3, lr}
   b4fbe:	4b02      	ldr	r3, [pc, #8]	; (b4fc8 <hal_i2c_available+0xc>)
   b4fc0:	681b      	ldr	r3, [r3, #0]
   b4fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4fc4:	9301      	str	r3, [sp, #4]
   b4fc6:	bd08      	pop	{r3, pc}
   b4fc8:	00030228 	.word	0x00030228

000b4fcc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <hal_i2c_read+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	00030228 	.word	0x00030228

000b4fdc <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <hal_i2c_peek+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	00030228 	.word	0x00030228

000b4fec <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <hal_i2c_flush+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030228 	.word	0x00030228

000b4ffc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <hal_i2c_is_enabled+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030228 	.word	0x00030228

000b500c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <hal_i2c_init+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030228 	.word	0x00030228

000b501c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <hal_usart_end+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	689b      	ldr	r3, [r3, #8]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	0003023c 	.word	0x0003023c

000b502c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <hal_usart_write+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	68db      	ldr	r3, [r3, #12]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	0003023c 	.word	0x0003023c

000b503c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <hal_usart_available+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	691b      	ldr	r3, [r3, #16]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	0003023c 	.word	0x0003023c

000b504c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <hal_usart_read+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	695b      	ldr	r3, [r3, #20]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	0003023c 	.word	0x0003023c

000b505c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <hal_usart_peek+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	699b      	ldr	r3, [r3, #24]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	0003023c 	.word	0x0003023c

000b506c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <hal_usart_flush+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	69db      	ldr	r3, [r3, #28]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	0003023c 	.word	0x0003023c

000b507c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <hal_usart_is_enabled+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	6a1b      	ldr	r3, [r3, #32]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	0003023c 	.word	0x0003023c

000b508c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <hal_usart_available_data_for_write+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	0003023c 	.word	0x0003023c

000b509c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <hal_usart_begin_config+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	0003023c 	.word	0x0003023c

000b50ac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <hal_usart_init_ex+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	0003023c 	.word	0x0003023c

000b50bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <inet_inet_ntop+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	695b      	ldr	r3, [r3, #20]
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	00030264 	.word	0x00030264

000b50cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <os_mutex_recursive_create+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	00030248 	.word	0x00030248

000b50dc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <os_mutex_recursive_destroy+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	00030248 	.word	0x00030248

000b50ec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <os_mutex_recursive_lock+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	00030248 	.word	0x00030248

000b50fc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <os_mutex_recursive_unlock+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	00030248 	.word	0x00030248

000b510c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <hal_ble_stack_init+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	689b      	ldr	r3, [r3, #8]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	00030278 	.word	0x00030278

000b511c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <hal_ble_gap_set_advertising_data+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	00030278 	.word	0x00030278

000b512c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <hal_ble_gap_set_scan_response_data+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	00030278 	.word	0x00030278

000b513c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <hal_ble_gap_start_advertising+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	00030278 	.word	0x00030278

000b514c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b514c:	b508      	push	{r3, lr}
   b514e:	4b03      	ldr	r3, [pc, #12]	; (b515c <hal_ble_gap_disconnect+0x10>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b5156:	9301      	str	r3, [sp, #4]
   b5158:	bd08      	pop	{r3, pc}
   b515a:	0000      	.short	0x0000
   b515c:	00030278 	.word	0x00030278

000b5160 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b5160:	b508      	push	{r3, lr}
   b5162:	4b03      	ldr	r3, [pc, #12]	; (b5170 <hal_ble_gatt_server_add_service+0x10>)
   b5164:	681b      	ldr	r3, [r3, #0]
   b5166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b516a:	9301      	str	r3, [sp, #4]
   b516c:	bd08      	pop	{r3, pc}
   b516e:	0000      	.short	0x0000
   b5170:	00030278 	.word	0x00030278

000b5174 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b03      	ldr	r3, [pc, #12]	; (b5184 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b517e:	9301      	str	r3, [sp, #4]
   b5180:	bd08      	pop	{r3, pc}
   b5182:	0000      	.short	0x0000
   b5184:	00030278 	.word	0x00030278

000b5188 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b03      	ldr	r3, [pc, #12]	; (b5198 <hal_ble_gatt_client_write_with_response+0x10>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b5192:	9301      	str	r3, [sp, #4]
   b5194:	bd08      	pop	{r3, pc}
   b5196:	0000      	.short	0x0000
   b5198:	00030278 	.word	0x00030278

000b519c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b03      	ldr	r3, [pc, #12]	; (b51ac <hal_ble_gatt_client_write_without_response+0x10>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b51a6:	9301      	str	r3, [sp, #4]
   b51a8:	bd08      	pop	{r3, pc}
   b51aa:	0000      	.short	0x0000
   b51ac:	00030278 	.word	0x00030278

000b51b0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b51b0:	b508      	push	{r3, lr}
   b51b2:	4b03      	ldr	r3, [pc, #12]	; (b51c0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b51b4:	681b      	ldr	r3, [r3, #0]
   b51b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b51ba:	9301      	str	r3, [sp, #4]
   b51bc:	bd08      	pop	{r3, pc}
   b51be:	0000      	.short	0x0000
   b51c0:	00030278 	.word	0x00030278

000b51c4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b51c4:	b508      	push	{r3, lr}
   b51c6:	4b03      	ldr	r3, [pc, #12]	; (b51d4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b51c8:	681b      	ldr	r3, [r3, #0]
   b51ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b51ce:	9301      	str	r3, [sp, #4]
   b51d0:	bd08      	pop	{r3, pc}
   b51d2:	0000      	.short	0x0000
   b51d4:	00030278 	.word	0x00030278

000b51d8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b03      	ldr	r3, [pc, #12]	; (b51e8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b51e2:	9301      	str	r3, [sp, #4]
   b51e4:	bd08      	pop	{r3, pc}
   b51e6:	0000      	.short	0x0000
   b51e8:	00030278 	.word	0x00030278

000b51ec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b03      	ldr	r3, [pc, #12]	; (b51fc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b51f6:	9301      	str	r3, [sp, #4]
   b51f8:	bd08      	pop	{r3, pc}
   b51fa:	0000      	.short	0x0000
   b51fc:	00030278 	.word	0x00030278

000b5200 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <HAL_RNG_GetRandomNumber+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	685b      	ldr	r3, [r3, #4]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030218 	.word	0x00030218

000b5210 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <HAL_Delay_Microseconds+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	68db      	ldr	r3, [r3, #12]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030218 	.word	0x00030218

000b5220 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	695b      	ldr	r3, [r3, #20]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030218 	.word	0x00030218

000b5230 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <hal_timer_millis+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030218 	.word	0x00030218

000b5240 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <hal_pin_validate_function+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	685b      	ldr	r3, [r3, #4]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	0003022c 	.word	0x0003022c

000b5250 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <hal_gpio_mode+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	689b      	ldr	r3, [r3, #8]
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	0003022c 	.word	0x0003022c

000b5260 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <hal_gpio_get_mode+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	68db      	ldr	r3, [r3, #12]
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	0003022c 	.word	0x0003022c

000b5270 <hal_gpio_read>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <hal_gpio_read+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	695b      	ldr	r3, [r3, #20]
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	0003022c 	.word	0x0003022c

000b5280 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <hal_adc_read+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	0003022c 	.word	0x0003022c

000b5290 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <netdb_freeaddrinfo+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	689b      	ldr	r3, [r3, #8]
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	00030268 	.word	0x00030268

000b52a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <netdb_getaddrinfo+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	68db      	ldr	r3, [r3, #12]
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030268 	.word	0x00030268

000b52b0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <panic_+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030260 	.word	0x00030260

000b52c0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <log_message+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	00030260 	.word	0x00030260

000b52d0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <log_message_v+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	00030260 	.word	0x00030260

000b52e0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <log_level_name+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	00030260 	.word	0x00030260

000b52f0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <log_set_callbacks+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	00030260 	.word	0x00030260

000b5300 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <spark_process+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	689b      	ldr	r3, [r3, #8]
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	00030244 	.word	0x00030244

000b5310 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	00030244 	.word	0x00030244

000b5320 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5320:	b508      	push	{r3, lr}
   b5322:	4b02      	ldr	r3, [pc, #8]	; (b532c <network_connect+0xc>)
   b5324:	681b      	ldr	r3, [r3, #0]
   b5326:	685b      	ldr	r3, [r3, #4]
   b5328:	9301      	str	r3, [sp, #4]
   b532a:	bd08      	pop	{r3, pc}
   b532c:	00030240 	.word	0x00030240

000b5330 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5330:	b508      	push	{r3, lr}
   b5332:	4b02      	ldr	r3, [pc, #8]	; (b533c <network_connecting+0xc>)
   b5334:	681b      	ldr	r3, [r3, #0]
   b5336:	689b      	ldr	r3, [r3, #8]
   b5338:	9301      	str	r3, [sp, #4]
   b533a:	bd08      	pop	{r3, pc}
   b533c:	00030240 	.word	0x00030240

000b5340 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5340:	b508      	push	{r3, lr}
   b5342:	4b02      	ldr	r3, [pc, #8]	; (b534c <network_disconnect+0xc>)
   b5344:	681b      	ldr	r3, [r3, #0]
   b5346:	68db      	ldr	r3, [r3, #12]
   b5348:	9301      	str	r3, [sp, #4]
   b534a:	bd08      	pop	{r3, pc}
   b534c:	00030240 	.word	0x00030240

000b5350 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5350:	b508      	push	{r3, lr}
   b5352:	4b02      	ldr	r3, [pc, #8]	; (b535c <network_ready+0xc>)
   b5354:	681b      	ldr	r3, [r3, #0]
   b5356:	691b      	ldr	r3, [r3, #16]
   b5358:	9301      	str	r3, [sp, #4]
   b535a:	bd08      	pop	{r3, pc}
   b535c:	00030240 	.word	0x00030240

000b5360 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <network_on+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	695b      	ldr	r3, [r3, #20]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030240 	.word	0x00030240

000b5370 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <network_off+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	699b      	ldr	r3, [r3, #24]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	00030240 	.word	0x00030240

000b5380 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <network_listen+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	69db      	ldr	r3, [r3, #28]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030240 	.word	0x00030240

000b5390 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <network_listening+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	6a1b      	ldr	r3, [r3, #32]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030240 	.word	0x00030240

000b53a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <network_set_listen_timeout+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030240 	.word	0x00030240

000b53b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <network_get_listen_timeout+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030240 	.word	0x00030240

000b53c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <network_is_on+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030240 	.word	0x00030240

000b53d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <network_is_off+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030240 	.word	0x00030240

000b53e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <set_system_mode+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	685b      	ldr	r3, [r3, #4]
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030220 	.word	0x00030220

000b53f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b03      	ldr	r3, [pc, #12]	; (b5400 <system_ctrl_set_app_request_handler+0x10>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b53fa:	9301      	str	r3, [sp, #4]
   b53fc:	bd08      	pop	{r3, pc}
   b53fe:	0000      	.short	0x0000
   b5400:	00030220 	.word	0x00030220

000b5404 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5404:	b508      	push	{r3, lr}
   b5406:	4b03      	ldr	r3, [pc, #12]	; (b5414 <system_ctrl_set_result+0x10>)
   b5408:	681b      	ldr	r3, [r3, #0]
   b540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b540e:	9301      	str	r3, [sp, #4]
   b5410:	bd08      	pop	{r3, pc}
   b5412:	0000      	.short	0x0000
   b5414:	00030220 	.word	0x00030220

000b5418 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5418:	b508      	push	{r3, lr}
   b541a:	4b02      	ldr	r3, [pc, #8]	; (b5424 <malloc+0xc>)
   b541c:	681b      	ldr	r3, [r3, #0]
   b541e:	681b      	ldr	r3, [r3, #0]
   b5420:	9301      	str	r3, [sp, #4]
   b5422:	bd08      	pop	{r3, pc}
   b5424:	0003021c 	.word	0x0003021c

000b5428 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <free+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	685b      	ldr	r3, [r3, #4]
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	0003021c 	.word	0x0003021c

000b5438 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <realloc+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	689b      	ldr	r3, [r3, #8]
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	0003021c 	.word	0x0003021c

000b5448 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <vsnprintf+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	0003021c 	.word	0x0003021c

000b5458 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <abort+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	0003021c 	.word	0x0003021c

000b5468 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <__errno+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	0003021c 	.word	0x0003021c

000b5478 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <__assert_func+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	0003021c 	.word	0x0003021c

000b5488 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <newlib_impure_ptr_callback+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	0003021c 	.word	0x0003021c

000b5498 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5498:	2300      	movs	r3, #0
   b549a:	6840      	ldr	r0, [r0, #4]
   b549c:	461a      	mov	r2, r3
   b549e:	f7ff bf3f 	b.w	b5320 <network_connect>

000b54a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b54a2:	6840      	ldr	r0, [r0, #4]
   b54a4:	2200      	movs	r2, #0
   b54a6:	2102      	movs	r1, #2
   b54a8:	f7ff bf4a 	b.w	b5340 <network_disconnect>

000b54ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b54ac:	2200      	movs	r2, #0
   b54ae:	6840      	ldr	r0, [r0, #4]
   b54b0:	4611      	mov	r1, r2
   b54b2:	f7ff bf3d 	b.w	b5330 <network_connecting>

000b54b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b54b6:	2200      	movs	r2, #0
   b54b8:	6840      	ldr	r0, [r0, #4]
   b54ba:	4611      	mov	r1, r2
   b54bc:	f7ff bf48 	b.w	b5350 <network_ready>

000b54c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b54c0:	2300      	movs	r3, #0
   b54c2:	6840      	ldr	r0, [r0, #4]
   b54c4:	461a      	mov	r2, r3
   b54c6:	4619      	mov	r1, r3
   b54c8:	f7ff bf4a 	b.w	b5360 <network_on>

000b54cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b54cc:	2300      	movs	r3, #0
   b54ce:	6840      	ldr	r0, [r0, #4]
   b54d0:	461a      	mov	r2, r3
   b54d2:	4619      	mov	r1, r3
   b54d4:	f7ff bf4c 	b.w	b5370 <network_off>

000b54d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b54d8:	6840      	ldr	r0, [r0, #4]
   b54da:	2100      	movs	r1, #0
   b54dc:	f7ff bf70 	b.w	b53c0 <network_is_on>

000b54e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b54e0:	6840      	ldr	r0, [r0, #4]
   b54e2:	2100      	movs	r1, #0
   b54e4:	f7ff bf74 	b.w	b53d0 <network_is_off>

000b54e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b54e8:	6840      	ldr	r0, [r0, #4]
   b54ea:	2200      	movs	r2, #0
   b54ec:	f081 0101 	eor.w	r1, r1, #1
   b54f0:	f7ff bf46 	b.w	b5380 <network_listen>

000b54f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b54f4:	6840      	ldr	r0, [r0, #4]
   b54f6:	2200      	movs	r2, #0
   b54f8:	f7ff bf52 	b.w	b53a0 <network_set_listen_timeout>

000b54fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b54fc:	2200      	movs	r2, #0
   b54fe:	6840      	ldr	r0, [r0, #4]
   b5500:	4611      	mov	r1, r2
   b5502:	f7ff bf55 	b.w	b53b0 <network_get_listen_timeout>

000b5506 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5506:	2200      	movs	r2, #0
   b5508:	6840      	ldr	r0, [r0, #4]
   b550a:	4611      	mov	r1, r2
   b550c:	f7ff bf40 	b.w	b5390 <network_listening>

000b5510 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5514:	b095      	sub	sp, #84	; 0x54
   b5516:	4614      	mov	r4, r2
   b5518:	460d      	mov	r5, r1
   b551a:	4607      	mov	r7, r0
    IPAddress addr;
   b551c:	f000 fbcc 	bl	b5cb8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5520:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5522:	221c      	movs	r2, #28
   b5524:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5526:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5528:	f003 fa4a 	bl	b89c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b552c:	2340      	movs	r3, #64	; 0x40
   b552e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5530:	4620      	mov	r0, r4
   b5532:	466b      	mov	r3, sp
   b5534:	aa0c      	add	r2, sp, #48	; 0x30
   b5536:	2100      	movs	r1, #0
   b5538:	f7ff feb2 	bl	b52a0 <netdb_getaddrinfo>
    if (!r) {
   b553c:	4604      	mov	r4, r0
   b553e:	2800      	cmp	r0, #0
   b5540:	d14b      	bne.n	b55da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5542:	4602      	mov	r2, r0
   b5544:	2101      	movs	r1, #1
   b5546:	6868      	ldr	r0, [r5, #4]
   b5548:	f7ff ff02 	bl	b5350 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b554c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b554e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5550:	4622      	mov	r2, r4
   b5552:	6868      	ldr	r0, [r5, #4]
   b5554:	f7ff fefc 	bl	b5350 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5558:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b555a:	4681      	mov	r9, r0
        bool ok = false;
   b555c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b555e:	2e00      	cmp	r6, #0
   b5560:	d03b      	beq.n	b55da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5562:	2900      	cmp	r1, #0
   b5564:	d139      	bne.n	b55da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5566:	6873      	ldr	r3, [r6, #4]
   b5568:	2b02      	cmp	r3, #2
   b556a:	d003      	beq.n	b5574 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b556c:	2b0a      	cmp	r3, #10
   b556e:	d011      	beq.n	b5594 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5570:	69f6      	ldr	r6, [r6, #28]
   b5572:	e7f4      	b.n	b555e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5574:	f1b8 0f00 	cmp.w	r8, #0
   b5578:	d0fa      	beq.n	b5570 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b557a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b557c:	a806      	add	r0, sp, #24
   b557e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5580:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5582:	f000 fbc7 	bl	b5d14 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5588:	1d3c      	adds	r4, r7, #4
   b558a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b558c:	682b      	ldr	r3, [r5, #0]
   b558e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5590:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5592:	e7ed      	b.n	b5570 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5594:	f1b9 0f00 	cmp.w	r9, #0
   b5598:	d0ea      	beq.n	b5570 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b559a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b559c:	2210      	movs	r2, #16
   b559e:	a801      	add	r0, sp, #4
   b55a0:	f003 fa0e 	bl	b89c0 <memset>
                    a.v = 6;
   b55a4:	2306      	movs	r3, #6
   b55a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b55aa:	ad01      	add	r5, sp, #4
   b55ac:	f104 0308 	add.w	r3, r4, #8
   b55b0:	3418      	adds	r4, #24
   b55b2:	6818      	ldr	r0, [r3, #0]
   b55b4:	6859      	ldr	r1, [r3, #4]
   b55b6:	462a      	mov	r2, r5
   b55b8:	c203      	stmia	r2!, {r0, r1}
   b55ba:	3308      	adds	r3, #8
   b55bc:	42a3      	cmp	r3, r4
   b55be:	4615      	mov	r5, r2
   b55c0:	d1f7      	bne.n	b55b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b55c2:	a901      	add	r1, sp, #4
   b55c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b55c6:	ad07      	add	r5, sp, #28
   b55c8:	f000 fb84 	bl	b5cd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b55cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b55ce:	1d3c      	adds	r4, r7, #4
   b55d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b55d2:	682b      	ldr	r3, [r5, #0]
   b55d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b55d6:	4649      	mov	r1, r9
   b55d8:	e7ca      	b.n	b5570 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b55da:	9800      	ldr	r0, [sp, #0]
   b55dc:	f7ff fe58 	bl	b5290 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b55e0:	4638      	mov	r0, r7
   b55e2:	b015      	add	sp, #84	; 0x54
   b55e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b55e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b55e8:	4b02      	ldr	r3, [pc, #8]	; (b55f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b55ea:	4a03      	ldr	r2, [pc, #12]	; (b55f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b55ec:	601a      	str	r2, [r3, #0]
   b55ee:	2200      	movs	r2, #0
   b55f0:	605a      	str	r2, [r3, #4]

} // spark
   b55f2:	4770      	bx	lr
   b55f4:	2003e678 	.word	0x2003e678
   b55f8:	000b8ddc 	.word	0x000b8ddc

000b55fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b55fc:	2200      	movs	r2, #0
   b55fe:	6840      	ldr	r0, [r0, #4]
   b5600:	4611      	mov	r1, r2
   b5602:	f7ff bea5 	b.w	b5350 <network_ready>

000b5606 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5606:	2200      	movs	r2, #0
   b5608:	6840      	ldr	r0, [r0, #4]
   b560a:	4611      	mov	r1, r2
   b560c:	f7ff bec0 	b.w	b5390 <network_listening>

000b5610 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5610:	2200      	movs	r2, #0
   b5612:	6840      	ldr	r0, [r0, #4]
   b5614:	4611      	mov	r1, r2
   b5616:	f7ff becb 	b.w	b53b0 <network_get_listen_timeout>

000b561a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b561a:	6840      	ldr	r0, [r0, #4]
   b561c:	2200      	movs	r2, #0
   b561e:	f7ff bebf 	b.w	b53a0 <network_set_listen_timeout>

000b5622 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5622:	6840      	ldr	r0, [r0, #4]
   b5624:	2200      	movs	r2, #0
   b5626:	f081 0101 	eor.w	r1, r1, #1
   b562a:	f7ff bea9 	b.w	b5380 <network_listen>

000b562e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b562e:	2300      	movs	r3, #0
   b5630:	6840      	ldr	r0, [r0, #4]
   b5632:	461a      	mov	r2, r3
   b5634:	4619      	mov	r1, r3
   b5636:	f7ff be9b 	b.w	b5370 <network_off>

000b563a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b563a:	2300      	movs	r3, #0
   b563c:	6840      	ldr	r0, [r0, #4]
   b563e:	461a      	mov	r2, r3
   b5640:	4619      	mov	r1, r3
   b5642:	f7ff be8d 	b.w	b5360 <network_on>

000b5646 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5646:	2200      	movs	r2, #0
   b5648:	6840      	ldr	r0, [r0, #4]
   b564a:	4611      	mov	r1, r2
   b564c:	f7ff be70 	b.w	b5330 <network_connecting>

000b5650 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5650:	6840      	ldr	r0, [r0, #4]
   b5652:	2200      	movs	r2, #0
   b5654:	2102      	movs	r1, #2
   b5656:	f7ff be73 	b.w	b5340 <network_disconnect>

000b565a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b565a:	2300      	movs	r3, #0
   b565c:	6840      	ldr	r0, [r0, #4]
   b565e:	461a      	mov	r2, r3
   b5660:	f7ff be5e 	b.w	b5320 <network_connect>

000b5664 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5664:	4b02      	ldr	r3, [pc, #8]	; (b5670 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5666:	2204      	movs	r2, #4
   b5668:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b566a:	4a02      	ldr	r2, [pc, #8]	; (b5674 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b566c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b566e:	4770      	bx	lr
   b5670:	2003e680 	.word	0x2003e680
   b5674:	000b8e18 	.word	0x000b8e18

000b5678 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5678:	4770      	bx	lr

000b567a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b567a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b567c:	4606      	mov	r6, r0
   b567e:	4615      	mov	r5, r2
   b5680:	460c      	mov	r4, r1
   b5682:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5684:	42bc      	cmp	r4, r7
   b5686:	d006      	beq.n	b5696 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5688:	6833      	ldr	r3, [r6, #0]
   b568a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b568e:	689b      	ldr	r3, [r3, #8]
   b5690:	4630      	mov	r0, r6
   b5692:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5694:	e7f6      	b.n	b5684 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5696:	4628      	mov	r0, r5
   b5698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b569a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b569a:	7c00      	ldrb	r0, [r0, #16]
   b569c:	2200      	movs	r2, #0
   b569e:	f7ff bc85 	b.w	b4fac <hal_i2c_write>

000b56a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b56a2:	7c00      	ldrb	r0, [r0, #16]
   b56a4:	2100      	movs	r1, #0
   b56a6:	f7ff bc89 	b.w	b4fbc <hal_i2c_available>

000b56aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b56aa:	7c00      	ldrb	r0, [r0, #16]
   b56ac:	2100      	movs	r1, #0
   b56ae:	f7ff bc8d 	b.w	b4fcc <hal_i2c_read>

000b56b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b56b2:	7c00      	ldrb	r0, [r0, #16]
   b56b4:	2100      	movs	r1, #0
   b56b6:	f7ff bc91 	b.w	b4fdc <hal_i2c_peek>

000b56ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b56ba:	7c00      	ldrb	r0, [r0, #16]
   b56bc:	2100      	movs	r1, #0
   b56be:	f7ff bc95 	b.w	b4fec <hal_i2c_flush>

000b56c2 <_ZN7TwoWireD0Ev>:
   b56c2:	b510      	push	{r4, lr}
   b56c4:	2114      	movs	r1, #20
   b56c6:	4604      	mov	r4, r0
   b56c8:	f7ff f919 	bl	b48fe <_ZdlPvj>
   b56cc:	4620      	mov	r0, r4
   b56ce:	bd10      	pop	{r4, pc}

000b56d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56d0:	b538      	push	{r3, r4, r5, lr}
   b56d2:	4604      	mov	r4, r0
   b56d4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b56d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b56da:	2200      	movs	r2, #0
   b56dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b56e0:	4b09      	ldr	r3, [pc, #36]	; (b5708 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b56e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b56e4:	4608      	mov	r0, r1
   b56e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b56e8:	4629      	mov	r1, r5
   b56ea:	f7ff fc8f 	bl	b500c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56ee:	30bf      	adds	r0, #191	; 0xbf
   b56f0:	d108      	bne.n	b5704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b56f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b56f4:	07db      	lsls	r3, r3, #31
   b56f6:	d505      	bpl.n	b5704 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b56f8:	6868      	ldr	r0, [r5, #4]
   b56fa:	f7ff fe95 	bl	b5428 <free>
    free(conf.tx_buffer);
   b56fe:	68e8      	ldr	r0, [r5, #12]
   b5700:	f7ff fe92 	bl	b5428 <free>
}
   b5704:	4620      	mov	r0, r4
   b5706:	bd38      	pop	{r3, r4, r5, pc}
   b5708:	000b8e5c 	.word	0x000b8e5c

000b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b570c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b570e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5710:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5712:	b17c      	cbz	r4, b5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5714:	6863      	ldr	r3, [r4, #4]
   b5716:	3b01      	subs	r3, #1
   b5718:	6063      	str	r3, [r4, #4]
   b571a:	b95b      	cbnz	r3, b5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b571c:	6823      	ldr	r3, [r4, #0]
   b571e:	4620      	mov	r0, r4
   b5720:	689b      	ldr	r3, [r3, #8]
   b5722:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5724:	68a3      	ldr	r3, [r4, #8]
   b5726:	3b01      	subs	r3, #1
   b5728:	60a3      	str	r3, [r4, #8]
   b572a:	b91b      	cbnz	r3, b5734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b572c:	6823      	ldr	r3, [r4, #0]
   b572e:	4620      	mov	r0, r4
   b5730:	68db      	ldr	r3, [r3, #12]
   b5732:	4798      	blx	r3
      }
   b5734:	4628      	mov	r0, r5
   b5736:	bd38      	pop	{r3, r4, r5, pc}

000b5738 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b5738:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b573a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b573c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b573e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5740:	dd03      	ble.n	b574a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b5742:	f7ff fe79 	bl	b5438 <realloc>
            if (!d) {
   b5746:	b918      	cbnz	r0, b5750 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5748:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b574a:	f7ff fe6d 	bl	b5428 <free>
        T* d = nullptr;
   b574e:	2000      	movs	r0, #0
        data_ = d;
   b5750:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5752:	60a5      	str	r5, [r4, #8]
        return true;
   b5754:	2001      	movs	r0, #1
   b5756:	e7f7      	b.n	b5748 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5758 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b5758:	f100 0310 	add.w	r3, r0, #16
   b575c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b575e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b5762:	2901      	cmp	r1, #1
   b5764:	4618      	mov	r0, r3
   b5766:	d108      	bne.n	b577a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b5768:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b576c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b5770:	3a01      	subs	r2, #1
   b5772:	f103 0310 	add.w	r3, r3, #16
   b5776:	d1f2      	bne.n	b575e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b5778:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b577a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b577c:	bf04      	itt	eq
   b577e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b5782:	1852      	addeq	r2, r2, r1
   b5784:	e7f4      	b.n	b5770 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b5786 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b5786:	b40e      	push	{r1, r2, r3}
   b5788:	b5f0      	push	{r4, r5, r6, r7, lr}
   b578a:	b088      	sub	sp, #32
   b578c:	af00      	add	r7, sp, #0
   b578e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5792:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b5794:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5798:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b579a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b579c:	462b      	mov	r3, r5
   b579e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b57a0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b57a2:	f7ff fe51 	bl	b5448 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b57a6:	280f      	cmp	r0, #15
   b57a8:	687a      	ldr	r2, [r7, #4]
   b57aa:	d91a      	bls.n	b57e2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b57ac:	f100 0308 	add.w	r3, r0, #8
   b57b0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b57b4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b57b6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b57ba:	1c41      	adds	r1, r0, #1
   b57bc:	462b      	mov	r3, r5
   b57be:	4668      	mov	r0, sp
        va_start(args, fmt);
   b57c0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b57c2:	f7ff fe41 	bl	b5448 <vsnprintf>
        if (n > 0) {
   b57c6:	1e02      	subs	r2, r0, #0
   b57c8:	dd04      	ble.n	b57d4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b57ca:	6823      	ldr	r3, [r4, #0]
   b57cc:	4669      	mov	r1, sp
   b57ce:	689b      	ldr	r3, [r3, #8]
   b57d0:	4620      	mov	r0, r4
   b57d2:	4798      	blx	r3
   b57d4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b57d6:	3720      	adds	r7, #32
   b57d8:	46bd      	mov	sp, r7
   b57da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b57de:	b003      	add	sp, #12
   b57e0:	4770      	bx	lr
    } else if (n > 0) {
   b57e2:	2800      	cmp	r0, #0
   b57e4:	d0f7      	beq.n	b57d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b57e6:	6823      	ldr	r3, [r4, #0]
   b57e8:	4602      	mov	r2, r0
   b57ea:	689b      	ldr	r3, [r3, #8]
   b57ec:	f107 0110 	add.w	r1, r7, #16
   b57f0:	4620      	mov	r0, r4
   b57f2:	4798      	blx	r3
}
   b57f4:	e7ef      	b.n	b57d6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b57f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b57f6:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b57f8:	6843      	ldr	r3, [r0, #4]
   b57fa:	3b01      	subs	r3, #1
    {
   b57fc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b57fe:	6043      	str	r3, [r0, #4]
   b5800:	b963      	cbnz	r3, b581c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5802:	6803      	ldr	r3, [r0, #0]
   b5804:	689b      	ldr	r3, [r3, #8]
   b5806:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5808:	68a3      	ldr	r3, [r4, #8]
   b580a:	3b01      	subs	r3, #1
   b580c:	60a3      	str	r3, [r4, #8]
   b580e:	b92b      	cbnz	r3, b581c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5810:	6823      	ldr	r3, [r4, #0]
   b5812:	4620      	mov	r0, r4
   b5814:	68db      	ldr	r3, [r3, #12]
    }
   b5816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b581a:	4718      	bx	r3
    }
   b581c:	bd10      	pop	{r4, pc}

000b581e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b581e:	b538      	push	{r3, r4, r5, lr}
   b5820:	680b      	ldr	r3, [r1, #0]
   b5822:	6003      	str	r3, [r0, #0]
   b5824:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b5826:	6843      	ldr	r3, [r0, #4]
   b5828:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b582a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b582c:	d008      	beq.n	b5840 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b582e:	b115      	cbz	r5, b5836 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b5830:	686b      	ldr	r3, [r5, #4]
   b5832:	3301      	adds	r3, #1
   b5834:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b5836:	6860      	ldr	r0, [r4, #4]
   b5838:	b108      	cbz	r0, b583e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b583a:	f7ff ffdc 	bl	b57f6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b583e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b5840:	bd38      	pop	{r3, r4, r5, pc}

000b5842 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b5842:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5844:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b5846:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b584a:	689b      	ldr	r3, [r3, #8]
   b584c:	2201      	movs	r2, #1
   b584e:	f10d 0107 	add.w	r1, sp, #7
   b5852:	4798      	blx	r3
}
   b5854:	b003      	add	sp, #12
   b5856:	f85d fb04 	ldr.w	pc, [sp], #4

000b585a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b585a:	460b      	mov	r3, r1
   b585c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b585e:	2200      	movs	r2, #0
   b5860:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b5862:	e9c0 2200 	strd	r2, r2, [r0]
   b5866:	4604      	mov	r4, r0
        t_ = t;
   b5868:	6083      	str	r3, [r0, #8]
    if (t) {
   b586a:	b90b      	cbnz	r3, b5870 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b586c:	4620      	mov	r0, r4
   b586e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b5870:	f7ff ffd5 	bl	b581e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b5874:	e7fa      	b.n	b586c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b5876 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b5876:	6883      	ldr	r3, [r0, #8]
   b5878:	b1eb      	cbz	r3, b58b6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b587a:	781a      	ldrb	r2, [r3, #0]
   b587c:	2a03      	cmp	r2, #3
   b587e:	d81a      	bhi.n	b58b6 <_ZNK5spark9JSONValue4typeEv+0x40>
   b5880:	e8df f002 	tbb	[pc, r2]
   b5884:	1b021704 	.word	0x1b021704
   b5888:	2005      	movs	r0, #5
   b588a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b588c:	6802      	ldr	r2, [r0, #0]
   b588e:	685b      	ldr	r3, [r3, #4]
   b5890:	6852      	ldr	r2, [r2, #4]
   b5892:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b5894:	282d      	cmp	r0, #45	; 0x2d
   b5896:	d012      	beq.n	b58be <_ZNK5spark9JSONValue4typeEv+0x48>
   b5898:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b589c:	2b09      	cmp	r3, #9
   b589e:	d90e      	bls.n	b58be <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b58a0:	2874      	cmp	r0, #116	; 0x74
   b58a2:	d00e      	beq.n	b58c2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b58a4:	2866      	cmp	r0, #102	; 0x66
   b58a6:	d00c      	beq.n	b58c2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b58a8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b58ac:	4258      	negs	r0, r3
   b58ae:	4158      	adcs	r0, r3
   b58b0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b58b2:	2006      	movs	r0, #6
   b58b4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b58b6:	2000      	movs	r0, #0
   b58b8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b58ba:	2004      	movs	r0, #4
   b58bc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b58be:	2003      	movs	r0, #3
   b58c0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b58c2:	2002      	movs	r0, #2
}
   b58c4:	4770      	bx	lr

000b58c6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b58c6:	b510      	push	{r4, lr}
   b58c8:	4604      	mov	r4, r0
    switch (type()) {
   b58ca:	f7ff ffd4 	bl	b5876 <_ZNK5spark9JSONValue4typeEv>
   b58ce:	2802      	cmp	r0, #2
   b58d0:	d00e      	beq.n	b58f0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b58d2:	1ec3      	subs	r3, r0, #3
   b58d4:	b2db      	uxtb	r3, r3
   b58d6:	2b01      	cmp	r3, #1
   b58d8:	d814      	bhi.n	b5904 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b58da:	6822      	ldr	r2, [r4, #0]
   b58dc:	68a3      	ldr	r3, [r4, #8]
   b58de:	6850      	ldr	r0, [r2, #4]
   b58e0:	685b      	ldr	r3, [r3, #4]
}
   b58e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b58e6:	220a      	movs	r2, #10
   b58e8:	2100      	movs	r1, #0
   b58ea:	4418      	add	r0, r3
   b58ec:	f003 b974 	b.w	b8bd8 <strtol>
        const char* const s = d_->json + t_->start;
   b58f0:	6822      	ldr	r2, [r4, #0]
   b58f2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b58f4:	6852      	ldr	r2, [r2, #4]
   b58f6:	685b      	ldr	r3, [r3, #4]
   b58f8:	5cd0      	ldrb	r0, [r2, r3]
   b58fa:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b58fe:	4258      	negs	r0, r3
   b5900:	4158      	adcs	r0, r3
}
   b5902:	bd10      	pop	{r4, pc}
    switch (type()) {
   b5904:	2000      	movs	r0, #0
   b5906:	e7fc      	b.n	b5902 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b5908 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5908:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b590a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b590c:	e9c0 3300 	strd	r3, r3, [r0]
   b5910:	4604      	mov	r4, r0
        n_(0) {
   b5912:	480e      	ldr	r0, [pc, #56]	; (b594c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b5914:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b5918:	b1a9      	cbz	r1, b5946 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b591a:	780b      	ldrb	r3, [r1, #0]
   b591c:	2b03      	cmp	r3, #3
   b591e:	d006      	beq.n	b592e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b5920:	b98b      	cbnz	r3, b5946 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b5922:	6813      	ldr	r3, [r2, #0]
   b5924:	6858      	ldr	r0, [r3, #4]
   b5926:	684b      	ldr	r3, [r1, #4]
   b5928:	5cc3      	ldrb	r3, [r0, r3]
   b592a:	2b6e      	cmp	r3, #110	; 0x6e
   b592c:	d007      	beq.n	b593e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b592e:	6813      	ldr	r3, [r2, #0]
   b5930:	684d      	ldr	r5, [r1, #4]
   b5932:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b5934:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b5936:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b5938:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b593a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b593c:	60e3      	str	r3, [r4, #12]
   b593e:	4611      	mov	r1, r2
   b5940:	4620      	mov	r0, r4
   b5942:	f7ff ff6c 	bl	b581e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b5946:	4620      	mov	r0, r4
   b5948:	bd38      	pop	{r3, r4, r5, pc}
   b594a:	bf00      	nop
   b594c:	000b8f42 	.word	0x000b8f42

000b5950 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b5950:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b5952:	2500      	movs	r5, #0
   b5954:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b5956:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b595a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b595e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5962:	4604      	mov	r4, r0
   b5964:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b5966:	b14b      	cbz	r3, b597c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b5968:	781a      	ldrb	r2, [r3, #0]
   b596a:	2a01      	cmp	r2, #1
   b596c:	d106      	bne.n	b597c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b596e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b5972:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b5974:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b5976:	6143      	str	r3, [r0, #20]
   b5978:	f7ff ff51 	bl	b581e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b597c:	4620      	mov	r0, r4
   b597e:	bd38      	pop	{r3, r4, r5, pc}

000b5980 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b5980:	b510      	push	{r4, lr}
    if (!n_) {
   b5982:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b5984:	4604      	mov	r4, r0
    if (!n_) {
   b5986:	b163      	cbz	r3, b59a2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b5988:	6880      	ldr	r0, [r0, #8]
   b598a:	60e0      	str	r0, [r4, #12]
    --n_;
   b598c:	3b01      	subs	r3, #1
    ++t_;
   b598e:	3010      	adds	r0, #16
   b5990:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b5992:	6120      	str	r0, [r4, #16]
    --n_;
   b5994:	6163      	str	r3, [r4, #20]
    if (n_) {
   b5996:	b113      	cbz	r3, b599e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b5998:	f7ff fede 	bl	b5758 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b599c:	60a0      	str	r0, [r4, #8]
    return true;
   b599e:	2001      	movs	r0, #1
   b59a0:	e000      	b.n	b59a4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b59a2:	4618      	mov	r0, r3
}
   b59a4:	bd10      	pop	{r4, pc}

000b59a6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b59a6:	b510      	push	{r4, lr}
    write('}');
   b59a8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b59aa:	4604      	mov	r4, r0
    write('}');
   b59ac:	f7ff ff49 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b59b0:	2301      	movs	r3, #1
   b59b2:	7123      	strb	r3, [r4, #4]
}
   b59b4:	4620      	mov	r0, r4
   b59b6:	bd10      	pop	{r4, pc}

000b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b59b8:	b508      	push	{r3, lr}
    switch (state_) {
   b59ba:	7903      	ldrb	r3, [r0, #4]
   b59bc:	2b01      	cmp	r3, #1
   b59be:	d002      	beq.n	b59c6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b59c0:	2b02      	cmp	r3, #2
   b59c2:	d004      	beq.n	b59ce <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b59c4:	bd08      	pop	{r3, pc}
        write(',');
   b59c6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b59c8:	f7ff ff3b 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
}
   b59cc:	e7fa      	b.n	b59c4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b59ce:	213a      	movs	r1, #58	; 0x3a
   b59d0:	e7fa      	b.n	b59c8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b59d2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b59d2:	b510      	push	{r4, lr}
   b59d4:	4604      	mov	r4, r0
    writeSeparator();
   b59d6:	f7ff ffef 	bl	b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b59da:	4620      	mov	r0, r4
   b59dc:	217b      	movs	r1, #123	; 0x7b
   b59de:	f7ff ff30 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b59e2:	2300      	movs	r3, #0
   b59e4:	7123      	strb	r3, [r4, #4]
}
   b59e6:	4620      	mov	r0, r4
   b59e8:	bd10      	pop	{r4, pc}
	...

000b59ec <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b59ec:	b513      	push	{r0, r1, r4, lr}
   b59ee:	4604      	mov	r4, r0
   b59f0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b59f2:	f7ff ffe1 	bl	b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b59f6:	6823      	ldr	r3, [r4, #0]
   b59f8:	9a01      	ldr	r2, [sp, #4]
   b59fa:	68db      	ldr	r3, [r3, #12]
   b59fc:	4903      	ldr	r1, [pc, #12]	; (b5a0c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b59fe:	4620      	mov	r0, r4
   b5a00:	4798      	blx	r3
    state_ = NEXT;
   b5a02:	2301      	movs	r3, #1
}
   b5a04:	4620      	mov	r0, r4
    state_ = NEXT;
   b5a06:	7123      	strb	r3, [r4, #4]
}
   b5a08:	b002      	add	sp, #8
   b5a0a:	bd10      	pop	{r4, pc}
   b5a0c:	000b8d01 	.word	0x000b8d01

000b5a10 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b5a10:	b513      	push	{r0, r1, r4, lr}
   b5a12:	4604      	mov	r4, r0
   b5a14:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b5a16:	f7ff ffcf 	bl	b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b5a1a:	6823      	ldr	r3, [r4, #0]
   b5a1c:	9a01      	ldr	r2, [sp, #4]
   b5a1e:	68db      	ldr	r3, [r3, #12]
   b5a20:	4903      	ldr	r1, [pc, #12]	; (b5a30 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b5a22:	4620      	mov	r0, r4
   b5a24:	4798      	blx	r3
    state_ = NEXT;
   b5a26:	2301      	movs	r3, #1
}
   b5a28:	4620      	mov	r0, r4
    state_ = NEXT;
   b5a2a:	7123      	strb	r3, [r4, #4]
}
   b5a2c:	b002      	add	sp, #8
   b5a2e:	bd10      	pop	{r4, pc}
   b5a30:	000b8e7c 	.word	0x000b8e7c

000b5a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5a38:	460d      	mov	r5, r1
    write('"');
   b5a3a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b5a3c:	4690      	mov	r8, r2
   b5a3e:	4604      	mov	r4, r0
    write('"');
   b5a40:	f7ff feff 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b5a44:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5aec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b5a48:	44a8      	add	r8, r5
    const char *s = str;
   b5a4a:	462f      	mov	r7, r5
    while (s != end) {
   b5a4c:	4547      	cmp	r7, r8
   b5a4e:	46ba      	mov	sl, r7
   b5a50:	d03d      	beq.n	b5ace <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b5a52:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b5a56:	2e22      	cmp	r6, #34	; 0x22
   b5a58:	d006      	beq.n	b5a68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5a5a:	2e5c      	cmp	r6, #92	; 0x5c
   b5a5c:	d004      	beq.n	b5a68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b5a5e:	4630      	mov	r0, r6
   b5a60:	f002 ff6e 	bl	b8940 <isprint>
   b5a64:	2800      	cmp	r0, #0
   b5a66:	d1f1      	bne.n	b5a4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5a68:	6823      	ldr	r3, [r4, #0]
   b5a6a:	ebaa 0205 	sub.w	r2, sl, r5
   b5a6e:	689b      	ldr	r3, [r3, #8]
   b5a70:	4629      	mov	r1, r5
   b5a72:	4620      	mov	r0, r4
   b5a74:	4798      	blx	r3
            write('\\');
   b5a76:	215c      	movs	r1, #92	; 0x5c
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff fee2 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b5a7e:	2e0d      	cmp	r6, #13
   b5a80:	d80a      	bhi.n	b5a98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b5a82:	2e07      	cmp	r6, #7
   b5a84:	d91c      	bls.n	b5ac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5a86:	f1a6 0308 	sub.w	r3, r6, #8
   b5a8a:	2b05      	cmp	r3, #5
   b5a8c:	d818      	bhi.n	b5ac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5a8e:	e8df f003 	tbb	[pc, r3]
   b5a92:	0f0d      	.short	0x0f0d
   b5a94:	15131711 	.word	0x15131711
   b5a98:	2e22      	cmp	r6, #34	; 0x22
   b5a9a:	d001      	beq.n	b5aa0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5a9c:	2e5c      	cmp	r6, #92	; 0x5c
   b5a9e:	d10f      	bne.n	b5ac0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b5aa0:	4631      	mov	r1, r6
                write('b');
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f7ff fecd 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5aa8:	463d      	mov	r5, r7
    while (s != end) {
   b5aaa:	e7cf      	b.n	b5a4c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5aac:	2162      	movs	r1, #98	; 0x62
   b5aae:	e7f8      	b.n	b5aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b5ab0:	2174      	movs	r1, #116	; 0x74
   b5ab2:	e7f6      	b.n	b5aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5ab4:	216e      	movs	r1, #110	; 0x6e
   b5ab6:	e7f4      	b.n	b5aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5ab8:	2166      	movs	r1, #102	; 0x66
   b5aba:	e7f2      	b.n	b5aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5abc:	2172      	movs	r1, #114	; 0x72
   b5abe:	e7f0      	b.n	b5aa2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b5ac0:	6823      	ldr	r3, [r4, #0]
   b5ac2:	4632      	mov	r2, r6
   b5ac4:	68db      	ldr	r3, [r3, #12]
   b5ac6:	4649      	mov	r1, r9
   b5ac8:	4620      	mov	r0, r4
   b5aca:	4798      	blx	r3
                break;
   b5acc:	e7ec      	b.n	b5aa8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b5ace:	42bd      	cmp	r5, r7
   b5ad0:	d005      	beq.n	b5ade <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b5ad2:	6823      	ldr	r3, [r4, #0]
   b5ad4:	1b7a      	subs	r2, r7, r5
   b5ad6:	689b      	ldr	r3, [r3, #8]
   b5ad8:	4629      	mov	r1, r5
   b5ada:	4620      	mov	r0, r4
   b5adc:	4798      	blx	r3
    }
    write('"');
   b5ade:	2122      	movs	r1, #34	; 0x22
   b5ae0:	4620      	mov	r0, r4
   b5ae2:	f7ff feae 	bl	b5842 <_ZN5spark10JSONWriter5writeEc>
}
   b5ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5aea:	bf00      	nop
   b5aec:	000b8e7f 	.word	0x000b8e7f

000b5af0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b5af0:	b513      	push	{r0, r1, r4, lr}
   b5af2:	4604      	mov	r4, r0
   b5af4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5af8:	f7ff ff5e 	bl	b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5afc:	4620      	mov	r0, r4
   b5afe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5b02:	f7ff ff97 	bl	b5a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b5b06:	2302      	movs	r3, #2
}
   b5b08:	4620      	mov	r0, r4
    state_ = VALUE;
   b5b0a:	7123      	strb	r3, [r4, #4]
}
   b5b0c:	b002      	add	sp, #8
   b5b0e:	bd10      	pop	{r4, pc}

000b5b10 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b5b10:	b513      	push	{r0, r1, r4, lr}
   b5b12:	4604      	mov	r4, r0
   b5b14:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5b18:	f7ff ff4e 	bl	b59b8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b5b1c:	4620      	mov	r0, r4
   b5b1e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b5b22:	f7ff ff87 	bl	b5a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b5b26:	2301      	movs	r3, #1
}
   b5b28:	4620      	mov	r0, r4
    state_ = NEXT;
   b5b2a:	7123      	strb	r3, [r4, #4]
}
   b5b2c:	b002      	add	sp, #8
   b5b2e:	bd10      	pop	{r4, pc}

000b5b30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b30:	7441      	strb	r1, [r0, #17]
}
   b5b32:	4770      	bx	lr

000b5b34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b34:	4770      	bx	lr

000b5b36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5b36:	4770      	bx	lr

000b5b38 <_ZN9USBSerial4readEv>:
{
   b5b38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5b3a:	2100      	movs	r1, #0
   b5b3c:	7c00      	ldrb	r0, [r0, #16]
   b5b3e:	f7ff fa05 	bl	b4f4c <HAL_USB_USART_Receive_Data>
}
   b5b42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b46:	bd08      	pop	{r3, pc}

000b5b48 <_ZN9USBSerial4peekEv>:
{
   b5b48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5b4a:	2101      	movs	r1, #1
   b5b4c:	7c00      	ldrb	r0, [r0, #16]
   b5b4e:	f7ff f9fd 	bl	b4f4c <HAL_USB_USART_Receive_Data>
}
   b5b52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b56:	bd08      	pop	{r3, pc}

000b5b58 <_ZN9USBSerial17availableForWriteEv>:
{
   b5b58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5b5a:	7c00      	ldrb	r0, [r0, #16]
   b5b5c:	f7ff f9ee 	bl	b4f3c <HAL_USB_USART_Available_Data_For_Write>
}
   b5b60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b64:	bd08      	pop	{r3, pc}

000b5b66 <_ZN9USBSerial9availableEv>:
{
   b5b66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5b68:	7c00      	ldrb	r0, [r0, #16]
   b5b6a:	f7ff f9df 	bl	b4f2c <HAL_USB_USART_Available_Data>
}
   b5b6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b72:	bd08      	pop	{r3, pc}

000b5b74 <_ZN9USBSerial5writeEh>:
{
   b5b74:	b513      	push	{r0, r1, r4, lr}
   b5b76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b78:	7c00      	ldrb	r0, [r0, #16]
{
   b5b7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5b7c:	f7ff f9de 	bl	b4f3c <HAL_USB_USART_Available_Data_For_Write>
   b5b80:	2800      	cmp	r0, #0
   b5b82:	9901      	ldr	r1, [sp, #4]
   b5b84:	dc01      	bgt.n	b5b8a <_ZN9USBSerial5writeEh+0x16>
   b5b86:	7c60      	ldrb	r0, [r4, #17]
   b5b88:	b120      	cbz	r0, b5b94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5b8a:	7c20      	ldrb	r0, [r4, #16]
   b5b8c:	f7ff f9e6 	bl	b4f5c <HAL_USB_USART_Send_Data>
   b5b90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b94:	b002      	add	sp, #8
   b5b96:	bd10      	pop	{r4, pc}

000b5b98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b98:	7c00      	ldrb	r0, [r0, #16]
   b5b9a:	f7ff b9e7 	b.w	b4f6c <HAL_USB_USART_Flush_Data>

000b5b9e <_ZN9USBSerialD0Ev>:
   b5b9e:	b510      	push	{r4, lr}
   b5ba0:	2114      	movs	r1, #20
   b5ba2:	4604      	mov	r4, r0
   b5ba4:	f7fe feab 	bl	b48fe <_ZdlPvj>
   b5ba8:	4620      	mov	r0, r4
   b5baa:	bd10      	pop	{r4, pc}

000b5bac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5bac:	b510      	push	{r4, lr}
   b5bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5bb2:	4604      	mov	r4, r0
   b5bb4:	4608      	mov	r0, r1
   b5bb6:	2100      	movs	r1, #0
   b5bb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5bbc:	4b04      	ldr	r3, [pc, #16]	; (b5bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5bbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5bc0:	2301      	movs	r3, #1
  _serial = serial;
   b5bc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5bc4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5bc6:	4611      	mov	r1, r2
   b5bc8:	f7ff f998 	bl	b4efc <HAL_USB_USART_Init>
}
   b5bcc:	4620      	mov	r0, r4
   b5bce:	bd10      	pop	{r4, pc}
   b5bd0:	000b8e90 	.word	0x000b8e90

000b5bd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5bd4:	7c00      	ldrb	r0, [r0, #16]
   b5bd6:	2200      	movs	r2, #0
   b5bd8:	f7ff b998 	b.w	b4f0c <HAL_USB_USART_Begin>

000b5bdc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5bdc:	7c00      	ldrb	r0, [r0, #16]
   b5bde:	f7ff b99d 	b.w	b4f1c <HAL_USB_USART_End>

000b5be2 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5be2:	7c00      	ldrb	r0, [r0, #16]
   b5be4:	f7ff b9ca 	b.w	b4f7c <HAL_USB_USART_Is_Connected>

000b5be8 <_Z19acquireSerialBufferv>:
{
   b5be8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5bea:	2214      	movs	r2, #20
{
   b5bec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5bee:	2100      	movs	r1, #0
   b5bf0:	f002 fee6 	bl	b89c0 <memset>
}
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	bd10      	pop	{r4, pc}

000b5bf8 <_Z16_fetch_usbserialv>:
{
   b5bf8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5bfa:	4c0f      	ldr	r4, [pc, #60]	; (b5c38 <_Z16_fetch_usbserialv+0x40>)
{
   b5bfc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5bfe:	a803      	add	r0, sp, #12
   b5c00:	f7ff fff2 	bl	b5be8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c04:	7821      	ldrb	r1, [r4, #0]
   b5c06:	f3bf 8f5b 	dmb	ish
   b5c0a:	f011 0101 	ands.w	r1, r1, #1
   b5c0e:	d10f      	bne.n	b5c30 <_Z16_fetch_usbserialv+0x38>
   b5c10:	4620      	mov	r0, r4
   b5c12:	9101      	str	r1, [sp, #4]
   b5c14:	f7fe fe82 	bl	b491c <__cxa_guard_acquire>
   b5c18:	9901      	ldr	r1, [sp, #4]
   b5c1a:	b148      	cbz	r0, b5c30 <_Z16_fetch_usbserialv+0x38>
   b5c1c:	aa03      	add	r2, sp, #12
   b5c1e:	4807      	ldr	r0, [pc, #28]	; (b5c3c <_Z16_fetch_usbserialv+0x44>)
   b5c20:	f7ff ffc4 	bl	b5bac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5c24:	4620      	mov	r0, r4
   b5c26:	f7fe fe7e 	bl	b4926 <__cxa_guard_release>
   b5c2a:	4805      	ldr	r0, [pc, #20]	; (b5c40 <_Z16_fetch_usbserialv+0x48>)
   b5c2c:	f002 fe82 	bl	b8934 <atexit>
	return _usbserial;
}
   b5c30:	4802      	ldr	r0, [pc, #8]	; (b5c3c <_Z16_fetch_usbserialv+0x44>)
   b5c32:	b008      	add	sp, #32
   b5c34:	bd10      	pop	{r4, pc}
   b5c36:	bf00      	nop
   b5c38:	2003e688 	.word	0x2003e688
   b5c3c:	2003e68c 	.word	0x2003e68c
   b5c40:	000b5b35 	.word	0x000b5b35

000b5c44 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b5c44:	4770      	bx	lr

000b5c46 <_ZN9IPAddressD0Ev>:
   b5c46:	b510      	push	{r4, lr}
   b5c48:	2118      	movs	r1, #24
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	f7fe fe57 	bl	b48fe <_ZdlPvj>
   b5c50:	4620      	mov	r0, r4
   b5c52:	bd10      	pop	{r4, pc}

000b5c54 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5c54:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5c56:	7d03      	ldrb	r3, [r0, #20]
   b5c58:	2b06      	cmp	r3, #6
{
   b5c5a:	b08d      	sub	sp, #52	; 0x34
   b5c5c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c5e:	f100 0704 	add.w	r7, r0, #4
   b5c62:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5c66:	d012      	beq.n	b5c8e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5c68:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5c6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5c70:	220a      	movs	r2, #10
   b5c72:	4630      	mov	r0, r6
   b5c74:	f001 f933 	bl	b6ede <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5c78:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5c7a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5c7c:	d019      	beq.n	b5cb2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5c7e:	2c00      	cmp	r4, #0
   b5c80:	d0f4      	beq.n	b5c6c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5c82:	212e      	movs	r1, #46	; 0x2e
   b5c84:	4630      	mov	r0, r6
   b5c86:	f001 f911 	bl	b6eac <_ZN5Print5printEc>
   b5c8a:	4404      	add	r4, r0
   b5c8c:	e7ee      	b.n	b5c6c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c8e:	232f      	movs	r3, #47	; 0x2f
   b5c90:	466a      	mov	r2, sp
   b5c92:	4639      	mov	r1, r7
   b5c94:	200a      	movs	r0, #10
		buf[0] = 0;
   b5c96:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c9a:	f7ff fa0f 	bl	b50bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5c9e:	4668      	mov	r0, sp
   b5ca0:	f7fe fde6 	bl	b4870 <strlen>
   b5ca4:	6833      	ldr	r3, [r6, #0]
   b5ca6:	4602      	mov	r2, r0
   b5ca8:	68db      	ldr	r3, [r3, #12]
   b5caa:	4669      	mov	r1, sp
   b5cac:	4630      	mov	r0, r6
   b5cae:	4798      	blx	r3
   b5cb0:	4604      	mov	r4, r0
    }
    return n;
}
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	b00d      	add	sp, #52	; 0x34
   b5cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5cb8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5cb8:	b510      	push	{r4, lr}
   b5cba:	4b05      	ldr	r3, [pc, #20]	; (b5cd0 <_ZN9IPAddressC1Ev+0x18>)
   b5cbc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5cbe:	2211      	movs	r2, #17
   b5cc0:	f840 3b04 	str.w	r3, [r0], #4
   b5cc4:	2100      	movs	r1, #0
   b5cc6:	f002 fe7b 	bl	b89c0 <memset>
}
   b5cca:	4620      	mov	r0, r4
   b5ccc:	bd10      	pop	{r4, pc}
   b5cce:	bf00      	nop
   b5cd0:	000b8ec0 	.word	0x000b8ec0

000b5cd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5cd4:	4603      	mov	r3, r0
   b5cd6:	4a07      	ldr	r2, [pc, #28]	; (b5cf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5cd8:	b510      	push	{r4, lr}
   b5cda:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5cde:	f101 0210 	add.w	r2, r1, #16
   b5ce2:	f851 4b04 	ldr.w	r4, [r1], #4
   b5ce6:	f843 4b04 	str.w	r4, [r3], #4
   b5cea:	4291      	cmp	r1, r2
   b5cec:	d1f9      	bne.n	b5ce2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5cee:	780a      	ldrb	r2, [r1, #0]
   b5cf0:	701a      	strb	r2, [r3, #0]
}
   b5cf2:	bd10      	pop	{r4, pc}
   b5cf4:	000b8ec0 	.word	0x000b8ec0

000b5cf8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5cf8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5cfa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5cfe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5d02:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5d06:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5d0a:	2304      	movs	r3, #4
   b5d0c:	6041      	str	r1, [r0, #4]
   b5d0e:	7503      	strb	r3, [r0, #20]
}
   b5d10:	bd10      	pop	{r4, pc}
	...

000b5d14 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5d14:	b507      	push	{r0, r1, r2, lr}
   b5d16:	4b06      	ldr	r3, [pc, #24]	; (b5d30 <_ZN9IPAddressC1EPKh+0x1c>)
   b5d18:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5d1a:	78cb      	ldrb	r3, [r1, #3]
   b5d1c:	9300      	str	r3, [sp, #0]
   b5d1e:	788b      	ldrb	r3, [r1, #2]
   b5d20:	784a      	ldrb	r2, [r1, #1]
   b5d22:	7809      	ldrb	r1, [r1, #0]
   b5d24:	f7ff ffe8 	bl	b5cf8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5d28:	b003      	add	sp, #12
   b5d2a:	f85d fb04 	ldr.w	pc, [sp], #4
   b5d2e:	bf00      	nop
   b5d30:	000b8ec0 	.word	0x000b8ec0

000b5d34 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b5d34:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b5d36:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5d38:	4604      	mov	r4, r0
      if (_M_manager)
   b5d3a:	b113      	cbz	r3, b5d42 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5d3c:	2203      	movs	r2, #3
   b5d3e:	4601      	mov	r1, r0
   b5d40:	4798      	blx	r3
    }
   b5d42:	4620      	mov	r0, r4
   b5d44:	bd10      	pop	{r4, pc}

000b5d46 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5d46:	b513      	push	{r0, r1, r4, lr}
   b5d48:	460b      	mov	r3, r1
   b5d4a:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d4c:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5d50:	466c      	mov	r4, sp
   b5d52:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5d56:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5d5a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5d62:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5d66:	b002      	add	sp, #8
   b5d68:	bd10      	pop	{r4, pc}
	...

000b5d6c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5d6c:	4b01      	ldr	r3, [pc, #4]	; (b5d74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5d6e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5d70:	4770      	bx	lr
   b5d72:	bf00      	nop
   b5d74:	2003e574 	.word	0x2003e574

000b5d78 <serialEventRun>:
{
   b5d78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5d7a:	4b0b      	ldr	r3, [pc, #44]	; (b5da8 <serialEventRun+0x30>)
   b5d7c:	b143      	cbz	r3, b5d90 <serialEventRun+0x18>
   b5d7e:	f7ff ff3b 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b5d82:	6803      	ldr	r3, [r0, #0]
   b5d84:	691b      	ldr	r3, [r3, #16]
   b5d86:	4798      	blx	r3
   b5d88:	2800      	cmp	r0, #0
   b5d8a:	dd01      	ble.n	b5d90 <serialEventRun+0x18>
        serialEvent();
   b5d8c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5d90:	4b06      	ldr	r3, [pc, #24]	; (b5dac <serialEventRun+0x34>)
   b5d92:	b143      	cbz	r3, b5da6 <serialEventRun+0x2e>
   b5d94:	f002 fc18 	bl	b85c8 <_Z22__fetch_global_Serial1v>
   b5d98:	6803      	ldr	r3, [r0, #0]
   b5d9a:	691b      	ldr	r3, [r3, #16]
   b5d9c:	4798      	blx	r3
   b5d9e:	2800      	cmp	r0, #0
   b5da0:	dd01      	ble.n	b5da6 <serialEventRun+0x2e>
        serialEvent1();
   b5da2:	f3af 8000 	nop.w
}
   b5da6:	bd08      	pop	{r3, pc}
	...

000b5db0 <_post_loop>:
{
   b5db0:	b508      	push	{r3, lr}
	serialEventRun();
   b5db2:	f7ff ffe1 	bl	b5d78 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5db6:	f7ff fa33 	bl	b5220 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5dba:	4b01      	ldr	r3, [pc, #4]	; (b5dc0 <_post_loop+0x10>)
   b5dbc:	6018      	str	r0, [r3, #0]
}
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	2003e734 	.word	0x2003e734

000b5dc4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5dc4:	4805      	ldr	r0, [pc, #20]	; (b5ddc <_Z33system_initialize_user_backup_ramv+0x18>)
   b5dc6:	4a06      	ldr	r2, [pc, #24]	; (b5de0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5dc8:	4906      	ldr	r1, [pc, #24]	; (b5de4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5dca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5dcc:	1a12      	subs	r2, r2, r0
   b5dce:	f002 fdcf 	bl	b8970 <memcpy>
    __backup_sram_signature = signature;
   b5dd2:	4b05      	ldr	r3, [pc, #20]	; (b5de8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5dd4:	4a05      	ldr	r2, [pc, #20]	; (b5dec <_Z33system_initialize_user_backup_ramv+0x28>)
   b5dd6:	601a      	str	r2, [r3, #0]
}
   b5dd8:	bd08      	pop	{r3, pc}
   b5dda:	bf00      	nop
   b5ddc:	2003f400 	.word	0x2003f400
   b5de0:	2003f404 	.word	0x2003f404
   b5de4:	000b9544 	.word	0x000b9544
   b5de8:	2003f400 	.word	0x2003f400
   b5dec:	9a271c1e 	.word	0x9a271c1e

000b5df0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5df0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5df2:	2300      	movs	r3, #0
   b5df4:	9300      	str	r3, [sp, #0]
   b5df6:	461a      	mov	r2, r3
   b5df8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5dfc:	f7ff fb02 	bl	b5404 <system_ctrl_set_result>
}
   b5e00:	b003      	add	sp, #12
   b5e02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e08 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e08:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e0a:	8843      	ldrh	r3, [r0, #2]
   b5e0c:	2b0a      	cmp	r3, #10
   b5e0e:	d008      	beq.n	b5e22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e10:	2b50      	cmp	r3, #80	; 0x50
   b5e12:	d10b      	bne.n	b5e2c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e14:	4b09      	ldr	r3, [pc, #36]	; (b5e3c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e16:	681b      	ldr	r3, [r3, #0]
   b5e18:	b14b      	cbz	r3, b5e2e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e1a:	b003      	add	sp, #12
   b5e1c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e20:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e22:	f7ff ffe5 	bl	b5df0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e26:	b003      	add	sp, #12
   b5e28:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e2c:	2300      	movs	r3, #0
   b5e2e:	9300      	str	r3, [sp, #0]
   b5e30:	461a      	mov	r2, r3
   b5e32:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e36:	f7ff fae5 	bl	b5404 <system_ctrl_set_result>
}
   b5e3a:	e7f4      	b.n	b5e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5e3c:	2003e6a4 	.word	0x2003e6a4

000b5e40 <module_user_init_hook>:
{
   b5e40:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5e42:	4812      	ldr	r0, [pc, #72]	; (b5e8c <module_user_init_hook+0x4c>)
   b5e44:	2100      	movs	r1, #0
   b5e46:	f7ff fb1f 	bl	b5488 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5e4a:	4b11      	ldr	r3, [pc, #68]	; (b5e90 <module_user_init_hook+0x50>)
   b5e4c:	681a      	ldr	r2, [r3, #0]
   b5e4e:	4b11      	ldr	r3, [pc, #68]	; (b5e94 <module_user_init_hook+0x54>)
   b5e50:	429a      	cmp	r2, r3
   b5e52:	4b11      	ldr	r3, [pc, #68]	; (b5e98 <module_user_init_hook+0x58>)
   b5e54:	bf0c      	ite	eq
   b5e56:	2201      	moveq	r2, #1
   b5e58:	2200      	movne	r2, #0
   b5e5a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5e5c:	d001      	beq.n	b5e62 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5e5e:	f7ff ffb1 	bl	b5dc4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5e62:	f7ff f9cd 	bl	b5200 <HAL_RNG_GetRandomNumber>
   b5e66:	4604      	mov	r4, r0
    srand(seed);
   b5e68:	f002 fdb2 	bl	b89d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5e6c:	4b0b      	ldr	r3, [pc, #44]	; (b5e9c <module_user_init_hook+0x5c>)
   b5e6e:	b113      	cbz	r3, b5e76 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5e70:	4620      	mov	r0, r4
   b5e72:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5e76:	2100      	movs	r1, #0
   b5e78:	4808      	ldr	r0, [pc, #32]	; (b5e9c <module_user_init_hook+0x5c>)
   b5e7a:	f7ff fa49 	bl	b5310 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5e82:	4807      	ldr	r0, [pc, #28]	; (b5ea0 <module_user_init_hook+0x60>)
   b5e84:	2100      	movs	r1, #0
   b5e86:	f7ff bab3 	b.w	b53f0 <system_ctrl_set_app_request_handler>
   b5e8a:	bf00      	nop
   b5e8c:	000b5d6d 	.word	0x000b5d6d
   b5e90:	2003f400 	.word	0x2003f400
   b5e94:	9a271c1e 	.word	0x9a271c1e
   b5e98:	2003e6a0 	.word	0x2003e6a0
   b5e9c:	00000000 	.word	0x00000000
   b5ea0:	000b5e09 	.word	0x000b5e09

000b5ea4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5ea4:	4b01      	ldr	r3, [pc, #4]	; (b5eac <_GLOBAL__sub_I_RGB+0x8>)
   b5ea6:	2200      	movs	r2, #0
   b5ea8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5eaa:	4770      	bx	lr
   b5eac:	2003e6a8 	.word	0x2003e6a8

000b5eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5eb0:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5eb2:	681a      	ldr	r2, [r3, #0]
   b5eb4:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5eb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5eb8:	4770      	bx	lr
   b5eba:	bf00      	nop
   b5ebc:	2003e568 	.word	0x2003e568
   b5ec0:	2003e6b8 	.word	0x2003e6b8

000b5ec4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5ec4:	6880      	ldr	r0, [r0, #8]
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	68db      	ldr	r3, [r3, #12]
   b5eca:	4718      	bx	r3

000b5ecc <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5ecc:	4770      	bx	lr

000b5ece <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5ece:	4608      	mov	r0, r1
   b5ed0:	b111      	cbz	r1, b5ed8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5ed2:	680b      	ldr	r3, [r1, #0]
   b5ed4:	685b      	ldr	r3, [r3, #4]
   b5ed6:	4718      	bx	r3
}
   b5ed8:	4770      	bx	lr

000b5eda <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5eda:	4770      	bx	lr

000b5edc <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5edc:	4770      	bx	lr

000b5ede <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5ede:	4770      	bx	lr

000b5ee0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5ee0:	4770      	bx	lr

000b5ee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5ee2:	b538      	push	{r3, r4, r5, lr}
   b5ee4:	4604      	mov	r4, r0
   b5ee6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5ee8:	6800      	ldr	r0, [r0, #0]
   b5eea:	212e      	movs	r1, #46	; 0x2e
   b5eec:	f002 fdab 	bl	b8a46 <strchrnul>
    size = s - category;
   b5ef0:	6823      	ldr	r3, [r4, #0]
   b5ef2:	1ac3      	subs	r3, r0, r3
   b5ef4:	602b      	str	r3, [r5, #0]
    if (size) {
   b5ef6:	b123      	cbz	r3, b5f02 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5ef8:	7803      	ldrb	r3, [r0, #0]
   b5efa:	b103      	cbz	r3, b5efe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5efc:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b5efe:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f00:	6020      	str	r0, [r4, #0]
}
   b5f02:	4618      	mov	r0, r3
   b5f04:	bd38      	pop	{r3, r4, r5, pc}

000b5f06 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5f06:	b510      	push	{r4, lr}
   b5f08:	210c      	movs	r1, #12
   b5f0a:	4604      	mov	r4, r0
   b5f0c:	f7fe fcf7 	bl	b48fe <_ZdlPvj>
   b5f10:	4620      	mov	r0, r4
   b5f12:	bd10      	pop	{r4, pc}

000b5f14 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5f14:	b510      	push	{r4, lr}
   b5f16:	2104      	movs	r1, #4
   b5f18:	4604      	mov	r4, r0
   b5f1a:	f7fe fcf0 	bl	b48fe <_ZdlPvj>
   b5f1e:	4620      	mov	r0, r4
   b5f20:	bd10      	pop	{r4, pc}

000b5f22 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5f22:	b510      	push	{r4, lr}
   b5f24:	2104      	movs	r1, #4
   b5f26:	4604      	mov	r4, r0
   b5f28:	f7fe fce9 	bl	b48fe <_ZdlPvj>
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	bd10      	pop	{r4, pc}

000b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5f30:	f7ff b8dc 	b.w	b50ec <os_mutex_recursive_lock>

000b5f34 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b5f34:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b5f36:	f7fe fc91 	bl	b485c <strcmp>
}
   b5f3a:	fab0 f080 	clz	r0, r0
   b5f3e:	0940      	lsrs	r0, r0, #5
   b5f40:	bd08      	pop	{r3, pc}

000b5f42 <__tcf_1>:
   b5f42:	4770      	bx	lr

000b5f44 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b5f44:	b510      	push	{r4, lr}
   b5f46:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b5f48:	f7ff fe56 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b5f4c:	4284      	cmp	r4, r0
   b5f4e:	d010      	beq.n	b5f72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5f50:	f002 fb3a 	bl	b85c8 <_Z22__fetch_global_Serial1v>
   b5f54:	4284      	cmp	r4, r0
   b5f56:	d105      	bne.n	b5f64 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b5f58:	f002 fb36 	bl	b85c8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b5f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b5f60:	f002 b9c7 	b.w	b82f2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5f64:	b12c      	cbz	r4, b5f72 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5f66:	6823      	ldr	r3, [r4, #0]
   b5f68:	4620      	mov	r0, r4
   b5f6a:	685b      	ldr	r3, [r3, #4]
}
   b5f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5f70:	4718      	bx	r3
   b5f72:	bd10      	pop	{r4, pc}

000b5f74 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5f74:	680b      	ldr	r3, [r1, #0]
   b5f76:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5f78:	684b      	ldr	r3, [r1, #4]
   b5f7a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5f7c:	b113      	cbz	r3, b5f84 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b5f7e:	685a      	ldr	r2, [r3, #4]
   b5f80:	3201      	adds	r2, #1
   b5f82:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5f84:	4770      	bx	lr

000b5f86 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5f86:	b513      	push	{r0, r1, r4, lr}
   b5f88:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5f8a:	4608      	mov	r0, r1
   b5f8c:	9101      	str	r1, [sp, #4]
   b5f8e:	f7fe fc6f 	bl	b4870 <strlen>
   b5f92:	9901      	ldr	r1, [sp, #4]
   b5f94:	4602      	mov	r2, r0
   b5f96:	4620      	mov	r0, r4
}
   b5f98:	b002      	add	sp, #8
   b5f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5f9e:	f7ff bdb7 	b.w	b5b10 <_ZN5spark10JSONWriter5valueEPKcj>

000b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5fa2:	b513      	push	{r0, r1, r4, lr}
   b5fa4:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5fa6:	4608      	mov	r0, r1
   b5fa8:	9101      	str	r1, [sp, #4]
   b5faa:	f7fe fc61 	bl	b4870 <strlen>
   b5fae:	6823      	ldr	r3, [r4, #0]
   b5fb0:	9901      	ldr	r1, [sp, #4]
   b5fb2:	68db      	ldr	r3, [r3, #12]
   b5fb4:	4602      	mov	r2, r0
   b5fb6:	4620      	mov	r0, r4
}
   b5fb8:	b002      	add	sp, #8
   b5fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b5fbe:	4718      	bx	r3

000b5fc0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5fc0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5fc2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5fc4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5fc8:	68db      	ldr	r3, [r3, #12]
   b5fca:	2201      	movs	r2, #1
   b5fcc:	f10d 0107 	add.w	r1, sp, #7
   b5fd0:	4798      	blx	r3
}
   b5fd2:	b003      	add	sp, #12
   b5fd4:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fd8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5fd8:	680a      	ldr	r2, [r1, #0]
   b5fda:	6002      	str	r2, [r0, #0]
   b5fdc:	684a      	ldr	r2, [r1, #4]
   b5fde:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   b5fe0:	2200      	movs	r2, #0
   b5fe2:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5fe6:	b510      	push	{r4, lr}
   b5fe8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5fea:	688c      	ldr	r4, [r1, #8]
   b5fec:	6084      	str	r4, [r0, #8]
   b5fee:	68cc      	ldr	r4, [r1, #12]
   b5ff0:	60c4      	str	r4, [r0, #12]
   b5ff2:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ff4:	608a      	str	r2, [r1, #8]
   b5ff6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5ff8:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ffa:	610a      	str	r2, [r1, #16]
   b5ffc:	bd10      	pop	{r4, pc}
	...

000b6000 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b6004:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6008:	f04f 0a14 	mov.w	sl, #20
   b600c:	9300      	str	r3, [sp, #0]
   b600e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6012:	4b18      	ldr	r3, [pc, #96]	; (b6074 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6014:	10a4      	asrs	r4, r4, #2
   b6016:	4617      	mov	r7, r2
   b6018:	435c      	muls	r4, r3
   b601a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b601c:	2c00      	cmp	r4, #0
   b601e:	dd21      	ble.n	b6064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6020:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6022:	fb0a f006 	mul.w	r0, sl, r6
   b6026:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b602a:	463a      	mov	r2, r7
   b602c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6030:	5828      	ldr	r0, [r5, r0]
   b6032:	9101      	str	r1, [sp, #4]
   b6034:	455f      	cmp	r7, fp
   b6036:	bf28      	it	cs
   b6038:	465a      	movcs	r2, fp
   b603a:	f002 fd16 	bl	b8a6a <strncmp>
                if (cmp == 0) {
   b603e:	2800      	cmp	r0, #0
   b6040:	9901      	ldr	r1, [sp, #4]
   b6042:	f04f 0301 	mov.w	r3, #1
   b6046:	d10b      	bne.n	b6060 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6048:	455f      	cmp	r7, fp
   b604a:	d103      	bne.n	b6054 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b604c:	9a00      	ldr	r2, [sp, #0]
   b604e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6050:	4634      	mov	r4, r6
   b6052:	e7e3      	b.n	b601c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6054:	d9fc      	bls.n	b6050 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6056:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6058:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b605c:	3e01      	subs	r6, #1
   b605e:	e7f7      	b.n	b6050 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6060:	dbf9      	blt.n	b6056 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6062:	e7f5      	b.n	b6050 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6064:	eba5 0508 	sub.w	r5, r5, r8
}
   b6068:	4802      	ldr	r0, [pc, #8]	; (b6074 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b606a:	10ad      	asrs	r5, r5, #2
   b606c:	4368      	muls	r0, r5
   b606e:	b003      	add	sp, #12
   b6070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6074:	cccccccd 	.word	0xcccccccd

000b6078 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b607a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b607c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b607e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6080:	b303      	cbz	r3, b60c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6082:	b1f9      	cbz	r1, b60c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6084:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b6086:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b608a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b608c:	a903      	add	r1, sp, #12
   b608e:	a801      	add	r0, sp, #4
   b6090:	f7ff ff27 	bl	b5ee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6094:	4601      	mov	r1, r0
   b6096:	b1a8      	cbz	r0, b60c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6098:	f10d 030b 	add.w	r3, sp, #11
   b609c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b609e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b60a2:	4620      	mov	r0, r4
   b60a4:	f7ff ffac 	bl	b6000 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b60a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b60ac:	b153      	cbz	r3, b60c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b60ae:	6823      	ldr	r3, [r4, #0]
   b60b0:	2414      	movs	r4, #20
   b60b2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b60b6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b60b8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b60bc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b60be:	bfa8      	it	ge
   b60c0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b60c2:	e7e3      	b.n	b608c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b60c4:	4628      	mov	r0, r5
   b60c6:	b004      	add	sp, #16
   b60c8:	bd70      	pop	{r4, r5, r6, pc}

000b60ca <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b60ca:	b40e      	push	{r1, r2, r3}
   b60cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60ce:	b08c      	sub	sp, #48	; 0x30
   b60d0:	af00      	add	r7, sp, #0
   b60d2:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b60d6:	4604      	mov	r4, r0
   b60d8:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b60dc:	607a      	str	r2, [r7, #4]
   b60de:	462b      	mov	r3, r5
   b60e0:	2120      	movs	r1, #32
   b60e2:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b60e6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b60e8:	f7ff f9ae 	bl	b5448 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b60ec:	281f      	cmp	r0, #31
   b60ee:	687a      	ldr	r2, [r7, #4]
   b60f0:	d91a      	bls.n	b6128 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b60f2:	f100 0308 	add.w	r3, r0, #8
   b60f6:	f023 0307 	bic.w	r3, r3, #7
        }
   b60fa:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b60fc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6100:	1c41      	adds	r1, r0, #1
   b6102:	462b      	mov	r3, r5
   b6104:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6106:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6108:	f7ff f99e 	bl	b5448 <vsnprintf>
        if (n > 0) {
   b610c:	1e02      	subs	r2, r0, #0
   b610e:	dd04      	ble.n	b611a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6110:	6823      	ldr	r3, [r4, #0]
   b6112:	4669      	mov	r1, sp
   b6114:	68db      	ldr	r3, [r3, #12]
   b6116:	4620      	mov	r0, r4
   b6118:	4798      	blx	r3
   b611a:	46b5      	mov	sp, r6
}
   b611c:	3730      	adds	r7, #48	; 0x30
   b611e:	46bd      	mov	sp, r7
   b6120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6124:	b003      	add	sp, #12
   b6126:	4770      	bx	lr
    } else if (n > 0) {
   b6128:	2800      	cmp	r0, #0
   b612a:	d0f7      	beq.n	b611c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b612c:	6823      	ldr	r3, [r4, #0]
   b612e:	4602      	mov	r2, r0
   b6130:	68db      	ldr	r3, [r3, #12]
   b6132:	f107 0110 	add.w	r1, r7, #16
   b6136:	4620      	mov	r0, r4
   b6138:	4798      	blx	r3
}
   b613a:	e7ef      	b.n	b611c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b613c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b613c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b613e:	4c09      	ldr	r4, [pc, #36]	; (b6164 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6140:	7823      	ldrb	r3, [r4, #0]
   b6142:	f3bf 8f5b 	dmb	ish
   b6146:	07db      	lsls	r3, r3, #31
   b6148:	d409      	bmi.n	b615e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b614a:	4620      	mov	r0, r4
   b614c:	f7fe fbe6 	bl	b491c <__cxa_guard_acquire>
   b6150:	b128      	cbz	r0, b615e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6152:	4620      	mov	r0, r4
   b6154:	f7fe fbe7 	bl	b4926 <__cxa_guard_release>
   b6158:	4803      	ldr	r0, [pc, #12]	; (b6168 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b615a:	f002 fbeb 	bl	b8934 <atexit>
}
   b615e:	4803      	ldr	r0, [pc, #12]	; (b616c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6160:	bd10      	pop	{r4, pc}
   b6162:	bf00      	nop
   b6164:	2003e6c0 	.word	0x2003e6c0
   b6168:	000b5edb 	.word	0x000b5edb
   b616c:	2003e56c 	.word	0x2003e56c

000b6170 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6170:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6172:	4c09      	ldr	r4, [pc, #36]	; (b6198 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6174:	7823      	ldrb	r3, [r4, #0]
   b6176:	f3bf 8f5b 	dmb	ish
   b617a:	07db      	lsls	r3, r3, #31
   b617c:	d409      	bmi.n	b6192 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b617e:	4620      	mov	r0, r4
   b6180:	f7fe fbcc 	bl	b491c <__cxa_guard_acquire>
   b6184:	b128      	cbz	r0, b6192 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6186:	4620      	mov	r0, r4
   b6188:	f7fe fbcd 	bl	b4926 <__cxa_guard_release>
   b618c:	4803      	ldr	r0, [pc, #12]	; (b619c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b618e:	f002 fbd1 	bl	b8934 <atexit>
    return &factory;
}
   b6192:	4803      	ldr	r0, [pc, #12]	; (b61a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6194:	bd10      	pop	{r4, pc}
   b6196:	bf00      	nop
   b6198:	2003e6c4 	.word	0x2003e6c4
   b619c:	000b5f43 	.word	0x000b5f43
   b61a0:	2003e570 	.word	0x2003e570

000b61a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b61a4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b61a6:	2500      	movs	r5, #0
   b61a8:	4604      	mov	r4, r0
   b61aa:	e9c0 5500 	strd	r5, r5, [r0]
   b61ae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b61b2:	6085      	str	r5, [r0, #8]
   b61b4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b61b6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b61ba:	f7fe ff87 	bl	b50cc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b61be:	f7ff ffbd 	bl	b613c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b61c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b61c4:	f7ff ffd4 	bl	b6170 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b61c8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b61ca:	6220      	str	r0, [r4, #32]
}
   b61cc:	4620      	mov	r0, r4
   b61ce:	bd38      	pop	{r3, r4, r5, pc}

000b61d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b61d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b61d2:	4c0a      	ldr	r4, [pc, #40]	; (b61fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b61d4:	7823      	ldrb	r3, [r4, #0]
   b61d6:	f3bf 8f5b 	dmb	ish
   b61da:	07db      	lsls	r3, r3, #31
   b61dc:	d40c      	bmi.n	b61f8 <_ZN5spark10LogManager8instanceEv+0x28>
   b61de:	4620      	mov	r0, r4
   b61e0:	f7fe fb9c 	bl	b491c <__cxa_guard_acquire>
   b61e4:	b140      	cbz	r0, b61f8 <_ZN5spark10LogManager8instanceEv+0x28>
   b61e6:	4806      	ldr	r0, [pc, #24]	; (b6200 <_ZN5spark10LogManager8instanceEv+0x30>)
   b61e8:	f7ff ffdc 	bl	b61a4 <_ZN5spark10LogManagerC1Ev>
   b61ec:	4620      	mov	r0, r4
   b61ee:	f7fe fb9a 	bl	b4926 <__cxa_guard_release>
   b61f2:	4804      	ldr	r0, [pc, #16]	; (b6204 <_ZN5spark10LogManager8instanceEv+0x34>)
   b61f4:	f002 fb9e 	bl	b8934 <atexit>
    return &mgr;
}
   b61f8:	4801      	ldr	r0, [pc, #4]	; (b6200 <_ZN5spark10LogManager8instanceEv+0x30>)
   b61fa:	bd10      	pop	{r4, pc}
   b61fc:	2003e6bc 	.word	0x2003e6bc
   b6200:	2003e6cc 	.word	0x2003e6cc
   b6204:	000b6749 	.word	0x000b6749

000b6208 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b6208:	4a02      	ldr	r2, [pc, #8]	; (b6214 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b620a:	4903      	ldr	r1, [pc, #12]	; (b6218 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b620c:	4803      	ldr	r0, [pc, #12]	; (b621c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b620e:	2300      	movs	r3, #0
   b6210:	f7ff b86e 	b.w	b52f0 <log_set_callbacks>
   b6214:	000b652d 	.word	0x000b652d
   b6218:	000b64b9 	.word	0x000b64b9
   b621c:	000b6439 	.word	0x000b6439

000b6220 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b6220:	2300      	movs	r3, #0
   b6222:	461a      	mov	r2, r3
   b6224:	4619      	mov	r1, r3
   b6226:	4618      	mov	r0, r3
   b6228:	f7ff b862 	b.w	b52f0 <log_set_callbacks>

000b622c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b622c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b622e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b6230:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6232:	4668      	mov	r0, sp
   b6234:	f7ff fe9e 	bl	b5f74 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b6238:	466a      	mov	r2, sp
   b623a:	4629      	mov	r1, r5
   b623c:	4620      	mov	r0, r4
   b623e:	f7ff fb87 	bl	b5950 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b6242:	a801      	add	r0, sp, #4
   b6244:	f7ff fa62 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6248:	4620      	mov	r0, r4
   b624a:	b003      	add	sp, #12
   b624c:	bd30      	pop	{r4, r5, pc}

000b624e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b624e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b6250:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b6252:	4604      	mov	r4, r0
   b6254:	4668      	mov	r0, sp
   b6256:	f7ff fe8d 	bl	b5f74 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b625a:	466a      	mov	r2, sp
   b625c:	4629      	mov	r1, r5
   b625e:	4620      	mov	r0, r4
   b6260:	f7ff fb52 	bl	b5908 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6264:	a801      	add	r0, sp, #4
   b6266:	f7ff fa51 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b626a:	4620      	mov	r0, r4
   b626c:	b003      	add	sp, #12
   b626e:	bd30      	pop	{r4, r5, pc}

000b6270 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6270:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b6272:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b6274:	4604      	mov	r4, r0
   b6276:	4668      	mov	r0, sp
   b6278:	f7ff fe7c 	bl	b5f74 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b627c:	466a      	mov	r2, sp
   b627e:	4629      	mov	r1, r5
   b6280:	4620      	mov	r0, r4
   b6282:	f7ff faea 	bl	b585a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b6286:	a801      	add	r0, sp, #4
   b6288:	f7ff fa40 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b628c:	4620      	mov	r0, r4
   b628e:	b003      	add	sp, #12
   b6290:	bd30      	pop	{r4, r5, pc}
	...

000b6294 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b6294:	b570      	push	{r4, r5, r6, lr}
   b6296:	b08a      	sub	sp, #40	; 0x28
   b6298:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b629a:	4601      	mov	r1, r0
   b629c:	a804      	add	r0, sp, #16
   b629e:	f7ff ffc5 	bl	b622c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b62a2:	4e14      	ldr	r6, [pc, #80]	; (b62f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b62a4:	a804      	add	r0, sp, #16
   b62a6:	f7ff fb6b 	bl	b5980 <_ZN5spark18JSONObjectIterator4nextEv>
   b62aa:	b1e8      	cbz	r0, b62e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b62ac:	a904      	add	r1, sp, #16
   b62ae:	4668      	mov	r0, sp
   b62b0:	f7ff ffcd 	bl	b624e <_ZNK5spark18JSONObjectIterator4nameEv>
   b62b4:	9802      	ldr	r0, [sp, #8]
   b62b6:	4631      	mov	r1, r6
   b62b8:	f7ff fe3c 	bl	b5f34 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b62bc:	4604      	mov	r4, r0
   b62be:	b110      	cbz	r0, b62c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b62c0:	1e2c      	subs	r4, r5, #0
   b62c2:	bf18      	it	ne
   b62c4:	2401      	movne	r4, #1
   b62c6:	a801      	add	r0, sp, #4
   b62c8:	f7ff fa20 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b62cc:	2c00      	cmp	r4, #0
   b62ce:	d0e9      	beq.n	b62a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b62d0:	a904      	add	r1, sp, #16
   b62d2:	4668      	mov	r0, sp
   b62d4:	f7ff ffcc 	bl	b6270 <_ZNK5spark18JSONObjectIterator5valueEv>
   b62d8:	4668      	mov	r0, sp
   b62da:	f7ff faf4 	bl	b58c6 <_ZNK5spark9JSONValue5toIntEv>
   b62de:	6028      	str	r0, [r5, #0]
   b62e0:	a801      	add	r0, sp, #4
   b62e2:	f7ff fa13 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b62e6:	e7dd      	b.n	b62a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b62e8:	a805      	add	r0, sp, #20
   b62ea:	f7ff fa0f 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b62ee:	b00a      	add	sp, #40	; 0x28
   b62f0:	bd70      	pop	{r4, r5, r6, pc}
   b62f2:	bf00      	nop
   b62f4:	000b8ee8 	.word	0x000b8ee8

000b62f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b62f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b62fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b62fc:	4620      	mov	r0, r4
   b62fe:	4913      	ldr	r1, [pc, #76]	; (b634c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b6300:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b6302:	f7fe faab 	bl	b485c <strcmp>
   b6306:	b950      	cbnz	r0, b631e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b6308:	f7ff fc76 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b630c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6310:	f7ff fc60 	bl	b5bd4 <_ZN9USBSerial5beginEl>
}
   b6314:	b003      	add	sp, #12
   b6316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b631a:	f7ff bc6d 	b.w	b5bf8 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b631e:	490c      	ldr	r1, [pc, #48]	; (b6350 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b6320:	4620      	mov	r0, r4
   b6322:	f7fe fa9b 	bl	b485c <strcmp>
   b6326:	b978      	cbnz	r0, b6348 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b6328:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b632c:	a901      	add	r1, sp, #4
   b632e:	4628      	mov	r0, r5
        int baud = 9600;
   b6330:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b6332:	f7ff ffaf 	bl	b6294 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b6336:	f002 f947 	bl	b85c8 <_Z22__fetch_global_Serial1v>
   b633a:	9901      	ldr	r1, [sp, #4]
   b633c:	f001 ffd6 	bl	b82ec <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b6340:	f002 f942 	bl	b85c8 <_Z22__fetch_global_Serial1v>
}
   b6344:	b003      	add	sp, #12
   b6346:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b6348:	2000      	movs	r0, #0
   b634a:	e7fb      	b.n	b6344 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b634c:	000b8eed 	.word	0x000b8eed
   b6350:	000b8ef4 	.word	0x000b8ef4

000b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6354:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6356:	e9d0 5300 	ldrd	r5, r3, [r0]
   b635a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b635c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b635e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6362:	42ae      	cmp	r6, r5
   b6364:	d005      	beq.n	b6372 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b6366:	f105 0008 	add.w	r0, r5, #8
   b636a:	f7ff fff3 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b636e:	3514      	adds	r5, #20
   b6370:	e7f7      	b.n	b6362 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b6372:	6820      	ldr	r0, [r4, #0]
   b6374:	f7ff f858 	bl	b5428 <free>
}
   b6378:	4620      	mov	r0, r4
   b637a:	bd70      	pop	{r4, r5, r6, pc}

000b637c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b637c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b637e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6382:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6384:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6388:	42ae      	cmp	r6, r5
   b638a:	d004      	beq.n	b6396 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b638c:	4628      	mov	r0, r5
   b638e:	f002 f80d 	bl	b83ac <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b6392:	3510      	adds	r5, #16
   b6394:	e7f8      	b.n	b6388 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6396:	6820      	ldr	r0, [r4, #0]
   b6398:	f7ff f846 	bl	b5428 <free>
}
   b639c:	4620      	mov	r0, r4
   b639e:	bd70      	pop	{r4, r5, r6, pc}

000b63a0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b63a0:	b510      	push	{r4, lr}
   b63a2:	4604      	mov	r4, r0
   b63a4:	300c      	adds	r0, #12
   b63a6:	f7ff ffd5 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b63aa:	4620      	mov	r0, r4
   b63ac:	f7ff ffe6 	bl	b637c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b63b0:	4620      	mov	r0, r4
   b63b2:	bd10      	pop	{r4, pc}

000b63b4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b63b4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b63b6:	4b04      	ldr	r3, [pc, #16]	; (b63c8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b63b8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b63ba:	f840 3b04 	str.w	r3, [r0], #4
   b63be:	f7ff ffef 	bl	b63a0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b63c2:	4620      	mov	r0, r4
   b63c4:	bd10      	pop	{r4, pc}
   b63c6:	bf00      	nop
   b63c8:	000b8dac 	.word	0x000b8dac

000b63cc <_ZN5spark16StreamLogHandlerD0Ev>:
   b63cc:	b510      	push	{r4, lr}
   b63ce:	4604      	mov	r4, r0
   b63d0:	f7ff fff0 	bl	b63b4 <_ZN5spark16StreamLogHandlerD1Ev>
   b63d4:	4620      	mov	r0, r4
   b63d6:	2124      	movs	r1, #36	; 0x24
   b63d8:	f7fe fa91 	bl	b48fe <_ZdlPvj>
   b63dc:	4620      	mov	r0, r4
   b63de:	bd10      	pop	{r4, pc}

000b63e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b63e0:	b510      	push	{r4, lr}
   b63e2:	4b03      	ldr	r3, [pc, #12]	; (b63f0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b63e4:	6003      	str	r3, [r0, #0]
   b63e6:	4604      	mov	r4, r0
   b63e8:	f7ff ffe4 	bl	b63b4 <_ZN5spark16StreamLogHandlerD1Ev>
   b63ec:	4620      	mov	r0, r4
   b63ee:	bd10      	pop	{r4, pc}
   b63f0:	000b8f90 	.word	0x000b8f90

000b63f4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b63f4:	b510      	push	{r4, lr}
   b63f6:	4604      	mov	r4, r0
   b63f8:	f7ff fff2 	bl	b63e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b63fc:	4620      	mov	r0, r4
   b63fe:	2124      	movs	r1, #36	; 0x24
   b6400:	f7fe fa7d 	bl	b48fe <_ZdlPvj>
   b6404:	4620      	mov	r0, r4
   b6406:	bd10      	pop	{r4, pc}

000b6408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b6408:	2200      	movs	r2, #0
   b640a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b640e:	b510      	push	{r4, lr}
        capacity_(0) {
   b6410:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6412:	680c      	ldr	r4, [r1, #0]
   b6414:	6004      	str	r4, [r0, #0]
   b6416:	684c      	ldr	r4, [r1, #4]
   b6418:	6044      	str	r4, [r0, #4]
   b641a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b641c:	600a      	str	r2, [r1, #0]
   b641e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6420:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6422:	608a      	str	r2, [r1, #8]
}
   b6424:	bd10      	pop	{r4, pc}

000b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6426:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6428:	6803      	ldr	r3, [r0, #0]
   b642a:	4604      	mov	r4, r0
   b642c:	6818      	ldr	r0, [r3, #0]
   b642e:	f7fe fe65 	bl	b50fc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b6432:	4620      	mov	r0, r4
   b6434:	bd10      	pop	{r4, pc}
	...

000b6438 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b6438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b643c:	b087      	sub	sp, #28
   b643e:	4680      	mov	r8, r0
   b6440:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b6442:	4b1c      	ldr	r3, [pc, #112]	; (b64b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b6444:	685b      	ldr	r3, [r3, #4]
   b6446:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b644a:	4689      	mov	r9, r1
   b644c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b644e:	b96b      	cbnz	r3, b646c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b6450:	f7ff febe 	bl	b61d0 <_ZN5spark10LogManager8instanceEv>
   b6454:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b6456:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b645a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b645c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b645e:	f7ff fd67 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b6462:	7b23      	ldrb	r3, [r4, #12]
   b6464:	b12b      	cbz	r3, b6472 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b6466:	a805      	add	r0, sp, #20
   b6468:	f7ff ffdd 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b646c:	b007      	add	sp, #28
   b646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b6472:	2301      	movs	r3, #1
   b6474:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b6476:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b647a:	fa5f f989 	uxtb.w	r9, r9
   b647e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b6482:	45aa      	cmp	sl, r5
   b6484:	d012      	beq.n	b64ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b6486:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b648a:	4631      	mov	r1, r6
   b648c:	1d38      	adds	r0, r7, #4
   b648e:	f7ff fdf3 	bl	b6078 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b6492:	4581      	cmp	r9, r0
   b6494:	d3f5      	bcc.n	b6482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b6496:	683b      	ldr	r3, [r7, #0]
   b6498:	9a03      	ldr	r2, [sp, #12]
   b649a:	9200      	str	r2, [sp, #0]
   b649c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b64a0:	464a      	mov	r2, r9
   b64a2:	4633      	mov	r3, r6
   b64a4:	4641      	mov	r1, r8
   b64a6:	4638      	mov	r0, r7
   b64a8:	47d8      	blx	fp
   b64aa:	e7ea      	b.n	b6482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b64ac:	2300      	movs	r3, #0
   b64ae:	7323      	strb	r3, [r4, #12]
   b64b0:	e7d9      	b.n	b6466 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b64b2:	bf00      	nop
   b64b4:	e000ed00 	.word	0xe000ed00

000b64b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b64b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64bc:	469b      	mov	fp, r3
   b64be:	4b1a      	ldr	r3, [pc, #104]	; (b6528 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b64c0:	685b      	ldr	r3, [r3, #4]
   b64c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b64c6:	4680      	mov	r8, r0
   b64c8:	4689      	mov	r9, r1
   b64ca:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b64cc:	b96b      	cbnz	r3, b64ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b64ce:	f7ff fe7f 	bl	b61d0 <_ZN5spark10LogManager8instanceEv>
   b64d2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b64d4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b64d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b64da:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b64dc:	f7ff fd28 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b64e0:	7b23      	ldrb	r3, [r4, #12]
   b64e2:	b12b      	cbz	r3, b64f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b64e4:	a801      	add	r0, sp, #4
   b64e6:	f7ff ff9e 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b64ea:	b003      	add	sp, #12
   b64ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b64f0:	2301      	movs	r3, #1
   b64f2:	7323      	strb	r3, [r4, #12]
   b64f4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b64f8:	b2f6      	uxtb	r6, r6
   b64fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b64fe:	4555      	cmp	r5, sl
   b6500:	d00e      	beq.n	b6520 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b6502:	f855 7b04 	ldr.w	r7, [r5], #4
   b6506:	4659      	mov	r1, fp
   b6508:	1d38      	adds	r0, r7, #4
   b650a:	f7ff fdb5 	bl	b6078 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b650e:	4286      	cmp	r6, r0
   b6510:	d3f5      	bcc.n	b64fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b6512:	683b      	ldr	r3, [r7, #0]
   b6514:	464a      	mov	r2, r9
   b6516:	68db      	ldr	r3, [r3, #12]
   b6518:	4641      	mov	r1, r8
   b651a:	4638      	mov	r0, r7
   b651c:	4798      	blx	r3
   b651e:	e7ee      	b.n	b64fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b6520:	2300      	movs	r3, #0
   b6522:	7323      	strb	r3, [r4, #12]
   b6524:	e7de      	b.n	b64e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b6526:	bf00      	nop
   b6528:	e000ed00 	.word	0xe000ed00

000b652c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b652c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6530:	4b16      	ldr	r3, [pc, #88]	; (b658c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b6532:	685b      	ldr	r3, [r3, #4]
   b6534:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b6538:	4605      	mov	r5, r0
   b653a:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b653c:	bb1b      	cbnz	r3, b6586 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b653e:	f7ff fe47 	bl	b61d0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b6542:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b6546:	4604      	mov	r4, r0
   b6548:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b654a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b654c:	f7ff fcf0 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
   b6550:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b6554:	2446      	movs	r4, #70	; 0x46
   b6556:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b655a:	45b0      	cmp	r8, r6
   b655c:	d109      	bne.n	b6572 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b655e:	a801      	add	r0, sp, #4
   b6560:	f7ff ff61 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b6564:	42a5      	cmp	r5, r4
   b6566:	bfb4      	ite	lt
   b6568:	2000      	movlt	r0, #0
   b656a:	2001      	movge	r0, #1
}
   b656c:	b002      	add	sp, #8
   b656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b6572:	f856 0b04 	ldr.w	r0, [r6], #4
   b6576:	4639      	mov	r1, r7
   b6578:	3004      	adds	r0, #4
   b657a:	f7ff fd7d 	bl	b6078 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b657e:	4284      	cmp	r4, r0
   b6580:	bfa8      	it	ge
   b6582:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b6584:	e7e9      	b.n	b655a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b6586:	2000      	movs	r0, #0
   b6588:	e7f0      	b.n	b656c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b658a:	bf00      	nop
   b658c:	e000ed00 	.word	0xe000ed00

000b6590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6592:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b6596:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6598:	4604      	mov	r4, r0
   b659a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b659c:	db0d      	blt.n	b65ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b659e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b65a0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b65a2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b65a4:	dd04      	ble.n	b65b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b65a6:	00b9      	lsls	r1, r7, #2
   b65a8:	f7fe ff46 	bl	b5438 <realloc>
            if (!d) {
   b65ac:	b918      	cbnz	r0, b65b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b65ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b65b0:	f7fe ff3a 	bl	b5428 <free>
        T* d = nullptr;
   b65b4:	2000      	movs	r0, #0
        data_ = d;
   b65b6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b65b8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b65ba:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b65bc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65be:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b65c2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65c4:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b65c8:	1d08      	adds	r0, r1, #4
   b65ca:	f002 f9df 	bl	b898c <memmove>
    new(p) T(std::move(value));
   b65ce:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b65d2:	6863      	ldr	r3, [r4, #4]
   b65d4:	3301      	adds	r3, #1
   b65d6:	6063      	str	r3, [r4, #4]
    return true;
   b65d8:	2001      	movs	r0, #1
   b65da:	e7e8      	b.n	b65ae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b65dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b65dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b65de:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b65e2:	4604      	mov	r4, r0
   b65e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b65e6:	9301      	str	r3, [sp, #4]
   b65e8:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b65ea:	f7ff fca1 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b65ee:	e9d4 3200 	ldrd	r3, r2, [r4]
   b65f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b65f6:	4293      	cmp	r3, r2
   b65f8:	4619      	mov	r1, r3
   b65fa:	d00b      	beq.n	b6614 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b65fc:	6809      	ldr	r1, [r1, #0]
   b65fe:	42a9      	cmp	r1, r5
   b6600:	f103 0304 	add.w	r3, r3, #4
   b6604:	d1f7      	bne.n	b65f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b6606:	a801      	add	r0, sp, #4
   b6608:	f7ff ff0d 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b660c:	2500      	movs	r5, #0
}
   b660e:	4628      	mov	r0, r5
   b6610:	b003      	add	sp, #12
   b6612:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b6614:	4629      	mov	r1, r5
   b6616:	4620      	mov	r0, r4
   b6618:	f7ff ffba 	bl	b6590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b661c:	4605      	mov	r5, r0
   b661e:	2800      	cmp	r0, #0
   b6620:	d0f1      	beq.n	b6606 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b6622:	6863      	ldr	r3, [r4, #4]
   b6624:	2b01      	cmp	r3, #1
   b6626:	d101      	bne.n	b662c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b6628:	f7ff fdee 	bl	b6208 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b662c:	a801      	add	r0, sp, #4
   b662e:	f7ff fefa 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b6632:	e7ec      	b.n	b660e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b6634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6634:	b570      	push	{r4, r5, r6, lr}
   b6636:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b6638:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b663c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b663e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b6642:	4282      	cmp	r2, r0
   b6644:	d00f      	beq.n	b6666 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b6646:	4601      	mov	r1, r0
            if (*p == value) {
   b6648:	681d      	ldr	r5, [r3, #0]
   b664a:	f851 6b04 	ldr.w	r6, [r1], #4
   b664e:	42ae      	cmp	r6, r5
   b6650:	d107      	bne.n	b6662 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6652:	1a52      	subs	r2, r2, r1
   b6654:	f002 f99a 	bl	b898c <memmove>
    --size_;
   b6658:	6863      	ldr	r3, [r4, #4]
   b665a:	3b01      	subs	r3, #1
   b665c:	6063      	str	r3, [r4, #4]
    return true;
   b665e:	2001      	movs	r0, #1
}
   b6660:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b6662:	4608      	mov	r0, r1
   b6664:	e7ed      	b.n	b6642 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b6666:	2000      	movs	r0, #0
   b6668:	e7fa      	b.n	b6660 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b666a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b666a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b666c:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b6670:	4604      	mov	r4, r0
   b6672:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b6674:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6676:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b6678:	f7ff fc5a 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b667c:	a901      	add	r1, sp, #4
   b667e:	4620      	mov	r0, r4
   b6680:	f7ff ffd8 	bl	b6634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b6684:	b118      	cbz	r0, b668e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b6686:	6863      	ldr	r3, [r4, #4]
   b6688:	b90b      	cbnz	r3, b668e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b668a:	f7ff fdc9 	bl	b6220 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b668e:	a803      	add	r0, sp, #12
   b6690:	f7ff fec9 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b6694:	b004      	add	sp, #16
   b6696:	bd10      	pop	{r4, pc}

000b6698 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b6698:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b669a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b669e:	2318      	movs	r3, #24
   b66a0:	4604      	mov	r4, r0
   b66a2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b66a6:	42ae      	cmp	r6, r5
   b66a8:	d015      	beq.n	b66d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b66aa:	f105 0110 	add.w	r1, r5, #16
   b66ae:	4620      	mov	r0, r4
   b66b0:	f7ff ffc0 	bl	b6634 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b66b4:	6863      	ldr	r3, [r4, #4]
   b66b6:	b90b      	cbnz	r3, b66bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b66b8:	f7ff fdb2 	bl	b6220 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b66bc:	69e0      	ldr	r0, [r4, #28]
   b66be:	6929      	ldr	r1, [r5, #16]
   b66c0:	6803      	ldr	r3, [r0, #0]
   b66c2:	68db      	ldr	r3, [r3, #12]
   b66c4:	4798      	blx	r3
        if (h.stream) {
   b66c6:	6969      	ldr	r1, [r5, #20]
   b66c8:	b119      	cbz	r1, b66d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b66ca:	6a20      	ldr	r0, [r4, #32]
   b66cc:	6803      	ldr	r3, [r0, #0]
   b66ce:	68db      	ldr	r3, [r3, #12]
   b66d0:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b66d2:	3518      	adds	r5, #24
   b66d4:	e7e7      	b.n	b66a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b66d6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b66da:	2618      	movs	r6, #24
   b66dc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b66e0:	42ae      	cmp	r6, r5
   b66e2:	d004      	beq.n	b66ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b66e4:	4628      	mov	r0, r5
   b66e6:	f001 fe61 	bl	b83ac <_ZN6StringD1Ev>
   b66ea:	3518      	adds	r5, #24
   b66ec:	e7f8      	b.n	b66e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b66ee:	2300      	movs	r3, #0
   b66f0:	6163      	str	r3, [r4, #20]
}
   b66f2:	bd70      	pop	{r4, r5, r6, pc}

000b66f4 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b66f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66f6:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b66f8:	f7ff fd92 	bl	b6220 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b66fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b6700:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6702:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b6704:	f7ff fc14 	bl	b5f30 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b6708:	4620      	mov	r0, r4
   b670a:	f7ff ffc5 	bl	b6698 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b670e:	a801      	add	r0, sp, #4
   b6710:	f7ff fe89 	bl	b6426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b6714:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6716:	b108      	cbz	r0, b671c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b6718:	f7fe fce0 	bl	b50dc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b671c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b6720:	2618      	movs	r6, #24
   b6722:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6726:	42ae      	cmp	r6, r5
   b6728:	d004      	beq.n	b6734 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b672a:	4628      	mov	r0, r5
   b672c:	f001 fe3e 	bl	b83ac <_ZN6StringD1Ev>
   b6730:	3518      	adds	r5, #24
   b6732:	e7f8      	b.n	b6726 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b6734:	6920      	ldr	r0, [r4, #16]
   b6736:	f7fe fe77 	bl	b5428 <free>
   b673a:	6820      	ldr	r0, [r4, #0]
   b673c:	f7fe fe74 	bl	b5428 <free>
}
   b6740:	4620      	mov	r0, r4
   b6742:	b002      	add	sp, #8
   b6744:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6748 <__tcf_2>:
    static LogManager mgr;
   b6748:	4801      	ldr	r0, [pc, #4]	; (b6750 <__tcf_2+0x8>)
   b674a:	f7ff bfd3 	b.w	b66f4 <_ZN5spark10LogManagerD1Ev>
   b674e:	bf00      	nop
   b6750:	2003e6cc 	.word	0x2003e6cc

000b6754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b6754:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6758:	4604      	mov	r4, r0
   b675a:	460d      	mov	r5, r1
   b675c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b675e:	d915      	bls.n	b678c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b6760:	4290      	cmp	r0, r2
   b6762:	d214      	bcs.n	b678e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b6764:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b6768:	1a75      	subs	r5, r6, r1
   b676a:	f1a1 0714 	sub.w	r7, r1, #20
   b676e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6770:	42b7      	cmp	r7, r6
   b6772:	d01a      	beq.n	b67aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b6774:	b11c      	cbz	r4, b677e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b6776:	4631      	mov	r1, r6
   b6778:	4620      	mov	r0, r4
   b677a:	f7ff fc2d 	bl	b5fd8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b677e:	f106 0008 	add.w	r0, r6, #8
   b6782:	f7ff fde7 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b6786:	3e14      	subs	r6, #20
   b6788:	3c14      	subs	r4, #20
   b678a:	e7f1      	b.n	b6770 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b678c:	d00d      	beq.n	b67aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b678e:	42b5      	cmp	r5, r6
   b6790:	d00b      	beq.n	b67aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b6792:	b11c      	cbz	r4, b679c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b6794:	4629      	mov	r1, r5
   b6796:	4620      	mov	r0, r4
   b6798:	f7ff fc1e 	bl	b5fd8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b679c:	f105 0008 	add.w	r0, r5, #8
   b67a0:	f7ff fdd8 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b67a4:	3514      	adds	r5, #20
   b67a6:	3414      	adds	r4, #20
   b67a8:	e7f1      	b.n	b678e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b67aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b67ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b67ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b67ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67b0:	4604      	mov	r4, r0
   b67b2:	460d      	mov	r5, r1
   b67b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b67b6:	d914      	bls.n	b67e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b67b8:	4290      	cmp	r0, r2
   b67ba:	d213      	bcs.n	b67e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b67bc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b67c0:	1a75      	subs	r5, r6, r1
   b67c2:	f1a1 0710 	sub.w	r7, r1, #16
   b67c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b67c8:	42b7      	cmp	r7, r6
   b67ca:	d018      	beq.n	b67fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b67cc:	b11c      	cbz	r4, b67d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b67ce:	4631      	mov	r1, r6
   b67d0:	4620      	mov	r0, r4
   b67d2:	f001 fe67 	bl	b84a4 <_ZN6StringC1EOS_>
                end->~T();
   b67d6:	4630      	mov	r0, r6
   b67d8:	f001 fde8 	bl	b83ac <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b67dc:	3e10      	subs	r6, #16
   b67de:	3c10      	subs	r4, #16
   b67e0:	e7f2      	b.n	b67c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b67e2:	d00c      	beq.n	b67fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b67e4:	42b5      	cmp	r5, r6
   b67e6:	d00a      	beq.n	b67fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b67e8:	b11c      	cbz	r4, b67f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b67ea:	4629      	mov	r1, r5
   b67ec:	4620      	mov	r0, r4
   b67ee:	f001 fe59 	bl	b84a4 <_ZN6StringC1EOS_>
                p->~T();
   b67f2:	4628      	mov	r0, r5
   b67f4:	f001 fdda 	bl	b83ac <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b67f8:	3510      	adds	r5, #16
   b67fa:	3410      	adds	r4, #16
   b67fc:	e7f2      	b.n	b67e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b67fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b6800:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6802:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6804:	4605      	mov	r5, r0
        if (n > 0) {
   b6806:	dd11      	ble.n	b682c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b6808:	0130      	lsls	r0, r6, #4
   b680a:	f7fe fe05 	bl	b5418 <malloc>
            if (!d) {
   b680e:	4604      	mov	r4, r0
   b6810:	b158      	cbz	r0, b682a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6812:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6816:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b681a:	f7ff ffc7 	bl	b67ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b681e:	6828      	ldr	r0, [r5, #0]
   b6820:	f7fe fe02 	bl	b5428 <free>
        data_ = d;
   b6824:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6826:	60ae      	str	r6, [r5, #8]
        return true;
   b6828:	2001      	movs	r0, #1
    }
   b682a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b682c:	2400      	movs	r4, #0
   b682e:	e7f6      	b.n	b681e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b6830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6834:	4690      	mov	r8, r2
   b6836:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b6838:	2300      	movs	r3, #0
   b683a:	9103      	str	r1, [sp, #12]
    return size_;
   b683c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b6840:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6842:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b6844:	4299      	cmp	r1, r3
        capacity_(0) {
   b6846:	e9c0 3300 	strd	r3, r3, [r0]
   b684a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b684e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6852:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b6856:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b6858:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b685a:	dc23      	bgt.n	b68a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b685c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b6860:	2314      	movs	r3, #20
   b6862:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b6866:	42af      	cmp	r7, r5
   b6868:	d03b      	beq.n	b68e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b686a:	4629      	mov	r1, r5
   b686c:	a80b      	add	r0, sp, #44	; 0x2c
   b686e:	f001 fe19 	bl	b84a4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b6872:	a90b      	add	r1, sp, #44	; 0x2c
   b6874:	a80f      	add	r0, sp, #60	; 0x3c
   b6876:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b6878:	f001 fe14 	bl	b84a4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b687c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b6880:	4299      	cmp	r1, r3
   b6882:	da1b      	bge.n	b68bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b6884:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b6886:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b6888:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b688c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b6890:	4631      	mov	r1, r6
   b6892:	f106 0010 	add.w	r0, r6, #16
   b6896:	f7ff ff89 	bl	b67ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b689a:	b9ee      	cbnz	r6, b68d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b689e:	3301      	adds	r3, #1
   b68a0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b68a2:	e011      	b.n	b68c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b68a4:	a808      	add	r0, sp, #32
   b68a6:	f7ff ffab 	bl	b6800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b68aa:	2800      	cmp	r0, #0
   b68ac:	d1d6      	bne.n	b685c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b68ae:	a808      	add	r0, sp, #32
   b68b0:	f7ff fd64 	bl	b637c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b68b4:	4620      	mov	r0, r4
   b68b6:	b015      	add	sp, #84	; 0x54
   b68b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b68bc:	3101      	adds	r1, #1
   b68be:	a808      	add	r0, sp, #32
   b68c0:	f7ff ff9e 	bl	b6800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b68c4:	2800      	cmp	r0, #0
   b68c6:	d1dd      	bne.n	b6884 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b68c8:	a80f      	add	r0, sp, #60	; 0x3c
   b68ca:	f001 fd6f 	bl	b83ac <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b68ce:	a80b      	add	r0, sp, #44	; 0x2c
   b68d0:	f001 fd6c 	bl	b83ac <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b68d4:	3514      	adds	r5, #20
   b68d6:	e7c6      	b.n	b6866 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b68d8:	a90f      	add	r1, sp, #60	; 0x3c
   b68da:	4630      	mov	r0, r6
   b68dc:	f001 fde2 	bl	b84a4 <_ZN6StringC1EOS_>
   b68e0:	e7dc      	b.n	b689c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b68e2:	2600      	movs	r6, #0
   b68e4:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b68e8:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b68ea:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b68ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b68f2:	429e      	cmp	r6, r3
   b68f4:	da7c      	bge.n	b69f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b68f6:	0133      	lsls	r3, r6, #4
   b68f8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b68fa:	9306      	str	r3, [sp, #24]
        if (!category) {
   b68fc:	b90b      	cbnz	r3, b6902 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b68fe:	3601      	adds	r6, #1
   b6900:	e7f5      	b.n	b68ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b6902:	2300      	movs	r3, #0
   b6904:	9307      	str	r3, [sp, #28]
   b6906:	fb09 f306 	mul.w	r3, r9, r6
   b690a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b690c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b690e:	a907      	add	r1, sp, #28
   b6910:	a806      	add	r0, sp, #24
   b6912:	f7ff fae6 	bl	b5ee2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6916:	4682      	mov	sl, r0
   b6918:	2800      	cmp	r0, #0
   b691a:	d0f0      	beq.n	b68fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b691c:	f04f 0300 	mov.w	r3, #0
   b6920:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6924:	4601      	mov	r1, r0
   b6926:	9a07      	ldr	r2, [sp, #28]
   b6928:	f10d 0317 	add.w	r3, sp, #23
   b692c:	4628      	mov	r0, r5
   b692e:	f7ff fb67 	bl	b6000 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6932:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6936:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b6938:	2f00      	cmp	r7, #0
   b693a:	d14a      	bne.n	b69d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b693c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b6940:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b6944:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b6948:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b694c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b6950:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b6954:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6956:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b695a:	4293      	cmp	r3, r2
   b695c:	db17      	blt.n	b698e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b695e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b6962:	f1ba 0f00 	cmp.w	sl, #0
   b6966:	dd30      	ble.n	b69ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b6968:	fb09 f00a 	mul.w	r0, r9, sl
   b696c:	f7fe fd54 	bl	b5418 <malloc>
            if (!d) {
   b6970:	4683      	mov	fp, r0
   b6972:	b360      	cbz	r0, b69ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b6974:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6978:	fb09 1202 	mla	r2, r9, r2, r1
   b697c:	f7ff feea 	bl	b6754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b6980:	6828      	ldr	r0, [r5, #0]
   b6982:	f7fe fd51 	bl	b5428 <free>
        data_ = d;
   b6986:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b698a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b698e:	682b      	ldr	r3, [r5, #0]
   b6990:	9a01      	ldr	r2, [sp, #4]
   b6992:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b6996:	686a      	ldr	r2, [r5, #4]
   b6998:	4651      	mov	r1, sl
   b699a:	fb09 3202 	mla	r2, r9, r2, r3
   b699e:	f10a 0014 	add.w	r0, sl, #20
   b69a2:	f7ff fed7 	bl	b6754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b69a6:	f1ba 0f00 	cmp.w	sl, #0
   b69aa:	d003      	beq.n	b69b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b69ac:	a90f      	add	r1, sp, #60	; 0x3c
   b69ae:	4650      	mov	r0, sl
   b69b0:	f7ff fb12 	bl	b5fd8 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b69b4:	686b      	ldr	r3, [r5, #4]
   b69b6:	3301      	adds	r3, #1
   b69b8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b69ba:	a811      	add	r0, sp, #68	; 0x44
   b69bc:	f7ff fcca 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b69c0:	b13f      	cbz	r7, b69d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b69c2:	a80b      	add	r0, sp, #44	; 0x2c
   b69c4:	f7ff fcc6 	bl	b6354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b69c8:	e771      	b.n	b68ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b69ca:	46bb      	mov	fp, r7
   b69cc:	e7d8      	b.n	b6980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b69ce:	2701      	movs	r7, #1
   b69d0:	e7f3      	b.n	b69ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b69d2:	9b01      	ldr	r3, [sp, #4]
   b69d4:	682d      	ldr	r5, [r5, #0]
   b69d6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b69da:	9b06      	ldr	r3, [sp, #24]
   b69dc:	781b      	ldrb	r3, [r3, #0]
   b69de:	b92b      	cbnz	r3, b69ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b69e0:	f8d8 3000 	ldr.w	r3, [r8]
   b69e4:	9a02      	ldr	r2, [sp, #8]
   b69e6:	4413      	add	r3, r2
   b69e8:	7c1b      	ldrb	r3, [r3, #16]
   b69ea:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b69ec:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b69ee:	e78e      	b.n	b690e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69f0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b69f2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69f4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b69f6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b69f8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b69fa:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b69fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b69fe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a00:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6a02:	60a2      	str	r2, [r4, #8]
   b6a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b6a06:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a08:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6a0a:	60e2      	str	r2, [r4, #12]
   b6a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b6a0e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6a10:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6a12:	6122      	str	r2, [r4, #16]
   b6a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b6a16:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b6a18:	9b03      	ldr	r3, [sp, #12]
   b6a1a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b6a1c:	6162      	str	r2, [r4, #20]
   b6a1e:	7623      	strb	r3, [r4, #24]
   b6a20:	e7cf      	b.n	b69c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b6a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a26:	4604      	mov	r4, r0
   b6a28:	b087      	sub	sp, #28
   b6a2a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b6a2c:	4626      	mov	r6, r4
        stream_(&stream) {
   b6a2e:	4619      	mov	r1, r3
   b6a30:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b6a32:	4617      	mov	r7, r2
        stream_(&stream) {
   b6a34:	f7fe f955 	bl	b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b6a38:	4b0b      	ldr	r3, [pc, #44]	; (b6a68 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b6a3a:	f846 3b04 	str.w	r3, [r6], #4
   b6a3e:	4669      	mov	r1, sp
   b6a40:	a803      	add	r0, sp, #12
   b6a42:	f7fe f94e 	bl	b4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b6a46:	aa03      	add	r2, sp, #12
   b6a48:	4639      	mov	r1, r7
   b6a4a:	4630      	mov	r0, r6
   b6a4c:	f7ff fef0 	bl	b6830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6a50:	a803      	add	r0, sp, #12
   b6a52:	f7fe f905 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b6a56:	4668      	mov	r0, sp
   b6a58:	f7fe f902 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6a5c:	4b03      	ldr	r3, [pc, #12]	; (b6a6c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b6a5e:	6023      	str	r3, [r4, #0]
}
   b6a60:	4620      	mov	r0, r4
        stream_(&stream) {
   b6a62:	6225      	str	r5, [r4, #32]
}
   b6a64:	b007      	add	sp, #28
   b6a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6a68:	000b8dac 	.word	0x000b8dac
   b6a6c:	000b8f78 	.word	0x000b8f78

000b6a70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b6a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a72:	460f      	mov	r7, r1
   b6a74:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6a76:	491d      	ldr	r1, [pc, #116]	; (b6aec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6a7a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6a7c:	4616      	mov	r6, r2
   b6a7e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6a80:	f7fd feec 	bl	b485c <strcmp>
   b6a84:	b9c0      	cbnz	r0, b6ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6a86:	b1a4      	cbz	r4, b6ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6a88:	4629      	mov	r1, r5
   b6a8a:	a801      	add	r0, sp, #4
   b6a8c:	f7ff fcbc 	bl	b6408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6a90:	4917      	ldr	r1, [pc, #92]	; (b6af0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6a92:	2024      	movs	r0, #36	; 0x24
   b6a94:	f001 fe35 	bl	b8702 <_ZnwjRKSt9nothrow_t>
   b6a98:	4605      	mov	r5, r0
   b6a9a:	b130      	cbz	r0, b6aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6a9c:	ab01      	add	r3, sp, #4
   b6a9e:	4632      	mov	r2, r6
   b6aa0:	4621      	mov	r1, r4
   b6aa2:	f7ff ffbf 	bl	b6a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6aa6:	4b13      	ldr	r3, [pc, #76]	; (b6af4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6aa8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6aaa:	a801      	add	r0, sp, #4
   b6aac:	f7fe f8d8 	bl	b4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b6ab0:	462c      	mov	r4, r5
}
   b6ab2:	4620      	mov	r0, r4
   b6ab4:	b005      	add	sp, #20
   b6ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6ab8:	490f      	ldr	r1, [pc, #60]	; (b6af8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6aba:	4638      	mov	r0, r7
   b6abc:	f7fd fece 	bl	b485c <strcmp>
   b6ac0:	b990      	cbnz	r0, b6ae8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b6ac2:	2c00      	cmp	r4, #0
   b6ac4:	d0f5      	beq.n	b6ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6ac6:	4629      	mov	r1, r5
   b6ac8:	a801      	add	r0, sp, #4
   b6aca:	f7ff fc9d 	bl	b6408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b6ace:	4908      	ldr	r1, [pc, #32]	; (b6af0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b6ad0:	2024      	movs	r0, #36	; 0x24
   b6ad2:	f001 fe16 	bl	b8702 <_ZnwjRKSt9nothrow_t>
   b6ad6:	4605      	mov	r5, r0
   b6ad8:	2800      	cmp	r0, #0
   b6ada:	d0e6      	beq.n	b6aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6adc:	ab01      	add	r3, sp, #4
   b6ade:	4632      	mov	r2, r6
   b6ae0:	4621      	mov	r1, r4
   b6ae2:	f7ff ff9f 	bl	b6a24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6ae6:	e7e0      	b.n	b6aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6ae8:	2400      	movs	r4, #0
   b6aea:	e7e2      	b.n	b6ab2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6aec:	000b8efc 	.word	0x000b8efc
   b6af0:	000b91d8 	.word	0x000b91d8
   b6af4:	000b8f90 	.word	0x000b8f90
   b6af8:	000b8f00 	.word	0x000b8f00

000b6afc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6afc:	4b01      	ldr	r3, [pc, #4]	; (b6b04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6afe:	4a02      	ldr	r2, [pc, #8]	; (b6b08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6b00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6b02:	4770      	bx	lr
   b6b04:	2003e6c8 	.word	0x2003e6c8
   b6b08:	000b8f11 	.word	0x000b8f11

000b6b0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6b10:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b6b12:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6b16:	4604      	mov	r4, r0
   b6b18:	460e      	mov	r6, r1
   b6b1a:	4617      	mov	r7, r2
   b6b1c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b6b1e:	f7ff f86b 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b6b22:	4581      	cmp	r9, r0
   b6b24:	d04c      	beq.n	b6bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b6b26:	792b      	ldrb	r3, [r5, #4]
   b6b28:	0719      	lsls	r1, r3, #28
   b6b2a:	d504      	bpl.n	b6b36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b6b2c:	696a      	ldr	r2, [r5, #20]
   b6b2e:	4954      	ldr	r1, [pc, #336]	; (b6c80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b6b30:	4620      	mov	r0, r4
   b6b32:	f7ff faca 	bl	b60ca <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b6b36:	f1b8 0f00 	cmp.w	r8, #0
   b6b3a:	d00d      	beq.n	b6b58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b6b3c:	215b      	movs	r1, #91	; 0x5b
   b6b3e:	4620      	mov	r0, r4
   b6b40:	f7ff fa3e 	bl	b5fc0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b6b44:	4641      	mov	r1, r8
   b6b46:	4620      	mov	r0, r4
   b6b48:	f7ff fa2b 	bl	b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b6b4c:	6823      	ldr	r3, [r4, #0]
   b6b4e:	494d      	ldr	r1, [pc, #308]	; (b6c84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b6b50:	68db      	ldr	r3, [r3, #12]
   b6b52:	2202      	movs	r2, #2
   b6b54:	4620      	mov	r0, r4
   b6b56:	4798      	blx	r3
    if (attr.has_file) {
   b6b58:	792b      	ldrb	r3, [r5, #4]
   b6b5a:	07da      	lsls	r2, r3, #31
   b6b5c:	d523      	bpl.n	b6ba6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b6b5e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b6b62:	212f      	movs	r1, #47	; 0x2f
   b6b64:	4640      	mov	r0, r8
   b6b66:	f001 ffa0 	bl	b8aaa <strrchr>
    if (s1) {
   b6b6a:	b108      	cbz	r0, b6b70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6b6c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b6b70:	4641      	mov	r1, r8
   b6b72:	4620      	mov	r0, r4
   b6b74:	f7ff fa15 	bl	b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6b78:	792b      	ldrb	r3, [r5, #4]
   b6b7a:	079b      	lsls	r3, r3, #30
   b6b7c:	d508      	bpl.n	b6b90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b6b7e:	213a      	movs	r1, #58	; 0x3a
   b6b80:	4620      	mov	r0, r4
   b6b82:	f7ff fa1d 	bl	b5fc0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6b86:	68ea      	ldr	r2, [r5, #12]
   b6b88:	493f      	ldr	r1, [pc, #252]	; (b6c88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6b8a:	4620      	mov	r0, r4
   b6b8c:	f7ff fa9d 	bl	b60ca <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b6b90:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b6b92:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6b94:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6b98:	68db      	ldr	r3, [r3, #12]
   b6b9a:	bf14      	ite	ne
   b6b9c:	493b      	ldrne	r1, [pc, #236]	; (b6c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b6b9e:	493c      	ldreq	r1, [pc, #240]	; (b6c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b6ba0:	2202      	movs	r2, #2
            write(": ", 2);
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	4798      	blx	r3
    if (attr.has_function) {
   b6ba6:	792b      	ldrb	r3, [r5, #4]
   b6ba8:	0758      	lsls	r0, r3, #29
   b6baa:	d51d      	bpl.n	b6be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6bac:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6bae:	460b      	mov	r3, r1
   b6bb0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b6bb2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6bb6:	b160      	cbz	r0, b6bd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6bb8:	2820      	cmp	r0, #32
   b6bba:	d108      	bne.n	b6bce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6bbc:	4619      	mov	r1, r3
   b6bbe:	e7f7      	b.n	b6bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b6bc0:	4834      	ldr	r0, [pc, #208]	; (b6c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b6bc2:	f7fe fca0 	bl	b5506 <_ZN5spark12NetworkClass9listeningEv>
   b6bc6:	2800      	cmp	r0, #0
   b6bc8:	d0ad      	beq.n	b6b26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b6bce:	2828      	cmp	r0, #40	; 0x28
   b6bd0:	d1ee      	bne.n	b6bb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b6bd2:	6823      	ldr	r3, [r4, #0]
   b6bd4:	1a52      	subs	r2, r2, r1
   b6bd6:	68db      	ldr	r3, [r3, #12]
   b6bd8:	4620      	mov	r0, r4
   b6bda:	4798      	blx	r3
        write("(): ", 4);
   b6bdc:	6823      	ldr	r3, [r4, #0]
   b6bde:	492e      	ldr	r1, [pc, #184]	; (b6c98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b6be0:	68db      	ldr	r3, [r3, #12]
   b6be2:	2204      	movs	r2, #4
   b6be4:	4620      	mov	r0, r4
   b6be6:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6be8:	2100      	movs	r1, #0
   b6bea:	4638      	mov	r0, r7
   b6bec:	f7fe fb78 	bl	b52e0 <log_level_name>
   b6bf0:	4601      	mov	r1, r0
    write(s);
   b6bf2:	4620      	mov	r0, r4
   b6bf4:	f7ff f9d5 	bl	b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6bf8:	6823      	ldr	r3, [r4, #0]
   b6bfa:	4925      	ldr	r1, [pc, #148]	; (b6c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6bfc:	68db      	ldr	r3, [r3, #12]
   b6bfe:	2202      	movs	r2, #2
   b6c00:	4620      	mov	r0, r4
   b6c02:	4798      	blx	r3
    if (msg) {
   b6c04:	b11e      	cbz	r6, b6c0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b6c06:	4631      	mov	r1, r6
   b6c08:	4620      	mov	r0, r4
   b6c0a:	f7ff f9ca 	bl	b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b6c0e:	792b      	ldrb	r3, [r5, #4]
   b6c10:	f013 0f30 	tst.w	r3, #48	; 0x30
   b6c14:	d02c      	beq.n	b6c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b6c16:	6823      	ldr	r3, [r4, #0]
   b6c18:	4920      	ldr	r1, [pc, #128]	; (b6c9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b6c1a:	68db      	ldr	r3, [r3, #12]
   b6c1c:	2202      	movs	r2, #2
   b6c1e:	4620      	mov	r0, r4
   b6c20:	4798      	blx	r3
        if (attr.has_code) {
   b6c22:	792b      	ldrb	r3, [r5, #4]
   b6c24:	06d9      	lsls	r1, r3, #27
   b6c26:	d50a      	bpl.n	b6c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b6c28:	6823      	ldr	r3, [r4, #0]
   b6c2a:	491d      	ldr	r1, [pc, #116]	; (b6ca0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b6c2c:	68db      	ldr	r3, [r3, #12]
   b6c2e:	2207      	movs	r2, #7
   b6c30:	4620      	mov	r0, r4
   b6c32:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b6c34:	69aa      	ldr	r2, [r5, #24]
   b6c36:	491b      	ldr	r1, [pc, #108]	; (b6ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b6c38:	4620      	mov	r0, r4
   b6c3a:	f7ff fa46 	bl	b60ca <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b6c3e:	792b      	ldrb	r3, [r5, #4]
   b6c40:	069a      	lsls	r2, r3, #26
   b6c42:	d511      	bpl.n	b6c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b6c44:	06db      	lsls	r3, r3, #27
   b6c46:	d505      	bpl.n	b6c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b6c48:	6823      	ldr	r3, [r4, #0]
   b6c4a:	4910      	ldr	r1, [pc, #64]	; (b6c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b6c4c:	68db      	ldr	r3, [r3, #12]
   b6c4e:	2202      	movs	r2, #2
   b6c50:	4620      	mov	r0, r4
   b6c52:	4798      	blx	r3
            write("details = ", 10);
   b6c54:	6823      	ldr	r3, [r4, #0]
   b6c56:	4914      	ldr	r1, [pc, #80]	; (b6ca8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b6c58:	68db      	ldr	r3, [r3, #12]
   b6c5a:	4620      	mov	r0, r4
   b6c5c:	220a      	movs	r2, #10
   b6c5e:	4798      	blx	r3
            write(attr.details);
   b6c60:	69e9      	ldr	r1, [r5, #28]
   b6c62:	4620      	mov	r0, r4
   b6c64:	f7ff f99d 	bl	b5fa2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6c68:	215d      	movs	r1, #93	; 0x5d
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	f7ff f9a8 	bl	b5fc0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b6c70:	6823      	ldr	r3, [r4, #0]
   b6c72:	490e      	ldr	r1, [pc, #56]	; (b6cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6c74:	68db      	ldr	r3, [r3, #12]
   b6c76:	4620      	mov	r0, r4
   b6c78:	2202      	movs	r2, #2
}
   b6c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b6c7e:	4718      	bx	r3
   b6c80:	000b8f15 	.word	0x000b8f15
   b6c84:	000b8f1c 	.word	0x000b8f1c
   b6c88:	000b8d01 	.word	0x000b8d01
   b6c8c:	000b8f1f 	.word	0x000b8f1f
   b6c90:	000b8f24 	.word	0x000b8f24
   b6c94:	2003e678 	.word	0x2003e678
   b6c98:	000b8f22 	.word	0x000b8f22
   b6c9c:	000b8f27 	.word	0x000b8f27
   b6ca0:	000b8f2a 	.word	0x000b8f2a
   b6ca4:	000b8f32 	.word	0x000b8f32
   b6ca8:	000b8f35 	.word	0x000b8f35
   b6cac:	000b8f40 	.word	0x000b8f40

000b6cb0 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cb4:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6cb6:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6cb8:	460d      	mov	r5, r1
   b6cba:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6cbc:	f7fe ff9c 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b6cc0:	4287      	cmp	r7, r0
   b6cc2:	d007      	beq.n	b6cd4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6cc4:	6a20      	ldr	r0, [r4, #32]
   b6cc6:	6803      	ldr	r3, [r0, #0]
   b6cc8:	4632      	mov	r2, r6
   b6cca:	4629      	mov	r1, r5
   b6ccc:	68db      	ldr	r3, [r3, #12]
}
   b6cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6cd2:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6cd4:	4803      	ldr	r0, [pc, #12]	; (b6ce4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6cd6:	f7fe fc16 	bl	b5506 <_ZN5spark12NetworkClass9listeningEv>
   b6cda:	2800      	cmp	r0, #0
   b6cdc:	d0f2      	beq.n	b6cc4 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b6cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6ce2:	bf00      	nop
   b6ce4:	2003e678 	.word	0x2003e678

000b6ce8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cec:	b085      	sub	sp, #20
    return stream_;
   b6cee:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6cf2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6cf4:	4605      	mov	r5, r0
   b6cf6:	460f      	mov	r7, r1
   b6cf8:	4690      	mov	r8, r2
   b6cfa:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6cfc:	f7fe ff7c 	bl	b5bf8 <_Z16_fetch_usbserialv>
   b6d00:	4581      	cmp	r9, r0
   b6d02:	d105      	bne.n	b6d10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6d04:	4849      	ldr	r0, [pc, #292]	; (b6e2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6d06:	f7fe fbfe 	bl	b5506 <_ZN5spark12NetworkClass9listeningEv>
   b6d0a:	2800      	cmp	r0, #0
   b6d0c:	f040 808a 	bne.w	b6e24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6d10:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6d12:	4a47      	ldr	r2, [pc, #284]	; (b6e30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6d14:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6d16:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6d1a:	a801      	add	r0, sp, #4
        strm_(stream) {
   b6d1c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b6d1e:	f88d 9008 	strb.w	r9, [sp, #8]
   b6d22:	f7fe fe56 	bl	b59d2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6d26:	4649      	mov	r1, r9
   b6d28:	4640      	mov	r0, r8
   b6d2a:	f7fe fad9 	bl	b52e0 <log_level_name>
    json.name("l", 1).value(s);
   b6d2e:	4941      	ldr	r1, [pc, #260]	; (b6e34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b6d30:	4680      	mov	r8, r0
   b6d32:	2201      	movs	r2, #1
   b6d34:	a801      	add	r0, sp, #4
   b6d36:	f7fe fedb 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d3a:	4641      	mov	r1, r8
   b6d3c:	f7ff f923 	bl	b5f86 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b6d40:	b13f      	cbz	r7, b6d52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b6d42:	493d      	ldr	r1, [pc, #244]	; (b6e38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6d44:	2201      	movs	r2, #1
   b6d46:	a801      	add	r0, sp, #4
   b6d48:	f7fe fed2 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d4c:	4639      	mov	r1, r7
   b6d4e:	f7ff f91a 	bl	b5f86 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6d52:	b13e      	cbz	r6, b6d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b6d54:	4939      	ldr	r1, [pc, #228]	; (b6e3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6d56:	2201      	movs	r2, #1
   b6d58:	a801      	add	r0, sp, #4
   b6d5a:	f7fe fec9 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d5e:	4631      	mov	r1, r6
   b6d60:	f7ff f911 	bl	b5f86 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6d64:	7923      	ldrb	r3, [r4, #4]
   b6d66:	07df      	lsls	r7, r3, #31
   b6d68:	d50e      	bpl.n	b6d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6d6a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6d6c:	212f      	movs	r1, #47	; 0x2f
   b6d6e:	4630      	mov	r0, r6
   b6d70:	f001 fe9b 	bl	b8aaa <strrchr>
    if (s1) {
   b6d74:	b100      	cbz	r0, b6d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6d76:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6d78:	4931      	ldr	r1, [pc, #196]	; (b6e40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6d7a:	2201      	movs	r2, #1
   b6d7c:	a801      	add	r0, sp, #4
   b6d7e:	f7fe feb7 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d82:	4631      	mov	r1, r6
   b6d84:	f7ff f8ff 	bl	b5f86 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6d88:	7923      	ldrb	r3, [r4, #4]
   b6d8a:	079e      	lsls	r6, r3, #30
   b6d8c:	d507      	bpl.n	b6d9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b6d8e:	492d      	ldr	r1, [pc, #180]	; (b6e44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6d90:	2202      	movs	r2, #2
   b6d92:	a801      	add	r0, sp, #4
   b6d94:	f7fe feac 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6d98:	68e1      	ldr	r1, [r4, #12]
   b6d9a:	f7fe fe27 	bl	b59ec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b6d9e:	7923      	ldrb	r3, [r4, #4]
   b6da0:	0758      	lsls	r0, r3, #29
   b6da2:	d514      	bpl.n	b6dce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6da4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6da6:	4633      	mov	r3, r6
   b6da8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6daa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6dae:	b12a      	cbz	r2, b6dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6db0:	2a20      	cmp	r2, #32
   b6db2:	d101      	bne.n	b6db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6db4:	461e      	mov	r6, r3
   b6db6:	e7f7      	b.n	b6da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6db8:	2a28      	cmp	r2, #40	; 0x28
   b6dba:	d1f5      	bne.n	b6da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6dbc:	4922      	ldr	r1, [pc, #136]	; (b6e48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b6dbe:	2202      	movs	r2, #2
   b6dc0:	a801      	add	r0, sp, #4
   b6dc2:	f7fe fe95 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6dc6:	1bba      	subs	r2, r7, r6
   b6dc8:	4631      	mov	r1, r6
   b6dca:	f7fe fea1 	bl	b5b10 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b6dce:	7923      	ldrb	r3, [r4, #4]
   b6dd0:	0719      	lsls	r1, r3, #28
   b6dd2:	d507      	bpl.n	b6de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6dd4:	491d      	ldr	r1, [pc, #116]	; (b6e4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6dd6:	2201      	movs	r2, #1
   b6dd8:	a801      	add	r0, sp, #4
   b6dda:	f7fe fe89 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6dde:	6961      	ldr	r1, [r4, #20]
   b6de0:	f7fe fe16 	bl	b5a10 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6de4:	7923      	ldrb	r3, [r4, #4]
   b6de6:	06da      	lsls	r2, r3, #27
   b6de8:	d508      	bpl.n	b6dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6dea:	2204      	movs	r2, #4
   b6dec:	4918      	ldr	r1, [pc, #96]	; (b6e50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b6dee:	eb0d 0002 	add.w	r0, sp, r2
   b6df2:	f7fe fe7d 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6df6:	69a1      	ldr	r1, [r4, #24]
   b6df8:	f7fe fdf8 	bl	b59ec <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6dfc:	7923      	ldrb	r3, [r4, #4]
   b6dfe:	069b      	lsls	r3, r3, #26
   b6e00:	d507      	bpl.n	b6e12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6e02:	4914      	ldr	r1, [pc, #80]	; (b6e54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6e04:	2206      	movs	r2, #6
   b6e06:	a801      	add	r0, sp, #4
   b6e08:	f7fe fe72 	bl	b5af0 <_ZN5spark10JSONWriter4nameEPKcj>
   b6e0c:	69e1      	ldr	r1, [r4, #28]
   b6e0e:	f7ff f8ba 	bl	b5f86 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6e12:	a801      	add	r0, sp, #4
   b6e14:	f7fe fdc7 	bl	b59a6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6e18:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6e1a:	490f      	ldr	r1, [pc, #60]	; (b6e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6e1c:	6803      	ldr	r3, [r0, #0]
   b6e1e:	2202      	movs	r2, #2
   b6e20:	68db      	ldr	r3, [r3, #12]
   b6e22:	4798      	blx	r3
}
   b6e24:	b005      	add	sp, #20
   b6e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6e2a:	bf00      	nop
   b6e2c:	2003e678 	.word	0x2003e678
   b6e30:	000b8f60 	.word	0x000b8f60
   b6e34:	000b8ef2 	.word	0x000b8ef2
   b6e38:	000b8f43 	.word	0x000b8f43
   b6e3c:	000b935f 	.word	0x000b935f
   b6e40:	000b8d90 	.word	0x000b8d90
   b6e44:	000b8f45 	.word	0x000b8f45
   b6e48:	000b8f48 	.word	0x000b8f48
   b6e4c:	000b8d21 	.word	0x000b8d21
   b6e50:	000b8f4b 	.word	0x000b8f4b
   b6e54:	000b8f50 	.word	0x000b8f50
   b6e58:	000b8f40 	.word	0x000b8f40

000b6e5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e5e:	4606      	mov	r6, r0
   b6e60:	460d      	mov	r5, r1
  size_t n = 0;
   b6e62:	188f      	adds	r7, r1, r2
   b6e64:	2400      	movs	r4, #0
  while (size--) {
   b6e66:	42bd      	cmp	r5, r7
   b6e68:	d00c      	beq.n	b6e84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6e6a:	6833      	ldr	r3, [r6, #0]
   b6e6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6e70:	689b      	ldr	r3, [r3, #8]
   b6e72:	4630      	mov	r0, r6
   b6e74:	4798      	blx	r3
     if (chunk>=0)
   b6e76:	1e03      	subs	r3, r0, #0
   b6e78:	db01      	blt.n	b6e7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6e7a:	441c      	add	r4, r3
  while (size--) {
   b6e7c:	e7f3      	b.n	b6e66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6e7e:	2c00      	cmp	r4, #0
   b6e80:	bf08      	it	eq
   b6e82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6e84:	4620      	mov	r0, r4
   b6e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e88 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6e88:	b513      	push	{r0, r1, r4, lr}
   b6e8a:	4604      	mov	r4, r0
    }
   b6e8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6e8e:	b159      	cbz	r1, b6ea8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6e90:	9101      	str	r1, [sp, #4]
   b6e92:	f7fd fced 	bl	b4870 <strlen>
   b6e96:	6823      	ldr	r3, [r4, #0]
   b6e98:	9901      	ldr	r1, [sp, #4]
   b6e9a:	68db      	ldr	r3, [r3, #12]
   b6e9c:	4602      	mov	r2, r0
   b6e9e:	4620      	mov	r0, r4
    }
   b6ea0:	b002      	add	sp, #8
   b6ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6ea6:	4718      	bx	r3
    }
   b6ea8:	b002      	add	sp, #8
   b6eaa:	bd10      	pop	{r4, pc}

000b6eac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6eac:	6803      	ldr	r3, [r0, #0]
   b6eae:	689b      	ldr	r3, [r3, #8]
   b6eb0:	4718      	bx	r3

000b6eb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6eb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6eb4:	210d      	movs	r1, #13
{
   b6eb6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6eb8:	f7ff fff8 	bl	b6eac <_ZN5Print5printEc>
  n += print('\n');
   b6ebc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6ebe:	4604      	mov	r4, r0
  n += print('\n');
   b6ec0:	4628      	mov	r0, r5
   b6ec2:	f7ff fff3 	bl	b6eac <_ZN5Print5printEc>
  return n;
}
   b6ec6:	4420      	add	r0, r4
   b6ec8:	bd38      	pop	{r3, r4, r5, pc}

000b6eca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6eca:	b538      	push	{r3, r4, r5, lr}
   b6ecc:	4605      	mov	r5, r0
  return write(str);
   b6ece:	f7ff ffdb 	bl	b6e88 <_ZN5Print5writeEPKc>
   b6ed2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6ed4:	4628      	mov	r0, r5
   b6ed6:	f7ff ffec 	bl	b6eb2 <_ZN5Print7printlnEv>
  return n;
}
   b6eda:	4420      	add	r0, r4
   b6edc:	bd38      	pop	{r3, r4, r5, pc}

000b6ede <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6ede:	b530      	push	{r4, r5, lr}
   b6ee0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6ee2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6ee4:	2a01      	cmp	r2, #1
  *str = '\0';
   b6ee6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6eea:	bf98      	it	ls
   b6eec:	220a      	movls	r2, #10
   b6eee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6ef0:	460d      	mov	r5, r1
   b6ef2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6ef6:	fb01 5312 	mls	r3, r1, r2, r5
   b6efa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6efe:	2b09      	cmp	r3, #9
   b6f00:	bf94      	ite	ls
   b6f02:	3330      	addls	r3, #48	; 0x30
   b6f04:	3337      	addhi	r3, #55	; 0x37
   b6f06:	b2db      	uxtb	r3, r3
  } while(n);
   b6f08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6f0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6f0e:	d9ef      	bls.n	b6ef0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6f10:	4621      	mov	r1, r4
   b6f12:	f7ff ffb9 	bl	b6e88 <_ZN5Print5writeEPKc>
}
   b6f16:	b00b      	add	sp, #44	; 0x2c
   b6f18:	bd30      	pop	{r4, r5, pc}

000b6f1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f1a:	4770      	bx	lr

000b6f1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b6f1c:	4770      	bx	lr

000b6f1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b6f1e:	4770      	bx	lr

000b6f20 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f20:	4770      	bx	lr
	...

000b6f24 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f24:	4b06      	ldr	r3, [pc, #24]	; (b6f40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f26:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f28:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6f2a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f2e:	d005      	beq.n	b6f3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f30:	4608      	mov	r0, r1
   b6f32:	f001 fbed 	bl	b8710 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f36:	2800      	cmp	r0, #0
   b6f38:	bf08      	it	eq
   b6f3a:	2400      	moveq	r4, #0
      }
   b6f3c:	4620      	mov	r0, r4
   b6f3e:	bd10      	pop	{r4, pc}
   b6f40:	000b8e4c 	.word	0x000b8e4c

000b6f44 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f44:	4b06      	ldr	r3, [pc, #24]	; (b6f60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f46:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f48:	b510      	push	{r4, lr}
   b6f4a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f4e:	d005      	beq.n	b6f5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f50:	4608      	mov	r0, r1
   b6f52:	f001 fbdd 	bl	b8710 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f56:	2800      	cmp	r0, #0
   b6f58:	bf08      	it	eq
   b6f5a:	2400      	moveq	r4, #0
      }
   b6f5c:	4620      	mov	r0, r4
   b6f5e:	bd10      	pop	{r4, pc}
   b6f60:	000b8e4c 	.word	0x000b8e4c

000b6f64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f64:	4b06      	ldr	r3, [pc, #24]	; (b6f80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f66:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f68:	b510      	push	{r4, lr}
   b6f6a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f6e:	d005      	beq.n	b6f7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f70:	4608      	mov	r0, r1
   b6f72:	f001 fbcd 	bl	b8710 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f76:	2800      	cmp	r0, #0
   b6f78:	bf08      	it	eq
   b6f7a:	2400      	moveq	r4, #0
      }
   b6f7c:	4620      	mov	r0, r4
   b6f7e:	bd10      	pop	{r4, pc}
   b6f80:	000b8e4c 	.word	0x000b8e4c

000b6f84 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f84:	b510      	push	{r4, lr}
   b6f86:	2168      	movs	r1, #104	; 0x68
   b6f88:	4604      	mov	r4, r0
   b6f8a:	f7fd fcb8 	bl	b48fe <_ZdlPvj>
   b6f8e:	4620      	mov	r0, r4
   b6f90:	bd10      	pop	{r4, pc}

000b6f92 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6f92:	b510      	push	{r4, lr}
   b6f94:	2128      	movs	r1, #40	; 0x28
   b6f96:	4604      	mov	r4, r0
   b6f98:	f7fd fcb1 	bl	b48fe <_ZdlPvj>
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	bd10      	pop	{r4, pc}

000b6fa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6fa0:	b510      	push	{r4, lr}
   b6fa2:	2130      	movs	r1, #48	; 0x30
   b6fa4:	4604      	mov	r4, r0
   b6fa6:	f7fd fcaa 	bl	b48fe <_ZdlPvj>
   b6faa:	4620      	mov	r0, r4
   b6fac:	bd10      	pop	{r4, pc}

000b6fae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6fae:	2168      	movs	r1, #104	; 0x68
   b6fb0:	f7fd bca5 	b.w	b48fe <_ZdlPvj>

000b6fb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6fb4:	2128      	movs	r1, #40	; 0x28
   b6fb6:	f7fd bca2 	b.w	b48fe <_ZdlPvj>

000b6fba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6fba:	2130      	movs	r1, #48	; 0x30
   b6fbc:	f7fd bc9f 	b.w	b48fe <_ZdlPvj>

000b6fc0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6fc2:	2500      	movs	r5, #0
   b6fc4:	1cec      	adds	r4, r5, #3
   b6fc6:	428c      	cmp	r4, r1
   b6fc8:	d80d      	bhi.n	b6fe6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b6fca:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b6fcc:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b6fce:	5d87      	ldrb	r7, [r0, r6]
   b6fd0:	4297      	cmp	r7, r2
   b6fd2:	d105      	bne.n	b6fe0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6fd4:	4426      	add	r6, r4
   b6fd6:	42b1      	cmp	r1, r6
   b6fd8:	d305      	bcc.n	b6fe6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b6fda:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b6fdc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b6fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6fe0:	3401      	adds	r4, #1
   b6fe2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6fe4:	e7ee      	b.n	b6fc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6fe6:	2000      	movs	r0, #0
   b6fe8:	e7f9      	b.n	b6fde <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6fec:	4a02      	ldr	r2, [pc, #8]	; (b6ff8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6fee:	4903      	ldr	r1, [pc, #12]	; (b6ffc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6ff0:	200a      	movs	r0, #10
   b6ff2:	f7fe b95d 	b.w	b52b0 <panic_>
   b6ff6:	bf00      	nop
   b6ff8:	000b5211 	.word	0x000b5211
   b6ffc:	000b8fd0 	.word	0x000b8fd0

000b7000 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7000:	b430      	push	{r4, r5}
   b7002:	460d      	mov	r5, r1
   b7004:	4611      	mov	r1, r2
   b7006:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7008:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b700a:	6809      	ldr	r1, [r1, #0]
   b700c:	6828      	ldr	r0, [r5, #0]
   b700e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b7012:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b7014:	bc30      	pop	{r4, r5}
   b7016:	4760      	bx	ip

000b7018 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7018:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b701a:	b538      	push	{r3, r4, r5, lr}
   b701c:	4604      	mov	r4, r0
	switch (__op)
   b701e:	d102      	bne.n	b7026 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7020:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b7022:	6023      	str	r3, [r4, #0]
	}
   b7024:	e003      	b.n	b702e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b7026:	2a02      	cmp	r2, #2
   b7028:	d003      	beq.n	b7032 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b702a:	2a03      	cmp	r2, #3
   b702c:	d00d      	beq.n	b704a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b702e:	2000      	movs	r0, #0
   b7030:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b7032:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b7034:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b7036:	f7fd fc5e 	bl	b48f6 <_Znwj>
   b703a:	4603      	mov	r3, r0
   b703c:	2800      	cmp	r0, #0
   b703e:	d0f0      	beq.n	b7022 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7040:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7044:	e883 0003 	stmia.w	r3, {r0, r1}
   b7048:	e7eb      	b.n	b7022 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b704a:	6800      	ldr	r0, [r0, #0]
   b704c:	2800      	cmp	r0, #0
   b704e:	d0ee      	beq.n	b702e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7050:	2108      	movs	r1, #8
   b7052:	f7fd fc54 	bl	b48fe <_ZdlPvj>
   b7056:	e7ea      	b.n	b702e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7058 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b7058:	b510      	push	{r4, lr}
   b705a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b705c:	3058      	adds	r0, #88	; 0x58
   b705e:	f7fe fe69 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b7062:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b706a:	f001 b99f 	b.w	b83ac <_ZN6StringD1Ev>

000b706e <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b706e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7072:	b2da      	uxtb	r2, r3
   b7074:	2a09      	cmp	r2, #9
   b7076:	d801      	bhi.n	b707c <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7078:	4618      	mov	r0, r3
   b707a:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b707c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b7080:	2b05      	cmp	r3, #5
   b7082:	d801      	bhi.n	b7088 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7084:	3857      	subs	r0, #87	; 0x57
   b7086:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7088:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b708c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b708e:	bf94      	ite	ls
   b7090:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7092:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7096:	4770      	bx	lr

000b7098 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7098:	b510      	push	{r4, lr}
            locked_(false) {
   b709a:	2300      	movs	r3, #0
   b709c:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b709e:	4b04      	ldr	r3, [pc, #16]	; (b70b0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b70a0:	4604      	mov	r4, r0
   b70a2:	6818      	ldr	r0, [r3, #0]
   b70a4:	f7fe f822 	bl	b50ec <os_mutex_recursive_lock>
        locked_ = true;
   b70a8:	2301      	movs	r3, #1
   b70aa:	7023      	strb	r3, [r4, #0]
    }
   b70ac:	4620      	mov	r0, r4
   b70ae:	bd10      	pop	{r4, pc}
   b70b0:	2003e6fc 	.word	0x2003e6fc

000b70b4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b70b4:	b510      	push	{r4, lr}
        if (locked_) {
   b70b6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b70b8:	4604      	mov	r4, r0
        if (locked_) {
   b70ba:	b11b      	cbz	r3, b70c4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b70bc:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b70be:	6818      	ldr	r0, [r3, #0]
   b70c0:	f7fe f81c 	bl	b50fc <os_mutex_recursive_unlock>
    }
   b70c4:	4620      	mov	r0, r4
   b70c6:	bd10      	pop	{r4, pc}
   b70c8:	2003e6fc 	.word	0x2003e6fc

000b70cc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b70cc:	b082      	sub	sp, #8
   b70ce:	4603      	mov	r3, r0
    address_ = addr;
   b70d0:	6808      	ldr	r0, [r1, #0]
   b70d2:	6849      	ldr	r1, [r1, #4]
   b70d4:	466a      	mov	r2, sp
   b70d6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b70d8:	466a      	mov	r2, sp
   b70da:	ca03      	ldmia	r2!, {r0, r1}
   b70dc:	6018      	str	r0, [r3, #0]
}
   b70de:	4618      	mov	r0, r3
    address_ = addr.address_;
   b70e0:	6059      	str	r1, [r3, #4]
}
   b70e2:	b002      	add	sp, #8
   b70e4:	4770      	bx	lr

000b70e6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b70e6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b70e8:	7982      	ldrb	r2, [r0, #6]
   b70ea:	798b      	ldrb	r3, [r1, #6]
   b70ec:	429a      	cmp	r2, r3
   b70ee:	d106      	bne.n	b70fe <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b70f0:	2206      	movs	r2, #6
   b70f2:	f001 fc2d 	bl	b8950 <memcmp>
   b70f6:	fab0 f080 	clz	r0, r0
   b70fa:	0940      	lsrs	r0, r0, #5
}
   b70fc:	bd08      	pop	{r3, pc}
    return false;
   b70fe:	2000      	movs	r0, #0
   b7100:	e7fc      	b.n	b70fc <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7102 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7106:	6003      	str	r3, [r0, #0]
   b7108:	8083      	strh	r3, [r0, #4]
}
   b710a:	2000      	movs	r0, #0
   b710c:	4770      	bx	lr

000b710e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b710e:	b508      	push	{r3, lr}
   b7110:	4602      	mov	r2, r0
        : address_{} {
   b7112:	2100      	movs	r1, #0
   b7114:	6001      	str	r1, [r0, #0]
   b7116:	6041      	str	r1, [r0, #4]
    clear();
   b7118:	f7ff fff3 	bl	b7102 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b711c:	7191      	strb	r1, [r2, #6]
}
   b711e:	4610      	mov	r0, r2
   b7120:	bd08      	pop	{r3, pc}
	...

000b7124 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b7124:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b7126:	2301      	movs	r3, #1
   b7128:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b712a:	4b05      	ldr	r3, [pc, #20]	; (b7140 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b712c:	4602      	mov	r2, r0
   b712e:	f103 0110 	add.w	r1, r3, #16
   b7132:	f853 4b04 	ldr.w	r4, [r3], #4
   b7136:	f842 4b04 	str.w	r4, [r2], #4
   b713a:	428b      	cmp	r3, r1
   b713c:	d1f9      	bne.n	b7132 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b713e:	bd10      	pop	{r4, pc}
   b7140:	000b8cbe 	.word	0x000b8cbe

000b7144 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7144:	b510      	push	{r4, lr}
    if (uuid128) {
   b7146:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7148:	4604      	mov	r4, r0
    if (uuid128) {
   b714a:	b1b1      	cbz	r1, b717a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b714c:	2a01      	cmp	r2, #1
   b714e:	f101 0210 	add.w	r2, r1, #16
   b7152:	d10a      	bne.n	b716a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7154:	4601      	mov	r1, r0
   b7156:	f853 0b04 	ldr.w	r0, [r3], #4
   b715a:	f841 0b04 	str.w	r0, [r1], #4
   b715e:	4293      	cmp	r3, r2
   b7160:	d1f9      	bne.n	b7156 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7162:	2301      	movs	r3, #1
   b7164:	6123      	str	r3, [r4, #16]
}
   b7166:	4620      	mov	r0, r4
   b7168:	bd10      	pop	{r4, pc}
   b716a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b716c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7170:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7174:	429a      	cmp	r2, r3
   b7176:	d1f9      	bne.n	b716c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7178:	e7f3      	b.n	b7162 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b717a:	2210      	movs	r2, #16
   b717c:	f001 fc20 	bl	b89c0 <memset>
   b7180:	e7f1      	b.n	b7166 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7182 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b7182:	b538      	push	{r3, r4, r5, lr}
   b7184:	4604      	mov	r4, r0
   b7186:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b7188:	461a      	mov	r2, r3
   b718a:	f7ff ffdb 	bl	b7144 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b718e:	81a5      	strh	r5, [r4, #12]
}
   b7190:	4620      	mov	r0, r4
   b7192:	bd38      	pop	{r3, r4, r5, pc}

000b7194 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b7194:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b7196:	6902      	ldr	r2, [r0, #16]
   b7198:	b922      	cbnz	r2, b71a4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b719a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b719c:	3800      	subs	r0, #0
   b719e:	bf18      	it	ne
   b71a0:	2001      	movne	r0, #1
}
   b71a2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b71a4:	4902      	ldr	r1, [pc, #8]	; (b71b0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b71a6:	2210      	movs	r2, #16
   b71a8:	f001 fbd2 	bl	b8950 <memcmp>
   b71ac:	e7f6      	b.n	b719c <_ZNK8particle7BleUuid7isValidEv+0x8>
   b71ae:	bf00      	nop
   b71b0:	000b915c 	.word	0x000b915c

000b71b4 <_ZNK8particle7BleUuid4typeEv>:
}
   b71b4:	6900      	ldr	r0, [r0, #16]
   b71b6:	4770      	bx	lr

000b71b8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b71b8:	b538      	push	{r3, r4, r5, lr}
   b71ba:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b71bc:	2214      	movs	r2, #20
   b71be:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b71c0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b71c2:	f001 fbfd 	bl	b89c0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b71c6:	6923      	ldr	r3, [r4, #16]
   b71c8:	b91b      	cbnz	r3, b71d2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b71ca:	89a3      	ldrh	r3, [r4, #12]
   b71cc:	802b      	strh	r3, [r5, #0]
}
   b71ce:	4628      	mov	r0, r5
   b71d0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b71d2:	2301      	movs	r3, #1
   b71d4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b71d6:	4621      	mov	r1, r4
   b71d8:	462b      	mov	r3, r5
   b71da:	f104 0210 	add.w	r2, r4, #16
   b71de:	f851 0b04 	ldr.w	r0, [r1], #4
   b71e2:	f843 0b04 	str.w	r0, [r3], #4
   b71e6:	4291      	cmp	r1, r2
   b71e8:	d1f9      	bne.n	b71de <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b71ea:	e7f0      	b.n	b71ce <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b71ec <_ZNK8particle7BleUuid7shortedEv>:
}
   b71ec:	8980      	ldrh	r0, [r0, #12]
   b71ee:	4770      	bx	lr

000b71f0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b71f0:	4770      	bx	lr

000b71f2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b71f2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b71f4:	6902      	ldr	r2, [r0, #16]
   b71f6:	690b      	ldr	r3, [r1, #16]
   b71f8:	429a      	cmp	r2, r3
   b71fa:	d106      	bne.n	b720a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b71fc:	2210      	movs	r2, #16
   b71fe:	f001 fba7 	bl	b8950 <memcmp>
   b7202:	fab0 f080 	clz	r0, r0
   b7206:	0940      	lsrs	r0, r0, #5
}
   b7208:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b720a:	2000      	movs	r0, #0
   b720c:	e7fc      	b.n	b7208 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b7210 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b7210:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b7212:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b7216:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b7218:	4b34      	ldr	r3, [pc, #208]	; (b72ec <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b721a:	460c      	mov	r4, r1
   b721c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b721e:	4602      	mov	r2, r0
   b7220:	f103 0110 	add.w	r1, r3, #16
   b7224:	f853 0b04 	ldr.w	r0, [r3], #4
   b7228:	f842 0b04 	str.w	r0, [r2], #4
   b722c:	428b      	cmp	r3, r1
   b722e:	d1f9      	bne.n	b7224 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7230:	b344      	cbz	r4, b7284 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7232:	2124      	movs	r1, #36	; 0x24
   b7234:	4620      	mov	r0, r4
   b7236:	f001 fc2c 	bl	b8a92 <strnlen>
   b723a:	2804      	cmp	r0, #4
   b723c:	f04f 0500 	mov.w	r5, #0
   b7240:	d123      	bne.n	b728a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7242:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7246:	af01      	add	r7, sp, #4
   b7248:	1ca5      	adds	r5, r4, #2
   b724a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b724c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7250:	f7ff ff0d 	bl	b706e <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7254:	f1b0 0800 	subs.w	r8, r0, #0
   b7258:	db12      	blt.n	b7280 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b725a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b725e:	f7ff ff06 	bl	b706e <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7262:	2800      	cmp	r0, #0
   b7264:	db0c      	blt.n	b7280 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7266:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7268:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b726c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b726e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7272:	d1eb      	bne.n	b724c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7274:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7278:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b727a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b727e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7280:	2300      	movs	r3, #0
   b7282:	6133      	str	r3, [r6, #16]
}
   b7284:	b002      	add	sp, #8
   b7286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b728a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b728e:	2124      	movs	r1, #36	; 0x24
   b7290:	4620      	mov	r0, r4
   b7292:	f001 fbfe 	bl	b8a92 <strnlen>
   b7296:	42a8      	cmp	r0, r5
   b7298:	d807      	bhi.n	b72aa <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b729a:	4642      	mov	r2, r8
   b729c:	2100      	movs	r1, #0
   b729e:	4630      	mov	r0, r6
}
   b72a0:	b002      	add	sp, #8
   b72a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b72a6:	f001 bb8b 	b.w	b89c0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b72aa:	f1b8 0f00 	cmp.w	r8, #0
   b72ae:	d0e9      	beq.n	b7284 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b72b0:	5d60      	ldrb	r0, [r4, r5]
   b72b2:	f7ff fedc 	bl	b706e <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b72b6:	0603      	lsls	r3, r0, #24
   b72b8:	d415      	bmi.n	b72e6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b72ba:	0100      	lsls	r0, r0, #4
   b72bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b72c0:	b2c7      	uxtb	r7, r0
   b72c2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b72c6:	2124      	movs	r1, #36	; 0x24
   b72c8:	4620      	mov	r0, r4
   b72ca:	f001 fbe2 	bl	b8a92 <strnlen>
   b72ce:	3501      	adds	r5, #1
   b72d0:	42a8      	cmp	r0, r5
   b72d2:	d908      	bls.n	b72e6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b72d4:	5d60      	ldrb	r0, [r4, r5]
   b72d6:	f7ff feca 	bl	b706e <_ZN8particle11hexToNibbleEc>
   b72da:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b72dc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b72de:	bfa4      	itt	ge
   b72e0:	4338      	orrge	r0, r7
   b72e2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b72e6:	3501      	adds	r5, #1
   b72e8:	e7d1      	b.n	b728e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b72ea:	bf00      	nop
   b72ec:	000b8cbe 	.word	0x000b8cbe

000b72f0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b72f0:	b513      	push	{r0, r1, r4, lr}
   b72f2:	4604      	mov	r4, r0
   b72f4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b72f6:	f7ff ff15 	bl	b7124 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b72fa:	4620      	mov	r0, r4
   b72fc:	9901      	ldr	r1, [sp, #4]
   b72fe:	f7ff ff87 	bl	b7210 <_ZN8particle7BleUuid9constructEPKc>
}
   b7302:	4620      	mov	r0, r4
   b7304:	b002      	add	sp, #8
   b7306:	bd10      	pop	{r4, pc}

000b7308 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7308:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b730a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b730e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7310:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7312:	8043      	strh	r3, [r0, #2]
   b7314:	220e      	movs	r2, #14
   b7316:	4629      	mov	r1, r5
   b7318:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b731a:	7105      	strb	r5, [r0, #4]
   b731c:	3006      	adds	r0, #6
   b731e:	f001 fb4f 	bl	b89c0 <memset>
   b7322:	f104 0014 	add.w	r0, r4, #20
   b7326:	f7ff fefd 	bl	b7124 <_ZN8particle7BleUuidC1Ev>
   b732a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b732e:	f7ff fef9 	bl	b7124 <_ZN8particle7BleUuidC1Ev>
   b7332:	4904      	ldr	r1, [pc, #16]	; (b7344 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7334:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7338:	f001 f883 	bl	b8442 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b733c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b733e:	4620      	mov	r0, r4
   b7340:	bd38      	pop	{r3, r4, r5, pc}
   b7342:	bf00      	nop
   b7344:	000b8f42 	.word	0x000b8f42

000b7348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7348:	b510      	push	{r4, lr}
    return data_ + size_;
   b734a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b734e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7352:	4293      	cmp	r3, r2
   b7354:	4618      	mov	r0, r3
   b7356:	d006      	beq.n	b7366 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7358:	6804      	ldr	r4, [r0, #0]
   b735a:	8824      	ldrh	r4, [r4, #0]
   b735c:	428c      	cmp	r4, r1
   b735e:	f103 0308 	add.w	r3, r3, #8
   b7362:	d1f6      	bne.n	b7352 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7364:	bd10      	pop	{r4, pc}
        return nullptr;
   b7366:	2000      	movs	r0, #0
   b7368:	e7fc      	b.n	b7364 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b736c <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b736c:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b736e:	b570      	push	{r4, r5, r6, lr}
   b7370:	6003      	str	r3, [r0, #0]
   b7372:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7374:	2068      	movs	r0, #104	; 0x68
   b7376:	f7fd fabe 	bl	b48f6 <_Znwj>
	  auto __pi = ::new (__mem)
   b737a:	1e04      	subs	r4, r0, #0
   b737c:	f104 060c 	add.w	r6, r4, #12
   b7380:	d007      	beq.n	b7392 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b7382:	2301      	movs	r3, #1
   b7384:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7388:	4b04      	ldr	r3, [pc, #16]	; (b739c <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b738a:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b738c:	4630      	mov	r0, r6
   b738e:	f7ff ffbb 	bl	b7308 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b7392:	e9c5 6400 	strd	r6, r4, [r5]
}
   b7396:	4628      	mov	r0, r5
   b7398:	bd70      	pop	{r4, r5, r6, pc}
   b739a:	bf00      	nop
   b739c:	000b9100 	.word	0x000b9100

000b73a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b73a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73a2:	4606      	mov	r6, r0
   b73a4:	b085      	sub	sp, #20
   b73a6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b73a8:	460d      	mov	r5, r1
   b73aa:	2900      	cmp	r1, #0
   b73ac:	d050      	beq.n	b7450 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b73ae:	2a00      	cmp	r2, #0
   b73b0:	d04e      	beq.n	b7450 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b73b2:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b73b4:	7823      	ldrb	r3, [r4, #0]
   b73b6:	2af4      	cmp	r2, #244	; 0xf4
   b73b8:	bf28      	it	cs
   b73ba:	22f4      	movcs	r2, #244	; 0xf4
   b73bc:	b343      	cbz	r3, b7410 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b73be:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b73c0:	0798      	lsls	r0, r3, #30
   b73c2:	d509      	bpl.n	b73d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b73c4:	89a0      	ldrh	r0, [r4, #12]
   b73c6:	9203      	str	r2, [sp, #12]
   b73c8:	2300      	movs	r3, #0
   b73ca:	f7fd fed3 	bl	b5174 <hal_ble_gatt_server_set_characteristic_value>
   b73ce:	2800      	cmp	r0, #0
   b73d0:	9a03      	ldr	r2, [sp, #12]
   b73d2:	da03      	bge.n	b73dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b73d4:	b005      	add	sp, #20
   b73d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b73d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b73dc:	6834      	ldr	r4, [r6, #0]
   b73de:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b73e0:	06d9      	lsls	r1, r3, #27
   b73e2:	d509      	bpl.n	b73f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b73e4:	2f01      	cmp	r7, #1
   b73e6:	d007      	beq.n	b73f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b73e8:	89a0      	ldrh	r0, [r4, #12]
   b73ea:	2300      	movs	r3, #0
   b73ec:	4629      	mov	r1, r5
}
   b73ee:	b005      	add	sp, #20
   b73f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b73f4:	f7fd bef0 	b.w	b51d8 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b73f8:	069b      	lsls	r3, r3, #26
   b73fa:	d5eb      	bpl.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b73fc:	2f02      	cmp	r7, #2
   b73fe:	d0e9      	beq.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7400:	89a0      	ldrh	r0, [r4, #12]
   b7402:	2300      	movs	r3, #0
   b7404:	4629      	mov	r1, r5
}
   b7406:	b005      	add	sp, #20
   b7408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b740c:	f7fd beee 	b.w	b51ec <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7410:	8860      	ldrh	r0, [r4, #2]
   b7412:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7416:	4288      	cmp	r0, r1
   b7418:	d01c      	beq.n	b7454 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b741a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b741c:	074e      	lsls	r6, r1, #29
   b741e:	d501      	bpl.n	b7424 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7420:	2f01      	cmp	r7, #1
   b7422:	d104      	bne.n	b742e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7424:	070b      	lsls	r3, r1, #28
   b7426:	d409      	bmi.n	b743c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7428:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b742c:	e7d2      	b.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b742e:	89a1      	ldrh	r1, [r4, #12]
   b7430:	9300      	str	r3, [sp, #0]
   b7432:	4613      	mov	r3, r2
   b7434:	462a      	mov	r2, r5
   b7436:	f7fd feb1 	bl	b519c <hal_ble_gatt_client_write_without_response>
   b743a:	e7cb      	b.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b743c:	2f02      	cmp	r7, #2
   b743e:	d0f3      	beq.n	b7428 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7440:	2300      	movs	r3, #0
   b7442:	89a1      	ldrh	r1, [r4, #12]
   b7444:	9300      	str	r3, [sp, #0]
   b7446:	4613      	mov	r3, r2
   b7448:	462a      	mov	r2, r5
   b744a:	f7fd fe9d 	bl	b5188 <hal_ble_gatt_client_write_with_response>
   b744e:	e7c1      	b.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7450:	4802      	ldr	r0, [pc, #8]	; (b745c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7452:	e7bf      	b.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7454:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7458:	e7bc      	b.n	b73d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b745a:	bf00      	nop
   b745c:	fffffef2 	.word	0xfffffef2

000b7460 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b7460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7464:	2600      	movs	r6, #0
   b7466:	6006      	str	r6, [r0, #0]
   b7468:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b746a:	2028      	movs	r0, #40	; 0x28
   b746c:	460c      	mov	r4, r1
   b746e:	f7fd fa42 	bl	b48f6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7472:	1e05      	subs	r5, r0, #0
   b7474:	f105 080c 	add.w	r8, r5, #12
   b7478:	d00f      	beq.n	b749a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b747a:	2301      	movs	r3, #1
   b747c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7480:	4b08      	ldr	r3, [pc, #32]	; (b74a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b7482:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b7484:	4640      	mov	r0, r8
   b7486:	f7ff fe4d 	bl	b7124 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b748a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b748c:	622e      	str	r6, [r5, #32]
   b748e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b7492:	4646      	mov	r6, r8
   b7494:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b7496:	6823      	ldr	r3, [r4, #0]
   b7498:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b749a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b749e:	4638      	mov	r0, r7
   b74a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b74a4:	000b911c 	.word	0x000b911c

000b74a8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b74a8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b74aa:	2500      	movs	r5, #0
   b74ac:	6005      	str	r5, [r0, #0]
   b74ae:	4606      	mov	r6, r0
   b74b0:	2030      	movs	r0, #48	; 0x30
   b74b2:	f7fd fa20 	bl	b48f6 <_Znwj>
	  auto __pi = ::new (__mem)
   b74b6:	4604      	mov	r4, r0
   b74b8:	b188      	cbz	r0, b74de <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b74ba:	2301      	movs	r3, #1
   b74bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b74c0:	4b09      	ldr	r3, [pc, #36]	; (b74e8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b74c2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b74c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b74c8:	8183      	strh	r3, [r0, #12]
   b74ca:	300e      	adds	r0, #14
   b74cc:	f7ff fe1f 	bl	b710e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b74d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b74d4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b74d8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b74dc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b74de:	6074      	str	r4, [r6, #4]
   b74e0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b74e2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b74e4:	4630      	mov	r0, r6
   b74e6:	bd70      	pop	{r4, r5, r6, pc}
   b74e8:	000b9138 	.word	0x000b9138

000b74ec <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b74ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b74ee:	460d      	mov	r5, r1
   b74f0:	4604      	mov	r4, r0
    WiringBleLock lk;
   b74f2:	a801      	add	r0, sp, #4
   b74f4:	f7ff fdd0 	bl	b7098 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b74f8:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b74fa:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b74fe:	6023      	str	r3, [r4, #0]
   b7500:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7504:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7506:	a801      	add	r0, sp, #4
   b7508:	f7ff fdd4 	bl	b70b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b750c:	4620      	mov	r0, r4
   b750e:	b003      	add	sp, #12
   b7510:	bd30      	pop	{r4, r5, pc}

000b7512 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7512:	b530      	push	{r4, r5, lr}
   b7514:	4605      	mov	r5, r0
   b7516:	b087      	sub	sp, #28
   b7518:	460c      	mov	r4, r1
    WiringBleLock lk;
   b751a:	a801      	add	r0, sp, #4
   b751c:	f7ff fdbc 	bl	b7098 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7520:	682a      	ldr	r2, [r5, #0]
   b7522:	6823      	ldr	r3, [r4, #0]
   b7524:	8812      	ldrh	r2, [r2, #0]
   b7526:	881b      	ldrh	r3, [r3, #0]
   b7528:	429a      	cmp	r2, r3
   b752a:	d10d      	bne.n	b7548 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b752c:	4629      	mov	r1, r5
   b752e:	a802      	add	r0, sp, #8
   b7530:	f7ff ffdc 	bl	b74ec <_ZNK8particle13BlePeerDevice7addressEv>
   b7534:	4621      	mov	r1, r4
   b7536:	a804      	add	r0, sp, #16
   b7538:	f7ff ffd8 	bl	b74ec <_ZNK8particle13BlePeerDevice7addressEv>
   b753c:	a904      	add	r1, sp, #16
   b753e:	a802      	add	r0, sp, #8
   b7540:	f7ff fdd1 	bl	b70e6 <_ZNK8particle10BleAddresseqERKS0_>
   b7544:	4604      	mov	r4, r0
   b7546:	b900      	cbnz	r0, b754a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7548:	2400      	movs	r4, #0
    WiringBleLock lk;
   b754a:	a801      	add	r0, sp, #4
   b754c:	f7ff fdb2 	bl	b70b4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7550:	4620      	mov	r0, r4
   b7552:	b007      	add	sp, #28
   b7554:	bd30      	pop	{r4, r5, pc}
	...

000b7558 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7558:	b510      	push	{r4, lr}
   b755a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b755c:	2064      	movs	r0, #100	; 0x64
   b755e:	f7fd f9ca 	bl	b48f6 <_Znwj>
   b7562:	b168      	cbz	r0, b7580 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7564:	2300      	movs	r3, #0
   b7566:	e9c0 3300 	strd	r3, r3, [r0]
   b756a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7572:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7576:	6203      	str	r3, [r0, #32]
   b7578:	62c3      	str	r3, [r0, #44]	; 0x2c
   b757a:	63c3      	str	r3, [r0, #60]	; 0x3c
   b757c:	64c3      	str	r3, [r0, #76]	; 0x4c
   b757e:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7580:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7582:	b920      	cbnz	r0, b758e <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7584:	4a0a      	ldr	r2, [pc, #40]	; (b75b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7586:	490b      	ldr	r1, [pc, #44]	; (b75b4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7588:	200a      	movs	r0, #10
   b758a:	f7fd fe91 	bl	b52b0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b758e:	2000      	movs	r0, #0
   b7590:	f7fd fdbc 	bl	b510c <hal_ble_stack_init>
   b7594:	b120      	cbz	r0, b75a0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7596:	4a06      	ldr	r2, [pc, #24]	; (b75b0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7598:	4907      	ldr	r1, [pc, #28]	; (b75b8 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b759a:	200a      	movs	r0, #10
   b759c:	f7fd fe88 	bl	b52b0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b75a0:	6821      	ldr	r1, [r4, #0]
   b75a2:	4806      	ldr	r0, [pc, #24]	; (b75bc <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b75a4:	2200      	movs	r2, #0
   b75a6:	f7fd fe0d 	bl	b51c4 <hal_ble_set_callback_on_periph_link_events>
}
   b75aa:	4620      	mov	r0, r4
   b75ac:	bd10      	pop	{r4, pc}
   b75ae:	bf00      	nop
   b75b0:	000b5211 	.word	0x000b5211
   b75b4:	000b8fd0 	.word	0x000b8fd0
   b75b8:	000b900e 	.word	0x000b900e
   b75bc:	000b7b1d 	.word	0x000b7b1d

000b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b75c0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b75c2:	4c0a      	ldr	r4, [pc, #40]	; (b75ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b75c4:	7823      	ldrb	r3, [r4, #0]
   b75c6:	f3bf 8f5b 	dmb	ish
   b75ca:	07db      	lsls	r3, r3, #31
   b75cc:	d40c      	bmi.n	b75e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b75ce:	4620      	mov	r0, r4
   b75d0:	f7fd f9a4 	bl	b491c <__cxa_guard_acquire>
   b75d4:	b140      	cbz	r0, b75e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b75d6:	4806      	ldr	r0, [pc, #24]	; (b75f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b75d8:	f7ff ffbe 	bl	b7558 <_ZN8particle14BleLocalDeviceC1Ev>
   b75dc:	4620      	mov	r0, r4
   b75de:	f7fd f9a2 	bl	b4926 <__cxa_guard_release>
   b75e2:	4804      	ldr	r0, [pc, #16]	; (b75f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b75e4:	f001 f9a6 	bl	b8934 <atexit>
    return instance;
}
   b75e8:	4801      	ldr	r0, [pc, #4]	; (b75f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b75ea:	bd10      	pop	{r4, pc}
   b75ec:	2003e6f4 	.word	0x2003e6f4
   b75f0:	2003e700 	.word	0x2003e700
   b75f4:	000b7809 	.word	0x000b7809

000b75f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b75f8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b75fa:	6803      	ldr	r3, [r0, #0]
   b75fc:	3b09      	subs	r3, #9
   b75fe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7600:	b08d      	sub	sp, #52	; 0x34
   b7602:	4604      	mov	r4, r0
   b7604:	460d      	mov	r5, r1
    switch (event->type) {
   b7606:	d811      	bhi.n	b762c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7608:	f7ff ffda 	bl	b75c0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b760c:	88a1      	ldrh	r1, [r4, #4]
   b760e:	6800      	ldr	r0, [r0, #0]
   b7610:	f7ff fe9a 	bl	b7348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7614:	4603      	mov	r3, r0
   b7616:	b958      	cbnz	r0, b7630 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7618:	2220      	movs	r2, #32
   b761a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b761e:	4a0b      	ldr	r2, [pc, #44]	; (b764c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7620:	9200      	str	r2, [sp, #0]
   b7622:	490b      	ldr	r1, [pc, #44]	; (b7650 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7624:	aa04      	add	r2, sp, #16
   b7626:	2032      	movs	r0, #50	; 0x32
   b7628:	f7fd fe4a 	bl	b52c0 <log_message>
}
   b762c:	b00d      	add	sp, #52	; 0x34
   b762e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7630:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7632:	2a00      	cmp	r2, #0
   b7634:	d0fa      	beq.n	b762c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7636:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b763a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b763e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7642:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7644:	aa04      	add	r2, sp, #16
   b7646:	a903      	add	r1, sp, #12
   b7648:	47a0      	blx	r4
}
   b764a:	e7ef      	b.n	b762c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b764c:	000b9050 	.word	0x000b9050
   b7650:	000b8fe7 	.word	0x000b8fe7

000b7654 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7654:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7656:	2000      	movs	r0, #0
   b7658:	f7fd fd58 	bl	b510c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b765c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7660:	bd08      	pop	{r3, pc}

000b7662 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b7662:	b919      	cbnz	r1, b766c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b7664:	460a      	mov	r2, r1
   b7666:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7668:	f7fd bd58 	b.w	b511c <hal_ble_gap_set_advertising_data>
   b766c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7670:	2200      	movs	r2, #0
   b7672:	e7f9      	b.n	b7668 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b7674 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b7674:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b7676:	69d8      	ldr	r0, [r3, #28]
}
   b7678:	2800      	cmp	r0, #0
   b767a:	bfd4      	ite	le
   b767c:	2000      	movle	r0, #0
   b767e:	2001      	movgt	r0, #1
   b7680:	4770      	bx	lr

000b7682 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7682:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7684:	1e14      	subs	r4, r2, #0
   b7686:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7688:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b768a:	db02      	blt.n	b7692 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b768c:	1862      	adds	r2, r4, r1
   b768e:	429a      	cmp	r2, r3
   b7690:	dd00      	ble.n	b7694 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7692:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7694:	682a      	ldr	r2, [r5, #0]
   b7696:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7698:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b769a:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b769c:	1a52      	subs	r2, r2, r1
   b769e:	f001 f975 	bl	b898c <memmove>
    size_ -= n;
   b76a2:	686a      	ldr	r2, [r5, #4]
   b76a4:	1b12      	subs	r2, r2, r4
   b76a6:	606a      	str	r2, [r5, #4]
}
   b76a8:	bd38      	pop	{r3, r4, r5, pc}

000b76aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b76aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b76ac:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b76ae:	4604      	mov	r4, r0
   b76b0:	460d      	mov	r5, r1
   b76b2:	ab01      	add	r3, sp, #4
   b76b4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b76b8:	f7ff fc82 	bl	b6fc0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b76bc:	4602      	mov	r2, r0
   b76be:	b138      	cbz	r0, b76d0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b76c0:	9901      	ldr	r1, [sp, #4]
   b76c2:	4620      	mov	r0, r4
   b76c4:	f7ff ffdd 	bl	b7682 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b76c8:	4629      	mov	r1, r5
   b76ca:	4620      	mov	r0, r4
   b76cc:	f7ff ffed 	bl	b76aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b76d0:	b003      	add	sp, #12
   b76d2:	bd30      	pop	{r4, r5, pc}

000b76d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b76d4:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b76d6:	460c      	mov	r4, r1
   b76d8:	b929      	cbnz	r1, b76e6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b76da:	460a      	mov	r2, r1
   b76dc:	4608      	mov	r0, r1
}
   b76de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b76e2:	f7fd bd23 	b.w	b512c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b76e6:	2101      	movs	r1, #1
   b76e8:	4620      	mov	r0, r4
   b76ea:	f7ff ffde 	bl	b76aa <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b76ee:	e9d4 0100 	ldrd	r0, r1, [r4]
   b76f2:	2200      	movs	r2, #0
   b76f4:	e7f3      	b.n	b76de <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b76f6 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b76f6:	b538      	push	{r3, r4, r5, lr}
   b76f8:	4604      	mov	r4, r0
   b76fa:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b76fc:	f7ff ffb1 	bl	b7662 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b7700:	2800      	cmp	r0, #0
   b7702:	db0a      	blt.n	b771a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7704:	4629      	mov	r1, r5
   b7706:	4620      	mov	r0, r4
   b7708:	f7ff ffe4 	bl	b76d4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b770c:	2800      	cmp	r0, #0
   b770e:	db04      	blt.n	b771a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b7710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7714:	2000      	movs	r0, #0
   b7716:	f7fd bd11 	b.w	b513c <hal_ble_gap_start_advertising>
}
   b771a:	bd38      	pop	{r3, r4, r5, pc}

000b771c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b771c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b771e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7720:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7722:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7724:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7726:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7728:	f7fd f8e5 	bl	b48f6 <_Znwj>
   b772c:	b118      	cbz	r0, b7736 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b772e:	682b      	ldr	r3, [r5, #0]
   b7730:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7732:	686b      	ldr	r3, [r5, #4]
   b7734:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7736:	4b03      	ldr	r3, [pc, #12]	; (b7744 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7738:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b773a:	4b03      	ldr	r3, [pc, #12]	; (b7748 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b773c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b773e:	60a3      	str	r3, [r4, #8]
      }
   b7740:	4620      	mov	r0, r4
   b7742:	bd38      	pop	{r3, r4, r5, pc}
   b7744:	000b7001 	.word	0x000b7001
   b7748:	000b7019 	.word	0x000b7019

000b774c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b774c:	680b      	ldr	r3, [r1, #0]
   b774e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7750:	b113      	cbz	r3, b7758 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7752:	685a      	ldr	r2, [r3, #4]
   b7754:	3201      	adds	r2, #1
   b7756:	605a      	str	r2, [r3, #4]
      }
   b7758:	4770      	bx	lr

000b775a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b775a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b775c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7760:	4604      	mov	r4, r0
   b7762:	f840 3b04 	str.w	r3, [r0], #4
   b7766:	f7ff fff1 	bl	b774c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b776a:	6823      	ldr	r3, [r4, #0]
   b776c:	b90b      	cbnz	r3, b7772 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b776e:	f7ff fc3d 	bl	b6fec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7772:	4620      	mov	r0, r4
   b7774:	bd10      	pop	{r4, pc}

000b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7776:	b510      	push	{r4, lr}
   b7778:	f851 3b04 	ldr.w	r3, [r1], #4
   b777c:	4604      	mov	r4, r0
   b777e:	f840 3b04 	str.w	r3, [r0], #4
   b7782:	f7ff ffe3 	bl	b774c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7786:	4620      	mov	r0, r4
   b7788:	bd10      	pop	{r4, pc}

000b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b778a:	b510      	push	{r4, lr}
   b778c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7790:	4604      	mov	r4, r0
   b7792:	f840 3b04 	str.w	r3, [r0], #4
   b7796:	f7ff ffd9 	bl	b774c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b779a:	4620      	mov	r0, r4
   b779c:	bd10      	pop	{r4, pc}

000b779e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b779e:	b510      	push	{r4, lr}
   b77a0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b77a2:	3004      	adds	r0, #4
   b77a4:	f7fd ffb2 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b77a8:	4620      	mov	r0, r4
   b77aa:	bd10      	pop	{r4, pc}

000b77ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b77ac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b77ae:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b77b2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b77b4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b77b8:	42ae      	cmp	r6, r5
   b77ba:	d004      	beq.n	b77c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b77bc:	1d28      	adds	r0, r5, #4
   b77be:	f7fd ffa5 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77c2:	3508      	adds	r5, #8
   b77c4:	e7f8      	b.n	b77b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b77c6:	6820      	ldr	r0, [r4, #0]
   b77c8:	f7fd fe2e 	bl	b5428 <free>
}
   b77cc:	4620      	mov	r0, r4
   b77ce:	bd70      	pop	{r4, r5, r6, pc}

000b77d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b77d0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b77d2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b77d6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b77d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b77dc:	42ae      	cmp	r6, r5
   b77de:	d004      	beq.n	b77ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b77e0:	1d28      	adds	r0, r5, #4
   b77e2:	f7fd ff93 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b77e6:	3508      	adds	r5, #8
   b77e8:	e7f8      	b.n	b77dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b77ea:	6820      	ldr	r0, [r4, #0]
   b77ec:	f7fd fe1c 	bl	b5428 <free>
}
   b77f0:	4620      	mov	r0, r4
   b77f2:	bd70      	pop	{r4, r5, r6, pc}

000b77f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b77f4:	b510      	push	{r4, lr}
   b77f6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b77f8:	3024      	adds	r0, #36	; 0x24
   b77fa:	f7ff ffe9 	bl	b77d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b77fe:	f104 0018 	add.w	r0, r4, #24
   b7802:	f7ff ffd3 	bl	b77ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b7806:	bd10      	pop	{r4, pc}

000b7808 <__tcf_0>:
    static BleLocalDevice instance;
   b7808:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b780a:	4b17      	ldr	r3, [pc, #92]	; (b7868 <__tcf_0+0x60>)
   b780c:	681c      	ldr	r4, [r3, #0]
   b780e:	b354      	cbz	r4, b7866 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b7810:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7814:	f7fe fa8e 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b7818:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b781c:	f7fe fa8a 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b7820:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7824:	f7fe fa86 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b7828:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b782c:	f7fe fa82 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7830:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7834:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7838:	42ae      	cmp	r6, r5
   b783a:	d004      	beq.n	b7846 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b783c:	1d28      	adds	r0, r5, #4
   b783e:	f7fd ff65 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7842:	3508      	adds	r5, #8
   b7844:	e7f8      	b.n	b7838 <__tcf_0+0x30>
    ::free(ptr);
   b7846:	69a0      	ldr	r0, [r4, #24]
   b7848:	f7fd fdee 	bl	b5428 <free>
    ~BleLocalDeviceImpl() = default;
   b784c:	f104 000c 	add.w	r0, r4, #12
   b7850:	f7ff ffbe 	bl	b77d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7854:	4620      	mov	r0, r4
   b7856:	f7ff ffa9 	bl	b77ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b785a:	4620      	mov	r0, r4
   b785c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b785e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7862:	f7fd b84c 	b.w	b48fe <_ZdlPvj>
   b7866:	bd70      	pop	{r4, r5, r6, pc}
   b7868:	2003e700 	.word	0x2003e700

000b786c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b786c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b786e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7870:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7874:	e9c1 3300 	strd	r3, r3, [r1]
   b7878:	6803      	ldr	r3, [r0, #0]
   b787a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b787c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b787e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7880:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7882:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7884:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7886:	f7fd ff41 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b788a:	b002      	add	sp, #8
   b788c:	bd10      	pop	{r4, pc}

000b788e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b788e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7890:	b510      	push	{r4, lr}
      if (_M_empty())
   b7892:	b90a      	cbnz	r2, b7898 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7894:	f000 ff39 	bl	b870a <_ZSt25__throw_bad_function_callv>
    }
   b7898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b789c:	68c3      	ldr	r3, [r0, #12]
   b789e:	4718      	bx	r3

000b78a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b78a0:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b78a2:	6883      	ldr	r3, [r0, #8]
   b78a4:	428b      	cmp	r3, r1
   b78a6:	da02      	bge.n	b78ae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b78a8:	f7fd ff46 	bl	b5738 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b78ac:	bd08      	pop	{r3, pc}
    return true;
   b78ae:	2001      	movs	r0, #1
   b78b0:	e7fc      	b.n	b78ac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b78b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b78b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78b6:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b78b8:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b78ba:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b78bc:	4419      	add	r1, r3
   b78be:	6883      	ldr	r3, [r0, #8]
   b78c0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b78c2:	4604      	mov	r4, r0
   b78c4:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b78c6:	dc12      	bgt.n	b78ee <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b78c8:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78ca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78cc:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78ce:	1bd2      	subs	r2, r2, r7
   b78d0:	4631      	mov	r1, r6
   b78d2:	1970      	adds	r0, r6, r5
   b78d4:	f001 f85a 	bl	b898c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b78d8:	462a      	mov	r2, r5
   b78da:	4641      	mov	r1, r8
   b78dc:	4630      	mov	r0, r6
   b78de:	f001 f847 	bl	b8970 <memcpy>
    size_ += n;
   b78e2:	6863      	ldr	r3, [r4, #4]
   b78e4:	442b      	add	r3, r5
   b78e6:	6063      	str	r3, [r4, #4]
    return true;
   b78e8:	2001      	movs	r0, #1
}
   b78ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b78ee:	f7fd ff23 	bl	b5738 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b78f2:	2800      	cmp	r0, #0
   b78f4:	d1e8      	bne.n	b78c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b78f6:	e7f8      	b.n	b78ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b78f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78fa:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b78fc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7900:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7902:	4604      	mov	r4, r0
   b7904:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7906:	da0b      	bge.n	b7920 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b7908:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b790a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b790c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b790e:	1b52      	subs	r2, r2, r5
   b7910:	1c48      	adds	r0, r1, #1
   b7912:	f001 f83b 	bl	b898c <memmove>
    new(p) T(std::move(value));
   b7916:	557e      	strb	r6, [r7, r5]
    ++size_;
   b7918:	6863      	ldr	r3, [r4, #4]
   b791a:	3301      	adds	r3, #1
   b791c:	6063      	str	r3, [r4, #4]
}
   b791e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7920:	3101      	adds	r1, #1
   b7922:	f7fd ff09 	bl	b5738 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7926:	2800      	cmp	r0, #0
   b7928:	d1ee      	bne.n	b7908 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b792a:	e7f8      	b.n	b791e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b792c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b792c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b792e:	6841      	ldr	r1, [r0, #4]
   b7930:	f7ff bfe2 	b.w	b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7938:	4604      	mov	r4, r0
   b793a:	461d      	mov	r5, r3
   b793c:	460f      	mov	r7, r1
   b793e:	ab01      	add	r3, sp, #4
   b7940:	4690      	mov	r8, r2
   b7942:	460a      	mov	r2, r1
   b7944:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7948:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b794c:	f7ff fb38 	bl	b6fc0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7950:	1cae      	adds	r6, r5, #2
   b7952:	6863      	ldr	r3, [r4, #4]
   b7954:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7956:	f1b9 0f00 	cmp.w	r9, #0
   b795a:	d126      	bne.n	b79aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b795c:	b328      	cbz	r0, b79aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b795e:	4433      	add	r3, r6
   b7960:	1a1b      	subs	r3, r3, r0
   b7962:	2bff      	cmp	r3, #255	; 0xff
   b7964:	d809      	bhi.n	b797a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7966:	9901      	ldr	r1, [sp, #4]
   b7968:	4620      	mov	r0, r4
   b796a:	f7ff fe8a 	bl	b7682 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b796e:	6861      	ldr	r1, [r4, #4]
   b7970:	4620      	mov	r0, r4
   b7972:	4431      	add	r1, r6
   b7974:	f7ff ff94 	bl	b78a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7978:	b918      	cbnz	r0, b7982 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b797a:	6860      	ldr	r0, [r4, #4]
}
   b797c:	b003      	add	sp, #12
   b797e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7982:	1c6a      	adds	r2, r5, #1
   b7984:	9901      	ldr	r1, [sp, #4]
   b7986:	b2d2      	uxtb	r2, r2
   b7988:	4620      	mov	r0, r4
   b798a:	f7ff ffb5 	bl	b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b798e:	9901      	ldr	r1, [sp, #4]
   b7990:	463a      	mov	r2, r7
   b7992:	3101      	adds	r1, #1
   b7994:	4620      	mov	r0, r4
   b7996:	f7ff ffaf 	bl	b78f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b799a:	9901      	ldr	r1, [sp, #4]
   b799c:	462b      	mov	r3, r5
   b799e:	4642      	mov	r2, r8
   b79a0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b79a2:	4620      	mov	r0, r4
   b79a4:	f7ff ff85 	bl	b78b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b79a8:	e7e7      	b.n	b797a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b79aa:	18f1      	adds	r1, r6, r3
   b79ac:	29ff      	cmp	r1, #255	; 0xff
   b79ae:	d8e4      	bhi.n	b797a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b79b0:	4620      	mov	r0, r4
   b79b2:	f7ff ff75 	bl	b78a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b79b6:	2800      	cmp	r0, #0
   b79b8:	d0df      	beq.n	b797a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b79ba:	1c69      	adds	r1, r5, #1
   b79bc:	b2c9      	uxtb	r1, r1
   b79be:	4620      	mov	r0, r4
   b79c0:	f7ff ffb4 	bl	b792c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b79c4:	4639      	mov	r1, r7
   b79c6:	4620      	mov	r0, r4
   b79c8:	f7ff ffb0 	bl	b792c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b79cc:	6861      	ldr	r1, [r4, #4]
   b79ce:	462b      	mov	r3, r5
   b79d0:	4642      	mov	r2, r8
   b79d2:	e7e6      	b.n	b79a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b79d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b79d4:	b430      	push	{r4, r5}
   b79d6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b79da:	b11a      	cbz	r2, b79e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b79dc:	9502      	str	r5, [sp, #8]
}
   b79de:	bc30      	pop	{r4, r5}
   b79e0:	f7ff bfa8 	b.w	b7934 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b79e4:	6840      	ldr	r0, [r0, #4]
}
   b79e6:	bc30      	pop	{r4, r5}
   b79e8:	4770      	bx	lr

000b79ea <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b79ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b79ec:	2300      	movs	r3, #0
   b79ee:	e9c0 3300 	strd	r3, r3, [r0]
   b79f2:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79f4:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79f6:	9300      	str	r3, [sp, #0]
   b79f8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b79fa:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b79fe:	4619      	mov	r1, r3
   b7a00:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7a04:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7a06:	f7ff ffe5 	bl	b79d4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7a0a:	4620      	mov	r0, r4
   b7a0c:	b004      	add	sp, #16
   b7a0e:	bd10      	pop	{r4, pc}

000b7a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7a10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a14:	4604      	mov	r4, r0
   b7a16:	460d      	mov	r5, r1
   b7a18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a1a:	d914      	bls.n	b7a46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7a1c:	4290      	cmp	r0, r2
   b7a1e:	d213      	bcs.n	b7a48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7a20:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7a24:	1a75      	subs	r5, r6, r1
   b7a26:	f1a1 0708 	sub.w	r7, r1, #8
   b7a2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7a2c:	42b7      	cmp	r7, r6
   b7a2e:	d018      	beq.n	b7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7a30:	b11c      	cbz	r4, b7a3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7a32:	4631      	mov	r1, r6
   b7a34:	4620      	mov	r0, r4
   b7a36:	f7ff fea8 	bl	b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b7a3a:	1d30      	adds	r0, r6, #4
   b7a3c:	f7fd fe66 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7a40:	3e08      	subs	r6, #8
   b7a42:	3c08      	subs	r4, #8
   b7a44:	e7f2      	b.n	b7a2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7a46:	d00c      	beq.n	b7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7a48:	42b5      	cmp	r5, r6
   b7a4a:	d00a      	beq.n	b7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7a4c:	b11c      	cbz	r4, b7a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7a4e:	4629      	mov	r1, r5
   b7a50:	4620      	mov	r0, r4
   b7a52:	f7ff fe9a 	bl	b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7a56:	1d28      	adds	r0, r5, #4
   b7a58:	f7fd fe58 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a5c:	3508      	adds	r5, #8
   b7a5e:	3408      	adds	r4, #8
   b7a60:	e7f2      	b.n	b7a48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a66:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7a68:	6846      	ldr	r6, [r0, #4]
   b7a6a:	4668      	mov	r0, sp
   b7a6c:	f7ff fe8d 	bl	b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a70:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7a74:	429f      	cmp	r7, r3
   b7a76:	db12      	blt.n	b7a9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7a78:	3701      	adds	r7, #1
        if (n > 0) {
   b7a7a:	2f00      	cmp	r7, #0
   b7a7c:	dd29      	ble.n	b7ad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7a7e:	00f8      	lsls	r0, r7, #3
   b7a80:	f7fd fcca 	bl	b5418 <malloc>
            if (!d) {
   b7a84:	4605      	mov	r5, r0
   b7a86:	b1f0      	cbz	r0, b7ac6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7a88:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7a8c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7a90:	f7ff ffbe 	bl	b7a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7a94:	6820      	ldr	r0, [r4, #0]
   b7a96:	f7fd fcc7 	bl	b5428 <free>
        data_ = d;
   b7a9a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7a9c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7a9e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7aa0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7aa2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7aa6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7aaa:	4631      	mov	r1, r6
   b7aac:	f106 0008 	add.w	r0, r6, #8
   b7ab0:	f7ff ffae 	bl	b7a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ab4:	b11e      	cbz	r6, b7abe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7ab6:	4669      	mov	r1, sp
   b7ab8:	4630      	mov	r0, r6
   b7aba:	f7ff fe66 	bl	b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7abe:	6863      	ldr	r3, [r4, #4]
   b7ac0:	3301      	adds	r3, #1
   b7ac2:	6063      	str	r3, [r4, #4]
    return true;
   b7ac4:	2501      	movs	r5, #1
   b7ac6:	a801      	add	r0, sp, #4
   b7ac8:	f7fd fe20 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7acc:	4628      	mov	r0, r5
   b7ace:	b003      	add	sp, #12
   b7ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7ad2:	2500      	movs	r5, #0
   b7ad4:	e7de      	b.n	b7a94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7ad8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7adc:	4605      	mov	r5, r0
   b7ade:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7ae0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7ae4:	42a6      	cmp	r6, r4
   b7ae6:	d005      	beq.n	b7af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7ae8:	4639      	mov	r1, r7
   b7aea:	4620      	mov	r0, r4
   b7aec:	f7ff fd11 	bl	b7512 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7af0:	b108      	cbz	r0, b7af6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7af2:	b914      	cbnz	r4, b7afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7af6:	3408      	adds	r4, #8
   b7af8:	e7f4      	b.n	b7ae4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7afa:	1d20      	adds	r0, r4, #4
   b7afc:	f7fd fe06 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7b00:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7b04:	f104 0108 	add.w	r1, r4, #8
   b7b08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7b0c:	4620      	mov	r0, r4
   b7b0e:	f7ff ff7f 	bl	b7a10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7b12:	686b      	ldr	r3, [r5, #4]
   b7b14:	3b01      	subs	r3, #1
   b7b16:	606b      	str	r3, [r5, #4]
    return true;
   b7b18:	e7ec      	b.n	b7af4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7b1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b20:	4605      	mov	r5, r0
   b7b22:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7b24:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7b26:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7b28:	f7ff fab6 	bl	b7098 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7b2c:	682e      	ldr	r6, [r5, #0]
   b7b2e:	1ef3      	subs	r3, r6, #3
   b7b30:	2b0d      	cmp	r3, #13
   b7b32:	d83c      	bhi.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7b34:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7b38:	0057000e 	.word	0x0057000e
   b7b3c:	00d3003b 	.word	0x00d3003b
   b7b40:	003b003b 	.word	0x003b003b
   b7b44:	003b003b 	.word	0x003b003b
   b7b48:	009d003b 	.word	0x009d003b
   b7b4c:	009d009d 	.word	0x009d009d
   b7b50:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b7b54:	a804      	add	r0, sp, #16
   b7b56:	f7ff fca7 	bl	b74a8 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b7b5a:	9b04      	ldr	r3, [sp, #16]
   b7b5c:	89aa      	ldrh	r2, [r5, #12]
   b7b5e:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7b60:	6869      	ldr	r1, [r5, #4]
   b7b62:	9804      	ldr	r0, [sp, #16]
   b7b64:	3108      	adds	r1, #8
   b7b66:	3002      	adds	r0, #2
   b7b68:	f7ff fab0 	bl	b70cc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7b6c:	a904      	add	r1, sp, #16
   b7b6e:	a806      	add	r0, sp, #24
   b7b70:	f7ff fe0b 	bl	b778a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7b74:	a906      	add	r1, sp, #24
   b7b76:	f104 0018 	add.w	r0, r4, #24
   b7b7a:	f7ff ff73 	bl	b7a64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7b7e:	4605      	mov	r5, r0
   b7b80:	a807      	add	r0, sp, #28
   b7b82:	f7fd fdc3 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b86:	b9c5      	cbnz	r5, b7bba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7b88:	2320      	movs	r3, #32
   b7b8a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b7b8e:	4b5e      	ldr	r3, [pc, #376]	; (b7d08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7b90:	495e      	ldr	r1, [pc, #376]	; (b7d0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7b92:	9300      	str	r3, [sp, #0]
   b7b94:	aa06      	add	r2, sp, #24
   b7b96:	462b      	mov	r3, r5
   b7b98:	2001      	movs	r0, #1
   b7b9a:	f7fd fb91 	bl	b52c0 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7b9e:	9b04      	ldr	r3, [sp, #16]
   b7ba0:	4629      	mov	r1, r5
   b7ba2:	8818      	ldrh	r0, [r3, #0]
   b7ba4:	f7fd fad2 	bl	b514c <hal_ble_gap_disconnect>
   b7ba8:	a805      	add	r0, sp, #20
   b7baa:	f7fd fdaf 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7bae:	a803      	add	r0, sp, #12
   b7bb0:	f7ff fa80 	bl	b70b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7bb4:	b00e      	add	sp, #56	; 0x38
   b7bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b7bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7bbc:	b123      	cbz	r3, b7bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b7bbe:	a904      	add	r1, sp, #16
   b7bc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7bc4:	f7ff fe63 	bl	b788e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7bc8:	a805      	add	r0, sp, #20
   b7bca:	f7fd fd9f 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b7bce:	2120      	movs	r1, #32
   b7bd0:	2300      	movs	r3, #0
   b7bd2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7bd6:	4a4e      	ldr	r2, [pc, #312]	; (b7d10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7bd8:	9200      	str	r2, [sp, #0]
   b7bda:	494c      	ldr	r1, [pc, #304]	; (b7d0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7bdc:	aa06      	add	r2, sp, #24
   b7bde:	2001      	movs	r0, #1
   b7be0:	f7fd fb6e 	bl	b52c0 <log_message>
   b7be4:	e7e3      	b.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7be6:	89a9      	ldrh	r1, [r5, #12]
   b7be8:	4620      	mov	r0, r4
   b7bea:	f7ff fbad 	bl	b7348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7bee:	4606      	mov	r6, r0
   b7bf0:	2800      	cmp	r0, #0
   b7bf2:	d0dc      	beq.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7bf4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7bf6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7bfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7bfe:	8029      	strh	r1, [r5, #0]
   b7c00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7c04:	429a      	cmp	r2, r3
   b7c06:	d003      	beq.n	b7c10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7c08:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7c0c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7c0e:	e7f9      	b.n	b7c04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7c10:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7c14:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7c18:	45b8      	cmp	r8, r7
   b7c1a:	d004      	beq.n	b7c26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b7c1c:	1d38      	adds	r0, r7, #4
   b7c1e:	f7fd fd75 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c22:	3708      	adds	r7, #8
   b7c24:	e7f8      	b.n	b7c18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b7c26:	2300      	movs	r3, #0
   b7c28:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7c2a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7c2e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7c32:	45b8      	cmp	r8, r7
   b7c34:	d004      	beq.n	b7c40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b7c36:	1d38      	adds	r0, r7, #4
   b7c38:	f7fd fd68 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c3c:	3708      	adds	r7, #8
   b7c3e:	e7f8      	b.n	b7c32 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7c40:	2300      	movs	r3, #0
   b7c42:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7c44:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b7c46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7c48:	b123      	cbz	r3, b7c54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b7c4a:	4631      	mov	r1, r6
   b7c4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7c50:	f7ff fe1d 	bl	b788e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7c54:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7c5a:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7c5c:	4631      	mov	r1, r6
   b7c5e:	f104 0018 	add.w	r0, r4, #24
   b7c62:	f7ff ff38 	bl	b7ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7c66:	2220      	movs	r2, #32
   b7c68:	2300      	movs	r3, #0
   b7c6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7c6e:	4a29      	ldr	r2, [pc, #164]	; (b7d14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7c70:	e7b2      	b.n	b7bd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7c72:	89a9      	ldrh	r1, [r5, #12]
   b7c74:	4620      	mov	r0, r4
   b7c76:	f7ff fb67 	bl	b7348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7c7a:	2800      	cmp	r0, #0
   b7c7c:	d097      	beq.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7c7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7c80:	2b00      	cmp	r3, #0
   b7c82:	d094      	beq.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7c84:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c86:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7c88:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7c8c:	d001      	beq.n	b7c92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7c8e:	2e10      	cmp	r6, #16
   b7c90:	d117      	bne.n	b7cc2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7c92:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7c94:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7c96:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7c98:	2506      	movs	r5, #6
                        };
   b7c9a:	f88d 3015 	strb.w	r3, [sp, #21]
   b7c9e:	9104      	str	r1, [sp, #16]
   b7ca0:	f88d 2014 	strb.w	r2, [sp, #20]
   b7ca4:	9006      	str	r0, [sp, #24]
   b7ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7caa:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7cac:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7cb0:	9508      	str	r5, [sp, #32]
   b7cb2:	e883 0003 	stmia.w	r3, {r0, r1}
   b7cb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7cb8:	a906      	add	r1, sp, #24
   b7cba:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7cbe:	4798      	blx	r3
   b7cc0:	e775      	b.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7cc2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7cc4:	bf01      	itttt	eq
   b7cc6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7cc8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7cca:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7cce:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7cd0:	bf0f      	iteee	eq
   b7cd2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7cd6:	461a      	movne	r2, r3
   b7cd8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7cda:	461d      	movne	r5, r3
   b7cdc:	e7dd      	b.n	b7c9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7cde:	89a9      	ldrh	r1, [r5, #12]
   b7ce0:	4620      	mov	r0, r4
   b7ce2:	f7ff fb31 	bl	b7348 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7ce6:	4601      	mov	r1, r0
   b7ce8:	2800      	cmp	r0, #0
   b7cea:	f43f af60 	beq.w	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7cee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7cf0:	2b00      	cmp	r3, #0
   b7cf2:	f43f af5c 	beq.w	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7cf6:	686b      	ldr	r3, [r5, #4]
   b7cf8:	9306      	str	r3, [sp, #24]
   b7cfa:	aa06      	add	r2, sp, #24
   b7cfc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7cfe:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7d02:	4798      	blx	r3
   b7d04:	e753      	b.n	b7bae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7d06:	bf00      	nop
   b7d08:	000b9068 	.word	0x000b9068
   b7d0c:	000b8fe7 	.word	0x000b8fe7
   b7d10:	000b908e 	.word	0x000b908e
   b7d14:	000b9098 	.word	0x000b9098

000b7d18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7d18:	b538      	push	{r3, r4, r5, lr}
   b7d1a:	4605      	mov	r5, r0
   b7d1c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7d1e:	f7fe f812 	bl	b5d46 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d22:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7d24:	68a2      	ldr	r2, [r4, #8]
   b7d26:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d28:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7d2a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7d2c:	68e2      	ldr	r2, [r4, #12]
   b7d2e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7d30:	60e3      	str	r3, [r4, #12]
      }
   b7d32:	bd38      	pop	{r3, r4, r5, pc}

000b7d34 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7d34:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7d36:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7d38:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7d3a:	344c      	adds	r4, #76	; 0x4c
   b7d3c:	b1b9      	cbz	r1, b7d6e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b7d3e:	e9cd 1200 	strd	r1, r2, [sp]
   b7d42:	a802      	add	r0, sp, #8
   b7d44:	4669      	mov	r1, sp
   b7d46:	f7ff fce9 	bl	b771c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7d4a:	2300      	movs	r3, #0
	__x.swap(*this);
   b7d4c:	a906      	add	r1, sp, #24
   b7d4e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7d50:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7d52:	f7ff ffe1 	bl	b7d18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7d56:	4621      	mov	r1, r4
   b7d58:	a806      	add	r0, sp, #24
   b7d5a:	f7ff ffdd 	bl	b7d18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7d5e:	a806      	add	r0, sp, #24
   b7d60:	f7fd ffe8 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b7d64:	a802      	add	r0, sp, #8
   b7d66:	f7fd ffe5 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
}
   b7d6a:	b00a      	add	sp, #40	; 0x28
   b7d6c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7d6e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7d70:	e7eb      	b.n	b7d4a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b7d72 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7d72:	b570      	push	{r4, r5, r6, lr}
   b7d74:	4604      	mov	r4, r0
   b7d76:	b08c      	sub	sp, #48	; 0x30
   b7d78:	460e      	mov	r6, r1
   b7d7a:	9201      	str	r2, [sp, #4]
   b7d7c:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7d7e:	f7ff fac3 	bl	b7308 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7d82:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7d84:	9901      	ldr	r1, [sp, #4]
   b7d86:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7d8a:	f000 fbb0 	bl	b84ee <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7d8e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7d92:	b1cd      	cbz	r5, b7dc8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7d96:	9502      	str	r5, [sp, #8]
   b7d98:	a902      	add	r1, sp, #8
   b7d9a:	a804      	add	r0, sp, #16
   b7d9c:	9303      	str	r3, [sp, #12]
   b7d9e:	f7ff fcbd 	bl	b771c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7da2:	2300      	movs	r3, #0
	__x.swap(*this);
   b7da4:	a908      	add	r1, sp, #32
   b7da6:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7da8:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7daa:	f7ff ffb5 	bl	b7d18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7dae:	4631      	mov	r1, r6
   b7db0:	a808      	add	r0, sp, #32
   b7db2:	f7ff ffb1 	bl	b7d18 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7db6:	a808      	add	r0, sp, #32
   b7db8:	f7fd ffbc 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
   b7dbc:	a804      	add	r0, sp, #16
   b7dbe:	f7fd ffb9 	bl	b5d34 <_ZNSt14_Function_baseD1Ev>
    }
   b7dc2:	4620      	mov	r0, r4
   b7dc4:	b00c      	add	sp, #48	; 0x30
   b7dc6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7dc8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7dca:	e7ea      	b.n	b7da2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b7dcc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7dd0:	b087      	sub	sp, #28
   b7dd2:	461d      	mov	r5, r3
   b7dd4:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7dd8:	4680      	mov	r8, r0
   b7dda:	468b      	mov	fp, r1
   b7ddc:	4692      	mov	sl, r2
   b7dde:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7de0:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7de2:	2200      	movs	r2, #0
   b7de4:	2068      	movs	r0, #104	; 0x68
   b7de6:	9102      	str	r1, [sp, #8]
   b7de8:	9204      	str	r2, [sp, #16]
   b7dea:	f7fc fd84 	bl	b48f6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dee:	1e06      	subs	r6, r0, #0
   b7df0:	f106 090c 	add.w	r9, r6, #12
   b7df4:	d018      	beq.n	b7e28 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7df6:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7df8:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7dfa:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7dfe:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7e00:	4a15      	ldr	r2, [pc, #84]	; (b7e58 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7e02:	f847 2b20 	str.w	r2, [r7], #32
   b7e06:	9b03      	ldr	r3, [sp, #12]
   b7e08:	9100      	str	r1, [sp, #0]
   b7e0a:	465a      	mov	r2, fp
   b7e0c:	4651      	mov	r1, sl
   b7e0e:	4648      	mov	r0, r9
   b7e10:	f7ff ffaf 	bl	b7d72 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b7e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e16:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b7e18:	682b      	ldr	r3, [r5, #0]
   b7e1a:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b7e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7e1e:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b7e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7e24:	6823      	ldr	r3, [r4, #0]
   b7e26:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b7e28:	a904      	add	r1, sp, #16
   b7e2a:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b7e2c:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b7e30:	f7ff fd1c 	bl	b786c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b7e34:	a805      	add	r0, sp, #20
   b7e36:	f7fd fc69 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b7e3a:	f8d8 3000 	ldr.w	r3, [r8]
   b7e3e:	b93b      	cbnz	r3, b7e50 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b7e40:	4a06      	ldr	r2, [pc, #24]	; (b7e5c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b7e42:	4907      	ldr	r1, [pc, #28]	; (b7e60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b7e44:	200a      	movs	r0, #10
}
   b7e46:	b007      	add	sp, #28
   b7e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b7e4c:	f7fd ba30 	b.w	b52b0 <panic_>
}
   b7e50:	b007      	add	sp, #28
   b7e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e56:	bf00      	nop
   b7e58:	000b9100 	.word	0x000b9100
   b7e5c:	000b5211 	.word	0x000b5211
   b7e60:	000b8fd0 	.word	0x000b8fd0

000b7e64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7e64:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e68:	4604      	mov	r4, r0
   b7e6a:	460d      	mov	r5, r1
   b7e6c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7e6e:	d914      	bls.n	b7e9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7e70:	4290      	cmp	r0, r2
   b7e72:	d213      	bcs.n	b7e9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7e74:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7e78:	1a75      	subs	r5, r6, r1
   b7e7a:	f1a1 0708 	sub.w	r7, r1, #8
   b7e7e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7e80:	42b7      	cmp	r7, r6
   b7e82:	d018      	beq.n	b7eb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7e84:	b11c      	cbz	r4, b7e8e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7e86:	4631      	mov	r1, r6
   b7e88:	4620      	mov	r0, r4
   b7e8a:	f7ff fc74 	bl	b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7e8e:	1d30      	adds	r0, r6, #4
   b7e90:	f7fd fc3c 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7e94:	3e08      	subs	r6, #8
   b7e96:	3c08      	subs	r4, #8
   b7e98:	e7f2      	b.n	b7e80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7e9a:	d00c      	beq.n	b7eb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7e9c:	42b5      	cmp	r5, r6
   b7e9e:	d00a      	beq.n	b7eb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7ea0:	b11c      	cbz	r4, b7eaa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7ea2:	4629      	mov	r1, r5
   b7ea4:	4620      	mov	r0, r4
   b7ea6:	f7ff fc66 	bl	b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7eaa:	1d28      	adds	r0, r5, #4
   b7eac:	f7fd fc2e 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7eb0:	3508      	adds	r5, #8
   b7eb2:	3408      	adds	r4, #8
   b7eb4:	e7f2      	b.n	b7e9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7eb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7eb8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7eba:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7ebc:	4605      	mov	r5, r0
        if (n > 0) {
   b7ebe:	dd11      	ble.n	b7ee4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7ec0:	00f0      	lsls	r0, r6, #3
   b7ec2:	f7fd faa9 	bl	b5418 <malloc>
            if (!d) {
   b7ec6:	4604      	mov	r4, r0
   b7ec8:	b158      	cbz	r0, b7ee2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7eca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7ece:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7ed2:	f7ff ffc7 	bl	b7e64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7ed6:	6828      	ldr	r0, [r5, #0]
   b7ed8:	f7fd faa6 	bl	b5428 <free>
        data_ = d;
   b7edc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7ede:	60ae      	str	r6, [r5, #8]
        return true;
   b7ee0:	2001      	movs	r0, #1
    }
   b7ee2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7ee4:	2400      	movs	r4, #0
   b7ee6:	e7f6      	b.n	b7ed6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eea:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7eec:	6845      	ldr	r5, [r0, #4]
   b7eee:	4668      	mov	r0, sp
   b7ef0:	f7ff fc41 	bl	b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ef4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7ef8:	4299      	cmp	r1, r3
   b7efa:	da10      	bge.n	b7f1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7efc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7efe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7f00:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7f04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7f08:	4629      	mov	r1, r5
   b7f0a:	f105 0008 	add.w	r0, r5, #8
   b7f0e:	f7ff ffa9 	bl	b7e64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7f12:	b98d      	cbnz	r5, b7f38 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7f14:	6863      	ldr	r3, [r4, #4]
   b7f16:	3301      	adds	r3, #1
   b7f18:	6063      	str	r3, [r4, #4]
    return true;
   b7f1a:	2601      	movs	r6, #1
   b7f1c:	e006      	b.n	b7f2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7f1e:	3101      	adds	r1, #1
   b7f20:	4620      	mov	r0, r4
   b7f22:	f7ff ffc9 	bl	b7eb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7f26:	4606      	mov	r6, r0
   b7f28:	2800      	cmp	r0, #0
   b7f2a:	d1e7      	bne.n	b7efc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7f2c:	a801      	add	r0, sp, #4
   b7f2e:	f7fd fbed 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7f32:	4630      	mov	r0, r6
   b7f34:	b002      	add	sp, #8
   b7f36:	bd70      	pop	{r4, r5, r6, pc}
   b7f38:	4669      	mov	r1, sp
   b7f3a:	4628      	mov	r0, r5
   b7f3c:	f7ff fc1b 	bl	b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7f40:	e7e8      	b.n	b7f14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7f42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7f42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f46:	4604      	mov	r4, r0
   b7f48:	460d      	mov	r5, r1
   b7f4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7f4c:	d914      	bls.n	b7f78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7f4e:	4290      	cmp	r0, r2
   b7f50:	d213      	bcs.n	b7f7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7f52:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7f56:	1a75      	subs	r5, r6, r1
   b7f58:	f1a1 0708 	sub.w	r7, r1, #8
   b7f5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7f5e:	42b7      	cmp	r7, r6
   b7f60:	d018      	beq.n	b7f94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7f62:	b11c      	cbz	r4, b7f6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7f64:	4631      	mov	r1, r6
   b7f66:	4620      	mov	r0, r4
   b7f68:	f7ff fbf7 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f6c:	1d30      	adds	r0, r6, #4
   b7f6e:	f7fd fbcd 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7f72:	3e08      	subs	r6, #8
   b7f74:	3c08      	subs	r4, #8
   b7f76:	e7f2      	b.n	b7f5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7f78:	d00c      	beq.n	b7f94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7f7a:	42b5      	cmp	r5, r6
   b7f7c:	d00a      	beq.n	b7f94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7f7e:	b11c      	cbz	r4, b7f88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7f80:	4629      	mov	r1, r5
   b7f82:	4620      	mov	r0, r4
   b7f84:	f7ff fbe9 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7f88:	1d28      	adds	r0, r5, #4
   b7f8a:	f7fd fbbf 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7f8e:	3508      	adds	r5, #8
   b7f90:	3408      	adds	r4, #8
   b7f92:	e7f2      	b.n	b7f7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7f96:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7f98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7f9a:	4605      	mov	r5, r0
        if (n > 0) {
   b7f9c:	dd11      	ble.n	b7fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7f9e:	00f0      	lsls	r0, r6, #3
   b7fa0:	f7fd fa3a 	bl	b5418 <malloc>
            if (!d) {
   b7fa4:	4604      	mov	r4, r0
   b7fa6:	b158      	cbz	r0, b7fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7fa8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7fac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7fb0:	f7ff ffc7 	bl	b7f42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7fb4:	6828      	ldr	r0, [r5, #0]
   b7fb6:	f7fd fa37 	bl	b5428 <free>
        data_ = d;
   b7fba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7fbc:	60ae      	str	r6, [r5, #8]
        return true;
   b7fbe:	2001      	movs	r0, #1
    }
   b7fc0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7fc2:	2400      	movs	r4, #0
   b7fc4:	e7f6      	b.n	b7fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7fc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7fc8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7fca:	6845      	ldr	r5, [r0, #4]
   b7fcc:	4668      	mov	r0, sp
   b7fce:	f7ff fbc4 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7fd2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7fd6:	4299      	cmp	r1, r3
   b7fd8:	da10      	bge.n	b7ffc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7fda:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7fdc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7fde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7fe2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7fe6:	4629      	mov	r1, r5
   b7fe8:	f105 0008 	add.w	r0, r5, #8
   b7fec:	f7ff ffa9 	bl	b7f42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7ff0:	b98d      	cbnz	r5, b8016 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7ff2:	6863      	ldr	r3, [r4, #4]
   b7ff4:	3301      	adds	r3, #1
   b7ff6:	6063      	str	r3, [r4, #4]
    return true;
   b7ff8:	2601      	movs	r6, #1
   b7ffa:	e006      	b.n	b800a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ffc:	3101      	adds	r1, #1
   b7ffe:	4620      	mov	r0, r4
   b8000:	f7ff ffc9 	bl	b7f96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8004:	4606      	mov	r6, r0
   b8006:	2800      	cmp	r0, #0
   b8008:	d1e7      	bne.n	b7fda <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b800a:	a801      	add	r0, sp, #4
   b800c:	f7fd fb7e 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8010:	4630      	mov	r0, r6
   b8012:	b002      	add	sp, #8
   b8014:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b8016:	4669      	mov	r1, sp
   b8018:	4628      	mov	r0, r5
   b801a:	f7ff fb9e 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b801e:	e7e8      	b.n	b7ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b8020 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b8020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8024:	4617      	mov	r7, r2
   b8026:	b0a1      	sub	sp, #132	; 0x84
   b8028:	4680      	mov	r8, r0
    WiringBleLock lk;
   b802a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b802c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b802e:	f7ff f833 	bl	b7098 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b8032:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b8034:	7923      	ldrb	r3, [r4, #4]
   b8036:	b953      	cbnz	r3, b804e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b8038:	4639      	mov	r1, r7
   b803a:	4640      	mov	r0, r8
   b803c:	f7ff fb8d 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b8040:	a80a      	add	r0, sp, #40	; 0x28
   b8042:	f7ff f837 	bl	b70b4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b8046:	4640      	mov	r0, r8
   b8048:	b021      	add	sp, #132	; 0x84
   b804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b804e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b8050:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b8054:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b8058:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b805a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b805e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b8062:	9b03      	ldr	r3, [sp, #12]
   b8064:	429d      	cmp	r5, r3
   b8066:	d021      	beq.n	b80ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b8068:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b806c:	4658      	mov	r0, fp
   b806e:	f109 0114 	add.w	r1, r9, #20
   b8072:	f7ff f8be 	bl	b71f2 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b8076:	b1b8      	cbz	r0, b80a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b8078:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b807c:	4650      	mov	r0, sl
   b807e:	f7ff f8b8 	bl	b71f2 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b8082:	b188      	cbz	r0, b80a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b8084:	6823      	ldr	r3, [r4, #0]
   b8086:	f8d9 2000 	ldr.w	r2, [r9]
   b808a:	4053      	eors	r3, r2
   b808c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b8090:	d10a      	bne.n	b80a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b8092:	2220      	movs	r2, #32
   b8094:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b8098:	4a5e      	ldr	r2, [pc, #376]	; (b8214 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b809a:	9200      	str	r2, [sp, #0]
   b809c:	aa15      	add	r2, sp, #84	; 0x54
   b809e:	495e      	ldr	r1, [pc, #376]	; (b8218 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b80a0:	2032      	movs	r0, #50	; 0x32
   b80a2:	f7fd f90d 	bl	b52c0 <log_message>
   b80a6:	e7c7      	b.n	b8038 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b80a8:	3508      	adds	r5, #8
   b80aa:	e7da      	b.n	b8062 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b80ac:	4650      	mov	r0, sl
   b80ae:	f7ff f871 	bl	b7194 <_ZNK8particle7BleUuid7isValidEv>
   b80b2:	b960      	cbnz	r0, b80ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b80b4:	4959      	ldr	r1, [pc, #356]	; (b821c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b80b6:	2201      	movs	r2, #1
   b80b8:	a815      	add	r0, sp, #84	; 0x54
   b80ba:	ad15      	add	r5, sp, #84	; 0x54
   b80bc:	f7ff f842 	bl	b7144 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b80c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b80c2:	46d4      	mov	ip, sl
   b80c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b80c8:	682b      	ldr	r3, [r5, #0]
   b80ca:	f8cc 3000 	str.w	r3, [ip]
   b80ce:	6833      	ldr	r3, [r6, #0]
   b80d0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b80d4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b80d8:	455d      	cmp	r5, fp
   b80da:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b80dc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b80de:	d06e      	beq.n	b81be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b80e0:	f855 0b08 	ldr.w	r0, [r5], #8
   b80e4:	f7ff f885 	bl	b71f2 <_ZNK8particle7BleUuideqERKS0_>
   b80e8:	2800      	cmp	r0, #0
   b80ea:	d0f5      	beq.n	b80d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b80ec:	f104 0a14 	add.w	sl, r4, #20
   b80f0:	4650      	mov	r0, sl
   b80f2:	f7ff f84f 	bl	b7194 <_ZNK8particle7BleUuid7isValidEv>
   b80f6:	b988      	cbnz	r0, b811c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b80f8:	4b49      	ldr	r3, [pc, #292]	; (b8220 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b80fa:	4948      	ldr	r1, [pc, #288]	; (b821c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b80fc:	881a      	ldrh	r2, [r3, #0]
   b80fe:	3201      	adds	r2, #1
   b8100:	b292      	uxth	r2, r2
   b8102:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b8104:	a815      	add	r0, sp, #84	; 0x54
   b8106:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b8108:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b810a:	f7ff f83a 	bl	b7182 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b810e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8110:	46d4      	mov	ip, sl
   b8112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8116:	682b      	ldr	r3, [r5, #0]
   b8118:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b811c:	4b41      	ldr	r3, [pc, #260]	; (b8224 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b811e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b8120:	2228      	movs	r2, #40	; 0x28
   b8122:	2100      	movs	r1, #0
   b8124:	a816      	add	r0, sp, #88	; 0x58
   b8126:	f000 fc4b 	bl	b89c0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b812a:	4651      	mov	r1, sl
   b812c:	a804      	add	r0, sp, #16
   b812e:	f7ff f843 	bl	b71b8 <_ZN8particle7BleUuid7halUUIDEv>
   b8132:	ab04      	add	r3, sp, #16
   b8134:	aa18      	add	r2, sp, #96	; 0x60
   b8136:	f10d 0c20 	add.w	ip, sp, #32
   b813a:	6818      	ldr	r0, [r3, #0]
   b813c:	6859      	ldr	r1, [r3, #4]
   b813e:	4615      	mov	r5, r2
   b8140:	c503      	stmia	r5!, {r0, r1}
   b8142:	3308      	adds	r3, #8
   b8144:	4563      	cmp	r3, ip
   b8146:	462a      	mov	r2, r5
   b8148:	d1f7      	bne.n	b813a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b814a:	6818      	ldr	r0, [r3, #0]
   b814c:	6028      	str	r0, [r5, #0]
    return value_;
   b814e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b8150:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b8154:	f8d9 3000 	ldr.w	r3, [r9]
   b8158:	8a9b      	ldrh	r3, [r3, #20]
   b815a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b815e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8160:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b8162:	4b31      	ldr	r3, [pc, #196]	; (b8228 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b8164:	2200      	movs	r2, #0
   b8166:	1da1      	adds	r1, r4, #6
   b8168:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b816a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b816e:	f7fd f81f 	bl	b51b0 <hal_ble_gatt_server_add_characteristic>
   b8172:	2800      	cmp	r0, #0
   b8174:	f47f af60 	bne.w	b8038 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b8178:	2301      	movs	r3, #1
   b817a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b817c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b817e:	4639      	mov	r1, r7
        return characteristics_;
   b8180:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b8182:	a80d      	add	r0, sp, #52	; 0x34
   b8184:	f7ff fae9 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8188:	4620      	mov	r0, r4
   b818a:	a90d      	add	r1, sp, #52	; 0x34
   b818c:	f7ff ff1b 	bl	b7fc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b8190:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b8192:	a80e      	add	r0, sp, #56	; 0x38
   b8194:	f7fd faba 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8198:	2c00      	cmp	r4, #0
   b819a:	f47f af4d 	bne.w	b8038 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b819e:	2320      	movs	r3, #32
   b81a0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b81a4:	4b21      	ldr	r3, [pc, #132]	; (b822c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b81a6:	9300      	str	r3, [sp, #0]
   b81a8:	aa0d      	add	r2, sp, #52	; 0x34
   b81aa:	4623      	mov	r3, r4
   b81ac:	e777      	b.n	b809e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b81ae:	4639      	mov	r1, r7
   b81b0:	4640      	mov	r0, r8
   b81b2:	f7ff fad2 	bl	b775a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b81b6:	a80c      	add	r0, sp, #48	; 0x30
   b81b8:	f7fd faa8 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81bc:	e740      	b.n	b8040 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b81be:	a80b      	add	r0, sp, #44	; 0x2c
   b81c0:	f7ff f94e 	bl	b7460 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b81c4:	4651      	mov	r1, sl
   b81c6:	a815      	add	r0, sp, #84	; 0x54
   b81c8:	f7fe fff6 	bl	b71b8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b81cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b81ce:	2300      	movs	r3, #0
   b81d0:	3214      	adds	r2, #20
   b81d2:	a915      	add	r1, sp, #84	; 0x54
   b81d4:	2001      	movs	r0, #1
   b81d6:	f7fc ffc3 	bl	b5160 <hal_ble_gatt_server_add_service>
   b81da:	2800      	cmp	r0, #0
   b81dc:	d1e7      	bne.n	b81ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b81de:	6835      	ldr	r5, [r6, #0]
   b81e0:	a90b      	add	r1, sp, #44	; 0x2c
   b81e2:	a80d      	add	r0, sp, #52	; 0x34
   b81e4:	f7ff fac7 	bl	b7776 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b81e8:	4628      	mov	r0, r5
   b81ea:	a90d      	add	r1, sp, #52	; 0x34
   b81ec:	f7ff fe7c 	bl	b7ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b81f0:	4605      	mov	r5, r0
   b81f2:	a80e      	add	r0, sp, #56	; 0x38
   b81f4:	f7fd fa8a 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81f8:	2d00      	cmp	r5, #0
   b81fa:	d0d8      	beq.n	b81ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b81fc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b81fe:	6853      	ldr	r3, [r2, #4]
   b8200:	6812      	ldr	r2, [r2, #0]
   b8202:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b8206:	3b01      	subs	r3, #1
   b8208:	a80c      	add	r0, sp, #48	; 0x30
   b820a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b820e:	f7fd fa7d 	bl	b570c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8212:	e76b      	b.n	b80ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b8214:	000b90a5 	.word	0x000b90a5
   b8218:	000b8fe7 	.word	0x000b8fe7
   b821c:	000b914c 	.word	0x000b914c
   b8220:	2003e6f8 	.word	0x2003e6f8
   b8224:	002c0003 	.word	0x002c0003
   b8228:	000b75f9 	.word	0x000b75f9
   b822c:	000b90d0 	.word	0x000b90d0

000b8230 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8230:	4802      	ldr	r0, [pc, #8]	; (b823c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8232:	2300      	movs	r3, #0
   b8234:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8236:	f7fc bf49 	b.w	b50cc <os_mutex_recursive_create>
   b823a:	bf00      	nop
   b823c:	2003e6fc 	.word	0x2003e6fc

000b8240 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8240:	4770      	bx	lr

000b8242 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8242:	7441      	strb	r1, [r0, #17]
}
   b8244:	4770      	bx	lr

000b8246 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8246:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8248:	7c00      	ldrb	r0, [r0, #16]
   b824a:	f7fc ff1f 	bl	b508c <hal_usart_available_data_for_write>
}
   b824e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8252:	bd08      	pop	{r3, pc}

000b8254 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8254:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8256:	7c00      	ldrb	r0, [r0, #16]
   b8258:	f7fc fef0 	bl	b503c <hal_usart_available>
}
   b825c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8260:	bd08      	pop	{r3, pc}

000b8262 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8262:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8264:	7c00      	ldrb	r0, [r0, #16]
   b8266:	f7fc fef9 	bl	b505c <hal_usart_peek>
}
   b826a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b826e:	bd08      	pop	{r3, pc}

000b8270 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8270:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8272:	7c00      	ldrb	r0, [r0, #16]
   b8274:	f7fc feea 	bl	b504c <hal_usart_read>
}
   b8278:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b827c:	bd08      	pop	{r3, pc}

000b827e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b827e:	7c00      	ldrb	r0, [r0, #16]
   b8280:	f7fc bef4 	b.w	b506c <hal_usart_flush>

000b8284 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8284:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8286:	7c45      	ldrb	r5, [r0, #17]
{
   b8288:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b828a:	b12d      	cbz	r5, b8298 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b828c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b828e:	b003      	add	sp, #12
   b8290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8294:	f7fc beca 	b.w	b502c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8298:	7c00      	ldrb	r0, [r0, #16]
   b829a:	9101      	str	r1, [sp, #4]
   b829c:	f7fc fef6 	bl	b508c <hal_usart_available_data_for_write>
   b82a0:	2800      	cmp	r0, #0
   b82a2:	9901      	ldr	r1, [sp, #4]
   b82a4:	dcf2      	bgt.n	b828c <_ZN11USARTSerial5writeEh+0x8>
}
   b82a6:	4628      	mov	r0, r5
   b82a8:	b003      	add	sp, #12
   b82aa:	bd30      	pop	{r4, r5, pc}

000b82ac <_ZN11USARTSerialD0Ev>:
   b82ac:	b510      	push	{r4, lr}
   b82ae:	2114      	movs	r1, #20
   b82b0:	4604      	mov	r4, r0
   b82b2:	f7fc fb24 	bl	b48fe <_ZdlPvj>
   b82b6:	4620      	mov	r0, r4
   b82b8:	bd10      	pop	{r4, pc}
	...

000b82bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b82bc:	b510      	push	{r4, lr}
   b82be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b82c2:	4604      	mov	r4, r0
   b82c4:	4608      	mov	r0, r1
   b82c6:	4611      	mov	r1, r2
   b82c8:	2200      	movs	r2, #0
   b82ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b82ce:	4b04      	ldr	r3, [pc, #16]	; (b82e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b82d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b82d2:	2301      	movs	r3, #1
  _serial = serial;
   b82d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b82d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b82d8:	f7fc fee8 	bl	b50ac <hal_usart_init_ex>
}
   b82dc:	4620      	mov	r0, r4
   b82de:	bd10      	pop	{r4, pc}
   b82e0:	000b9174 	.word	0x000b9174

000b82e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b82e4:	7c00      	ldrb	r0, [r0, #16]
   b82e6:	2300      	movs	r3, #0
   b82e8:	f7fc bed8 	b.w	b509c <hal_usart_begin_config>

000b82ec <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b82ec:	2200      	movs	r2, #0
   b82ee:	f7ff bff9 	b.w	b82e4 <_ZN11USARTSerial5beginEmm>

000b82f2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b82f2:	7c00      	ldrb	r0, [r0, #16]
   b82f4:	f7fc be92 	b.w	b501c <hal_usart_end>

000b82f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b82f8:	4b05      	ldr	r3, [pc, #20]	; (b8310 <_GLOBAL__sub_I_System+0x18>)
   b82fa:	2202      	movs	r2, #2
   b82fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b82fe:	4b05      	ldr	r3, [pc, #20]	; (b8314 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8300:	4a05      	ldr	r2, [pc, #20]	; (b8318 <_GLOBAL__sub_I_System+0x20>)
   b8302:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8304:	2000      	movs	r0, #0
   b8306:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b830a:	f7fd b869 	b.w	b53e0 <set_system_mode>
   b830e:	bf00      	nop
   b8310:	2003e710 	.word	0x2003e710
   b8314:	2003e704 	.word	0x2003e704
   b8318:	ffff0000 	.word	0xffff0000

000b831c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b831c:	b510      	push	{r4, lr}
   b831e:	4604      	mov	r4, r0
   b8320:	4608      	mov	r0, r1
{
    _spi = spi;
   b8322:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b8324:	f7fc fe32 	bl	b4f8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b8328:	2300      	movs	r3, #0
   b832a:	6063      	str	r3, [r4, #4]
}
   b832c:	4620      	mov	r0, r4
   b832e:	bd10      	pop	{r4, pc}

000b8330 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8330:	2200      	movs	r2, #0
   b8332:	6840      	ldr	r0, [r0, #4]
   b8334:	4611      	mov	r1, r2
   b8336:	f7fd b82b 	b.w	b5390 <network_listening>

000b833a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b833a:	2200      	movs	r2, #0
   b833c:	6840      	ldr	r0, [r0, #4]
   b833e:	4611      	mov	r1, r2
   b8340:	f7fd b836 	b.w	b53b0 <network_get_listen_timeout>

000b8344 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8344:	6840      	ldr	r0, [r0, #4]
   b8346:	2200      	movs	r2, #0
   b8348:	f7fd b82a 	b.w	b53a0 <network_set_listen_timeout>

000b834c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b834c:	6840      	ldr	r0, [r0, #4]
   b834e:	2200      	movs	r2, #0
   b8350:	f081 0101 	eor.w	r1, r1, #1
   b8354:	f7fd b814 	b.w	b5380 <network_listen>

000b8358 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8358:	2300      	movs	r3, #0
   b835a:	6840      	ldr	r0, [r0, #4]
   b835c:	461a      	mov	r2, r3
   b835e:	4619      	mov	r1, r3
   b8360:	f7fd b806 	b.w	b5370 <network_off>

000b8364 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8364:	2300      	movs	r3, #0
   b8366:	6840      	ldr	r0, [r0, #4]
   b8368:	461a      	mov	r2, r3
   b836a:	4619      	mov	r1, r3
   b836c:	f7fc bff8 	b.w	b5360 <network_on>

000b8370 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8370:	2200      	movs	r2, #0
   b8372:	6840      	ldr	r0, [r0, #4]
   b8374:	4611      	mov	r1, r2
   b8376:	f7fc bfeb 	b.w	b5350 <network_ready>

000b837a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b837a:	2200      	movs	r2, #0
   b837c:	6840      	ldr	r0, [r0, #4]
   b837e:	4611      	mov	r1, r2
   b8380:	f7fc bfd6 	b.w	b5330 <network_connecting>

000b8384 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8384:	6840      	ldr	r0, [r0, #4]
   b8386:	2200      	movs	r2, #0
   b8388:	2102      	movs	r1, #2
   b838a:	f7fc bfd9 	b.w	b5340 <network_disconnect>

000b838e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b838e:	2300      	movs	r3, #0
   b8390:	6840      	ldr	r0, [r0, #4]
   b8392:	461a      	mov	r2, r3
   b8394:	f7fc bfc4 	b.w	b5320 <network_connect>

000b8398 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8398:	4b02      	ldr	r3, [pc, #8]	; (b83a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b839a:	2203      	movs	r2, #3
   b839c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b839e:	4a02      	ldr	r2, [pc, #8]	; (b83a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b83a0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b83a2:	4770      	bx	lr
   b83a4:	2003e714 	.word	0x2003e714
   b83a8:	000b91a4 	.word	0x000b91a4

000b83ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b83ac:	b510      	push	{r4, lr}
   b83ae:	4604      	mov	r4, r0
{
	free(buffer);
   b83b0:	6800      	ldr	r0, [r0, #0]
   b83b2:	f7fd f839 	bl	b5428 <free>
}
   b83b6:	4620      	mov	r0, r4
   b83b8:	bd10      	pop	{r4, pc}

000b83ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b83ba:	b510      	push	{r4, lr}
   b83bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b83be:	6800      	ldr	r0, [r0, #0]
   b83c0:	b108      	cbz	r0, b83c6 <_ZN6String10invalidateEv+0xc>
   b83c2:	f7fd f831 	bl	b5428 <free>
	buffer = NULL;
   b83c6:	2300      	movs	r3, #0
	capacity = len = 0;
   b83c8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b83cc:	6023      	str	r3, [r4, #0]
}
   b83ce:	bd10      	pop	{r4, pc}

000b83d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b83d0:	b538      	push	{r3, r4, r5, lr}
   b83d2:	4604      	mov	r4, r0
   b83d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b83d6:	6800      	ldr	r0, [r0, #0]
   b83d8:	3101      	adds	r1, #1
   b83da:	f7fd f82d 	bl	b5438 <realloc>
	if (newbuffer) {
   b83de:	b110      	cbz	r0, b83e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b83e0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b83e4:	2001      	movs	r0, #1
	}
	return 0;
}
   b83e6:	bd38      	pop	{r3, r4, r5, pc}

000b83e8 <_ZN6String7reserveEj>:
{
   b83e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b83ea:	6803      	ldr	r3, [r0, #0]
{
   b83ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b83ee:	b123      	cbz	r3, b83fa <_ZN6String7reserveEj+0x12>
   b83f0:	6843      	ldr	r3, [r0, #4]
   b83f2:	428b      	cmp	r3, r1
   b83f4:	d301      	bcc.n	b83fa <_ZN6String7reserveEj+0x12>
   b83f6:	2001      	movs	r0, #1
}
   b83f8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b83fa:	4620      	mov	r0, r4
   b83fc:	f7ff ffe8 	bl	b83d0 <_ZN6String12changeBufferEj>
   b8400:	2800      	cmp	r0, #0
   b8402:	d0f9      	beq.n	b83f8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8404:	68a3      	ldr	r3, [r4, #8]
   b8406:	2b00      	cmp	r3, #0
   b8408:	d1f5      	bne.n	b83f6 <_ZN6String7reserveEj+0xe>
   b840a:	6822      	ldr	r2, [r4, #0]
   b840c:	7013      	strb	r3, [r2, #0]
   b840e:	e7f2      	b.n	b83f6 <_ZN6String7reserveEj+0xe>

000b8410 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8410:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8412:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8414:	4611      	mov	r1, r2
   b8416:	9201      	str	r2, [sp, #4]
{
   b8418:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b841a:	f7ff ffe5 	bl	b83e8 <_ZN6String7reserveEj>
   b841e:	9a01      	ldr	r2, [sp, #4]
   b8420:	b928      	cbnz	r0, b842e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8422:	4620      	mov	r0, r4
   b8424:	f7ff ffc9 	bl	b83ba <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8428:	4620      	mov	r0, r4
   b842a:	b003      	add	sp, #12
   b842c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b842e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8430:	4629      	mov	r1, r5
   b8432:	6820      	ldr	r0, [r4, #0]
   b8434:	f000 fa9c 	bl	b8970 <memcpy>
	buffer[len] = 0;
   b8438:	6822      	ldr	r2, [r4, #0]
   b843a:	68a3      	ldr	r3, [r4, #8]
   b843c:	2100      	movs	r1, #0
   b843e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8440:	e7f2      	b.n	b8428 <_ZN6String4copyEPKcj+0x18>

000b8442 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8442:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8444:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8446:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b844a:	4604      	mov	r4, r0
	len = 0;
   b844c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b844e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8450:	b141      	cbz	r1, b8464 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8452:	4608      	mov	r0, r1
   b8454:	9101      	str	r1, [sp, #4]
   b8456:	f7fc fa0b 	bl	b4870 <strlen>
   b845a:	9901      	ldr	r1, [sp, #4]
   b845c:	4602      	mov	r2, r0
   b845e:	4620      	mov	r0, r4
   b8460:	f7ff ffd6 	bl	b8410 <_ZN6String4copyEPKcj>
}
   b8464:	4620      	mov	r0, r4
   b8466:	b002      	add	sp, #8
   b8468:	bd10      	pop	{r4, pc}

000b846a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b846a:	b538      	push	{r3, r4, r5, lr}
   b846c:	4605      	mov	r5, r0
	if (buffer) {
   b846e:	6800      	ldr	r0, [r0, #0]
{
   b8470:	460c      	mov	r4, r1
	if (buffer) {
   b8472:	b168      	cbz	r0, b8490 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8474:	686a      	ldr	r2, [r5, #4]
   b8476:	688b      	ldr	r3, [r1, #8]
   b8478:	429a      	cmp	r2, r3
   b847a:	d307      	bcc.n	b848c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b847c:	6809      	ldr	r1, [r1, #0]
   b847e:	f000 faec 	bl	b8a5a <strcpy>
			len = rhs.len;
   b8482:	68a3      	ldr	r3, [r4, #8]
   b8484:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8486:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8488:	60a3      	str	r3, [r4, #8]
}
   b848a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b848c:	f7fc ffcc 	bl	b5428 <free>
	buffer = rhs.buffer;
   b8490:	6823      	ldr	r3, [r4, #0]
   b8492:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8494:	6863      	ldr	r3, [r4, #4]
   b8496:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8498:	68a3      	ldr	r3, [r4, #8]
   b849a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b849c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b849e:	e9c4 3300 	strd	r3, r3, [r4]
   b84a2:	e7f1      	b.n	b8488 <_ZN6String4moveERS_+0x1e>

000b84a4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b84a4:	b510      	push	{r4, lr}
	buffer = NULL;
   b84a6:	2300      	movs	r3, #0
	capacity = 0;
   b84a8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b84ac:	4604      	mov	r4, r0
	len = 0;
   b84ae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b84b0:	7303      	strb	r3, [r0, #12]
	move(rval);
   b84b2:	f7ff ffda 	bl	b846a <_ZN6String4moveERS_>
}
   b84b6:	4620      	mov	r0, r4
   b84b8:	bd10      	pop	{r4, pc}

000b84ba <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b84ba:	4288      	cmp	r0, r1
{
   b84bc:	b510      	push	{r4, lr}
   b84be:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b84c0:	d005      	beq.n	b84ce <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b84c2:	680b      	ldr	r3, [r1, #0]
   b84c4:	b12b      	cbz	r3, b84d2 <_ZN6StringaSERKS_+0x18>
   b84c6:	688a      	ldr	r2, [r1, #8]
   b84c8:	4619      	mov	r1, r3
   b84ca:	f7ff ffa1 	bl	b8410 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b84ce:	4620      	mov	r0, r4
   b84d0:	bd10      	pop	{r4, pc}
	else invalidate();
   b84d2:	f7ff ff72 	bl	b83ba <_ZN6String10invalidateEv>
   b84d6:	e7fa      	b.n	b84ce <_ZN6StringaSERKS_+0x14>

000b84d8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b84d8:	b510      	push	{r4, lr}
	buffer = NULL;
   b84da:	2300      	movs	r3, #0
String::String(const String &value)
   b84dc:	4604      	mov	r4, r0
	capacity = 0;
   b84de:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b84e2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b84e4:	7303      	strb	r3, [r0, #12]
	*this = value;
   b84e6:	f7ff ffe8 	bl	b84ba <_ZN6StringaSERKS_>
}
   b84ea:	4620      	mov	r0, r4
   b84ec:	bd10      	pop	{r4, pc}

000b84ee <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b84ee:	b513      	push	{r0, r1, r4, lr}
   b84f0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b84f2:	b159      	cbz	r1, b850c <_ZN6StringaSEPKc+0x1e>
   b84f4:	4608      	mov	r0, r1
   b84f6:	9101      	str	r1, [sp, #4]
   b84f8:	f7fc f9ba 	bl	b4870 <strlen>
   b84fc:	9901      	ldr	r1, [sp, #4]
   b84fe:	4602      	mov	r2, r0
   b8500:	4620      	mov	r0, r4
   b8502:	f7ff ff85 	bl	b8410 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8506:	4620      	mov	r0, r4
   b8508:	b002      	add	sp, #8
   b850a:	bd10      	pop	{r4, pc}
	else invalidate();
   b850c:	f7ff ff55 	bl	b83ba <_ZN6String10invalidateEv>
   b8510:	e7f9      	b.n	b8506 <_ZN6StringaSEPKc+0x18>

000b8512 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8512:	4770      	bx	lr

000b8514 <_Z17acquireWireBufferv>:
{
   b8514:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8516:	4b0a      	ldr	r3, [pc, #40]	; (b8540 <_Z17acquireWireBufferv+0x2c>)
   b8518:	6003      	str	r3, [r0, #0]
   b851a:	2301      	movs	r3, #1
{
   b851c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b851e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8520:	4908      	ldr	r1, [pc, #32]	; (b8544 <_Z17acquireWireBufferv+0x30>)
   b8522:	2020      	movs	r0, #32
   b8524:	f000 f8ef 	bl	b8706 <_ZnajRKSt9nothrow_t>
	};
   b8528:	2520      	movs	r5, #32
   b852a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b852c:	4905      	ldr	r1, [pc, #20]	; (b8544 <_Z17acquireWireBufferv+0x30>)
	};
   b852e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8530:	4628      	mov	r0, r5
   b8532:	f000 f8e8 	bl	b8706 <_ZnajRKSt9nothrow_t>
	};
   b8536:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b853a:	4620      	mov	r0, r4
   b853c:	bd38      	pop	{r3, r4, r5, pc}
   b853e:	bf00      	nop
   b8540:	00010018 	.word	0x00010018
   b8544:	000b91d8 	.word	0x000b91d8

000b8548 <_Z19__fetch_global_Wirev>:
{
   b8548:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b854a:	4d0e      	ldr	r5, [pc, #56]	; (b8584 <_Z19__fetch_global_Wirev+0x3c>)
   b854c:	7829      	ldrb	r1, [r5, #0]
   b854e:	f3bf 8f5b 	dmb	ish
   b8552:	f011 0401 	ands.w	r4, r1, #1
{
   b8556:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8558:	d111      	bne.n	b857e <_Z19__fetch_global_Wirev+0x36>
   b855a:	4628      	mov	r0, r5
   b855c:	f7fc f9de 	bl	b491c <__cxa_guard_acquire>
   b8560:	b168      	cbz	r0, b857e <_Z19__fetch_global_Wirev+0x36>
   b8562:	4668      	mov	r0, sp
   b8564:	f7ff ffd6 	bl	b8514 <_Z17acquireWireBufferv>
   b8568:	466a      	mov	r2, sp
   b856a:	4621      	mov	r1, r4
   b856c:	4806      	ldr	r0, [pc, #24]	; (b8588 <_Z19__fetch_global_Wirev+0x40>)
   b856e:	f7fd f8af 	bl	b56d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8572:	4628      	mov	r0, r5
   b8574:	f7fc f9d7 	bl	b4926 <__cxa_guard_release>
   b8578:	4804      	ldr	r0, [pc, #16]	; (b858c <_Z19__fetch_global_Wirev+0x44>)
   b857a:	f000 f9db 	bl	b8934 <atexit>
	return wire;
}
   b857e:	4802      	ldr	r0, [pc, #8]	; (b8588 <_Z19__fetch_global_Wirev+0x40>)
   b8580:	b007      	add	sp, #28
   b8582:	bd30      	pop	{r4, r5, pc}
   b8584:	2003e71c 	.word	0x2003e71c
   b8588:	2003e720 	.word	0x2003e720
   b858c:	000b8513 	.word	0x000b8513

000b8590 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8590:	4770      	bx	lr
	...

000b8594 <_Z20acquireSerial1Bufferv>:
{
   b8594:	b538      	push	{r3, r4, r5, lr}
   b8596:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8598:	2514      	movs	r5, #20
   b859a:	462a      	mov	r2, r5
   b859c:	2100      	movs	r1, #0
   b859e:	f000 fa0f 	bl	b89c0 <memset>
   b85a2:	8025      	strh	r5, [r4, #0]
   b85a4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b85a6:	4907      	ldr	r1, [pc, #28]	; (b85c4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b85a8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b85aa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b85ac:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b85ae:	f000 f8aa 	bl	b8706 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b85b2:	4904      	ldr	r1, [pc, #16]	; (b85c4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b85b4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b85b6:	4628      	mov	r0, r5
   b85b8:	f000 f8a5 	bl	b8706 <_ZnajRKSt9nothrow_t>
    };
   b85bc:	60e0      	str	r0, [r4, #12]
}
   b85be:	4620      	mov	r0, r4
   b85c0:	bd38      	pop	{r3, r4, r5, pc}
   b85c2:	bf00      	nop
   b85c4:	000b91d8 	.word	0x000b91d8

000b85c8 <_Z22__fetch_global_Serial1v>:
{
   b85c8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b85ca:	4d0e      	ldr	r5, [pc, #56]	; (b8604 <_Z22__fetch_global_Serial1v+0x3c>)
   b85cc:	7829      	ldrb	r1, [r5, #0]
   b85ce:	f3bf 8f5b 	dmb	ish
   b85d2:	f011 0401 	ands.w	r4, r1, #1
{
   b85d6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b85d8:	d111      	bne.n	b85fe <_Z22__fetch_global_Serial1v+0x36>
   b85da:	4628      	mov	r0, r5
   b85dc:	f7fc f99e 	bl	b491c <__cxa_guard_acquire>
   b85e0:	b168      	cbz	r0, b85fe <_Z22__fetch_global_Serial1v+0x36>
   b85e2:	a801      	add	r0, sp, #4
   b85e4:	f7ff ffd6 	bl	b8594 <_Z20acquireSerial1Bufferv>
   b85e8:	aa01      	add	r2, sp, #4
   b85ea:	4621      	mov	r1, r4
   b85ec:	4806      	ldr	r0, [pc, #24]	; (b8608 <_Z22__fetch_global_Serial1v+0x40>)
   b85ee:	f7ff fe65 	bl	b82bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b85f2:	4628      	mov	r0, r5
   b85f4:	f7fc f997 	bl	b4926 <__cxa_guard_release>
   b85f8:	4804      	ldr	r0, [pc, #16]	; (b860c <_Z22__fetch_global_Serial1v+0x44>)
   b85fa:	f000 f99b 	bl	b8934 <atexit>
    return serial1;
}
   b85fe:	4802      	ldr	r0, [pc, #8]	; (b8608 <_Z22__fetch_global_Serial1v+0x40>)
   b8600:	b007      	add	sp, #28
   b8602:	bd30      	pop	{r4, r5, pc}
   b8604:	2003e738 	.word	0x2003e738
   b8608:	2003e73c 	.word	0x2003e73c
   b860c:	000b8591 	.word	0x000b8591

000b8610 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8610:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8612:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8614:	d902      	bls.n	b861c <pinAvailable+0xc>
    return false;
   b8616:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8618:	b002      	add	sp, #8
   b861a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b861c:	f1a0 030b 	sub.w	r3, r0, #11
   b8620:	2b02      	cmp	r3, #2
   b8622:	d81a      	bhi.n	b865a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8624:	4c17      	ldr	r4, [pc, #92]	; (b8684 <pinAvailable+0x74>)
   b8626:	7821      	ldrb	r1, [r4, #0]
   b8628:	f3bf 8f5b 	dmb	ish
   b862c:	f011 0101 	ands.w	r1, r1, #1
   b8630:	d10b      	bne.n	b864a <pinAvailable+0x3a>
   b8632:	4620      	mov	r0, r4
   b8634:	9101      	str	r1, [sp, #4]
   b8636:	f7fc f971 	bl	b491c <__cxa_guard_acquire>
   b863a:	9901      	ldr	r1, [sp, #4]
   b863c:	b128      	cbz	r0, b864a <pinAvailable+0x3a>
   b863e:	4812      	ldr	r0, [pc, #72]	; (b8688 <pinAvailable+0x78>)
   b8640:	f7ff fe6c 	bl	b831c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8644:	4620      	mov	r0, r4
   b8646:	f7fc f96e 	bl	b4926 <__cxa_guard_release>
   b864a:	4b0f      	ldr	r3, [pc, #60]	; (b8688 <pinAvailable+0x78>)
   b864c:	7818      	ldrb	r0, [r3, #0]
   b864e:	f7fc fca5 	bl	b4f9c <hal_spi_is_enabled>
   b8652:	2800      	cmp	r0, #0
   b8654:	d1df      	bne.n	b8616 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8656:	2001      	movs	r0, #1
   b8658:	e7de      	b.n	b8618 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b865a:	2801      	cmp	r0, #1
   b865c:	d809      	bhi.n	b8672 <pinAvailable+0x62>
   b865e:	f7ff ff73 	bl	b8548 <_Z19__fetch_global_Wirev>
   b8662:	2100      	movs	r1, #0
   b8664:	7c00      	ldrb	r0, [r0, #16]
   b8666:	f7fc fcc9 	bl	b4ffc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b866a:	f080 0001 	eor.w	r0, r0, #1
   b866e:	b2c0      	uxtb	r0, r0
   b8670:	e7d2      	b.n	b8618 <pinAvailable+0x8>
   b8672:	3809      	subs	r0, #9
   b8674:	2801      	cmp	r0, #1
   b8676:	d8ee      	bhi.n	b8656 <pinAvailable+0x46>
   b8678:	f7ff ffa6 	bl	b85c8 <_Z22__fetch_global_Serial1v>
   b867c:	7c00      	ldrb	r0, [r0, #16]
   b867e:	f7fc fcfd 	bl	b507c <hal_usart_is_enabled>
   b8682:	e7f2      	b.n	b866a <pinAvailable+0x5a>
   b8684:	2003e750 	.word	0x2003e750
   b8688:	2003e754 	.word	0x2003e754

000b868c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b868c:	2823      	cmp	r0, #35	; 0x23
{
   b868e:	b538      	push	{r3, r4, r5, lr}
   b8690:	4604      	mov	r4, r0
   b8692:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8694:	d80a      	bhi.n	b86ac <pinMode+0x20>
   b8696:	29ff      	cmp	r1, #255	; 0xff
   b8698:	d008      	beq.n	b86ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b869a:	f7ff ffb9 	bl	b8610 <pinAvailable>
   b869e:	b128      	cbz	r0, b86ac <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b86a0:	4629      	mov	r1, r5
   b86a2:	4620      	mov	r0, r4
}
   b86a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b86a8:	f7fc bdd2 	b.w	b5250 <hal_gpio_mode>
}
   b86ac:	bd38      	pop	{r3, r4, r5, pc}

000b86ae <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b86ae:	b510      	push	{r4, lr}
   b86b0:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b86b2:	f7fc fdd5 	bl	b5260 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b86b6:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b86b8:	b2db      	uxtb	r3, r3
   b86ba:	2b01      	cmp	r3, #1
   b86bc:	d908      	bls.n	b86d0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b86be:	4620      	mov	r0, r4
   b86c0:	f7ff ffa6 	bl	b8610 <pinAvailable>
   b86c4:	b120      	cbz	r0, b86d0 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b86c6:	4620      	mov	r0, r4
}
   b86c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b86cc:	f7fc bdd0 	b.w	b5270 <hal_gpio_read>
}
   b86d0:	2000      	movs	r0, #0
   b86d2:	bd10      	pop	{r4, pc}

000b86d4 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b86d4:	280d      	cmp	r0, #13
{
   b86d6:	b510      	push	{r4, lr}
   b86d8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b86da:	bf9c      	itt	ls
   b86dc:	340e      	addls	r4, #14
   b86de:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b86e0:	4620      	mov	r0, r4
   b86e2:	f7ff ff95 	bl	b8610 <pinAvailable>
   b86e6:	b150      	cbz	r0, b86fe <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b86e8:	2103      	movs	r1, #3
   b86ea:	4620      	mov	r0, r4
   b86ec:	f7fc fda8 	bl	b5240 <hal_pin_validate_function>
   b86f0:	2803      	cmp	r0, #3
   b86f2:	d104      	bne.n	b86fe <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b86f4:	4620      	mov	r0, r4
}
   b86f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b86fa:	f7fc bdc1 	b.w	b5280 <hal_adc_read>
}
   b86fe:	2000      	movs	r0, #0
   b8700:	bd10      	pop	{r4, pc}

000b8702 <_ZnwjRKSt9nothrow_t>:
   b8702:	f7fc b8f8 	b.w	b48f6 <_Znwj>

000b8706 <_ZnajRKSt9nothrow_t>:
   b8706:	f7fc b8f8 	b.w	b48fa <_Znaj>

000b870a <_ZSt25__throw_bad_function_callv>:
   b870a:	b508      	push	{r3, lr}
   b870c:	f7fc fea4 	bl	b5458 <abort>

000b8710 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8710:	4901      	ldr	r1, [pc, #4]	; (b8718 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8712:	f000 b8f9 	b.w	b8908 <_ZNKSt9type_infoeqERKS_>
   b8716:	bf00      	nop
   b8718:	000b91f4 	.word	0x000b91f4

000b871c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b871c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b871e:	2400      	movs	r4, #0
   b8720:	2310      	movs	r3, #16
   b8722:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8726:	6803      	ldr	r3, [r0, #0]
   b8728:	4615      	mov	r5, r2
   b872a:	699e      	ldr	r6, [r3, #24]
   b872c:	6812      	ldr	r2, [r2, #0]
   b872e:	466b      	mov	r3, sp
   b8730:	e9cd 4400 	strd	r4, r4, [sp]
   b8734:	47b0      	blx	r6
   b8736:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b873a:	f003 0306 	and.w	r3, r3, #6
   b873e:	2b06      	cmp	r3, #6
   b8740:	bf03      	ittte	eq
   b8742:	9b00      	ldreq	r3, [sp, #0]
   b8744:	602b      	streq	r3, [r5, #0]
   b8746:	2001      	moveq	r0, #1
   b8748:	4620      	movne	r0, r4
   b874a:	b004      	add	sp, #16
   b874c:	bd70      	pop	{r4, r5, r6, pc}

000b874e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b874e:	9800      	ldr	r0, [sp, #0]
   b8750:	4290      	cmp	r0, r2
   b8752:	bf14      	ite	ne
   b8754:	2001      	movne	r0, #1
   b8756:	2006      	moveq	r0, #6
   b8758:	4770      	bx	lr
	...

000b875c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b875c:	b510      	push	{r4, lr}
   b875e:	4b03      	ldr	r3, [pc, #12]	; (b876c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8760:	6003      	str	r3, [r0, #0]
   b8762:	4604      	mov	r4, r0
   b8764:	f000 f8cd 	bl	b8902 <_ZNSt9type_infoD1Ev>
   b8768:	4620      	mov	r0, r4
   b876a:	bd10      	pop	{r4, pc}
   b876c:	000b9234 	.word	0x000b9234

000b8770 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8770:	b510      	push	{r4, lr}
   b8772:	4604      	mov	r4, r0
   b8774:	f7ff fff2 	bl	b875c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8778:	4620      	mov	r0, r4
   b877a:	2108      	movs	r1, #8
   b877c:	f7fc f8bf 	bl	b48fe <_ZdlPvj>
   b8780:	4620      	mov	r0, r4
   b8782:	bd10      	pop	{r4, pc}

000b8784 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8788:	461f      	mov	r7, r3
   b878a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b878e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8792:	4598      	cmp	r8, r3
   b8794:	4606      	mov	r6, r0
   b8796:	4615      	mov	r5, r2
   b8798:	d107      	bne.n	b87aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b879a:	9907      	ldr	r1, [sp, #28]
   b879c:	f000 f8b4 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b87a0:	b118      	cbz	r0, b87aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b87a2:	7165      	strb	r5, [r4, #5]
   b87a4:	2000      	movs	r0, #0
   b87a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b87aa:	4639      	mov	r1, r7
   b87ac:	4630      	mov	r0, r6
   b87ae:	f000 f8ab 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b87b2:	2800      	cmp	r0, #0
   b87b4:	d0f6      	beq.n	b87a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b87b6:	2301      	movs	r3, #1
   b87b8:	f8c4 8000 	str.w	r8, [r4]
   b87bc:	7125      	strb	r5, [r4, #4]
   b87be:	71a3      	strb	r3, [r4, #6]
   b87c0:	e7f0      	b.n	b87a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b87c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b87c2:	b538      	push	{r3, r4, r5, lr}
   b87c4:	4615      	mov	r5, r2
   b87c6:	461c      	mov	r4, r3
   b87c8:	f000 f89e 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b87cc:	b120      	cbz	r0, b87d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b87ce:	2308      	movs	r3, #8
   b87d0:	60e3      	str	r3, [r4, #12]
   b87d2:	2306      	movs	r3, #6
   b87d4:	6025      	str	r5, [r4, #0]
   b87d6:	7123      	strb	r3, [r4, #4]
   b87d8:	bd38      	pop	{r3, r4, r5, pc}

000b87da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b87da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b87dc:	4605      	mov	r5, r0
   b87de:	460c      	mov	r4, r1
   b87e0:	9201      	str	r2, [sp, #4]
   b87e2:	461e      	mov	r6, r3
   b87e4:	f000 f890 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b87e8:	b950      	cbnz	r0, b8800 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b87ea:	2e03      	cmp	r6, #3
   b87ec:	d808      	bhi.n	b8800 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b87ee:	6823      	ldr	r3, [r4, #0]
   b87f0:	9a01      	ldr	r2, [sp, #4]
   b87f2:	695b      	ldr	r3, [r3, #20]
   b87f4:	4629      	mov	r1, r5
   b87f6:	4620      	mov	r0, r4
   b87f8:	b002      	add	sp, #8
   b87fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b87fe:	4718      	bx	r3
   b8800:	b002      	add	sp, #8
   b8802:	bd70      	pop	{r4, r5, r6, pc}

000b8804 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8804:	b510      	push	{r4, lr}
   b8806:	4b03      	ldr	r3, [pc, #12]	; (b8814 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8808:	6003      	str	r3, [r0, #0]
   b880a:	4604      	mov	r4, r0
   b880c:	f7ff ffa6 	bl	b875c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8810:	4620      	mov	r0, r4
   b8812:	bd10      	pop	{r4, pc}
   b8814:	000b9294 	.word	0x000b9294

000b8818 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8818:	b510      	push	{r4, lr}
   b881a:	4604      	mov	r4, r0
   b881c:	f7ff fff2 	bl	b8804 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8820:	4620      	mov	r0, r4
   b8822:	210c      	movs	r1, #12
   b8824:	f7fc f86b 	bl	b48fe <_ZdlPvj>
   b8828:	4620      	mov	r0, r4
   b882a:	bd10      	pop	{r4, pc}

000b882c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b882c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b882e:	9f08      	ldr	r7, [sp, #32]
   b8830:	4297      	cmp	r7, r2
   b8832:	4605      	mov	r5, r0
   b8834:	460e      	mov	r6, r1
   b8836:	4614      	mov	r4, r2
   b8838:	d00a      	beq.n	b8850 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b883a:	68a8      	ldr	r0, [r5, #8]
   b883c:	6802      	ldr	r2, [r0, #0]
   b883e:	9708      	str	r7, [sp, #32]
   b8840:	6a15      	ldr	r5, [r2, #32]
   b8842:	4631      	mov	r1, r6
   b8844:	4622      	mov	r2, r4
   b8846:	46ac      	mov	ip, r5
   b8848:	b003      	add	sp, #12
   b884a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b884e:	4760      	bx	ip
   b8850:	4619      	mov	r1, r3
   b8852:	9301      	str	r3, [sp, #4]
   b8854:	f000 f858 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b8858:	9b01      	ldr	r3, [sp, #4]
   b885a:	2800      	cmp	r0, #0
   b885c:	d0ed      	beq.n	b883a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b885e:	2006      	movs	r0, #6
   b8860:	b003      	add	sp, #12
   b8862:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8864 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8864:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8868:	460d      	mov	r5, r1
   b886a:	4619      	mov	r1, r3
   b886c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8870:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8874:	4681      	mov	r9, r0
   b8876:	4617      	mov	r7, r2
   b8878:	4698      	mov	r8, r3
   b887a:	f000 f845 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b887e:	b190      	cbz	r0, b88a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8880:	2d00      	cmp	r5, #0
   b8882:	6034      	str	r4, [r6, #0]
   b8884:	7137      	strb	r7, [r6, #4]
   b8886:	db09      	blt.n	b889c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8888:	1961      	adds	r1, r4, r5
   b888a:	458a      	cmp	sl, r1
   b888c:	bf0c      	ite	eq
   b888e:	2106      	moveq	r1, #6
   b8890:	2101      	movne	r1, #1
   b8892:	71b1      	strb	r1, [r6, #6]
   b8894:	2000      	movs	r0, #0
   b8896:	b001      	add	sp, #4
   b8898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b889c:	3502      	adds	r5, #2
   b889e:	d1f9      	bne.n	b8894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b88a0:	2301      	movs	r3, #1
   b88a2:	71b3      	strb	r3, [r6, #6]
   b88a4:	e7f6      	b.n	b8894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b88a6:	4554      	cmp	r4, sl
   b88a8:	d106      	bne.n	b88b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b88aa:	4659      	mov	r1, fp
   b88ac:	4648      	mov	r0, r9
   b88ae:	f000 f82b 	bl	b8908 <_ZNKSt9type_infoeqERKS_>
   b88b2:	b108      	cbz	r0, b88b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b88b4:	7177      	strb	r7, [r6, #5]
   b88b6:	e7ed      	b.n	b8894 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b88b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b88bc:	6803      	ldr	r3, [r0, #0]
   b88be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b88c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b88c6:	69dc      	ldr	r4, [r3, #28]
   b88c8:	463a      	mov	r2, r7
   b88ca:	4643      	mov	r3, r8
   b88cc:	4629      	mov	r1, r5
   b88ce:	46a4      	mov	ip, r4
   b88d0:	b001      	add	sp, #4
   b88d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b88d6:	4760      	bx	ip

000b88d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b88d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88dc:	4607      	mov	r7, r0
   b88de:	460c      	mov	r4, r1
   b88e0:	4615      	mov	r5, r2
   b88e2:	461e      	mov	r6, r3
   b88e4:	f7ff ff6d 	bl	b87c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b88e8:	b948      	cbnz	r0, b88fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b88ea:	68b8      	ldr	r0, [r7, #8]
   b88ec:	6803      	ldr	r3, [r0, #0]
   b88ee:	699f      	ldr	r7, [r3, #24]
   b88f0:	462a      	mov	r2, r5
   b88f2:	4633      	mov	r3, r6
   b88f4:	4621      	mov	r1, r4
   b88f6:	46bc      	mov	ip, r7
   b88f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b88fc:	4760      	bx	ip
   b88fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8902 <_ZNSt9type_infoD1Ev>:
   b8902:	4770      	bx	lr

000b8904 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8904:	2000      	movs	r0, #0
   b8906:	4770      	bx	lr

000b8908 <_ZNKSt9type_infoeqERKS_>:
   b8908:	4281      	cmp	r1, r0
   b890a:	b508      	push	{r3, lr}
   b890c:	d00e      	beq.n	b892c <_ZNKSt9type_infoeqERKS_+0x24>
   b890e:	6840      	ldr	r0, [r0, #4]
   b8910:	7803      	ldrb	r3, [r0, #0]
   b8912:	2b2a      	cmp	r3, #42	; 0x2a
   b8914:	d00c      	beq.n	b8930 <_ZNKSt9type_infoeqERKS_+0x28>
   b8916:	6849      	ldr	r1, [r1, #4]
   b8918:	780b      	ldrb	r3, [r1, #0]
   b891a:	2b2a      	cmp	r3, #42	; 0x2a
   b891c:	bf08      	it	eq
   b891e:	3101      	addeq	r1, #1
   b8920:	f7fb ff9c 	bl	b485c <strcmp>
   b8924:	fab0 f080 	clz	r0, r0
   b8928:	0940      	lsrs	r0, r0, #5
   b892a:	bd08      	pop	{r3, pc}
   b892c:	2001      	movs	r0, #1
   b892e:	e7fc      	b.n	b892a <_ZNKSt9type_infoeqERKS_+0x22>
   b8930:	2000      	movs	r0, #0
   b8932:	e7fa      	b.n	b892a <_ZNKSt9type_infoeqERKS_+0x22>

000b8934 <atexit>:
   b8934:	2300      	movs	r3, #0
   b8936:	4601      	mov	r1, r0
   b8938:	461a      	mov	r2, r3
   b893a:	4618      	mov	r0, r3
   b893c:	f000 b956 	b.w	b8bec <__register_exitproc>

000b8940 <isprint>:
   b8940:	4b02      	ldr	r3, [pc, #8]	; (b894c <isprint+0xc>)
   b8942:	4418      	add	r0, r3
   b8944:	7840      	ldrb	r0, [r0, #1]
   b8946:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b894a:	4770      	bx	lr
   b894c:	000b9361 	.word	0x000b9361

000b8950 <memcmp>:
   b8950:	b510      	push	{r4, lr}
   b8952:	3901      	subs	r1, #1
   b8954:	4402      	add	r2, r0
   b8956:	4290      	cmp	r0, r2
   b8958:	d101      	bne.n	b895e <memcmp+0xe>
   b895a:	2000      	movs	r0, #0
   b895c:	e005      	b.n	b896a <memcmp+0x1a>
   b895e:	7803      	ldrb	r3, [r0, #0]
   b8960:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8964:	42a3      	cmp	r3, r4
   b8966:	d001      	beq.n	b896c <memcmp+0x1c>
   b8968:	1b18      	subs	r0, r3, r4
   b896a:	bd10      	pop	{r4, pc}
   b896c:	3001      	adds	r0, #1
   b896e:	e7f2      	b.n	b8956 <memcmp+0x6>

000b8970 <memcpy>:
   b8970:	440a      	add	r2, r1
   b8972:	4291      	cmp	r1, r2
   b8974:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8978:	d100      	bne.n	b897c <memcpy+0xc>
   b897a:	4770      	bx	lr
   b897c:	b510      	push	{r4, lr}
   b897e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8982:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8986:	4291      	cmp	r1, r2
   b8988:	d1f9      	bne.n	b897e <memcpy+0xe>
   b898a:	bd10      	pop	{r4, pc}

000b898c <memmove>:
   b898c:	4288      	cmp	r0, r1
   b898e:	b510      	push	{r4, lr}
   b8990:	eb01 0402 	add.w	r4, r1, r2
   b8994:	d902      	bls.n	b899c <memmove+0x10>
   b8996:	4284      	cmp	r4, r0
   b8998:	4623      	mov	r3, r4
   b899a:	d807      	bhi.n	b89ac <memmove+0x20>
   b899c:	1e43      	subs	r3, r0, #1
   b899e:	42a1      	cmp	r1, r4
   b89a0:	d008      	beq.n	b89b4 <memmove+0x28>
   b89a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b89a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b89aa:	e7f8      	b.n	b899e <memmove+0x12>
   b89ac:	4402      	add	r2, r0
   b89ae:	4601      	mov	r1, r0
   b89b0:	428a      	cmp	r2, r1
   b89b2:	d100      	bne.n	b89b6 <memmove+0x2a>
   b89b4:	bd10      	pop	{r4, pc}
   b89b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b89ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b89be:	e7f7      	b.n	b89b0 <memmove+0x24>

000b89c0 <memset>:
   b89c0:	4402      	add	r2, r0
   b89c2:	4603      	mov	r3, r0
   b89c4:	4293      	cmp	r3, r2
   b89c6:	d100      	bne.n	b89ca <memset+0xa>
   b89c8:	4770      	bx	lr
   b89ca:	f803 1b01 	strb.w	r1, [r3], #1
   b89ce:	e7f9      	b.n	b89c4 <memset+0x4>

000b89d0 <srand>:
   b89d0:	b538      	push	{r3, r4, r5, lr}
   b89d2:	4b10      	ldr	r3, [pc, #64]	; (b8a14 <srand+0x44>)
   b89d4:	681d      	ldr	r5, [r3, #0]
   b89d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b89d8:	4604      	mov	r4, r0
   b89da:	b9b3      	cbnz	r3, b8a0a <srand+0x3a>
   b89dc:	2018      	movs	r0, #24
   b89de:	f7fc fd1b 	bl	b5418 <malloc>
   b89e2:	4602      	mov	r2, r0
   b89e4:	63a8      	str	r0, [r5, #56]	; 0x38
   b89e6:	b920      	cbnz	r0, b89f2 <srand+0x22>
   b89e8:	4b0b      	ldr	r3, [pc, #44]	; (b8a18 <srand+0x48>)
   b89ea:	480c      	ldr	r0, [pc, #48]	; (b8a1c <srand+0x4c>)
   b89ec:	2142      	movs	r1, #66	; 0x42
   b89ee:	f7fc fd43 	bl	b5478 <__assert_func>
   b89f2:	490b      	ldr	r1, [pc, #44]	; (b8a20 <srand+0x50>)
   b89f4:	4b0b      	ldr	r3, [pc, #44]	; (b8a24 <srand+0x54>)
   b89f6:	e9c0 1300 	strd	r1, r3, [r0]
   b89fa:	4b0b      	ldr	r3, [pc, #44]	; (b8a28 <srand+0x58>)
   b89fc:	6083      	str	r3, [r0, #8]
   b89fe:	230b      	movs	r3, #11
   b8a00:	8183      	strh	r3, [r0, #12]
   b8a02:	2100      	movs	r1, #0
   b8a04:	2001      	movs	r0, #1
   b8a06:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8a0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8a0c:	2200      	movs	r2, #0
   b8a0e:	611c      	str	r4, [r3, #16]
   b8a10:	615a      	str	r2, [r3, #20]
   b8a12:	bd38      	pop	{r3, r4, r5, pc}
   b8a14:	2003e574 	.word	0x2003e574
   b8a18:	000b92cd 	.word	0x000b92cd
   b8a1c:	000b92e4 	.word	0x000b92e4
   b8a20:	abcd330e 	.word	0xabcd330e
   b8a24:	e66d1234 	.word	0xe66d1234
   b8a28:	0005deec 	.word	0x0005deec

000b8a2c <strchr>:
   b8a2c:	b2c9      	uxtb	r1, r1
   b8a2e:	4603      	mov	r3, r0
   b8a30:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8a34:	b11a      	cbz	r2, b8a3e <strchr+0x12>
   b8a36:	428a      	cmp	r2, r1
   b8a38:	d1f9      	bne.n	b8a2e <strchr+0x2>
   b8a3a:	4618      	mov	r0, r3
   b8a3c:	4770      	bx	lr
   b8a3e:	2900      	cmp	r1, #0
   b8a40:	bf18      	it	ne
   b8a42:	2300      	movne	r3, #0
   b8a44:	e7f9      	b.n	b8a3a <strchr+0xe>

000b8a46 <strchrnul>:
   b8a46:	b510      	push	{r4, lr}
   b8a48:	4604      	mov	r4, r0
   b8a4a:	f7ff ffef 	bl	b8a2c <strchr>
   b8a4e:	b918      	cbnz	r0, b8a58 <strchrnul+0x12>
   b8a50:	4620      	mov	r0, r4
   b8a52:	f7fb ff0d 	bl	b4870 <strlen>
   b8a56:	4420      	add	r0, r4
   b8a58:	bd10      	pop	{r4, pc}

000b8a5a <strcpy>:
   b8a5a:	4603      	mov	r3, r0
   b8a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8a60:	f803 2b01 	strb.w	r2, [r3], #1
   b8a64:	2a00      	cmp	r2, #0
   b8a66:	d1f9      	bne.n	b8a5c <strcpy+0x2>
   b8a68:	4770      	bx	lr

000b8a6a <strncmp>:
   b8a6a:	b510      	push	{r4, lr}
   b8a6c:	b17a      	cbz	r2, b8a8e <strncmp+0x24>
   b8a6e:	4603      	mov	r3, r0
   b8a70:	3901      	subs	r1, #1
   b8a72:	1884      	adds	r4, r0, r2
   b8a74:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8a78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8a7c:	4290      	cmp	r0, r2
   b8a7e:	d101      	bne.n	b8a84 <strncmp+0x1a>
   b8a80:	42a3      	cmp	r3, r4
   b8a82:	d101      	bne.n	b8a88 <strncmp+0x1e>
   b8a84:	1a80      	subs	r0, r0, r2
   b8a86:	bd10      	pop	{r4, pc}
   b8a88:	2800      	cmp	r0, #0
   b8a8a:	d1f3      	bne.n	b8a74 <strncmp+0xa>
   b8a8c:	e7fa      	b.n	b8a84 <strncmp+0x1a>
   b8a8e:	4610      	mov	r0, r2
   b8a90:	e7f9      	b.n	b8a86 <strncmp+0x1c>

000b8a92 <strnlen>:
   b8a92:	b510      	push	{r4, lr}
   b8a94:	4602      	mov	r2, r0
   b8a96:	4401      	add	r1, r0
   b8a98:	428a      	cmp	r2, r1
   b8a9a:	4613      	mov	r3, r2
   b8a9c:	d003      	beq.n	b8aa6 <strnlen+0x14>
   b8a9e:	781c      	ldrb	r4, [r3, #0]
   b8aa0:	3201      	adds	r2, #1
   b8aa2:	2c00      	cmp	r4, #0
   b8aa4:	d1f8      	bne.n	b8a98 <strnlen+0x6>
   b8aa6:	1a18      	subs	r0, r3, r0
   b8aa8:	bd10      	pop	{r4, pc}

000b8aaa <strrchr>:
   b8aaa:	b538      	push	{r3, r4, r5, lr}
   b8aac:	4603      	mov	r3, r0
   b8aae:	460c      	mov	r4, r1
   b8ab0:	b969      	cbnz	r1, b8ace <strrchr+0x24>
   b8ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8ab6:	f7ff bfb9 	b.w	b8a2c <strchr>
   b8aba:	1c43      	adds	r3, r0, #1
   b8abc:	4605      	mov	r5, r0
   b8abe:	4621      	mov	r1, r4
   b8ac0:	4618      	mov	r0, r3
   b8ac2:	f7ff ffb3 	bl	b8a2c <strchr>
   b8ac6:	2800      	cmp	r0, #0
   b8ac8:	d1f7      	bne.n	b8aba <strrchr+0x10>
   b8aca:	4628      	mov	r0, r5
   b8acc:	bd38      	pop	{r3, r4, r5, pc}
   b8ace:	2500      	movs	r5, #0
   b8ad0:	e7f5      	b.n	b8abe <strrchr+0x14>
	...

000b8ad4 <_strtol_l.constprop.0>:
   b8ad4:	2b01      	cmp	r3, #1
   b8ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8ada:	d001      	beq.n	b8ae0 <_strtol_l.constprop.0+0xc>
   b8adc:	2b24      	cmp	r3, #36	; 0x24
   b8ade:	d906      	bls.n	b8aee <_strtol_l.constprop.0+0x1a>
   b8ae0:	f7fc fcc2 	bl	b5468 <__errno>
   b8ae4:	2316      	movs	r3, #22
   b8ae6:	6003      	str	r3, [r0, #0]
   b8ae8:	2000      	movs	r0, #0
   b8aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8aee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8bd4 <_strtol_l.constprop.0+0x100>
   b8af2:	460d      	mov	r5, r1
   b8af4:	462e      	mov	r6, r5
   b8af6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8afa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8afe:	f017 0708 	ands.w	r7, r7, #8
   b8b02:	d1f7      	bne.n	b8af4 <_strtol_l.constprop.0+0x20>
   b8b04:	2c2d      	cmp	r4, #45	; 0x2d
   b8b06:	d132      	bne.n	b8b6e <_strtol_l.constprop.0+0x9a>
   b8b08:	782c      	ldrb	r4, [r5, #0]
   b8b0a:	2701      	movs	r7, #1
   b8b0c:	1cb5      	adds	r5, r6, #2
   b8b0e:	2b00      	cmp	r3, #0
   b8b10:	d05b      	beq.n	b8bca <_strtol_l.constprop.0+0xf6>
   b8b12:	2b10      	cmp	r3, #16
   b8b14:	d109      	bne.n	b8b2a <_strtol_l.constprop.0+0x56>
   b8b16:	2c30      	cmp	r4, #48	; 0x30
   b8b18:	d107      	bne.n	b8b2a <_strtol_l.constprop.0+0x56>
   b8b1a:	782c      	ldrb	r4, [r5, #0]
   b8b1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8b20:	2c58      	cmp	r4, #88	; 0x58
   b8b22:	d14d      	bne.n	b8bc0 <_strtol_l.constprop.0+0xec>
   b8b24:	786c      	ldrb	r4, [r5, #1]
   b8b26:	2310      	movs	r3, #16
   b8b28:	3502      	adds	r5, #2
   b8b2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8b2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8b32:	f04f 0c00 	mov.w	ip, #0
   b8b36:	fbb8 f9f3 	udiv	r9, r8, r3
   b8b3a:	4666      	mov	r6, ip
   b8b3c:	fb03 8a19 	mls	sl, r3, r9, r8
   b8b40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8b44:	f1be 0f09 	cmp.w	lr, #9
   b8b48:	d816      	bhi.n	b8b78 <_strtol_l.constprop.0+0xa4>
   b8b4a:	4674      	mov	r4, lr
   b8b4c:	42a3      	cmp	r3, r4
   b8b4e:	dd24      	ble.n	b8b9a <_strtol_l.constprop.0+0xc6>
   b8b50:	f1bc 0f00 	cmp.w	ip, #0
   b8b54:	db1e      	blt.n	b8b94 <_strtol_l.constprop.0+0xc0>
   b8b56:	45b1      	cmp	r9, r6
   b8b58:	d31c      	bcc.n	b8b94 <_strtol_l.constprop.0+0xc0>
   b8b5a:	d101      	bne.n	b8b60 <_strtol_l.constprop.0+0x8c>
   b8b5c:	45a2      	cmp	sl, r4
   b8b5e:	db19      	blt.n	b8b94 <_strtol_l.constprop.0+0xc0>
   b8b60:	fb06 4603 	mla	r6, r6, r3, r4
   b8b64:	f04f 0c01 	mov.w	ip, #1
   b8b68:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8b6c:	e7e8      	b.n	b8b40 <_strtol_l.constprop.0+0x6c>
   b8b6e:	2c2b      	cmp	r4, #43	; 0x2b
   b8b70:	bf04      	itt	eq
   b8b72:	782c      	ldrbeq	r4, [r5, #0]
   b8b74:	1cb5      	addeq	r5, r6, #2
   b8b76:	e7ca      	b.n	b8b0e <_strtol_l.constprop.0+0x3a>
   b8b78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8b7c:	f1be 0f19 	cmp.w	lr, #25
   b8b80:	d801      	bhi.n	b8b86 <_strtol_l.constprop.0+0xb2>
   b8b82:	3c37      	subs	r4, #55	; 0x37
   b8b84:	e7e2      	b.n	b8b4c <_strtol_l.constprop.0+0x78>
   b8b86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8b8a:	f1be 0f19 	cmp.w	lr, #25
   b8b8e:	d804      	bhi.n	b8b9a <_strtol_l.constprop.0+0xc6>
   b8b90:	3c57      	subs	r4, #87	; 0x57
   b8b92:	e7db      	b.n	b8b4c <_strtol_l.constprop.0+0x78>
   b8b94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8b98:	e7e6      	b.n	b8b68 <_strtol_l.constprop.0+0x94>
   b8b9a:	f1bc 0f00 	cmp.w	ip, #0
   b8b9e:	da05      	bge.n	b8bac <_strtol_l.constprop.0+0xd8>
   b8ba0:	2322      	movs	r3, #34	; 0x22
   b8ba2:	6003      	str	r3, [r0, #0]
   b8ba4:	4646      	mov	r6, r8
   b8ba6:	b942      	cbnz	r2, b8bba <_strtol_l.constprop.0+0xe6>
   b8ba8:	4630      	mov	r0, r6
   b8baa:	e79e      	b.n	b8aea <_strtol_l.constprop.0+0x16>
   b8bac:	b107      	cbz	r7, b8bb0 <_strtol_l.constprop.0+0xdc>
   b8bae:	4276      	negs	r6, r6
   b8bb0:	2a00      	cmp	r2, #0
   b8bb2:	d0f9      	beq.n	b8ba8 <_strtol_l.constprop.0+0xd4>
   b8bb4:	f1bc 0f00 	cmp.w	ip, #0
   b8bb8:	d000      	beq.n	b8bbc <_strtol_l.constprop.0+0xe8>
   b8bba:	1e69      	subs	r1, r5, #1
   b8bbc:	6011      	str	r1, [r2, #0]
   b8bbe:	e7f3      	b.n	b8ba8 <_strtol_l.constprop.0+0xd4>
   b8bc0:	2430      	movs	r4, #48	; 0x30
   b8bc2:	2b00      	cmp	r3, #0
   b8bc4:	d1b1      	bne.n	b8b2a <_strtol_l.constprop.0+0x56>
   b8bc6:	2308      	movs	r3, #8
   b8bc8:	e7af      	b.n	b8b2a <_strtol_l.constprop.0+0x56>
   b8bca:	2c30      	cmp	r4, #48	; 0x30
   b8bcc:	d0a5      	beq.n	b8b1a <_strtol_l.constprop.0+0x46>
   b8bce:	230a      	movs	r3, #10
   b8bd0:	e7ab      	b.n	b8b2a <_strtol_l.constprop.0+0x56>
   b8bd2:	bf00      	nop
   b8bd4:	000b9362 	.word	0x000b9362

000b8bd8 <strtol>:
   b8bd8:	4613      	mov	r3, r2
   b8bda:	460a      	mov	r2, r1
   b8bdc:	4601      	mov	r1, r0
   b8bde:	4802      	ldr	r0, [pc, #8]	; (b8be8 <strtol+0x10>)
   b8be0:	6800      	ldr	r0, [r0, #0]
   b8be2:	f7ff bf77 	b.w	b8ad4 <_strtol_l.constprop.0>
   b8be6:	bf00      	nop
   b8be8:	2003e574 	.word	0x2003e574

000b8bec <__register_exitproc>:
   b8bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8bf0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8cac <__register_exitproc+0xc0>
   b8bf4:	4606      	mov	r6, r0
   b8bf6:	f8d8 0000 	ldr.w	r0, [r8]
   b8bfa:	461f      	mov	r7, r3
   b8bfc:	460d      	mov	r5, r1
   b8bfe:	4691      	mov	r9, r2
   b8c00:	f000 f856 	bl	b8cb0 <__retarget_lock_acquire_recursive>
   b8c04:	4b25      	ldr	r3, [pc, #148]	; (b8c9c <__register_exitproc+0xb0>)
   b8c06:	681c      	ldr	r4, [r3, #0]
   b8c08:	b934      	cbnz	r4, b8c18 <__register_exitproc+0x2c>
   b8c0a:	4c25      	ldr	r4, [pc, #148]	; (b8ca0 <__register_exitproc+0xb4>)
   b8c0c:	601c      	str	r4, [r3, #0]
   b8c0e:	4b25      	ldr	r3, [pc, #148]	; (b8ca4 <__register_exitproc+0xb8>)
   b8c10:	b113      	cbz	r3, b8c18 <__register_exitproc+0x2c>
   b8c12:	681b      	ldr	r3, [r3, #0]
   b8c14:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8c18:	6863      	ldr	r3, [r4, #4]
   b8c1a:	2b1f      	cmp	r3, #31
   b8c1c:	dd07      	ble.n	b8c2e <__register_exitproc+0x42>
   b8c1e:	f8d8 0000 	ldr.w	r0, [r8]
   b8c22:	f000 f847 	bl	b8cb4 <__retarget_lock_release_recursive>
   b8c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8c2e:	b34e      	cbz	r6, b8c84 <__register_exitproc+0x98>
   b8c30:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8c34:	b988      	cbnz	r0, b8c5a <__register_exitproc+0x6e>
   b8c36:	4b1c      	ldr	r3, [pc, #112]	; (b8ca8 <__register_exitproc+0xbc>)
   b8c38:	b923      	cbnz	r3, b8c44 <__register_exitproc+0x58>
   b8c3a:	f8d8 0000 	ldr.w	r0, [r8]
   b8c3e:	f000 f838 	bl	b8cb2 <__retarget_lock_release>
   b8c42:	e7f0      	b.n	b8c26 <__register_exitproc+0x3a>
   b8c44:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8c48:	f7fc fbe6 	bl	b5418 <malloc>
   b8c4c:	2800      	cmp	r0, #0
   b8c4e:	d0f4      	beq.n	b8c3a <__register_exitproc+0x4e>
   b8c50:	2300      	movs	r3, #0
   b8c52:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8c56:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8c5a:	6863      	ldr	r3, [r4, #4]
   b8c5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8c60:	2201      	movs	r2, #1
   b8c62:	409a      	lsls	r2, r3
   b8c64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8c68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8c6c:	4313      	orrs	r3, r2
   b8c6e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8c72:	2e02      	cmp	r6, #2
   b8c74:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8c78:	bf02      	ittt	eq
   b8c7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8c7e:	4313      	orreq	r3, r2
   b8c80:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8c84:	6863      	ldr	r3, [r4, #4]
   b8c86:	f8d8 0000 	ldr.w	r0, [r8]
   b8c8a:	1c5a      	adds	r2, r3, #1
   b8c8c:	3302      	adds	r3, #2
   b8c8e:	6062      	str	r2, [r4, #4]
   b8c90:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8c94:	f000 f80e 	bl	b8cb4 <__retarget_lock_release_recursive>
   b8c98:	2000      	movs	r0, #0
   b8c9a:	e7c6      	b.n	b8c2a <__register_exitproc+0x3e>
   b8c9c:	2003e7e8 	.word	0x2003e7e8
   b8ca0:	2003e75c 	.word	0x2003e75c
   b8ca4:	00000000 	.word	0x00000000
   b8ca8:	000b5419 	.word	0x000b5419
   b8cac:	2003e5d8 	.word	0x2003e5d8

000b8cb0 <__retarget_lock_acquire_recursive>:
   b8cb0:	4770      	bx	lr

000b8cb2 <__retarget_lock_release>:
   b8cb2:	4770      	bx	lr

000b8cb4 <__retarget_lock_release_recursive>:
   b8cb4:	4770      	bx	lr

000b8cb6 <link_code_end>:
	...

000b8cb8 <link_const_data_start>:
   b8cb8:	00000000 	.word	0x00000000
   b8cbc:	34fb0000 	.word	0x34fb0000
   b8cc0:	00805f9b 	.word	0x00805f9b
   b8cc4:	10008000 	.word	0x10008000
	...

000b8cd0 <dynalib_user>:
   b8cd0:	000b4881 000b48bd 000b48e5 000b48e9     .H...H...H...H..
   b8ce0:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b8cf0:	72697620 6c617574 756f6300 3d20746e      virtual.count =
   b8d00:	00642520 7074754f 50207475 20736e69      %d.Output Pins 
   b8d10:	00746553 75706e49 69502074 5320736e     Set.Input Pins S
   b8d20:	62007465 37336366 2d366366 31623436     et.bfc37fc6-64b1
   b8d30:	3266342d 33612d64 632d3565 39666430     -4f2d-a3e5-c0df9
   b8d40:	35646230 00646463 33303565 37663464     0bd5cdd.e503d4f7
   b8d50:	3964612d 31342d61 612d3133 2d323931     -ad9a-4131-a192-
   b8d60:	30353137 37613362 38376366 62313100     7150b3a7fc78.11b
   b8d70:	63353361 65382d63 342d6264 2d306139     a35cc-8edb-49a0-
   b8d80:	38366361 3537332d 35656564 66373766     ac68-375dee5f77f
   b8d90:	65740066 4300706d 72746e65 78526c61     f.temp.CentralRx
   b8da0:	00003130                                01..

000b8da4 <_ZTVN5spark10LogHandlerE>:
	...
   b8db4:	000b4905 000b492d                       .I..-I..

000b8dbc <_ZTVN5spark16SerialLogHandlerE>:
	...
   b8dc4:	000b4931 000b4965 000b6b0d 000b6cb1     1I..eI...k...l..

000b8dd4 <_ZTVN5spark12NetworkClassE>:
	...
   b8ddc:	000b5499 000b54a3 000b54ad 000b54b7     .T...T...T...T..
   b8dec:	000b54c1 000b54cd 000b54d9 000b54e1     .T...T...T...T..
   b8dfc:	000b54e9 000b54f5 000b54fd 000b5507     .T...T...T...U..
   b8e0c:	000b5511                                .U..

000b8e10 <_ZTVN5spark9WiFiClassE>:
	...
   b8e18:	000b565b 000b5651 000b5647 000b55fd     [V..QV..GV...U..
   b8e28:	000b563b 000b562f 000b54d9 000b54e1     ;V../V...T...T..
   b8e38:	000b5623 000b561b 000b5611 000b5607     #V...V...V...V..
   b8e48:	000b5511                                .U..

000b8e4c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b8e54 <_ZTV7TwoWire>:
	...
   b8e5c:	000b5679 000b56c3 000b569b 000b567b     yV...V...V..{V..
   b8e6c:	000b56a3 000b56ab 000b56b3 000b56bb     .V...V...V...V..
   b8e7c:	75007525 78343025 00000000              %u.u%04x....

000b8e88 <_ZTV9USBSerial>:
	...
   b8e90:	000b5b37 000b5b9f 000b5b75 000b6e5d     7[...[..u[..]n..
   b8ea0:	000b5b67 000b5b39 000b5b49 000b5b99     g[..9[..I[...[..
   b8eb0:	000b5b59 000b5b31                       Y[..1[..

000b8eb8 <_ZTV9IPAddress>:
	...
   b8ec0:	000b5c55 000b5c45 000b5c47 252d5925     U\..E\..G\..%Y-%
   b8ed0:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b8ee0:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
   b8ef0:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   b8f00:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   b8f10:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   b8f20:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   b8f30:	69250020 74656400 736c6961 00203d20      .%i.details = .
   b8f40:	6d000a0d 006e6c00 63006e66 0065646f     ...m.ln.fn.code.
   b8f50:	61746564 00006c69                       detail..

000b8f58 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8f60:	000b5ee1 000b5f07 000b5ec5 000b5787     .^..._...^...W..

000b8f70 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b8f78:	000b63b5 000b63cd 000b6b0d 000b6cb1     .c...c...k...l..

000b8f88 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8f90:	000b63e1 000b63f5 000b6ce9 000b5ecd     .c...c...l...^..

000b8fa0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b8fa8:	000b5edf 000b5f15 000b6a71 000b5ecf     .^..._..qj...^..

000b8fb8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8fc0:	000b5edd 000b5f23 000b62f9 000b5f45     .^..#_...b..E_..
   b8fd0:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   b8fe0:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   b8ff0:	74530065 20747261 63736964 7265766f     e.Start discover
   b9000:	20676e69 76726573 73656369 7341002e     ing services..As
   b9010:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   b9020:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   b9030:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   b9040:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   b9050:	72656550 76656420 20656369 6d207369     Peer device is m
   b9060:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   b9070:	7061206f 646e6570 65657020 65432072     o append peer Ce
   b9080:	6172746e 6564206c 65636976 6f43002e     ntral device..Co
   b9090:	63656e6e 00646574 63736944 656e6e6f     nnected.Disconne
   b90a0:	64657463 70754400 6163696c 20646574     cted.Duplicated 
   b90b0:	72616863 65746361 74736972 63206369     characteristic c
   b90c0:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   b90d0:	6c696146 74206465 7061206f 646e6570     Failed to append
   b90e0:	636f6c20 63206c61 61726168 72657463      local character
   b90f0:	69747369 00002e63                       istic...

000b90f8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9100:	000b6f21 000b6f85 000b7059 000b6faf     !o...o..Yp...o..
   b9110:	000b6f25                                %o..

000b9114 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b911c:	000b6f1d 000b6f93 000b6f1f 000b6fb5     .o...o...o...o..
   b912c:	000b6f45                                Eo..

000b9130 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9138:	000b6f1b 000b6fa1 000b77f5 000b6fbb     .o...o...w...o..
   b9148:	000b6f65                                eo..

000b914c <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b914c:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000b915c <_ZN8particle7BleUuid9BASE_UUIDE>:
   b915c:	5f9b34fb 80000080 00001000 00000000     .4._............

000b916c <_ZTV11USARTSerial>:
	...
   b9174:	000b8241 000b82ad 000b8285 000b6e5d     A...........]n..
   b9184:	000b8255 000b8271 000b8263 000b827f     U...q...c.......
   b9194:	000b8243 000b8247                       C...G...

000b919c <_ZTVN5spark13EthernetClassE>:
	...
   b91a4:	000b838f 000b8385 000b837b 000b8371     ........{...q...
   b91b4:	000b8365 000b8359 000b54d9 000b54e1     e...Y....T...T..
   b91c4:	000b834d 000b8345 000b833b 000b8331     M...E...;...1...
   b91d4:	000b5511                                .U..

000b91d8 <_ZSt7nothrow>:
	...

000b91d9 <_ZTSSt19_Sp_make_shared_tag>:
   b91d9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b91e9:	5f646572 00676174                        red_tag....

000b91f4 <_ZTISt19_Sp_make_shared_tag>:
   b91f4:	000b9234 000b91d9                       4.......

000b91fc <_ZTIN10__cxxabiv117__class_type_infoE>:
   b91fc:	000b9294 000b9208 000b92b8              ............

000b9208 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9208:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9218:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b9228:	00000045                                E...

000b922c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b922c:	00000000 000b91fc 000b875d 000b8771     ........]...q...
   b923c:	000b8905 000b8905 000b87db 000b871d     ................
   b924c:	000b87c3 000b8785 000b874f              ........O...

000b9258 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9258:	000b9294 000b9264 000b91fc              ....d.......

000b9264 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9264:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b9274:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b9284:	456f666e 00000000                       nfoE....

000b928c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b928c:	00000000 000b9258 000b8805 000b8819     ....X...........
   b929c:	000b8905 000b8905 000b87db 000b871d     ................
   b92ac:	000b88d9 000b8865 000b882d              ....e...-...

000b92b8 <_ZTISt9type_info>:
   b92b8:	000b9234 000b92c0                       4.......

000b92c0 <_ZTSSt9type_info>:
   b92c0:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b92d0:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b92e0:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b92f0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b9300:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b9310:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b9320:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b9330:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b9340:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b9350:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b9361 <_ctype_>:
   b9361:	20202000 20202020 28282020 20282828     .         ((((( 
   b9371:	20202020 20202020 20202020 20202020                     
   b9381:	10108820 10101010 10101010 10101010      ...............
   b9391:	04040410 04040404 10040404 10101010     ................
   b93a1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b93b1:	01010101 01010101 01010101 10101010     ................
   b93c1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b93d1:	02020202 02020202 02020202 10101010     ................
   b93e1:	00000020 00000000 00000000 00000000      ...............
	...

000b9462 <link_const_data_end>:
	...

000b9464 <link_constructors_location>:
   b9464:	000b4d49 	.word	0x000b4d49
   b9468:	000b55e9 	.word	0x000b55e9
   b946c:	000b5665 	.word	0x000b5665
   b9470:	000b5ea5 	.word	0x000b5ea5
   b9474:	000b5eb1 	.word	0x000b5eb1
   b9478:	000b6afd 	.word	0x000b6afd
   b947c:	000b8231 	.word	0x000b8231
   b9480:	000b82f9 	.word	0x000b82f9
   b9484:	000b8399 	.word	0x000b8399
