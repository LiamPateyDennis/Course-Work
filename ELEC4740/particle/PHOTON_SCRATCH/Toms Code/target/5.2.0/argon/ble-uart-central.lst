
/home/elec4740/Documents/particle/PHOTON_SCRATCH/ble-uart-central/target/5.2.0/argon/ble-uart-central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005cbc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9cd8  000b9cd8  00009cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e2b0  000b9cfc  0000e2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004cc  2003e324  2003e324  0001e324  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9d70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9d74  000b9d74  00019d74  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b9d7a  000b9d7a  00019d7a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9d9e  000b9d9e  00019d9e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011f5a8  00000000  00000000  00019da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011c33  00000000  00000000  0013934a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c60  00000000  00000000  0014af7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033f60  00000000  00000000  0014dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000392ec  00000000  00000000  00181b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00143dc9  00000000  00000000  001bae29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003da1b  00000000  00000000  002febf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000b0a0  00000000  00000000  0033c60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008170  00000000  00000000  003476b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f005 f881 	bl	b9158 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f005 f8a3 	bl	b91a8 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e2b0 	.word	0x2003e2b0
   b406c:	000b9cfc 	.word	0x000b9cfc
   b4070:	2003e324 	.word	0x2003e324
   b4074:	2003e324 	.word	0x2003e324
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 f9ab 	bl	b53dc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b9cb4 	.word	0x000b9cb4
   b40a0:	000b9cd8 	.word	0x000b9cd8

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b870 	b.w	b4188 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f8b7 	bl	b421c <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 b94b 	b.w	b534c <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bca9 	b.w	b4a0c <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bca7 	b.w	b4a0c <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bcad 	b.w	b4a1c <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fbea 	bl	b48a4 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b4865 	.word	0x000b4865
   b40d8:	000b94cc 	.word	0x000b94cc

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr
	...

000b40f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
    // for (size_t ii = 0; ii < len; ii++) {
    //     Serial.write(data[ii]);
    // }
	memcpy(&num,&data[0],4);
   b40f0:	4b04      	ldr	r3, [pc, #16]	; (b4104 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   b40f2:	6802      	ldr	r2, [r0, #0]
   b40f4:	601a      	str	r2, [r3, #0]
	memcpy(&sound,&data[4],2);
   b40f6:	4b04      	ldr	r3, [pc, #16]	; (b4108 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   b40f8:	8882      	ldrh	r2, [r0, #4]
   b40fa:	801a      	strh	r2, [r3, #0]
	memcpy(&button_var,&data[6],2);
   b40fc:	4b03      	ldr	r3, [pc, #12]	; (b410c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   b40fe:	88c2      	ldrh	r2, [r0, #6]
   b4100:	801a      	strh	r2, [r3, #0]

	// memcpy(&count,&data,2);
	// print


}
   b4102:	4770      	bx	lr
   b4104:	2003e394 	.word	0x2003e394
   b4108:	2003e688 	.word	0x2003e688
   b410c:	2003e368 	.word	0x2003e368

000b4110 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4110:	4b0a      	ldr	r3, [pc, #40]	; (b413c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4112:	b510      	push	{r4, lr}
   b4114:	4604      	mov	r4, r0
   b4116:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4118:	f001 fb28 	bl	b576c <_ZN5spark10LogManager8instanceEv>
   b411c:	4621      	mov	r1, r4
   b411e:	f001 fd72 	bl	b5c06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4122:	f001 f835 	bl	b5190 <_Z16_fetch_usbserialv>
   b4126:	f001 f827 	bl	b5178 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b412a:	4620      	mov	r0, r4
   b412c:	4b04      	ldr	r3, [pc, #16]	; (b4140 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b412e:	f840 3b04 	str.w	r3, [r0], #4
   b4132:	f001 fc03 	bl	b593c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4136:	4620      	mov	r0, r4
   b4138:	bd10      	pop	{r4, pc}
   b413a:	bf00      	nop
   b413c:	000b9588 	.word	0x000b9588
   b4140:	000b9570 	.word	0x000b9570

000b4144 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
    }
   b4148:	f7ff ffe2 	bl	b4110 <_ZN5spark16SerialLogHandlerD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	2124      	movs	r1, #36	; 0x24
   b4150:	f7ff ffb5 	bl	b40be <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4158:	b40e      	push	{r1, r2, r3}
   b415a:	b500      	push	{lr}
   b415c:	b08c      	sub	sp, #48	; 0x30
   b415e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4160:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4164:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4168:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b416a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b416e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4170:	6801      	ldr	r1, [r0, #0]
   b4172:	aa04      	add	r2, sp, #16
   b4174:	201e      	movs	r0, #30
    attr.flags = 0;
   b4176:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417a:	f000 fba3 	bl	b48c4 <log_message_v>
}
   b417e:	b00c      	add	sp, #48	; 0x30
   b4180:	f85d eb04 	ldr.w	lr, [sp], #4
   b4184:	b003      	add	sp, #12
   b4186:	4770      	bx	lr

000b4188 <setup>:
// 	Log.info("\nfloat = %f\n",num); 
// 	Log.info("\nfloat = %d\n",sound); 
// 	Log.info("\nfloat = %d\n",button_var); 
// }

void setup() {
   b4188:	b570      	push	{r4, r5, r6, lr}
   b418a:	b090      	sub	sp, #64	; 0x40
    Serial.begin();
   b418c:	f001 f800 	bl	b5190 <_Z16_fetch_usbserialv>
   b4190:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4194:	f000 ffec 	bl	b5170 <_ZN9USBSerial5beginEl>
	BLE.on();
   b4198:	f002 fe78 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b419c:	f002 fec0 	bl	b6f20 <_ZNK8particle14BleLocalDevice2onEv>
    peerTempUuid.onDataReceived(onDataReceived, &peerTempUuid);
   b41a0:	4a1b      	ldr	r2, [pc, #108]	; (b4210 <setup+0x88>)
   b41a2:	491c      	ldr	r1, [pc, #112]	; (b4214 <setup+0x8c>)
   b41a4:	4c1c      	ldr	r4, [pc, #112]	; (b4218 <setup+0x90>)
   b41a6:	4610      	mov	r0, r2
   b41a8:	f003 feba 	bl	b7f20 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
	// peerTempUuid.onDataReceived(onDataReceived2, &peerTempUuid);
	// peerTempUuid.onDataReceived(onDataReceived, &peerSoundUuid);
	// peerTempUuid.onDataReceived(onDataReceived, &peerButtonUuid);
	BleAdvertisingData data;
   b41ac:	a803      	add	r0, sp, #12
   b41ae:	f003 fae5 	bl	b777c <_ZN8particle18BleAdvertisingDataC1Ev>
	data.appendServiceUUID(serviceUuid);
   b41b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b41b4:	ad06      	add	r5, sp, #24
   b41b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b41b8:	ad06      	add	r5, sp, #24
   b41ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b41bc:	6826      	ldr	r6, [r4, #0]
   b41be:	ac0b      	add	r4, sp, #44	; 0x2c
   b41c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41c2:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b41c4:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41c6:	f002 fb22 	bl	b680e <_ZNK8particle7BleUuid4typeEv>
   b41ca:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b41cc:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b41ce:	b9b4      	cbnz	r4, b41fe <setup+0x76>
            uint16_t uuid16 = tempUUID.shorted();
   b41d0:	f002 fb1f 	bl	b6812 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41d4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b41d6:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b41da:	2302      	movs	r3, #2
   b41dc:	f10d 020a 	add.w	r2, sp, #10
   b41e0:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41e2:	a803      	add	r0, sp, #12
   b41e4:	f003 fabf 	bl	b7766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
	BLE.advertise(&data);
   b41e8:	f002 fe50 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41ec:	2200      	movs	r2, #0
   b41ee:	a903      	add	r1, sp, #12
   b41f0:	f002 ff70 	bl	b70d4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b41f4:	9803      	ldr	r0, [sp, #12]
   b41f6:	f000 fc11 	bl	b4a1c <free>
}
   b41fa:	b010      	add	sp, #64	; 0x40
   b41fc:	bd70      	pop	{r4, r5, r6, pc}
   b41fe:	f002 fb0a 	bl	b6816 <_ZNK8particle7BleUuid8rawBytesEv>
   b4202:	2300      	movs	r3, #0
   b4204:	9300      	str	r3, [sp, #0]
   b4206:	4602      	mov	r2, r0
   b4208:	2310      	movs	r3, #16
   b420a:	2107      	movs	r1, #7
   b420c:	e7e9      	b.n	b41e2 <setup+0x5a>
   b420e:	bf00      	nop
   b4210:	2003e3b0 	.word	0x2003e3b0
   b4214:	000b40f1 	.word	0x000b40f1
   b4218:	2003e32c 	.word	0x2003e32c

000b421c <loop>:

void loop() {
   b421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4220:	b088      	sub	sp, #32
    if (BLE.connected()) {
   b4222:	f002 fe33 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4226:	f002 fec9 	bl	b6fbc <_ZNK8particle14BleLocalDevice9connectedEv>
   b422a:	4604      	mov	r4, r0
   b422c:	b1b8      	cbz	r0, b425e <loop+0x42>
        // if (txLen > 0) {
        // 	// Transmit the data to the BLE peripheral
        //     
        //     txLen = 0;
        // }
		count++;
   b422e:	4c3e      	ldr	r4, [pc, #248]	; (b4328 <loop+0x10c>)
		memcpy(&txBuf[0],&count,2);
   b4230:	493e      	ldr	r1, [pc, #248]	; (b432c <loop+0x110>)
		count++;
   b4232:	8823      	ldrh	r3, [r4, #0]
		Central_Tx.setValue(txBuf, 2);
   b4234:	483e      	ldr	r0, [pc, #248]	; (b4330 <loop+0x114>)
		count++;
   b4236:	3301      	adds	r3, #1
   b4238:	b29b      	uxth	r3, r3
   b423a:	8023      	strh	r3, [r4, #0]
		memcpy(&txBuf[0],&count,2);
   b423c:	800b      	strh	r3, [r1, #0]
		Central_Tx.setValue(txBuf, 2);
   b423e:	2202      	movs	r2, #2
   b4240:	2300      	movs	r3, #0
   b4242:	f002 fcbd 	bl	b6bc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
		Log.info("Count: %d",count);
   b4246:	8822      	ldrh	r2, [r4, #0]
   b4248:	493a      	ldr	r1, [pc, #232]	; (b4334 <loop+0x118>)
   b424a:	483b      	ldr	r0, [pc, #236]	; (b4338 <loop+0x11c>)
   b424c:	f7ff ff84 	bl	b4158 <_ZNK5spark6Logger4infoEPKcz>
		delay(1000);
   b4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
				}
			}
    	}

    }
}
   b4254:	b008      	add	sp, #32
   b4256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		delay(1000);
   b425a:	f001 b852 	b.w	b5302 <delay>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b425e:	4d37      	ldr	r5, [pc, #220]	; (b433c <loop+0x120>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4260:	f000 fb08 	bl	b4874 <HAL_Timer_Get_Milli_Seconds>
   b4264:	682b      	ldr	r3, [r5, #0]
   b4266:	1ac0      	subs	r0, r0, r3
   b4268:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b426c:	d356      	bcc.n	b431c <loop+0x100>
   b426e:	f000 fb01 	bl	b4874 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b4272:	6028      	str	r0, [r5, #0]
    		int count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b4274:	f002 fe0a 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4278:	4931      	ldr	r1, [pc, #196]	; (b4340 <loop+0x124>)
   b427a:	2214      	movs	r2, #20
   b427c:	f002 fed6 	bl	b702c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
   b4280:	1e07      	subs	r7, r0, #0
   b4282:	dd4b      	ble.n	b431c <loop+0x100>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4284:	4e2e      	ldr	r6, [pc, #184]	; (b4340 <loop+0x124>)
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4286:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4350 <loop+0x134>
				for (uint8_t ii = 0; ii < count; ii++) {
   b428a:	b2e5      	uxtb	r5, r4
   b428c:	42bd      	cmp	r5, r7
   b428e:	da45      	bge.n	b431c <loop+0x100>
					BleUuid foundServiceUuid;
   b4290:	a803      	add	r0, sp, #12
   b4292:	f002 fa61 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
   b4296:	2324      	movs	r3, #36	; 0x24
   b4298:	435d      	muls	r5, r3
   b429a:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b429e:	2201      	movs	r2, #1
   b42a0:	a903      	add	r1, sp, #12
   b42a2:	4430      	add	r0, r6
   b42a4:	f003 fd58 	bl	b7d58 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b42a8:	2800      	cmp	r0, #0
   b42aa:	d03a      	beq.n	b4322 <loop+0x106>
   b42ac:	4641      	mov	r1, r8
   b42ae:	a803      	add	r0, sp, #12
   b42b0:	f002 fab2 	bl	b6818 <_ZNK8particle7BleUuideqERKS0_>
   b42b4:	2800      	cmp	r0, #0
   b42b6:	d034      	beq.n	b4322 <loop+0x106>
						peer = BLE.connect(scanResults[ii].address());
   b42b8:	f002 fde8 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42bc:	1972      	adds	r2, r6, r5
   b42be:	4601      	mov	r1, r0
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b42c0:	4e20      	ldr	r6, [pc, #128]	; (b4344 <loop+0x128>)
   b42c2:	2301      	movs	r3, #1
   b42c4:	a801      	add	r0, sp, #4
   b42c6:	f004 f9e7 	bl	b8698 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b42ca:	9b01      	ldr	r3, [sp, #4]
   b42cc:	9d02      	ldr	r5, [sp, #8]
   b42ce:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
   b42d0:	6873      	ldr	r3, [r6, #4]
   b42d2:	429d      	cmp	r5, r3
   b42d4:	d016      	beq.n	b4304 <loop+0xe8>
	    if (__tmp != 0)
   b42d6:	b115      	cbz	r5, b42de <loop+0xc2>
    { ++_M_use_count; }
   b42d8:	686b      	ldr	r3, [r5, #4]
   b42da:	3301      	adds	r3, #1
   b42dc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b42de:	6874      	ldr	r4, [r6, #4]
   b42e0:	b17c      	cbz	r4, b4302 <loop+0xe6>
      if (--_M_use_count == 0)
   b42e2:	6863      	ldr	r3, [r4, #4]
   b42e4:	3b01      	subs	r3, #1
   b42e6:	6063      	str	r3, [r4, #4]
   b42e8:	b95b      	cbnz	r3, b4302 <loop+0xe6>
          _M_dispose();
   b42ea:	6823      	ldr	r3, [r4, #0]
   b42ec:	4620      	mov	r0, r4
   b42ee:	689b      	ldr	r3, [r3, #8]
   b42f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b42f2:	68a3      	ldr	r3, [r4, #8]
   b42f4:	3b01      	subs	r3, #1
   b42f6:	60a3      	str	r3, [r4, #8]
   b42f8:	b91b      	cbnz	r3, b4302 <loop+0xe6>
            _M_destroy();
   b42fa:	6823      	ldr	r3, [r4, #0]
   b42fc:	4620      	mov	r0, r4
   b42fe:	68db      	ldr	r3, [r3, #12]
   b4300:	4798      	blx	r3
	    _M_pi = __tmp;
   b4302:	6075      	str	r5, [r6, #4]
   b4304:	a801      	add	r0, sp, #4
   b4306:	f002 ff3a 	bl	b717e <_ZN8particle13BlePeerDeviceD1Ev>
						if (peer.connected()) {
   b430a:	480e      	ldr	r0, [pc, #56]	; (b4344 <loop+0x128>)
   b430c:	f002 fd30 	bl	b6d70 <_ZNK8particle13BlePeerDevice9connectedEv>
   b4310:	b120      	cbz	r0, b431c <loop+0x100>
							peer.getCharacteristicByUUID(peerTempUuid, RxSN2Uuid);
   b4312:	4a0d      	ldr	r2, [pc, #52]	; (b4348 <loop+0x12c>)
   b4314:	490d      	ldr	r1, [pc, #52]	; (b434c <loop+0x130>)
   b4316:	480b      	ldr	r0, [pc, #44]	; (b4344 <loop+0x128>)
   b4318:	f003 fdd8 	bl	b7ecc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
}
   b431c:	b008      	add	sp, #32
   b431e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				for (uint8_t ii = 0; ii < count; ii++) {
   b4322:	3401      	adds	r4, #1
   b4324:	e7b1      	b.n	b428a <loop+0x6e>
   b4326:	bf00      	nop
   b4328:	2003e36a 	.word	0x2003e36a
   b432c:	2003e68a 	.word	0x2003e68a
   b4330:	2003e324 	.word	0x2003e324
   b4334:	000b94e1 	.word	0x000b94e1
   b4338:	2003e6f0 	.word	0x2003e6f0
   b433c:	2003e36c 	.word	0x2003e36c
   b4340:	2003e3b8 	.word	0x2003e3b8
   b4344:	2003e398 	.word	0x2003e398
   b4348:	2003e340 	.word	0x2003e340
   b434c:	2003e3b0 	.word	0x2003e3b0
   b4350:	2003e32c 	.word	0x2003e32c

000b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4354:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4356:	e9d0 5300 	ldrd	r5, r3, [r0]
   b435a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b435c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b435e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4362:	42ae      	cmp	r6, r5
   b4364:	d004      	beq.n	b4370 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4366:	4628      	mov	r0, r5
   b4368:	f004 fc86 	bl	b8c78 <_ZN6StringD1Ev>
   b436c:	3514      	adds	r5, #20
   b436e:	e7f8      	b.n	b4362 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4370:	6820      	ldr	r0, [r4, #0]
   b4372:	f000 fb53 	bl	b4a1c <free>
    AllocatorT::free(data_);
}
   b4376:	4620      	mov	r0, r4
   b4378:	bd70      	pop	{r4, r5, r6, pc}

000b437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b437a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b437e:	4604      	mov	r4, r0
   b4380:	460d      	mov	r5, r1
   b4382:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4384:	d916      	bls.n	b43b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4386:	4290      	cmp	r0, r2
   b4388:	d215      	bcs.n	b43b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b438a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b438e:	1a75      	subs	r5, r6, r1
   b4390:	f1a1 0714 	sub.w	r7, r1, #20
   b4394:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4396:	42b7      	cmp	r7, r6
   b4398:	d01c      	beq.n	b43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b439a:	b12c      	cbz	r4, b43a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b439c:	4631      	mov	r1, r6
   b439e:	4620      	mov	r0, r4
   b43a0:	f004 fce6 	bl	b8d70 <_ZN6StringC1EOS_>
   b43a4:	7c33      	ldrb	r3, [r6, #16]
   b43a6:	7423      	strb	r3, [r4, #16]
   b43a8:	4630      	mov	r0, r6
   b43aa:	f004 fc65 	bl	b8c78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b43ae:	3e14      	subs	r6, #20
   b43b0:	3c14      	subs	r4, #20
   b43b2:	e7f0      	b.n	b4396 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b43b4:	d00e      	beq.n	b43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b43b6:	42b5      	cmp	r5, r6
   b43b8:	d00c      	beq.n	b43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b43ba:	b12c      	cbz	r4, b43c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b43bc:	4629      	mov	r1, r5
   b43be:	4620      	mov	r0, r4
   b43c0:	f004 fcd6 	bl	b8d70 <_ZN6StringC1EOS_>
   b43c4:	7c2b      	ldrb	r3, [r5, #16]
   b43c6:	7423      	strb	r3, [r4, #16]
   b43c8:	4628      	mov	r0, r5
   b43ca:	f004 fc55 	bl	b8c78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b43ce:	3514      	adds	r5, #20
   b43d0:	3414      	adds	r4, #20
   b43d2:	e7f0      	b.n	b43b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b43d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b43d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b43da:	2300      	movs	r3, #0
   b43dc:	e9c0 3300 	strd	r3, r3, [r0]
   b43e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b43e2:	684f      	ldr	r7, [r1, #4]
   b43e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b43e6:	4604      	mov	r4, r0
   b43e8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b43ea:	dd23      	ble.n	b4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b43ec:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b43f0:	fb08 f007 	mul.w	r0, r8, r7
   b43f4:	f000 fb0a 	bl	b4a0c <malloc>
            if (!d) {
   b43f8:	4605      	mov	r5, r0
   b43fa:	b1d8      	cbz	r0, b4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b43fc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4400:	fb08 1202 	mla	r2, r8, r2, r1
   b4404:	f7ff ffb9 	bl	b437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4408:	6820      	ldr	r0, [r4, #0]
   b440a:	f000 fb07 	bl	b4a1c <free>
        data_ = d;
   b440e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4410:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4412:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4416:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b441a:	45b8      	cmp	r8, r7
   b441c:	d008      	beq.n	b4430 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b441e:	4639      	mov	r1, r7
   b4420:	4628      	mov	r0, r5
   b4422:	f004 fcbf 	bl	b8da4 <_ZN6StringC1ERKS_>
   b4426:	7c3b      	ldrb	r3, [r7, #16]
   b4428:	742b      	strb	r3, [r5, #16]
   b442a:	3714      	adds	r7, #20
   b442c:	3514      	adds	r5, #20
   b442e:	e7f4      	b.n	b441a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4430:	6873      	ldr	r3, [r6, #4]
   b4432:	6063      	str	r3, [r4, #4]
}
   b4434:	4620      	mov	r0, r4
   b4436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b443c <_GLOBAL__sub_I_logHandler>:
}
   b443c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b443e:	b099      	sub	sp, #100	; 0x64
        capacity_(0) {
   b4440:	2300      	movs	r3, #0
   b4442:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b4446:	9306      	str	r3, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b4448:	f000 fea2 	bl	b5190 <_Z16_fetch_usbserialv>
   b444c:	a904      	add	r1, sp, #16
   b444e:	4605      	mov	r5, r0
   b4450:	a809      	add	r0, sp, #36	; 0x24
        filter_(level, filters) {
   b4452:	4c42      	ldr	r4, [pc, #264]	; (b455c <_GLOBAL__sub_I_logHandler+0x120>)
   b4454:	f7ff ffbf 	bl	b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4458:	a909      	add	r1, sp, #36	; 0x24
   b445a:	a80e      	add	r0, sp, #56	; 0x38
   b445c:	f7ff ffbb 	bl	b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4460:	af13      	add	r7, sp, #76	; 0x4c
   b4462:	4b3f      	ldr	r3, [pc, #252]	; (b4560 <_GLOBAL__sub_I_logHandler+0x124>)
   b4464:	6023      	str	r3, [r4, #0]
   b4466:	a90e      	add	r1, sp, #56	; 0x38
   b4468:	4638      	mov	r0, r7
   b446a:	f7ff ffb4 	bl	b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b446e:	463a      	mov	r2, r7
   b4470:	211e      	movs	r1, #30
   b4472:	1d20      	adds	r0, r4, #4
   b4474:	f001 fcaa 	bl	b5dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4478:	4638      	mov	r0, r7
   b447a:	f7ff ff6b 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b447e:	a80e      	add	r0, sp, #56	; 0x38
   b4480:	f7ff ff68 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4484:	4b37      	ldr	r3, [pc, #220]	; (b4564 <_GLOBAL__sub_I_logHandler+0x128>)
   b4486:	6023      	str	r3, [r4, #0]
   b4488:	6225      	str	r5, [r4, #32]
   b448a:	a809      	add	r0, sp, #36	; 0x24
   b448c:	f7ff ff62 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4490:	4b35      	ldr	r3, [pc, #212]	; (b4568 <_GLOBAL__sub_I_logHandler+0x12c>)
   b4492:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4494:	f000 fe7c 	bl	b5190 <_Z16_fetch_usbserialv>
   b4498:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b449c:	f000 fe68 	bl	b5170 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b44a0:	f001 f964 	bl	b576c <_ZN5spark10LogManager8instanceEv>
   b44a4:	4621      	mov	r1, r4
   b44a6:	f001 fb67 	bl	b5b78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler; 
   b44aa:	a804      	add	r0, sp, #16
   b44ac:	f7ff ff52 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
const BleUuid serviceUuid("bfc37fc6-64b1-4f2d-a3e5-c0df90bd5cdd");
   b44b0:	492e      	ldr	r1, [pc, #184]	; (b456c <_GLOBAL__sub_I_logHandler+0x130>)
   b44b2:	482f      	ldr	r0, [pc, #188]	; (b4570 <_GLOBAL__sub_I_logHandler+0x134>)
   b44b4:	4c2f      	ldr	r4, [pc, #188]	; (b4574 <_GLOBAL__sub_I_logHandler+0x138>)
   b44b6:	f002 fa2d 	bl	b6914 <_ZN8particle7BleUuidC1EPKc>
const BleUuid RxSN2Uuid("e503d4f7-ad9a-4131-a192-7150b3a7fc78");
   b44ba:	492f      	ldr	r1, [pc, #188]	; (b4578 <_GLOBAL__sub_I_logHandler+0x13c>)
   b44bc:	482f      	ldr	r0, [pc, #188]	; (b457c <_GLOBAL__sub_I_logHandler+0x140>)
   b44be:	f002 fa29 	bl	b6914 <_ZN8particle7BleUuidC1EPKc>
const BleUuid TxSN2Uuid("11ba35cc-8edb-49a0-ac68-375dee5f77ff");
   b44c2:	492f      	ldr	r1, [pc, #188]	; (b4580 <_GLOBAL__sub_I_logHandler+0x144>)
   b44c4:	482f      	ldr	r0, [pc, #188]	; (b4584 <_GLOBAL__sub_I_logHandler+0x148>)
   b44c6:	f002 fa25 	bl	b6914 <_ZN8particle7BleUuidC1EPKc>
   b44ca:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b44cc:	267f      	movs	r6, #127	; 0x7f
   b44ce:	4620      	mov	r0, r4
   b44d0:	f002 f937 	bl	b6742 <_ZN8particle10BleAddressC1Ev>
   b44d4:	f104 0008 	add.w	r0, r4, #8
   b44d8:	f003 f950 	bl	b777c <_ZN8particle18BleAdvertisingDataC1Ev>
   b44dc:	f104 0014 	add.w	r0, r4, #20
   b44e0:	f003 f94c 	bl	b777c <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b44e4:	3d01      	subs	r5, #1
   b44e6:	f884 6020 	strb.w	r6, [r4, #32]
   b44ea:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b44ee:	d1ee      	bne.n	b44ce <_GLOBAL__sub_I_logHandler+0x92>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b44f0:	4c24      	ldr	r4, [pc, #144]	; (b4584 <_GLOBAL__sub_I_logHandler+0x148>)
      : _M_ptr(0), _M_refcount()
   b44f2:	f8df e0a8 	ldr.w	lr, [pc, #168]	; b459c <_GLOBAL__sub_I_logHandler+0x160>
   b44f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b44f8:	ae04      	add	r6, sp, #16
   b44fa:	f854 c910 	ldr.w	ip, [r4], #-16
   b44fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4502:	f8c6 c000 	str.w	ip, [r6]
   b4506:	ae09      	add	r6, sp, #36	; 0x24
   b4508:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        BleUuid cUuid(charUuid);
   b450a:	ac04      	add	r4, sp, #16
   b450c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b450e:	f8c6 c000 	str.w	ip, [r6]
   b4512:	ae0e      	add	r6, sp, #56	; 0x38
   b4514:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        BleUuid sUuid(svcUuid);
   b4516:	ac09      	add	r4, sp, #36	; 0x24
        BleUuid cUuid(charUuid);
   b4518:	f8c6 c000 	str.w	ip, [r6]
      constexpr __shared_count() noexcept : _M_pi(0)
   b451c:	e9ce 5500 	strd	r5, r5, [lr]
        BleUuid sUuid(svcUuid);
   b4520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4522:	463e      	mov	r6, r7
   b4524:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4526:	4670      	mov	r0, lr
        BleUuid sUuid(svcUuid);
   b4528:	f8c6 c000 	str.w	ip, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b452c:	4916      	ldr	r1, [pc, #88]	; (b4588 <_GLOBAL__sub_I_logHandler+0x14c>)
   b452e:	9700      	str	r7, [sp, #0]
   b4530:	ab0e      	add	r3, sp, #56	; 0x38
   b4532:	f04f 0208 	mov.w	r2, #8
   b4536:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b453a:	f003 fd3d 	bl	b7fb8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleCharacteristic peerTempUuid;
   b453e:	4813      	ldr	r0, [pc, #76]	; (b458c <_GLOBAL__sub_I_logHandler+0x150>)
   b4540:	f002 fb18 	bl	b6b74 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerSoundUuid;
   b4544:	4812      	ldr	r0, [pc, #72]	; (b4590 <_GLOBAL__sub_I_logHandler+0x154>)
   b4546:	f002 fb15 	bl	b6b74 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerButtonUuid;
   b454a:	4812      	ldr	r0, [pc, #72]	; (b4594 <_GLOBAL__sub_I_logHandler+0x158>)
   b454c:	f002 fb12 	bl	b6b74 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b4550:	4811      	ldr	r0, [pc, #68]	; (b4598 <_GLOBAL__sub_I_logHandler+0x15c>)
}
   b4552:	b019      	add	sp, #100	; 0x64
   b4554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
BlePeerDevice peer;
   b4558:	f002 bbe8 	b.w	b6d2c <_ZN8particle13BlePeerDeviceC1Ev>
   b455c:	2003e370 	.word	0x2003e370
   b4560:	000b9570 	.word	0x000b9570
   b4564:	000b9718 	.word	0x000b9718
   b4568:	000b9588 	.word	0x000b9588
   b456c:	000b94eb 	.word	0x000b94eb
   b4570:	2003e32c 	.word	0x2003e32c
   b4574:	2003e3b8 	.word	0x2003e3b8
   b4578:	000b9510 	.word	0x000b9510
   b457c:	2003e340 	.word	0x2003e340
   b4580:	000b9535 	.word	0x000b9535
   b4584:	2003e354 	.word	0x2003e354
   b4588:	000b955a 	.word	0x000b955a
   b458c:	2003e3b0 	.word	0x2003e3b0
   b4590:	2003e3a8 	.word	0x2003e3a8
   b4594:	2003e3a0 	.word	0x2003e3a0
   b4598:	2003e398 	.word	0x2003e398
   b459c:	2003e324 	.word	0x2003e324

000b45a0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <HAL_USB_USART_Init+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	681b      	ldr	r3, [r3, #0]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	0003024c 	.word	0x0003024c

000b45b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <HAL_USB_USART_Begin+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	685b      	ldr	r3, [r3, #4]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	0003024c 	.word	0x0003024c

000b45c0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <HAL_USB_USART_End+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	689b      	ldr	r3, [r3, #8]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	0003024c 	.word	0x0003024c

000b45d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <HAL_USB_USART_Available_Data+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	691b      	ldr	r3, [r3, #16]
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	0003024c 	.word	0x0003024c

000b45e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	695b      	ldr	r3, [r3, #20]
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	0003024c 	.word	0x0003024c

000b45f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <HAL_USB_USART_Receive_Data+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	699b      	ldr	r3, [r3, #24]
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	0003024c 	.word	0x0003024c

000b4600 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <HAL_USB_USART_Send_Data+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	69db      	ldr	r3, [r3, #28]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	0003024c 	.word	0x0003024c

000b4610 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <HAL_USB_USART_Flush_Data+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	6a1b      	ldr	r3, [r3, #32]
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	0003024c 	.word	0x0003024c

000b4620 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <hal_usart_end+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	689b      	ldr	r3, [r3, #8]
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	0003023c 	.word	0x0003023c

000b4630 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <hal_usart_write+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	68db      	ldr	r3, [r3, #12]
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	0003023c 	.word	0x0003023c

000b4640 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <hal_usart_available+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	691b      	ldr	r3, [r3, #16]
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	0003023c 	.word	0x0003023c

000b4650 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <hal_usart_read+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	695b      	ldr	r3, [r3, #20]
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	0003023c 	.word	0x0003023c

000b4660 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <hal_usart_peek+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	699b      	ldr	r3, [r3, #24]
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	0003023c 	.word	0x0003023c

000b4670 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <hal_usart_flush+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	69db      	ldr	r3, [r3, #28]
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	0003023c 	.word	0x0003023c

000b4680 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <hal_usart_available_data_for_write+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	0003023c 	.word	0x0003023c

000b4690 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <hal_usart_begin_config+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	0003023c 	.word	0x0003023c

000b46a0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <hal_usart_init_ex+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	0003023c 	.word	0x0003023c

000b46b0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <inet_inet_ntop+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	695b      	ldr	r3, [r3, #20]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	00030264 	.word	0x00030264

000b46c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <os_mutex_recursive_create+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030248 	.word	0x00030248

000b46d0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <os_mutex_recursive_destroy+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	00030248 	.word	0x00030248

000b46e0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <os_mutex_recursive_lock+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	00030248 	.word	0x00030248

000b46f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <os_mutex_recursive_unlock+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	00030248 	.word	0x00030248

000b4700 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <hal_ble_stack_init+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	689b      	ldr	r3, [r3, #8]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	00030278 	.word	0x00030278

000b4710 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <hal_ble_gap_set_advertising_data+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	00030278 	.word	0x00030278

000b4720 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <hal_ble_gap_set_scan_response_data+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	00030278 	.word	0x00030278

000b4730 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <hal_ble_gap_start_advertising+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030278 	.word	0x00030278

000b4740 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <hal_ble_gap_start_scan+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030278 	.word	0x00030278

000b4750 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b03      	ldr	r3, [pc, #12]	; (b4760 <hal_ble_gap_stop_scan+0x10>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b475a:	9301      	str	r3, [sp, #4]
   b475c:	bd08      	pop	{r3, pc}
   b475e:	0000      	.short	0x0000
   b4760:	00030278 	.word	0x00030278

000b4764 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4764:	b508      	push	{r3, lr}
   b4766:	4b03      	ldr	r3, [pc, #12]	; (b4774 <hal_ble_gap_disconnect+0x10>)
   b4768:	681b      	ldr	r3, [r3, #0]
   b476a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b476e:	9301      	str	r3, [sp, #4]
   b4770:	bd08      	pop	{r3, pc}
   b4772:	0000      	.short	0x0000
   b4774:	00030278 	.word	0x00030278

000b4778 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b03      	ldr	r3, [pc, #12]	; (b4788 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b4782:	9301      	str	r3, [sp, #4]
   b4784:	bd08      	pop	{r3, pc}
   b4786:	0000      	.short	0x0000
   b4788:	00030278 	.word	0x00030278

000b478c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b03      	ldr	r3, [pc, #12]	; (b479c <hal_ble_gatt_client_discover_all_services+0x10>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b4796:	9301      	str	r3, [sp, #4]
   b4798:	bd08      	pop	{r3, pc}
   b479a:	0000      	.short	0x0000
   b479c:	00030278 	.word	0x00030278

000b47a0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b03      	ldr	r3, [pc, #12]	; (b47b0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b47aa:	9301      	str	r3, [sp, #4]
   b47ac:	bd08      	pop	{r3, pc}
   b47ae:	0000      	.short	0x0000
   b47b0:	00030278 	.word	0x00030278

000b47b4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b47b4:	b508      	push	{r3, lr}
   b47b6:	4b03      	ldr	r3, [pc, #12]	; (b47c4 <hal_ble_gatt_client_write_with_response+0x10>)
   b47b8:	681b      	ldr	r3, [r3, #0]
   b47ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b47be:	9301      	str	r3, [sp, #4]
   b47c0:	bd08      	pop	{r3, pc}
   b47c2:	0000      	.short	0x0000
   b47c4:	00030278 	.word	0x00030278

000b47c8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b03      	ldr	r3, [pc, #12]	; (b47d8 <hal_ble_gatt_client_write_without_response+0x10>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b47d2:	9301      	str	r3, [sp, #4]
   b47d4:	bd08      	pop	{r3, pc}
   b47d6:	0000      	.short	0x0000
   b47d8:	00030278 	.word	0x00030278

000b47dc <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b03      	ldr	r3, [pc, #12]	; (b47ec <hal_ble_gatt_client_read+0x10>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b47e6:	9301      	str	r3, [sp, #4]
   b47e8:	bd08      	pop	{r3, pc}
   b47ea:	0000      	.short	0x0000
   b47ec:	00030278 	.word	0x00030278

000b47f0 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b47f0:	b508      	push	{r3, lr}
   b47f2:	4b03      	ldr	r3, [pc, #12]	; (b4800 <hal_ble_gap_connect+0x10>)
   b47f4:	681b      	ldr	r3, [r3, #0]
   b47f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b47fa:	9301      	str	r3, [sp, #4]
   b47fc:	bd08      	pop	{r3, pc}
   b47fe:	0000      	.short	0x0000
   b4800:	00030278 	.word	0x00030278

000b4804 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b03      	ldr	r3, [pc, #12]	; (b4814 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b480e:	9301      	str	r3, [sp, #4]
   b4810:	bd08      	pop	{r3, pc}
   b4812:	0000      	.short	0x0000
   b4814:	00030278 	.word	0x00030278

000b4818 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b03      	ldr	r3, [pc, #12]	; (b4828 <hal_ble_gatt_client_configure_cccd+0x10>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b4822:	9301      	str	r3, [sp, #4]
   b4824:	bd08      	pop	{r3, pc}
   b4826:	0000      	.short	0x0000
   b4828:	00030278 	.word	0x00030278

000b482c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b03      	ldr	r3, [pc, #12]	; (b483c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b4836:	9301      	str	r3, [sp, #4]
   b4838:	bd08      	pop	{r3, pc}
   b483a:	0000      	.short	0x0000
   b483c:	00030278 	.word	0x00030278

000b4840 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b03      	ldr	r3, [pc, #12]	; (b4850 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b484a:	9301      	str	r3, [sp, #4]
   b484c:	bd08      	pop	{r3, pc}
   b484e:	0000      	.short	0x0000
   b4850:	00030278 	.word	0x00030278

000b4854 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <HAL_RNG_GetRandomNumber+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	685b      	ldr	r3, [r3, #4]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030218 	.word	0x00030218

000b4864 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <HAL_Delay_Microseconds+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	68db      	ldr	r3, [r3, #12]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030218 	.word	0x00030218

000b4874 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	695b      	ldr	r3, [r3, #20]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030218 	.word	0x00030218

000b4884 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <netdb_freeaddrinfo+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	689b      	ldr	r3, [r3, #8]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030268 	.word	0x00030268

000b4894 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <netdb_getaddrinfo+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	68db      	ldr	r3, [r3, #12]
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030268 	.word	0x00030268

000b48a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <panic_+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030260 	.word	0x00030260

000b48b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <log_message+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030260 	.word	0x00030260

000b48c4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <log_message_v+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030260 	.word	0x00030260

000b48d4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <log_level_name+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	00030260 	.word	0x00030260

000b48e4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <log_set_callbacks+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	00030260 	.word	0x00030260

000b48f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <spark_set_random_seed_from_cloud_handler+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	00030244 	.word	0x00030244

000b4904 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <network_connect+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	685b      	ldr	r3, [r3, #4]
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	00030240 	.word	0x00030240

000b4914 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <network_connecting+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	689b      	ldr	r3, [r3, #8]
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	00030240 	.word	0x00030240

000b4924 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <network_disconnect+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	68db      	ldr	r3, [r3, #12]
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	00030240 	.word	0x00030240

000b4934 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <network_ready+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	691b      	ldr	r3, [r3, #16]
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030240 	.word	0x00030240

000b4944 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <network_on+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	695b      	ldr	r3, [r3, #20]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030240 	.word	0x00030240

000b4954 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <network_off+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	699b      	ldr	r3, [r3, #24]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	00030240 	.word	0x00030240

000b4964 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <network_listen+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	69db      	ldr	r3, [r3, #28]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030240 	.word	0x00030240

000b4974 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <network_listening+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	6a1b      	ldr	r3, [r3, #32]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030240 	.word	0x00030240

000b4984 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <network_set_listen_timeout+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030240 	.word	0x00030240

000b4994 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <network_get_listen_timeout+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030240 	.word	0x00030240

000b49a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <network_is_on+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030240 	.word	0x00030240

000b49b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <network_is_off+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	00030240 	.word	0x00030240

000b49c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <set_system_mode+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	685b      	ldr	r3, [r3, #4]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	00030220 	.word	0x00030220

000b49d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <system_delay_ms+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	695b      	ldr	r3, [r3, #20]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030220 	.word	0x00030220

000b49e4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b03      	ldr	r3, [pc, #12]	; (b49f4 <system_ctrl_set_app_request_handler+0x10>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b49ee:	9301      	str	r3, [sp, #4]
   b49f0:	bd08      	pop	{r3, pc}
   b49f2:	0000      	.short	0x0000
   b49f4:	00030220 	.word	0x00030220

000b49f8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b03      	ldr	r3, [pc, #12]	; (b4a08 <system_ctrl_set_result+0x10>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4a02:	9301      	str	r3, [sp, #4]
   b4a04:	bd08      	pop	{r3, pc}
   b4a06:	0000      	.short	0x0000
   b4a08:	00030220 	.word	0x00030220

000b4a0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <malloc+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	681b      	ldr	r3, [r3, #0]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	0003021c 	.word	0x0003021c

000b4a1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <free+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	685b      	ldr	r3, [r3, #4]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	0003021c 	.word	0x0003021c

000b4a2c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <realloc+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	689b      	ldr	r3, [r3, #8]
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003021c 	.word	0x0003021c

000b4a3c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <vsnprintf+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	0003021c 	.word	0x0003021c

000b4a4c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <abort+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003021c 	.word	0x0003021c

000b4a5c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <__errno+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003021c 	.word	0x0003021c

000b4a6c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <__assert_func+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003021c 	.word	0x0003021c

000b4a7c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <newlib_impure_ptr_callback+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003021c 	.word	0x0003021c

000b4a8c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4a8c:	2300      	movs	r3, #0
   b4a8e:	6840      	ldr	r0, [r0, #4]
   b4a90:	461a      	mov	r2, r3
   b4a92:	f7ff bf37 	b.w	b4904 <network_connect>

000b4a96 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4a96:	6840      	ldr	r0, [r0, #4]
   b4a98:	2200      	movs	r2, #0
   b4a9a:	2102      	movs	r1, #2
   b4a9c:	f7ff bf42 	b.w	b4924 <network_disconnect>

000b4aa0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4aa0:	2200      	movs	r2, #0
   b4aa2:	6840      	ldr	r0, [r0, #4]
   b4aa4:	4611      	mov	r1, r2
   b4aa6:	f7ff bf35 	b.w	b4914 <network_connecting>

000b4aaa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4aaa:	2200      	movs	r2, #0
   b4aac:	6840      	ldr	r0, [r0, #4]
   b4aae:	4611      	mov	r1, r2
   b4ab0:	f7ff bf40 	b.w	b4934 <network_ready>

000b4ab4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4ab4:	2300      	movs	r3, #0
   b4ab6:	6840      	ldr	r0, [r0, #4]
   b4ab8:	461a      	mov	r2, r3
   b4aba:	4619      	mov	r1, r3
   b4abc:	f7ff bf42 	b.w	b4944 <network_on>

000b4ac0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4ac0:	2300      	movs	r3, #0
   b4ac2:	6840      	ldr	r0, [r0, #4]
   b4ac4:	461a      	mov	r2, r3
   b4ac6:	4619      	mov	r1, r3
   b4ac8:	f7ff bf44 	b.w	b4954 <network_off>

000b4acc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4acc:	6840      	ldr	r0, [r0, #4]
   b4ace:	2100      	movs	r1, #0
   b4ad0:	f7ff bf68 	b.w	b49a4 <network_is_on>

000b4ad4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4ad4:	6840      	ldr	r0, [r0, #4]
   b4ad6:	2100      	movs	r1, #0
   b4ad8:	f7ff bf6c 	b.w	b49b4 <network_is_off>

000b4adc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4adc:	6840      	ldr	r0, [r0, #4]
   b4ade:	2200      	movs	r2, #0
   b4ae0:	f081 0101 	eor.w	r1, r1, #1
   b4ae4:	f7ff bf3e 	b.w	b4964 <network_listen>

000b4ae8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4ae8:	6840      	ldr	r0, [r0, #4]
   b4aea:	2200      	movs	r2, #0
   b4aec:	f7ff bf4a 	b.w	b4984 <network_set_listen_timeout>

000b4af0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4af0:	2200      	movs	r2, #0
   b4af2:	6840      	ldr	r0, [r0, #4]
   b4af4:	4611      	mov	r1, r2
   b4af6:	f7ff bf4d 	b.w	b4994 <network_get_listen_timeout>

000b4afa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4afa:	2200      	movs	r2, #0
   b4afc:	6840      	ldr	r0, [r0, #4]
   b4afe:	4611      	mov	r1, r2
   b4b00:	f7ff bf38 	b.w	b4974 <network_listening>

000b4b04 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4b08:	b095      	sub	sp, #84	; 0x54
   b4b0a:	4614      	mov	r4, r2
   b4b0c:	460d      	mov	r5, r1
   b4b0e:	4607      	mov	r7, r0
    IPAddress addr;
   b4b10:	f000 fb9e 	bl	b5250 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4b14:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4b16:	221c      	movs	r2, #28
   b4b18:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4b1a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4b1c:	f004 fb44 	bl	b91a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4b20:	2340      	movs	r3, #64	; 0x40
   b4b22:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4b24:	4620      	mov	r0, r4
   b4b26:	466b      	mov	r3, sp
   b4b28:	aa0c      	add	r2, sp, #48	; 0x30
   b4b2a:	2100      	movs	r1, #0
   b4b2c:	f7ff feb2 	bl	b4894 <netdb_getaddrinfo>
    if (!r) {
   b4b30:	4604      	mov	r4, r0
   b4b32:	2800      	cmp	r0, #0
   b4b34:	d14b      	bne.n	b4bce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4b36:	4602      	mov	r2, r0
   b4b38:	2101      	movs	r1, #1
   b4b3a:	6868      	ldr	r0, [r5, #4]
   b4b3c:	f7ff fefa 	bl	b4934 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4b40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4b42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4b44:	4622      	mov	r2, r4
   b4b46:	6868      	ldr	r0, [r5, #4]
   b4b48:	f7ff fef4 	bl	b4934 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4b4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4b4e:	4681      	mov	r9, r0
        bool ok = false;
   b4b50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4b52:	2e00      	cmp	r6, #0
   b4b54:	d03b      	beq.n	b4bce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4b56:	2900      	cmp	r1, #0
   b4b58:	d139      	bne.n	b4bce <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4b5a:	6873      	ldr	r3, [r6, #4]
   b4b5c:	2b02      	cmp	r3, #2
   b4b5e:	d003      	beq.n	b4b68 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4b60:	2b0a      	cmp	r3, #10
   b4b62:	d011      	beq.n	b4b88 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4b64:	69f6      	ldr	r6, [r6, #28]
   b4b66:	e7f4      	b.n	b4b52 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4b68:	f1b8 0f00 	cmp.w	r8, #0
   b4b6c:	d0fa      	beq.n	b4b64 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4b6e:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b4b70:	a806      	add	r0, sp, #24
   b4b72:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4b74:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4b76:	f000 fb99 	bl	b52ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b7c:	1d3c      	adds	r4, r7, #4
   b4b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4b80:	682b      	ldr	r3, [r5, #0]
   b4b82:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4b84:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4b86:	e7ed      	b.n	b4b64 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4b88:	f1b9 0f00 	cmp.w	r9, #0
   b4b8c:	d0ea      	beq.n	b4b64 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4b8e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4b90:	2210      	movs	r2, #16
   b4b92:	a801      	add	r0, sp, #4
   b4b94:	f004 fb08 	bl	b91a8 <memset>
                    a.v = 6;
   b4b98:	2306      	movs	r3, #6
   b4b9a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4b9e:	ad01      	add	r5, sp, #4
   b4ba0:	f104 0308 	add.w	r3, r4, #8
   b4ba4:	3418      	adds	r4, #24
   b4ba6:	6818      	ldr	r0, [r3, #0]
   b4ba8:	6859      	ldr	r1, [r3, #4]
   b4baa:	462a      	mov	r2, r5
   b4bac:	c203      	stmia	r2!, {r0, r1}
   b4bae:	3308      	adds	r3, #8
   b4bb0:	42a3      	cmp	r3, r4
   b4bb2:	4615      	mov	r5, r2
   b4bb4:	d1f7      	bne.n	b4ba6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4bb6:	a901      	add	r1, sp, #4
   b4bb8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4bba:	ad07      	add	r5, sp, #28
   b4bbc:	f000 fb56 	bl	b526c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4bc2:	1d3c      	adds	r4, r7, #4
   b4bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bc6:	682b      	ldr	r3, [r5, #0]
   b4bc8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4bca:	4649      	mov	r1, r9
   b4bcc:	e7ca      	b.n	b4b64 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4bce:	9800      	ldr	r0, [sp, #0]
   b4bd0:	f7ff fe58 	bl	b4884 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4bd4:	4638      	mov	r0, r7
   b4bd6:	b015      	add	sp, #84	; 0x54
   b4bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4bdc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4bdc:	4b02      	ldr	r3, [pc, #8]	; (b4be8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4bde:	4a03      	ldr	r2, [pc, #12]	; (b4bec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4be0:	601a      	str	r2, [r3, #0]
   b4be2:	2200      	movs	r2, #0
   b4be4:	605a      	str	r2, [r3, #4]

} // spark
   b4be6:	4770      	bx	lr
   b4be8:	2003e6a0 	.word	0x2003e6a0
   b4bec:	000b95a0 	.word	0x000b95a0

000b4bf0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4bf0:	2200      	movs	r2, #0
   b4bf2:	6840      	ldr	r0, [r0, #4]
   b4bf4:	4611      	mov	r1, r2
   b4bf6:	f7ff be9d 	b.w	b4934 <network_ready>

000b4bfa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4bfa:	2200      	movs	r2, #0
   b4bfc:	6840      	ldr	r0, [r0, #4]
   b4bfe:	4611      	mov	r1, r2
   b4c00:	f7ff beb8 	b.w	b4974 <network_listening>

000b4c04 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c04:	2200      	movs	r2, #0
   b4c06:	6840      	ldr	r0, [r0, #4]
   b4c08:	4611      	mov	r1, r2
   b4c0a:	f7ff bec3 	b.w	b4994 <network_get_listen_timeout>

000b4c0e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c0e:	6840      	ldr	r0, [r0, #4]
   b4c10:	2200      	movs	r2, #0
   b4c12:	f7ff beb7 	b.w	b4984 <network_set_listen_timeout>

000b4c16 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c16:	6840      	ldr	r0, [r0, #4]
   b4c18:	2200      	movs	r2, #0
   b4c1a:	f081 0101 	eor.w	r1, r1, #1
   b4c1e:	f7ff bea1 	b.w	b4964 <network_listen>

000b4c22 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c22:	2300      	movs	r3, #0
   b4c24:	6840      	ldr	r0, [r0, #4]
   b4c26:	461a      	mov	r2, r3
   b4c28:	4619      	mov	r1, r3
   b4c2a:	f7ff be93 	b.w	b4954 <network_off>

000b4c2e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c2e:	2300      	movs	r3, #0
   b4c30:	6840      	ldr	r0, [r0, #4]
   b4c32:	461a      	mov	r2, r3
   b4c34:	4619      	mov	r1, r3
   b4c36:	f7ff be85 	b.w	b4944 <network_on>

000b4c3a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4c3a:	2200      	movs	r2, #0
   b4c3c:	6840      	ldr	r0, [r0, #4]
   b4c3e:	4611      	mov	r1, r2
   b4c40:	f7ff be68 	b.w	b4914 <network_connecting>

000b4c44 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4c44:	6840      	ldr	r0, [r0, #4]
   b4c46:	2200      	movs	r2, #0
   b4c48:	2102      	movs	r1, #2
   b4c4a:	f7ff be6b 	b.w	b4924 <network_disconnect>

000b4c4e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4c4e:	2300      	movs	r3, #0
   b4c50:	6840      	ldr	r0, [r0, #4]
   b4c52:	461a      	mov	r2, r3
   b4c54:	f7ff be56 	b.w	b4904 <network_connect>

000b4c58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4c58:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4c5a:	2204      	movs	r2, #4
   b4c5c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4c5e:	4a02      	ldr	r2, [pc, #8]	; (b4c68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4c60:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4c62:	4770      	bx	lr
   b4c64:	2003e6a8 	.word	0x2003e6a8
   b4c68:	000b95dc 	.word	0x000b95dc

000b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4c6c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4c6e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4c70:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4c72:	b17c      	cbz	r4, b4c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4c74:	6863      	ldr	r3, [r4, #4]
   b4c76:	3b01      	subs	r3, #1
   b4c78:	6063      	str	r3, [r4, #4]
   b4c7a:	b95b      	cbnz	r3, b4c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4c7c:	6823      	ldr	r3, [r4, #0]
   b4c7e:	4620      	mov	r0, r4
   b4c80:	689b      	ldr	r3, [r3, #8]
   b4c82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4c84:	68a3      	ldr	r3, [r4, #8]
   b4c86:	3b01      	subs	r3, #1
   b4c88:	60a3      	str	r3, [r4, #8]
   b4c8a:	b91b      	cbnz	r3, b4c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4c8c:	6823      	ldr	r3, [r4, #0]
   b4c8e:	4620      	mov	r0, r4
   b4c90:	68db      	ldr	r3, [r3, #12]
   b4c92:	4798      	blx	r3
      }
   b4c94:	4628      	mov	r0, r5
   b4c96:	bd38      	pop	{r3, r4, r5, pc}

000b4c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b4c98:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b4c9a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4c9c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4c9e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4ca0:	dd03      	ble.n	b4caa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b4ca2:	f7ff fec3 	bl	b4a2c <realloc>
            if (!d) {
   b4ca6:	b918      	cbnz	r0, b4cb0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4ca8:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4caa:	f7ff feb7 	bl	b4a1c <free>
        T* d = nullptr;
   b4cae:	2000      	movs	r0, #0
        data_ = d;
   b4cb0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4cb2:	60a5      	str	r5, [r4, #8]
        return true;
   b4cb4:	2001      	movs	r0, #1
   b4cb6:	e7f7      	b.n	b4ca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cb8:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4cba:	2300      	movs	r3, #0
   b4cbc:	e9c0 3300 	strd	r3, r3, [r0]
   b4cc0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cc2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cc4:	6849      	ldr	r1, [r1, #4]
   b4cc6:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4cc8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4cca:	dd10      	ble.n	b4cee <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b4ccc:	f7ff ffe4 	bl	b4c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b4cd0:	b168      	cbz	r0, b4cee <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4cd2:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4cd6:	6822      	ldr	r2, [r4, #0]
   b4cd8:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b4cda:	4299      	cmp	r1, r3
   b4cdc:	d005      	beq.n	b4cea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b4cde:	b10a      	cbz	r2, b4ce4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b4ce0:	7818      	ldrb	r0, [r3, #0]
   b4ce2:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b4ce4:	3301      	adds	r3, #1
   b4ce6:	3201      	adds	r2, #1
   b4ce8:	e7f7      	b.n	b4cda <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b4cea:	686b      	ldr	r3, [r5, #4]
   b4cec:	6063      	str	r3, [r4, #4]
    }
}
   b4cee:	4620      	mov	r0, r4
   b4cf0:	bd38      	pop	{r3, r4, r5, pc}

000b4cf2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4cf2:	f100 0310 	add.w	r3, r0, #16
   b4cf6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4cf8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4cfc:	2901      	cmp	r1, #1
   b4cfe:	4618      	mov	r0, r3
   b4d00:	d108      	bne.n	b4d14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4d02:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4d06:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4d0a:	3a01      	subs	r2, #1
   b4d0c:	f103 0310 	add.w	r3, r3, #16
   b4d10:	d1f2      	bne.n	b4cf8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4d12:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4d14:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4d16:	bf04      	itt	eq
   b4d18:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4d1c:	1852      	addeq	r2, r2, r1
   b4d1e:	e7f4      	b.n	b4d0a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4d20 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4d20:	b40e      	push	{r1, r2, r3}
   b4d22:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4d24:	b088      	sub	sp, #32
   b4d26:	af00      	add	r7, sp, #0
   b4d28:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d2c:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4d2e:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d32:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4d34:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d36:	462b      	mov	r3, r5
   b4d38:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4d3a:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d3c:	f7ff fe7e 	bl	b4a3c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4d40:	280f      	cmp	r0, #15
   b4d42:	687a      	ldr	r2, [r7, #4]
   b4d44:	d91a      	bls.n	b4d7c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4d46:	f100 0308 	add.w	r3, r0, #8
   b4d4a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4d4e:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4d50:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d54:	1c41      	adds	r1, r0, #1
   b4d56:	462b      	mov	r3, r5
   b4d58:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4d5a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4d5c:	f7ff fe6e 	bl	b4a3c <vsnprintf>
        if (n > 0) {
   b4d60:	1e02      	subs	r2, r0, #0
   b4d62:	dd04      	ble.n	b4d6e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4d64:	6823      	ldr	r3, [r4, #0]
   b4d66:	4669      	mov	r1, sp
   b4d68:	689b      	ldr	r3, [r3, #8]
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	4798      	blx	r3
   b4d6e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4d70:	3720      	adds	r7, #32
   b4d72:	46bd      	mov	sp, r7
   b4d74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4d78:	b003      	add	sp, #12
   b4d7a:	4770      	bx	lr
    } else if (n > 0) {
   b4d7c:	2800      	cmp	r0, #0
   b4d7e:	d0f7      	beq.n	b4d70 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4d80:	6823      	ldr	r3, [r4, #0]
   b4d82:	4602      	mov	r2, r0
   b4d84:	689b      	ldr	r3, [r3, #8]
   b4d86:	f107 0110 	add.w	r1, r7, #16
   b4d8a:	4620      	mov	r0, r4
   b4d8c:	4798      	blx	r3
}
   b4d8e:	e7ef      	b.n	b4d70 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4d90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4d90:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4d92:	6843      	ldr	r3, [r0, #4]
   b4d94:	3b01      	subs	r3, #1
    {
   b4d96:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4d98:	6043      	str	r3, [r0, #4]
   b4d9a:	b963      	cbnz	r3, b4db6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4d9c:	6803      	ldr	r3, [r0, #0]
   b4d9e:	689b      	ldr	r3, [r3, #8]
   b4da0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4da2:	68a3      	ldr	r3, [r4, #8]
   b4da4:	3b01      	subs	r3, #1
   b4da6:	60a3      	str	r3, [r4, #8]
   b4da8:	b92b      	cbnz	r3, b4db6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4daa:	6823      	ldr	r3, [r4, #0]
   b4dac:	4620      	mov	r0, r4
   b4dae:	68db      	ldr	r3, [r3, #12]
    }
   b4db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4db4:	4718      	bx	r3
    }
   b4db6:	bd10      	pop	{r4, pc}

000b4db8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4db8:	b538      	push	{r3, r4, r5, lr}
   b4dba:	680b      	ldr	r3, [r1, #0]
   b4dbc:	6003      	str	r3, [r0, #0]
   b4dbe:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4dc0:	6843      	ldr	r3, [r0, #4]
   b4dc2:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4dc4:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4dc6:	d008      	beq.n	b4dda <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4dc8:	b115      	cbz	r5, b4dd0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4dca:	686b      	ldr	r3, [r5, #4]
   b4dcc:	3301      	adds	r3, #1
   b4dce:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4dd0:	6860      	ldr	r0, [r4, #4]
   b4dd2:	b108      	cbz	r0, b4dd8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4dd4:	f7ff ffdc 	bl	b4d90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4dd8:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4dda:	bd38      	pop	{r3, r4, r5, pc}

000b4ddc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4ddc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4dde:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4de0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4de4:	689b      	ldr	r3, [r3, #8]
   b4de6:	2201      	movs	r2, #1
   b4de8:	f10d 0107 	add.w	r1, sp, #7
   b4dec:	4798      	blx	r3
}
   b4dee:	b003      	add	sp, #12
   b4df0:	f85d fb04 	ldr.w	pc, [sp], #4

000b4df4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4df4:	460b      	mov	r3, r1
   b4df6:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4df8:	2200      	movs	r2, #0
   b4dfa:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4dfc:	e9c0 2200 	strd	r2, r2, [r0]
   b4e00:	4604      	mov	r4, r0
        t_ = t;
   b4e02:	6083      	str	r3, [r0, #8]
    if (t) {
   b4e04:	b90b      	cbnz	r3, b4e0a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4e06:	4620      	mov	r0, r4
   b4e08:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4e0a:	f7ff ffd5 	bl	b4db8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4e0e:	e7fa      	b.n	b4e06 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4e10 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4e10:	6883      	ldr	r3, [r0, #8]
   b4e12:	b1eb      	cbz	r3, b4e50 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4e14:	781a      	ldrb	r2, [r3, #0]
   b4e16:	2a03      	cmp	r2, #3
   b4e18:	d81a      	bhi.n	b4e50 <_ZNK5spark9JSONValue4typeEv+0x40>
   b4e1a:	e8df f002 	tbb	[pc, r2]
   b4e1e:	1704      	.short	0x1704
   b4e20:	1b02      	.short	0x1b02
   b4e22:	2005      	movs	r0, #5
   b4e24:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4e26:	6802      	ldr	r2, [r0, #0]
   b4e28:	685b      	ldr	r3, [r3, #4]
   b4e2a:	6852      	ldr	r2, [r2, #4]
   b4e2c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4e2e:	282d      	cmp	r0, #45	; 0x2d
   b4e30:	d012      	beq.n	b4e58 <_ZNK5spark9JSONValue4typeEv+0x48>
   b4e32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4e36:	2b09      	cmp	r3, #9
   b4e38:	d90e      	bls.n	b4e58 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4e3a:	2874      	cmp	r0, #116	; 0x74
   b4e3c:	d00e      	beq.n	b4e5c <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4e3e:	2866      	cmp	r0, #102	; 0x66
   b4e40:	d00c      	beq.n	b4e5c <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4e42:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4e46:	4258      	negs	r0, r3
   b4e48:	4158      	adcs	r0, r3
   b4e4a:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4e4c:	2006      	movs	r0, #6
   b4e4e:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4e50:	2000      	movs	r0, #0
   b4e52:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4e54:	2004      	movs	r0, #4
   b4e56:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4e58:	2003      	movs	r0, #3
   b4e5a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4e5c:	2002      	movs	r0, #2
}
   b4e5e:	4770      	bx	lr

000b4e60 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4e60:	b510      	push	{r4, lr}
   b4e62:	4604      	mov	r4, r0
    switch (type()) {
   b4e64:	f7ff ffd4 	bl	b4e10 <_ZNK5spark9JSONValue4typeEv>
   b4e68:	2802      	cmp	r0, #2
   b4e6a:	d00e      	beq.n	b4e8a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4e6c:	1ec3      	subs	r3, r0, #3
   b4e6e:	b2db      	uxtb	r3, r3
   b4e70:	2b01      	cmp	r3, #1
   b4e72:	d814      	bhi.n	b4e9e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4e74:	6822      	ldr	r2, [r4, #0]
   b4e76:	68a3      	ldr	r3, [r4, #8]
   b4e78:	6850      	ldr	r0, [r2, #4]
   b4e7a:	685b      	ldr	r3, [r3, #4]
}
   b4e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4e80:	220a      	movs	r2, #10
   b4e82:	2100      	movs	r1, #0
   b4e84:	4418      	add	r0, r3
   b4e86:	f004 ba9b 	b.w	b93c0 <strtol>
        const char* const s = d_->json + t_->start;
   b4e8a:	6822      	ldr	r2, [r4, #0]
   b4e8c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4e8e:	6852      	ldr	r2, [r2, #4]
   b4e90:	685b      	ldr	r3, [r3, #4]
   b4e92:	5cd0      	ldrb	r0, [r2, r3]
   b4e94:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4e98:	4258      	negs	r0, r3
   b4e9a:	4158      	adcs	r0, r3
}
   b4e9c:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4e9e:	2000      	movs	r0, #0
   b4ea0:	e7fc      	b.n	b4e9c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000b4ea4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4ea4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4ea6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ea8:	e9c0 3300 	strd	r3, r3, [r0]
   b4eac:	4604      	mov	r4, r0
        n_(0) {
   b4eae:	480e      	ldr	r0, [pc, #56]	; (b4ee8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4eb0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4eb4:	b1a9      	cbz	r1, b4ee2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4eb6:	780b      	ldrb	r3, [r1, #0]
   b4eb8:	2b03      	cmp	r3, #3
   b4eba:	d006      	beq.n	b4eca <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4ebc:	b98b      	cbnz	r3, b4ee2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4ebe:	6813      	ldr	r3, [r2, #0]
   b4ec0:	6858      	ldr	r0, [r3, #4]
   b4ec2:	684b      	ldr	r3, [r1, #4]
   b4ec4:	5cc3      	ldrb	r3, [r0, r3]
   b4ec6:	2b6e      	cmp	r3, #110	; 0x6e
   b4ec8:	d007      	beq.n	b4eda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4eca:	6813      	ldr	r3, [r2, #0]
   b4ecc:	684d      	ldr	r5, [r1, #4]
   b4ece:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4ed0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4ed2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4ed4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4ed6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4ed8:	60e3      	str	r3, [r4, #12]
   b4eda:	4611      	mov	r1, r2
   b4edc:	4620      	mov	r0, r4
   b4ede:	f7ff ff6b 	bl	b4db8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4ee2:	4620      	mov	r0, r4
   b4ee4:	bd38      	pop	{r3, r4, r5, pc}
   b4ee6:	bf00      	nop
   b4ee8:	000b96de 	.word	0x000b96de

000b4eec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4eec:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4eee:	2500      	movs	r5, #0
   b4ef0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ef2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4ef6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4efa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4efe:	4604      	mov	r4, r0
   b4f00:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4f02:	b14b      	cbz	r3, b4f18 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4f04:	781a      	ldrb	r2, [r3, #0]
   b4f06:	2a01      	cmp	r2, #1
   b4f08:	d106      	bne.n	b4f18 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4f0a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4f0e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4f10:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4f12:	6143      	str	r3, [r0, #20]
   b4f14:	f7ff ff50 	bl	b4db8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4f18:	4620      	mov	r0, r4
   b4f1a:	bd38      	pop	{r3, r4, r5, pc}

000b4f1c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4f1c:	b510      	push	{r4, lr}
    if (!n_) {
   b4f1e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4f20:	4604      	mov	r4, r0
    if (!n_) {
   b4f22:	b163      	cbz	r3, b4f3e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4f24:	6880      	ldr	r0, [r0, #8]
   b4f26:	60e0      	str	r0, [r4, #12]
    --n_;
   b4f28:	3b01      	subs	r3, #1
    ++t_;
   b4f2a:	3010      	adds	r0, #16
   b4f2c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4f2e:	6120      	str	r0, [r4, #16]
    --n_;
   b4f30:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4f32:	b113      	cbz	r3, b4f3a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4f34:	f7ff fedd 	bl	b4cf2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4f38:	60a0      	str	r0, [r4, #8]
    return true;
   b4f3a:	2001      	movs	r0, #1
   b4f3c:	e000      	b.n	b4f40 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4f3e:	4618      	mov	r0, r3
}
   b4f40:	bd10      	pop	{r4, pc}

000b4f42 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4f42:	b510      	push	{r4, lr}
    write('}');
   b4f44:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4f46:	4604      	mov	r4, r0
    write('}');
   b4f48:	f7ff ff48 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4f4c:	2301      	movs	r3, #1
   b4f4e:	7123      	strb	r3, [r4, #4]
}
   b4f50:	4620      	mov	r0, r4
   b4f52:	bd10      	pop	{r4, pc}

000b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4f54:	b508      	push	{r3, lr}
    switch (state_) {
   b4f56:	7903      	ldrb	r3, [r0, #4]
   b4f58:	2b01      	cmp	r3, #1
   b4f5a:	d002      	beq.n	b4f62 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4f5c:	2b02      	cmp	r3, #2
   b4f5e:	d004      	beq.n	b4f6a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4f60:	bd08      	pop	{r3, pc}
        write(',');
   b4f62:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4f64:	f7ff ff3a 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
}
   b4f68:	e7fa      	b.n	b4f60 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4f6a:	213a      	movs	r1, #58	; 0x3a
   b4f6c:	e7fa      	b.n	b4f64 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4f6e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4f6e:	b510      	push	{r4, lr}
   b4f70:	4604      	mov	r4, r0
    writeSeparator();
   b4f72:	f7ff ffef 	bl	b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4f76:	4620      	mov	r0, r4
   b4f78:	217b      	movs	r1, #123	; 0x7b
   b4f7a:	f7ff ff2f 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4f7e:	2300      	movs	r3, #0
   b4f80:	7123      	strb	r3, [r4, #4]
}
   b4f82:	4620      	mov	r0, r4
   b4f84:	bd10      	pop	{r4, pc}
	...

000b4f88 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4f88:	b513      	push	{r0, r1, r4, lr}
   b4f8a:	4604      	mov	r4, r0
   b4f8c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4f8e:	f7ff ffe1 	bl	b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4f92:	6823      	ldr	r3, [r4, #0]
   b4f94:	9a01      	ldr	r2, [sp, #4]
   b4f96:	68db      	ldr	r3, [r3, #12]
   b4f98:	4903      	ldr	r1, [pc, #12]	; (b4fa8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	4798      	blx	r3
    state_ = NEXT;
   b4f9e:	2301      	movs	r3, #1
}
   b4fa0:	4620      	mov	r0, r4
    state_ = NEXT;
   b4fa2:	7123      	strb	r3, [r4, #4]
}
   b4fa4:	b002      	add	sp, #8
   b4fa6:	bd10      	pop	{r4, pc}
   b4fa8:	000b94e8 	.word	0x000b94e8

000b4fac <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4fac:	b513      	push	{r0, r1, r4, lr}
   b4fae:	4604      	mov	r4, r0
   b4fb0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4fb2:	f7ff ffcf 	bl	b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4fb6:	6823      	ldr	r3, [r4, #0]
   b4fb8:	9a01      	ldr	r2, [sp, #4]
   b4fba:	68db      	ldr	r3, [r3, #12]
   b4fbc:	4903      	ldr	r1, [pc, #12]	; (b4fcc <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4fbe:	4620      	mov	r0, r4
   b4fc0:	4798      	blx	r3
    state_ = NEXT;
   b4fc2:	2301      	movs	r3, #1
}
   b4fc4:	4620      	mov	r0, r4
    state_ = NEXT;
   b4fc6:	7123      	strb	r3, [r4, #4]
}
   b4fc8:	b002      	add	sp, #8
   b4fca:	bd10      	pop	{r4, pc}
   b4fcc:	000b9618 	.word	0x000b9618

000b4fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4fd4:	460d      	mov	r5, r1
    write('"');
   b4fd6:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4fd8:	4690      	mov	r8, r2
   b4fda:	4604      	mov	r4, r0
    write('"');
   b4fdc:	f7ff fefe 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4fe0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b5088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4fe4:	44a8      	add	r8, r5
    const char *s = str;
   b4fe6:	462f      	mov	r7, r5
    while (s != end) {
   b4fe8:	4547      	cmp	r7, r8
   b4fea:	46ba      	mov	sl, r7
   b4fec:	d03d      	beq.n	b506a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4fee:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4ff2:	2e22      	cmp	r6, #34	; 0x22
   b4ff4:	d006      	beq.n	b5004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4ff6:	2e5c      	cmp	r6, #92	; 0x5c
   b4ff8:	d004      	beq.n	b5004 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4ffa:	4630      	mov	r0, r6
   b4ffc:	f004 f894 	bl	b9128 <isprint>
   b5000:	2800      	cmp	r0, #0
   b5002:	d1f1      	bne.n	b4fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b5004:	6823      	ldr	r3, [r4, #0]
   b5006:	ebaa 0205 	sub.w	r2, sl, r5
   b500a:	689b      	ldr	r3, [r3, #8]
   b500c:	4629      	mov	r1, r5
   b500e:	4620      	mov	r0, r4
   b5010:	4798      	blx	r3
            write('\\');
   b5012:	215c      	movs	r1, #92	; 0x5c
   b5014:	4620      	mov	r0, r4
   b5016:	f7ff fee1 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b501a:	2e0d      	cmp	r6, #13
   b501c:	d80a      	bhi.n	b5034 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b501e:	2e07      	cmp	r6, #7
   b5020:	d91c      	bls.n	b505c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b5022:	f1a6 0308 	sub.w	r3, r6, #8
   b5026:	2b05      	cmp	r3, #5
   b5028:	d818      	bhi.n	b505c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b502a:	e8df f003 	tbb	[pc, r3]
   b502e:	0f0d      	.short	0x0f0d
   b5030:	15131711 	.word	0x15131711
   b5034:	2e22      	cmp	r6, #34	; 0x22
   b5036:	d001      	beq.n	b503c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b5038:	2e5c      	cmp	r6, #92	; 0x5c
   b503a:	d10f      	bne.n	b505c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b503c:	4631      	mov	r1, r6
                write('b');
   b503e:	4620      	mov	r0, r4
   b5040:	f7ff fecc 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b5044:	463d      	mov	r5, r7
    while (s != end) {
   b5046:	e7cf      	b.n	b4fe8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b5048:	2162      	movs	r1, #98	; 0x62
   b504a:	e7f8      	b.n	b503e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b504c:	2174      	movs	r1, #116	; 0x74
   b504e:	e7f6      	b.n	b503e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b5050:	216e      	movs	r1, #110	; 0x6e
   b5052:	e7f4      	b.n	b503e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b5054:	2166      	movs	r1, #102	; 0x66
   b5056:	e7f2      	b.n	b503e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b5058:	2172      	movs	r1, #114	; 0x72
   b505a:	e7f0      	b.n	b503e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b505c:	6823      	ldr	r3, [r4, #0]
   b505e:	4632      	mov	r2, r6
   b5060:	68db      	ldr	r3, [r3, #12]
   b5062:	4649      	mov	r1, r9
   b5064:	4620      	mov	r0, r4
   b5066:	4798      	blx	r3
                break;
   b5068:	e7ec      	b.n	b5044 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b506a:	42bd      	cmp	r5, r7
   b506c:	d005      	beq.n	b507a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b506e:	6823      	ldr	r3, [r4, #0]
   b5070:	1b7a      	subs	r2, r7, r5
   b5072:	689b      	ldr	r3, [r3, #8]
   b5074:	4629      	mov	r1, r5
   b5076:	4620      	mov	r0, r4
   b5078:	4798      	blx	r3
    }
    write('"');
   b507a:	2122      	movs	r1, #34	; 0x22
   b507c:	4620      	mov	r0, r4
   b507e:	f7ff fead 	bl	b4ddc <_ZN5spark10JSONWriter5writeEc>
}
   b5082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5086:	bf00      	nop
   b5088:	000b961b 	.word	0x000b961b

000b508c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b508c:	b513      	push	{r0, r1, r4, lr}
   b508e:	4604      	mov	r4, r0
   b5090:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b5094:	f7ff ff5e 	bl	b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b5098:	4620      	mov	r0, r4
   b509a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b509e:	f7ff ff97 	bl	b4fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b50a2:	2302      	movs	r3, #2
}
   b50a4:	4620      	mov	r0, r4
    state_ = VALUE;
   b50a6:	7123      	strb	r3, [r4, #4]
}
   b50a8:	b002      	add	sp, #8
   b50aa:	bd10      	pop	{r4, pc}

000b50ac <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b50ac:	b513      	push	{r0, r1, r4, lr}
   b50ae:	4604      	mov	r4, r0
   b50b0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b50b4:	f7ff ff4e 	bl	b4f54 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b50b8:	4620      	mov	r0, r4
   b50ba:	e9dd 2100 	ldrd	r2, r1, [sp]
   b50be:	f7ff ff87 	bl	b4fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b50c2:	2301      	movs	r3, #1
}
   b50c4:	4620      	mov	r0, r4
    state_ = NEXT;
   b50c6:	7123      	strb	r3, [r4, #4]
}
   b50c8:	b002      	add	sp, #8
   b50ca:	bd10      	pop	{r4, pc}

000b50cc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b50cc:	7441      	strb	r1, [r0, #17]
}
   b50ce:	4770      	bx	lr

000b50d0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b50d0:	4770      	bx	lr

000b50d2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b50d2:	4770      	bx	lr

000b50d4 <_ZN9USBSerial4readEv>:
{
   b50d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b50d6:	2100      	movs	r1, #0
   b50d8:	7c00      	ldrb	r0, [r0, #16]
   b50da:	f7ff fa89 	bl	b45f0 <HAL_USB_USART_Receive_Data>
}
   b50de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50e2:	bd08      	pop	{r3, pc}

000b50e4 <_ZN9USBSerial4peekEv>:
{
   b50e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b50e6:	2101      	movs	r1, #1
   b50e8:	7c00      	ldrb	r0, [r0, #16]
   b50ea:	f7ff fa81 	bl	b45f0 <HAL_USB_USART_Receive_Data>
}
   b50ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b50f2:	bd08      	pop	{r3, pc}

000b50f4 <_ZN9USBSerial17availableForWriteEv>:
{
   b50f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b50f6:	7c00      	ldrb	r0, [r0, #16]
   b50f8:	f7ff fa72 	bl	b45e0 <HAL_USB_USART_Available_Data_For_Write>
}
   b50fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5100:	bd08      	pop	{r3, pc}

000b5102 <_ZN9USBSerial9availableEv>:
{
   b5102:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5104:	7c00      	ldrb	r0, [r0, #16]
   b5106:	f7ff fa63 	bl	b45d0 <HAL_USB_USART_Available_Data>
}
   b510a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b510e:	bd08      	pop	{r3, pc}

000b5110 <_ZN9USBSerial5writeEh>:
{
   b5110:	b513      	push	{r0, r1, r4, lr}
   b5112:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5114:	7c00      	ldrb	r0, [r0, #16]
{
   b5116:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5118:	f7ff fa62 	bl	b45e0 <HAL_USB_USART_Available_Data_For_Write>
   b511c:	2800      	cmp	r0, #0
   b511e:	9901      	ldr	r1, [sp, #4]
   b5120:	dc01      	bgt.n	b5126 <_ZN9USBSerial5writeEh+0x16>
   b5122:	7c60      	ldrb	r0, [r4, #17]
   b5124:	b120      	cbz	r0, b5130 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5126:	7c20      	ldrb	r0, [r4, #16]
   b5128:	f7ff fa6a 	bl	b4600 <HAL_USB_USART_Send_Data>
   b512c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5130:	b002      	add	sp, #8
   b5132:	bd10      	pop	{r4, pc}

000b5134 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5134:	7c00      	ldrb	r0, [r0, #16]
   b5136:	f7ff ba6b 	b.w	b4610 <HAL_USB_USART_Flush_Data>

000b513a <_ZN9USBSerialD0Ev>:
   b513a:	b510      	push	{r4, lr}
   b513c:	2114      	movs	r1, #20
   b513e:	4604      	mov	r4, r0
   b5140:	f7fe ffbd 	bl	b40be <_ZdlPvj>
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}

000b5148 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5148:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b514a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b514e:	4604      	mov	r4, r0
   b5150:	4608      	mov	r0, r1
   b5152:	2100      	movs	r1, #0
   b5154:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5158:	4b04      	ldr	r3, [pc, #16]	; (b516c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b515a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b515c:	2301      	movs	r3, #1
  _serial = serial;
   b515e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5160:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5162:	4611      	mov	r1, r2
   b5164:	f7ff fa1c 	bl	b45a0 <HAL_USB_USART_Init>
}
   b5168:	4620      	mov	r0, r4
   b516a:	bd10      	pop	{r4, pc}
   b516c:	000b962c 	.word	0x000b962c

000b5170 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5170:	7c00      	ldrb	r0, [r0, #16]
   b5172:	2200      	movs	r2, #0
   b5174:	f7ff ba1c 	b.w	b45b0 <HAL_USB_USART_Begin>

000b5178 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b5178:	7c00      	ldrb	r0, [r0, #16]
   b517a:	f7ff ba21 	b.w	b45c0 <HAL_USB_USART_End>

000b517e <_Z19acquireSerialBufferv>:
{
   b517e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5180:	2214      	movs	r2, #20
{
   b5182:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5184:	2100      	movs	r1, #0
   b5186:	f004 f80f 	bl	b91a8 <memset>
}
   b518a:	4620      	mov	r0, r4
   b518c:	bd10      	pop	{r4, pc}
	...

000b5190 <_Z16_fetch_usbserialv>:
{
   b5190:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5192:	4c0f      	ldr	r4, [pc, #60]	; (b51d0 <_Z16_fetch_usbserialv+0x40>)
{
   b5194:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5196:	a803      	add	r0, sp, #12
   b5198:	f7ff fff1 	bl	b517e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b519c:	7821      	ldrb	r1, [r4, #0]
   b519e:	f3bf 8f5b 	dmb	ish
   b51a2:	f011 0101 	ands.w	r1, r1, #1
   b51a6:	d10f      	bne.n	b51c8 <_Z16_fetch_usbserialv+0x38>
   b51a8:	4620      	mov	r0, r4
   b51aa:	9101      	str	r1, [sp, #4]
   b51ac:	f7fe ff96 	bl	b40dc <__cxa_guard_acquire>
   b51b0:	9901      	ldr	r1, [sp, #4]
   b51b2:	b148      	cbz	r0, b51c8 <_Z16_fetch_usbserialv+0x38>
   b51b4:	aa03      	add	r2, sp, #12
   b51b6:	4807      	ldr	r0, [pc, #28]	; (b51d4 <_Z16_fetch_usbserialv+0x44>)
   b51b8:	f7ff ffc6 	bl	b5148 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b51bc:	4620      	mov	r0, r4
   b51be:	f7fe ff92 	bl	b40e6 <__cxa_guard_release>
   b51c2:	4805      	ldr	r0, [pc, #20]	; (b51d8 <_Z16_fetch_usbserialv+0x48>)
   b51c4:	f003 ffaa 	bl	b911c <atexit>
	return _usbserial;
}
   b51c8:	4802      	ldr	r0, [pc, #8]	; (b51d4 <_Z16_fetch_usbserialv+0x44>)
   b51ca:	b008      	add	sp, #32
   b51cc:	bd10      	pop	{r4, pc}
   b51ce:	bf00      	nop
   b51d0:	2003e6b0 	.word	0x2003e6b0
   b51d4:	2003e6b4 	.word	0x2003e6b4
   b51d8:	000b50d1 	.word	0x000b50d1

000b51dc <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b51dc:	4770      	bx	lr

000b51de <_ZN9IPAddressD0Ev>:
   b51de:	b510      	push	{r4, lr}
   b51e0:	2118      	movs	r1, #24
   b51e2:	4604      	mov	r4, r0
   b51e4:	f7fe ff6b 	bl	b40be <_ZdlPvj>
   b51e8:	4620      	mov	r0, r4
   b51ea:	bd10      	pop	{r4, pc}

000b51ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b51ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b51ee:	7d03      	ldrb	r3, [r0, #20]
   b51f0:	2b06      	cmp	r3, #6
{
   b51f2:	b08d      	sub	sp, #52	; 0x34
   b51f4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b51f6:	f100 0704 	add.w	r7, r0, #4
   b51fa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b51fe:	d012      	beq.n	b5226 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5200:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5204:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5208:	220a      	movs	r2, #10
   b520a:	4630      	mov	r0, r6
   b520c:	f001 f91f 	bl	b644e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5210:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5212:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5214:	d019      	beq.n	b524a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5216:	2c00      	cmp	r4, #0
   b5218:	d0f4      	beq.n	b5204 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b521a:	212e      	movs	r1, #46	; 0x2e
   b521c:	4630      	mov	r0, r6
   b521e:	f001 f913 	bl	b6448 <_ZN5Print5printEc>
   b5222:	4404      	add	r4, r0
   b5224:	e7ee      	b.n	b5204 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5226:	232f      	movs	r3, #47	; 0x2f
   b5228:	466a      	mov	r2, sp
   b522a:	4639      	mov	r1, r7
   b522c:	200a      	movs	r0, #10
		buf[0] = 0;
   b522e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5232:	f7ff fa3d 	bl	b46b0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5236:	4668      	mov	r0, sp
   b5238:	f7fe fefa 	bl	b4030 <strlen>
   b523c:	6833      	ldr	r3, [r6, #0]
   b523e:	4602      	mov	r2, r0
   b5240:	68db      	ldr	r3, [r3, #12]
   b5242:	4669      	mov	r1, sp
   b5244:	4630      	mov	r0, r6
   b5246:	4798      	blx	r3
   b5248:	4604      	mov	r4, r0
    }
    return n;
}
   b524a:	4620      	mov	r0, r4
   b524c:	b00d      	add	sp, #52	; 0x34
   b524e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5250 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5250:	b510      	push	{r4, lr}
   b5252:	4b05      	ldr	r3, [pc, #20]	; (b5268 <_ZN9IPAddressC1Ev+0x18>)
   b5254:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5256:	2211      	movs	r2, #17
   b5258:	f840 3b04 	str.w	r3, [r0], #4
   b525c:	2100      	movs	r1, #0
   b525e:	f003 ffa3 	bl	b91a8 <memset>
}
   b5262:	4620      	mov	r0, r4
   b5264:	bd10      	pop	{r4, pc}
   b5266:	bf00      	nop
   b5268:	000b965c 	.word	0x000b965c

000b526c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b526c:	4603      	mov	r3, r0
   b526e:	4a07      	ldr	r2, [pc, #28]	; (b528c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5270:	b510      	push	{r4, lr}
   b5272:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5276:	f101 0210 	add.w	r2, r1, #16
   b527a:	f851 4b04 	ldr.w	r4, [r1], #4
   b527e:	f843 4b04 	str.w	r4, [r3], #4
   b5282:	4291      	cmp	r1, r2
   b5284:	d1f9      	bne.n	b527a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5286:	780a      	ldrb	r2, [r1, #0]
   b5288:	701a      	strb	r2, [r3, #0]
}
   b528a:	bd10      	pop	{r4, pc}
   b528c:	000b965c 	.word	0x000b965c

000b5290 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5290:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5292:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5296:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b529a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b529e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b52a2:	2304      	movs	r3, #4
   b52a4:	6041      	str	r1, [r0, #4]
   b52a6:	7503      	strb	r3, [r0, #20]
}
   b52a8:	bd10      	pop	{r4, pc}
	...

000b52ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b52ac:	b507      	push	{r0, r1, r2, lr}
   b52ae:	4b06      	ldr	r3, [pc, #24]	; (b52c8 <_ZN9IPAddressC1EPKh+0x1c>)
   b52b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b52b2:	78cb      	ldrb	r3, [r1, #3]
   b52b4:	9300      	str	r3, [sp, #0]
   b52b6:	788b      	ldrb	r3, [r1, #2]
   b52b8:	784a      	ldrb	r2, [r1, #1]
   b52ba:	7809      	ldrb	r1, [r1, #0]
   b52bc:	f7ff ffe8 	bl	b5290 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b52c0:	b003      	add	sp, #12
   b52c2:	f85d fb04 	ldr.w	pc, [sp], #4
   b52c6:	bf00      	nop
   b52c8:	000b965c 	.word	0x000b965c

000b52cc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b52cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b52ce:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b52d0:	4604      	mov	r4, r0
      if (_M_manager)
   b52d2:	b113      	cbz	r3, b52da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b52d4:	2203      	movs	r2, #3
   b52d6:	4601      	mov	r1, r0
   b52d8:	4798      	blx	r3
    }
   b52da:	4620      	mov	r0, r4
   b52dc:	bd10      	pop	{r4, pc}

000b52de <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b52de:	b513      	push	{r0, r1, r4, lr}
   b52e0:	460b      	mov	r3, r1
   b52e2:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52e4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b52e8:	466c      	mov	r4, sp
   b52ea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b52ee:	e893 0003 	ldmia.w	r3, {r0, r1}
   b52f2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b52f6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b52fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b52fe:	b002      	add	sp, #8
   b5300:	bd10      	pop	{r4, pc}

000b5302 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5302:	2100      	movs	r1, #0
   b5304:	f7ff bb66 	b.w	b49d4 <system_delay_ms>

000b5308 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5308:	4b01      	ldr	r3, [pc, #4]	; (b5310 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b530a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b530c:	4770      	bx	lr
   b530e:	bf00      	nop
   b5310:	2003e2bc 	.word	0x2003e2bc

000b5314 <serialEventRun>:
{
   b5314:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5316:	4b0b      	ldr	r3, [pc, #44]	; (b5344 <serialEventRun+0x30>)
   b5318:	b143      	cbz	r3, b532c <serialEventRun+0x18>
   b531a:	f7ff ff39 	bl	b5190 <_Z16_fetch_usbserialv>
   b531e:	6803      	ldr	r3, [r0, #0]
   b5320:	691b      	ldr	r3, [r3, #16]
   b5322:	4798      	blx	r3
   b5324:	2800      	cmp	r0, #0
   b5326:	dd01      	ble.n	b532c <serialEventRun+0x18>
        serialEvent();
   b5328:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b532c:	4b06      	ldr	r3, [pc, #24]	; (b5348 <serialEventRun+0x34>)
   b532e:	b143      	cbz	r3, b5342 <serialEventRun+0x2e>
   b5330:	f003 fdb6 	bl	b8ea0 <_Z22__fetch_global_Serial1v>
   b5334:	6803      	ldr	r3, [r0, #0]
   b5336:	691b      	ldr	r3, [r3, #16]
   b5338:	4798      	blx	r3
   b533a:	2800      	cmp	r0, #0
   b533c:	dd01      	ble.n	b5342 <serialEventRun+0x2e>
        serialEvent1();
   b533e:	f3af 8000 	nop.w
}
   b5342:	bd08      	pop	{r3, pc}
	...

000b534c <_post_loop>:
{
   b534c:	b508      	push	{r3, lr}
	serialEventRun();
   b534e:	f7ff ffe1 	bl	b5314 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5352:	f7ff fa8f 	bl	b4874 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5356:	4b01      	ldr	r3, [pc, #4]	; (b535c <_post_loop+0x10>)
   b5358:	6018      	str	r0, [r3, #0]
}
   b535a:	bd08      	pop	{r3, pc}
   b535c:	2003e740 	.word	0x2003e740

000b5360 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5360:	4805      	ldr	r0, [pc, #20]	; (b5378 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5362:	4a06      	ldr	r2, [pc, #24]	; (b537c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5364:	4906      	ldr	r1, [pc, #24]	; (b5380 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5366:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5368:	1a12      	subs	r2, r2, r0
   b536a:	f003 fef5 	bl	b9158 <memcpy>
    __backup_sram_signature = signature;
   b536e:	4b05      	ldr	r3, [pc, #20]	; (b5384 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5370:	4a05      	ldr	r2, [pc, #20]	; (b5388 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5372:	601a      	str	r2, [r3, #0]
}
   b5374:	bd08      	pop	{r3, pc}
   b5376:	bf00      	nop
   b5378:	2003f400 	.word	0x2003f400
   b537c:	2003f404 	.word	0x2003f404
   b5380:	000b9d70 	.word	0x000b9d70
   b5384:	2003f400 	.word	0x2003f400
   b5388:	9a271c1e 	.word	0x9a271c1e

000b538c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b538c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b538e:	2300      	movs	r3, #0
   b5390:	9300      	str	r3, [sp, #0]
   b5392:	461a      	mov	r2, r3
   b5394:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5398:	f7ff fb2e 	bl	b49f8 <system_ctrl_set_result>
}
   b539c:	b003      	add	sp, #12
   b539e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b53a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b53a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b53a6:	8843      	ldrh	r3, [r0, #2]
   b53a8:	2b0a      	cmp	r3, #10
   b53aa:	d008      	beq.n	b53be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b53ac:	2b50      	cmp	r3, #80	; 0x50
   b53ae:	d10b      	bne.n	b53c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b53b0:	4b09      	ldr	r3, [pc, #36]	; (b53d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b53b2:	681b      	ldr	r3, [r3, #0]
   b53b4:	b14b      	cbz	r3, b53ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53b6:	b003      	add	sp, #12
   b53b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53be:	f7ff ffe5 	bl	b538c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53c2:	b003      	add	sp, #12
   b53c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53c8:	2300      	movs	r3, #0
   b53ca:	9300      	str	r3, [sp, #0]
   b53cc:	461a      	mov	r2, r3
   b53ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53d2:	f7ff fb11 	bl	b49f8 <system_ctrl_set_result>
}
   b53d6:	e7f4      	b.n	b53c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53d8:	2003e6cc 	.word	0x2003e6cc

000b53dc <module_user_init_hook>:
{
   b53dc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b53de:	4812      	ldr	r0, [pc, #72]	; (b5428 <module_user_init_hook+0x4c>)
   b53e0:	2100      	movs	r1, #0
   b53e2:	f7ff fb4b 	bl	b4a7c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b53e6:	4b11      	ldr	r3, [pc, #68]	; (b542c <module_user_init_hook+0x50>)
   b53e8:	681a      	ldr	r2, [r3, #0]
   b53ea:	4b11      	ldr	r3, [pc, #68]	; (b5430 <module_user_init_hook+0x54>)
   b53ec:	429a      	cmp	r2, r3
   b53ee:	4b11      	ldr	r3, [pc, #68]	; (b5434 <module_user_init_hook+0x58>)
   b53f0:	bf0c      	ite	eq
   b53f2:	2201      	moveq	r2, #1
   b53f4:	2200      	movne	r2, #0
   b53f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b53f8:	d001      	beq.n	b53fe <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b53fa:	f7ff ffb1 	bl	b5360 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b53fe:	f7ff fa29 	bl	b4854 <HAL_RNG_GetRandomNumber>
   b5402:	4604      	mov	r4, r0
    srand(seed);
   b5404:	f003 fed8 	bl	b91b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5408:	4b0b      	ldr	r3, [pc, #44]	; (b5438 <module_user_init_hook+0x5c>)
   b540a:	b113      	cbz	r3, b5412 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b540c:	4620      	mov	r0, r4
   b540e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5412:	2100      	movs	r1, #0
   b5414:	4808      	ldr	r0, [pc, #32]	; (b5438 <module_user_init_hook+0x5c>)
   b5416:	f7ff fa6d 	bl	b48f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b541a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b541e:	4807      	ldr	r0, [pc, #28]	; (b543c <module_user_init_hook+0x60>)
   b5420:	2100      	movs	r1, #0
   b5422:	f7ff badf 	b.w	b49e4 <system_ctrl_set_app_request_handler>
   b5426:	bf00      	nop
   b5428:	000b5309 	.word	0x000b5309
   b542c:	2003f400 	.word	0x2003f400
   b5430:	9a271c1e 	.word	0x9a271c1e
   b5434:	2003e6c8 	.word	0x2003e6c8
   b5438:	00000000 	.word	0x00000000
   b543c:	000b53a5 	.word	0x000b53a5

000b5440 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5440:	4b01      	ldr	r3, [pc, #4]	; (b5448 <_GLOBAL__sub_I_RGB+0x8>)
   b5442:	2200      	movs	r2, #0
   b5444:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5446:	4770      	bx	lr
   b5448:	2003e6d0 	.word	0x2003e6d0

000b544c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b544c:	4b02      	ldr	r3, [pc, #8]	; (b5458 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b544e:	681a      	ldr	r2, [r3, #0]
   b5450:	4b02      	ldr	r3, [pc, #8]	; (b545c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5452:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5454:	4770      	bx	lr
   b5456:	bf00      	nop
   b5458:	2003e2b0 	.word	0x2003e2b0
   b545c:	2003e6e0 	.word	0x2003e6e0

000b5460 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5460:	6880      	ldr	r0, [r0, #8]
   b5462:	6803      	ldr	r3, [r0, #0]
   b5464:	68db      	ldr	r3, [r3, #12]
   b5466:	4718      	bx	r3

000b5468 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5468:	4770      	bx	lr

000b546a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b546a:	4608      	mov	r0, r1
   b546c:	b111      	cbz	r1, b5474 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b546e:	680b      	ldr	r3, [r1, #0]
   b5470:	685b      	ldr	r3, [r3, #4]
   b5472:	4718      	bx	r3
}
   b5474:	4770      	bx	lr

000b5476 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5476:	4770      	bx	lr

000b5478 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5478:	4770      	bx	lr

000b547a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b547a:	4770      	bx	lr

000b547c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b547c:	4770      	bx	lr

000b547e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b547e:	b538      	push	{r3, r4, r5, lr}
   b5480:	4604      	mov	r4, r0
   b5482:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5484:	6800      	ldr	r0, [r0, #0]
   b5486:	212e      	movs	r1, #46	; 0x2e
   b5488:	f003 fed1 	bl	b922e <strchrnul>
    size = s - category;
   b548c:	6823      	ldr	r3, [r4, #0]
   b548e:	1ac3      	subs	r3, r0, r3
   b5490:	602b      	str	r3, [r5, #0]
    if (size) {
   b5492:	b123      	cbz	r3, b549e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5494:	7803      	ldrb	r3, [r0, #0]
   b5496:	b103      	cbz	r3, b549a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5498:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b549a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b549c:	6020      	str	r0, [r4, #0]
}
   b549e:	4618      	mov	r0, r3
   b54a0:	bd38      	pop	{r3, r4, r5, pc}

000b54a2 <_ZN5spark16JSONStreamWriterD0Ev>:
   b54a2:	b510      	push	{r4, lr}
   b54a4:	210c      	movs	r1, #12
   b54a6:	4604      	mov	r4, r0
   b54a8:	f7fe fe09 	bl	b40be <_ZdlPvj>
   b54ac:	4620      	mov	r0, r4
   b54ae:	bd10      	pop	{r4, pc}

000b54b0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b54b0:	b510      	push	{r4, lr}
   b54b2:	2104      	movs	r1, #4
   b54b4:	4604      	mov	r4, r0
   b54b6:	f7fe fe02 	bl	b40be <_ZdlPvj>
   b54ba:	4620      	mov	r0, r4
   b54bc:	bd10      	pop	{r4, pc}

000b54be <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b54be:	b510      	push	{r4, lr}
   b54c0:	2104      	movs	r1, #4
   b54c2:	4604      	mov	r4, r0
   b54c4:	f7fe fdfb 	bl	b40be <_ZdlPvj>
   b54c8:	4620      	mov	r0, r4
   b54ca:	bd10      	pop	{r4, pc}

000b54cc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b54cc:	f7ff b908 	b.w	b46e0 <os_mutex_recursive_lock>

000b54d0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b54d0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b54d2:	f7fe fda3 	bl	b401c <strcmp>
}
   b54d6:	fab0 f080 	clz	r0, r0
   b54da:	0940      	lsrs	r0, r0, #5
   b54dc:	bd08      	pop	{r3, pc}

000b54de <__tcf_1>:
   b54de:	4770      	bx	lr

000b54e0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b54e0:	b510      	push	{r4, lr}
   b54e2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b54e4:	f7ff fe54 	bl	b5190 <_Z16_fetch_usbserialv>
   b54e8:	4284      	cmp	r4, r0
   b54ea:	d010      	beq.n	b550e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b54ec:	f003 fcd8 	bl	b8ea0 <_Z22__fetch_global_Serial1v>
   b54f0:	4284      	cmp	r4, r0
   b54f2:	d105      	bne.n	b5500 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b54f4:	f003 fcd4 	bl	b8ea0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b54f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b54fc:	f003 bb69 	b.w	b8bd2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b5500:	b12c      	cbz	r4, b550e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b5502:	6823      	ldr	r3, [r4, #0]
   b5504:	4620      	mov	r0, r4
   b5506:	685b      	ldr	r3, [r3, #4]
}
   b5508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b550c:	4718      	bx	r3
   b550e:	bd10      	pop	{r4, pc}

000b5510 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5510:	680b      	ldr	r3, [r1, #0]
   b5512:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5514:	684b      	ldr	r3, [r1, #4]
   b5516:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5518:	b113      	cbz	r3, b5520 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b551a:	685a      	ldr	r2, [r3, #4]
   b551c:	3201      	adds	r2, #1
   b551e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5520:	4770      	bx	lr

000b5522 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5522:	b513      	push	{r0, r1, r4, lr}
   b5524:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5526:	4608      	mov	r0, r1
   b5528:	9101      	str	r1, [sp, #4]
   b552a:	f7fe fd81 	bl	b4030 <strlen>
   b552e:	9901      	ldr	r1, [sp, #4]
   b5530:	4602      	mov	r2, r0
   b5532:	4620      	mov	r0, r4
}
   b5534:	b002      	add	sp, #8
   b5536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b553a:	f7ff bdb7 	b.w	b50ac <_ZN5spark10JSONWriter5valueEPKcj>

000b553e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b553e:	b513      	push	{r0, r1, r4, lr}
   b5540:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5542:	4608      	mov	r0, r1
   b5544:	9101      	str	r1, [sp, #4]
   b5546:	f7fe fd73 	bl	b4030 <strlen>
   b554a:	6823      	ldr	r3, [r4, #0]
   b554c:	9901      	ldr	r1, [sp, #4]
   b554e:	68db      	ldr	r3, [r3, #12]
   b5550:	4602      	mov	r2, r0
   b5552:	4620      	mov	r0, r4
}
   b5554:	b002      	add	sp, #8
   b5556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b555a:	4718      	bx	r3

000b555c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b555c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b555e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5560:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5564:	68db      	ldr	r3, [r3, #12]
   b5566:	2201      	movs	r2, #1
   b5568:	f10d 0107 	add.w	r1, sp, #7
   b556c:	4798      	blx	r3
}
   b556e:	b003      	add	sp, #12
   b5570:	f85d fb04 	ldr.w	pc, [sp], #4

000b5574 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5574:	680a      	ldr	r2, [r1, #0]
   b5576:	6002      	str	r2, [r0, #0]
   b5578:	684a      	ldr	r2, [r1, #4]
   b557a:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b557c:	2200      	movs	r2, #0
   b557e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5582:	b510      	push	{r4, lr}
   b5584:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5586:	688c      	ldr	r4, [r1, #8]
   b5588:	6084      	str	r4, [r0, #8]
   b558a:	68cc      	ldr	r4, [r1, #12]
   b558c:	60c4      	str	r4, [r0, #12]
   b558e:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5590:	608a      	str	r2, [r1, #8]
   b5592:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5594:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5596:	610a      	str	r2, [r1, #16]
   b5598:	bd10      	pop	{r4, pc}
	...

000b559c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b559c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b55a0:	e9d0 8400 	ldrd	r8, r4, [r0]
   b55a4:	f04f 0a14 	mov.w	sl, #20
   b55a8:	9300      	str	r3, [sp, #0]
   b55aa:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b55ae:	4b18      	ldr	r3, [pc, #96]	; (b5610 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b55b0:	10a4      	asrs	r4, r4, #2
   b55b2:	4617      	mov	r7, r2
   b55b4:	435c      	muls	r4, r3
   b55b6:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b55b8:	2c00      	cmp	r4, #0
   b55ba:	dd21      	ble.n	b5600 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b55bc:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b55be:	fb0a f006 	mul.w	r0, sl, r6
   b55c2:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b55c6:	463a      	mov	r2, r7
   b55c8:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b55cc:	5828      	ldr	r0, [r5, r0]
   b55ce:	9101      	str	r1, [sp, #4]
   b55d0:	455f      	cmp	r7, fp
   b55d2:	bf28      	it	cs
   b55d4:	465a      	movcs	r2, fp
   b55d6:	f003 fe3c 	bl	b9252 <strncmp>
                if (cmp == 0) {
   b55da:	2800      	cmp	r0, #0
   b55dc:	9901      	ldr	r1, [sp, #4]
   b55de:	f04f 0301 	mov.w	r3, #1
   b55e2:	d10b      	bne.n	b55fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b55e4:	455f      	cmp	r7, fp
   b55e6:	d103      	bne.n	b55f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b55e8:	9a00      	ldr	r2, [sp, #0]
   b55ea:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b55ec:	4634      	mov	r4, r6
   b55ee:	e7e3      	b.n	b55b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b55f0:	d9fc      	bls.n	b55ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b55f2:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b55f4:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b55f8:	3e01      	subs	r6, #1
   b55fa:	e7f7      	b.n	b55ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b55fc:	dbf9      	blt.n	b55f2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b55fe:	e7f5      	b.n	b55ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5600:	eba5 0508 	sub.w	r5, r5, r8
}
   b5604:	4802      	ldr	r0, [pc, #8]	; (b5610 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5606:	10ad      	asrs	r5, r5, #2
   b5608:	4368      	muls	r0, r5
   b560a:	b003      	add	sp, #12
   b560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5610:	cccccccd 	.word	0xcccccccd

000b5614 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5616:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5618:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b561a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b561c:	b303      	cbz	r3, b5660 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b561e:	b1f9      	cbz	r1, b5660 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5620:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5622:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5626:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5628:	a903      	add	r1, sp, #12
   b562a:	a801      	add	r0, sp, #4
   b562c:	f7ff ff27 	bl	b547e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5630:	4601      	mov	r1, r0
   b5632:	b1a8      	cbz	r0, b5660 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5634:	f10d 030b 	add.w	r3, sp, #11
   b5638:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b563a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b563e:	4620      	mov	r0, r4
   b5640:	f7ff ffac 	bl	b559c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5644:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b5648:	b153      	cbz	r3, b5660 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	2414      	movs	r4, #20
   b564e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5652:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5654:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b5658:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b565a:	bfa8      	it	ge
   b565c:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b565e:	e7e3      	b.n	b5628 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5660:	4628      	mov	r0, r5
   b5662:	b004      	add	sp, #16
   b5664:	bd70      	pop	{r4, r5, r6, pc}

000b5666 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b5666:	b40e      	push	{r1, r2, r3}
   b5668:	b5f0      	push	{r4, r5, r6, r7, lr}
   b566a:	b08c      	sub	sp, #48	; 0x30
   b566c:	af00      	add	r7, sp, #0
   b566e:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5672:	4604      	mov	r4, r0
   b5674:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5678:	607a      	str	r2, [r7, #4]
   b567a:	462b      	mov	r3, r5
   b567c:	2120      	movs	r1, #32
   b567e:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5682:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5684:	f7ff f9da 	bl	b4a3c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b5688:	281f      	cmp	r0, #31
   b568a:	687a      	ldr	r2, [r7, #4]
   b568c:	d91a      	bls.n	b56c4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b568e:	f100 0308 	add.w	r3, r0, #8
   b5692:	f023 0307 	bic.w	r3, r3, #7
        }
   b5696:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5698:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b569c:	1c41      	adds	r1, r0, #1
   b569e:	462b      	mov	r3, r5
   b56a0:	4668      	mov	r0, sp
        va_start(args, fmt);
   b56a2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b56a4:	f7ff f9ca 	bl	b4a3c <vsnprintf>
        if (n > 0) {
   b56a8:	1e02      	subs	r2, r0, #0
   b56aa:	dd04      	ble.n	b56b6 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b56ac:	6823      	ldr	r3, [r4, #0]
   b56ae:	4669      	mov	r1, sp
   b56b0:	68db      	ldr	r3, [r3, #12]
   b56b2:	4620      	mov	r0, r4
   b56b4:	4798      	blx	r3
   b56b6:	46b5      	mov	sp, r6
}
   b56b8:	3730      	adds	r7, #48	; 0x30
   b56ba:	46bd      	mov	sp, r7
   b56bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b56c0:	b003      	add	sp, #12
   b56c2:	4770      	bx	lr
    } else if (n > 0) {
   b56c4:	2800      	cmp	r0, #0
   b56c6:	d0f7      	beq.n	b56b8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b56c8:	6823      	ldr	r3, [r4, #0]
   b56ca:	4602      	mov	r2, r0
   b56cc:	68db      	ldr	r3, [r3, #12]
   b56ce:	f107 0110 	add.w	r1, r7, #16
   b56d2:	4620      	mov	r0, r4
   b56d4:	4798      	blx	r3
}
   b56d6:	e7ef      	b.n	b56b8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b56d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b56d8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b56da:	4c09      	ldr	r4, [pc, #36]	; (b5700 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b56dc:	7823      	ldrb	r3, [r4, #0]
   b56de:	f3bf 8f5b 	dmb	ish
   b56e2:	07db      	lsls	r3, r3, #31
   b56e4:	d409      	bmi.n	b56fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b56e6:	4620      	mov	r0, r4
   b56e8:	f7fe fcf8 	bl	b40dc <__cxa_guard_acquire>
   b56ec:	b128      	cbz	r0, b56fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b56ee:	4620      	mov	r0, r4
   b56f0:	f7fe fcf9 	bl	b40e6 <__cxa_guard_release>
   b56f4:	4803      	ldr	r0, [pc, #12]	; (b5704 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b56f6:	f003 fd11 	bl	b911c <atexit>
}
   b56fa:	4803      	ldr	r0, [pc, #12]	; (b5708 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b56fc:	bd10      	pop	{r4, pc}
   b56fe:	bf00      	nop
   b5700:	2003e6e8 	.word	0x2003e6e8
   b5704:	000b5477 	.word	0x000b5477
   b5708:	2003e2b4 	.word	0x2003e2b4

000b570c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b570c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b570e:	4c09      	ldr	r4, [pc, #36]	; (b5734 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5710:	7823      	ldrb	r3, [r4, #0]
   b5712:	f3bf 8f5b 	dmb	ish
   b5716:	07db      	lsls	r3, r3, #31
   b5718:	d409      	bmi.n	b572e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b571a:	4620      	mov	r0, r4
   b571c:	f7fe fcde 	bl	b40dc <__cxa_guard_acquire>
   b5720:	b128      	cbz	r0, b572e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5722:	4620      	mov	r0, r4
   b5724:	f7fe fcdf 	bl	b40e6 <__cxa_guard_release>
   b5728:	4803      	ldr	r0, [pc, #12]	; (b5738 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b572a:	f003 fcf7 	bl	b911c <atexit>
    return &factory;
}
   b572e:	4803      	ldr	r0, [pc, #12]	; (b573c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5730:	bd10      	pop	{r4, pc}
   b5732:	bf00      	nop
   b5734:	2003e6ec 	.word	0x2003e6ec
   b5738:	000b54df 	.word	0x000b54df
   b573c:	2003e2b8 	.word	0x2003e2b8

000b5740 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5740:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5742:	2500      	movs	r5, #0
   b5744:	4604      	mov	r4, r0
   b5746:	e9c0 5500 	strd	r5, r5, [r0]
   b574a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b574e:	6085      	str	r5, [r0, #8]
   b5750:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5752:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b5756:	f7fe ffb3 	bl	b46c0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b575a:	f7ff ffbd 	bl	b56d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b575e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5760:	f7ff ffd4 	bl	b570c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5764:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5766:	6220      	str	r0, [r4, #32]
}
   b5768:	4620      	mov	r0, r4
   b576a:	bd38      	pop	{r3, r4, r5, pc}

000b576c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b576c:	b510      	push	{r4, lr}
    static LogManager mgr;
   b576e:	4c0a      	ldr	r4, [pc, #40]	; (b5798 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5770:	7823      	ldrb	r3, [r4, #0]
   b5772:	f3bf 8f5b 	dmb	ish
   b5776:	07db      	lsls	r3, r3, #31
   b5778:	d40c      	bmi.n	b5794 <_ZN5spark10LogManager8instanceEv+0x28>
   b577a:	4620      	mov	r0, r4
   b577c:	f7fe fcae 	bl	b40dc <__cxa_guard_acquire>
   b5780:	b140      	cbz	r0, b5794 <_ZN5spark10LogManager8instanceEv+0x28>
   b5782:	4806      	ldr	r0, [pc, #24]	; (b579c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5784:	f7ff ffdc 	bl	b5740 <_ZN5spark10LogManagerC1Ev>
   b5788:	4620      	mov	r0, r4
   b578a:	f7fe fcac 	bl	b40e6 <__cxa_guard_release>
   b578e:	4804      	ldr	r0, [pc, #16]	; (b57a0 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5790:	f003 fcc4 	bl	b911c <atexit>
    return &mgr;
}
   b5794:	4801      	ldr	r0, [pc, #4]	; (b579c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5796:	bd10      	pop	{r4, pc}
   b5798:	2003e6e4 	.word	0x2003e6e4
   b579c:	2003e6f4 	.word	0x2003e6f4
   b57a0:	000b5ce5 	.word	0x000b5ce5

000b57a4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b57a4:	4a02      	ldr	r2, [pc, #8]	; (b57b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b57a6:	4903      	ldr	r1, [pc, #12]	; (b57b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b57a8:	4803      	ldr	r0, [pc, #12]	; (b57b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b57aa:	2300      	movs	r3, #0
   b57ac:	f7ff b89a 	b.w	b48e4 <log_set_callbacks>
   b57b0:	000b5ac9 	.word	0x000b5ac9
   b57b4:	000b5a55 	.word	0x000b5a55
   b57b8:	000b59d5 	.word	0x000b59d5

000b57bc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b57bc:	2300      	movs	r3, #0
   b57be:	461a      	mov	r2, r3
   b57c0:	4619      	mov	r1, r3
   b57c2:	4618      	mov	r0, r3
   b57c4:	f7ff b88e 	b.w	b48e4 <log_set_callbacks>

000b57c8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b57c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b57ca:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b57cc:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b57ce:	4668      	mov	r0, sp
   b57d0:	f7ff fe9e 	bl	b5510 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b57d4:	466a      	mov	r2, sp
   b57d6:	4629      	mov	r1, r5
   b57d8:	4620      	mov	r0, r4
   b57da:	f7ff fb87 	bl	b4eec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b57de:	a801      	add	r0, sp, #4
   b57e0:	f7ff fa44 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57e4:	4620      	mov	r0, r4
   b57e6:	b003      	add	sp, #12
   b57e8:	bd30      	pop	{r4, r5, pc}

000b57ea <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b57ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b57ec:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b57ee:	4604      	mov	r4, r0
   b57f0:	4668      	mov	r0, sp
   b57f2:	f7ff fe8d 	bl	b5510 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b57f6:	466a      	mov	r2, sp
   b57f8:	4629      	mov	r1, r5
   b57fa:	4620      	mov	r0, r4
   b57fc:	f7ff fb52 	bl	b4ea4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5800:	a801      	add	r0, sp, #4
   b5802:	f7ff fa33 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5806:	4620      	mov	r0, r4
   b5808:	b003      	add	sp, #12
   b580a:	bd30      	pop	{r4, r5, pc}

000b580c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b580e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5810:	4604      	mov	r4, r0
   b5812:	4668      	mov	r0, sp
   b5814:	f7ff fe7c 	bl	b5510 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5818:	466a      	mov	r2, sp
   b581a:	4629      	mov	r1, r5
   b581c:	4620      	mov	r0, r4
   b581e:	f7ff fae9 	bl	b4df4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5822:	a801      	add	r0, sp, #4
   b5824:	f7ff fa22 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5828:	4620      	mov	r0, r4
   b582a:	b003      	add	sp, #12
   b582c:	bd30      	pop	{r4, r5, pc}
	...

000b5830 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5830:	b570      	push	{r4, r5, r6, lr}
   b5832:	b08a      	sub	sp, #40	; 0x28
   b5834:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b5836:	4601      	mov	r1, r0
   b5838:	a804      	add	r0, sp, #16
   b583a:	f7ff ffc5 	bl	b57c8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b583e:	4e14      	ldr	r6, [pc, #80]	; (b5890 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5840:	a804      	add	r0, sp, #16
   b5842:	f7ff fb6b 	bl	b4f1c <_ZN5spark18JSONObjectIterator4nextEv>
   b5846:	b1e8      	cbz	r0, b5884 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5848:	a904      	add	r1, sp, #16
   b584a:	4668      	mov	r0, sp
   b584c:	f7ff ffcd 	bl	b57ea <_ZNK5spark18JSONObjectIterator4nameEv>
   b5850:	9802      	ldr	r0, [sp, #8]
   b5852:	4631      	mov	r1, r6
   b5854:	f7ff fe3c 	bl	b54d0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5858:	4604      	mov	r4, r0
   b585a:	b110      	cbz	r0, b5862 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b585c:	1e2c      	subs	r4, r5, #0
   b585e:	bf18      	it	ne
   b5860:	2401      	movne	r4, #1
   b5862:	a801      	add	r0, sp, #4
   b5864:	f7ff fa02 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5868:	2c00      	cmp	r4, #0
   b586a:	d0e9      	beq.n	b5840 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b586c:	a904      	add	r1, sp, #16
   b586e:	4668      	mov	r0, sp
   b5870:	f7ff ffcc 	bl	b580c <_ZNK5spark18JSONObjectIterator5valueEv>
   b5874:	4668      	mov	r0, sp
   b5876:	f7ff faf3 	bl	b4e60 <_ZNK5spark9JSONValue5toIntEv>
   b587a:	6028      	str	r0, [r5, #0]
   b587c:	a801      	add	r0, sp, #4
   b587e:	f7ff f9f5 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5882:	e7dd      	b.n	b5840 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5884:	a805      	add	r0, sp, #20
   b5886:	f7ff f9f1 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b588a:	b00a      	add	sp, #40	; 0x28
   b588c:	bd70      	pop	{r4, r5, r6, pc}
   b588e:	bf00      	nop
   b5890:	000b9684 	.word	0x000b9684

000b5894 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5894:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5896:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5898:	4620      	mov	r0, r4
   b589a:	4913      	ldr	r1, [pc, #76]	; (b58e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b589c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b589e:	f7fe fbbd 	bl	b401c <strcmp>
   b58a2:	b950      	cbnz	r0, b58ba <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b58a4:	f7ff fc74 	bl	b5190 <_Z16_fetch_usbserialv>
   b58a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b58ac:	f7ff fc60 	bl	b5170 <_ZN9USBSerial5beginEl>
}
   b58b0:	b003      	add	sp, #12
   b58b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b58b6:	f7ff bc6b 	b.w	b5190 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b58ba:	490c      	ldr	r1, [pc, #48]	; (b58ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b58bc:	4620      	mov	r0, r4
   b58be:	f7fe fbad 	bl	b401c <strcmp>
   b58c2:	b978      	cbnz	r0, b58e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b58c4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b58c8:	a901      	add	r1, sp, #4
   b58ca:	4628      	mov	r0, r5
        int baud = 9600;
   b58cc:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b58ce:	f7ff ffaf 	bl	b5830 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b58d2:	f003 fae5 	bl	b8ea0 <_Z22__fetch_global_Serial1v>
   b58d6:	9901      	ldr	r1, [sp, #4]
   b58d8:	f003 f978 	bl	b8bcc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b58dc:	f003 fae0 	bl	b8ea0 <_Z22__fetch_global_Serial1v>
}
   b58e0:	b003      	add	sp, #12
   b58e2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b58e4:	2000      	movs	r0, #0
   b58e6:	e7fb      	b.n	b58e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b58e8:	000b9689 	.word	0x000b9689
   b58ec:	000b9690 	.word	0x000b9690

000b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b58f2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b58f6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b58fa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b58fe:	42ae      	cmp	r6, r5
   b5900:	d005      	beq.n	b590e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5902:	f105 0008 	add.w	r0, r5, #8
   b5906:	f7ff fff3 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b590a:	3514      	adds	r5, #20
   b590c:	e7f7      	b.n	b58fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b590e:	6820      	ldr	r0, [r4, #0]
   b5910:	f7ff f884 	bl	b4a1c <free>
}
   b5914:	4620      	mov	r0, r4
   b5916:	bd70      	pop	{r4, r5, r6, pc}

000b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5918:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b591a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b591e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5920:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5924:	42ae      	cmp	r6, r5
   b5926:	d004      	beq.n	b5932 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5928:	4628      	mov	r0, r5
   b592a:	f003 f9a5 	bl	b8c78 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b592e:	3510      	adds	r5, #16
   b5930:	e7f8      	b.n	b5924 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5932:	6820      	ldr	r0, [r4, #0]
   b5934:	f7ff f872 	bl	b4a1c <free>
}
   b5938:	4620      	mov	r0, r4
   b593a:	bd70      	pop	{r4, r5, r6, pc}

000b593c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b593c:	b510      	push	{r4, lr}
   b593e:	4604      	mov	r4, r0
   b5940:	300c      	adds	r0, #12
   b5942:	f7ff ffd5 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5946:	4620      	mov	r0, r4
   b5948:	f7ff ffe6 	bl	b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b594c:	4620      	mov	r0, r4
   b594e:	bd10      	pop	{r4, pc}

000b5950 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5950:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5952:	4b04      	ldr	r3, [pc, #16]	; (b5964 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5954:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b5956:	f840 3b04 	str.w	r3, [r0], #4
   b595a:	f7ff ffef 	bl	b593c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b595e:	4620      	mov	r0, r4
   b5960:	bd10      	pop	{r4, pc}
   b5962:	bf00      	nop
   b5964:	000b9570 	.word	0x000b9570

000b5968 <_ZN5spark16StreamLogHandlerD0Ev>:
   b5968:	b510      	push	{r4, lr}
   b596a:	4604      	mov	r4, r0
   b596c:	f7ff fff0 	bl	b5950 <_ZN5spark16StreamLogHandlerD1Ev>
   b5970:	4620      	mov	r0, r4
   b5972:	2124      	movs	r1, #36	; 0x24
   b5974:	f7fe fba3 	bl	b40be <_ZdlPvj>
   b5978:	4620      	mov	r0, r4
   b597a:	bd10      	pop	{r4, pc}

000b597c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b597c:	b510      	push	{r4, lr}
   b597e:	4b03      	ldr	r3, [pc, #12]	; (b598c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5980:	6003      	str	r3, [r0, #0]
   b5982:	4604      	mov	r4, r0
   b5984:	f7ff ffe4 	bl	b5950 <_ZN5spark16StreamLogHandlerD1Ev>
   b5988:	4620      	mov	r0, r4
   b598a:	bd10      	pop	{r4, pc}
   b598c:	000b9730 	.word	0x000b9730

000b5990 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5990:	b510      	push	{r4, lr}
   b5992:	4604      	mov	r4, r0
   b5994:	f7ff fff2 	bl	b597c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5998:	4620      	mov	r0, r4
   b599a:	2124      	movs	r1, #36	; 0x24
   b599c:	f7fe fb8f 	bl	b40be <_ZdlPvj>
   b59a0:	4620      	mov	r0, r4
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b59a4:	2200      	movs	r2, #0
   b59a6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b59aa:	b510      	push	{r4, lr}
        capacity_(0) {
   b59ac:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b59ae:	680c      	ldr	r4, [r1, #0]
   b59b0:	6004      	str	r4, [r0, #0]
   b59b2:	684c      	ldr	r4, [r1, #4]
   b59b4:	6044      	str	r4, [r0, #4]
   b59b6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b59b8:	600a      	str	r2, [r1, #0]
   b59ba:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b59bc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b59be:	608a      	str	r2, [r1, #8]
}
   b59c0:	bd10      	pop	{r4, pc}

000b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b59c2:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b59c4:	6803      	ldr	r3, [r0, #0]
   b59c6:	4604      	mov	r4, r0
   b59c8:	6818      	ldr	r0, [r3, #0]
   b59ca:	f7fe fe91 	bl	b46f0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b59ce:	4620      	mov	r0, r4
   b59d0:	bd10      	pop	{r4, pc}
	...

000b59d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b59d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59d8:	b087      	sub	sp, #28
   b59da:	4680      	mov	r8, r0
   b59dc:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b59de:	4b1c      	ldr	r3, [pc, #112]	; (b5a50 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b59e0:	685b      	ldr	r3, [r3, #4]
   b59e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b59e6:	4689      	mov	r9, r1
   b59e8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b59ea:	b96b      	cbnz	r3, b5a08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b59ec:	f7ff febe 	bl	b576c <_ZN5spark10LogManager8instanceEv>
   b59f0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b59f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b59f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59f8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b59fa:	f7ff fd67 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b59fe:	7b23      	ldrb	r3, [r4, #12]
   b5a00:	b12b      	cbz	r3, b5a0e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5a02:	a805      	add	r0, sp, #20
   b5a04:	f7ff ffdd 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5a08:	b007      	add	sp, #28
   b5a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b5a0e:	2301      	movs	r3, #1
   b5a10:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5a12:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5a16:	fa5f f989 	uxtb.w	r9, r9
   b5a1a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5a1e:	45aa      	cmp	sl, r5
   b5a20:	d012      	beq.n	b5a48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5a22:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5a26:	4631      	mov	r1, r6
   b5a28:	1d38      	adds	r0, r7, #4
   b5a2a:	f7ff fdf3 	bl	b5614 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5a2e:	4581      	cmp	r9, r0
   b5a30:	d3f5      	bcc.n	b5a1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5a32:	683b      	ldr	r3, [r7, #0]
   b5a34:	9a03      	ldr	r2, [sp, #12]
   b5a36:	9200      	str	r2, [sp, #0]
   b5a38:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5a3c:	464a      	mov	r2, r9
   b5a3e:	4633      	mov	r3, r6
   b5a40:	4641      	mov	r1, r8
   b5a42:	4638      	mov	r0, r7
   b5a44:	47d8      	blx	fp
   b5a46:	e7ea      	b.n	b5a1e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b5a48:	2300      	movs	r3, #0
   b5a4a:	7323      	strb	r3, [r4, #12]
   b5a4c:	e7d9      	b.n	b5a02 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5a4e:	bf00      	nop
   b5a50:	e000ed00 	.word	0xe000ed00

000b5a54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a58:	469b      	mov	fp, r3
   b5a5a:	4b1a      	ldr	r3, [pc, #104]	; (b5ac4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5a5c:	685b      	ldr	r3, [r3, #4]
   b5a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5a62:	4680      	mov	r8, r0
   b5a64:	4689      	mov	r9, r1
   b5a66:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b5a68:	b96b      	cbnz	r3, b5a86 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b5a6a:	f7ff fe7f 	bl	b576c <_ZN5spark10LogManager8instanceEv>
   b5a6e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5a70:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5a74:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a76:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5a78:	f7ff fd28 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5a7c:	7b23      	ldrb	r3, [r4, #12]
   b5a7e:	b12b      	cbz	r3, b5a8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5a80:	a801      	add	r0, sp, #4
   b5a82:	f7ff ff9e 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a86:	b003      	add	sp, #12
   b5a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5a8c:	2301      	movs	r3, #1
   b5a8e:	7323      	strb	r3, [r4, #12]
   b5a90:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5a94:	b2f6      	uxtb	r6, r6
   b5a96:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5a9a:	4555      	cmp	r5, sl
   b5a9c:	d00e      	beq.n	b5abc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5a9e:	f855 7b04 	ldr.w	r7, [r5], #4
   b5aa2:	4659      	mov	r1, fp
   b5aa4:	1d38      	adds	r0, r7, #4
   b5aa6:	f7ff fdb5 	bl	b5614 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5aaa:	4286      	cmp	r6, r0
   b5aac:	d3f5      	bcc.n	b5a9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5aae:	683b      	ldr	r3, [r7, #0]
   b5ab0:	464a      	mov	r2, r9
   b5ab2:	68db      	ldr	r3, [r3, #12]
   b5ab4:	4641      	mov	r1, r8
   b5ab6:	4638      	mov	r0, r7
   b5ab8:	4798      	blx	r3
   b5aba:	e7ee      	b.n	b5a9a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5abc:	2300      	movs	r3, #0
   b5abe:	7323      	strb	r3, [r4, #12]
   b5ac0:	e7de      	b.n	b5a80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5ac2:	bf00      	nop
   b5ac4:	e000ed00 	.word	0xe000ed00

000b5ac8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5ac8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5acc:	4b16      	ldr	r3, [pc, #88]	; (b5b28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5ace:	685b      	ldr	r3, [r3, #4]
   b5ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5ad4:	4605      	mov	r5, r0
   b5ad6:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5ad8:	bb1b      	cbnz	r3, b5b22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b5ada:	f7ff fe47 	bl	b576c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5ade:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5ae2:	4604      	mov	r4, r0
   b5ae4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5ae6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ae8:	f7ff fcf0 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
   b5aec:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5af0:	2446      	movs	r4, #70	; 0x46
   b5af2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5af6:	45b0      	cmp	r8, r6
   b5af8:	d109      	bne.n	b5b0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b5afa:	a801      	add	r0, sp, #4
   b5afc:	f7ff ff61 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5b00:	42a5      	cmp	r5, r4
   b5b02:	bfb4      	ite	lt
   b5b04:	2000      	movlt	r0, #0
   b5b06:	2001      	movge	r0, #1
}
   b5b08:	b002      	add	sp, #8
   b5b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b5b0e:	f856 0b04 	ldr.w	r0, [r6], #4
   b5b12:	4639      	mov	r1, r7
   b5b14:	3004      	adds	r0, #4
   b5b16:	f7ff fd7d 	bl	b5614 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b5b1a:	4284      	cmp	r4, r0
   b5b1c:	bfa8      	it	ge
   b5b1e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5b20:	e7e9      	b.n	b5af6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5b22:	2000      	movs	r0, #0
   b5b24:	e7f0      	b.n	b5b08 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5b26:	bf00      	nop
   b5b28:	e000ed00 	.word	0xe000ed00

000b5b2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b2e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5b32:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5b34:	4604      	mov	r4, r0
   b5b36:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b38:	db0d      	blt.n	b5b56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b5b3a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5b3c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5b3e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5b40:	dd04      	ble.n	b5b4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5b42:	00b9      	lsls	r1, r7, #2
   b5b44:	f7fe ff72 	bl	b4a2c <realloc>
            if (!d) {
   b5b48:	b918      	cbnz	r0, b5b52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b5b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5b4c:	f7fe ff66 	bl	b4a1c <free>
        T* d = nullptr;
   b5b50:	2000      	movs	r0, #0
        data_ = d;
   b5b52:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5b54:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5b56:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5b58:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5b5a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5b5e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b60:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5b64:	1d08      	adds	r0, r1, #4
   b5b66:	f003 fb05 	bl	b9174 <memmove>
    new(p) T(std::move(value));
   b5b6a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5b6e:	6863      	ldr	r3, [r4, #4]
   b5b70:	3301      	adds	r3, #1
   b5b72:	6063      	str	r3, [r4, #4]
    return true;
   b5b74:	2001      	movs	r0, #1
   b5b76:	e7e8      	b.n	b5b4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b5b78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b5b7a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5b7e:	4604      	mov	r4, r0
   b5b80:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5b82:	9301      	str	r3, [sp, #4]
   b5b84:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b5b86:	f7ff fca1 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b5b8a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5b8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5b92:	4293      	cmp	r3, r2
   b5b94:	4619      	mov	r1, r3
   b5b96:	d00b      	beq.n	b5bb0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5b98:	6809      	ldr	r1, [r1, #0]
   b5b9a:	42a9      	cmp	r1, r5
   b5b9c:	f103 0304 	add.w	r3, r3, #4
   b5ba0:	d1f7      	bne.n	b5b92 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5ba2:	a801      	add	r0, sp, #4
   b5ba4:	f7ff ff0d 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5ba8:	2500      	movs	r5, #0
}
   b5baa:	4628      	mov	r0, r5
   b5bac:	b003      	add	sp, #12
   b5bae:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5bb0:	4629      	mov	r1, r5
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	f7ff ffba 	bl	b5b2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5bb8:	4605      	mov	r5, r0
   b5bba:	2800      	cmp	r0, #0
   b5bbc:	d0f1      	beq.n	b5ba2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5bbe:	6863      	ldr	r3, [r4, #4]
   b5bc0:	2b01      	cmp	r3, #1
   b5bc2:	d101      	bne.n	b5bc8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5bc4:	f7ff fdee 	bl	b57a4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5bc8:	a801      	add	r0, sp, #4
   b5bca:	f7ff fefa 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5bce:	e7ec      	b.n	b5baa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5bd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bd0:	b570      	push	{r4, r5, r6, lr}
   b5bd2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5bd4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5bd8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b5bda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5bde:	4282      	cmp	r2, r0
   b5be0:	d00f      	beq.n	b5c02 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5be2:	4601      	mov	r1, r0
            if (*p == value) {
   b5be4:	681d      	ldr	r5, [r3, #0]
   b5be6:	f851 6b04 	ldr.w	r6, [r1], #4
   b5bea:	42ae      	cmp	r6, r5
   b5bec:	d107      	bne.n	b5bfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5bee:	1a52      	subs	r2, r2, r1
   b5bf0:	f003 fac0 	bl	b9174 <memmove>
    --size_;
   b5bf4:	6863      	ldr	r3, [r4, #4]
   b5bf6:	3b01      	subs	r3, #1
   b5bf8:	6063      	str	r3, [r4, #4]
    return true;
   b5bfa:	2001      	movs	r0, #1
}
   b5bfc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b5bfe:	4608      	mov	r0, r1
   b5c00:	e7ed      	b.n	b5bde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5c02:	2000      	movs	r0, #0
   b5c04:	e7fa      	b.n	b5bfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5c06 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5c06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5c08:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5c0c:	4604      	mov	r4, r0
   b5c0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5c10:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c12:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5c14:	f7ff fc5a 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5c18:	a901      	add	r1, sp, #4
   b5c1a:	4620      	mov	r0, r4
   b5c1c:	f7ff ffd8 	bl	b5bd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5c20:	b118      	cbz	r0, b5c2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5c22:	6863      	ldr	r3, [r4, #4]
   b5c24:	b90b      	cbnz	r3, b5c2a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5c26:	f7ff fdc9 	bl	b57bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5c2a:	a803      	add	r0, sp, #12
   b5c2c:	f7ff fec9 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5c30:	b004      	add	sp, #16
   b5c32:	bd10      	pop	{r4, pc}

000b5c34 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5c34:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5c36:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5c3a:	2318      	movs	r3, #24
   b5c3c:	4604      	mov	r4, r0
   b5c3e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5c42:	42ae      	cmp	r6, r5
   b5c44:	d015      	beq.n	b5c72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5c46:	f105 0110 	add.w	r1, r5, #16
   b5c4a:	4620      	mov	r0, r4
   b5c4c:	f7ff ffc0 	bl	b5bd0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5c50:	6863      	ldr	r3, [r4, #4]
   b5c52:	b90b      	cbnz	r3, b5c58 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5c54:	f7ff fdb2 	bl	b57bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5c58:	69e0      	ldr	r0, [r4, #28]
   b5c5a:	6929      	ldr	r1, [r5, #16]
   b5c5c:	6803      	ldr	r3, [r0, #0]
   b5c5e:	68db      	ldr	r3, [r3, #12]
   b5c60:	4798      	blx	r3
        if (h.stream) {
   b5c62:	6969      	ldr	r1, [r5, #20]
   b5c64:	b119      	cbz	r1, b5c6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5c66:	6a20      	ldr	r0, [r4, #32]
   b5c68:	6803      	ldr	r3, [r0, #0]
   b5c6a:	68db      	ldr	r3, [r3, #12]
   b5c6c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5c6e:	3518      	adds	r5, #24
   b5c70:	e7e7      	b.n	b5c42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5c72:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5c76:	2618      	movs	r6, #24
   b5c78:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5c7c:	42ae      	cmp	r6, r5
   b5c7e:	d004      	beq.n	b5c8a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5c80:	4628      	mov	r0, r5
   b5c82:	f002 fff9 	bl	b8c78 <_ZN6StringD1Ev>
   b5c86:	3518      	adds	r5, #24
   b5c88:	e7f8      	b.n	b5c7c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5c8a:	2300      	movs	r3, #0
   b5c8c:	6163      	str	r3, [r4, #20]
}
   b5c8e:	bd70      	pop	{r4, r5, r6, pc}

000b5c90 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c92:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5c94:	f7ff fd92 	bl	b57bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5c98:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5c9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5c9e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5ca0:	f7ff fc14 	bl	b54cc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5ca4:	4620      	mov	r0, r4
   b5ca6:	f7ff ffc5 	bl	b5c34 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5caa:	a801      	add	r0, sp, #4
   b5cac:	f7ff fe89 	bl	b59c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5cb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5cb2:	b108      	cbz	r0, b5cb8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5cb4:	f7fe fd0c 	bl	b46d0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5cb8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5cbc:	2618      	movs	r6, #24
   b5cbe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5cc2:	42ae      	cmp	r6, r5
   b5cc4:	d004      	beq.n	b5cd0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5cc6:	4628      	mov	r0, r5
   b5cc8:	f002 ffd6 	bl	b8c78 <_ZN6StringD1Ev>
   b5ccc:	3518      	adds	r5, #24
   b5cce:	e7f8      	b.n	b5cc2 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5cd0:	6920      	ldr	r0, [r4, #16]
   b5cd2:	f7fe fea3 	bl	b4a1c <free>
   b5cd6:	6820      	ldr	r0, [r4, #0]
   b5cd8:	f7fe fea0 	bl	b4a1c <free>
}
   b5cdc:	4620      	mov	r0, r4
   b5cde:	b002      	add	sp, #8
   b5ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5ce4 <__tcf_2>:
    static LogManager mgr;
   b5ce4:	4801      	ldr	r0, [pc, #4]	; (b5cec <__tcf_2+0x8>)
   b5ce6:	f7ff bfd3 	b.w	b5c90 <_ZN5spark10LogManagerD1Ev>
   b5cea:	bf00      	nop
   b5cec:	2003e6f4 	.word	0x2003e6f4

000b5cf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5cf0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5cf4:	4604      	mov	r4, r0
   b5cf6:	460d      	mov	r5, r1
   b5cf8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5cfa:	d915      	bls.n	b5d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5cfc:	4290      	cmp	r0, r2
   b5cfe:	d214      	bcs.n	b5d2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5d00:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5d04:	1a75      	subs	r5, r6, r1
   b5d06:	f1a1 0714 	sub.w	r7, r1, #20
   b5d0a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d0c:	42b7      	cmp	r7, r6
   b5d0e:	d01a      	beq.n	b5d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5d10:	b11c      	cbz	r4, b5d1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5d12:	4631      	mov	r1, r6
   b5d14:	4620      	mov	r0, r4
   b5d16:	f7ff fc2d 	bl	b5574 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5d1a:	f106 0008 	add.w	r0, r6, #8
   b5d1e:	f7ff fde7 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5d22:	3e14      	subs	r6, #20
   b5d24:	3c14      	subs	r4, #20
   b5d26:	e7f1      	b.n	b5d0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5d28:	d00d      	beq.n	b5d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5d2a:	42b5      	cmp	r5, r6
   b5d2c:	d00b      	beq.n	b5d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5d2e:	b11c      	cbz	r4, b5d38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5d30:	4629      	mov	r1, r5
   b5d32:	4620      	mov	r0, r4
   b5d34:	f7ff fc1e 	bl	b5574 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5d38:	f105 0008 	add.w	r0, r5, #8
   b5d3c:	f7ff fdd8 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5d40:	3514      	adds	r5, #20
   b5d42:	3414      	adds	r4, #20
   b5d44:	e7f1      	b.n	b5d2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5d48:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d4c:	4604      	mov	r4, r0
   b5d4e:	460d      	mov	r5, r1
   b5d50:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d52:	d914      	bls.n	b5d7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5d54:	4290      	cmp	r0, r2
   b5d56:	d213      	bcs.n	b5d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5d58:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5d5c:	1a75      	subs	r5, r6, r1
   b5d5e:	f1a1 0710 	sub.w	r7, r1, #16
   b5d62:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d64:	42b7      	cmp	r7, r6
   b5d66:	d018      	beq.n	b5d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5d68:	b11c      	cbz	r4, b5d72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5d6a:	4631      	mov	r1, r6
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	f002 ffff 	bl	b8d70 <_ZN6StringC1EOS_>
                end->~T();
   b5d72:	4630      	mov	r0, r6
   b5d74:	f002 ff80 	bl	b8c78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5d78:	3e10      	subs	r6, #16
   b5d7a:	3c10      	subs	r4, #16
   b5d7c:	e7f2      	b.n	b5d64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5d7e:	d00c      	beq.n	b5d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5d80:	42b5      	cmp	r5, r6
   b5d82:	d00a      	beq.n	b5d9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5d84:	b11c      	cbz	r4, b5d8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5d86:	4629      	mov	r1, r5
   b5d88:	4620      	mov	r0, r4
   b5d8a:	f002 fff1 	bl	b8d70 <_ZN6StringC1EOS_>
                p->~T();
   b5d8e:	4628      	mov	r0, r5
   b5d90:	f002 ff72 	bl	b8c78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d94:	3510      	adds	r5, #16
   b5d96:	3410      	adds	r4, #16
   b5d98:	e7f2      	b.n	b5d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5d9c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5d9e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5da0:	4605      	mov	r5, r0
        if (n > 0) {
   b5da2:	dd11      	ble.n	b5dc8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5da4:	0130      	lsls	r0, r6, #4
   b5da6:	f7fe fe31 	bl	b4a0c <malloc>
            if (!d) {
   b5daa:	4604      	mov	r4, r0
   b5dac:	b158      	cbz	r0, b5dc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5dae:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5db2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5db6:	f7ff ffc7 	bl	b5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5dba:	6828      	ldr	r0, [r5, #0]
   b5dbc:	f7fe fe2e 	bl	b4a1c <free>
        data_ = d;
   b5dc0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5dc2:	60ae      	str	r6, [r5, #8]
        return true;
   b5dc4:	2001      	movs	r0, #1
    }
   b5dc6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5dc8:	2400      	movs	r4, #0
   b5dca:	e7f6      	b.n	b5dba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5dd0:	4690      	mov	r8, r2
   b5dd2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5dd4:	2300      	movs	r3, #0
   b5dd6:	9103      	str	r1, [sp, #12]
    return size_;
   b5dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5ddc:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5dde:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5de0:	4299      	cmp	r1, r3
        capacity_(0) {
   b5de2:	e9c0 3300 	strd	r3, r3, [r0]
   b5de6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5dee:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5df2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5df4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5df6:	dc23      	bgt.n	b5e40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5df8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5dfc:	2314      	movs	r3, #20
   b5dfe:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5e02:	42af      	cmp	r7, r5
   b5e04:	d03b      	beq.n	b5e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5e06:	4629      	mov	r1, r5
   b5e08:	a80b      	add	r0, sp, #44	; 0x2c
   b5e0a:	f002 ffb1 	bl	b8d70 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5e0e:	a90b      	add	r1, sp, #44	; 0x2c
   b5e10:	a80f      	add	r0, sp, #60	; 0x3c
   b5e12:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5e14:	f002 ffac 	bl	b8d70 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e18:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5e1c:	4299      	cmp	r1, r3
   b5e1e:	da1b      	bge.n	b5e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5e20:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5e24:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5e28:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5e2c:	4631      	mov	r1, r6
   b5e2e:	f106 0010 	add.w	r0, r6, #16
   b5e32:	f7ff ff89 	bl	b5d48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5e36:	b9ee      	cbnz	r6, b5e74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5e3a:	3301      	adds	r3, #1
   b5e3c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5e3e:	e011      	b.n	b5e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5e40:	a808      	add	r0, sp, #32
   b5e42:	f7ff ffab 	bl	b5d9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5e46:	2800      	cmp	r0, #0
   b5e48:	d1d6      	bne.n	b5df8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5e4a:	a808      	add	r0, sp, #32
   b5e4c:	f7ff fd64 	bl	b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5e50:	4620      	mov	r0, r4
   b5e52:	b015      	add	sp, #84	; 0x54
   b5e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e58:	3101      	adds	r1, #1
   b5e5a:	a808      	add	r0, sp, #32
   b5e5c:	f7ff ff9e 	bl	b5d9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5e60:	2800      	cmp	r0, #0
   b5e62:	d1dd      	bne.n	b5e20 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5e64:	a80f      	add	r0, sp, #60	; 0x3c
   b5e66:	f002 ff07 	bl	b8c78 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5e6a:	a80b      	add	r0, sp, #44	; 0x2c
   b5e6c:	f002 ff04 	bl	b8c78 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5e70:	3514      	adds	r5, #20
   b5e72:	e7c6      	b.n	b5e02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5e74:	a90f      	add	r1, sp, #60	; 0x3c
   b5e76:	4630      	mov	r0, r6
   b5e78:	f002 ff7a 	bl	b8d70 <_ZN6StringC1EOS_>
   b5e7c:	e7dc      	b.n	b5e38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5e7e:	2600      	movs	r6, #0
   b5e80:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5e84:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5e86:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5e8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5e8e:	429e      	cmp	r6, r3
   b5e90:	da7c      	bge.n	b5f8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5e92:	0133      	lsls	r3, r6, #4
   b5e94:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5e96:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5e98:	b90b      	cbnz	r3, b5e9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5e9a:	3601      	adds	r6, #1
   b5e9c:	e7f5      	b.n	b5e8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5e9e:	2300      	movs	r3, #0
   b5ea0:	9307      	str	r3, [sp, #28]
   b5ea2:	fb09 f306 	mul.w	r3, r9, r6
   b5ea6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5ea8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5eaa:	a907      	add	r1, sp, #28
   b5eac:	a806      	add	r0, sp, #24
   b5eae:	f7ff fae6 	bl	b547e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5eb2:	4682      	mov	sl, r0
   b5eb4:	2800      	cmp	r0, #0
   b5eb6:	d0f0      	beq.n	b5e9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5eb8:	f04f 0300 	mov.w	r3, #0
   b5ebc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ec0:	4601      	mov	r1, r0
   b5ec2:	9a07      	ldr	r2, [sp, #28]
   b5ec4:	f10d 0317 	add.w	r3, sp, #23
   b5ec8:	4628      	mov	r0, r5
   b5eca:	f7ff fb67 	bl	b559c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ece:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ed2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ed4:	2f00      	cmp	r7, #0
   b5ed6:	d14a      	bne.n	b5f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5ed8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5edc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5ee0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5ee8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5eec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5ef0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ef2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5ef6:	4293      	cmp	r3, r2
   b5ef8:	db17      	blt.n	b5f2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5efa:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5efe:	f1ba 0f00 	cmp.w	sl, #0
   b5f02:	dd30      	ble.n	b5f66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5f04:	fb09 f00a 	mul.w	r0, r9, sl
   b5f08:	f7fe fd80 	bl	b4a0c <malloc>
            if (!d) {
   b5f0c:	4683      	mov	fp, r0
   b5f0e:	b360      	cbz	r0, b5f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5f10:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5f14:	fb09 1202 	mla	r2, r9, r2, r1
   b5f18:	f7ff feea 	bl	b5cf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5f1c:	6828      	ldr	r0, [r5, #0]
   b5f1e:	f7fe fd7d 	bl	b4a1c <free>
        data_ = d;
   b5f22:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5f26:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5f2a:	682b      	ldr	r3, [r5, #0]
   b5f2c:	9a01      	ldr	r2, [sp, #4]
   b5f2e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5f32:	686a      	ldr	r2, [r5, #4]
   b5f34:	4651      	mov	r1, sl
   b5f36:	fb09 3202 	mla	r2, r9, r2, r3
   b5f3a:	f10a 0014 	add.w	r0, sl, #20
   b5f3e:	f7ff fed7 	bl	b5cf0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5f42:	f1ba 0f00 	cmp.w	sl, #0
   b5f46:	d003      	beq.n	b5f50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5f48:	a90f      	add	r1, sp, #60	; 0x3c
   b5f4a:	4650      	mov	r0, sl
   b5f4c:	f7ff fb12 	bl	b5574 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5f50:	686b      	ldr	r3, [r5, #4]
   b5f52:	3301      	adds	r3, #1
   b5f54:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5f56:	a811      	add	r0, sp, #68	; 0x44
   b5f58:	f7ff fcca 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5f5c:	b13f      	cbz	r7, b5f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5f5e:	a80b      	add	r0, sp, #44	; 0x2c
   b5f60:	f7ff fcc6 	bl	b58f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5f64:	e771      	b.n	b5e4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5f66:	46bb      	mov	fp, r7
   b5f68:	e7d8      	b.n	b5f1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5f6a:	2701      	movs	r7, #1
   b5f6c:	e7f3      	b.n	b5f56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5f6e:	9b01      	ldr	r3, [sp, #4]
   b5f70:	682d      	ldr	r5, [r5, #0]
   b5f72:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5f76:	9b06      	ldr	r3, [sp, #24]
   b5f78:	781b      	ldrb	r3, [r3, #0]
   b5f7a:	b92b      	cbnz	r3, b5f88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5f7c:	f8d8 3000 	ldr.w	r3, [r8]
   b5f80:	9a02      	ldr	r2, [sp, #8]
   b5f82:	4413      	add	r3, r2
   b5f84:	7c1b      	ldrb	r3, [r3, #16]
   b5f86:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5f88:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5f8a:	e78e      	b.n	b5eaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f8c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5f8e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f90:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5f92:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f94:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5f96:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5f9a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5f9c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5f9e:	60a2      	str	r2, [r4, #8]
   b5fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5fa2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5fa4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5fa6:	60e2      	str	r2, [r4, #12]
   b5fa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5faa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5fac:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5fae:	6122      	str	r2, [r4, #16]
   b5fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5fb2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5fb4:	9b03      	ldr	r3, [sp, #12]
   b5fb6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5fb8:	6162      	str	r2, [r4, #20]
   b5fba:	7623      	strb	r3, [r4, #24]
   b5fbc:	e7cf      	b.n	b5f5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5fc0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5fc2:	4604      	mov	r4, r0
   b5fc4:	b087      	sub	sp, #28
   b5fc6:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5fc8:	4626      	mov	r6, r4
        stream_(&stream) {
   b5fca:	4619      	mov	r1, r3
   b5fcc:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5fce:	4617      	mov	r7, r2
        stream_(&stream) {
   b5fd0:	f7fe fa01 	bl	b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5fd4:	4b0b      	ldr	r3, [pc, #44]	; (b6004 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5fd6:	f846 3b04 	str.w	r3, [r6], #4
   b5fda:	4669      	mov	r1, sp
   b5fdc:	a803      	add	r0, sp, #12
   b5fde:	f7fe f9fa 	bl	b43d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5fe2:	aa03      	add	r2, sp, #12
   b5fe4:	4639      	mov	r1, r7
   b5fe6:	4630      	mov	r0, r6
   b5fe8:	f7ff fef0 	bl	b5dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5fec:	a803      	add	r0, sp, #12
   b5fee:	f7fe f9b1 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5ff2:	4668      	mov	r0, sp
   b5ff4:	f7fe f9ae 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5ff8:	4b03      	ldr	r3, [pc, #12]	; (b6008 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5ffa:	6023      	str	r3, [r4, #0]
}
   b5ffc:	4620      	mov	r0, r4
        stream_(&stream) {
   b5ffe:	6225      	str	r5, [r4, #32]
}
   b6000:	b007      	add	sp, #28
   b6002:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6004:	000b9570 	.word	0x000b9570
   b6008:	000b9718 	.word	0x000b9718

000b600c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b600c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b600e:	460f      	mov	r7, r1
   b6010:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6012:	491d      	ldr	r1, [pc, #116]	; (b6088 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b6014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b6016:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b6018:	4616      	mov	r6, r2
   b601a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b601c:	f7fd fffe 	bl	b401c <strcmp>
   b6020:	b9c0      	cbnz	r0, b6054 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b6022:	b1a4      	cbz	r4, b604e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b6024:	4629      	mov	r1, r5
   b6026:	a801      	add	r0, sp, #4
   b6028:	f7ff fcbc 	bl	b59a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b602c:	4917      	ldr	r1, [pc, #92]	; (b608c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b602e:	2024      	movs	r0, #36	; 0x24
   b6030:	f002 ff5a 	bl	b8ee8 <_ZnwjRKSt9nothrow_t>
   b6034:	4605      	mov	r5, r0
   b6036:	b130      	cbz	r0, b6046 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b6038:	ab01      	add	r3, sp, #4
   b603a:	4632      	mov	r2, r6
   b603c:	4621      	mov	r1, r4
   b603e:	f7ff ffbf 	bl	b5fc0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6042:	4b13      	ldr	r3, [pc, #76]	; (b6090 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b6044:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6046:	a801      	add	r0, sp, #4
   b6048:	f7fe f984 	bl	b4354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b604c:	462c      	mov	r4, r5
}
   b604e:	4620      	mov	r0, r4
   b6050:	b005      	add	sp, #20
   b6052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b6054:	490f      	ldr	r1, [pc, #60]	; (b6094 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b6056:	4638      	mov	r0, r7
   b6058:	f7fd ffe0 	bl	b401c <strcmp>
   b605c:	b990      	cbnz	r0, b6084 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b605e:	2c00      	cmp	r4, #0
   b6060:	d0f5      	beq.n	b604e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b6062:	4629      	mov	r1, r5
   b6064:	a801      	add	r0, sp, #4
   b6066:	f7ff fc9d 	bl	b59a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b606a:	4908      	ldr	r1, [pc, #32]	; (b608c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b606c:	2024      	movs	r0, #36	; 0x24
   b606e:	f002 ff3b 	bl	b8ee8 <_ZnwjRKSt9nothrow_t>
   b6072:	4605      	mov	r5, r0
   b6074:	2800      	cmp	r0, #0
   b6076:	d0e6      	beq.n	b6046 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b6078:	ab01      	add	r3, sp, #4
   b607a:	4632      	mov	r2, r6
   b607c:	4621      	mov	r1, r4
   b607e:	f7ff ff9f 	bl	b5fc0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b6082:	e7e0      	b.n	b6046 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b6084:	2400      	movs	r4, #0
   b6086:	e7e2      	b.n	b604e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b6088:	000b9698 	.word	0x000b9698
   b608c:	000b9a28 	.word	0x000b9a28
   b6090:	000b9730 	.word	0x000b9730
   b6094:	000b969c 	.word	0x000b969c

000b6098 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b6098:	4b01      	ldr	r3, [pc, #4]	; (b60a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b609a:	4a02      	ldr	r2, [pc, #8]	; (b60a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b609c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b609e:	4770      	bx	lr
   b60a0:	2003e6f0 	.word	0x2003e6f0
   b60a4:	000b96ad 	.word	0x000b96ad

000b60a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b60a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b60ac:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b60ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b60b2:	4604      	mov	r4, r0
   b60b4:	460e      	mov	r6, r1
   b60b6:	4617      	mov	r7, r2
   b60b8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b60ba:	f7ff f869 	bl	b5190 <_Z16_fetch_usbserialv>
   b60be:	4581      	cmp	r9, r0
   b60c0:	d04c      	beq.n	b615c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b60c2:	792b      	ldrb	r3, [r5, #4]
   b60c4:	0719      	lsls	r1, r3, #28
   b60c6:	d504      	bpl.n	b60d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b60c8:	696a      	ldr	r2, [r5, #20]
   b60ca:	4954      	ldr	r1, [pc, #336]	; (b621c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b60cc:	4620      	mov	r0, r4
   b60ce:	f7ff faca 	bl	b5666 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b60d2:	f1b8 0f00 	cmp.w	r8, #0
   b60d6:	d00d      	beq.n	b60f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b60d8:	215b      	movs	r1, #91	; 0x5b
   b60da:	4620      	mov	r0, r4
   b60dc:	f7ff fa3e 	bl	b555c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b60e0:	4641      	mov	r1, r8
   b60e2:	4620      	mov	r0, r4
   b60e4:	f7ff fa2b 	bl	b553e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b60e8:	6823      	ldr	r3, [r4, #0]
   b60ea:	494d      	ldr	r1, [pc, #308]	; (b6220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b60ec:	68db      	ldr	r3, [r3, #12]
   b60ee:	2202      	movs	r2, #2
   b60f0:	4620      	mov	r0, r4
   b60f2:	4798      	blx	r3
    if (attr.has_file) {
   b60f4:	792b      	ldrb	r3, [r5, #4]
   b60f6:	07da      	lsls	r2, r3, #31
   b60f8:	d523      	bpl.n	b6142 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b60fa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b60fe:	212f      	movs	r1, #47	; 0x2f
   b6100:	4640      	mov	r0, r8
   b6102:	f003 f8c6 	bl	b9292 <strrchr>
    if (s1) {
   b6106:	b108      	cbz	r0, b610c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b6108:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b610c:	4641      	mov	r1, r8
   b610e:	4620      	mov	r0, r4
   b6110:	f7ff fa15 	bl	b553e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b6114:	792b      	ldrb	r3, [r5, #4]
   b6116:	079b      	lsls	r3, r3, #30
   b6118:	d508      	bpl.n	b612c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b611a:	213a      	movs	r1, #58	; 0x3a
   b611c:	4620      	mov	r0, r4
   b611e:	f7ff fa1d 	bl	b555c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b6122:	68ea      	ldr	r2, [r5, #12]
   b6124:	493f      	ldr	r1, [pc, #252]	; (b6224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b6126:	4620      	mov	r0, r4
   b6128:	f7ff fa9d 	bl	b5666 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b612c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b612e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b6130:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b6134:	68db      	ldr	r3, [r3, #12]
   b6136:	bf14      	ite	ne
   b6138:	493b      	ldrne	r1, [pc, #236]	; (b6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b613a:	493c      	ldreq	r1, [pc, #240]	; (b622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b613c:	2202      	movs	r2, #2
            write(": ", 2);
   b613e:	4620      	mov	r0, r4
   b6140:	4798      	blx	r3
    if (attr.has_function) {
   b6142:	792b      	ldrb	r3, [r5, #4]
   b6144:	0758      	lsls	r0, r3, #29
   b6146:	d51d      	bpl.n	b6184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6148:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b614a:	460b      	mov	r3, r1
   b614c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b614e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6152:	b160      	cbz	r0, b616e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b6154:	2820      	cmp	r0, #32
   b6156:	d108      	bne.n	b616a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b6158:	4619      	mov	r1, r3
   b615a:	e7f7      	b.n	b614c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b615c:	4834      	ldr	r0, [pc, #208]	; (b6230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b615e:	f7fe fccc 	bl	b4afa <_ZN5spark12NetworkClass9listeningEv>
   b6162:	2800      	cmp	r0, #0
   b6164:	d0ad      	beq.n	b60c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b6166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b616a:	2828      	cmp	r0, #40	; 0x28
   b616c:	d1ee      	bne.n	b614c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b616e:	6823      	ldr	r3, [r4, #0]
   b6170:	1a52      	subs	r2, r2, r1
   b6172:	68db      	ldr	r3, [r3, #12]
   b6174:	4620      	mov	r0, r4
   b6176:	4798      	blx	r3
        write("(): ", 4);
   b6178:	6823      	ldr	r3, [r4, #0]
   b617a:	492e      	ldr	r1, [pc, #184]	; (b6234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b617c:	68db      	ldr	r3, [r3, #12]
   b617e:	2204      	movs	r2, #4
   b6180:	4620      	mov	r0, r4
   b6182:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b6184:	2100      	movs	r1, #0
   b6186:	4638      	mov	r0, r7
   b6188:	f7fe fba4 	bl	b48d4 <log_level_name>
   b618c:	4601      	mov	r1, r0
    write(s);
   b618e:	4620      	mov	r0, r4
   b6190:	f7ff f9d5 	bl	b553e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b6194:	6823      	ldr	r3, [r4, #0]
   b6196:	4925      	ldr	r1, [pc, #148]	; (b622c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b6198:	68db      	ldr	r3, [r3, #12]
   b619a:	2202      	movs	r2, #2
   b619c:	4620      	mov	r0, r4
   b619e:	4798      	blx	r3
    if (msg) {
   b61a0:	b11e      	cbz	r6, b61aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b61a2:	4631      	mov	r1, r6
   b61a4:	4620      	mov	r0, r4
   b61a6:	f7ff f9ca 	bl	b553e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b61aa:	792b      	ldrb	r3, [r5, #4]
   b61ac:	f013 0f30 	tst.w	r3, #48	; 0x30
   b61b0:	d02c      	beq.n	b620c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b61b2:	6823      	ldr	r3, [r4, #0]
   b61b4:	4920      	ldr	r1, [pc, #128]	; (b6238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b61b6:	68db      	ldr	r3, [r3, #12]
   b61b8:	2202      	movs	r2, #2
   b61ba:	4620      	mov	r0, r4
   b61bc:	4798      	blx	r3
        if (attr.has_code) {
   b61be:	792b      	ldrb	r3, [r5, #4]
   b61c0:	06d9      	lsls	r1, r3, #27
   b61c2:	d50a      	bpl.n	b61da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b61c4:	6823      	ldr	r3, [r4, #0]
   b61c6:	491d      	ldr	r1, [pc, #116]	; (b623c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b61c8:	68db      	ldr	r3, [r3, #12]
   b61ca:	2207      	movs	r2, #7
   b61cc:	4620      	mov	r0, r4
   b61ce:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b61d0:	69aa      	ldr	r2, [r5, #24]
   b61d2:	491b      	ldr	r1, [pc, #108]	; (b6240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b61d4:	4620      	mov	r0, r4
   b61d6:	f7ff fa46 	bl	b5666 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b61da:	792b      	ldrb	r3, [r5, #4]
   b61dc:	069a      	lsls	r2, r3, #26
   b61de:	d511      	bpl.n	b6204 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b61e0:	06db      	lsls	r3, r3, #27
   b61e2:	d505      	bpl.n	b61f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b61e4:	6823      	ldr	r3, [r4, #0]
   b61e6:	4910      	ldr	r1, [pc, #64]	; (b6228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b61e8:	68db      	ldr	r3, [r3, #12]
   b61ea:	2202      	movs	r2, #2
   b61ec:	4620      	mov	r0, r4
   b61ee:	4798      	blx	r3
            write("details = ", 10);
   b61f0:	6823      	ldr	r3, [r4, #0]
   b61f2:	4914      	ldr	r1, [pc, #80]	; (b6244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b61f4:	68db      	ldr	r3, [r3, #12]
   b61f6:	4620      	mov	r0, r4
   b61f8:	220a      	movs	r2, #10
   b61fa:	4798      	blx	r3
            write(attr.details);
   b61fc:	69e9      	ldr	r1, [r5, #28]
   b61fe:	4620      	mov	r0, r4
   b6200:	f7ff f99d 	bl	b553e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b6204:	215d      	movs	r1, #93	; 0x5d
   b6206:	4620      	mov	r0, r4
   b6208:	f7ff f9a8 	bl	b555c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b620c:	6823      	ldr	r3, [r4, #0]
   b620e:	490e      	ldr	r1, [pc, #56]	; (b6248 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b6210:	68db      	ldr	r3, [r3, #12]
   b6212:	4620      	mov	r0, r4
   b6214:	2202      	movs	r2, #2
}
   b6216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b621a:	4718      	bx	r3
   b621c:	000b96b1 	.word	0x000b96b1
   b6220:	000b96b8 	.word	0x000b96b8
   b6224:	000b94e8 	.word	0x000b94e8
   b6228:	000b96bb 	.word	0x000b96bb
   b622c:	000b96c0 	.word	0x000b96c0
   b6230:	2003e6a0 	.word	0x2003e6a0
   b6234:	000b96be 	.word	0x000b96be
   b6238:	000b96c3 	.word	0x000b96c3
   b623c:	000b96c6 	.word	0x000b96c6
   b6240:	000b96ce 	.word	0x000b96ce
   b6244:	000b96d1 	.word	0x000b96d1
   b6248:	000b96dc 	.word	0x000b96dc

000b624c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6250:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6252:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6254:	460d      	mov	r5, r1
   b6256:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b6258:	f7fe ff9a 	bl	b5190 <_Z16_fetch_usbserialv>
   b625c:	4287      	cmp	r7, r0
   b625e:	d007      	beq.n	b6270 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6260:	6a20      	ldr	r0, [r4, #32]
   b6262:	6803      	ldr	r3, [r0, #0]
   b6264:	4632      	mov	r2, r6
   b6266:	4629      	mov	r1, r5
   b6268:	68db      	ldr	r3, [r3, #12]
}
   b626a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b626e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6270:	4803      	ldr	r0, [pc, #12]	; (b6280 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6272:	f7fe fc42 	bl	b4afa <_ZN5spark12NetworkClass9listeningEv>
   b6276:	2800      	cmp	r0, #0
   b6278:	d0f2      	beq.n	b6260 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b627a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b627e:	bf00      	nop
   b6280:	2003e6a0 	.word	0x2003e6a0

000b6284 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6288:	b085      	sub	sp, #20
    return stream_;
   b628a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b628e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6290:	4605      	mov	r5, r0
   b6292:	460f      	mov	r7, r1
   b6294:	4690      	mov	r8, r2
   b6296:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6298:	f7fe ff7a 	bl	b5190 <_Z16_fetch_usbserialv>
   b629c:	4581      	cmp	r9, r0
   b629e:	d105      	bne.n	b62ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b62a0:	4849      	ldr	r0, [pc, #292]	; (b63c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b62a2:	f7fe fc2a 	bl	b4afa <_ZN5spark12NetworkClass9listeningEv>
   b62a6:	2800      	cmp	r0, #0
   b62a8:	f040 808a 	bne.w	b63c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b62ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b62ae:	4a47      	ldr	r2, [pc, #284]	; (b63cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b62b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b62b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b62b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   b62b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b62ba:	f88d 9008 	strb.w	r9, [sp, #8]
   b62be:	f7fe fe56 	bl	b4f6e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b62c2:	4649      	mov	r1, r9
   b62c4:	4640      	mov	r0, r8
   b62c6:	f7fe fb05 	bl	b48d4 <log_level_name>
    json.name("l", 1).value(s);
   b62ca:	4941      	ldr	r1, [pc, #260]	; (b63d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b62cc:	4680      	mov	r8, r0
   b62ce:	2201      	movs	r2, #1
   b62d0:	a801      	add	r0, sp, #4
   b62d2:	f7fe fedb 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b62d6:	4641      	mov	r1, r8
   b62d8:	f7ff f923 	bl	b5522 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b62dc:	b13f      	cbz	r7, b62ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b62de:	493d      	ldr	r1, [pc, #244]	; (b63d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b62e0:	2201      	movs	r2, #1
   b62e2:	a801      	add	r0, sp, #4
   b62e4:	f7fe fed2 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b62e8:	4639      	mov	r1, r7
   b62ea:	f7ff f91a 	bl	b5522 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b62ee:	b13e      	cbz	r6, b6300 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b62f0:	4939      	ldr	r1, [pc, #228]	; (b63d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b62f2:	2201      	movs	r2, #1
   b62f4:	a801      	add	r0, sp, #4
   b62f6:	f7fe fec9 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b62fa:	4631      	mov	r1, r6
   b62fc:	f7ff f911 	bl	b5522 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6300:	7923      	ldrb	r3, [r4, #4]
   b6302:	07df      	lsls	r7, r3, #31
   b6304:	d50e      	bpl.n	b6324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b6306:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b6308:	212f      	movs	r1, #47	; 0x2f
   b630a:	4630      	mov	r0, r6
   b630c:	f002 ffc1 	bl	b9292 <strrchr>
    if (s1) {
   b6310:	b100      	cbz	r0, b6314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b6312:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6314:	4931      	ldr	r1, [pc, #196]	; (b63dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6316:	2201      	movs	r2, #1
   b6318:	a801      	add	r0, sp, #4
   b631a:	f7fe feb7 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b631e:	4631      	mov	r1, r6
   b6320:	f7ff f8ff 	bl	b5522 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6324:	7923      	ldrb	r3, [r4, #4]
   b6326:	079e      	lsls	r6, r3, #30
   b6328:	d507      	bpl.n	b633a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b632a:	492d      	ldr	r1, [pc, #180]	; (b63e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b632c:	2202      	movs	r2, #2
   b632e:	a801      	add	r0, sp, #4
   b6330:	f7fe feac 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b6334:	68e1      	ldr	r1, [r4, #12]
   b6336:	f7fe fe27 	bl	b4f88 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b633a:	7923      	ldrb	r3, [r4, #4]
   b633c:	0758      	lsls	r0, r3, #29
   b633e:	d514      	bpl.n	b636a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6340:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6342:	4633      	mov	r3, r6
   b6344:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b6346:	f813 2b01 	ldrb.w	r2, [r3], #1
   b634a:	b12a      	cbz	r2, b6358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b634c:	2a20      	cmp	r2, #32
   b634e:	d101      	bne.n	b6354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6350:	461e      	mov	r6, r3
   b6352:	e7f7      	b.n	b6344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6354:	2a28      	cmp	r2, #40	; 0x28
   b6356:	d1f5      	bne.n	b6344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b6358:	4922      	ldr	r1, [pc, #136]	; (b63e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b635a:	2202      	movs	r2, #2
   b635c:	a801      	add	r0, sp, #4
   b635e:	f7fe fe95 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b6362:	1bba      	subs	r2, r7, r6
   b6364:	4631      	mov	r1, r6
   b6366:	f7fe fea1 	bl	b50ac <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b636a:	7923      	ldrb	r3, [r4, #4]
   b636c:	0719      	lsls	r1, r3, #28
   b636e:	d507      	bpl.n	b6380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6370:	491d      	ldr	r1, [pc, #116]	; (b63e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6372:	2201      	movs	r2, #1
   b6374:	a801      	add	r0, sp, #4
   b6376:	f7fe fe89 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b637a:	6961      	ldr	r1, [r4, #20]
   b637c:	f7fe fe16 	bl	b4fac <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6380:	7923      	ldrb	r3, [r4, #4]
   b6382:	06da      	lsls	r2, r3, #27
   b6384:	d508      	bpl.n	b6398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b6386:	2204      	movs	r2, #4
   b6388:	4918      	ldr	r1, [pc, #96]	; (b63ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b638a:	eb0d 0002 	add.w	r0, sp, r2
   b638e:	f7fe fe7d 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b6392:	69a1      	ldr	r1, [r4, #24]
   b6394:	f7fe fdf8 	bl	b4f88 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6398:	7923      	ldrb	r3, [r4, #4]
   b639a:	069b      	lsls	r3, r3, #26
   b639c:	d507      	bpl.n	b63ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b639e:	4914      	ldr	r1, [pc, #80]	; (b63f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b63a0:	2206      	movs	r2, #6
   b63a2:	a801      	add	r0, sp, #4
   b63a4:	f7fe fe72 	bl	b508c <_ZN5spark10JSONWriter4nameEPKcj>
   b63a8:	69e1      	ldr	r1, [r4, #28]
   b63aa:	f7ff f8ba 	bl	b5522 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b63ae:	a801      	add	r0, sp, #4
   b63b0:	f7fe fdc7 	bl	b4f42 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b63b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b63b6:	490f      	ldr	r1, [pc, #60]	; (b63f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b63b8:	6803      	ldr	r3, [r0, #0]
   b63ba:	2202      	movs	r2, #2
   b63bc:	68db      	ldr	r3, [r3, #12]
   b63be:	4798      	blx	r3
}
   b63c0:	b005      	add	sp, #20
   b63c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b63c6:	bf00      	nop
   b63c8:	2003e6a0 	.word	0x2003e6a0
   b63cc:	000b9700 	.word	0x000b9700
   b63d0:	000b968e 	.word	0x000b968e
   b63d4:	000b96df 	.word	0x000b96df
   b63d8:	000b9baf 	.word	0x000b9baf
   b63dc:	000b9558 	.word	0x000b9558
   b63e0:	000b96e1 	.word	0x000b96e1
   b63e4:	000b96e4 	.word	0x000b96e4
   b63e8:	000b96e7 	.word	0x000b96e7
   b63ec:	000b96e9 	.word	0x000b96e9
   b63f0:	000b96ee 	.word	0x000b96ee
   b63f4:	000b96dc 	.word	0x000b96dc

000b63f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b63f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b63fa:	4606      	mov	r6, r0
   b63fc:	460d      	mov	r5, r1
  size_t n = 0;
   b63fe:	188f      	adds	r7, r1, r2
   b6400:	2400      	movs	r4, #0
  while (size--) {
   b6402:	42bd      	cmp	r5, r7
   b6404:	d00c      	beq.n	b6420 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6406:	6833      	ldr	r3, [r6, #0]
   b6408:	f815 1b01 	ldrb.w	r1, [r5], #1
   b640c:	689b      	ldr	r3, [r3, #8]
   b640e:	4630      	mov	r0, r6
   b6410:	4798      	blx	r3
     if (chunk>=0)
   b6412:	1e03      	subs	r3, r0, #0
   b6414:	db01      	blt.n	b641a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6416:	441c      	add	r4, r3
  while (size--) {
   b6418:	e7f3      	b.n	b6402 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b641a:	2c00      	cmp	r4, #0
   b641c:	bf08      	it	eq
   b641e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6420:	4620      	mov	r0, r4
   b6422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6424 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6424:	b513      	push	{r0, r1, r4, lr}
   b6426:	4604      	mov	r4, r0
    }
   b6428:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b642a:	b159      	cbz	r1, b6444 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b642c:	9101      	str	r1, [sp, #4]
   b642e:	f7fd fdff 	bl	b4030 <strlen>
   b6432:	6823      	ldr	r3, [r4, #0]
   b6434:	9901      	ldr	r1, [sp, #4]
   b6436:	68db      	ldr	r3, [r3, #12]
   b6438:	4602      	mov	r2, r0
   b643a:	4620      	mov	r0, r4
    }
   b643c:	b002      	add	sp, #8
   b643e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6442:	4718      	bx	r3
    }
   b6444:	b002      	add	sp, #8
   b6446:	bd10      	pop	{r4, pc}

000b6448 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6448:	6803      	ldr	r3, [r0, #0]
   b644a:	689b      	ldr	r3, [r3, #8]
   b644c:	4718      	bx	r3

000b644e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b644e:	b530      	push	{r4, r5, lr}
   b6450:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6452:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6454:	2a01      	cmp	r2, #1
  *str = '\0';
   b6456:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b645a:	bf98      	it	ls
   b645c:	220a      	movls	r2, #10
   b645e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6460:	460d      	mov	r5, r1
   b6462:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6466:	fb01 5312 	mls	r3, r1, r2, r5
   b646a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b646e:	2b09      	cmp	r3, #9
   b6470:	bf94      	ite	ls
   b6472:	3330      	addls	r3, #48	; 0x30
   b6474:	3337      	addhi	r3, #55	; 0x37
   b6476:	b2db      	uxtb	r3, r3
  } while(n);
   b6478:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b647a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b647e:	d9ef      	bls.n	b6460 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6480:	4621      	mov	r1, r4
   b6482:	f7ff ffcf 	bl	b6424 <_ZN5Print5writeEPKc>
}
   b6486:	b00b      	add	sp, #44	; 0x2c
   b6488:	bd30      	pop	{r4, r5, pc}

000b648a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b648a:	4770      	bx	lr

000b648c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b648c:	4770      	bx	lr

000b648e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b648e:	4770      	bx	lr

000b6490 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6490:	4770      	bx	lr
	...

000b6494 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6494:	4b06      	ldr	r3, [pc, #24]	; (b64b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6496:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6498:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b649a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b649e:	d005      	beq.n	b64ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64a0:	4608      	mov	r0, r1
   b64a2:	f002 fd29 	bl	b8ef8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64a6:	2800      	cmp	r0, #0
   b64a8:	bf08      	it	eq
   b64aa:	2400      	moveq	r4, #0
      }
   b64ac:	4620      	mov	r0, r4
   b64ae:	bd10      	pop	{r4, pc}
   b64b0:	000b9610 	.word	0x000b9610

000b64b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64b4:	4b06      	ldr	r3, [pc, #24]	; (b64d0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64b6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64b8:	b510      	push	{r4, lr}
   b64ba:	f100 040c 	add.w	r4, r0, #12
	    ||
   b64be:	d005      	beq.n	b64cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64c0:	4608      	mov	r0, r1
   b64c2:	f002 fd19 	bl	b8ef8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64c6:	2800      	cmp	r0, #0
   b64c8:	bf08      	it	eq
   b64ca:	2400      	moveq	r4, #0
      }
   b64cc:	4620      	mov	r0, r4
   b64ce:	bd10      	pop	{r4, pc}
   b64d0:	000b9610 	.word	0x000b9610

000b64d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b64d4:	4b06      	ldr	r3, [pc, #24]	; (b64f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b64d6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b64d8:	b510      	push	{r4, lr}
   b64da:	f100 040c 	add.w	r4, r0, #12
	    ||
   b64de:	d005      	beq.n	b64ec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b64e0:	4608      	mov	r0, r1
   b64e2:	f002 fd09 	bl	b8ef8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b64e6:	2800      	cmp	r0, #0
   b64e8:	bf08      	it	eq
   b64ea:	2400      	moveq	r4, #0
      }
   b64ec:	4620      	mov	r0, r4
   b64ee:	bd10      	pop	{r4, pc}
   b64f0:	000b9610 	.word	0x000b9610

000b64f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b64f4:	b510      	push	{r4, lr}
   b64f6:	2168      	movs	r1, #104	; 0x68
   b64f8:	4604      	mov	r4, r0
   b64fa:	f7fd fde0 	bl	b40be <_ZdlPvj>
   b64fe:	4620      	mov	r0, r4
   b6500:	bd10      	pop	{r4, pc}

000b6502 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6502:	b510      	push	{r4, lr}
   b6504:	2128      	movs	r1, #40	; 0x28
   b6506:	4604      	mov	r4, r0
   b6508:	f7fd fdd9 	bl	b40be <_ZdlPvj>
   b650c:	4620      	mov	r0, r4
   b650e:	bd10      	pop	{r4, pc}

000b6510 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b6510:	b510      	push	{r4, lr}
   b6512:	2130      	movs	r1, #48	; 0x30
   b6514:	4604      	mov	r4, r0
   b6516:	f7fd fdd2 	bl	b40be <_ZdlPvj>
   b651a:	4620      	mov	r0, r4
   b651c:	bd10      	pop	{r4, pc}

000b651e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b651e:	2168      	movs	r1, #104	; 0x68
   b6520:	f7fd bdcd 	b.w	b40be <_ZdlPvj>

000b6524 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b6524:	2128      	movs	r1, #40	; 0x28
   b6526:	f7fd bdca 	b.w	b40be <_ZdlPvj>

000b652a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b652a:	2130      	movs	r1, #48	; 0x30
   b652c:	f7fd bdc7 	b.w	b40be <_ZdlPvj>

000b6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6530:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6532:	2500      	movs	r5, #0
   b6534:	1cec      	adds	r4, r5, #3
   b6536:	428c      	cmp	r4, r1
   b6538:	d80d      	bhi.n	b6556 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b653a:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b653c:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b653e:	5d87      	ldrb	r7, [r0, r6]
   b6540:	4297      	cmp	r7, r2
   b6542:	d105      	bne.n	b6550 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b6544:	4426      	add	r6, r4
   b6546:	42b1      	cmp	r1, r6
   b6548:	d305      	bcc.n	b6556 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b654a:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b654c:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b654e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b6550:	3401      	adds	r4, #1
   b6552:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6554:	e7ee      	b.n	b6534 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b6556:	2000      	movs	r0, #0
   b6558:	e7f9      	b.n	b654e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b655c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b655c:	4a02      	ldr	r2, [pc, #8]	; (b6568 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b655e:	4903      	ldr	r1, [pc, #12]	; (b656c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6560:	200a      	movs	r0, #10
   b6562:	f7fe b99f 	b.w	b48a4 <panic_>
   b6566:	bf00      	nop
   b6568:	000b4865 	.word	0x000b4865
   b656c:	000b9770 	.word	0x000b9770

000b6570 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6570:	b430      	push	{r4, r5}
   b6572:	460d      	mov	r5, r1
   b6574:	4611      	mov	r1, r2
   b6576:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b6578:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b657a:	6809      	ldr	r1, [r1, #0]
   b657c:	6828      	ldr	r0, [r5, #0]
   b657e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6582:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6584:	bc30      	pop	{r4, r5}
   b6586:	4760      	bx	ip

000b6588 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b6588:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b658a:	b538      	push	{r3, r4, r5, lr}
   b658c:	4604      	mov	r4, r0
	switch (__op)
   b658e:	d102      	bne.n	b6596 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6590:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6592:	6023      	str	r3, [r4, #0]
	}
   b6594:	e003      	b.n	b659e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b6596:	2a02      	cmp	r2, #2
   b6598:	d003      	beq.n	b65a2 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b659a:	2a03      	cmp	r2, #3
   b659c:	d00d      	beq.n	b65ba <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b659e:	2000      	movs	r0, #0
   b65a0:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b65a2:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b65a4:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b65a6:	f7fd fd86 	bl	b40b6 <_Znwj>
   b65aa:	4603      	mov	r3, r0
   b65ac:	2800      	cmp	r0, #0
   b65ae:	d0f0      	beq.n	b6592 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b65b0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b65b4:	e883 0003 	stmia.w	r3, {r0, r1}
   b65b8:	e7eb      	b.n	b6592 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b65ba:	6800      	ldr	r0, [r0, #0]
   b65bc:	2800      	cmp	r0, #0
   b65be:	d0ee      	beq.n	b659e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b65c0:	2108      	movs	r1, #8
   b65c2:	f7fd fd7c 	bl	b40be <_ZdlPvj>
   b65c6:	e7ea      	b.n	b659e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b65c8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b65c8:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b65ca:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b65cc:	4604      	mov	r4, r0
	if (_M_manager)
   b65ce:	b12b      	cbz	r3, b65dc <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b65d0:	2203      	movs	r2, #3
   b65d2:	4601      	mov	r1, r0
   b65d4:	4798      	blx	r3
	    _M_manager = nullptr;
   b65d6:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b65d8:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b65dc:	bd10      	pop	{r4, pc}

000b65de <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b65de:	b510      	push	{r4, lr}
	if (_M_manager)
   b65e0:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b65e2:	4604      	mov	r4, r0
	if (_M_manager)
   b65e4:	b12b      	cbz	r3, b65f2 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b65e6:	2203      	movs	r2, #3
   b65e8:	4601      	mov	r1, r0
   b65ea:	4798      	blx	r3
	    _M_manager = nullptr;
   b65ec:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b65ee:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b65f2:	bd10      	pop	{r4, pc}

000b65f4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b65f4:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b65f6:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b65f8:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b65fa:	2220      	movs	r2, #32
   b65fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b6600:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b6602:	4a08      	ldr	r2, [pc, #32]	; (b6624 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b6604:	9200      	str	r2, [sp, #0]
   b6606:	4908      	ldr	r1, [pc, #32]	; (b6628 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b6608:	aa02      	add	r2, sp, #8
   b660a:	2001      	movs	r0, #1
   b660c:	f7fe f952 	bl	b48b4 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6610:	6820      	ldr	r0, [r4, #0]
   b6612:	4906      	ldr	r1, [pc, #24]	; (b662c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b6614:	8800      	ldrh	r0, [r0, #0]
   b6616:	2300      	movs	r3, #0
   b6618:	4622      	mov	r2, r4
    }
   b661a:	b00a      	add	sp, #40	; 0x28
   b661c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b6620:	f7fe b8b4 	b.w	b478c <hal_ble_gatt_client_discover_all_services>
   b6624:	000b9792 	.word	0x000b9792
   b6628:	000b9787 	.word	0x000b9787
   b662c:	000b81bd 	.word	0x000b81bd

000b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b6630:	b510      	push	{r4, lr}
   b6632:	3801      	subs	r0, #1
   b6634:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b6638:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b663c:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b663e:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6642:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b6644:	bf88      	it	hi
   b6646:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b664a:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b664e:	7803      	ldrb	r3, [r0, #0]
   b6650:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b6654:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b6658:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b665a:	bf88      	it	hi
   b665c:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b6660:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b6662:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b6666:	d1e7      	bne.n	b6638 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b6668:	bd10      	pop	{r4, pc}

000b666a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b666a:	b510      	push	{r4, lr}
   b666c:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b666e:	3058      	adds	r0, #88	; 0x58
   b6670:	f7fe fe2c 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6674:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b6678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b667c:	f002 bafc 	b.w	b8c78 <_ZN6StringD1Ev>

000b6680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b6680:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b6682:	6803      	ldr	r3, [r0, #0]
   b6684:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b6686:	4605      	mov	r5, r0
   b6688:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b668a:	d008      	beq.n	b669e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b668c:	b111      	cbz	r1, b6694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b668e:	684b      	ldr	r3, [r1, #4]
   b6690:	3301      	adds	r3, #1
   b6692:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b6694:	6828      	ldr	r0, [r5, #0]
   b6696:	b108      	cbz	r0, b669c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b6698:	f7fe fb7a 	bl	b4d90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b669c:	602c      	str	r4, [r5, #0]
      }
   b669e:	bd38      	pop	{r3, r4, r5, pc}

000b66a0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b66a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b66a4:	b2da      	uxtb	r2, r3
   b66a6:	2a09      	cmp	r2, #9
   b66a8:	d801      	bhi.n	b66ae <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b66aa:	4618      	mov	r0, r3
   b66ac:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b66ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b66b2:	2b05      	cmp	r3, #5
   b66b4:	d801      	bhi.n	b66ba <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b66b6:	3857      	subs	r0, #87	; 0x57
   b66b8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b66ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b66be:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b66c0:	bf94      	ite	ls
   b66c2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b66c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b66c8:	4770      	bx	lr
	...

000b66cc <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b66cc:	b510      	push	{r4, lr}
            locked_(false) {
   b66ce:	2300      	movs	r3, #0
   b66d0:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b66d2:	4b04      	ldr	r3, [pc, #16]	; (b66e4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b66d4:	4604      	mov	r4, r0
   b66d6:	6818      	ldr	r0, [r3, #0]
   b66d8:	f7fe f802 	bl	b46e0 <os_mutex_recursive_lock>
        locked_ = true;
   b66dc:	2301      	movs	r3, #1
   b66de:	7023      	strb	r3, [r4, #0]
    }
   b66e0:	4620      	mov	r0, r4
   b66e2:	bd10      	pop	{r4, pc}
   b66e4:	2003e720 	.word	0x2003e720

000b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b66e8:	b510      	push	{r4, lr}
        if (locked_) {
   b66ea:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b66ec:	4604      	mov	r4, r0
        if (locked_) {
   b66ee:	b11b      	cbz	r3, b66f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b66f0:	4b02      	ldr	r3, [pc, #8]	; (b66fc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b66f2:	6818      	ldr	r0, [r3, #0]
   b66f4:	f7fd fffc 	bl	b46f0 <os_mutex_recursive_unlock>
    }
   b66f8:	4620      	mov	r0, r4
   b66fa:	bd10      	pop	{r4, pc}
   b66fc:	2003e720 	.word	0x2003e720

000b6700 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6700:	b082      	sub	sp, #8
   b6702:	4603      	mov	r3, r0
    address_ = addr;
   b6704:	6808      	ldr	r0, [r1, #0]
   b6706:	6849      	ldr	r1, [r1, #4]
   b6708:	466a      	mov	r2, sp
   b670a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b670c:	466a      	mov	r2, sp
   b670e:	ca03      	ldmia	r2!, {r0, r1}
   b6710:	6018      	str	r0, [r3, #0]
}
   b6712:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6714:	6059      	str	r1, [r3, #4]
}
   b6716:	b002      	add	sp, #8
   b6718:	4770      	bx	lr

000b671a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b671a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b671c:	7982      	ldrb	r2, [r0, #6]
   b671e:	798b      	ldrb	r3, [r1, #6]
   b6720:	429a      	cmp	r2, r3
   b6722:	d106      	bne.n	b6732 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6724:	2206      	movs	r2, #6
   b6726:	f002 fd07 	bl	b9138 <memcmp>
   b672a:	fab0 f080 	clz	r0, r0
   b672e:	0940      	lsrs	r0, r0, #5
}
   b6730:	bd08      	pop	{r3, pc}
    return false;
   b6732:	2000      	movs	r0, #0
   b6734:	e7fc      	b.n	b6730 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6736 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b673a:	6003      	str	r3, [r0, #0]
   b673c:	8083      	strh	r3, [r0, #4]
}
   b673e:	2000      	movs	r0, #0
   b6740:	4770      	bx	lr

000b6742 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6742:	b508      	push	{r3, lr}
   b6744:	4602      	mov	r2, r0
        : address_{} {
   b6746:	2100      	movs	r1, #0
   b6748:	6001      	str	r1, [r0, #0]
   b674a:	6041      	str	r1, [r0, #4]
    clear();
   b674c:	f7ff fff3 	bl	b6736 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6750:	7191      	strb	r1, [r2, #6]
}
   b6752:	4610      	mov	r0, r2
   b6754:	bd08      	pop	{r3, pc}
	...

000b6758 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6758:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b675a:	2301      	movs	r3, #1
   b675c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b675e:	4b05      	ldr	r3, [pc, #20]	; (b6774 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6760:	4602      	mov	r2, r0
   b6762:	f103 0110 	add.w	r1, r3, #16
   b6766:	f853 4b04 	ldr.w	r4, [r3], #4
   b676a:	f842 4b04 	str.w	r4, [r2], #4
   b676e:	428b      	cmp	r3, r1
   b6770:	d1f9      	bne.n	b6766 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6772:	bd10      	pop	{r4, pc}
   b6774:	000b94a6 	.word	0x000b94a6

000b6778 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6778:	7c0b      	ldrb	r3, [r1, #16]
   b677a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b677e:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6780:	d10d      	bne.n	b679e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b6782:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6784:	4b0c      	ldr	r3, [pc, #48]	; (b67b8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b6786:	4602      	mov	r2, r0
   b6788:	f103 0410 	add.w	r4, r3, #16
   b678c:	f853 5b04 	ldr.w	r5, [r3], #4
   b6790:	f842 5b04 	str.w	r5, [r2], #4
   b6794:	42a3      	cmp	r3, r4
   b6796:	d1f9      	bne.n	b678c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b6798:	880b      	ldrh	r3, [r1, #0]
   b679a:	8183      	strh	r3, [r0, #12]
}
   b679c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b679e:	2301      	movs	r3, #1
   b67a0:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b67a2:	f101 0210 	add.w	r2, r1, #16
   b67a6:	4603      	mov	r3, r0
   b67a8:	f851 4b04 	ldr.w	r4, [r1], #4
   b67ac:	f843 4b04 	str.w	r4, [r3], #4
   b67b0:	4291      	cmp	r1, r2
   b67b2:	d1f9      	bne.n	b67a8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b67b4:	e7f2      	b.n	b679c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b67b6:	bf00      	nop
   b67b8:	000b94a6 	.word	0x000b94a6

000b67bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b67bc:	b510      	push	{r4, lr}
    if (uuid128) {
   b67be:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b67c0:	4604      	mov	r4, r0
    if (uuid128) {
   b67c2:	b1b1      	cbz	r1, b67f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b67c4:	2a01      	cmp	r2, #1
   b67c6:	f101 0210 	add.w	r2, r1, #16
   b67ca:	d10a      	bne.n	b67e2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b67cc:	4601      	mov	r1, r0
   b67ce:	f853 0b04 	ldr.w	r0, [r3], #4
   b67d2:	f841 0b04 	str.w	r0, [r1], #4
   b67d6:	4293      	cmp	r3, r2
   b67d8:	d1f9      	bne.n	b67ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b67da:	2301      	movs	r3, #1
   b67dc:	6123      	str	r3, [r4, #16]
}
   b67de:	4620      	mov	r0, r4
   b67e0:	bd10      	pop	{r4, pc}
   b67e2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b67e4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b67e8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b67ec:	429a      	cmp	r2, r3
   b67ee:	d1f9      	bne.n	b67e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b67f0:	e7f3      	b.n	b67da <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b67f2:	2210      	movs	r2, #16
   b67f4:	f002 fcd8 	bl	b91a8 <memset>
   b67f8:	e7f1      	b.n	b67de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b67fa <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b67fa:	b538      	push	{r3, r4, r5, lr}
   b67fc:	4604      	mov	r4, r0
   b67fe:	460d      	mov	r5, r1
        : BleUuid() {
   b6800:	f7ff ffaa 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b6804:	2300      	movs	r3, #0
   b6806:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b6808:	81a5      	strh	r5, [r4, #12]
}
   b680a:	4620      	mov	r0, r4
   b680c:	bd38      	pop	{r3, r4, r5, pc}

000b680e <_ZNK8particle7BleUuid4typeEv>:
}
   b680e:	6900      	ldr	r0, [r0, #16]
   b6810:	4770      	bx	lr

000b6812 <_ZNK8particle7BleUuid7shortedEv>:
}
   b6812:	8980      	ldrh	r0, [r0, #12]
   b6814:	4770      	bx	lr

000b6816 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b6816:	4770      	bx	lr

000b6818 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b6818:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b681a:	6902      	ldr	r2, [r0, #16]
   b681c:	690b      	ldr	r3, [r1, #16]
   b681e:	429a      	cmp	r2, r3
   b6820:	d106      	bne.n	b6830 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b6822:	2210      	movs	r2, #16
   b6824:	f002 fc88 	bl	b9138 <memcmp>
   b6828:	fab0 f080 	clz	r0, r0
   b682c:	0940      	lsrs	r0, r0, #5
}
   b682e:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6830:	2000      	movs	r0, #0
   b6832:	e7fc      	b.n	b682e <_ZNK8particle7BleUuideqERKS0_+0x16>

000b6834 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b6834:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b6836:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b683a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b683c:	4b34      	ldr	r3, [pc, #208]	; (b6910 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b683e:	460c      	mov	r4, r1
   b6840:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6842:	4602      	mov	r2, r0
   b6844:	f103 0110 	add.w	r1, r3, #16
   b6848:	f853 0b04 	ldr.w	r0, [r3], #4
   b684c:	f842 0b04 	str.w	r0, [r2], #4
   b6850:	428b      	cmp	r3, r1
   b6852:	d1f9      	bne.n	b6848 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b6854:	b344      	cbz	r4, b68a8 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b6856:	2124      	movs	r1, #36	; 0x24
   b6858:	4620      	mov	r0, r4
   b685a:	f002 fd0e 	bl	b927a <strnlen>
   b685e:	2804      	cmp	r0, #4
   b6860:	f04f 0500 	mov.w	r5, #0
   b6864:	d123      	bne.n	b68ae <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6866:	f8ad 5004 	strh.w	r5, [sp, #4]
   b686a:	af01      	add	r7, sp, #4
   b686c:	1ca5      	adds	r5, r4, #2
   b686e:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b6870:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6874:	f7ff ff14 	bl	b66a0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6878:	f1b0 0800 	subs.w	r8, r0, #0
   b687c:	db12      	blt.n	b68a4 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b687e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b6882:	f7ff ff0d 	bl	b66a0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6886:	2800      	cmp	r0, #0
   b6888:	db0c      	blt.n	b68a4 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b688a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b688c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b6890:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6892:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6896:	d1eb      	bne.n	b6870 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6898:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b689c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b689e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b68a2:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b68a4:	2300      	movs	r3, #0
   b68a6:	6133      	str	r3, [r6, #16]
}
   b68a8:	b002      	add	sp, #8
   b68aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b68ae:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68b2:	2124      	movs	r1, #36	; 0x24
   b68b4:	4620      	mov	r0, r4
   b68b6:	f002 fce0 	bl	b927a <strnlen>
   b68ba:	42a8      	cmp	r0, r5
   b68bc:	d807      	bhi.n	b68ce <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b68be:	4642      	mov	r2, r8
   b68c0:	2100      	movs	r1, #0
   b68c2:	4630      	mov	r0, r6
}
   b68c4:	b002      	add	sp, #8
   b68c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b68ca:	f002 bc6d 	b.w	b91a8 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b68ce:	f1b8 0f00 	cmp.w	r8, #0
   b68d2:	d0e9      	beq.n	b68a8 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b68d4:	5d60      	ldrb	r0, [r4, r5]
   b68d6:	f7ff fee3 	bl	b66a0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b68da:	0603      	lsls	r3, r0, #24
   b68dc:	d415      	bmi.n	b690a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b68de:	0100      	lsls	r0, r0, #4
   b68e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b68e4:	b2c7      	uxtb	r7, r0
   b68e6:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b68ea:	2124      	movs	r1, #36	; 0x24
   b68ec:	4620      	mov	r0, r4
   b68ee:	f002 fcc4 	bl	b927a <strnlen>
   b68f2:	3501      	adds	r5, #1
   b68f4:	42a8      	cmp	r0, r5
   b68f6:	d908      	bls.n	b690a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b68f8:	5d60      	ldrb	r0, [r4, r5]
   b68fa:	f7ff fed1 	bl	b66a0 <_ZN8particle11hexToNibbleEc>
   b68fe:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b6900:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b6902:	bfa4      	itt	ge
   b6904:	4338      	orrge	r0, r7
   b6906:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b690a:	3501      	adds	r5, #1
   b690c:	e7d1      	b.n	b68b2 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b690e:	bf00      	nop
   b6910:	000b94a6 	.word	0x000b94a6

000b6914 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b6914:	b513      	push	{r0, r1, r4, lr}
   b6916:	4604      	mov	r4, r0
   b6918:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b691a:	f7ff ff1d 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b691e:	4620      	mov	r0, r4
   b6920:	9901      	ldr	r1, [sp, #4]
   b6922:	f7ff ff87 	bl	b6834 <_ZN8particle7BleUuid9constructEPKc>
}
   b6926:	4620      	mov	r0, r4
   b6928:	b002      	add	sp, #8
   b692a:	bd10      	pop	{r4, pc}

000b692c <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b692c:	b510      	push	{r4, lr}
   b692e:	f100 030f 	add.w	r3, r0, #15
   b6932:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b6934:	781c      	ldrb	r4, [r3, #0]
   b6936:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b693a:	4283      	cmp	r3, r0
   b693c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b6940:	d1f8      	bne.n	b6934 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b6942:	bd10      	pop	{r4, pc}

000b6944 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b6944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6948:	461f      	mov	r7, r3
   b694a:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b694c:	460d      	mov	r5, r1
   b694e:	2900      	cmp	r1, #0
   b6950:	d05b      	beq.n	b6a0a <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b6952:	b1da      	cbz	r2, b698c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b6954:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b6958:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b695a:	f1b8 0f00 	cmp.w	r8, #0
   b695e:	d119      	bne.n	b6994 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b6960:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b6962:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b6966:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b6968:	aa05      	add	r2, sp, #20
   b696a:	2102      	movs	r1, #2
   b696c:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b696e:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b6972:	f7ff fe5d 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b6976:	2c04      	cmp	r4, #4
   b6978:	bf28      	it	cs
   b697a:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b697c:	4622      	mov	r2, r4
   b697e:	a905      	add	r1, sp, #20
   b6980:	4628      	mov	r0, r5
   b6982:	f002 fbe9 	bl	b9158 <memcpy>
        buf[len++] = '\0';
   b6986:	f805 8004 	strb.w	r8, [r5, r4]
   b698a:	1c62      	adds	r2, r4, #1
}
   b698c:	4610      	mov	r0, r2
   b698e:	b00e      	add	sp, #56	; 0x38
   b6990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b6994:	a901      	add	r1, sp, #4
   b6996:	f7ff ffc9 	bl	b692c <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b699a:	aa05      	add	r2, sp, #20
    if (stripped) {
   b699c:	b17f      	cbz	r7, b69be <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b699e:	2110      	movs	r1, #16
   b69a0:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b69a2:	f7ff fe45 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b69a6:	2c24      	cmp	r4, #36	; 0x24
   b69a8:	bf28      	it	cs
   b69aa:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b69ac:	4622      	mov	r2, r4
   b69ae:	a905      	add	r1, sp, #20
   b69b0:	4628      	mov	r0, r5
   b69b2:	f002 fbd1 	bl	b9158 <memcpy>
    buf[len++] = '\0';
   b69b6:	2300      	movs	r3, #0
   b69b8:	552b      	strb	r3, [r5, r4]
   b69ba:	1c62      	adds	r2, r4, #1
    return len;
   b69bc:	e7e6      	b.n	b698c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b69be:	2104      	movs	r1, #4
   b69c0:	eb0d 0001 	add.w	r0, sp, r1
   b69c4:	f7ff fe34 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b69c8:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b69ca:	f10d 021d 	add.w	r2, sp, #29
   b69ce:	2102      	movs	r1, #2
   b69d0:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b69d2:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b69d6:	f7ff fe2b 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b69da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b69de:	2102      	movs	r1, #2
   b69e0:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b69e4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b69e8:	f7ff fe22 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b69ec:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b69f0:	2102      	movs	r1, #2
   b69f2:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b69f4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b69f8:	f7ff fe1a 	bl	b6630 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b69fc:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b6a00:	aa0b      	add	r2, sp, #44	; 0x2c
   b6a02:	2106      	movs	r1, #6
   b6a04:	f10d 000e 	add.w	r0, sp, #14
   b6a08:	e7cb      	b.n	b69a2 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b6a0a:	460a      	mov	r2, r1
   b6a0c:	e7be      	b.n	b698c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b6a0e <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b6a0e:	b510      	push	{r4, lr}
   b6a10:	b08a      	sub	sp, #40	; 0x28
   b6a12:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b6a14:	2300      	movs	r3, #0
   b6a16:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b6a18:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b6a1a:	4669      	mov	r1, sp
   b6a1c:	f7ff ff92 	bl	b6944 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b6a20:	4669      	mov	r1, sp
   b6a22:	4620      	mov	r0, r4
   b6a24:	f002 f973 	bl	b8d0e <_ZN6StringC1EPK19__FlashStringHelper>
}
   b6a28:	4620      	mov	r0, r4
   b6a2a:	b00a      	add	sp, #40	; 0x28
   b6a2c:	bd10      	pop	{r4, pc}

000b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b6a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6a30:	4605      	mov	r5, r0
   b6a32:	4616      	mov	r6, r2
   b6a34:	461f      	mov	r7, r3
   b6a36:	460a      	mov	r2, r1
   b6a38:	ab01      	add	r3, sp, #4
   b6a3a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6a3e:	f7ff fd77 	bl	b6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b6a42:	f030 0402 	bics.w	r4, r0, #2
   b6a46:	d00c      	beq.n	b6a62 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b6a48:	1e84      	subs	r4, r0, #2
   b6a4a:	42bc      	cmp	r4, r7
   b6a4c:	bf28      	it	cs
   b6a4e:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b6a50:	b13e      	cbz	r6, b6a62 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b6a52:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b6a54:	682b      	ldr	r3, [r5, #0]
   b6a56:	3102      	adds	r1, #2
   b6a58:	4622      	mov	r2, r4
   b6a5a:	4419      	add	r1, r3
   b6a5c:	4630      	mov	r0, r6
   b6a5e:	f002 fb7b 	bl	b9158 <memcpy>
}
   b6a62:	4620      	mov	r0, r4
   b6a64:	b003      	add	sp, #12
   b6a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a68 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a6a:	4613      	mov	r3, r2
   b6a6c:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6a6e:	9201      	str	r2, [sp, #4]
   b6a70:	460a      	mov	r2, r1
   b6a72:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6a74:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6a76:	f7ff ffda 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6a7a:	b940      	cbnz	r0, b6a8e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6a7c:	9b01      	ldr	r3, [sp, #4]
   b6a7e:	4622      	mov	r2, r4
   b6a80:	2109      	movs	r1, #9
   b6a82:	4628      	mov	r0, r5
}
   b6a84:	b003      	add	sp, #12
   b6a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6a8a:	f7ff bfd0 	b.w	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b6a8e:	b003      	add	sp, #12
   b6a90:	bd30      	pop	{r4, r5, pc}
	...

000b6a94 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b6a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a96:	460c      	mov	r4, r1
   b6a98:	b089      	sub	sp, #36	; 0x24
    String name;
   b6a9a:	490c      	ldr	r1, [pc, #48]	; (b6acc <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6a9c:	4605      	mov	r5, r0
    String name;
   b6a9e:	f002 f936 	bl	b8d0e <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b6aa2:	221f      	movs	r2, #31
   b6aa4:	4669      	mov	r1, sp
   b6aa6:	4620      	mov	r0, r4
   b6aa8:	f7ff ffde 	bl	b6a68 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6aac:	4606      	mov	r6, r0
   b6aae:	b150      	cbz	r0, b6ac6 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b6ab0:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b6ab2:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b6ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6ab8:	4628      	mov	r0, r5
   b6aba:	f002 f9a7 	bl	b8e0c <_ZN6String6concatEc>
   b6abe:	b110      	cbz	r0, b6ac6 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b6ac0:	3701      	adds	r7, #1
   b6ac2:	42be      	cmp	r6, r7
   b6ac4:	d1f6      	bne.n	b6ab4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b6ac6:	4628      	mov	r0, r5
   b6ac8:	b009      	add	sp, #36	; 0x24
   b6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6acc:	000b96de 	.word	0x000b96de

000b6ad0 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b6ad0:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b6ad2:	2302      	movs	r3, #2
   b6ad4:	aa01      	add	r2, sp, #4
   b6ad6:	2119      	movs	r1, #25
   b6ad8:	f7ff ffa9 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b6adc:	b108      	cbz	r0, b6ae2 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b6ade:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b6ae2:	b003      	add	sp, #12
   b6ae4:	f85d fb04 	ldr.w	pc, [sp], #4

000b6ae8 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6ae8:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6aee:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b6af0:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b6af2:	8043      	strh	r3, [r0, #2]
   b6af4:	220e      	movs	r2, #14
   b6af6:	4629      	mov	r1, r5
   b6af8:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6afa:	7105      	strb	r5, [r0, #4]
   b6afc:	3006      	adds	r0, #6
   b6afe:	f002 fb53 	bl	b91a8 <memset>
   b6b02:	f104 0014 	add.w	r0, r4, #20
   b6b06:	f7ff fe27 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
   b6b0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6b0e:	f7ff fe23 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
   b6b12:	4904      	ldr	r1, [pc, #16]	; (b6b24 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b6b14:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6b18:	f002 f8f9 	bl	b8d0e <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b6b1c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b6b1e:	4620      	mov	r0, r4
   b6b20:	bd38      	pop	{r3, r4, r5, pc}
   b6b22:	bf00      	nop
   b6b24:	000b96de 	.word	0x000b96de

000b6b28 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b6b28:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6b2a:	680d      	ldr	r5, [r1, #0]
   b6b2c:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b6b2e:	4601      	mov	r1, r0
   b6b30:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b6b34:	f7ff fe70 	bl	b6818 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b6b38:	b140      	cbz	r0, b6b4c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b6b3a:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b6b3c:	8aa2      	ldrh	r2, [r4, #20]
   b6b3e:	429a      	cmp	r2, r3
   b6b40:	d805      	bhi.n	b6b4e <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b6b42:	8ae0      	ldrh	r0, [r4, #22]
   b6b44:	4298      	cmp	r0, r3
   b6b46:	bf34      	ite	cc
   b6b48:	2000      	movcc	r0, #0
   b6b4a:	2001      	movcs	r0, #1
    }
   b6b4c:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b6b4e:	2000      	movs	r0, #0
   b6b50:	e7fc      	b.n	b6b4c <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b6b52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b6b52:	b510      	push	{r4, lr}
    return data_ + size_;
   b6b54:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b6b58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b6b5c:	4293      	cmp	r3, r2
   b6b5e:	4618      	mov	r0, r3
   b6b60:	d006      	beq.n	b6b70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b6b62:	6804      	ldr	r4, [r0, #0]
   b6b64:	8824      	ldrh	r4, [r4, #0]
   b6b66:	428c      	cmp	r4, r1
   b6b68:	f103 0308 	add.w	r3, r3, #8
   b6b6c:	d1f6      	bne.n	b6b5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b6b6e:	bd10      	pop	{r4, pc}
        return nullptr;
   b6b70:	2000      	movs	r0, #0
   b6b72:	e7fc      	b.n	b6b6e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b6b74 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6b74:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b6b76:	b570      	push	{r4, r5, r6, lr}
   b6b78:	6003      	str	r3, [r0, #0]
   b6b7a:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6b7c:	2068      	movs	r0, #104	; 0x68
   b6b7e:	f7fd fa9a 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6b82:	1e04      	subs	r4, r0, #0
   b6b84:	f104 060c 	add.w	r6, r4, #12
   b6b88:	d007      	beq.n	b6b9a <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b6b8a:	2301      	movs	r3, #1
   b6b8c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b6b90:	4b04      	ldr	r3, [pc, #16]	; (b6ba4 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b6b92:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6b94:	4630      	mov	r0, r6
   b6b96:	f7ff ffa7 	bl	b6ae8 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b6b9a:	e9c5 6400 	strd	r6, r4, [r5]
}
   b6b9e:	4628      	mov	r0, r5
   b6ba0:	bd70      	pop	{r4, r5, r6, pc}
   b6ba2:	bf00      	nop
   b6ba4:	000b9970 	.word	0x000b9970

000b6ba8 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b6ba8:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b6baa:	680c      	ldr	r4, [r1, #0]
   b6bac:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b6bae:	4606      	mov	r6, r0
    return impl()->charUUID();
   b6bb0:	4605      	mov	r5, r0
   b6bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6bb6:	6823      	ldr	r3, [r4, #0]
   b6bb8:	602b      	str	r3, [r5, #0]
}
   b6bba:	4630      	mov	r0, r6
   b6bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

000b6bc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b6bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6bc2:	4606      	mov	r6, r0
   b6bc4:	b085      	sub	sp, #20
   b6bc6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b6bc8:	460d      	mov	r5, r1
   b6bca:	2900      	cmp	r1, #0
   b6bcc:	d050      	beq.n	b6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b6bce:	2a00      	cmp	r2, #0
   b6bd0:	d04e      	beq.n	b6c70 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b6bd2:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b6bd4:	7823      	ldrb	r3, [r4, #0]
   b6bd6:	2af4      	cmp	r2, #244	; 0xf4
   b6bd8:	bf28      	it	cs
   b6bda:	22f4      	movcs	r2, #244	; 0xf4
   b6bdc:	b343      	cbz	r3, b6c30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6bde:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b6be0:	0798      	lsls	r0, r3, #30
   b6be2:	d509      	bpl.n	b6bf8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b6be4:	89a0      	ldrh	r0, [r4, #12]
   b6be6:	9203      	str	r2, [sp, #12]
   b6be8:	2300      	movs	r3, #0
   b6bea:	f7fd fdc5 	bl	b4778 <hal_ble_gatt_server_set_characteristic_value>
   b6bee:	2800      	cmp	r0, #0
   b6bf0:	9a03      	ldr	r2, [sp, #12]
   b6bf2:	da03      	bge.n	b6bfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b6bf4:	b005      	add	sp, #20
   b6bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b6bf8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6bfc:	6834      	ldr	r4, [r6, #0]
   b6bfe:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b6c00:	06d9      	lsls	r1, r3, #27
   b6c02:	d509      	bpl.n	b6c18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b6c04:	2f01      	cmp	r7, #1
   b6c06:	d007      	beq.n	b6c18 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c08:	89a0      	ldrh	r0, [r4, #12]
   b6c0a:	2300      	movs	r3, #0
   b6c0c:	4629      	mov	r1, r5
}
   b6c0e:	b005      	add	sp, #20
   b6c10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c14:	f7fd be0a 	b.w	b482c <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b6c18:	069b      	lsls	r3, r3, #26
   b6c1a:	d5eb      	bpl.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6c1c:	2f02      	cmp	r7, #2
   b6c1e:	d0e9      	beq.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c20:	89a0      	ldrh	r0, [r4, #12]
   b6c22:	2300      	movs	r3, #0
   b6c24:	4629      	mov	r1, r5
}
   b6c26:	b005      	add	sp, #20
   b6c28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c2c:	f7fd be08 	b.w	b4840 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b6c30:	8860      	ldrh	r0, [r4, #2]
   b6c32:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6c36:	4288      	cmp	r0, r1
   b6c38:	d01c      	beq.n	b6c74 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b6c3a:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b6c3c:	074e      	lsls	r6, r1, #29
   b6c3e:	d501      	bpl.n	b6c44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b6c40:	2f01      	cmp	r7, #1
   b6c42:	d104      	bne.n	b6c4e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6c44:	070b      	lsls	r3, r1, #28
   b6c46:	d409      	bmi.n	b6c5c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b6c48:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6c4c:	e7d2      	b.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c4e:	89a1      	ldrh	r1, [r4, #12]
   b6c50:	9300      	str	r3, [sp, #0]
   b6c52:	4613      	mov	r3, r2
   b6c54:	462a      	mov	r2, r5
   b6c56:	f7fd fdb7 	bl	b47c8 <hal_ble_gatt_client_write_without_response>
   b6c5a:	e7cb      	b.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b6c5c:	2f02      	cmp	r7, #2
   b6c5e:	d0f3      	beq.n	b6c48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b6c60:	2300      	movs	r3, #0
   b6c62:	89a1      	ldrh	r1, [r4, #12]
   b6c64:	9300      	str	r3, [sp, #0]
   b6c66:	4613      	mov	r3, r2
   b6c68:	462a      	mov	r2, r5
   b6c6a:	f7fd fda3 	bl	b47b4 <hal_ble_gatt_client_write_with_response>
   b6c6e:	e7c1      	b.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6c70:	4802      	ldr	r0, [pc, #8]	; (b6c7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b6c72:	e7bf      	b.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b6c74:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6c78:	e7bc      	b.n	b6bf4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b6c7a:	bf00      	nop
   b6c7c:	fffffef2 	.word	0xfffffef2

000b6c80 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b6c80:	b510      	push	{r4, lr}
   b6c82:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6c84:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b6c86:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6c88:	bb52      	cbnz	r2, b6ce0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b6c8a:	885c      	ldrh	r4, [r3, #2]
   b6c8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6c90:	4284      	cmp	r4, r0
   b6c92:	d025      	beq.n	b6ce0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6c94:	8a18      	ldrh	r0, [r3, #16]
   b6c96:	b330      	cbz	r0, b6ce6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b6c98:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b6c9c:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b6c9e:	4a13      	ldr	r2, [pc, #76]	; (b6cec <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b6ca0:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b6ca2:	4a13      	ldr	r2, [pc, #76]	; (b6cf0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b6ca4:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b6ca8:	885a      	ldrh	r2, [r3, #2]
   b6caa:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b6cae:	8a1a      	ldrh	r2, [r3, #16]
   b6cb0:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b6cb4:	899a      	ldrh	r2, [r3, #12]
   b6cb6:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b6cba:	b159      	cbz	r1, b6cd4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b6cbc:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b6cbe:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b6cc0:	bf44      	itt	mi
   b6cc2:	2202      	movmi	r2, #2
   b6cc4:	9205      	strmi	r2, [sp, #20]
   b6cc6:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b6cc8:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b6cca:	bf42      	ittt	mi
   b6ccc:	9b05      	ldrmi	r3, [sp, #20]
   b6cce:	f043 0301 	orrmi.w	r3, r3, #1
   b6cd2:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b6cd4:	2100      	movs	r1, #0
   b6cd6:	4668      	mov	r0, sp
   b6cd8:	f7fd fd9e 	bl	b4818 <hal_ble_gatt_client_configure_cccd>
}
   b6cdc:	b006      	add	sp, #24
   b6cde:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6ce0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b6ce4:	e7fa      	b.n	b6cdc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6ce6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b6cea:	e7f7      	b.n	b6cdc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b6cec:	00180003 	.word	0x00180003
   b6cf0:	000b6ec5 	.word	0x000b6ec5

000b6cf4 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b6cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6cf6:	2600      	movs	r6, #0
   b6cf8:	6006      	str	r6, [r0, #0]
   b6cfa:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6cfc:	2028      	movs	r0, #40	; 0x28
   b6cfe:	f7fd f9da 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d02:	1e04      	subs	r4, r0, #0
   b6d04:	f104 070c 	add.w	r7, r4, #12
   b6d08:	d00a      	beq.n	b6d20 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d0a:	2301      	movs	r3, #1
   b6d0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b6d10:	4b05      	ldr	r3, [pc, #20]	; (b6d28 <_ZN8particle10BleServiceC1Ev+0x34>)
   b6d12:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b6d14:	4638      	mov	r0, r7
   b6d16:	f7ff fd1f 	bl	b6758 <_ZN8particle7BleUuidC1Ev>
   b6d1a:	6226      	str	r6, [r4, #32]
   b6d1c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b6d20:	e9c5 7400 	strd	r7, r4, [r5]
}
   b6d24:	4628      	mov	r0, r5
   b6d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6d28:	000b998c 	.word	0x000b998c

000b6d2c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6d2c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6d2e:	2500      	movs	r5, #0
   b6d30:	6005      	str	r5, [r0, #0]
   b6d32:	4606      	mov	r6, r0
   b6d34:	2030      	movs	r0, #48	; 0x30
   b6d36:	f7fd f9be 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6d3a:	4604      	mov	r4, r0
   b6d3c:	b188      	cbz	r0, b6d62 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b6d3e:	2301      	movs	r3, #1
   b6d40:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6d44:	4b09      	ldr	r3, [pc, #36]	; (b6d6c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6d46:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d4c:	8183      	strh	r3, [r0, #12]
   b6d4e:	300e      	adds	r0, #14
   b6d50:	f7ff fcf7 	bl	b6742 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6d54:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6d58:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6d5c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6d60:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b6d62:	6074      	str	r4, [r6, #4]
   b6d64:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6d66:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6d68:	4630      	mov	r0, r6
   b6d6a:	bd70      	pop	{r4, r5, r6, pc}
   b6d6c:	000b99a8 	.word	0x000b99a8

000b6d70 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b6d70:	b513      	push	{r0, r1, r4, lr}
   b6d72:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6d74:	a801      	add	r0, sp, #4
   b6d76:	f7ff fca9 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6d7a:	6823      	ldr	r3, [r4, #0]
   b6d7c:	881c      	ldrh	r4, [r3, #0]
   b6d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6d82:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6d84:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6d86:	bf18      	it	ne
   b6d88:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6d8a:	f7ff fcad 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6d8e:	4620      	mov	r0, r4
   b6d90:	b002      	add	sp, #8
   b6d92:	bd10      	pop	{r4, pc}

000b6d94 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b6d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d96:	4605      	mov	r5, r0
   b6d98:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6d9a:	a801      	add	r0, sp, #4
   b6d9c:	f7ff fc96 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6da0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6da2:	6823      	ldr	r3, [r4, #0]
   b6da4:	f8c2 3002 	str.w	r3, [r2, #2]
   b6da8:	6863      	ldr	r3, [r4, #4]
   b6daa:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b6dae:	a801      	add	r0, sp, #4
   b6db0:	f7ff fc9a 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b6db4:	b003      	add	sp, #12
   b6db6:	bd30      	pop	{r4, r5, pc}

000b6db8 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b6db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6dba:	460d      	mov	r5, r1
   b6dbc:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6dbe:	a801      	add	r0, sp, #4
   b6dc0:	f7ff fc84 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
   b6dc4:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6dc6:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b6dca:	6023      	str	r3, [r4, #0]
   b6dcc:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6dd0:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6dd2:	a801      	add	r0, sp, #4
   b6dd4:	f7ff fc88 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6dd8:	4620      	mov	r0, r4
   b6dda:	b003      	add	sp, #12
   b6ddc:	bd30      	pop	{r4, r5, pc}

000b6dde <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b6dde:	b530      	push	{r4, r5, lr}
   b6de0:	4605      	mov	r5, r0
   b6de2:	b087      	sub	sp, #28
   b6de4:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6de6:	a801      	add	r0, sp, #4
   b6de8:	f7ff fc70 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b6dec:	682a      	ldr	r2, [r5, #0]
   b6dee:	6823      	ldr	r3, [r4, #0]
   b6df0:	8812      	ldrh	r2, [r2, #0]
   b6df2:	881b      	ldrh	r3, [r3, #0]
   b6df4:	429a      	cmp	r2, r3
   b6df6:	d10d      	bne.n	b6e14 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6df8:	4629      	mov	r1, r5
   b6dfa:	a802      	add	r0, sp, #8
   b6dfc:	f7ff ffdc 	bl	b6db8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6e00:	4621      	mov	r1, r4
   b6e02:	a804      	add	r0, sp, #16
   b6e04:	f7ff ffd8 	bl	b6db8 <_ZNK8particle13BlePeerDevice7addressEv>
   b6e08:	a904      	add	r1, sp, #16
   b6e0a:	a802      	add	r0, sp, #8
   b6e0c:	f7ff fc85 	bl	b671a <_ZNK8particle10BleAddresseqERKS0_>
   b6e10:	4604      	mov	r4, r0
   b6e12:	b900      	cbnz	r0, b6e16 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6e14:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6e16:	a801      	add	r0, sp, #4
   b6e18:	f7ff fc66 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	b007      	add	sp, #28
   b6e20:	bd30      	pop	{r4, r5, pc}
	...

000b6e24 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6e24:	b510      	push	{r4, lr}
   b6e26:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6e28:	2064      	movs	r0, #100	; 0x64
   b6e2a:	f7fd f944 	bl	b40b6 <_Znwj>
   b6e2e:	b168      	cbz	r0, b6e4c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b6e30:	2300      	movs	r3, #0
   b6e32:	e9c0 3300 	strd	r3, r3, [r0]
   b6e36:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b6e3e:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b6e42:	6203      	str	r3, [r0, #32]
   b6e44:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6e46:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6e48:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6e4a:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6e4c:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b6e4e:	b920      	cbnz	r0, b6e5a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b6e50:	4a0a      	ldr	r2, [pc, #40]	; (b6e7c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6e52:	490b      	ldr	r1, [pc, #44]	; (b6e80 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6e54:	200a      	movs	r0, #10
   b6e56:	f7fd fd25 	bl	b48a4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6e5a:	2000      	movs	r0, #0
   b6e5c:	f7fd fc50 	bl	b4700 <hal_ble_stack_init>
   b6e60:	b120      	cbz	r0, b6e6c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b6e62:	4a06      	ldr	r2, [pc, #24]	; (b6e7c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6e64:	4907      	ldr	r1, [pc, #28]	; (b6e84 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6e66:	200a      	movs	r0, #10
   b6e68:	f7fd fd1c 	bl	b48a4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6e6c:	6821      	ldr	r1, [r4, #0]
   b6e6e:	4806      	ldr	r0, [pc, #24]	; (b6e88 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b6e70:	2200      	movs	r2, #0
   b6e72:	f7fd fcc7 	bl	b4804 <hal_ble_set_callback_on_periph_link_events>
}
   b6e76:	4620      	mov	r0, r4
   b6e78:	bd10      	pop	{r4, pc}
   b6e7a:	bf00      	nop
   b6e7c:	000b4865 	.word	0x000b4865
   b6e80:	000b9770 	.word	0x000b9770
   b6e84:	000b97ae 	.word	0x000b97ae
   b6e88:	000b78ad 	.word	0x000b78ad

000b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6e8c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b6e8e:	4c0a      	ldr	r4, [pc, #40]	; (b6eb8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6e90:	7823      	ldrb	r3, [r4, #0]
   b6e92:	f3bf 8f5b 	dmb	ish
   b6e96:	07db      	lsls	r3, r3, #31
   b6e98:	d40c      	bmi.n	b6eb4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	f7fd f91e 	bl	b40dc <__cxa_guard_acquire>
   b6ea0:	b140      	cbz	r0, b6eb4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6ea2:	4806      	ldr	r0, [pc, #24]	; (b6ebc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6ea4:	f7ff ffbe 	bl	b6e24 <_ZN8particle14BleLocalDeviceC1Ev>
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	f7fd f91c 	bl	b40e6 <__cxa_guard_release>
   b6eae:	4804      	ldr	r0, [pc, #16]	; (b6ec0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6eb0:	f002 f934 	bl	b911c <atexit>
    return instance;
}
   b6eb4:	4801      	ldr	r0, [pc, #4]	; (b6ebc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6eb6:	bd10      	pop	{r4, pc}
   b6eb8:	2003e71c 	.word	0x2003e71c
   b6ebc:	2003e724 	.word	0x2003e724
   b6ec0:	000b71e9 	.word	0x000b71e9

000b6ec4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ec4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b6ec6:	6803      	ldr	r3, [r0, #0]
   b6ec8:	3b09      	subs	r3, #9
   b6eca:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b6ecc:	b08d      	sub	sp, #52	; 0x34
   b6ece:	4604      	mov	r4, r0
   b6ed0:	460d      	mov	r5, r1
    switch (event->type) {
   b6ed2:	d811      	bhi.n	b6ef8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b6ed4:	f7ff ffda 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b6ed8:	88a1      	ldrh	r1, [r4, #4]
   b6eda:	6800      	ldr	r0, [r0, #0]
   b6edc:	f7ff fe39 	bl	b6b52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b6ee0:	4603      	mov	r3, r0
   b6ee2:	b958      	cbnz	r0, b6efc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b6ee4:	2220      	movs	r2, #32
   b6ee6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b6eea:	4a0b      	ldr	r2, [pc, #44]	; (b6f18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b6eec:	9200      	str	r2, [sp, #0]
   b6eee:	490b      	ldr	r1, [pc, #44]	; (b6f1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b6ef0:	aa04      	add	r2, sp, #16
   b6ef2:	2032      	movs	r0, #50	; 0x32
   b6ef4:	f7fd fcde 	bl	b48b4 <log_message>
}
   b6ef8:	b00d      	add	sp, #52	; 0x34
   b6efa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b6efc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b6efe:	2a00      	cmp	r2, #0
   b6f00:	d0fa      	beq.n	b6ef8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b6f02:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6f06:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b6f0a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b6f0e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b6f10:	aa04      	add	r2, sp, #16
   b6f12:	a903      	add	r1, sp, #12
   b6f14:	47a0      	blx	r4
}
   b6f16:	e7ef      	b.n	b6ef8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b6f18:	000b97f0 	.word	0x000b97f0
   b6f1c:	000b9787 	.word	0x000b9787

000b6f20 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6f20:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6f22:	2000      	movs	r0, #0
   b6f24:	f7fd fbec 	bl	b4700 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6f28:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6f2c:	bd08      	pop	{r3, pc}

000b6f2e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b6f2e:	b919      	cbnz	r1, b6f38 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b6f30:	460a      	mov	r2, r1
   b6f32:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b6f34:	f7fd bbec 	b.w	b4710 <hal_ble_gap_set_advertising_data>
   b6f38:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6f3c:	2200      	movs	r2, #0
   b6f3e:	e7f9      	b.n	b6f34 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b6f40 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b6f40:	b570      	push	{r4, r5, r6, lr}
   b6f42:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b6f44:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b6f46:	460e      	mov	r6, r1
   b6f48:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b6f4a:	f7ff fb3d 	bl	b65c8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b6f4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6f52:	f7ff fb44 	bl	b65de <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b6f56:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b6f5a:	2200      	movs	r2, #0
   b6f5c:	4621      	mov	r1, r4
   b6f5e:	4803      	ldr	r0, [pc, #12]	; (b6f6c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b6f60:	f7fd fbee 	bl	b4740 <hal_ble_gap_start_scan>
   b6f64:	2800      	cmp	r0, #0
        return foundCount_;
   b6f66:	bfa8      	it	ge
   b6f68:	6960      	ldrge	r0, [r4, #20]
    }
   b6f6a:	bd70      	pop	{r4, r5, r6, pc}
   b6f6c:	000b88f9 	.word	0x000b88f9

000b6f70 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b6f70:	b510      	push	{r4, lr}
   b6f72:	4604      	mov	r4, r0
    ::free(ptr);
   b6f74:	6940      	ldr	r0, [r0, #20]
   b6f76:	f7fd fd51 	bl	b4a1c <free>
   b6f7a:	68a0      	ldr	r0, [r4, #8]
   b6f7c:	f7fd fd4e 	bl	b4a1c <free>
   b6f80:	4620      	mov	r0, r4
   b6f82:	bd10      	pop	{r4, pc}

000b6f84 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b6f84:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b6f86:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b6f8a:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b6f8e:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6f92:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b6f96:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b6f9a:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b6f9e:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b6fa2:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b6fa6:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b6faa:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b6fae:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b6fb2:	6202      	str	r2, [r0, #32]
   b6fb4:	6302      	str	r2, [r0, #48]	; 0x30
   b6fb6:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b6fba:	4770      	bx	lr

000b6fbc <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6fbc:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b6fbe:	69d8      	ldr	r0, [r3, #28]
}
   b6fc0:	2800      	cmp	r0, #0
   b6fc2:	bfd4      	ite	le
   b6fc4:	2000      	movle	r0, #0
   b6fc6:	2001      	movgt	r0, #1
   b6fc8:	4770      	bx	lr

000b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6fca:	b510      	push	{r4, lr}
   b6fcc:	4604      	mov	r4, r0
    ::free(ptr);
   b6fce:	6800      	ldr	r0, [r0, #0]
   b6fd0:	f7fd fd24 	bl	b4a1c <free>
}
   b6fd4:	4620      	mov	r0, r4
   b6fd6:	bd10      	pop	{r4, pc}

000b6fd8 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b6fd8:	b570      	push	{r4, r5, r6, lr}
   b6fda:	4604      	mov	r4, r0
    ::free(ptr);
   b6fdc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6fde:	f7fd fd1d 	bl	b4a1c <free>
   b6fe2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6fe4:	f7fd fd1a 	bl	b4a1c <free>
    }
    ~BleScanFilter() = default;
   b6fe8:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6fec:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6ff0:	f7ff ffeb 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b6ff4:	4628      	mov	r0, r5
   b6ff6:	f7fe fc8f 	bl	b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6ffa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6ffe:	f7fe f965 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b7002:	f104 0018 	add.w	r0, r4, #24
   b7006:	f7fe f961 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b700a:	e9d4 5300 	ldrd	r5, r3, [r4]
   b700e:	2624      	movs	r6, #36	; 0x24
   b7010:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7014:	42ae      	cmp	r6, r5
   b7016:	d004      	beq.n	b7022 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b7018:	4628      	mov	r0, r5
   b701a:	f7ff ffa9 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b701e:	3524      	adds	r5, #36	; 0x24
   b7020:	e7f8      	b.n	b7014 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b7022:	6820      	ldr	r0, [r4, #0]
   b7024:	f7fd fcfa 	bl	b4a1c <free>
   b7028:	4620      	mov	r0, r4
   b702a:	bd70      	pop	{r4, r5, r6, pc}

000b702c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b702c:	b530      	push	{r4, r5, lr}
   b702e:	4615      	mov	r5, r2
   b7030:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b7032:	460c      	mov	r4, r1
   b7034:	b179      	cbz	r1, b7056 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b7036:	b172      	cbz	r2, b7056 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b7038:	a801      	add	r0, sp, #4
   b703a:	f7ff ffa3 	bl	b6f84 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b703e:	4621      	mov	r1, r4
   b7040:	462a      	mov	r2, r5
   b7042:	a801      	add	r0, sp, #4
   b7044:	f7ff ff7c 	bl	b6f40 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b7048:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b704a:	a801      	add	r0, sp, #4
   b704c:	f7ff ffc4 	bl	b6fd8 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b7050:	4620      	mov	r0, r4
   b7052:	b01f      	add	sp, #124	; 0x7c
   b7054:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7056:	4c01      	ldr	r4, [pc, #4]	; (b705c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b7058:	e7fa      	b.n	b7050 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b705a:	bf00      	nop
   b705c:	fffffef2 	.word	0xfffffef2

000b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7060:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7062:	1e14      	subs	r4, r2, #0
   b7064:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7066:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7068:	db02      	blt.n	b7070 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b706a:	1862      	adds	r2, r4, r1
   b706c:	429a      	cmp	r2, r3
   b706e:	dd00      	ble.n	b7072 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b7070:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b7072:	682a      	ldr	r2, [r5, #0]
   b7074:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b7076:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b7078:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b707a:	1a52      	subs	r2, r2, r1
   b707c:	f002 f87a 	bl	b9174 <memmove>
    size_ -= n;
   b7080:	686a      	ldr	r2, [r5, #4]
   b7082:	1b12      	subs	r2, r2, r4
   b7084:	606a      	str	r2, [r5, #4]
}
   b7086:	bd38      	pop	{r3, r4, r5, pc}

000b7088 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b7088:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b708a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b708c:	4604      	mov	r4, r0
   b708e:	460d      	mov	r5, r1
   b7090:	ab01      	add	r3, sp, #4
   b7092:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7096:	f7ff fa4b 	bl	b6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b709a:	4602      	mov	r2, r0
   b709c:	b138      	cbz	r0, b70ae <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b709e:	9901      	ldr	r1, [sp, #4]
   b70a0:	4620      	mov	r0, r4
   b70a2:	f7ff ffdd 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b70a6:	4629      	mov	r1, r5
   b70a8:	4620      	mov	r0, r4
   b70aa:	f7ff ffed 	bl	b7088 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b70ae:	b003      	add	sp, #12
   b70b0:	bd30      	pop	{r4, r5, pc}

000b70b2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b70b2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b70b4:	460c      	mov	r4, r1
   b70b6:	b929      	cbnz	r1, b70c4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b70b8:	460a      	mov	r2, r1
   b70ba:	4608      	mov	r0, r1
}
   b70bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b70c0:	f7fd bb2e 	b.w	b4720 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b70c4:	2101      	movs	r1, #1
   b70c6:	4620      	mov	r0, r4
   b70c8:	f7ff ffde 	bl	b7088 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b70cc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b70d0:	2200      	movs	r2, #0
   b70d2:	e7f3      	b.n	b70bc <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b70d4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b70d4:	b538      	push	{r3, r4, r5, lr}
   b70d6:	4604      	mov	r4, r0
   b70d8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b70da:	f7ff ff28 	bl	b6f2e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b70de:	2800      	cmp	r0, #0
   b70e0:	db0a      	blt.n	b70f8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b70e2:	4629      	mov	r1, r5
   b70e4:	4620      	mov	r0, r4
   b70e6:	f7ff ffe4 	bl	b70b2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b70ea:	2800      	cmp	r0, #0
   b70ec:	db04      	blt.n	b70f8 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
}
   b70ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b70f2:	2000      	movs	r0, #0
   b70f4:	f7fd bb1c 	b.w	b4730 <hal_ble_gap_start_advertising>
}
   b70f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b70fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b70fc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b70fe:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7100:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7102:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7104:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7106:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7108:	f7fc ffd5 	bl	b40b6 <_Znwj>
   b710c:	b118      	cbz	r0, b7116 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b710e:	682b      	ldr	r3, [r5, #0]
   b7110:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7112:	686b      	ldr	r3, [r5, #4]
   b7114:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b7116:	4b03      	ldr	r3, [pc, #12]	; (b7124 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b7118:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b711a:	4b03      	ldr	r3, [pc, #12]	; (b7128 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b711c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b711e:	60a3      	str	r3, [r4, #8]
      }
   b7120:	4620      	mov	r0, r4
   b7122:	bd38      	pop	{r3, r4, r5, pc}
   b7124:	000b6571 	.word	0x000b6571
   b7128:	000b6589 	.word	0x000b6589

000b712c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b712c:	680b      	ldr	r3, [r1, #0]
   b712e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7130:	b113      	cbz	r3, b7138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7132:	685a      	ldr	r2, [r3, #4]
   b7134:	3201      	adds	r2, #1
   b7136:	605a      	str	r2, [r3, #4]
      }
   b7138:	4770      	bx	lr

000b713a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b713a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b713c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7140:	4604      	mov	r4, r0
   b7142:	f840 3b04 	str.w	r3, [r0], #4
   b7146:	f7ff fff1 	bl	b712c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b714a:	6823      	ldr	r3, [r4, #0]
   b714c:	b90b      	cbnz	r3, b7152 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b714e:	f7ff fa05 	bl	b655c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b7152:	4620      	mov	r0, r4
   b7154:	bd10      	pop	{r4, pc}

000b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b7156:	b510      	push	{r4, lr}
   b7158:	f851 3b04 	ldr.w	r3, [r1], #4
   b715c:	4604      	mov	r4, r0
   b715e:	f840 3b04 	str.w	r3, [r0], #4
   b7162:	f7ff ffe3 	bl	b712c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b7166:	4620      	mov	r0, r4
   b7168:	bd10      	pop	{r4, pc}

000b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b716a:	b510      	push	{r4, lr}
   b716c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7170:	4604      	mov	r4, r0
   b7172:	f840 3b04 	str.w	r3, [r0], #4
   b7176:	f7ff ffd9 	bl	b712c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b717a:	4620      	mov	r0, r4
   b717c:	bd10      	pop	{r4, pc}

000b717e <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b717e:	b510      	push	{r4, lr}
   b7180:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7182:	3004      	adds	r0, #4
   b7184:	f7fd fd72 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7188:	4620      	mov	r0, r4
   b718a:	bd10      	pop	{r4, pc}

000b718c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b718c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b718e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7192:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7194:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7198:	42ae      	cmp	r6, r5
   b719a:	d004      	beq.n	b71a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b719c:	1d28      	adds	r0, r5, #4
   b719e:	f7fd fd65 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71a2:	3508      	adds	r5, #8
   b71a4:	e7f8      	b.n	b7198 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b71a6:	6820      	ldr	r0, [r4, #0]
   b71a8:	f7fd fc38 	bl	b4a1c <free>
}
   b71ac:	4620      	mov	r0, r4
   b71ae:	bd70      	pop	{r4, r5, r6, pc}

000b71b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71b0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b71b2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b71b6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b71b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b71bc:	42ae      	cmp	r6, r5
   b71be:	d004      	beq.n	b71ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b71c0:	1d28      	adds	r0, r5, #4
   b71c2:	f7fd fd53 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b71c6:	3508      	adds	r5, #8
   b71c8:	e7f8      	b.n	b71bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b71ca:	6820      	ldr	r0, [r4, #0]
   b71cc:	f7fd fc26 	bl	b4a1c <free>
}
   b71d0:	4620      	mov	r0, r4
   b71d2:	bd70      	pop	{r4, r5, r6, pc}

000b71d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b71d4:	b510      	push	{r4, lr}
   b71d6:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b71d8:	3024      	adds	r0, #36	; 0x24
   b71da:	f7ff ffe9 	bl	b71b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b71de:	f104 0018 	add.w	r0, r4, #24
   b71e2:	f7ff ffd3 	bl	b718c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b71e6:	bd10      	pop	{r4, pc}

000b71e8 <__tcf_0>:
    static BleLocalDevice instance;
   b71e8:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b71ea:	4b17      	ldr	r3, [pc, #92]	; (b7248 <__tcf_0+0x60>)
   b71ec:	681c      	ldr	r4, [r3, #0]
   b71ee:	b354      	cbz	r4, b7246 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b71f0:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b71f4:	f7fe f86a 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b71f8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b71fc:	f7fe f866 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b7200:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7204:	f7fe f862 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b7208:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b720c:	f7fe f85e 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7210:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7214:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b7218:	42ae      	cmp	r6, r5
   b721a:	d004      	beq.n	b7226 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b721c:	1d28      	adds	r0, r5, #4
   b721e:	f7fd fd25 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7222:	3508      	adds	r5, #8
   b7224:	e7f8      	b.n	b7218 <__tcf_0+0x30>
    ::free(ptr);
   b7226:	69a0      	ldr	r0, [r4, #24]
   b7228:	f7fd fbf8 	bl	b4a1c <free>
    ~BleLocalDeviceImpl() = default;
   b722c:	f104 000c 	add.w	r0, r4, #12
   b7230:	f7ff ffbe 	bl	b71b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7234:	4620      	mov	r0, r4
   b7236:	f7ff ffa9 	bl	b718c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b723a:	4620      	mov	r0, r4
   b723c:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b723e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7242:	f7fc bf3c 	b.w	b40be <_ZdlPvj>
   b7246:	bd70      	pop	{r4, r5, r6, pc}
   b7248:	2003e724 	.word	0x2003e724

000b724c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b724c:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b724e:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b7250:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b7254:	e9c1 3300 	strd	r3, r3, [r1]
   b7258:	6803      	ldr	r3, [r0, #0]
   b725a:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b725c:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b725e:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b7260:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b7262:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b7264:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b7266:	f7fd fd01 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b726a:	b002      	add	sp, #8
   b726c:	bd10      	pop	{r4, pc}

000b726e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b726e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7270:	b510      	push	{r4, lr}
      if (_M_empty())
   b7272:	b90a      	cbnz	r2, b7278 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7274:	f001 fe3c 	bl	b8ef0 <_ZSt25__throw_bad_function_callv>
    }
   b7278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b727c:	68c3      	ldr	r3, [r0, #12]
   b727e:	4718      	bx	r3

000b7280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b7284:	2300      	movs	r3, #0
   b7286:	e9c0 3300 	strd	r3, r3, [r0]
   b728a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b728c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b7290:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7292:	4605      	mov	r5, r0
   b7294:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7296:	dd4a      	ble.n	b732e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b7298:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b729c:	f7fd fbb6 	bl	b4a0c <malloc>
            if (!d) {
   b72a0:	4606      	mov	r6, r0
   b72a2:	2800      	cmp	r0, #0
   b72a4:	d043      	beq.n	b732e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b72a6:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b72aa:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b72ac:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b72b0:	d916      	bls.n	b72e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b72b2:	4550      	cmp	r0, sl
   b72b4:	d215      	bcs.n	b72e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b72b6:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b72ba:	f1a4 0910 	sub.w	r9, r4, #16
   b72be:	ebaa 0404 	sub.w	r4, sl, r4
   b72c2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b72c4:	45d1      	cmp	r9, sl
   b72c6:	d01d      	beq.n	b7304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b72c8:	b11c      	cbz	r4, b72d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b72ca:	4651      	mov	r1, sl
   b72cc:	4620      	mov	r0, r4
   b72ce:	f001 fd4f 	bl	b8d70 <_ZN6StringC1EOS_>
                end->~T();
   b72d2:	4650      	mov	r0, sl
   b72d4:	f001 fcd0 	bl	b8c78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b72d8:	f1aa 0a10 	sub.w	sl, sl, #16
   b72dc:	3c10      	subs	r4, #16
   b72de:	e7f1      	b.n	b72c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b72e0:	d010      	beq.n	b7304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b72e2:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b72e4:	45a2      	cmp	sl, r4
   b72e6:	d00d      	beq.n	b7304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b72e8:	f1b9 0f00 	cmp.w	r9, #0
   b72ec:	d003      	beq.n	b72f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b72ee:	4621      	mov	r1, r4
   b72f0:	4648      	mov	r0, r9
   b72f2:	f001 fd3d 	bl	b8d70 <_ZN6StringC1EOS_>
                p->~T();
   b72f6:	4620      	mov	r0, r4
   b72f8:	f001 fcbe 	bl	b8c78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b72fc:	3410      	adds	r4, #16
   b72fe:	f109 0910 	add.w	r9, r9, #16
   b7302:	e7ef      	b.n	b72e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b7304:	6828      	ldr	r0, [r5, #0]
   b7306:	f7fd fb89 	bl	b4a1c <free>
        capacity_ = n;
   b730a:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b730e:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7310:	e9d7 4300 	ldrd	r4, r3, [r7]
   b7314:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b7318:	45a0      	cmp	r8, r4
   b731a:	d006      	beq.n	b732a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b731c:	4621      	mov	r1, r4
   b731e:	4630      	mov	r0, r6
   b7320:	f001 fd40 	bl	b8da4 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b7324:	3410      	adds	r4, #16
   b7326:	3610      	adds	r6, #16
   b7328:	e7f6      	b.n	b7318 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b732a:	687b      	ldr	r3, [r7, #4]
   b732c:	606b      	str	r3, [r5, #4]
}
   b732e:	4628      	mov	r0, r5
   b7330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b7334 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b7334:	b530      	push	{r4, r5, lr}
   b7336:	b08d      	sub	sp, #52	; 0x34
   b7338:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b733a:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b733e:	a801      	add	r0, sp, #4
   b7340:	f7ff ff9e 	bl	b7280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b7344:	9b02      	ldr	r3, [sp, #8]
   b7346:	2b00      	cmp	r3, #0
   b7348:	dd2f      	ble.n	b73aa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b734a:	f104 0114 	add.w	r1, r4, #20
   b734e:	a804      	add	r0, sp, #16
   b7350:	f7ff fba0 	bl	b6a94 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b7354:	f104 0108 	add.w	r1, r4, #8
   b7358:	a808      	add	r0, sp, #32
   b735a:	f7ff fb9b 	bl	b6a94 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b735e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b7360:	9b06      	ldr	r3, [sp, #24]
   b7362:	4313      	orrs	r3, r2
   b7364:	d01f      	beq.n	b73a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b7366:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b736a:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b736e:	42ac      	cmp	r4, r5
   b7370:	d019      	beq.n	b73a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b7372:	a904      	add	r1, sp, #16
   b7374:	4620      	mov	r0, r4
   b7376:	f001 fd6b 	bl	b8e50 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b737a:	b160      	cbz	r0, b7396 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b737c:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b737e:	a808      	add	r0, sp, #32
   b7380:	f001 fc7a 	bl	b8c78 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b7384:	a804      	add	r0, sp, #16
   b7386:	f001 fc77 	bl	b8c78 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b738a:	a801      	add	r0, sp, #4
   b738c:	f7fe fac4 	bl	b5918 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b7390:	4620      	mov	r0, r4
   b7392:	b00d      	add	sp, #52	; 0x34
   b7394:	bd30      	pop	{r4, r5, pc}
   b7396:	4620      	mov	r0, r4
   b7398:	a908      	add	r1, sp, #32
   b739a:	f001 fd59 	bl	b8e50 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b739e:	3410      	adds	r4, #16
   b73a0:	2800      	cmp	r0, #0
   b73a2:	d0e4      	beq.n	b736e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b73a4:	e7ea      	b.n	b737c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b73a6:	2400      	movs	r4, #0
   b73a8:	e7e9      	b.n	b737e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b73aa:	2401      	movs	r4, #1
   b73ac:	e7ed      	b.n	b738a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b73ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b73ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b73b0:	2300      	movs	r3, #0
   b73b2:	e9c0 3300 	strd	r3, r3, [r0]
   b73b6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b73b8:	684f      	ldr	r7, [r1, #4]
   b73ba:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b73bc:	4605      	mov	r5, r0
   b73be:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b73c0:	dd3e      	ble.n	b7440 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b73c2:	00f8      	lsls	r0, r7, #3
   b73c4:	f7fd fb22 	bl	b4a0c <malloc>
            if (!d) {
   b73c8:	4604      	mov	r4, r0
   b73ca:	b3c8      	cbz	r0, b7440 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b73cc:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b73d0:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b73d2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b73d6:	d910      	bls.n	b73fa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b73d8:	429c      	cmp	r4, r3
   b73da:	d20f      	bcs.n	b73fc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b73dc:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b73de:	1a1a      	subs	r2, r3, r0
   b73e0:	f1a0 0c08 	sub.w	ip, r0, #8
   b73e4:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b73e6:	459c      	cmp	ip, r3
   b73e8:	d018      	beq.n	b741c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b73ea:	b11a      	cbz	r2, b73f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b73ec:	6819      	ldr	r1, [r3, #0]
   b73ee:	6011      	str	r1, [r2, #0]
   b73f0:	6859      	ldr	r1, [r3, #4]
   b73f2:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b73f4:	3b08      	subs	r3, #8
   b73f6:	3a08      	subs	r2, #8
   b73f8:	e7f5      	b.n	b73e6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b73fa:	d00f      	beq.n	b741c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b73fc:	4601      	mov	r1, r0
   b73fe:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b7400:	428b      	cmp	r3, r1
   b7402:	d00b      	beq.n	b741c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b7404:	b13a      	cbz	r2, b7416 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b7406:	f8d1 c000 	ldr.w	ip, [r1]
   b740a:	f8c2 c000 	str.w	ip, [r2]
   b740e:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b7412:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b7416:	3108      	adds	r1, #8
   b7418:	3208      	adds	r2, #8
   b741a:	e7f1      	b.n	b7400 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b741c:	f7fd fafe 	bl	b4a1c <free>
        data_ = d;
   b7420:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7422:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7424:	e9d6 3100 	ldrd	r3, r1, [r6]
   b7428:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b742c:	4298      	cmp	r0, r3
   b742e:	d006      	beq.n	b743e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b7430:	681a      	ldr	r2, [r3, #0]
   b7432:	6022      	str	r2, [r4, #0]
   b7434:	685a      	ldr	r2, [r3, #4]
   b7436:	6062      	str	r2, [r4, #4]
   b7438:	3308      	adds	r3, #8
   b743a:	3408      	adds	r4, #8
   b743c:	e7f6      	b.n	b742c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b743e:	6069      	str	r1, [r5, #4]
}
   b7440:	4628      	mov	r0, r5
   b7442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7444 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7444:	b570      	push	{r4, r5, r6, lr}
   b7446:	4604      	mov	r4, r0
        capacity_(0) {
   b7448:	2000      	movs	r0, #0
   b744a:	e9c4 0000 	strd	r0, r0, [r4]
   b744e:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7450:	684e      	ldr	r6, [r1, #4]
   b7452:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7454:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7456:	dd12      	ble.n	b747e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b7458:	0071      	lsls	r1, r6, #1
   b745a:	f7fd fae7 	bl	b4a2c <realloc>
            if (!d) {
   b745e:	b170      	cbz	r0, b747e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b7460:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7462:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7464:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7468:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b746c:	429a      	cmp	r2, r3
   b746e:	d004      	beq.n	b747a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b7470:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7474:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b7478:	e7f8      	b.n	b746c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b747a:	686b      	ldr	r3, [r5, #4]
   b747c:	6063      	str	r3, [r4, #4]
}
   b747e:	4620      	mov	r0, r4
   b7480:	bd70      	pop	{r4, r5, r6, pc}

000b7482 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b7482:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b7484:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b7486:	4604      	mov	r4, r0
        if (!dismissed_) {
   b7488:	b923      	cbnz	r3, b7494 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b748a:	6803      	ldr	r3, [r0, #0]
   b748c:	6818      	ldr	r0, [r3, #0]
   b748e:	b108      	cbz	r0, b7494 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b7490:	f7fd fac4 	bl	b4a1c <free>
            func_();
        }
    }
   b7494:	4620      	mov	r0, r4
   b7496:	bd10      	pop	{r4, pc}

000b7498 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b7498:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b749a:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b749c:	4604      	mov	r4, r0
        if (!dismissed_) {
   b749e:	b923      	cbnz	r3, b74aa <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b74a0:	6803      	ldr	r3, [r0, #0]
   b74a2:	6818      	ldr	r0, [r3, #0]
   b74a4:	b108      	cbz	r0, b74aa <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b74a6:	f7fd fab9 	bl	b4a1c <free>
    }
   b74aa:	4620      	mov	r0, r4
   b74ac:	bd10      	pop	{r4, pc}
	...

000b74b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b74b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b74b4:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b74b8:	b08f      	sub	sp, #60	; 0x3c
   b74ba:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b74bc:	f1b8 0f00 	cmp.w	r8, #0
   b74c0:	d072      	beq.n	b75a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b74c2:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b74c4:	2d00      	cmp	r5, #0
   b74c6:	d06f      	beq.n	b75a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b74c8:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b74cc:	231f      	movs	r3, #31
   b74ce:	2200      	movs	r2, #0
   b74d0:	21ff      	movs	r1, #255	; 0xff
   b74d2:	4648      	mov	r0, r9
   b74d4:	f7ff faab 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b74d8:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b74da:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b74dc:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b74de:	2200      	movs	r2, #0
   b74e0:	4619      	mov	r1, r3
   b74e2:	4638      	mov	r0, r7
   b74e4:	f7ff faa3 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b74e8:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b74ea:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b74ec:	d006      	beq.n	b74fc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b74ee:	42ae      	cmp	r6, r5
   b74f0:	d030      	beq.n	b7554 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b74f2:	2400      	movs	r4, #0
    }
   b74f4:	4620      	mov	r0, r4
   b74f6:	b00f      	add	sp, #60	; 0x3c
   b74f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b74fc:	4620      	mov	r0, r4
   b74fe:	f7fd fa85 	bl	b4a0c <malloc>
            dismissed_(false) {
   b7502:	ab03      	add	r3, sp, #12
   b7504:	9304      	str	r3, [sp, #16]
   b7506:	2300      	movs	r3, #0
   b7508:	4604      	mov	r4, r0
   b750a:	9003      	str	r0, [sp, #12]
   b750c:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b7510:	b970      	cbnz	r0, b7530 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b7512:	2320      	movs	r3, #32
   b7514:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7518:	4b24      	ldr	r3, [pc, #144]	; (b75ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b751a:	9300      	str	r3, [sp, #0]
   b751c:	4924      	ldr	r1, [pc, #144]	; (b75b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b751e:	4603      	mov	r3, r0
   b7520:	aa06      	add	r2, sp, #24
   b7522:	2032      	movs	r0, #50	; 0x32
   b7524:	f7fd f9c6 	bl	b48b4 <log_message>
                    return false;
   b7528:	a804      	add	r0, sp, #16
   b752a:	f7ff ffaa 	bl	b7482 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b752e:	e7e1      	b.n	b74f4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b7530:	4602      	mov	r2, r0
   b7532:	21ff      	movs	r1, #255	; 0xff
   b7534:	462b      	mov	r3, r5
   b7536:	4648      	mov	r0, r9
   b7538:	f7ff fa79 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b753c:	9803      	ldr	r0, [sp, #12]
   b753e:	462a      	mov	r2, r5
   b7540:	4641      	mov	r1, r8
   b7542:	f001 fdf9 	bl	b9138 <memcmp>
   b7546:	b118      	cbz	r0, b7550 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b7548:	a804      	add	r0, sp, #16
   b754a:	f7ff ff9a 	bl	b7482 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b754e:	e7ce      	b.n	b74ee <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b7550:	2401      	movs	r4, #1
   b7552:	e7e9      	b.n	b7528 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b7554:	4628      	mov	r0, r5
   b7556:	f7fd fa59 	bl	b4a0c <malloc>
   b755a:	2400      	movs	r4, #0
   b755c:	ab03      	add	r3, sp, #12
   b755e:	4606      	mov	r6, r0
   b7560:	9003      	str	r0, [sp, #12]
   b7562:	9304      	str	r3, [sp, #16]
   b7564:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b7568:	b978      	cbnz	r0, b758a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b756a:	2320      	movs	r3, #32
   b756c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b7570:	4b0e      	ldr	r3, [pc, #56]	; (b75ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b7572:	9300      	str	r3, [sp, #0]
   b7574:	490e      	ldr	r1, [pc, #56]	; (b75b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b7576:	4603      	mov	r3, r0
   b7578:	aa06      	add	r2, sp, #24
   b757a:	2032      	movs	r0, #50	; 0x32
   b757c:	f7fd f99a 	bl	b48b4 <log_message>
                    return false;
   b7580:	4634      	mov	r4, r6
   b7582:	a804      	add	r0, sp, #16
   b7584:	f7ff ff88 	bl	b7498 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b7588:	e7b4      	b.n	b74f4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b758a:	4602      	mov	r2, r0
   b758c:	21ff      	movs	r1, #255	; 0xff
   b758e:	462b      	mov	r3, r5
   b7590:	4638      	mov	r0, r7
   b7592:	f7ff fa4c 	bl	b6a2e <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b7596:	9803      	ldr	r0, [sp, #12]
   b7598:	462a      	mov	r2, r5
   b759a:	4641      	mov	r1, r8
   b759c:	f001 fdcc 	bl	b9138 <memcmp>
   b75a0:	2800      	cmp	r0, #0
   b75a2:	d1ee      	bne.n	b7582 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b75a4:	2401      	movs	r4, #1
   b75a6:	e7ec      	b.n	b7582 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b75a8:	2401      	movs	r4, #1
   b75aa:	e7a3      	b.n	b74f4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b75ac:	000b9808 	.word	0x000b9808
   b75b0:	000b9787 	.word	0x000b9787

000b75b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b75b4:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b75b6:	6883      	ldr	r3, [r0, #8]
   b75b8:	428b      	cmp	r3, r1
   b75ba:	da02      	bge.n	b75c2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b75bc:	f7fd fb6c 	bl	b4c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b75c0:	bd08      	pop	{r3, pc}
    return true;
   b75c2:	2001      	movs	r0, #1
   b75c4:	e7fc      	b.n	b75c0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b75c6 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b75c6:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b75c8:	680b      	ldr	r3, [r1, #0]
   b75ca:	6003      	str	r3, [r0, #0]
   b75cc:	684b      	ldr	r3, [r1, #4]
   b75ce:	6043      	str	r3, [r0, #4]
   b75d0:	4604      	mov	r4, r0
   b75d2:	460d      	mov	r5, r1
class BleAdvertisingData {
   b75d4:	3008      	adds	r0, #8
   b75d6:	3108      	adds	r1, #8
   b75d8:	f7fd fb6e 	bl	b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b75dc:	f105 0114 	add.w	r1, r5, #20
   b75e0:	f104 0014 	add.w	r0, r4, #20
   b75e4:	f7fd fb68 	bl	b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b75e8:	f895 3020 	ldrb.w	r3, [r5, #32]
   b75ec:	f884 3020 	strb.w	r3, [r4, #32]
   b75f0:	4620      	mov	r0, r4
   b75f2:	bd38      	pop	{r3, r4, r5, pc}

000b75f4 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b75f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b75f6:	4604      	mov	r4, r0
   b75f8:	a801      	add	r0, sp, #4
   b75fa:	f7fd fb5d 	bl	b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b75fe:	9b01      	ldr	r3, [sp, #4]
   b7600:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7602:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7604:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7606:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7608:	6062      	str	r2, [r4, #4]
   b760a:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b760c:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b760e:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7610:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7612:	9001      	str	r0, [sp, #4]
   b7614:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b7616:	f7fd fa01 	bl	b4a1c <free>
   b761a:	b004      	add	sp, #16
   b761c:	bd10      	pop	{r4, pc}

000b761e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b761e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7622:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7624:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7626:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7628:	4419      	add	r1, r3
   b762a:	6883      	ldr	r3, [r0, #8]
   b762c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b762e:	4604      	mov	r4, r0
   b7630:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7632:	dc12      	bgt.n	b765a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b7634:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7636:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7638:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b763a:	1bd2      	subs	r2, r2, r7
   b763c:	4631      	mov	r1, r6
   b763e:	1970      	adds	r0, r6, r5
   b7640:	f001 fd98 	bl	b9174 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7644:	462a      	mov	r2, r5
   b7646:	4641      	mov	r1, r8
   b7648:	4630      	mov	r0, r6
   b764a:	f001 fd85 	bl	b9158 <memcpy>
    size_ += n;
   b764e:	6863      	ldr	r3, [r4, #4]
   b7650:	442b      	add	r3, r5
   b7652:	6063      	str	r3, [r4, #4]
    return true;
   b7654:	2001      	movs	r0, #1
}
   b7656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b765a:	f7fd fb1d 	bl	b4c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b765e:	2800      	cmp	r0, #0
   b7660:	d1e8      	bne.n	b7634 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7662:	e7f8      	b.n	b7656 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7664 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7664:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b7666:	460a      	mov	r2, r1
   b7668:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b766a:	b510      	push	{r4, lr}
   b766c:	4604      	mov	r4, r0
    size_ = 0;
   b766e:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b7670:	b102      	cbz	r2, b7674 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b7672:	b90b      	cbnz	r3, b7678 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b7674:	2000      	movs	r0, #0
}
   b7676:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b7678:	2bff      	cmp	r3, #255	; 0xff
   b767a:	bf28      	it	cs
   b767c:	23ff      	movcs	r3, #255	; 0xff
   b767e:	f7ff ffce 	bl	b761e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b7682:	2800      	cmp	r0, #0
   b7684:	d0f7      	beq.n	b7676 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b7686:	6860      	ldr	r0, [r4, #4]
   b7688:	e7f5      	b.n	b7676 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b768a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b768c:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b768e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7692:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7694:	4604      	mov	r4, r0
   b7696:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7698:	da0b      	bge.n	b76b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b769a:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b769c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b769e:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b76a0:	1b52      	subs	r2, r2, r5
   b76a2:	1c48      	adds	r0, r1, #1
   b76a4:	f001 fd66 	bl	b9174 <memmove>
    new(p) T(std::move(value));
   b76a8:	557e      	strb	r6, [r7, r5]
    ++size_;
   b76aa:	6863      	ldr	r3, [r4, #4]
   b76ac:	3301      	adds	r3, #1
   b76ae:	6063      	str	r3, [r4, #4]
}
   b76b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76b2:	3101      	adds	r1, #1
   b76b4:	f7fd faf0 	bl	b4c98 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b76b8:	2800      	cmp	r0, #0
   b76ba:	d1ee      	bne.n	b769a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b76bc:	e7f8      	b.n	b76b0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b76be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b76be:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b76c0:	6841      	ldr	r1, [r0, #4]
   b76c2:	f7ff bfe2 	b.w	b768a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b76c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b76c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b76ca:	4604      	mov	r4, r0
   b76cc:	461d      	mov	r5, r3
   b76ce:	460f      	mov	r7, r1
   b76d0:	ab01      	add	r3, sp, #4
   b76d2:	4690      	mov	r8, r2
   b76d4:	460a      	mov	r2, r1
   b76d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b76da:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b76de:	f7fe ff27 	bl	b6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b76e2:	1cae      	adds	r6, r5, #2
   b76e4:	6863      	ldr	r3, [r4, #4]
   b76e6:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b76e8:	f1b9 0f00 	cmp.w	r9, #0
   b76ec:	d126      	bne.n	b773c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b76ee:	b328      	cbz	r0, b773c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b76f0:	4433      	add	r3, r6
   b76f2:	1a1b      	subs	r3, r3, r0
   b76f4:	2bff      	cmp	r3, #255	; 0xff
   b76f6:	d809      	bhi.n	b770c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b76f8:	9901      	ldr	r1, [sp, #4]
   b76fa:	4620      	mov	r0, r4
   b76fc:	f7ff fcb0 	bl	b7060 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7700:	6861      	ldr	r1, [r4, #4]
   b7702:	4620      	mov	r0, r4
   b7704:	4431      	add	r1, r6
   b7706:	f7ff ff55 	bl	b75b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b770a:	b918      	cbnz	r0, b7714 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b770c:	6860      	ldr	r0, [r4, #4]
}
   b770e:	b003      	add	sp, #12
   b7710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7714:	1c6a      	adds	r2, r5, #1
   b7716:	9901      	ldr	r1, [sp, #4]
   b7718:	b2d2      	uxtb	r2, r2
   b771a:	4620      	mov	r0, r4
   b771c:	f7ff ffb5 	bl	b768a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7720:	9901      	ldr	r1, [sp, #4]
   b7722:	463a      	mov	r2, r7
   b7724:	3101      	adds	r1, #1
   b7726:	4620      	mov	r0, r4
   b7728:	f7ff ffaf 	bl	b768a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b772c:	9901      	ldr	r1, [sp, #4]
   b772e:	462b      	mov	r3, r5
   b7730:	4642      	mov	r2, r8
   b7732:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7734:	4620      	mov	r0, r4
   b7736:	f7ff ff72 	bl	b761e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b773a:	e7e7      	b.n	b770c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b773c:	18f1      	adds	r1, r6, r3
   b773e:	29ff      	cmp	r1, #255	; 0xff
   b7740:	d8e4      	bhi.n	b770c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7742:	4620      	mov	r0, r4
   b7744:	f7ff ff36 	bl	b75b4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7748:	2800      	cmp	r0, #0
   b774a:	d0df      	beq.n	b770c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b774c:	1c69      	adds	r1, r5, #1
   b774e:	b2c9      	uxtb	r1, r1
   b7750:	4620      	mov	r0, r4
   b7752:	f7ff ffb4 	bl	b76be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7756:	4639      	mov	r1, r7
   b7758:	4620      	mov	r0, r4
   b775a:	f7ff ffb0 	bl	b76be <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b775e:	6861      	ldr	r1, [r4, #4]
   b7760:	462b      	mov	r3, r5
   b7762:	4642      	mov	r2, r8
   b7764:	e7e6      	b.n	b7734 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7766:	b430      	push	{r4, r5}
   b7768:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b776c:	b11a      	cbz	r2, b7776 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b776e:	9502      	str	r5, [sp, #8]
}
   b7770:	bc30      	pop	{r4, r5}
   b7772:	f7ff bfa8 	b.w	b76c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7776:	6840      	ldr	r0, [r0, #4]
}
   b7778:	bc30      	pop	{r4, r5}
   b777a:	4770      	bx	lr

000b777c <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b777c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b777e:	2300      	movs	r3, #0
   b7780:	e9c0 3300 	strd	r3, r3, [r0]
   b7784:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7786:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7788:	9300      	str	r3, [sp, #0]
   b778a:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b778c:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7790:	4619      	mov	r1, r3
   b7792:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7796:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7798:	f7ff ffe5 	bl	b7766 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b779c:	4620      	mov	r0, r4
   b779e:	b004      	add	sp, #16
   b77a0:	bd10      	pop	{r4, pc}

000b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b77a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b77a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77a6:	4604      	mov	r4, r0
   b77a8:	460d      	mov	r5, r1
   b77aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b77ac:	d914      	bls.n	b77d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b77ae:	4290      	cmp	r0, r2
   b77b0:	d213      	bcs.n	b77da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b77b2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b77b6:	1a75      	subs	r5, r6, r1
   b77b8:	f1a1 0708 	sub.w	r7, r1, #8
   b77bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b77be:	42b7      	cmp	r7, r6
   b77c0:	d018      	beq.n	b77f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b77c2:	b11c      	cbz	r4, b77cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b77c4:	4631      	mov	r1, r6
   b77c6:	4620      	mov	r0, r4
   b77c8:	f7ff fccf 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b77cc:	1d30      	adds	r0, r6, #4
   b77ce:	f7fd fa4d 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b77d2:	3e08      	subs	r6, #8
   b77d4:	3c08      	subs	r4, #8
   b77d6:	e7f2      	b.n	b77be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b77d8:	d00c      	beq.n	b77f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b77da:	42b5      	cmp	r5, r6
   b77dc:	d00a      	beq.n	b77f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b77de:	b11c      	cbz	r4, b77e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b77e0:	4629      	mov	r1, r5
   b77e2:	4620      	mov	r0, r4
   b77e4:	f7ff fcc1 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b77e8:	1d28      	adds	r0, r5, #4
   b77ea:	f7fd fa3f 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b77ee:	3508      	adds	r5, #8
   b77f0:	3408      	adds	r4, #8
   b77f2:	e7f2      	b.n	b77da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b77f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b77f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b77f8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b77fa:	6846      	ldr	r6, [r0, #4]
   b77fc:	4668      	mov	r0, sp
   b77fe:	f7ff fcb4 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7802:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7806:	429f      	cmp	r7, r3
   b7808:	db12      	blt.n	b7830 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b780a:	3701      	adds	r7, #1
        if (n > 0) {
   b780c:	2f00      	cmp	r7, #0
   b780e:	dd29      	ble.n	b7864 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7810:	00f8      	lsls	r0, r7, #3
   b7812:	f7fd f8fb 	bl	b4a0c <malloc>
            if (!d) {
   b7816:	4605      	mov	r5, r0
   b7818:	b1f0      	cbz	r0, b7858 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b781a:	e9d4 1200 	ldrd	r1, r2, [r4]
   b781e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7822:	f7ff ffbe 	bl	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7826:	6820      	ldr	r0, [r4, #0]
   b7828:	f7fd f8f8 	bl	b4a1c <free>
        data_ = d;
   b782c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b782e:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7830:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7832:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7834:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7838:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b783c:	4631      	mov	r1, r6
   b783e:	f106 0008 	add.w	r0, r6, #8
   b7842:	f7ff ffae 	bl	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7846:	b11e      	cbz	r6, b7850 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7848:	4669      	mov	r1, sp
   b784a:	4630      	mov	r0, r6
   b784c:	f7ff fc8d 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7850:	6863      	ldr	r3, [r4, #4]
   b7852:	3301      	adds	r3, #1
   b7854:	6063      	str	r3, [r4, #4]
    return true;
   b7856:	2501      	movs	r5, #1
   b7858:	a801      	add	r0, sp, #4
   b785a:	f7fd fa07 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b785e:	4628      	mov	r0, r5
   b7860:	b003      	add	sp, #12
   b7862:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7864:	2500      	movs	r5, #0
   b7866:	e7de      	b.n	b7826 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b786a:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b786e:	4605      	mov	r5, r0
   b7870:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7872:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7876:	42a6      	cmp	r6, r4
   b7878:	d005      	beq.n	b7886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b787a:	4639      	mov	r1, r7
   b787c:	4620      	mov	r0, r4
   b787e:	f7ff faae 	bl	b6dde <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7882:	b108      	cbz	r0, b7888 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7884:	b914      	cbnz	r4, b788c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7888:	3408      	adds	r4, #8
   b788a:	e7f4      	b.n	b7876 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b788c:	1d20      	adds	r0, r4, #4
   b788e:	f7fd f9ed 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7892:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7896:	f104 0108 	add.w	r1, r4, #8
   b789a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b789e:	4620      	mov	r0, r4
   b78a0:	f7ff ff7f 	bl	b77a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b78a4:	686b      	ldr	r3, [r5, #4]
   b78a6:	3b01      	subs	r3, #1
   b78a8:	606b      	str	r3, [r5, #4]
    return true;
   b78aa:	e7ec      	b.n	b7886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b78ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b78ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78b0:	4605      	mov	r5, r0
   b78b2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b78b4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b78b6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b78b8:	f7fe ff08 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b78bc:	682e      	ldr	r6, [r5, #0]
   b78be:	1ef3      	subs	r3, r6, #3
   b78c0:	2b0d      	cmp	r3, #13
   b78c2:	d83c      	bhi.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b78c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   b78c8:	0057000e 	.word	0x0057000e
   b78cc:	00d3003b 	.word	0x00d3003b
   b78d0:	003b003b 	.word	0x003b003b
   b78d4:	003b003b 	.word	0x003b003b
   b78d8:	009d003b 	.word	0x009d003b
   b78dc:	009d009d 	.word	0x009d009d
   b78e0:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b78e4:	a804      	add	r0, sp, #16
   b78e6:	f7ff fa21 	bl	b6d2c <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b78ea:	9b04      	ldr	r3, [sp, #16]
   b78ec:	89aa      	ldrh	r2, [r5, #12]
   b78ee:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b78f0:	6869      	ldr	r1, [r5, #4]
   b78f2:	9804      	ldr	r0, [sp, #16]
   b78f4:	3108      	adds	r1, #8
   b78f6:	3002      	adds	r0, #2
   b78f8:	f7fe ff02 	bl	b6700 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b78fc:	a904      	add	r1, sp, #16
   b78fe:	a806      	add	r0, sp, #24
   b7900:	f7ff fc33 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7904:	a906      	add	r1, sp, #24
   b7906:	f104 0018 	add.w	r0, r4, #24
   b790a:	f7ff ff74 	bl	b77f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b790e:	4605      	mov	r5, r0
   b7910:	a807      	add	r0, sp, #28
   b7912:	f7fd f9ab 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7916:	b9c5      	cbnz	r5, b794a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7918:	2320      	movs	r3, #32
   b791a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b791e:	4b5e      	ldr	r3, [pc, #376]	; (b7a98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7920:	495e      	ldr	r1, [pc, #376]	; (b7a9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7922:	9300      	str	r3, [sp, #0]
   b7924:	aa06      	add	r2, sp, #24
   b7926:	462b      	mov	r3, r5
   b7928:	2001      	movs	r0, #1
   b792a:	f7fc ffc3 	bl	b48b4 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b792e:	9b04      	ldr	r3, [sp, #16]
   b7930:	4629      	mov	r1, r5
   b7932:	8818      	ldrh	r0, [r3, #0]
   b7934:	f7fc ff16 	bl	b4764 <hal_ble_gap_disconnect>
   b7938:	a805      	add	r0, sp, #20
   b793a:	f7fd f997 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b793e:	a803      	add	r0, sp, #12
   b7940:	f7fe fed2 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7944:	b00e      	add	sp, #56	; 0x38
   b7946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b794a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b794c:	b123      	cbz	r3, b7958 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b794e:	a904      	add	r1, sp, #16
   b7950:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7954:	f7ff fc8b 	bl	b726e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7958:	a805      	add	r0, sp, #20
   b795a:	f7fd f987 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b795e:	2120      	movs	r1, #32
   b7960:	2300      	movs	r3, #0
   b7962:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7966:	4a4e      	ldr	r2, [pc, #312]	; (b7aa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7968:	9200      	str	r2, [sp, #0]
   b796a:	494c      	ldr	r1, [pc, #304]	; (b7a9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b796c:	aa06      	add	r2, sp, #24
   b796e:	2001      	movs	r0, #1
   b7970:	f7fc ffa0 	bl	b48b4 <log_message>
   b7974:	e7e3      	b.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7976:	89a9      	ldrh	r1, [r5, #12]
   b7978:	4620      	mov	r0, r4
   b797a:	f7ff f8ea 	bl	b6b52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b797e:	4606      	mov	r6, r0
   b7980:	2800      	cmp	r0, #0
   b7982:	d0dc      	beq.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7984:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7986:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b798a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b798e:	8029      	strh	r1, [r5, #0]
   b7990:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7994:	429a      	cmp	r2, r3
   b7996:	d003      	beq.n	b79a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7998:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b799c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b799e:	e7f9      	b.n	b7994 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b79a0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b79a4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b79a8:	45b8      	cmp	r8, r7
   b79aa:	d004      	beq.n	b79b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b79ac:	1d38      	adds	r0, r7, #4
   b79ae:	f7fd f95d 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79b2:	3708      	adds	r7, #8
   b79b4:	e7f8      	b.n	b79a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b79b6:	2300      	movs	r3, #0
   b79b8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b79ba:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b79be:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b79c2:	45b8      	cmp	r8, r7
   b79c4:	d004      	beq.n	b79d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b79c6:	1d38      	adds	r0, r7, #4
   b79c8:	f7fd f950 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b79cc:	3708      	adds	r7, #8
   b79ce:	e7f8      	b.n	b79c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b79d0:	2300      	movs	r3, #0
   b79d2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b79d4:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b79d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b79d8:	b123      	cbz	r3, b79e4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b79da:	4631      	mov	r1, r6
   b79dc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b79e0:	f7ff fc45 	bl	b726e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b79e4:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b79e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b79ea:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b79ec:	4631      	mov	r1, r6
   b79ee:	f104 0018 	add.w	r0, r4, #24
   b79f2:	f7ff ff39 	bl	b7868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b79f6:	2220      	movs	r2, #32
   b79f8:	2300      	movs	r3, #0
   b79fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b79fe:	4a29      	ldr	r2, [pc, #164]	; (b7aa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7a00:	e7b2      	b.n	b7968 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7a02:	89a9      	ldrh	r1, [r5, #12]
   b7a04:	4620      	mov	r0, r4
   b7a06:	f7ff f8a4 	bl	b6b52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7a0a:	2800      	cmp	r0, #0
   b7a0c:	d097      	beq.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7a0e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7a10:	2b00      	cmp	r3, #0
   b7a12:	d094      	beq.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7a14:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7a16:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7a18:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7a1c:	d001      	beq.n	b7a22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7a1e:	2e10      	cmp	r6, #16
   b7a20:	d117      	bne.n	b7a52 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7a22:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7a24:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7a26:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7a28:	2506      	movs	r5, #6
                        };
   b7a2a:	f88d 3015 	strb.w	r3, [sp, #21]
   b7a2e:	9104      	str	r1, [sp, #16]
   b7a30:	f88d 2014 	strb.w	r2, [sp, #20]
   b7a34:	9006      	str	r0, [sp, #24]
   b7a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7a3a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7a3c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7a40:	9508      	str	r5, [sp, #32]
   b7a42:	e883 0003 	stmia.w	r3, {r0, r1}
   b7a46:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7a48:	a906      	add	r1, sp, #24
   b7a4a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7a4e:	4798      	blx	r3
   b7a50:	e775      	b.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7a52:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7a54:	bf01      	itttt	eq
   b7a56:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7a58:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7a5a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7a5e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7a60:	bf0f      	iteee	eq
   b7a62:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7a66:	461a      	movne	r2, r3
   b7a68:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7a6a:	461d      	movne	r5, r3
   b7a6c:	e7dd      	b.n	b7a2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7a6e:	89a9      	ldrh	r1, [r5, #12]
   b7a70:	4620      	mov	r0, r4
   b7a72:	f7ff f86e 	bl	b6b52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7a76:	4601      	mov	r1, r0
   b7a78:	2800      	cmp	r0, #0
   b7a7a:	f43f af60 	beq.w	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7a7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7a80:	2b00      	cmp	r3, #0
   b7a82:	f43f af5c 	beq.w	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7a86:	686b      	ldr	r3, [r5, #4]
   b7a88:	9306      	str	r3, [sp, #24]
   b7a8a:	aa06      	add	r2, sp, #24
   b7a8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7a8e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7a92:	4798      	blx	r3
   b7a94:	e753      	b.n	b793e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7a96:	bf00      	nop
   b7a98:	000b9823 	.word	0x000b9823
   b7a9c:	000b9787 	.word	0x000b9787
   b7aa0:	000b9849 	.word	0x000b9849
   b7aa4:	000b9853 	.word	0x000b9853

000b7aa8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7aa8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7aaa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7aac:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7aae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7ab0:	dd05      	ble.n	b7abe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b7ab2:	2114      	movs	r1, #20
   b7ab4:	4369      	muls	r1, r5
   b7ab6:	f7fc ffb9 	bl	b4a2c <realloc>
            if (!d) {
   b7aba:	b918      	cbnz	r0, b7ac4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b7abc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7abe:	f7fc ffad 	bl	b4a1c <free>
        T* d = nullptr;
   b7ac2:	2000      	movs	r0, #0
        data_ = d;
   b7ac4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7ac6:	60a5      	str	r5, [r4, #8]
        return true;
   b7ac8:	2001      	movs	r0, #1
   b7aca:	e7f7      	b.n	b7abc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b7acc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b7ad0:	2400      	movs	r4, #0
   b7ad2:	e9c0 4400 	strd	r4, r4, [r0]
   b7ad6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7ad8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7ada:	6849      	ldr	r1, [r1, #4]
   b7adc:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7ade:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7ae0:	dd1a      	ble.n	b7b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7ae2:	f7ff ffe1 	bl	b7aa8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7ae6:	b1b8      	cbz	r0, b7b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7ae8:	e9d8 9300 	ldrd	r9, r3, [r8]
   b7aec:	f04f 0c14 	mov.w	ip, #20
   b7af0:	f8d7 e000 	ldr.w	lr, [r7]
   b7af4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b7af8:	eb09 0504 	add.w	r5, r9, r4
   b7afc:	45ac      	cmp	ip, r5
   b7afe:	d008      	beq.n	b7b12 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b7b00:	eb1e 0604 	adds.w	r6, lr, r4
   b7b04:	bf1f      	itttt	ne
   b7b06:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b7b08:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b7b0a:	682b      	ldrne	r3, [r5, #0]
   b7b0c:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b7b0e:	3414      	adds	r4, #20
   b7b10:	e7f2      	b.n	b7af8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b7b12:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7b16:	607b      	str	r3, [r7, #4]
}
   b7b18:	4638      	mov	r0, r7
   b7b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7b1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b7b22:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b7b26:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b28:	6883      	ldr	r3, [r0, #8]
   b7b2a:	19e9      	adds	r1, r5, r7
   b7b2c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7b2e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b30:	dc17      	bgt.n	b7b62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b7b32:	2314      	movs	r3, #20
   b7b34:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b7b36:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b38:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b7b3a:	fb03 f907 	mul.w	r9, r3, r7
   b7b3e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7b40:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b42:	1b52      	subs	r2, r2, r5
   b7b44:	4631      	mov	r1, r6
   b7b46:	eb06 0009 	add.w	r0, r6, r9
   b7b4a:	f001 fb13 	bl	b9174 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7b4e:	464a      	mov	r2, r9
   b7b50:	4641      	mov	r1, r8
   b7b52:	4630      	mov	r0, r6
   b7b54:	f001 fb00 	bl	b9158 <memcpy>
    size_ += n;
   b7b58:	6863      	ldr	r3, [r4, #4]
   b7b5a:	443b      	add	r3, r7
   b7b5c:	6063      	str	r3, [r4, #4]
}
   b7b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7b62:	f7ff ffa1 	bl	b7aa8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7b66:	2800      	cmp	r0, #0
   b7b68:	d1e3      	bne.n	b7b32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b7b6a:	e7f8      	b.n	b7b5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7b6c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7b6c:	b082      	sub	sp, #8
   b7b6e:	b570      	push	{r4, r5, r6, lr}
   b7b70:	460c      	mov	r4, r1
   b7b72:	a904      	add	r1, sp, #16
   b7b74:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b78:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7b7c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7b7e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b80:	da17      	bge.n	b7bb2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b7b82:	2314      	movs	r3, #20
   b7b84:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b7b88:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b7b8a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b7b8c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7b8e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b90:	1a52      	subs	r2, r2, r1
   b7b92:	18e0      	adds	r0, r4, r3
   b7b94:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b7b96:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7b98:	f001 faec 	bl	b9174 <memmove>
    new(p) T(std::move(value));
   b7b9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b7b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ba0:	6833      	ldr	r3, [r6, #0]
   b7ba2:	6023      	str	r3, [r4, #0]
    ++size_;
   b7ba4:	686b      	ldr	r3, [r5, #4]
   b7ba6:	3301      	adds	r3, #1
   b7ba8:	606b      	str	r3, [r5, #4]
}
   b7baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7bae:	b002      	add	sp, #8
   b7bb0:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7bb2:	3101      	adds	r1, #1
   b7bb4:	f7ff ff78 	bl	b7aa8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7bb8:	2800      	cmp	r0, #0
   b7bba:	d1e2      	bne.n	b7b82 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b7bbc:	e7f5      	b.n	b7baa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b7bc2:	2400      	movs	r4, #0
   b7bc4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7bc6:	1e93      	subs	r3, r2, #2
   b7bc8:	e9c0 4400 	strd	r4, r4, [r0]
   b7bcc:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b7bce:	4605      	mov	r5, r0
   b7bd0:	460f      	mov	r7, r1
   b7bd2:	4690      	mov	r8, r2
   b7bd4:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7bd6:	9305      	str	r3, [sp, #20]
    return size_;
   b7bd8:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7bda:	428c      	cmp	r4, r1
   b7bdc:	da72      	bge.n	b7cc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b7bde:	6838      	ldr	r0, [r7, #0]
   b7be0:	ab07      	add	r3, sp, #28
   b7be2:	4642      	mov	r2, r8
   b7be4:	1b09      	subs	r1, r1, r4
   b7be6:	4420      	add	r0, r4
   b7be8:	f7fe fca2 	bl	b6530 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b7bec:	4606      	mov	r6, r0
   b7bee:	2800      	cmp	r0, #0
   b7bf0:	d068      	beq.n	b7cc4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7bf2:	9b05      	ldr	r3, [sp, #20]
   b7bf4:	2b01      	cmp	r3, #1
   b7bf6:	d82f      	bhi.n	b7c58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7bf8:	f1a0 0b02 	sub.w	fp, r0, #2
   b7bfc:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7c00:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b7c04:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7c08:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7c0a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7c0c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7c0e:	d055      	beq.n	b7cbc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7c10:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7c12:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b7c16:	4413      	add	r3, r2
   b7c18:	a808      	add	r0, sp, #32
   b7c1a:	78d9      	ldrb	r1, [r3, #3]
   b7c1c:	789b      	ldrb	r3, [r3, #2]
   b7c1e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b7c22:	f7fe fdea 	bl	b67fa <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b7c26:	f10d 0e20 	add.w	lr, sp, #32
   b7c2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7c2e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7c32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7c36:	f8de 3000 	ldr.w	r3, [lr]
   b7c3a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7c3e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7c42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7c46:	ab0d      	add	r3, sp, #52	; 0x34
   b7c48:	cb0c      	ldmia	r3, {r2, r3}
   b7c4a:	6869      	ldr	r1, [r5, #4]
   b7c4c:	4628      	mov	r0, r5
   b7c4e:	f7ff ff8d 	bl	b7b6c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7c52:	f109 0901 	add.w	r9, r9, #1
   b7c56:	e7d7      	b.n	b7c08 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b7c58:	f1a8 0306 	sub.w	r3, r8, #6
   b7c5c:	2b01      	cmp	r3, #1
   b7c5e:	d82d      	bhi.n	b7cbc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7c60:	f1a0 0b02 	sub.w	fp, r0, #2
   b7c64:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b7c68:	f04f 0900 	mov.w	r9, #0
   b7c6c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7c70:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7c72:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7c74:	d022      	beq.n	b7cbc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7c76:	3302      	adds	r3, #2
    return data_[i];
   b7c78:	6839      	ldr	r1, [r7, #0]
   b7c7a:	4423      	add	r3, r4
   b7c7c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b7c80:	2201      	movs	r2, #1
   b7c82:	4419      	add	r1, r3
   b7c84:	a808      	add	r0, sp, #32
   b7c86:	f7fe fd99 	bl	b67bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b7c8a:	f10d 0e20 	add.w	lr, sp, #32
   b7c8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7c92:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7c96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b7c9a:	f8de 3000 	ldr.w	r3, [lr]
   b7c9e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7ca2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7ca6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7caa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b7cae:	6869      	ldr	r1, [r5, #4]
   b7cb0:	4628      	mov	r0, r5
   b7cb2:	f7ff ff5b 	bl	b7b6c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7cb6:	f109 0901 	add.w	r9, r9, #1
   b7cba:	e7d9      	b.n	b7c70 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b7cbc:	9b07      	ldr	r3, [sp, #28]
   b7cbe:	441c      	add	r4, r3
   b7cc0:	4434      	add	r4, r6
   b7cc2:	e789      	b.n	b7bd8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b7cc4:	4628      	mov	r0, r5
   b7cc6:	b013      	add	sp, #76	; 0x4c
   b7cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7ccc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7ccc:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b7cce:	2300      	movs	r3, #0
   b7cd0:	b085      	sub	sp, #20
   b7cd2:	e9c0 3300 	strd	r3, r3, [r0]
   b7cd6:	6083      	str	r3, [r0, #8]
   b7cd8:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7cda:	2202      	movs	r2, #2
   b7cdc:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7cde:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7ce0:	f7ff ff6d 	bl	b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7ce4:	a901      	add	r1, sp, #4
   b7ce6:	4620      	mov	r0, r4
   b7ce8:	f7ff ff19 	bl	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7cec:	a801      	add	r0, sp, #4
   b7cee:	f7ff f96c 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7cf2:	2202      	movs	r2, #2
   b7cf4:	4629      	mov	r1, r5
   b7cf6:	a801      	add	r0, sp, #4
   b7cf8:	f7ff ff61 	bl	b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7cfc:	a901      	add	r1, sp, #4
   b7cfe:	4620      	mov	r0, r4
   b7d00:	f7ff ff0d 	bl	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7d04:	a801      	add	r0, sp, #4
   b7d06:	f7ff f960 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b7d0a:	2203      	movs	r2, #3
   b7d0c:	4629      	mov	r1, r5
   b7d0e:	a801      	add	r0, sp, #4
   b7d10:	f7ff ff55 	bl	b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7d14:	a901      	add	r1, sp, #4
   b7d16:	4620      	mov	r0, r4
   b7d18:	f7ff ff01 	bl	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7d1c:	a801      	add	r0, sp, #4
   b7d1e:	f7ff f954 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b7d22:	2206      	movs	r2, #6
   b7d24:	4629      	mov	r1, r5
   b7d26:	a801      	add	r0, sp, #4
   b7d28:	f7ff ff49 	bl	b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7d2c:	a901      	add	r1, sp, #4
   b7d2e:	4620      	mov	r0, r4
   b7d30:	f7ff fef5 	bl	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7d34:	a801      	add	r0, sp, #4
   b7d36:	f7ff f948 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b7d3a:	2207      	movs	r2, #7
   b7d3c:	4629      	mov	r1, r5
   b7d3e:	a801      	add	r0, sp, #4
   b7d40:	f7ff ff3d 	bl	b7bbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7d44:	a901      	add	r1, sp, #4
   b7d46:	4620      	mov	r0, r4
   b7d48:	f7ff fee9 	bl	b7b1e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7d4c:	a801      	add	r0, sp, #4
   b7d4e:	f7ff f93c 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7d52:	4620      	mov	r0, r4
   b7d54:	b005      	add	sp, #20
   b7d56:	bd30      	pop	{r4, r5, pc}

000b7d58 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b7d58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7d5c:	b085      	sub	sp, #20
   b7d5e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7d60:	4601      	mov	r1, r0
   b7d62:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b7d64:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7d66:	f7ff ffb1 	bl	b7ccc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b7d6a:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b7d6c:	9b02      	ldr	r3, [sp, #8]
   b7d6e:	f04f 0e14 	mov.w	lr, #20
   b7d72:	fb0e 6c03 	mla	ip, lr, r3, r6
   b7d76:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b7d78:	45b4      	cmp	ip, r6
   b7d7a:	d00d      	beq.n	b7d98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b7d7c:	45b9      	cmp	r9, r7
   b7d7e:	f106 0614 	add.w	r6, r6, #20
   b7d82:	d009      	beq.n	b7d98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b7d84:	f1a6 0514 	sub.w	r5, r6, #20
   b7d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d8a:	fb0e 8407 	mla	r4, lr, r7, r8
   b7d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d90:	682b      	ldr	r3, [r5, #0]
   b7d92:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b7d94:	3701      	adds	r7, #1
   b7d96:	e7ef      	b.n	b7d78 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7d98:	a801      	add	r0, sp, #4
   b7d9a:	f7ff f916 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7d9e:	4638      	mov	r0, r7
   b7da0:	b005      	add	sp, #20
   b7da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7da6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b7da6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7daa:	b08b      	sub	sp, #44	; 0x2c
   b7dac:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7dae:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7db2:	a801      	add	r0, sp, #4
   b7db4:	f7ff fe8a 	bl	b7acc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b7db8:	9b02      	ldr	r3, [sp, #8]
   b7dba:	2b00      	cmp	r3, #0
   b7dbc:	dd4a      	ble.n	b7e54 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7dbe:	f104 0114 	add.w	r1, r4, #20
   b7dc2:	a804      	add	r0, sp, #16
   b7dc4:	f7ff ff82 	bl	b7ccc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7dc8:	f104 0108 	add.w	r1, r4, #8
   b7dcc:	a807      	add	r0, sp, #28
   b7dce:	f7ff ff7d 	bl	b7ccc <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b7dd2:	9d05      	ldr	r5, [sp, #20]
   b7dd4:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b7dd6:	2d00      	cmp	r5, #0
   b7dd8:	dc01      	bgt.n	b7dde <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b7dda:	2e00      	cmp	r6, #0
   b7ddc:	dd38      	ble.n	b7e50 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b7dde:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b7de0:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b7de2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b7de6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b7dea:	2314      	movs	r3, #20
   b7dec:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b7df0:	fb03 8505 	mla	r5, r3, r5, r8
   b7df4:	fb03 9606 	mla	r6, r3, r6, r9
   b7df8:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b7dfa:	45ba      	cmp	sl, r7
   b7dfc:	d028      	beq.n	b7e50 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b7dfe:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b7e00:	45ab      	cmp	fp, r5
   b7e02:	d015      	beq.n	b7e30 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b7e04:	4659      	mov	r1, fp
   b7e06:	4650      	mov	r0, sl
   b7e08:	f7fe fd06 	bl	b6818 <_ZNK8particle7BleUuideqERKS0_>
   b7e0c:	f10b 0b14 	add.w	fp, fp, #20
   b7e10:	4604      	mov	r4, r0
   b7e12:	2800      	cmp	r0, #0
   b7e14:	d0f4      	beq.n	b7e00 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7e16:	a807      	add	r0, sp, #28
   b7e18:	f7ff f8d7 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7e1c:	a804      	add	r0, sp, #16
   b7e1e:	f7ff f8d4 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7e22:	a801      	add	r0, sp, #4
   b7e24:	f7ff f8d1 	bl	b6fca <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b7e28:	4620      	mov	r0, r4
   b7e2a:	b00b      	add	sp, #44	; 0x2c
   b7e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7e30:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b7e32:	45b3      	cmp	fp, r6
   b7e34:	d009      	beq.n	b7e4a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b7e36:	4659      	mov	r1, fp
   b7e38:	4650      	mov	r0, sl
   b7e3a:	f7fe fced 	bl	b6818 <_ZNK8particle7BleUuideqERKS0_>
   b7e3e:	f10b 0b14 	add.w	fp, fp, #20
   b7e42:	4604      	mov	r4, r0
   b7e44:	2800      	cmp	r0, #0
   b7e46:	d0f4      	beq.n	b7e32 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b7e48:	e7e5      	b.n	b7e16 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b7e4a:	f10a 0a14 	add.w	sl, sl, #20
   b7e4e:	e7d4      	b.n	b7dfa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7e50:	2400      	movs	r4, #0
   b7e52:	e7e0      	b.n	b7e16 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b7e54:	2401      	movs	r4, #1
   b7e56:	e7e4      	b.n	b7e22 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b7e58:	b538      	push	{r3, r4, r5, lr}
   b7e5a:	4605      	mov	r5, r0
   b7e5c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7e5e:	f7fd fa3e 	bl	b52de <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e62:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7e64:	68a2      	ldr	r2, [r4, #8]
   b7e66:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e68:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e6a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7e6c:	68e2      	ldr	r2, [r4, #12]
   b7e6e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e70:	60e3      	str	r3, [r4, #12]
      }
   b7e72:	bd38      	pop	{r3, r4, r5, pc}

000b7e74 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b7e74:	b530      	push	{r4, r5, lr}
   b7e76:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b7e78:	2300      	movs	r3, #0
   b7e7a:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7e7c:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b7e7e:	4605      	mov	r5, r0
   b7e80:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b7e82:	b133      	cbz	r3, b7e92 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7e84:	2202      	movs	r2, #2
   b7e86:	4668      	mov	r0, sp
   b7e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b7e8a:	68e3      	ldr	r3, [r4, #12]
   b7e8c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7e8e:	68a3      	ldr	r3, [r4, #8]
   b7e90:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b7e92:	4629      	mov	r1, r5
   b7e94:	4668      	mov	r0, sp
   b7e96:	f7ff ffdf 	bl	b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7e9a:	4668      	mov	r0, sp
   b7e9c:	f7fd fa16 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
      }
   b7ea0:	b005      	add	sp, #20
   b7ea2:	bd30      	pop	{r4, r5, pc}

000b7ea4 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b7ea4:	b538      	push	{r3, r4, r5, lr}
   b7ea6:	460d      	mov	r5, r1
   b7ea8:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b7eaa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b7eac:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b7eae:	b123      	cbz	r3, b7eba <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b7eb0:	6828      	ldr	r0, [r5, #0]
   b7eb2:	314c      	adds	r1, #76	; 0x4c
   b7eb4:	304c      	adds	r0, #76	; 0x4c
   b7eb6:	f7ff ffdd 	bl	b7e74 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b7eba:	4620      	mov	r0, r4
   b7ebc:	682b      	ldr	r3, [r5, #0]
   b7ebe:	f840 3b04 	str.w	r3, [r0], #4
   b7ec2:	6869      	ldr	r1, [r5, #4]
   b7ec4:	f7fe fbdc 	bl	b6680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b7ec8:	4620      	mov	r0, r4
   b7eca:	bd38      	pop	{r3, r4, r5, pc}

000b7ecc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b7ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7ed0:	4604      	mov	r4, r0
   b7ed2:	b087      	sub	sp, #28
    WiringBleLock lk;
   b7ed4:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b7ed6:	460e      	mov	r6, r1
   b7ed8:	4617      	mov	r7, r2
    WiringBleLock lk;
   b7eda:	f7fe fbf7 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7ede:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b7ee0:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b7ee4:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b7ee8:	4544      	cmp	r4, r8
   b7eea:	46a1      	mov	r9, r4
   b7eec:	d016      	beq.n	b7f1c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b7eee:	4621      	mov	r1, r4
   b7ef0:	a801      	add	r0, sp, #4
   b7ef2:	f7fe fe59 	bl	b6ba8 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b7ef6:	4639      	mov	r1, r7
   b7ef8:	a801      	add	r0, sp, #4
   b7efa:	f7fe fc8d 	bl	b6818 <_ZNK8particle7BleUuideqERKS0_>
   b7efe:	3408      	adds	r4, #8
   b7f00:	4605      	mov	r5, r0
   b7f02:	2800      	cmp	r0, #0
   b7f04:	d0f0      	beq.n	b7ee8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b7f06:	4649      	mov	r1, r9
   b7f08:	4630      	mov	r0, r6
   b7f0a:	f7ff ffcb 	bl	b7ea4 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b7f0e:	4668      	mov	r0, sp
   b7f10:	f7fe fbea 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7f14:	4628      	mov	r0, r5
   b7f16:	b007      	add	sp, #28
   b7f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b7f1c:	2500      	movs	r5, #0
   b7f1e:	e7f6      	b.n	b7f0e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b7f20 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7f20:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7f22:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7f24:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7f26:	344c      	adds	r4, #76	; 0x4c
   b7f28:	b1b9      	cbz	r1, b7f5a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b7f2a:	e9cd 1200 	strd	r1, r2, [sp]
   b7f2e:	a802      	add	r0, sp, #8
   b7f30:	4669      	mov	r1, sp
   b7f32:	f7ff f8e3 	bl	b70fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7f36:	2300      	movs	r3, #0
	__x.swap(*this);
   b7f38:	a906      	add	r1, sp, #24
   b7f3a:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7f3c:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7f3e:	f7ff ff8b 	bl	b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7f42:	4621      	mov	r1, r4
   b7f44:	a806      	add	r0, sp, #24
   b7f46:	f7ff ff87 	bl	b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7f4a:	a806      	add	r0, sp, #24
   b7f4c:	f7fd f9be 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b7f50:	a802      	add	r0, sp, #8
   b7f52:	f7fd f9bb 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
}
   b7f56:	b00a      	add	sp, #40	; 0x28
   b7f58:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7f5a:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7f5c:	e7eb      	b.n	b7f36 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b7f5e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b7f5e:	b570      	push	{r4, r5, r6, lr}
   b7f60:	4604      	mov	r4, r0
   b7f62:	b08c      	sub	sp, #48	; 0x30
   b7f64:	460e      	mov	r6, r1
   b7f66:	9201      	str	r2, [sp, #4]
   b7f68:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b7f6a:	f7fe fdbd 	bl	b6ae8 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b7f6e:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b7f70:	9901      	ldr	r1, [sp, #4]
   b7f72:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7f76:	f000 ff20 	bl	b8dba <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7f7a:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b7f7e:	b1cd      	cbz	r5, b7fb4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b7f80:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b7f82:	9502      	str	r5, [sp, #8]
   b7f84:	a902      	add	r1, sp, #8
   b7f86:	a804      	add	r0, sp, #16
   b7f88:	9303      	str	r3, [sp, #12]
   b7f8a:	f7ff f8b7 	bl	b70fc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7f8e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7f90:	a908      	add	r1, sp, #32
   b7f92:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b7f94:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b7f96:	f7ff ff5f 	bl	b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7f9a:	4631      	mov	r1, r6
   b7f9c:	a808      	add	r0, sp, #32
   b7f9e:	f7ff ff5b 	bl	b7e58 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b7fa2:	a808      	add	r0, sp, #32
   b7fa4:	f7fd f992 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
   b7fa8:	a804      	add	r0, sp, #16
   b7faa:	f7fd f98f 	bl	b52cc <_ZNSt14_Function_baseD1Ev>
    }
   b7fae:	4620      	mov	r0, r4
   b7fb0:	b00c      	add	sp, #48	; 0x30
   b7fb2:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7fb4:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b7fb6:	e7ea      	b.n	b7f8e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>

000b7fb8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b7fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7fbc:	b087      	sub	sp, #28
   b7fbe:	461d      	mov	r5, r3
   b7fc0:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b7fc4:	4680      	mov	r8, r0
   b7fc6:	468b      	mov	fp, r1
   b7fc8:	4692      	mov	sl, r2
   b7fca:	9912      	ldr	r1, [sp, #72]	; 0x48
   b7fcc:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7fce:	2200      	movs	r2, #0
   b7fd0:	2068      	movs	r0, #104	; 0x68
   b7fd2:	9102      	str	r1, [sp, #8]
   b7fd4:	9204      	str	r2, [sp, #16]
   b7fd6:	f7fc f86e 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b7fda:	1e06      	subs	r6, r0, #0
   b7fdc:	f106 090c 	add.w	r9, r6, #12
   b7fe0:	d018      	beq.n	b8014 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7fe2:	2201      	movs	r2, #1
	: _M_impl(__a)
   b7fe4:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b7fe6:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b7fea:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b7fec:	4a15      	ldr	r2, [pc, #84]	; (b8044 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b7fee:	f847 2b20 	str.w	r2, [r7], #32
   b7ff2:	9b03      	ldr	r3, [sp, #12]
   b7ff4:	9100      	str	r1, [sp, #0]
   b7ff6:	465a      	mov	r2, fp
   b7ff8:	4651      	mov	r1, sl
   b7ffa:	4648      	mov	r0, r9
   b7ffc:	f7ff ffaf 	bl	b7f5e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b8000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8002:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b8004:	682b      	ldr	r3, [r5, #0]
   b8006:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b8008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b800a:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b800e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8010:	6823      	ldr	r3, [r4, #0]
   b8012:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b8014:	a904      	add	r1, sp, #16
   b8016:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b8018:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b801c:	f7ff f916 	bl	b724c <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b8020:	a805      	add	r0, sp, #20
   b8022:	f7fc fe23 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b8026:	f8d8 3000 	ldr.w	r3, [r8]
   b802a:	b93b      	cbnz	r3, b803c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>
        SPARK_ASSERT(false);
   b802c:	4a06      	ldr	r2, [pc, #24]	; (b8048 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b802e:	4907      	ldr	r1, [pc, #28]	; (b804c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b8030:	200a      	movs	r0, #10
}
   b8032:	b007      	add	sp, #28
   b8034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b8038:	f7fc bc34 	b.w	b48a4 <panic_>
}
   b803c:	b007      	add	sp, #28
   b803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8042:	bf00      	nop
   b8044:	000b9970 	.word	0x000b9970
   b8048:	000b4865 	.word	0x000b4865
   b804c:	000b9770 	.word	0x000b9770

000b8050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8050:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8054:	4604      	mov	r4, r0
   b8056:	460d      	mov	r5, r1
   b8058:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b805a:	d914      	bls.n	b8086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b805c:	4290      	cmp	r0, r2
   b805e:	d213      	bcs.n	b8088 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8060:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8064:	1a75      	subs	r5, r6, r1
   b8066:	f1a1 0708 	sub.w	r7, r1, #8
   b806a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b806c:	42b7      	cmp	r7, r6
   b806e:	d018      	beq.n	b80a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8070:	b11c      	cbz	r4, b807a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8072:	4631      	mov	r1, r6
   b8074:	4620      	mov	r0, r4
   b8076:	f7ff f86e 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b807a:	1d30      	adds	r0, r6, #4
   b807c:	f7fc fdf6 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8080:	3e08      	subs	r6, #8
   b8082:	3c08      	subs	r4, #8
   b8084:	e7f2      	b.n	b806c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8086:	d00c      	beq.n	b80a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8088:	42b5      	cmp	r5, r6
   b808a:	d00a      	beq.n	b80a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b808c:	b11c      	cbz	r4, b8096 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b808e:	4629      	mov	r1, r5
   b8090:	4620      	mov	r0, r4
   b8092:	f7ff f860 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b8096:	1d28      	adds	r0, r5, #4
   b8098:	f7fc fde8 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b809c:	3508      	adds	r5, #8
   b809e:	3408      	adds	r4, #8
   b80a0:	e7f2      	b.n	b8088 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b80a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b80a4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b80a6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b80a8:	4605      	mov	r5, r0
        if (n > 0) {
   b80aa:	dd11      	ble.n	b80d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b80ac:	00f0      	lsls	r0, r6, #3
   b80ae:	f7fc fcad 	bl	b4a0c <malloc>
            if (!d) {
   b80b2:	4604      	mov	r4, r0
   b80b4:	b158      	cbz	r0, b80ce <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b80b6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b80ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b80be:	f7ff ffc7 	bl	b8050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b80c2:	6828      	ldr	r0, [r5, #0]
   b80c4:	f7fc fcaa 	bl	b4a1c <free>
        data_ = d;
   b80c8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b80ca:	60ae      	str	r6, [r5, #8]
        return true;
   b80cc:	2001      	movs	r0, #1
    }
   b80ce:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b80d0:	2400      	movs	r4, #0
   b80d2:	e7f6      	b.n	b80c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b80d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b80d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b80d8:	2300      	movs	r3, #0
   b80da:	e9c0 3300 	strd	r3, r3, [r0]
   b80de:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b80e0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b80e2:	6849      	ldr	r1, [r1, #4]
   b80e4:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b80e6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b80e8:	dd13      	ble.n	b8112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b80ea:	f7ff ffdb 	bl	b80a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b80ee:	b180      	cbz	r0, b8112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b80f0:	e9d5 6300 	ldrd	r6, r3, [r5]
   b80f4:	6827      	ldr	r7, [r4, #0]
   b80f6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b80fa:	45b0      	cmp	r8, r6
   b80fc:	d007      	beq.n	b810e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b80fe:	b11f      	cbz	r7, b8108 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b8100:	4631      	mov	r1, r6
   b8102:	4638      	mov	r0, r7
   b8104:	f7ff f827 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b8108:	3608      	adds	r6, #8
   b810a:	3708      	adds	r7, #8
   b810c:	e7f5      	b.n	b80fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b810e:	686b      	ldr	r3, [r5, #4]
   b8110:	6063      	str	r3, [r4, #4]
}
   b8112:	4620      	mov	r0, r4
   b8114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8118 <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b8118:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b811a:	460d      	mov	r5, r1
   b811c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b811e:	a801      	add	r0, sp, #4
   b8120:	f7fe fad4 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b8124:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b8126:	4620      	mov	r0, r4
   b8128:	310c      	adds	r1, #12
   b812a:	f7ff ffd3 	bl	b80d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b812e:	a801      	add	r0, sp, #4
   b8130:	f7fe fada 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8134:	4620      	mov	r0, r4
   b8136:	b003      	add	sp, #12
   b8138:	bd30      	pop	{r4, r5, pc}

000b813a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b813a:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b813c:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b813e:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b8140:	4605      	mov	r5, r0
   b8142:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b8144:	b933      	cbnz	r3, b8154 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b8146:	4608      	mov	r0, r1
   b8148:	f7fe fa54 	bl	b65f4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b814c:	b910      	cbnz	r0, b8154 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b814e:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b8150:	2201      	movs	r2, #1
   b8152:	729a      	strb	r2, [r3, #10]
    return services();
   b8154:	4628      	mov	r0, r5
   b8156:	4621      	mov	r1, r4
   b8158:	f7ff ffde 	bl	b8118 <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b815c:	4628      	mov	r0, r5
   b815e:	bd38      	pop	{r3, r4, r5, pc}

000b8160 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8162:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8164:	6845      	ldr	r5, [r0, #4]
   b8166:	4668      	mov	r0, sp
   b8168:	f7fe fff5 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b816c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8170:	4299      	cmp	r1, r3
   b8172:	da10      	bge.n	b8196 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8174:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8176:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8178:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b817c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8180:	4629      	mov	r1, r5
   b8182:	f105 0008 	add.w	r0, r5, #8
   b8186:	f7ff ff63 	bl	b8050 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b818a:	b98d      	cbnz	r5, b81b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b818c:	6863      	ldr	r3, [r4, #4]
   b818e:	3301      	adds	r3, #1
   b8190:	6063      	str	r3, [r4, #4]
    return true;
   b8192:	2601      	movs	r6, #1
   b8194:	e006      	b.n	b81a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8196:	3101      	adds	r1, #1
   b8198:	4620      	mov	r0, r4
   b819a:	f7ff ff83 	bl	b80a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b819e:	4606      	mov	r6, r0
   b81a0:	2800      	cmp	r0, #0
   b81a2:	d1e7      	bne.n	b8174 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b81a4:	a801      	add	r0, sp, #4
   b81a6:	f7fc fd61 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81aa:	4630      	mov	r0, r6
   b81ac:	b002      	add	sp, #8
   b81ae:	bd70      	pop	{r4, r5, r6, pc}
   b81b0:	4669      	mov	r1, sp
   b81b2:	4628      	mov	r0, r5
   b81b4:	f7fe ffcf 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b81b8:	e7e8      	b.n	b818c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000b81bc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b81bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b81c0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b827c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b81c4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b8280 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b81c8:	b093      	sub	sp, #76	; 0x4c
   b81ca:	4605      	mov	r5, r0
   b81cc:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b81ce:	2700      	movs	r7, #0
   b81d0:	682b      	ldr	r3, [r5, #0]
   b81d2:	42bb      	cmp	r3, r7
   b81d4:	d94e      	bls.n	b8274 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b81d6:	a803      	add	r0, sp, #12
   b81d8:	f7fe fd8c 	bl	b6cf4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b81dc:	261c      	movs	r6, #28
   b81de:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b81e0:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b81e2:	437e      	muls	r6, r7
   b81e4:	4432      	add	r2, r6
   b81e6:	f10d 0c14 	add.w	ip, sp, #20
   b81ea:	1d13      	adds	r3, r2, #4
   b81ec:	46e3      	mov	fp, ip
   b81ee:	3214      	adds	r2, #20
   b81f0:	6818      	ldr	r0, [r3, #0]
   b81f2:	6859      	ldr	r1, [r3, #4]
   b81f4:	46e6      	mov	lr, ip
   b81f6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b81fa:	3308      	adds	r3, #8
   b81fc:	4293      	cmp	r3, r2
   b81fe:	46f4      	mov	ip, lr
   b8200:	d1f6      	bne.n	b81f0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b8202:	6818      	ldr	r0, [r3, #0]
   b8204:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b8208:	4659      	mov	r1, fp
   b820a:	a80a      	add	r0, sp, #40	; 0x28
   b820c:	f7fe fab4 	bl	b6778 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b8210:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b8214:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b821a:	f8dc 3000 	ldr.w	r3, [ip]
   b821e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b8220:	686b      	ldr	r3, [r5, #4]
   b8222:	9a03      	ldr	r2, [sp, #12]
   b8224:	4433      	add	r3, r6
   b8226:	a903      	add	r1, sp, #12
   b8228:	8b1b      	ldrh	r3, [r3, #24]
   b822a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b822c:	686b      	ldr	r3, [r5, #4]
   b822e:	4433      	add	r3, r6
   b8230:	8b5b      	ldrh	r3, [r3, #26]
   b8232:	82d3      	strh	r3, [r2, #22]
        return services_;
   b8234:	f8d8 0000 	ldr.w	r0, [r8]
   b8238:	f100 040c 	add.w	r4, r0, #12
   b823c:	a80a      	add	r0, sp, #40	; 0x28
   b823e:	f7fe ff8a 	bl	b7156 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b8242:	4620      	mov	r0, r4
   b8244:	a90a      	add	r1, sp, #40	; 0x28
   b8246:	f7ff ff8b 	bl	b8160 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b824a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b824c:	a80b      	add	r0, sp, #44	; 0x2c
   b824e:	f7fc fd0d 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8252:	b954      	cbnz	r4, b826a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b8254:	2320      	movs	r3, #32
   b8256:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b825a:	f8cd 9000 	str.w	r9, [sp]
   b825e:	4623      	mov	r3, r4
   b8260:	aa0a      	add	r2, sp, #40	; 0x28
   b8262:	4651      	mov	r1, sl
   b8264:	2032      	movs	r0, #50	; 0x32
   b8266:	f7fc fb25 	bl	b48b4 <log_message>
   b826a:	a804      	add	r0, sp, #16
   b826c:	f7fc fcfe 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b8270:	3701      	adds	r7, #1
   b8272:	e7ad      	b.n	b81d0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b8274:	b013      	add	sp, #76	; 0x4c
   b8276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b827a:	bf00      	nop
   b827c:	000b9860 	.word	0x000b9860
   b8280:	000b9787 	.word	0x000b9787

000b8284 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8284:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8288:	4604      	mov	r4, r0
   b828a:	460d      	mov	r5, r1
   b828c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b828e:	d914      	bls.n	b82ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8290:	4290      	cmp	r0, r2
   b8292:	d213      	bcs.n	b82bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8294:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8298:	1a75      	subs	r5, r6, r1
   b829a:	f1a1 0708 	sub.w	r7, r1, #8
   b829e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b82a0:	42b7      	cmp	r7, r6
   b82a2:	d018      	beq.n	b82d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b82a4:	b11c      	cbz	r4, b82ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b82a6:	4631      	mov	r1, r6
   b82a8:	4620      	mov	r0, r4
   b82aa:	f7fe ff46 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b82ae:	1d30      	adds	r0, r6, #4
   b82b0:	f7fc fcdc 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b82b4:	3e08      	subs	r6, #8
   b82b6:	3c08      	subs	r4, #8
   b82b8:	e7f2      	b.n	b82a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b82ba:	d00c      	beq.n	b82d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b82bc:	42b5      	cmp	r5, r6
   b82be:	d00a      	beq.n	b82d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b82c0:	b11c      	cbz	r4, b82ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b82c2:	4629      	mov	r1, r5
   b82c4:	4620      	mov	r0, r4
   b82c6:	f7fe ff38 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b82ca:	1d28      	adds	r0, r5, #4
   b82cc:	f7fc fcce 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b82d0:	3508      	adds	r5, #8
   b82d2:	3408      	adds	r4, #8
   b82d4:	e7f2      	b.n	b82bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b82d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b82d8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b82da:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b82dc:	4605      	mov	r5, r0
        if (n > 0) {
   b82de:	dd11      	ble.n	b8304 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b82e0:	00f0      	lsls	r0, r6, #3
   b82e2:	f7fc fb93 	bl	b4a0c <malloc>
            if (!d) {
   b82e6:	4604      	mov	r4, r0
   b82e8:	b158      	cbz	r0, b8302 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b82ea:	e9d5 1200 	ldrd	r1, r2, [r5]
   b82ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b82f2:	f7ff ffc7 	bl	b8284 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b82f6:	6828      	ldr	r0, [r5, #0]
   b82f8:	f7fc fb90 	bl	b4a1c <free>
        data_ = d;
   b82fc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b82fe:	60ae      	str	r6, [r5, #8]
        return true;
   b8300:	2001      	movs	r0, #1
    }
   b8302:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8304:	2400      	movs	r4, #0
   b8306:	e7f6      	b.n	b82f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b8308 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b830c:	2300      	movs	r3, #0
   b830e:	e9c0 3300 	strd	r3, r3, [r0]
   b8312:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8314:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8316:	6849      	ldr	r1, [r1, #4]
   b8318:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b831a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b831c:	dd13      	ble.n	b8346 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b831e:	f7ff ffdb 	bl	b82d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8322:	b180      	cbz	r0, b8346 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8324:	e9d5 6300 	ldrd	r6, r3, [r5]
   b8328:	6827      	ldr	r7, [r4, #0]
   b832a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b832e:	45b0      	cmp	r8, r6
   b8330:	d007      	beq.n	b8342 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b8332:	b11f      	cbz	r7, b833c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b8334:	4631      	mov	r1, r6
   b8336:	4638      	mov	r0, r7
   b8338:	f7fe feff 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b833c:	3608      	adds	r6, #8
   b833e:	3708      	adds	r7, #8
   b8340:	e7f5      	b.n	b832e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b8342:	686b      	ldr	r3, [r5, #4]
   b8344:	6063      	str	r3, [r4, #4]
}
   b8346:	4620      	mov	r0, r4
   b8348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b834c <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b834e:	460d      	mov	r5, r1
   b8350:	4604      	mov	r4, r0
    WiringBleLock lk;
   b8352:	a801      	add	r0, sp, #4
   b8354:	f7fe f9ba 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b8358:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b835a:	4620      	mov	r0, r4
   b835c:	3118      	adds	r1, #24
   b835e:	f7ff ffd3 	bl	b8308 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b8362:	a801      	add	r0, sp, #4
   b8364:	f7fe f9c0 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8368:	4620      	mov	r0, r4
   b836a:	b003      	add	sp, #12
   b836c:	bd30      	pop	{r4, r5, pc}

000b836e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8370:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b8372:	6845      	ldr	r5, [r0, #4]
   b8374:	4668      	mov	r0, sp
   b8376:	f7fe fee0 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b837a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b837e:	4299      	cmp	r1, r3
   b8380:	da10      	bge.n	b83a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b8382:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8384:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8386:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b838a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b838e:	4629      	mov	r1, r5
   b8390:	f105 0008 	add.w	r0, r5, #8
   b8394:	f7ff ff76 	bl	b8284 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8398:	b98d      	cbnz	r5, b83be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b839a:	6863      	ldr	r3, [r4, #4]
   b839c:	3301      	adds	r3, #1
   b839e:	6063      	str	r3, [r4, #4]
    return true;
   b83a0:	2601      	movs	r6, #1
   b83a2:	e006      	b.n	b83b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83a4:	3101      	adds	r1, #1
   b83a6:	4620      	mov	r0, r4
   b83a8:	f7ff ff96 	bl	b82d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b83ac:	4606      	mov	r6, r0
   b83ae:	2800      	cmp	r0, #0
   b83b0:	d1e7      	bne.n	b8382 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b83b2:	a801      	add	r0, sp, #4
   b83b4:	f7fc fc5a 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b83b8:	4630      	mov	r0, r6
   b83ba:	b002      	add	sp, #8
   b83bc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b83be:	4669      	mov	r1, sp
   b83c0:	4628      	mov	r0, r5
   b83c2:	f7fe feba 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b83c6:	e7e8      	b.n	b839a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b83c8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b83c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b83ca:	b085      	sub	sp, #20
   b83cc:	4605      	mov	r5, r0
    WiringBleLock lk;
   b83ce:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b83d0:	460c      	mov	r4, r1
   b83d2:	4617      	mov	r7, r2
    WiringBleLock lk;
   b83d4:	f7fe f97a 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b83d8:	2300      	movs	r3, #0
   b83da:	e9c5 3300 	strd	r3, r3, [r5]
   b83de:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b83e0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b83e2:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b83e6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b83ea:	42b4      	cmp	r4, r6
   b83ec:	d011      	beq.n	b8412 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b83ee:	6838      	ldr	r0, [r7, #0]
   b83f0:	4621      	mov	r1, r4
   b83f2:	f7fe fb99 	bl	b6b28 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b83f6:	b150      	cbz	r0, b840e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b83f8:	4621      	mov	r1, r4
   b83fa:	a802      	add	r0, sp, #8
   b83fc:	f7fe fe9d 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8400:	a902      	add	r1, sp, #8
   b8402:	4628      	mov	r0, r5
   b8404:	f7ff ffb3 	bl	b836e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b8408:	a803      	add	r0, sp, #12
   b840a:	f7fc fc2f 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b840e:	3408      	adds	r4, #8
   b8410:	e7eb      	b.n	b83ea <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b8412:	a801      	add	r0, sp, #4
   b8414:	f7fe f968 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b8418:	4628      	mov	r0, r5
   b841a:	b005      	add	sp, #20
   b841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8420 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b8420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b8424:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b8426:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b8428:	b091      	sub	sp, #68	; 0x44
   b842a:	4606      	mov	r6, r0
   b842c:	460f      	mov	r7, r1
   b842e:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b8430:	b933      	cbnz	r3, b8440 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b8432:	e9c0 3300 	strd	r3, r3, [r0]
   b8436:	6083      	str	r3, [r0, #8]
}
   b8438:	4630      	mov	r0, r6
   b843a:	b011      	add	sp, #68	; 0x44
   b843c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b8440:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b8442:	7e0d      	ldrb	r5, [r1, #24]
   b8444:	2d00      	cmp	r5, #0
   b8446:	d158      	bne.n	b84fa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b8448:	2320      	movs	r3, #32
   b844a:	462a      	mov	r2, r5
   b844c:	a803      	add	r0, sp, #12
   b844e:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b8452:	f7fe fadc 	bl	b6a0e <_ZNK8particle7BleUuid8toStringEb>
   b8456:	9b03      	ldr	r3, [sp, #12]
   b8458:	9301      	str	r3, [sp, #4]
   b845a:	4b2b      	ldr	r3, [pc, #172]	; (b8508 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b845c:	492b      	ldr	r1, [pc, #172]	; (b850c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b845e:	9300      	str	r3, [sp, #0]
   b8460:	aa08      	add	r2, sp, #32
   b8462:	462b      	mov	r3, r5
   b8464:	2001      	movs	r0, #1
   b8466:	f7fc fa25 	bl	b48b4 <log_message>
   b846a:	a803      	add	r0, sp, #12
   b846c:	f000 fc04 	bl	b8c78 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b8470:	231c      	movs	r3, #28
   b8472:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b8476:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b847a:	8a9a      	ldrh	r2, [r3, #20]
   b847c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b8480:	8adb      	ldrh	r3, [r3, #22]
   b8482:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b8486:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b8488:	4a21      	ldr	r2, [pc, #132]	; (b8510 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b848a:	8818      	ldrh	r0, [r3, #0]
   b848c:	9500      	str	r5, [sp, #0]
   b848e:	a908      	add	r1, sp, #32
   b8490:	f7fc f986 	bl	b47a0 <hal_ble_gatt_client_discover_characteristics>
   b8494:	2800      	cmp	r0, #0
   b8496:	db30      	blt.n	b84fa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b8498:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b849a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b849e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b84a2:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b84a4:	f1a4 0308 	sub.w	r3, r4, #8
   b84a8:	4599      	cmp	r9, r3
   b84aa:	d022      	beq.n	b84f2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b84ac:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b84b0:	89db      	ldrh	r3, [r3, #14]
   b84b2:	2b00      	cmp	r3, #0
   b84b4:	d0f5      	beq.n	b84a2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b84b6:	2210      	movs	r2, #16
   b84b8:	2100      	movs	r1, #0
   b84ba:	eb0d 0002 	add.w	r0, sp, r2
   b84be:	9503      	str	r5, [sp, #12]
   b84c0:	f000 fe72 	bl	b91a8 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b84c4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b84c8:	89d9      	ldrh	r1, [r3, #14]
   b84ca:	683b      	ldr	r3, [r7, #0]
   b84cc:	aa03      	add	r2, sp, #12
   b84ce:	8818      	ldrh	r0, [r3, #0]
   b84d0:	9500      	str	r5, [sp, #0]
   b84d2:	2313      	movs	r3, #19
   b84d4:	f7fc f982 	bl	b47dc <hal_ble_gatt_client_read>
                if (len > 0) {
   b84d8:	2800      	cmp	r0, #0
   b84da:	d0e2      	beq.n	b84a2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b84dc:	ab10      	add	r3, sp, #64	; 0x40
   b84de:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b84e0:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b84e2:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b84e6:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b84ea:	303c      	adds	r0, #60	; 0x3c
   b84ec:	f000 fc65 	bl	b8dba <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b84f0:	e7d7      	b.n	b84a2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b84f2:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b84f6:	2201      	movs	r2, #1
   b84f8:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b84fa:	4642      	mov	r2, r8
   b84fc:	4639      	mov	r1, r7
   b84fe:	4630      	mov	r0, r6
   b8500:	f7ff ff62 	bl	b83c8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b8504:	e798      	b.n	b8438 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b8506:	bf00      	nop
   b8508:	000b9885 	.word	0x000b9885
   b850c:	000b9787 	.word	0x000b9787
   b8510:	000b86b9 	.word	0x000b86b9

000b8514 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b8514:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b8516:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b8518:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b851a:	b085      	sub	sp, #20
   b851c:	4606      	mov	r6, r0
   b851e:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b8520:	b92b      	cbnz	r3, b852e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b8522:	a801      	add	r0, sp, #4
   b8524:	f7ff fe09 	bl	b813a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b8528:	a801      	add	r0, sp, #4
   b852a:	f7fe fe2f 	bl	b718c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b852e:	682b      	ldr	r3, [r5, #0]
   b8530:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b8534:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b8538:	42bc      	cmp	r4, r7
   b853a:	d009      	beq.n	b8550 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b853c:	4622      	mov	r2, r4
   b853e:	4629      	mov	r1, r5
   b8540:	a801      	add	r0, sp, #4
   b8542:	f7ff ff6d 	bl	b8420 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b8546:	a801      	add	r0, sp, #4
   b8548:	f7fe fe32 	bl	b71b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b854c:	3408      	adds	r4, #8
   b854e:	e7f3      	b.n	b8538 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b8550:	4630      	mov	r0, r6
   b8552:	4629      	mov	r1, r5
   b8554:	f7ff fefa 	bl	b834c <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b8558:	4630      	mov	r0, r6
   b855a:	b005      	add	sp, #20
   b855c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b8560 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b8560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8564:	4605      	mov	r5, r0
   b8566:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b8568:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b856a:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b856c:	460f      	mov	r7, r1
    return address_;
   b856e:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b8570:	4698      	mov	r8, r3
    return address_;
   b8572:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b8574:	4b41      	ldr	r3, [pc, #260]	; (b867c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b8576:	9304      	str	r3, [sp, #16]
    return address_;
   b8578:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b857a:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b857c:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b8580:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b8584:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b8588:	f7fe fc80 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b858c:	4b3c      	ldr	r3, [pc, #240]	; (b8680 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b858e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8590:	f7fe fc7c 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b8594:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8596:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b8598:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b859a:	464a      	mov	r2, r9
   b859c:	a804      	add	r0, sp, #16
   b859e:	f7fc f927 	bl	b47f0 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b85a2:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b85a4:	4604      	mov	r4, r0
   b85a6:	b138      	cbz	r0, b85b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b85a8:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b85aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b85ae:	801a      	strh	r2, [r3, #0]
}
   b85b0:	4620      	mov	r0, r4
   b85b2:	b013      	add	sp, #76	; 0x4c
   b85b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WiringBleLock lk;
   b85b8:	a803      	add	r0, sp, #12
   b85ba:	f7fe f887 	bl	b66cc <_ZN8particle3ble13WiringBleLockC1Ev>
        bind(addr);
   b85be:	4639      	mov	r1, r7
   b85c0:	4628      	mov	r0, r5
   b85c2:	f7fe fbe7 	bl	b6d94 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b85c6:	f7fe fc61 	bl	b6e8c <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b85ca:	6807      	ldr	r7, [r0, #0]
   b85cc:	4629      	mov	r1, r5
   b85ce:	3718      	adds	r7, #24
   b85d0:	4630      	mov	r0, r6
   b85d2:	f7fe fdca 	bl	b716a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b85d6:	4631      	mov	r1, r6
   b85d8:	4638      	mov	r0, r7
   b85da:	f7ff f90c 	bl	b77f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b85de:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b85e0:	a80b      	add	r0, sp, #44	; 0x2c
   b85e2:	f7fc fb43 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b85e6:	f04f 0920 	mov.w	r9, #32
   b85ea:	bb1f      	cbnz	r7, b8634 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b85ec:	4632      	mov	r2, r6
   b85ee:	4b25      	ldr	r3, [pc, #148]	; (b8684 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b85f0:	4e25      	ldr	r6, [pc, #148]	; (b8688 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b85f2:	4926      	ldr	r1, [pc, #152]	; (b868c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b85f4:	9300      	str	r3, [sp, #0]
   b85f6:	2032      	movs	r0, #50	; 0x32
   b85f8:	4623      	mov	r3, r4
   b85fa:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b85fe:	f7fc f959 	bl	b48b4 <log_message>
   b8602:	6830      	ldr	r0, [r6, #0]
   b8604:	f7fc f874 	bl	b46f0 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8608:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b860a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b860e:	4621      	mov	r1, r4
   b8610:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b8612:	4c1f      	ldr	r4, [pc, #124]	; (b8690 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b8614:	f7fc f8a6 	bl	b4764 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b8618:	6830      	ldr	r0, [r6, #0]
   b861a:	f7fc f861 	bl	b46e0 <os_mutex_recursive_lock>
        locked_ = true;
   b861e:	2301      	movs	r3, #1
   b8620:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b8624:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8626:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b862a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b862c:	a803      	add	r0, sp, #12
   b862e:	f7fe f85b 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
   b8632:	e7bd      	b.n	b85b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b8634:	a803      	add	r0, sp, #12
   b8636:	f7fe f857 	bl	b66e8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b863a:	4b16      	ldr	r3, [pc, #88]	; (b8694 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b863c:	9300      	str	r3, [sp, #0]
   b863e:	4913      	ldr	r1, [pc, #76]	; (b868c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b8640:	4623      	mov	r3, r4
   b8642:	4632      	mov	r2, r6
   b8644:	2001      	movs	r0, #1
   b8646:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b864a:	f7fc f933 	bl	b48b4 <log_message>
    if (automatic) {
   b864e:	f1b8 0f00 	cmp.w	r8, #0
   b8652:	d0ad      	beq.n	b85b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b8654:	4629      	mov	r1, r5
   b8656:	4630      	mov	r0, r6
   b8658:	f7ff ff5c 	bl	b8514 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b865c:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b8660:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b8664:	42bd      	cmp	r5, r7
   b8666:	d005      	beq.n	b8674 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b8668:	4628      	mov	r0, r5
   b866a:	2101      	movs	r1, #1
   b866c:	f7fe fb08 	bl	b6c80 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b8670:	3508      	adds	r5, #8
   b8672:	e7f7      	b.n	b8664 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b8674:	4630      	mov	r0, r6
   b8676:	f7fe fd9b 	bl	b71b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b867a:	e799      	b.n	b85b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b867c:	00180003 	.word	0x00180003
   b8680:	000b78ad 	.word	0x000b78ad
   b8684:	000b98b7 	.word	0x000b98b7
   b8688:	2003e720 	.word	0x2003e720
   b868c:	000b9787 	.word	0x000b9787
   b8690:	fffffefc 	.word	0xfffffefc
   b8694:	000b98d3 	.word	0x000b98d3

000b8698 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b8698:	b513      	push	{r0, r1, r4, lr}
   b869a:	4604      	mov	r4, r0
   b869c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b86a0:	f7fe fb44 	bl	b6d2c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b86a4:	9b00      	ldr	r3, [sp, #0]
   b86a6:	9901      	ldr	r1, [sp, #4]
   b86a8:	2200      	movs	r2, #0
   b86aa:	4620      	mov	r0, r4
   b86ac:	f7ff ff58 	bl	b8560 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b86b0:	4620      	mov	r0, r4
   b86b2:	b002      	add	sp, #8
   b86b4:	bd10      	pop	{r4, pc}
	...

000b86b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b86b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b86bc:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b86be:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b86c0:	2600      	movs	r6, #0
   b86c2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b86c6:	4b66      	ldr	r3, [pc, #408]	; (b8860 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b86c8:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b86ca:	4605      	mov	r5, r0
   b86cc:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b86ce:	4633      	mov	r3, r6
   b86d0:	4964      	ldr	r1, [pc, #400]	; (b8864 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b86d2:	f8df 9194 	ldr.w	r9, [pc, #404]	; b8868 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b86d6:	f8df 818c 	ldr.w	r8, [pc, #396]	; b8864 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b86da:	f8df a190 	ldr.w	sl, [pc, #400]	; b886c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b86de:	aa0c      	add	r2, sp, #48	; 0x30
   b86e0:	2001      	movs	r0, #1
   b86e2:	f7fc f8e7 	bl	b48b4 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b86e6:	682b      	ldr	r3, [r5, #0]
   b86e8:	42b3      	cmp	r3, r6
   b86ea:	f240 80b5 	bls.w	b8858 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b86ee:	a803      	add	r0, sp, #12
   b86f0:	f7fe fa40 	bl	b6b74 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b86f4:	a805      	add	r0, sp, #20
   b86f6:	f7fe fafd 	bl	b6cf4 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b86fa:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b86fe:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b8700:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b8702:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b8706:	445b      	add	r3, fp
        this->size = halHandles.size;
   b8708:	8bd9      	ldrh	r1, [r3, #30]
   b870a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b870c:	8c19      	ldrh	r1, [r3, #32]
   b870e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b8710:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b8712:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b8714:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b8716:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b8718:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b871a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b871c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b871e:	8253      	strh	r3, [r2, #18]
   b8720:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b8724:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b8728:	429a      	cmp	r2, r3
   b872a:	d07d      	beq.n	b8828 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b872c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b872e:	8ac4      	ldrh	r4, [r0, #22]
   b8730:	428c      	cmp	r4, r1
   b8732:	d377      	bcc.n	b8824 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b8734:	8a84      	ldrh	r4, [r0, #20]
   b8736:	428c      	cmp	r4, r1
   b8738:	d874      	bhi.n	b8824 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b873a:	6859      	ldr	r1, [r3, #4]
   b873c:	9005      	str	r0, [sp, #20]
   b873e:	a806      	add	r0, sp, #24
   b8740:	f7fd ff9e 	bl	b6680 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b8744:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b8748:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b874c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8750:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b8754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8756:	f8dc 3000 	ldr.w	r3, [ip]
   b875a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b875c:	892b      	ldrh	r3, [r5, #8]
   b875e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b8762:	686b      	ldr	r3, [r5, #4]
   b8764:	9c03      	ldr	r4, [sp, #12]
   b8766:	445b      	add	r3, fp
   b8768:	7e5b      	ldrb	r3, [r3, #25]
   b876a:	f013 0f02 	tst.w	r3, #2
   b876e:	d16e      	bne.n	b884e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b8770:	686b      	ldr	r3, [r5, #4]
   b8772:	445b      	add	r3, fp
   b8774:	7e5b      	ldrb	r3, [r3, #25]
   b8776:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b8778:	bf42      	ittt	mi
   b877a:	7923      	ldrbmi	r3, [r4, #4]
   b877c:	f043 0304 	orrmi.w	r3, r3, #4
   b8780:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b8782:	686b      	ldr	r3, [r5, #4]
   b8784:	445b      	add	r3, fp
   b8786:	7e5b      	ldrb	r3, [r3, #25]
   b8788:	0719      	lsls	r1, r3, #28
   b878a:	bf42      	ittt	mi
   b878c:	7923      	ldrbmi	r3, [r4, #4]
   b878e:	f043 0308 	orrmi.w	r3, r3, #8
   b8792:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b8794:	686b      	ldr	r3, [r5, #4]
   b8796:	445b      	add	r3, fp
   b8798:	7e5b      	ldrb	r3, [r3, #25]
   b879a:	06da      	lsls	r2, r3, #27
   b879c:	bf42      	ittt	mi
   b879e:	7923      	ldrbmi	r3, [r4, #4]
   b87a0:	f043 0310 	orrmi.w	r3, r3, #16
   b87a4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b87a6:	686b      	ldr	r3, [r5, #4]
   b87a8:	445b      	add	r3, fp
   b87aa:	aa07      	add	r2, sp, #28
   b87ac:	7e5b      	ldrb	r3, [r3, #25]
   b87ae:	069b      	lsls	r3, r3, #26
   b87b0:	bf42      	ittt	mi
   b87b2:	7923      	ldrbmi	r3, [r4, #4]
   b87b4:	f043 0320 	orrmi.w	r3, r3, #32
   b87b8:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b87ba:	686b      	ldr	r3, [r5, #4]
   b87bc:	449b      	add	fp, r3
   b87be:	f10b 0304 	add.w	r3, fp, #4
   b87c2:	4696      	mov	lr, r2
   b87c4:	f10b 0b14 	add.w	fp, fp, #20
   b87c8:	6818      	ldr	r0, [r3, #0]
   b87ca:	6859      	ldr	r1, [r3, #4]
   b87cc:	4694      	mov	ip, r2
   b87ce:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b87d2:	3308      	adds	r3, #8
   b87d4:	455b      	cmp	r3, fp
   b87d6:	4662      	mov	r2, ip
   b87d8:	d1f6      	bne.n	b87c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b87da:	6818      	ldr	r0, [r3, #0]
   b87dc:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b87e0:	4671      	mov	r1, lr
   b87e2:	a80c      	add	r0, sp, #48	; 0x30
   b87e4:	f7fd ffc8 	bl	b6778 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b87e8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b87ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b87f0:	3414      	adds	r4, #20
   b87f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87f4:	f8dc 3000 	ldr.w	r3, [ip]
   b87f8:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b87fa:	a903      	add	r1, sp, #12
   b87fc:	a80c      	add	r0, sp, #48	; 0x30
   b87fe:	f7fe fc9c 	bl	b713a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b8802:	a90c      	add	r1, sp, #48	; 0x30
   b8804:	f107 0018 	add.w	r0, r7, #24
   b8808:	f7ff fdb1 	bl	b836e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b880c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b880e:	a80d      	add	r0, sp, #52	; 0x34
   b8810:	f7fc fa2c 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8814:	b99c      	cbnz	r4, b883e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8816:	2320      	movs	r3, #32
   b8818:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b881c:	f8cd a000 	str.w	sl, [sp]
   b8820:	4623      	mov	r3, r4
   b8822:	e007      	b.n	b8834 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b8824:	3308      	adds	r3, #8
   b8826:	e77f      	b.n	b8728 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b8828:	2420      	movs	r4, #32
   b882a:	2300      	movs	r3, #0
   b882c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b8830:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8834:	aa0c      	add	r2, sp, #48	; 0x30
   b8836:	4641      	mov	r1, r8
   b8838:	2032      	movs	r0, #50	; 0x32
   b883a:	f7fc f83b 	bl	b48b4 <log_message>
   b883e:	a806      	add	r0, sp, #24
   b8840:	f7fc fa14 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8844:	a804      	add	r0, sp, #16
   b8846:	f7fc fa11 	bl	b4c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b884a:	3601      	adds	r6, #1
   b884c:	e74b      	b.n	b86e6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b884e:	7923      	ldrb	r3, [r4, #4]
   b8850:	f043 0302 	orr.w	r3, r3, #2
   b8854:	7123      	strb	r3, [r4, #4]
   b8856:	e78b      	b.n	b8770 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b8858:	b015      	add	sp, #84	; 0x54
   b885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b885e:	bf00      	nop
   b8860:	000b98f0 	.word	0x000b98f0
   b8864:	000b9787 	.word	0x000b9787
   b8868:	000b990b 	.word	0x000b990b
   b886c:	000b993a 	.word	0x000b993a

000b8870 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8870:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8874:	4604      	mov	r4, r0
   b8876:	460d      	mov	r5, r1
   b8878:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b887a:	d914      	bls.n	b88a6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b887c:	4290      	cmp	r0, r2
   b887e:	d213      	bcs.n	b88a8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8880:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b8884:	1a75      	subs	r5, r6, r1
   b8886:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b888a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b888c:	42b7      	cmp	r7, r6
   b888e:	d018      	beq.n	b88c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8890:	b11c      	cbz	r4, b889a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8892:	4631      	mov	r1, r6
   b8894:	4620      	mov	r0, r4
   b8896:	f7fe fe96 	bl	b75c6 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b889a:	4630      	mov	r0, r6
   b889c:	f7fe fb68 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b88a0:	3e24      	subs	r6, #36	; 0x24
   b88a2:	3c24      	subs	r4, #36	; 0x24
   b88a4:	e7f2      	b.n	b888c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b88a6:	d00c      	beq.n	b88c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b88a8:	42b5      	cmp	r5, r6
   b88aa:	d00a      	beq.n	b88c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b88ac:	b11c      	cbz	r4, b88b6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b88ae:	4629      	mov	r1, r5
   b88b0:	4620      	mov	r0, r4
   b88b2:	f7fe fe88 	bl	b75c6 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b88b6:	4628      	mov	r0, r5
   b88b8:	f7fe fb5a 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b88bc:	3524      	adds	r5, #36	; 0x24
   b88be:	3424      	adds	r4, #36	; 0x24
   b88c0:	e7f2      	b.n	b88a8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b88c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b88c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b88c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b88c6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b88c8:	4605      	mov	r5, r0
        if (n > 0) {
   b88ca:	dd13      	ble.n	b88f4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b88cc:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b88ce:	fb07 f006 	mul.w	r0, r7, r6
   b88d2:	f7fc f89b 	bl	b4a0c <malloc>
            if (!d) {
   b88d6:	4604      	mov	r4, r0
   b88d8:	b158      	cbz	r0, b88f2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b88da:	e9d5 1200 	ldrd	r1, r2, [r5]
   b88de:	fb07 1202 	mla	r2, r7, r2, r1
   b88e2:	f7ff ffc5 	bl	b8870 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b88e6:	6828      	ldr	r0, [r5, #0]
   b88e8:	f7fc f898 	bl	b4a1c <free>
        data_ = d;
   b88ec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b88ee:	60ae      	str	r6, [r5, #8]
        return true;
   b88f0:	2001      	movs	r0, #1
    }
   b88f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b88f4:	2400      	movs	r4, #0
   b88f6:	e7f6      	b.n	b88e6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b88f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b88f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b88fc:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b88fe:	ad01      	add	r5, sp, #4
   b8900:	4606      	mov	r6, r0
   b8902:	4628      	mov	r0, r5
   b8904:	460c      	mov	r4, r1
   b8906:	f7fd ff1c 	bl	b6742 <_ZN8particle10BleAddressC1Ev>
   b890a:	a803      	add	r0, sp, #12
   b890c:	f7fe ff36 	bl	b777c <_ZN8particle18BleAdvertisingDataC1Ev>
   b8910:	a806      	add	r0, sp, #24
   b8912:	f7fe ff33 	bl	b777c <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b8916:	6930      	ldr	r0, [r6, #16]
   b8918:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b891a:	89f2      	ldrh	r2, [r6, #14]
   b891c:	ab13      	add	r3, sp, #76	; 0x4c
   b891e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b8920:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b8924:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b8926:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b8928:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b892c:	a806      	add	r0, sp, #24
   b892e:	f7fe fe99 	bl	b7664 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b8932:	89b2      	ldrh	r2, [r6, #12]
   b8934:	6871      	ldr	r1, [r6, #4]
   b8936:	a803      	add	r0, sp, #12
   b8938:	f7fe fe94 	bl	b7664 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b893c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8940:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b8942:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8944:	d003      	beq.n	b894e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b8946:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b894a:	429a      	cmp	r2, r3
   b894c:	db5c      	blt.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b894e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b8952:	2b7f      	cmp	r3, #127	; 0x7f
   b8954:	d003      	beq.n	b895e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b8956:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b895a:	429a      	cmp	r2, r3
   b895c:	dc54      	bgt.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b895e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b8962:	4638      	mov	r0, r7
   b8964:	f7fe fd23 	bl	b73ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b8968:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b896a:	2b00      	cmp	r3, #0
   b896c:	dd52      	ble.n	b8a14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b896e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b8970:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b8974:	45b1      	cmp	r9, r6
   b8976:	d050      	beq.n	b8a1a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b8978:	4630      	mov	r0, r6
   b897a:	4629      	mov	r1, r5
   b897c:	f7fd fecd 	bl	b671a <_ZNK8particle10BleAddresseqERKS0_>
   b8980:	3608      	adds	r6, #8
   b8982:	4680      	mov	r8, r0
   b8984:	2800      	cmp	r0, #0
   b8986:	d0f5      	beq.n	b8974 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b8988:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b898a:	f7fc f847 	bl	b4a1c <free>
        if (!delegator->filterByRssi(result) ||
   b898e:	f1b8 0f00 	cmp.w	r8, #0
   b8992:	d039      	beq.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b8994:	4629      	mov	r1, r5
   b8996:	4620      	mov	r0, r4
   b8998:	f7fe fccc 	bl	b7334 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b899c:	b3a0      	cbz	r0, b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b899e:	4629      	mov	r1, r5
   b89a0:	4620      	mov	r0, r4
   b89a2:	f7ff fa00 	bl	b7da6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b89a6:	4606      	mov	r6, r0
   b89a8:	b370      	cbz	r0, b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b89aa:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b89ae:	4638      	mov	r0, r7
   b89b0:	f7fe fd48 	bl	b7444 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b89b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b89b6:	2b00      	cmp	r3, #0
   b89b8:	dd12      	ble.n	b89e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b89ba:	a806      	add	r0, sp, #24
   b89bc:	f7fe f888 	bl	b6ad0 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b89c0:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b89c2:	a803      	add	r0, sp, #12
   b89c4:	f7fe f884 	bl	b6ad0 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b89c8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b89cc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b89d0:	429a      	cmp	r2, r3
   b89d2:	d025      	beq.n	b8a20 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b89d4:	f833 1b02 	ldrh.w	r1, [r3], #2
   b89d8:	4588      	cmp	r8, r1
   b89da:	d001      	beq.n	b89e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b89dc:	4288      	cmp	r0, r1
   b89de:	d1f7      	bne.n	b89d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b89e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b89e2:	f7fc f81b 	bl	b4a1c <free>
              !delegator->filterByServiceUUID(result) ||
   b89e6:	b17e      	cbz	r6, b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b89e8:	4629      	mov	r1, r5
   b89ea:	4620      	mov	r0, r4
   b89ec:	f7fe fd60 	bl	b74b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b89f0:	b150      	cbz	r0, b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b89f2:	6a23      	ldr	r3, [r4, #32]
   b89f4:	b1b3      	cbz	r3, b8a24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b89f6:	6963      	ldr	r3, [r4, #20]
   b89f8:	9513      	str	r5, [sp, #76]	; 0x4c
   b89fa:	3301      	adds	r3, #1
   b89fc:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b89fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8a00:	4639      	mov	r1, r7
   b8a02:	f104 0018 	add.w	r0, r4, #24
   b8a06:	4798      	blx	r3
            return;
   b8a08:	4628      	mov	r0, r5
   b8a0a:	f7fe fab1 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
    }
   b8a0e:	b01d      	add	sp, #116	; 0x74
   b8a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b8a14:	f04f 0801 	mov.w	r8, #1
   b8a18:	e7b6      	b.n	b8988 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b8a1a:	f04f 0800 	mov.w	r8, #0
   b8a1e:	e7b3      	b.n	b8988 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b8a20:	2600      	movs	r6, #0
   b8a22:	e7dd      	b.n	b89e0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b8a24:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b8a28:	f1b8 0f00 	cmp.w	r8, #0
   b8a2c:	d007      	beq.n	b8a3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b8a2e:	6963      	ldr	r3, [r4, #20]
   b8a30:	3301      	adds	r3, #1
   b8a32:	6163      	str	r3, [r4, #20]
   b8a34:	4629      	mov	r1, r5
   b8a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b8a38:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b8a3c:	e7e3      	b.n	b8a06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b8a3e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b8a42:	f1bc 0f00 	cmp.w	ip, #0
   b8a46:	d025      	beq.n	b8a94 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b8a48:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8a4a:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b8a4c:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8a4e:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b8a50:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8a52:	d8d9      	bhi.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b8a54:	2224      	movs	r2, #36	; 0x24
   b8a56:	4353      	muls	r3, r2
    address_ = addr.address_;
   b8a58:	462a      	mov	r2, r5
   b8a5a:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b8a5c:	3b24      	subs	r3, #36	; 0x24
   b8a5e:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b8a62:	f84c 0003 	str.w	r0, [ip, r3]
   b8a66:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b8a68:	f106 0008 	add.w	r0, r6, #8
   b8a6c:	a903      	add	r1, sp, #12
   b8a6e:	f7fe fdc1 	bl	b75f4 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8a72:	a906      	add	r1, sp, #24
   b8a74:	f106 0014 	add.w	r0, r6, #20
   b8a78:	f7fe fdbc 	bl	b75f4 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8a7c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b8a80:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b8a84:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b8a88:	429a      	cmp	r2, r3
   b8a8a:	d3bd      	bcc.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b8a8c:	4640      	mov	r0, r8
   b8a8e:	f7fb fe5f 	bl	b4750 <hal_ble_gap_stop_scan>
   b8a92:	e7b9      	b.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b8a94:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8a98:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b8a9c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b8aa0:	a903      	add	r1, sp, #12
   b8aa2:	a80c      	add	r0, sp, #48	; 0x30
   b8aa4:	f7fc f908 	bl	b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8aa8:	a906      	add	r1, sp, #24
   b8aaa:	a80f      	add	r0, sp, #60	; 0x3c
   b8aac:	f7fc f904 	bl	b4cb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b8ab0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b8ab4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b8ab8:	4641      	mov	r1, r8
   b8aba:	4638      	mov	r0, r7
   b8abc:	6866      	ldr	r6, [r4, #4]
   b8abe:	f7fe fd82 	bl	b75c6 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ac2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b8ac6:	4299      	cmp	r1, r3
   b8ac8:	da10      	bge.n	b8aec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b8aca:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8acc:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b8ace:	2224      	movs	r2, #36	; 0x24
   b8ad0:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b8ad4:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b8ad8:	fb02 3201 	mla	r2, r2, r1, r3
   b8adc:	4631      	mov	r1, r6
   b8ade:	f7ff fec7 	bl	b8870 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b8ae2:	b986      	cbnz	r6, b8b06 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b8ae4:	6863      	ldr	r3, [r4, #4]
   b8ae6:	3301      	adds	r3, #1
   b8ae8:	6063      	str	r3, [r4, #4]
    return true;
   b8aea:	e005      	b.n	b8af8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8aec:	3101      	adds	r1, #1
   b8aee:	4620      	mov	r0, r4
   b8af0:	f7ff fee8 	bl	b88c4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8af4:	2800      	cmp	r0, #0
   b8af6:	d1e8      	bne.n	b8aca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b8af8:	4638      	mov	r0, r7
   b8afa:	f7fe fa39 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b8afe:	4640      	mov	r0, r8
   b8b00:	f7fe fa36 	bl	b6f70 <_ZN8particle13BleScanResultD1Ev>
   b8b04:	e780      	b.n	b8a08 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b8b06:	4639      	mov	r1, r7
   b8b08:	4630      	mov	r0, r6
   b8b0a:	f7fe fd5c 	bl	b75c6 <_ZN8particle13BleScanResultC1EOS0_>
   b8b0e:	e7e9      	b.n	b8ae4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b8b10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8b10:	4802      	ldr	r0, [pc, #8]	; (b8b1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8b12:	2300      	movs	r3, #0
   b8b14:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8b16:	f7fb bdd3 	b.w	b46c0 <os_mutex_recursive_create>
   b8b1a:	bf00      	nop
   b8b1c:	2003e720 	.word	0x2003e720

000b8b20 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8b20:	4770      	bx	lr

000b8b22 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8b22:	7441      	strb	r1, [r0, #17]
}
   b8b24:	4770      	bx	lr

000b8b26 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8b26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8b28:	7c00      	ldrb	r0, [r0, #16]
   b8b2a:	f7fb fda9 	bl	b4680 <hal_usart_available_data_for_write>
}
   b8b2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b32:	bd08      	pop	{r3, pc}

000b8b34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8b34:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8b36:	7c00      	ldrb	r0, [r0, #16]
   b8b38:	f7fb fd82 	bl	b4640 <hal_usart_available>
}
   b8b3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8b40:	bd08      	pop	{r3, pc}

000b8b42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8b42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8b44:	7c00      	ldrb	r0, [r0, #16]
   b8b46:	f7fb fd8b 	bl	b4660 <hal_usart_peek>
}
   b8b4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8b4e:	bd08      	pop	{r3, pc}

000b8b50 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8b50:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8b52:	7c00      	ldrb	r0, [r0, #16]
   b8b54:	f7fb fd7c 	bl	b4650 <hal_usart_read>
}
   b8b58:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8b5c:	bd08      	pop	{r3, pc}

000b8b5e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8b5e:	7c00      	ldrb	r0, [r0, #16]
   b8b60:	f7fb bd86 	b.w	b4670 <hal_usart_flush>

000b8b64 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b66:	7c45      	ldrb	r5, [r0, #17]
{
   b8b68:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b6a:	b12d      	cbz	r5, b8b78 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8b6c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8b6e:	b003      	add	sp, #12
   b8b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8b74:	f7fb bd5c 	b.w	b4630 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8b78:	7c00      	ldrb	r0, [r0, #16]
   b8b7a:	9101      	str	r1, [sp, #4]
   b8b7c:	f7fb fd80 	bl	b4680 <hal_usart_available_data_for_write>
   b8b80:	2800      	cmp	r0, #0
   b8b82:	9901      	ldr	r1, [sp, #4]
   b8b84:	dcf2      	bgt.n	b8b6c <_ZN11USARTSerial5writeEh+0x8>
}
   b8b86:	4628      	mov	r0, r5
   b8b88:	b003      	add	sp, #12
   b8b8a:	bd30      	pop	{r4, r5, pc}

000b8b8c <_ZN11USARTSerialD0Ev>:
   b8b8c:	b510      	push	{r4, lr}
   b8b8e:	2114      	movs	r1, #20
   b8b90:	4604      	mov	r4, r0
   b8b92:	f7fb fa94 	bl	b40be <_ZdlPvj>
   b8b96:	4620      	mov	r0, r4
   b8b98:	bd10      	pop	{r4, pc}
	...

000b8b9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8b9c:	b510      	push	{r4, lr}
   b8b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ba2:	4604      	mov	r4, r0
   b8ba4:	4608      	mov	r0, r1
   b8ba6:	4611      	mov	r1, r2
   b8ba8:	2200      	movs	r2, #0
   b8baa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8bae:	4b04      	ldr	r3, [pc, #16]	; (b8bc0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8bb0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8bb2:	2301      	movs	r3, #1
  _serial = serial;
   b8bb4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8bb6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8bb8:	f7fb fd72 	bl	b46a0 <hal_usart_init_ex>
}
   b8bbc:	4620      	mov	r0, r4
   b8bbe:	bd10      	pop	{r4, pc}
   b8bc0:	000b99c4 	.word	0x000b99c4

000b8bc4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8bc4:	7c00      	ldrb	r0, [r0, #16]
   b8bc6:	2300      	movs	r3, #0
   b8bc8:	f7fb bd62 	b.w	b4690 <hal_usart_begin_config>

000b8bcc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b8bcc:	2200      	movs	r2, #0
   b8bce:	f7ff bff9 	b.w	b8bc4 <_ZN11USARTSerial5beginEmm>

000b8bd2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8bd2:	7c00      	ldrb	r0, [r0, #16]
   b8bd4:	f7fb bd24 	b.w	b4620 <hal_usart_end>

000b8bd8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8bd8:	4b05      	ldr	r3, [pc, #20]	; (b8bf0 <_GLOBAL__sub_I_System+0x18>)
   b8bda:	2202      	movs	r2, #2
   b8bdc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8bde:	4b05      	ldr	r3, [pc, #20]	; (b8bf4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8be0:	4a05      	ldr	r2, [pc, #20]	; (b8bf8 <_GLOBAL__sub_I_System+0x20>)
   b8be2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8be4:	2000      	movs	r0, #0
   b8be6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8bea:	f7fb beeb 	b.w	b49c4 <set_system_mode>
   b8bee:	bf00      	nop
   b8bf0:	2003e734 	.word	0x2003e734
   b8bf4:	2003e728 	.word	0x2003e728
   b8bf8:	ffff0000 	.word	0xffff0000

000b8bfc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8bfc:	2200      	movs	r2, #0
   b8bfe:	6840      	ldr	r0, [r0, #4]
   b8c00:	4611      	mov	r1, r2
   b8c02:	f7fb beb7 	b.w	b4974 <network_listening>

000b8c06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8c06:	2200      	movs	r2, #0
   b8c08:	6840      	ldr	r0, [r0, #4]
   b8c0a:	4611      	mov	r1, r2
   b8c0c:	f7fb bec2 	b.w	b4994 <network_get_listen_timeout>

000b8c10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8c10:	6840      	ldr	r0, [r0, #4]
   b8c12:	2200      	movs	r2, #0
   b8c14:	f7fb beb6 	b.w	b4984 <network_set_listen_timeout>

000b8c18 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8c18:	6840      	ldr	r0, [r0, #4]
   b8c1a:	2200      	movs	r2, #0
   b8c1c:	f081 0101 	eor.w	r1, r1, #1
   b8c20:	f7fb bea0 	b.w	b4964 <network_listen>

000b8c24 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8c24:	2300      	movs	r3, #0
   b8c26:	6840      	ldr	r0, [r0, #4]
   b8c28:	461a      	mov	r2, r3
   b8c2a:	4619      	mov	r1, r3
   b8c2c:	f7fb be92 	b.w	b4954 <network_off>

000b8c30 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8c30:	2300      	movs	r3, #0
   b8c32:	6840      	ldr	r0, [r0, #4]
   b8c34:	461a      	mov	r2, r3
   b8c36:	4619      	mov	r1, r3
   b8c38:	f7fb be84 	b.w	b4944 <network_on>

000b8c3c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8c3c:	2200      	movs	r2, #0
   b8c3e:	6840      	ldr	r0, [r0, #4]
   b8c40:	4611      	mov	r1, r2
   b8c42:	f7fb be77 	b.w	b4934 <network_ready>

000b8c46 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8c46:	2200      	movs	r2, #0
   b8c48:	6840      	ldr	r0, [r0, #4]
   b8c4a:	4611      	mov	r1, r2
   b8c4c:	f7fb be62 	b.w	b4914 <network_connecting>

000b8c50 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c50:	6840      	ldr	r0, [r0, #4]
   b8c52:	2200      	movs	r2, #0
   b8c54:	2102      	movs	r1, #2
   b8c56:	f7fb be65 	b.w	b4924 <network_disconnect>

000b8c5a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c5a:	2300      	movs	r3, #0
   b8c5c:	6840      	ldr	r0, [r0, #4]
   b8c5e:	461a      	mov	r2, r3
   b8c60:	f7fb be50 	b.w	b4904 <network_connect>

000b8c64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8c64:	4b02      	ldr	r3, [pc, #8]	; (b8c70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8c66:	2203      	movs	r2, #3
   b8c68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8c6a:	4a02      	ldr	r2, [pc, #8]	; (b8c74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8c6c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8c6e:	4770      	bx	lr
   b8c70:	2003e738 	.word	0x2003e738
   b8c74:	000b99f4 	.word	0x000b99f4

000b8c78 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8c78:	b510      	push	{r4, lr}
   b8c7a:	4604      	mov	r4, r0
{
	free(buffer);
   b8c7c:	6800      	ldr	r0, [r0, #0]
   b8c7e:	f7fb fecd 	bl	b4a1c <free>
}
   b8c82:	4620      	mov	r0, r4
   b8c84:	bd10      	pop	{r4, pc}

000b8c86 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8c86:	b510      	push	{r4, lr}
   b8c88:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8c8a:	6800      	ldr	r0, [r0, #0]
   b8c8c:	b108      	cbz	r0, b8c92 <_ZN6String10invalidateEv+0xc>
   b8c8e:	f7fb fec5 	bl	b4a1c <free>
	buffer = NULL;
   b8c92:	2300      	movs	r3, #0
	capacity = len = 0;
   b8c94:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8c98:	6023      	str	r3, [r4, #0]
}
   b8c9a:	bd10      	pop	{r4, pc}

000b8c9c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8c9c:	b538      	push	{r3, r4, r5, lr}
   b8c9e:	4604      	mov	r4, r0
   b8ca0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8ca2:	6800      	ldr	r0, [r0, #0]
   b8ca4:	3101      	adds	r1, #1
   b8ca6:	f7fb fec1 	bl	b4a2c <realloc>
	if (newbuffer) {
   b8caa:	b110      	cbz	r0, b8cb2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8cac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8cb0:	2001      	movs	r0, #1
	}
	return 0;
}
   b8cb2:	bd38      	pop	{r3, r4, r5, pc}

000b8cb4 <_ZN6String7reserveEj>:
{
   b8cb4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8cb6:	6803      	ldr	r3, [r0, #0]
{
   b8cb8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8cba:	b123      	cbz	r3, b8cc6 <_ZN6String7reserveEj+0x12>
   b8cbc:	6843      	ldr	r3, [r0, #4]
   b8cbe:	428b      	cmp	r3, r1
   b8cc0:	d301      	bcc.n	b8cc6 <_ZN6String7reserveEj+0x12>
   b8cc2:	2001      	movs	r0, #1
}
   b8cc4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8cc6:	4620      	mov	r0, r4
   b8cc8:	f7ff ffe8 	bl	b8c9c <_ZN6String12changeBufferEj>
   b8ccc:	2800      	cmp	r0, #0
   b8cce:	d0f9      	beq.n	b8cc4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8cd0:	68a3      	ldr	r3, [r4, #8]
   b8cd2:	2b00      	cmp	r3, #0
   b8cd4:	d1f5      	bne.n	b8cc2 <_ZN6String7reserveEj+0xe>
   b8cd6:	6822      	ldr	r2, [r4, #0]
   b8cd8:	7013      	strb	r3, [r2, #0]
   b8cda:	e7f2      	b.n	b8cc2 <_ZN6String7reserveEj+0xe>

000b8cdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8cde:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8ce0:	4611      	mov	r1, r2
   b8ce2:	9201      	str	r2, [sp, #4]
{
   b8ce4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8ce6:	f7ff ffe5 	bl	b8cb4 <_ZN6String7reserveEj>
   b8cea:	9a01      	ldr	r2, [sp, #4]
   b8cec:	b928      	cbnz	r0, b8cfa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8cee:	4620      	mov	r0, r4
   b8cf0:	f7ff ffc9 	bl	b8c86 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8cf4:	4620      	mov	r0, r4
   b8cf6:	b003      	add	sp, #12
   b8cf8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8cfa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8cfc:	4629      	mov	r1, r5
   b8cfe:	6820      	ldr	r0, [r4, #0]
   b8d00:	f000 fa2a 	bl	b9158 <memcpy>
	buffer[len] = 0;
   b8d04:	6822      	ldr	r2, [r4, #0]
   b8d06:	68a3      	ldr	r3, [r4, #8]
   b8d08:	2100      	movs	r1, #0
   b8d0a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8d0c:	e7f2      	b.n	b8cf4 <_ZN6String4copyEPKcj+0x18>

000b8d0e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8d0e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8d10:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8d12:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8d16:	4604      	mov	r4, r0
	len = 0;
   b8d18:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8d1a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8d1c:	b141      	cbz	r1, b8d30 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8d1e:	4608      	mov	r0, r1
   b8d20:	9101      	str	r1, [sp, #4]
   b8d22:	f7fb f985 	bl	b4030 <strlen>
   b8d26:	9901      	ldr	r1, [sp, #4]
   b8d28:	4602      	mov	r2, r0
   b8d2a:	4620      	mov	r0, r4
   b8d2c:	f7ff ffd6 	bl	b8cdc <_ZN6String4copyEPKcj>
}
   b8d30:	4620      	mov	r0, r4
   b8d32:	b002      	add	sp, #8
   b8d34:	bd10      	pop	{r4, pc}

000b8d36 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8d36:	b538      	push	{r3, r4, r5, lr}
   b8d38:	4605      	mov	r5, r0
	if (buffer) {
   b8d3a:	6800      	ldr	r0, [r0, #0]
{
   b8d3c:	460c      	mov	r4, r1
	if (buffer) {
   b8d3e:	b168      	cbz	r0, b8d5c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8d40:	686a      	ldr	r2, [r5, #4]
   b8d42:	688b      	ldr	r3, [r1, #8]
   b8d44:	429a      	cmp	r2, r3
   b8d46:	d307      	bcc.n	b8d58 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8d48:	6809      	ldr	r1, [r1, #0]
   b8d4a:	f000 fa7a 	bl	b9242 <strcpy>
			len = rhs.len;
   b8d4e:	68a3      	ldr	r3, [r4, #8]
   b8d50:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8d52:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8d54:	60a3      	str	r3, [r4, #8]
}
   b8d56:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8d58:	f7fb fe60 	bl	b4a1c <free>
	buffer = rhs.buffer;
   b8d5c:	6823      	ldr	r3, [r4, #0]
   b8d5e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8d60:	6863      	ldr	r3, [r4, #4]
   b8d62:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8d64:	68a3      	ldr	r3, [r4, #8]
   b8d66:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8d68:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8d6a:	e9c4 3300 	strd	r3, r3, [r4]
   b8d6e:	e7f1      	b.n	b8d54 <_ZN6String4moveERS_+0x1e>

000b8d70 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8d70:	b510      	push	{r4, lr}
	buffer = NULL;
   b8d72:	2300      	movs	r3, #0
	capacity = 0;
   b8d74:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8d78:	4604      	mov	r4, r0
	len = 0;
   b8d7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8d7c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8d7e:	f7ff ffda 	bl	b8d36 <_ZN6String4moveERS_>
}
   b8d82:	4620      	mov	r0, r4
   b8d84:	bd10      	pop	{r4, pc}

000b8d86 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8d86:	4288      	cmp	r0, r1
{
   b8d88:	b510      	push	{r4, lr}
   b8d8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8d8c:	d005      	beq.n	b8d9a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8d8e:	680b      	ldr	r3, [r1, #0]
   b8d90:	b12b      	cbz	r3, b8d9e <_ZN6StringaSERKS_+0x18>
   b8d92:	688a      	ldr	r2, [r1, #8]
   b8d94:	4619      	mov	r1, r3
   b8d96:	f7ff ffa1 	bl	b8cdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8d9a:	4620      	mov	r0, r4
   b8d9c:	bd10      	pop	{r4, pc}
	else invalidate();
   b8d9e:	f7ff ff72 	bl	b8c86 <_ZN6String10invalidateEv>
   b8da2:	e7fa      	b.n	b8d9a <_ZN6StringaSERKS_+0x14>

000b8da4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8da4:	b510      	push	{r4, lr}
	buffer = NULL;
   b8da6:	2300      	movs	r3, #0
String::String(const String &value)
   b8da8:	4604      	mov	r4, r0
	capacity = 0;
   b8daa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8dae:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8db0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8db2:	f7ff ffe8 	bl	b8d86 <_ZN6StringaSERKS_>
}
   b8db6:	4620      	mov	r0, r4
   b8db8:	bd10      	pop	{r4, pc}

000b8dba <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8dba:	b513      	push	{r0, r1, r4, lr}
   b8dbc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8dbe:	b159      	cbz	r1, b8dd8 <_ZN6StringaSEPKc+0x1e>
   b8dc0:	4608      	mov	r0, r1
   b8dc2:	9101      	str	r1, [sp, #4]
   b8dc4:	f7fb f934 	bl	b4030 <strlen>
   b8dc8:	9901      	ldr	r1, [sp, #4]
   b8dca:	4602      	mov	r2, r0
   b8dcc:	4620      	mov	r0, r4
   b8dce:	f7ff ff85 	bl	b8cdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8dd2:	4620      	mov	r0, r4
   b8dd4:	b002      	add	sp, #8
   b8dd6:	bd10      	pop	{r4, pc}
	else invalidate();
   b8dd8:	f7ff ff55 	bl	b8c86 <_ZN6String10invalidateEv>
   b8ddc:	e7f9      	b.n	b8dd2 <_ZN6StringaSEPKc+0x18>

000b8dde <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8dde:	b570      	push	{r4, r5, r6, lr}
   b8de0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8de2:	460e      	mov	r6, r1
   b8de4:	b909      	cbnz	r1, b8dea <_ZN6String6concatEPKcj+0xc>
   b8de6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8de8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8dea:	b16a      	cbz	r2, b8e08 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8dec:	6884      	ldr	r4, [r0, #8]
   b8dee:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8df0:	4621      	mov	r1, r4
   b8df2:	f7ff ff5f 	bl	b8cb4 <_ZN6String7reserveEj>
   b8df6:	2800      	cmp	r0, #0
   b8df8:	d0f5      	beq.n	b8de6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8dfa:	6828      	ldr	r0, [r5, #0]
   b8dfc:	68ab      	ldr	r3, [r5, #8]
   b8dfe:	4631      	mov	r1, r6
   b8e00:	4418      	add	r0, r3
   b8e02:	f000 fa1e 	bl	b9242 <strcpy>
	len = newlen;
   b8e06:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8e08:	2001      	movs	r0, #1
   b8e0a:	e7ed      	b.n	b8de8 <_ZN6String6concatEPKcj+0xa>

000b8e0c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8e0c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8e0e:	2300      	movs	r3, #0
	buf[0] = c;
   b8e10:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8e14:	2201      	movs	r2, #1
   b8e16:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8e18:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8e1c:	f7ff ffdf 	bl	b8dde <_ZN6String6concatEPKcj>
}
   b8e20:	b003      	add	sp, #12
   b8e22:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e26 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b8e26:	6802      	ldr	r2, [r0, #0]
{
   b8e28:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b8e2a:	6809      	ldr	r1, [r1, #0]
   b8e2c:	b162      	cbz	r2, b8e48 <_ZNK6String9compareToERKS_+0x22>
   b8e2e:	b941      	cbnz	r1, b8e42 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b8e30:	6880      	ldr	r0, [r0, #8]
   b8e32:	b160      	cbz	r0, b8e4e <_ZNK6String9compareToERKS_+0x28>
   b8e34:	7810      	ldrb	r0, [r2, #0]
   b8e36:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8e38:	6898      	ldr	r0, [r3, #8]
   b8e3a:	b140      	cbz	r0, b8e4e <_ZNK6String9compareToERKS_+0x28>
   b8e3c:	7809      	ldrb	r1, [r1, #0]
   b8e3e:	4248      	negs	r0, r1
   b8e40:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8e42:	4610      	mov	r0, r2
   b8e44:	f7fb b8ea 	b.w	b401c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8e48:	2900      	cmp	r1, #0
   b8e4a:	d1f5      	bne.n	b8e38 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b8e4c:	4608      	mov	r0, r1
}
   b8e4e:	4770      	bx	lr

000b8e50 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b8e50:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b8e52:	6882      	ldr	r2, [r0, #8]
   b8e54:	688b      	ldr	r3, [r1, #8]
   b8e56:	429a      	cmp	r2, r3
   b8e58:	d105      	bne.n	b8e66 <_ZNK6String6equalsERKS_+0x16>
   b8e5a:	f7ff ffe4 	bl	b8e26 <_ZNK6String9compareToERKS_>
   b8e5e:	fab0 f080 	clz	r0, r0
   b8e62:	0940      	lsrs	r0, r0, #5
}
   b8e64:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b8e66:	2000      	movs	r0, #0
   b8e68:	e7fc      	b.n	b8e64 <_ZNK6String6equalsERKS_+0x14>

000b8e6a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8e6a:	4770      	bx	lr

000b8e6c <_Z20acquireSerial1Bufferv>:
{
   b8e6c:	b538      	push	{r3, r4, r5, lr}
   b8e6e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8e70:	2514      	movs	r5, #20
   b8e72:	462a      	mov	r2, r5
   b8e74:	2100      	movs	r1, #0
   b8e76:	f000 f997 	bl	b91a8 <memset>
   b8e7a:	8025      	strh	r5, [r4, #0]
   b8e7c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e7e:	4907      	ldr	r1, [pc, #28]	; (b8e9c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8e80:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e82:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8e84:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e86:	f000 f831 	bl	b8eec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e8a:	4904      	ldr	r1, [pc, #16]	; (b8e9c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8e8c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e8e:	4628      	mov	r0, r5
   b8e90:	f000 f82c 	bl	b8eec <_ZnajRKSt9nothrow_t>
    };
   b8e94:	60e0      	str	r0, [r4, #12]
}
   b8e96:	4620      	mov	r0, r4
   b8e98:	bd38      	pop	{r3, r4, r5, pc}
   b8e9a:	bf00      	nop
   b8e9c:	000b9a28 	.word	0x000b9a28

000b8ea0 <_Z22__fetch_global_Serial1v>:
{
   b8ea0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8ea2:	4d0e      	ldr	r5, [pc, #56]	; (b8edc <_Z22__fetch_global_Serial1v+0x3c>)
   b8ea4:	7829      	ldrb	r1, [r5, #0]
   b8ea6:	f3bf 8f5b 	dmb	ish
   b8eaa:	f011 0401 	ands.w	r4, r1, #1
{
   b8eae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8eb0:	d111      	bne.n	b8ed6 <_Z22__fetch_global_Serial1v+0x36>
   b8eb2:	4628      	mov	r0, r5
   b8eb4:	f7fb f912 	bl	b40dc <__cxa_guard_acquire>
   b8eb8:	b168      	cbz	r0, b8ed6 <_Z22__fetch_global_Serial1v+0x36>
   b8eba:	a801      	add	r0, sp, #4
   b8ebc:	f7ff ffd6 	bl	b8e6c <_Z20acquireSerial1Bufferv>
   b8ec0:	aa01      	add	r2, sp, #4
   b8ec2:	4621      	mov	r1, r4
   b8ec4:	4806      	ldr	r0, [pc, #24]	; (b8ee0 <_Z22__fetch_global_Serial1v+0x40>)
   b8ec6:	f7ff fe69 	bl	b8b9c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8eca:	4628      	mov	r0, r5
   b8ecc:	f7fb f90b 	bl	b40e6 <__cxa_guard_release>
   b8ed0:	4804      	ldr	r0, [pc, #16]	; (b8ee4 <_Z22__fetch_global_Serial1v+0x44>)
   b8ed2:	f000 f923 	bl	b911c <atexit>
    return serial1;
}
   b8ed6:	4802      	ldr	r0, [pc, #8]	; (b8ee0 <_Z22__fetch_global_Serial1v+0x40>)
   b8ed8:	b007      	add	sp, #28
   b8eda:	bd30      	pop	{r4, r5, pc}
   b8edc:	2003e744 	.word	0x2003e744
   b8ee0:	2003e748 	.word	0x2003e748
   b8ee4:	000b8e6b 	.word	0x000b8e6b

000b8ee8 <_ZnwjRKSt9nothrow_t>:
   b8ee8:	f7fb b8e5 	b.w	b40b6 <_Znwj>

000b8eec <_ZnajRKSt9nothrow_t>:
   b8eec:	f7fb b8e5 	b.w	b40ba <_Znaj>

000b8ef0 <_ZSt25__throw_bad_function_callv>:
   b8ef0:	b508      	push	{r3, lr}
   b8ef2:	f7fb fdab 	bl	b4a4c <abort>
	...

000b8ef8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8ef8:	4901      	ldr	r1, [pc, #4]	; (b8f00 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8efa:	f000 b8f9 	b.w	b90f0 <_ZNKSt9type_infoeqERKS_>
   b8efe:	bf00      	nop
   b8f00:	000b9a44 	.word	0x000b9a44

000b8f04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8f06:	2400      	movs	r4, #0
   b8f08:	2310      	movs	r3, #16
   b8f0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8f0e:	6803      	ldr	r3, [r0, #0]
   b8f10:	4615      	mov	r5, r2
   b8f12:	699e      	ldr	r6, [r3, #24]
   b8f14:	6812      	ldr	r2, [r2, #0]
   b8f16:	466b      	mov	r3, sp
   b8f18:	e9cd 4400 	strd	r4, r4, [sp]
   b8f1c:	47b0      	blx	r6
   b8f1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8f22:	f003 0306 	and.w	r3, r3, #6
   b8f26:	2b06      	cmp	r3, #6
   b8f28:	bf03      	ittte	eq
   b8f2a:	9b00      	ldreq	r3, [sp, #0]
   b8f2c:	602b      	streq	r3, [r5, #0]
   b8f2e:	2001      	moveq	r0, #1
   b8f30:	4620      	movne	r0, r4
   b8f32:	b004      	add	sp, #16
   b8f34:	bd70      	pop	{r4, r5, r6, pc}

000b8f36 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8f36:	9800      	ldr	r0, [sp, #0]
   b8f38:	4290      	cmp	r0, r2
   b8f3a:	bf14      	ite	ne
   b8f3c:	2001      	movne	r0, #1
   b8f3e:	2006      	moveq	r0, #6
   b8f40:	4770      	bx	lr
	...

000b8f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8f44:	b510      	push	{r4, lr}
   b8f46:	4b03      	ldr	r3, [pc, #12]	; (b8f54 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8f48:	6003      	str	r3, [r0, #0]
   b8f4a:	4604      	mov	r4, r0
   b8f4c:	f000 f8cd 	bl	b90ea <_ZNSt9type_infoD1Ev>
   b8f50:	4620      	mov	r0, r4
   b8f52:	bd10      	pop	{r4, pc}
   b8f54:	000b9a84 	.word	0x000b9a84

000b8f58 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8f58:	b510      	push	{r4, lr}
   b8f5a:	4604      	mov	r4, r0
   b8f5c:	f7ff fff2 	bl	b8f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8f60:	4620      	mov	r0, r4
   b8f62:	2108      	movs	r1, #8
   b8f64:	f7fb f8ab 	bl	b40be <_ZdlPvj>
   b8f68:	4620      	mov	r0, r4
   b8f6a:	bd10      	pop	{r4, pc}

000b8f6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8f70:	461f      	mov	r7, r3
   b8f72:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8f76:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8f7a:	4598      	cmp	r8, r3
   b8f7c:	4606      	mov	r6, r0
   b8f7e:	4615      	mov	r5, r2
   b8f80:	d107      	bne.n	b8f92 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8f82:	9907      	ldr	r1, [sp, #28]
   b8f84:	f000 f8b4 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b8f88:	b118      	cbz	r0, b8f92 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8f8a:	7165      	strb	r5, [r4, #5]
   b8f8c:	2000      	movs	r0, #0
   b8f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8f92:	4639      	mov	r1, r7
   b8f94:	4630      	mov	r0, r6
   b8f96:	f000 f8ab 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b8f9a:	2800      	cmp	r0, #0
   b8f9c:	d0f6      	beq.n	b8f8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8f9e:	2301      	movs	r3, #1
   b8fa0:	f8c4 8000 	str.w	r8, [r4]
   b8fa4:	7125      	strb	r5, [r4, #4]
   b8fa6:	71a3      	strb	r3, [r4, #6]
   b8fa8:	e7f0      	b.n	b8f8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8faa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8faa:	b538      	push	{r3, r4, r5, lr}
   b8fac:	4615      	mov	r5, r2
   b8fae:	461c      	mov	r4, r3
   b8fb0:	f000 f89e 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b8fb4:	b120      	cbz	r0, b8fc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8fb6:	2308      	movs	r3, #8
   b8fb8:	60e3      	str	r3, [r4, #12]
   b8fba:	2306      	movs	r3, #6
   b8fbc:	6025      	str	r5, [r4, #0]
   b8fbe:	7123      	strb	r3, [r4, #4]
   b8fc0:	bd38      	pop	{r3, r4, r5, pc}

000b8fc2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8fc4:	4605      	mov	r5, r0
   b8fc6:	460c      	mov	r4, r1
   b8fc8:	9201      	str	r2, [sp, #4]
   b8fca:	461e      	mov	r6, r3
   b8fcc:	f000 f890 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b8fd0:	b950      	cbnz	r0, b8fe8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8fd2:	2e03      	cmp	r6, #3
   b8fd4:	d808      	bhi.n	b8fe8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8fd6:	6823      	ldr	r3, [r4, #0]
   b8fd8:	9a01      	ldr	r2, [sp, #4]
   b8fda:	695b      	ldr	r3, [r3, #20]
   b8fdc:	4629      	mov	r1, r5
   b8fde:	4620      	mov	r0, r4
   b8fe0:	b002      	add	sp, #8
   b8fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8fe6:	4718      	bx	r3
   b8fe8:	b002      	add	sp, #8
   b8fea:	bd70      	pop	{r4, r5, r6, pc}

000b8fec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8fec:	b510      	push	{r4, lr}
   b8fee:	4b03      	ldr	r3, [pc, #12]	; (b8ffc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8ff0:	6003      	str	r3, [r0, #0]
   b8ff2:	4604      	mov	r4, r0
   b8ff4:	f7ff ffa6 	bl	b8f44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8ff8:	4620      	mov	r0, r4
   b8ffa:	bd10      	pop	{r4, pc}
   b8ffc:	000b9ae4 	.word	0x000b9ae4

000b9000 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9000:	b510      	push	{r4, lr}
   b9002:	4604      	mov	r4, r0
   b9004:	f7ff fff2 	bl	b8fec <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9008:	4620      	mov	r0, r4
   b900a:	210c      	movs	r1, #12
   b900c:	f7fb f857 	bl	b40be <_ZdlPvj>
   b9010:	4620      	mov	r0, r4
   b9012:	bd10      	pop	{r4, pc}

000b9014 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9016:	9f08      	ldr	r7, [sp, #32]
   b9018:	4297      	cmp	r7, r2
   b901a:	4605      	mov	r5, r0
   b901c:	460e      	mov	r6, r1
   b901e:	4614      	mov	r4, r2
   b9020:	d00a      	beq.n	b9038 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9022:	68a8      	ldr	r0, [r5, #8]
   b9024:	6802      	ldr	r2, [r0, #0]
   b9026:	9708      	str	r7, [sp, #32]
   b9028:	6a15      	ldr	r5, [r2, #32]
   b902a:	4631      	mov	r1, r6
   b902c:	4622      	mov	r2, r4
   b902e:	46ac      	mov	ip, r5
   b9030:	b003      	add	sp, #12
   b9032:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9036:	4760      	bx	ip
   b9038:	4619      	mov	r1, r3
   b903a:	9301      	str	r3, [sp, #4]
   b903c:	f000 f858 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b9040:	9b01      	ldr	r3, [sp, #4]
   b9042:	2800      	cmp	r0, #0
   b9044:	d0ed      	beq.n	b9022 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9046:	2006      	movs	r0, #6
   b9048:	b003      	add	sp, #12
   b904a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b904c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b904c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9050:	460d      	mov	r5, r1
   b9052:	4619      	mov	r1, r3
   b9054:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9058:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b905c:	4681      	mov	r9, r0
   b905e:	4617      	mov	r7, r2
   b9060:	4698      	mov	r8, r3
   b9062:	f000 f845 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b9066:	b190      	cbz	r0, b908e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9068:	2d00      	cmp	r5, #0
   b906a:	6034      	str	r4, [r6, #0]
   b906c:	7137      	strb	r7, [r6, #4]
   b906e:	db09      	blt.n	b9084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9070:	1961      	adds	r1, r4, r5
   b9072:	458a      	cmp	sl, r1
   b9074:	bf0c      	ite	eq
   b9076:	2106      	moveq	r1, #6
   b9078:	2101      	movne	r1, #1
   b907a:	71b1      	strb	r1, [r6, #6]
   b907c:	2000      	movs	r0, #0
   b907e:	b001      	add	sp, #4
   b9080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9084:	3502      	adds	r5, #2
   b9086:	d1f9      	bne.n	b907c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9088:	2301      	movs	r3, #1
   b908a:	71b3      	strb	r3, [r6, #6]
   b908c:	e7f6      	b.n	b907c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b908e:	4554      	cmp	r4, sl
   b9090:	d106      	bne.n	b90a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9092:	4659      	mov	r1, fp
   b9094:	4648      	mov	r0, r9
   b9096:	f000 f82b 	bl	b90f0 <_ZNKSt9type_infoeqERKS_>
   b909a:	b108      	cbz	r0, b90a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b909c:	7177      	strb	r7, [r6, #5]
   b909e:	e7ed      	b.n	b907c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b90a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b90a4:	6803      	ldr	r3, [r0, #0]
   b90a6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b90aa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b90ae:	69dc      	ldr	r4, [r3, #28]
   b90b0:	463a      	mov	r2, r7
   b90b2:	4643      	mov	r3, r8
   b90b4:	4629      	mov	r1, r5
   b90b6:	46a4      	mov	ip, r4
   b90b8:	b001      	add	sp, #4
   b90ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b90be:	4760      	bx	ip

000b90c0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b90c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b90c4:	4607      	mov	r7, r0
   b90c6:	460c      	mov	r4, r1
   b90c8:	4615      	mov	r5, r2
   b90ca:	461e      	mov	r6, r3
   b90cc:	f7ff ff6d 	bl	b8faa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b90d0:	b948      	cbnz	r0, b90e6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b90d2:	68b8      	ldr	r0, [r7, #8]
   b90d4:	6803      	ldr	r3, [r0, #0]
   b90d6:	699f      	ldr	r7, [r3, #24]
   b90d8:	462a      	mov	r2, r5
   b90da:	4633      	mov	r3, r6
   b90dc:	4621      	mov	r1, r4
   b90de:	46bc      	mov	ip, r7
   b90e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b90e4:	4760      	bx	ip
   b90e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b90ea <_ZNSt9type_infoD1Ev>:
   b90ea:	4770      	bx	lr

000b90ec <_ZNKSt9type_info14__is_pointer_pEv>:
   b90ec:	2000      	movs	r0, #0
   b90ee:	4770      	bx	lr

000b90f0 <_ZNKSt9type_infoeqERKS_>:
   b90f0:	4281      	cmp	r1, r0
   b90f2:	b508      	push	{r3, lr}
   b90f4:	d00e      	beq.n	b9114 <_ZNKSt9type_infoeqERKS_+0x24>
   b90f6:	6840      	ldr	r0, [r0, #4]
   b90f8:	7803      	ldrb	r3, [r0, #0]
   b90fa:	2b2a      	cmp	r3, #42	; 0x2a
   b90fc:	d00c      	beq.n	b9118 <_ZNKSt9type_infoeqERKS_+0x28>
   b90fe:	6849      	ldr	r1, [r1, #4]
   b9100:	780b      	ldrb	r3, [r1, #0]
   b9102:	2b2a      	cmp	r3, #42	; 0x2a
   b9104:	bf08      	it	eq
   b9106:	3101      	addeq	r1, #1
   b9108:	f7fa ff88 	bl	b401c <strcmp>
   b910c:	fab0 f080 	clz	r0, r0
   b9110:	0940      	lsrs	r0, r0, #5
   b9112:	bd08      	pop	{r3, pc}
   b9114:	2001      	movs	r0, #1
   b9116:	e7fc      	b.n	b9112 <_ZNKSt9type_infoeqERKS_+0x22>
   b9118:	2000      	movs	r0, #0
   b911a:	e7fa      	b.n	b9112 <_ZNKSt9type_infoeqERKS_+0x22>

000b911c <atexit>:
   b911c:	2300      	movs	r3, #0
   b911e:	4601      	mov	r1, r0
   b9120:	461a      	mov	r2, r3
   b9122:	4618      	mov	r0, r3
   b9124:	f000 b956 	b.w	b93d4 <__register_exitproc>

000b9128 <isprint>:
   b9128:	4b02      	ldr	r3, [pc, #8]	; (b9134 <isprint+0xc>)
   b912a:	4418      	add	r0, r3
   b912c:	7840      	ldrb	r0, [r0, #1]
   b912e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b9132:	4770      	bx	lr
   b9134:	000b9bb1 	.word	0x000b9bb1

000b9138 <memcmp>:
   b9138:	b510      	push	{r4, lr}
   b913a:	3901      	subs	r1, #1
   b913c:	4402      	add	r2, r0
   b913e:	4290      	cmp	r0, r2
   b9140:	d101      	bne.n	b9146 <memcmp+0xe>
   b9142:	2000      	movs	r0, #0
   b9144:	e005      	b.n	b9152 <memcmp+0x1a>
   b9146:	7803      	ldrb	r3, [r0, #0]
   b9148:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b914c:	42a3      	cmp	r3, r4
   b914e:	d001      	beq.n	b9154 <memcmp+0x1c>
   b9150:	1b18      	subs	r0, r3, r4
   b9152:	bd10      	pop	{r4, pc}
   b9154:	3001      	adds	r0, #1
   b9156:	e7f2      	b.n	b913e <memcmp+0x6>

000b9158 <memcpy>:
   b9158:	440a      	add	r2, r1
   b915a:	4291      	cmp	r1, r2
   b915c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9160:	d100      	bne.n	b9164 <memcpy+0xc>
   b9162:	4770      	bx	lr
   b9164:	b510      	push	{r4, lr}
   b9166:	f811 4b01 	ldrb.w	r4, [r1], #1
   b916a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b916e:	4291      	cmp	r1, r2
   b9170:	d1f9      	bne.n	b9166 <memcpy+0xe>
   b9172:	bd10      	pop	{r4, pc}

000b9174 <memmove>:
   b9174:	4288      	cmp	r0, r1
   b9176:	b510      	push	{r4, lr}
   b9178:	eb01 0402 	add.w	r4, r1, r2
   b917c:	d902      	bls.n	b9184 <memmove+0x10>
   b917e:	4284      	cmp	r4, r0
   b9180:	4623      	mov	r3, r4
   b9182:	d807      	bhi.n	b9194 <memmove+0x20>
   b9184:	1e43      	subs	r3, r0, #1
   b9186:	42a1      	cmp	r1, r4
   b9188:	d008      	beq.n	b919c <memmove+0x28>
   b918a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b918e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9192:	e7f8      	b.n	b9186 <memmove+0x12>
   b9194:	4402      	add	r2, r0
   b9196:	4601      	mov	r1, r0
   b9198:	428a      	cmp	r2, r1
   b919a:	d100      	bne.n	b919e <memmove+0x2a>
   b919c:	bd10      	pop	{r4, pc}
   b919e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b91a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b91a6:	e7f7      	b.n	b9198 <memmove+0x24>

000b91a8 <memset>:
   b91a8:	4402      	add	r2, r0
   b91aa:	4603      	mov	r3, r0
   b91ac:	4293      	cmp	r3, r2
   b91ae:	d100      	bne.n	b91b2 <memset+0xa>
   b91b0:	4770      	bx	lr
   b91b2:	f803 1b01 	strb.w	r1, [r3], #1
   b91b6:	e7f9      	b.n	b91ac <memset+0x4>

000b91b8 <srand>:
   b91b8:	b538      	push	{r3, r4, r5, lr}
   b91ba:	4b10      	ldr	r3, [pc, #64]	; (b91fc <srand+0x44>)
   b91bc:	681d      	ldr	r5, [r3, #0]
   b91be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b91c0:	4604      	mov	r4, r0
   b91c2:	b9b3      	cbnz	r3, b91f2 <srand+0x3a>
   b91c4:	2018      	movs	r0, #24
   b91c6:	f7fb fc21 	bl	b4a0c <malloc>
   b91ca:	4602      	mov	r2, r0
   b91cc:	63a8      	str	r0, [r5, #56]	; 0x38
   b91ce:	b920      	cbnz	r0, b91da <srand+0x22>
   b91d0:	4b0b      	ldr	r3, [pc, #44]	; (b9200 <srand+0x48>)
   b91d2:	480c      	ldr	r0, [pc, #48]	; (b9204 <srand+0x4c>)
   b91d4:	2142      	movs	r1, #66	; 0x42
   b91d6:	f7fb fc49 	bl	b4a6c <__assert_func>
   b91da:	490b      	ldr	r1, [pc, #44]	; (b9208 <srand+0x50>)
   b91dc:	4b0b      	ldr	r3, [pc, #44]	; (b920c <srand+0x54>)
   b91de:	e9c0 1300 	strd	r1, r3, [r0]
   b91e2:	4b0b      	ldr	r3, [pc, #44]	; (b9210 <srand+0x58>)
   b91e4:	6083      	str	r3, [r0, #8]
   b91e6:	230b      	movs	r3, #11
   b91e8:	8183      	strh	r3, [r0, #12]
   b91ea:	2100      	movs	r1, #0
   b91ec:	2001      	movs	r0, #1
   b91ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b91f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b91f4:	2200      	movs	r2, #0
   b91f6:	611c      	str	r4, [r3, #16]
   b91f8:	615a      	str	r2, [r3, #20]
   b91fa:	bd38      	pop	{r3, r4, r5, pc}
   b91fc:	2003e2bc 	.word	0x2003e2bc
   b9200:	000b9b1d 	.word	0x000b9b1d
   b9204:	000b9b34 	.word	0x000b9b34
   b9208:	abcd330e 	.word	0xabcd330e
   b920c:	e66d1234 	.word	0xe66d1234
   b9210:	0005deec 	.word	0x0005deec

000b9214 <strchr>:
   b9214:	b2c9      	uxtb	r1, r1
   b9216:	4603      	mov	r3, r0
   b9218:	f810 2b01 	ldrb.w	r2, [r0], #1
   b921c:	b11a      	cbz	r2, b9226 <strchr+0x12>
   b921e:	428a      	cmp	r2, r1
   b9220:	d1f9      	bne.n	b9216 <strchr+0x2>
   b9222:	4618      	mov	r0, r3
   b9224:	4770      	bx	lr
   b9226:	2900      	cmp	r1, #0
   b9228:	bf18      	it	ne
   b922a:	2300      	movne	r3, #0
   b922c:	e7f9      	b.n	b9222 <strchr+0xe>

000b922e <strchrnul>:
   b922e:	b510      	push	{r4, lr}
   b9230:	4604      	mov	r4, r0
   b9232:	f7ff ffef 	bl	b9214 <strchr>
   b9236:	b918      	cbnz	r0, b9240 <strchrnul+0x12>
   b9238:	4620      	mov	r0, r4
   b923a:	f7fa fef9 	bl	b4030 <strlen>
   b923e:	4420      	add	r0, r4
   b9240:	bd10      	pop	{r4, pc}

000b9242 <strcpy>:
   b9242:	4603      	mov	r3, r0
   b9244:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9248:	f803 2b01 	strb.w	r2, [r3], #1
   b924c:	2a00      	cmp	r2, #0
   b924e:	d1f9      	bne.n	b9244 <strcpy+0x2>
   b9250:	4770      	bx	lr

000b9252 <strncmp>:
   b9252:	b510      	push	{r4, lr}
   b9254:	b17a      	cbz	r2, b9276 <strncmp+0x24>
   b9256:	4603      	mov	r3, r0
   b9258:	3901      	subs	r1, #1
   b925a:	1884      	adds	r4, r0, r2
   b925c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9260:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b9264:	4290      	cmp	r0, r2
   b9266:	d101      	bne.n	b926c <strncmp+0x1a>
   b9268:	42a3      	cmp	r3, r4
   b926a:	d101      	bne.n	b9270 <strncmp+0x1e>
   b926c:	1a80      	subs	r0, r0, r2
   b926e:	bd10      	pop	{r4, pc}
   b9270:	2800      	cmp	r0, #0
   b9272:	d1f3      	bne.n	b925c <strncmp+0xa>
   b9274:	e7fa      	b.n	b926c <strncmp+0x1a>
   b9276:	4610      	mov	r0, r2
   b9278:	e7f9      	b.n	b926e <strncmp+0x1c>

000b927a <strnlen>:
   b927a:	b510      	push	{r4, lr}
   b927c:	4602      	mov	r2, r0
   b927e:	4401      	add	r1, r0
   b9280:	428a      	cmp	r2, r1
   b9282:	4613      	mov	r3, r2
   b9284:	d003      	beq.n	b928e <strnlen+0x14>
   b9286:	781c      	ldrb	r4, [r3, #0]
   b9288:	3201      	adds	r2, #1
   b928a:	2c00      	cmp	r4, #0
   b928c:	d1f8      	bne.n	b9280 <strnlen+0x6>
   b928e:	1a18      	subs	r0, r3, r0
   b9290:	bd10      	pop	{r4, pc}

000b9292 <strrchr>:
   b9292:	b538      	push	{r3, r4, r5, lr}
   b9294:	4603      	mov	r3, r0
   b9296:	460c      	mov	r4, r1
   b9298:	b969      	cbnz	r1, b92b6 <strrchr+0x24>
   b929a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b929e:	f7ff bfb9 	b.w	b9214 <strchr>
   b92a2:	1c43      	adds	r3, r0, #1
   b92a4:	4605      	mov	r5, r0
   b92a6:	4621      	mov	r1, r4
   b92a8:	4618      	mov	r0, r3
   b92aa:	f7ff ffb3 	bl	b9214 <strchr>
   b92ae:	2800      	cmp	r0, #0
   b92b0:	d1f7      	bne.n	b92a2 <strrchr+0x10>
   b92b2:	4628      	mov	r0, r5
   b92b4:	bd38      	pop	{r3, r4, r5, pc}
   b92b6:	2500      	movs	r5, #0
   b92b8:	e7f5      	b.n	b92a6 <strrchr+0x14>
	...

000b92bc <_strtol_l.constprop.0>:
   b92bc:	2b01      	cmp	r3, #1
   b92be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b92c2:	d001      	beq.n	b92c8 <_strtol_l.constprop.0+0xc>
   b92c4:	2b24      	cmp	r3, #36	; 0x24
   b92c6:	d906      	bls.n	b92d6 <_strtol_l.constprop.0+0x1a>
   b92c8:	f7fb fbc8 	bl	b4a5c <__errno>
   b92cc:	2316      	movs	r3, #22
   b92ce:	6003      	str	r3, [r0, #0]
   b92d0:	2000      	movs	r0, #0
   b92d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b92d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b93bc <_strtol_l.constprop.0+0x100>
   b92da:	460d      	mov	r5, r1
   b92dc:	462e      	mov	r6, r5
   b92de:	f815 4b01 	ldrb.w	r4, [r5], #1
   b92e2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b92e6:	f017 0708 	ands.w	r7, r7, #8
   b92ea:	d1f7      	bne.n	b92dc <_strtol_l.constprop.0+0x20>
   b92ec:	2c2d      	cmp	r4, #45	; 0x2d
   b92ee:	d132      	bne.n	b9356 <_strtol_l.constprop.0+0x9a>
   b92f0:	782c      	ldrb	r4, [r5, #0]
   b92f2:	2701      	movs	r7, #1
   b92f4:	1cb5      	adds	r5, r6, #2
   b92f6:	2b00      	cmp	r3, #0
   b92f8:	d05b      	beq.n	b93b2 <_strtol_l.constprop.0+0xf6>
   b92fa:	2b10      	cmp	r3, #16
   b92fc:	d109      	bne.n	b9312 <_strtol_l.constprop.0+0x56>
   b92fe:	2c30      	cmp	r4, #48	; 0x30
   b9300:	d107      	bne.n	b9312 <_strtol_l.constprop.0+0x56>
   b9302:	782c      	ldrb	r4, [r5, #0]
   b9304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9308:	2c58      	cmp	r4, #88	; 0x58
   b930a:	d14d      	bne.n	b93a8 <_strtol_l.constprop.0+0xec>
   b930c:	786c      	ldrb	r4, [r5, #1]
   b930e:	2310      	movs	r3, #16
   b9310:	3502      	adds	r5, #2
   b9312:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9316:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b931a:	f04f 0c00 	mov.w	ip, #0
   b931e:	fbb8 f9f3 	udiv	r9, r8, r3
   b9322:	4666      	mov	r6, ip
   b9324:	fb03 8a19 	mls	sl, r3, r9, r8
   b9328:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b932c:	f1be 0f09 	cmp.w	lr, #9
   b9330:	d816      	bhi.n	b9360 <_strtol_l.constprop.0+0xa4>
   b9332:	4674      	mov	r4, lr
   b9334:	42a3      	cmp	r3, r4
   b9336:	dd24      	ble.n	b9382 <_strtol_l.constprop.0+0xc6>
   b9338:	f1bc 0f00 	cmp.w	ip, #0
   b933c:	db1e      	blt.n	b937c <_strtol_l.constprop.0+0xc0>
   b933e:	45b1      	cmp	r9, r6
   b9340:	d31c      	bcc.n	b937c <_strtol_l.constprop.0+0xc0>
   b9342:	d101      	bne.n	b9348 <_strtol_l.constprop.0+0x8c>
   b9344:	45a2      	cmp	sl, r4
   b9346:	db19      	blt.n	b937c <_strtol_l.constprop.0+0xc0>
   b9348:	fb06 4603 	mla	r6, r6, r3, r4
   b934c:	f04f 0c01 	mov.w	ip, #1
   b9350:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9354:	e7e8      	b.n	b9328 <_strtol_l.constprop.0+0x6c>
   b9356:	2c2b      	cmp	r4, #43	; 0x2b
   b9358:	bf04      	itt	eq
   b935a:	782c      	ldrbeq	r4, [r5, #0]
   b935c:	1cb5      	addeq	r5, r6, #2
   b935e:	e7ca      	b.n	b92f6 <_strtol_l.constprop.0+0x3a>
   b9360:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9364:	f1be 0f19 	cmp.w	lr, #25
   b9368:	d801      	bhi.n	b936e <_strtol_l.constprop.0+0xb2>
   b936a:	3c37      	subs	r4, #55	; 0x37
   b936c:	e7e2      	b.n	b9334 <_strtol_l.constprop.0+0x78>
   b936e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9372:	f1be 0f19 	cmp.w	lr, #25
   b9376:	d804      	bhi.n	b9382 <_strtol_l.constprop.0+0xc6>
   b9378:	3c57      	subs	r4, #87	; 0x57
   b937a:	e7db      	b.n	b9334 <_strtol_l.constprop.0+0x78>
   b937c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9380:	e7e6      	b.n	b9350 <_strtol_l.constprop.0+0x94>
   b9382:	f1bc 0f00 	cmp.w	ip, #0
   b9386:	da05      	bge.n	b9394 <_strtol_l.constprop.0+0xd8>
   b9388:	2322      	movs	r3, #34	; 0x22
   b938a:	6003      	str	r3, [r0, #0]
   b938c:	4646      	mov	r6, r8
   b938e:	b942      	cbnz	r2, b93a2 <_strtol_l.constprop.0+0xe6>
   b9390:	4630      	mov	r0, r6
   b9392:	e79e      	b.n	b92d2 <_strtol_l.constprop.0+0x16>
   b9394:	b107      	cbz	r7, b9398 <_strtol_l.constprop.0+0xdc>
   b9396:	4276      	negs	r6, r6
   b9398:	2a00      	cmp	r2, #0
   b939a:	d0f9      	beq.n	b9390 <_strtol_l.constprop.0+0xd4>
   b939c:	f1bc 0f00 	cmp.w	ip, #0
   b93a0:	d000      	beq.n	b93a4 <_strtol_l.constprop.0+0xe8>
   b93a2:	1e69      	subs	r1, r5, #1
   b93a4:	6011      	str	r1, [r2, #0]
   b93a6:	e7f3      	b.n	b9390 <_strtol_l.constprop.0+0xd4>
   b93a8:	2430      	movs	r4, #48	; 0x30
   b93aa:	2b00      	cmp	r3, #0
   b93ac:	d1b1      	bne.n	b9312 <_strtol_l.constprop.0+0x56>
   b93ae:	2308      	movs	r3, #8
   b93b0:	e7af      	b.n	b9312 <_strtol_l.constprop.0+0x56>
   b93b2:	2c30      	cmp	r4, #48	; 0x30
   b93b4:	d0a5      	beq.n	b9302 <_strtol_l.constprop.0+0x46>
   b93b6:	230a      	movs	r3, #10
   b93b8:	e7ab      	b.n	b9312 <_strtol_l.constprop.0+0x56>
   b93ba:	bf00      	nop
   b93bc:	000b9bb2 	.word	0x000b9bb2

000b93c0 <strtol>:
   b93c0:	4613      	mov	r3, r2
   b93c2:	460a      	mov	r2, r1
   b93c4:	4601      	mov	r1, r0
   b93c6:	4802      	ldr	r0, [pc, #8]	; (b93d0 <strtol+0x10>)
   b93c8:	6800      	ldr	r0, [r0, #0]
   b93ca:	f7ff bf77 	b.w	b92bc <_strtol_l.constprop.0>
   b93ce:	bf00      	nop
   b93d0:	2003e2bc 	.word	0x2003e2bc

000b93d4 <__register_exitproc>:
   b93d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b93d8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9494 <__register_exitproc+0xc0>
   b93dc:	4606      	mov	r6, r0
   b93de:	f8d8 0000 	ldr.w	r0, [r8]
   b93e2:	461f      	mov	r7, r3
   b93e4:	460d      	mov	r5, r1
   b93e6:	4691      	mov	r9, r2
   b93e8:	f000 f856 	bl	b9498 <__retarget_lock_acquire_recursive>
   b93ec:	4b25      	ldr	r3, [pc, #148]	; (b9484 <__register_exitproc+0xb0>)
   b93ee:	681c      	ldr	r4, [r3, #0]
   b93f0:	b934      	cbnz	r4, b9400 <__register_exitproc+0x2c>
   b93f2:	4c25      	ldr	r4, [pc, #148]	; (b9488 <__register_exitproc+0xb4>)
   b93f4:	601c      	str	r4, [r3, #0]
   b93f6:	4b25      	ldr	r3, [pc, #148]	; (b948c <__register_exitproc+0xb8>)
   b93f8:	b113      	cbz	r3, b9400 <__register_exitproc+0x2c>
   b93fa:	681b      	ldr	r3, [r3, #0]
   b93fc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9400:	6863      	ldr	r3, [r4, #4]
   b9402:	2b1f      	cmp	r3, #31
   b9404:	dd07      	ble.n	b9416 <__register_exitproc+0x42>
   b9406:	f8d8 0000 	ldr.w	r0, [r8]
   b940a:	f000 f847 	bl	b949c <__retarget_lock_release_recursive>
   b940e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9416:	b34e      	cbz	r6, b946c <__register_exitproc+0x98>
   b9418:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b941c:	b988      	cbnz	r0, b9442 <__register_exitproc+0x6e>
   b941e:	4b1c      	ldr	r3, [pc, #112]	; (b9490 <__register_exitproc+0xbc>)
   b9420:	b923      	cbnz	r3, b942c <__register_exitproc+0x58>
   b9422:	f8d8 0000 	ldr.w	r0, [r8]
   b9426:	f000 f838 	bl	b949a <__retarget_lock_release>
   b942a:	e7f0      	b.n	b940e <__register_exitproc+0x3a>
   b942c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9430:	f7fb faec 	bl	b4a0c <malloc>
   b9434:	2800      	cmp	r0, #0
   b9436:	d0f4      	beq.n	b9422 <__register_exitproc+0x4e>
   b9438:	2300      	movs	r3, #0
   b943a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b943e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9442:	6863      	ldr	r3, [r4, #4]
   b9444:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9448:	2201      	movs	r2, #1
   b944a:	409a      	lsls	r2, r3
   b944c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9450:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9454:	4313      	orrs	r3, r2
   b9456:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b945a:	2e02      	cmp	r6, #2
   b945c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9460:	bf02      	ittt	eq
   b9462:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9466:	4313      	orreq	r3, r2
   b9468:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b946c:	6863      	ldr	r3, [r4, #4]
   b946e:	f8d8 0000 	ldr.w	r0, [r8]
   b9472:	1c5a      	adds	r2, r3, #1
   b9474:	3302      	adds	r3, #2
   b9476:	6062      	str	r2, [r4, #4]
   b9478:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b947c:	f000 f80e 	bl	b949c <__retarget_lock_release_recursive>
   b9480:	2000      	movs	r0, #0
   b9482:	e7c6      	b.n	b9412 <__register_exitproc+0x3e>
   b9484:	2003e7e8 	.word	0x2003e7e8
   b9488:	2003e75c 	.word	0x2003e75c
   b948c:	00000000 	.word	0x00000000
   b9490:	000b4a0d 	.word	0x000b4a0d
   b9494:	2003e320 	.word	0x2003e320

000b9498 <__retarget_lock_acquire_recursive>:
   b9498:	4770      	bx	lr

000b949a <__retarget_lock_release>:
   b949a:	4770      	bx	lr

000b949c <__retarget_lock_release_recursive>:
   b949c:	4770      	bx	lr

000b949e <link_code_end>:
	...

000b94a0 <link_const_data_start>:
   b94a0:	00000000 	.word	0x00000000
   b94a4:	34fb0000 	.word	0x34fb0000
   b94a8:	00805f9b 	.word	0x00805f9b
   b94ac:	10008000 	.word	0x10008000
	...

000b94b8 <dynalib_user>:
   b94b8:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b94c8:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b94d8:	72697620 6c617574 756f4300 203a746e      virtual.Count: 
   b94e8:	62006425 37336366 2d366366 31623436     %d.bfc37fc6-64b1
   b94f8:	3266342d 33612d64 632d3565 39666430     -4f2d-a3e5-c0df9
   b9508:	35646230 00646463 33303565 37663464     0bd5cdd.e503d4f7
   b9518:	3964612d 31342d61 612d3133 2d323931     -ad9a-4131-a192-
   b9528:	30353137 37613362 38376366 62313100     7150b3a7fc78.11b
   b9538:	63353361 65382d63 342d6264 2d306139     a35cc-8edb-49a0-
   b9548:	38366361 3537332d 35656564 66373766     ac68-375dee5f77f
   b9558:	78740066 6e65635f 6c617274 00000000     f.tx_central....

000b9568 <_ZTVN5spark10LogHandlerE>:
	...
   b9578:	000b40c5 000b40ed                       .@...@..

000b9580 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9588:	000b4111 000b4145 000b60a9 000b624d     .A..EA...`..Mb..

000b9598 <_ZTVN5spark12NetworkClassE>:
	...
   b95a0:	000b4a8d 000b4a97 000b4aa1 000b4aab     .J...J...J...J..
   b95b0:	000b4ab5 000b4ac1 000b4acd 000b4ad5     .J...J...J...J..
   b95c0:	000b4add 000b4ae9 000b4af1 000b4afb     .J...J...J...J..
   b95d0:	000b4b05                                .K..

000b95d4 <_ZTVN5spark9WiFiClassE>:
	...
   b95dc:	000b4c4f 000b4c45 000b4c3b 000b4bf1     OL..EL..;L...K..
   b95ec:	000b4c2f 000b4c23 000b4acd 000b4ad5     /L..#L...J...J..
   b95fc:	000b4c17 000b4c0f 000b4c05 000b4bfb     .L...L...L...K..
   b960c:	000b4b05                                .K..

000b9610 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9618:	75007525 78343025 00000000              %u.u%04x....

000b9624 <_ZTV9USBSerial>:
	...
   b962c:	000b50d3 000b513b 000b5111 000b63f9     .P..;Q...Q...c..
   b963c:	000b5103 000b50d5 000b50e5 000b5135     .Q...P...P..5Q..
   b964c:	000b50f5 000b50cd                       .P...P..

000b9654 <_ZTV9IPAddress>:
	...
   b965c:	000b51ed 000b51dd 000b51df 252d5925     .Q...Q...Q..%Y-%
   b966c:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b967c:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
   b968c:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   b969c:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   b96ac:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   b96bc:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   b96cc:	69250020 74656400 736c6961 00203d20      .%i.details = .
   b96dc:	6d000a0d 006e6c00 74006e66 646f6300     ...m.ln.fn.t.cod
   b96ec:	65640065 6c696174 00000000              e.detail....

000b96f8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9700:	000b547d 000b54a3 000b5461 000b4d21     }T...T..aT..!M..

000b9710 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9718:	000b5951 000b5969 000b60a9 000b624d     QY..iY...`..Mb..

000b9728 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9730:	000b597d 000b5991 000b6285 000b5469     }Y...Y...b..iT..

000b9740 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9748:	000b547b 000b54b1 000b600d 000b546b     {T...T...`..kT..

000b9758 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9760:	000b5479 000b54bf 000b5895 000b54e1     yT...T...X...T..
   b9770:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   b9780:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   b9790:	74530065 20747261 63736964 7265766f     e.Start discover
   b97a0:	20676e69 76726573 73656369 7341002e     ing services..As
   b97b0:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   b97c0:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   b97d0:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   b97e0:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   b97f0:	72656550 76656420 20656369 6d207369     Peer device is m
   b9800:	69737369 0021676e 6c696146 74206465     issing!.Failed t
   b9810:	6c61206f 61636f6c 6d206574 726f6d65     o allocate memor
   b9820:	46002179 656c6961 6f742064 70706120     y!.Failed to app
   b9830:	20646e65 72656570 6e654320 6c617274     end peer Central
   b9840:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   b9850:	44006465 6f637369 63656e6e 00646574     ed.Disconnected.
   b9860:	6c696146 74206465 7061206f 646e6570     Failed to append
   b9870:	73696420 65766f63 20646572 76726573      discovered serv
   b9880:	2e656369 61745300 64207472 6f637369     ice..Start disco
   b9890:	69726576 6320676e 61726168 72657463     vering character
   b98a0:	69747369 6f207363 65732066 63697672     istics of servic
   b98b0:	25203a65 43002e73 6f6e6e61 64612074     e: %s..Cannot ad
   b98c0:	656e2064 65702077 64207265 63697665     d new peer devic
   b98d0:	4e002e65 70207765 70697265 61726568     e..New periphera
   b98e0:	7369206c 6e6f6320 7463656e 002e6465     l is connected..
   b98f0:	72616843 65746361 74736972 64206369     Characteristic d
   b9900:	6f637369 65726576 44002e64 6f637369     iscovered..Disco
   b9910:	65726576 68632064 63617261 69726574     vered characteri
   b9920:	63697473 68207327 6c646e61 73692065     stic's handle is
   b9930:	766e6920 64696c61 6146002e 64656c69      invalid..Failed
   b9940:	206f7420 65707061 6420646e 6f637369      to append disco
   b9950:	65726576 68632064 63617261 69726574     vered characteri
   b9960:	63697473 0000002e                       stic....

000b9968 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9970:	000b6491 000b64f5 000b666b 000b651f     .d...d..kf...e..
   b9980:	000b6495                                .d..

000b9984 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b998c:	000b648d 000b6503 000b648f 000b6525     .d...e...d..%e..
   b999c:	000b64b5                                .d..

000b99a0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b99a8:	000b648b 000b6511 000b71d5 000b652b     .d...e...q..+e..
   b99b8:	000b64d5                                .d..

000b99bc <_ZTV11USARTSerial>:
	...
   b99c4:	000b8b21 000b8b8d 000b8b65 000b63f9     !.......e....c..
   b99d4:	000b8b35 000b8b51 000b8b43 000b8b5f     5...Q...C..._...
   b99e4:	000b8b23 000b8b27                       #...'...

000b99ec <_ZTVN5spark13EthernetClassE>:
	...
   b99f4:	000b8c5b 000b8c51 000b8c47 000b8c3d     [...Q...G...=...
   b9a04:	000b8c31 000b8c25 000b4acd 000b4ad5     1...%....J...J..
   b9a14:	000b8c19 000b8c11 000b8c07 000b8bfd     ................
   b9a24:	000b4b05                                .K..

000b9a28 <_ZSt7nothrow>:
	...

000b9a29 <_ZTSSt19_Sp_make_shared_tag>:
   b9a29:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b9a39:	5f646572 00676174                        red_tag....

000b9a44 <_ZTISt19_Sp_make_shared_tag>:
   b9a44:	000b9a84 000b9a29                       ....)...

000b9a4c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9a4c:	000b9ae4 000b9a58 000b9b08              ....X.......

000b9a58 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9a58:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9a68:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b9a78:	00000045                                E...

000b9a7c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9a7c:	00000000 000b9a4c 000b8f45 000b8f59     ....L...E...Y...
   b9a8c:	000b90ed 000b90ed 000b8fc3 000b8f05     ................
   b9a9c:	000b8fab 000b8f6d 000b8f37              ....m...7...

000b9aa8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9aa8:	000b9ae4 000b9ab4 000b9a4c              ........L...

000b9ab4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9ab4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b9ac4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b9ad4:	456f666e 00000000                       nfoE....

000b9adc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9adc:	00000000 000b9aa8 000b8fed 000b9001     ................
   b9aec:	000b90ed 000b90ed 000b8fc3 000b8f05     ................
   b9afc:	000b90c1 000b904d 000b9015              ....M.......

000b9b08 <_ZTISt9type_info>:
   b9b08:	000b9a84 000b9b10                       ........

000b9b10 <_ZTSSt9type_info>:
   b9b10:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b9b20:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b9b30:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b9b40:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b9b50:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b9b60:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b9b70:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b9b80:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b9b90:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b9ba0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b9bb1 <_ctype_>:
   b9bb1:	20202000 20202020 28282020 20282828     .         ((((( 
   b9bc1:	20202020 20202020 20202020 20202020                     
   b9bd1:	10108820 10101010 10101010 10101010      ...............
   b9be1:	04040410 04040404 10040404 10101010     ................
   b9bf1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b9c01:	01010101 01010101 01010101 10101010     ................
   b9c11:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b9c21:	02020202 02020202 02020202 10101010     ................
   b9c31:	00000020 00000000 00000000 00000000      ...............
	...

000b9cb2 <link_const_data_end>:
	...

000b9cb4 <link_constructors_location>:
   b9cb4:	000b443d 	.word	0x000b443d
   b9cb8:	000b4bdd 	.word	0x000b4bdd
   b9cbc:	000b4c59 	.word	0x000b4c59
   b9cc0:	000b5441 	.word	0x000b5441
   b9cc4:	000b544d 	.word	0x000b544d
   b9cc8:	000b6099 	.word	0x000b6099
   b9ccc:	000b8b11 	.word	0x000b8b11
   b9cd0:	000b8bd9 	.word	0x000b8bd9
   b9cd4:	000b8c65 	.word	0x000b8c65
