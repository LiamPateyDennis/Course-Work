
/home/elec4740/Documents/particle/ble-nearby-central/target/5.2.0/argon/ble-nearby-central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004678  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8694  000b8694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e1b0  000b86b8  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005cc  2003e224  2003e224  0001e224  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b872c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b8730  000b8730  00018730  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8736  000b8736  00018736  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b875a  000b875a  0001875a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011ad03  00000000  00000000  0001875e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000116d5  00000000  00000000  00133461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c78  00000000  00000000  00144b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033d20  00000000  00000000  001477ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003790c  00000000  00000000  0017b4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001443db  00000000  00000000  001b2dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003d8e2  00000000  00000000  002f71b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 0000b058  00000000  00000000  00334a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000816c  00000000  00000000  0033faf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fe4f 	bl	b7cf4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fe71 	bl	b7d44 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e1b0 	.word	0x2003e1b0
   b406c:	000b86b8 	.word	0x000b86b8
   b4070:	2003e224 	.word	0x2003e224
   b4074:	2003e224 	.word	0x2003e224
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 f895 	bl	b51b0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b8670 	.word	0x000b8670
   b40a0:	000b8694 	.word	0x000b8694

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b878 	b.w	b4198 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f87d 	bl	b41a8 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 b835 	b.w	b5120 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bb7f 	b.w	b47b8 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bb7d 	b.w	b47b8 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bb83 	b.w	b47c8 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fab6 	bl	b463c <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b45fd 	.word	0x000b45fd
   b40d8:	000b8050 	.word	0x000b8050

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr

000b40ee <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b40ee:	4770      	bx	lr

000b40f0 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4b05      	ldr	r3, [pc, #20]	; (b4108 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b40f4:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b40f6:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b40f8:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b40fa:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b40fe:	f000 fac5 	bl	b468c <led_set_status_active>
}
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}
   b4106:	bf00      	nop
   b4108:	000b8088 	.word	0x000b8088

000b410c <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
}
   b4110:	f7ff ffee 	bl	b40f0 <_ZN8particle9LEDStatusD1Ev>
   b4114:	4620      	mov	r0, r4
   b4116:	2120      	movs	r1, #32
   b4118:	f7ff ffd1 	bl	b40be <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4120:	4b0a      	ldr	r3, [pc, #40]	; (b414c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4122:	b510      	push	{r4, lr}
   b4124:	4604      	mov	r4, r0
   b4126:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4128:	f001 fa0a 	bl	b5540 <_ZN5spark10LogManager8instanceEv>
   b412c:	4621      	mov	r1, r4
   b412e:	f001 fc54 	bl	b59da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4132:	f000 ff2b 	bl	b4f8c <_Z16_fetch_usbserialv>
   b4136:	f000 ff1d 	bl	b4f74 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b413a:	4620      	mov	r0, r4
   b413c:	4b04      	ldr	r3, [pc, #16]	; (b4150 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b413e:	f840 3b04 	str.w	r3, [r0], #4
   b4142:	f001 fae5 	bl	b5710 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4146:	4620      	mov	r0, r4
   b4148:	bd10      	pop	{r4, pc}
   b414a:	bf00      	nop
   b414c:	000b809c 	.word	0x000b809c
   b4150:	000b8070 	.word	0x000b8070

000b4154 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4154:	b510      	push	{r4, lr}
   b4156:	4604      	mov	r4, r0
    }
   b4158:	f7ff ffe2 	bl	b4120 <_ZN5spark16SerialLogHandlerD1Ev>
   b415c:	4620      	mov	r0, r4
   b415e:	2124      	movs	r1, #36	; 0x24
   b4160:	f7ff ffad 	bl	b40be <_ZdlPvj>
   b4164:	4620      	mov	r0, r4
   b4166:	bd10      	pop	{r4, pc}

000b4168 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4168:	b40e      	push	{r1, r2, r3}
   b416a:	b500      	push	{lr}
   b416c:	b08c      	sub	sp, #48	; 0x30
   b416e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4170:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4174:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4178:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b417e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4180:	6801      	ldr	r1, [r0, #0]
   b4182:	aa04      	add	r2, sp, #16
   b4184:	201e      	movs	r0, #30
    attr.flags = 0;
   b4186:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418a:	f000 fa67 	bl	b465c <log_message_v>
}
   b418e:	b00c      	add	sp, #48	; 0x30
   b4190:	f85d eb04 	ldr.w	lr, [sp], #4
   b4194:	b003      	add	sp, #12
   b4196:	4770      	bx	lr

000b4198 <setup>:
const size_t SCAN_RESULT_MAX = 30;

BleScanResult scanResults[SCAN_RESULT_MAX];
LEDStatus ledOverride(RGB_COLOR_WHITE, LED_PATTERN_SOLID, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

void setup() {
   b4198:	b508      	push	{r3, lr}
	(void)logHandler; // Does nothing, just to eliminate the unused variable warning

	BLE.on();
   b419a:	f002 fa2f 	bl	b65fc <_ZN8particle14BleLocalDevice11getInstanceEv>
#if SYSTEM_VERSION == SYSTEM_VERSION_v310
	// This is required with 3.1.0 only
	BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
#endif

}
   b419e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BLE.on();
   b41a2:	f002 ba47 	b.w	b6634 <_ZNK8particle14BleLocalDevice2onEv>
	...

000b41a8 <loop>:

void loop() {
   b41a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b41ac:	b08e      	sub	sp, #56	; 0x38
	// Only scan for 500 milliseconds
	BLE.setScanTimeout(50);
   b41ae:	f002 fa25 	bl	b65fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41b2:	2132      	movs	r1, #50	; 0x32
   b41b4:	f002 fa84 	bl	b66c0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
	int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   b41b8:	f002 fa20 	bl	b65fc <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41bc:	4920      	ldr	r1, [pc, #128]	; (b4240 <loop+0x98>)
   b41be:	4c20      	ldr	r4, [pc, #128]	; (b4240 <loop+0x98>)

	uint32_t curColorCode;
	int curRssi = -999;
   b41c0:	4d20      	ldr	r5, [pc, #128]	; (b4244 <loop+0x9c>)

				// Log.info("colorCode: 0x%lx rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X ",
				// 		colorCode, scanResults[ii].rssi(),
				// 		scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
				// 		scanResults[ii].address()[3], scanResults[ii].address()[4], scanResults[ii].address()[5]);
				Log.info(buffer);
   b41c2:	f8df 808c 	ldr.w	r8, [pc, #140]	; b4250 <loop+0xa8>
	int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   b41c6:	221e      	movs	r2, #30
   b41c8:	f002 fac4 	bl	b6754 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	for (int ii = 0; ii < count; ii++) {
   b41cc:	2600      	movs	r6, #0
	int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   b41ce:	4607      	mov	r7, r0
	for (int ii = 0; ii < count; ii++) {
   b41d0:	42be      	cmp	r6, r7
   b41d2:	da22      	bge.n	b421a <loop+0x72>
		len = scanResults[ii].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
   b41d4:	231f      	movs	r3, #31
   b41d6:	aa06      	add	r2, sp, #24
   b41d8:	21ff      	movs	r1, #255	; 0xff
   b41da:	f104 0008 	add.w	r0, r4, #8
   b41de:	f002 f912 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
		if (len == 7) {
   b41e2:	2807      	cmp	r0, #7
   b41e4:	d116      	bne.n	b4214 <loop+0x6c>
			if (buf[0] == 0xff && buf[1] == 0xff && buf[2] == 0x55) {
   b41e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b41ea:	f89d 2019 	ldrb.w	r2, [sp, #25]
   b41ee:	4013      	ands	r3, r2
   b41f0:	2bff      	cmp	r3, #255	; 0xff
   b41f2:	d10f      	bne.n	b4214 <loop+0x6c>
   b41f4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b41f8:	2b55      	cmp	r3, #85	; 0x55
   b41fa:	d10b      	bne.n	b4214 <loop+0x6c>
				memcpy(&buffer, &buf[3], 4);
   b41fc:	f8dd 301b 	ldr.w	r3, [sp, #27]
   b4200:	9301      	str	r3, [sp, #4]
				Log.info(buffer);
   b4202:	a901      	add	r1, sp, #4
   b4204:	4640      	mov	r0, r8
   b4206:	f7ff ffaf 	bl	b4168 <_ZNK5spark6Logger4infoEPKcz>

				if (scanResults[ii].rssi() > curRssi) {
   b420a:	f994 3020 	ldrsb.w	r3, [r4, #32]
   b420e:	429d      	cmp	r5, r3
   b4210:	bfb8      	it	lt
   b4212:	461d      	movlt	r5, r3
	for (int ii = 0; ii < count; ii++) {
   b4214:	3601      	adds	r6, #1
   b4216:	3424      	adds	r4, #36	; 0x24
   b4218:	e7da      	b.n	b41d0 <loop+0x28>
					// curColorCode = colorCode;
				}
			}
		}
	}
	if (curRssi != -999) {
   b421a:	4b0a      	ldr	r3, [pc, #40]	; (b4244 <loop+0x9c>)
   b421c:	429d      	cmp	r5, r3
   b421e:	d00a      	beq.n	b4236 <loop+0x8e>
    d_.color = color;
   b4220:	4809      	ldr	r0, [pc, #36]	; (b4248 <loop+0xa0>)
   b4222:	2300      	movs	r3, #0
   b4224:	6143      	str	r3, [r0, #20]
    led_set_status_active(&d_, active, nullptr);
   b4226:	461a      	mov	r2, r3
   b4228:	2101      	movs	r1, #1
   b422a:	3004      	adds	r0, #4
		ledOverride.setActive(true);
	}
	else {
		ledOverride.setActive(false);
	}
}
   b422c:	b00e      	add	sp, #56	; 0x38
   b422e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b4232:	f000 ba2b 	b.w	b468c <led_set_status_active>
   b4236:	2200      	movs	r2, #0
   b4238:	4804      	ldr	r0, [pc, #16]	; (b424c <loop+0xa4>)
   b423a:	4611      	mov	r1, r2
   b423c:	e7f6      	b.n	b422c <loop+0x84>
   b423e:	bf00      	nop
   b4240:	2003e268 	.word	0x2003e268
   b4244:	fffffc19 	.word	0xfffffc19
   b4248:	2003e224 	.word	0x2003e224
   b424c:	2003e228 	.word	0x2003e228
   b4250:	2003e6f0 	.word	0x2003e6f0

000b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4254:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4256:	e9d0 5300 	ldrd	r5, r3, [r0]
   b425a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b425c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b425e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4262:	42ae      	cmp	r6, r5
   b4264:	d004      	beq.n	b4270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4266:	4628      	mov	r0, r5
   b4268:	f003 fae6 	bl	b7838 <_ZN6StringD1Ev>
   b426c:	3514      	adds	r5, #20
   b426e:	e7f8      	b.n	b4262 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4270:	6820      	ldr	r0, [r4, #0]
   b4272:	f000 faa9 	bl	b47c8 <free>
    AllocatorT::free(data_);
}
   b4276:	4620      	mov	r0, r4
   b4278:	bd70      	pop	{r4, r5, r6, pc}

000b427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b427a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b427e:	4604      	mov	r4, r0
   b4280:	460d      	mov	r5, r1
   b4282:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4284:	d916      	bls.n	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4286:	4290      	cmp	r0, r2
   b4288:	d215      	bcs.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b428a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b428e:	1a75      	subs	r5, r6, r1
   b4290:	f1a1 0714 	sub.w	r7, r1, #20
   b4294:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4296:	42b7      	cmp	r7, r6
   b4298:	d01c      	beq.n	b42d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b429a:	b12c      	cbz	r4, b42a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b429c:	4631      	mov	r1, r6
   b429e:	4620      	mov	r0, r4
   b42a0:	f003 fb46 	bl	b7930 <_ZN6StringC1EOS_>
   b42a4:	7c33      	ldrb	r3, [r6, #16]
   b42a6:	7423      	strb	r3, [r4, #16]
   b42a8:	4630      	mov	r0, r6
   b42aa:	f003 fac5 	bl	b7838 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42ae:	3e14      	subs	r6, #20
   b42b0:	3c14      	subs	r4, #20
   b42b2:	e7f0      	b.n	b4296 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42b4:	d00e      	beq.n	b42d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42b6:	42b5      	cmp	r5, r6
   b42b8:	d00c      	beq.n	b42d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42ba:	b12c      	cbz	r4, b42c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42bc:	4629      	mov	r1, r5
   b42be:	4620      	mov	r0, r4
   b42c0:	f003 fb36 	bl	b7930 <_ZN6StringC1EOS_>
   b42c4:	7c2b      	ldrb	r3, [r5, #16]
   b42c6:	7423      	strb	r3, [r4, #16]
   b42c8:	4628      	mov	r0, r5
   b42ca:	f003 fab5 	bl	b7838 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42ce:	3514      	adds	r5, #20
   b42d0:	3414      	adds	r4, #20
   b42d2:	e7f0      	b.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42da:	2300      	movs	r3, #0
   b42dc:	e9c0 3300 	strd	r3, r3, [r0]
   b42e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42e2:	684f      	ldr	r7, [r1, #4]
   b42e4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42e6:	4604      	mov	r4, r0
   b42e8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42ea:	dd23      	ble.n	b4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42ec:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b42f0:	fb08 f007 	mul.w	r0, r8, r7
   b42f4:	f000 fa60 	bl	b47b8 <malloc>
            if (!d) {
   b42f8:	4605      	mov	r5, r0
   b42fa:	b1d8      	cbz	r0, b4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b42fc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4300:	fb08 1202 	mla	r2, r8, r2, r1
   b4304:	f7ff ffb9 	bl	b427a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4308:	6820      	ldr	r0, [r4, #0]
   b430a:	f000 fa5d 	bl	b47c8 <free>
        data_ = d;
   b430e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4310:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4312:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4316:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b431a:	45b8      	cmp	r8, r7
   b431c:	d008      	beq.n	b4330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b431e:	4639      	mov	r1, r7
   b4320:	4628      	mov	r0, r5
   b4322:	f003 fb1f 	bl	b7964 <_ZN6StringC1ERKS_>
   b4326:	7c3b      	ldrb	r3, [r7, #16]
   b4328:	742b      	strb	r3, [r5, #16]
   b432a:	3714      	adds	r7, #20
   b432c:	3514      	adds	r5, #20
   b432e:	e7f4      	b.n	b431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4330:	6873      	ldr	r3, [r6, #4]
   b4332:	6063      	str	r3, [r4, #4]
}
   b4334:	4620      	mov	r0, r4
   b4336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b433c <_GLOBAL__sub_I_logHandler>:
   b433c:	b570      	push	{r4, r5, r6, lr}
   b433e:	b08e      	sub	sp, #56	; 0x38
        capacity_(0) {
   b4340:	2300      	movs	r3, #0
   b4342:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b4346:	9304      	str	r3, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4348:	f000 fe20 	bl	b4f8c <_Z16_fetch_usbserialv>
   b434c:	a902      	add	r1, sp, #8
   b434e:	4605      	mov	r5, r0
   b4350:	a805      	add	r0, sp, #20
        filter_(level, filters) {
   b4352:	4c29      	ldr	r4, [pc, #164]	; (b43f8 <_GLOBAL__sub_I_logHandler+0xbc>)
   b4354:	f7ff ffbf 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4358:	a905      	add	r1, sp, #20
   b435a:	a808      	add	r0, sp, #32
   b435c:	f7ff ffbb 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4360:	4b26      	ldr	r3, [pc, #152]	; (b43fc <_GLOBAL__sub_I_logHandler+0xc0>)
   b4362:	6023      	str	r3, [r4, #0]
   b4364:	a908      	add	r1, sp, #32
   b4366:	a80b      	add	r0, sp, #44	; 0x2c
   b4368:	f7ff ffb5 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b436c:	aa0b      	add	r2, sp, #44	; 0x2c
   b436e:	2101      	movs	r1, #1
   b4370:	1d20      	adds	r0, r4, #4
   b4372:	f001 fc15 	bl	b5ba0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4376:	a80b      	add	r0, sp, #44	; 0x2c
   b4378:	f7ff ff6c 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b437c:	a808      	add	r0, sp, #32
   b437e:	f7ff ff69 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4382:	4b1f      	ldr	r3, [pc, #124]	; (b4400 <_GLOBAL__sub_I_logHandler+0xc4>)
   b4384:	6023      	str	r3, [r4, #0]
   b4386:	6225      	str	r5, [r4, #32]
   b4388:	a805      	add	r0, sp, #20
   b438a:	f7ff ff63 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b438e:	4b1d      	ldr	r3, [pc, #116]	; (b4404 <_GLOBAL__sub_I_logHandler+0xc8>)
   b4390:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4392:	f000 fdfb 	bl	b4f8c <_Z16_fetch_usbserialv>
   b4396:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439a:	f000 fde7 	bl	b4f6c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b439e:	f001 f8cf 	bl	b5540 <_ZN5spark10LogManager8instanceEv>
   b43a2:	4621      	mov	r1, r4
   b43a4:	f001 fad2 	bl	b594c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b43a8:	a802      	add	r0, sp, #8
   b43aa:	f7ff ff53 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b43ae:	4c16      	ldr	r4, [pc, #88]	; (b4408 <_GLOBAL__sub_I_logHandler+0xcc>)
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b43b0:	251e      	movs	r5, #30


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   b43b2:	267f      	movs	r6, #127	; 0x7f
   b43b4:	4620      	mov	r0, r4
   b43b6:	f001 ffd4 	bl	b6362 <_ZN8particle10BleAddressC1Ev>
   b43ba:	f104 0008 	add.w	r0, r4, #8
   b43be:	f002 fcef 	bl	b6da0 <_ZN8particle18BleAdvertisingDataC1Ev>
   b43c2:	f104 0014 	add.w	r0, r4, #20
   b43c6:	f002 fceb 	bl	b6da0 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
   b43ca:	3d01      	subs	r5, #1
   b43cc:	f884 6020 	strb.w	r6, [r4, #32]
   b43d0:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b43d4:	d1ee      	bne.n	b43b4 <_GLOBAL__sub_I_logHandler+0x78>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b43d6:	462a      	mov	r2, r5
   b43d8:	2114      	movs	r1, #20
   b43da:	2001      	movs	r0, #1
   b43dc:	f000 f9d0 	bl	b4780 <led_pattern_period>
   b43e0:	2201      	movs	r2, #1
   b43e2:	211e      	movs	r1, #30
   b43e4:	e9cd 1200 	strd	r1, r2, [sp]
   b43e8:	4603      	mov	r3, r0
   b43ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   b43ee:	4807      	ldr	r0, [pc, #28]	; (b440c <_GLOBAL__sub_I_logHandler+0xd0>)
   b43f0:	f000 fa28 	bl	b4844 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
}
   b43f4:	b00e      	add	sp, #56	; 0x38
   b43f6:	bd70      	pop	{r4, r5, r6, pc}
   b43f8:	2003e244 	.word	0x2003e244
   b43fc:	000b8070 	.word	0x000b8070
   b4400:	000b822c 	.word	0x000b822c
   b4404:	000b809c 	.word	0x000b809c
   b4408:	2003e268 	.word	0x2003e268
   b440c:	2003e224 	.word	0x2003e224

000b4410 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <HAL_USB_USART_Init+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	681b      	ldr	r3, [r3, #0]
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	0003024c 	.word	0x0003024c

000b4420 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <HAL_USB_USART_Begin+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	685b      	ldr	r3, [r3, #4]
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	0003024c 	.word	0x0003024c

000b4430 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <HAL_USB_USART_End+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	689b      	ldr	r3, [r3, #8]
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	0003024c 	.word	0x0003024c

000b4440 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <HAL_USB_USART_Available_Data+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	691b      	ldr	r3, [r3, #16]
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	0003024c 	.word	0x0003024c

000b4450 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	695b      	ldr	r3, [r3, #20]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	0003024c 	.word	0x0003024c

000b4460 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <HAL_USB_USART_Receive_Data+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	699b      	ldr	r3, [r3, #24]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	0003024c 	.word	0x0003024c

000b4470 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <HAL_USB_USART_Send_Data+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	69db      	ldr	r3, [r3, #28]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	0003024c 	.word	0x0003024c

000b4480 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <HAL_USB_USART_Flush_Data+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	6a1b      	ldr	r3, [r3, #32]
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	0003024c 	.word	0x0003024c

000b4490 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <hal_usart_end+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	689b      	ldr	r3, [r3, #8]
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	0003023c 	.word	0x0003023c

000b44a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <hal_usart_write+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	68db      	ldr	r3, [r3, #12]
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	0003023c 	.word	0x0003023c

000b44b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <hal_usart_available+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	691b      	ldr	r3, [r3, #16]
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	0003023c 	.word	0x0003023c

000b44c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <hal_usart_read+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	695b      	ldr	r3, [r3, #20]
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	0003023c 	.word	0x0003023c

000b44d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <hal_usart_peek+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	699b      	ldr	r3, [r3, #24]
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	0003023c 	.word	0x0003023c

000b44e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b02      	ldr	r3, [pc, #8]	; (b44ec <hal_usart_flush+0xc>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	69db      	ldr	r3, [r3, #28]
   b44e8:	9301      	str	r3, [sp, #4]
   b44ea:	bd08      	pop	{r3, pc}
   b44ec:	0003023c 	.word	0x0003023c

000b44f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b02      	ldr	r3, [pc, #8]	; (b44fc <hal_usart_available_data_for_write+0xc>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b44f8:	9301      	str	r3, [sp, #4]
   b44fa:	bd08      	pop	{r3, pc}
   b44fc:	0003023c 	.word	0x0003023c

000b4500 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4500:	b508      	push	{r3, lr}
   b4502:	4b02      	ldr	r3, [pc, #8]	; (b450c <hal_usart_begin_config+0xc>)
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4508:	9301      	str	r3, [sp, #4]
   b450a:	bd08      	pop	{r3, pc}
   b450c:	0003023c 	.word	0x0003023c

000b4510 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4510:	b508      	push	{r3, lr}
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <hal_usart_init_ex+0xc>)
   b4514:	681b      	ldr	r3, [r3, #0]
   b4516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4518:	9301      	str	r3, [sp, #4]
   b451a:	bd08      	pop	{r3, pc}
   b451c:	0003023c 	.word	0x0003023c

000b4520 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b02      	ldr	r3, [pc, #8]	; (b452c <inet_inet_ntop+0xc>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	695b      	ldr	r3, [r3, #20]
   b4528:	9301      	str	r3, [sp, #4]
   b452a:	bd08      	pop	{r3, pc}
   b452c:	00030264 	.word	0x00030264

000b4530 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4530:	b508      	push	{r3, lr}
   b4532:	4b02      	ldr	r3, [pc, #8]	; (b453c <os_mutex_recursive_create+0xc>)
   b4534:	681b      	ldr	r3, [r3, #0]
   b4536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4538:	9301      	str	r3, [sp, #4]
   b453a:	bd08      	pop	{r3, pc}
   b453c:	00030248 	.word	0x00030248

000b4540 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b02      	ldr	r3, [pc, #8]	; (b454c <os_mutex_recursive_destroy+0xc>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4548:	9301      	str	r3, [sp, #4]
   b454a:	bd08      	pop	{r3, pc}
   b454c:	00030248 	.word	0x00030248

000b4550 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4550:	b508      	push	{r3, lr}
   b4552:	4b02      	ldr	r3, [pc, #8]	; (b455c <os_mutex_recursive_lock+0xc>)
   b4554:	681b      	ldr	r3, [r3, #0]
   b4556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	bd08      	pop	{r3, pc}
   b455c:	00030248 	.word	0x00030248

000b4560 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <os_mutex_recursive_unlock+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	00030248 	.word	0x00030248

000b4570 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <hal_ble_stack_init+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	689b      	ldr	r3, [r3, #8]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	00030278 	.word	0x00030278

000b4580 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <hal_ble_gap_set_scan_parameters+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	00030278 	.word	0x00030278

000b4590 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <hal_ble_gap_get_scan_parameters+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	00030278 	.word	0x00030278

000b45a0 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <hal_ble_gap_start_scan+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	00030278 	.word	0x00030278

000b45b0 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b03      	ldr	r3, [pc, #12]	; (b45c0 <hal_ble_gap_stop_scan+0x10>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b45ba:	9301      	str	r3, [sp, #4]
   b45bc:	bd08      	pop	{r3, pc}
   b45be:	0000      	.short	0x0000
   b45c0:	00030278 	.word	0x00030278

000b45c4 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b03      	ldr	r3, [pc, #12]	; (b45d4 <hal_ble_gap_disconnect+0x10>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b45ce:	9301      	str	r3, [sp, #4]
   b45d0:	bd08      	pop	{r3, pc}
   b45d2:	0000      	.short	0x0000
   b45d4:	00030278 	.word	0x00030278

000b45d8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b03      	ldr	r3, [pc, #12]	; (b45e8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b45e2:	9301      	str	r3, [sp, #4]
   b45e4:	bd08      	pop	{r3, pc}
   b45e6:	0000      	.short	0x0000
   b45e8:	00030278 	.word	0x00030278

000b45ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <HAL_RNG_GetRandomNumber+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	685b      	ldr	r3, [r3, #4]
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	00030218 	.word	0x00030218

000b45fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <HAL_Delay_Microseconds+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	68db      	ldr	r3, [r3, #12]
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	00030218 	.word	0x00030218

000b460c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	695b      	ldr	r3, [r3, #20]
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030218 	.word	0x00030218

000b461c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <netdb_freeaddrinfo+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	689b      	ldr	r3, [r3, #8]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	00030268 	.word	0x00030268

000b462c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <netdb_getaddrinfo+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	68db      	ldr	r3, [r3, #12]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	00030268 	.word	0x00030268

000b463c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <panic_+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030260 	.word	0x00030260

000b464c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <log_message+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030260 	.word	0x00030260

000b465c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <log_message_v+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030260 	.word	0x00030260

000b466c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <log_level_name+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030260 	.word	0x00030260

000b467c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <log_set_callbacks+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	00030260 	.word	0x00030260

000b468c <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b03      	ldr	r3, [pc, #12]	; (b469c <led_set_status_active+0x10>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b4696:	9301      	str	r3, [sp, #4]
   b4698:	bd08      	pop	{r3, pc}
   b469a:	0000      	.short	0x0000
   b469c:	00030260 	.word	0x00030260

000b46a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <spark_set_random_seed_from_cloud_handler+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	00030244 	.word	0x00030244

000b46b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <network_connect+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	685b      	ldr	r3, [r3, #4]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	00030240 	.word	0x00030240

000b46c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <network_connecting+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	689b      	ldr	r3, [r3, #8]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030240 	.word	0x00030240

000b46d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <network_disconnect+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	68db      	ldr	r3, [r3, #12]
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	00030240 	.word	0x00030240

000b46e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <network_ready+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	691b      	ldr	r3, [r3, #16]
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	00030240 	.word	0x00030240

000b46f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <network_on+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	695b      	ldr	r3, [r3, #20]
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	00030240 	.word	0x00030240

000b4700 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <network_off+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	699b      	ldr	r3, [r3, #24]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	00030240 	.word	0x00030240

000b4710 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <network_listen+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	69db      	ldr	r3, [r3, #28]
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	00030240 	.word	0x00030240

000b4720 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <network_listening+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	6a1b      	ldr	r3, [r3, #32]
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	00030240 	.word	0x00030240

000b4730 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <network_set_listen_timeout+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	00030240 	.word	0x00030240

000b4740 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <network_get_listen_timeout+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	00030240 	.word	0x00030240

000b4750 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <network_is_on+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	00030240 	.word	0x00030240

000b4760 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <network_is_off+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	00030240 	.word	0x00030240

000b4770 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <set_system_mode+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	685b      	ldr	r3, [r3, #4]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	00030220 	.word	0x00030220

000b4780 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <led_pattern_period+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	00030220 	.word	0x00030220

000b4790 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b03      	ldr	r3, [pc, #12]	; (b47a0 <system_ctrl_set_app_request_handler+0x10>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b479a:	9301      	str	r3, [sp, #4]
   b479c:	bd08      	pop	{r3, pc}
   b479e:	0000      	.short	0x0000
   b47a0:	00030220 	.word	0x00030220

000b47a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b47a4:	b508      	push	{r3, lr}
   b47a6:	4b03      	ldr	r3, [pc, #12]	; (b47b4 <system_ctrl_set_result+0x10>)
   b47a8:	681b      	ldr	r3, [r3, #0]
   b47aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b47ae:	9301      	str	r3, [sp, #4]
   b47b0:	bd08      	pop	{r3, pc}
   b47b2:	0000      	.short	0x0000
   b47b4:	00030220 	.word	0x00030220

000b47b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <malloc+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	681b      	ldr	r3, [r3, #0]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003021c 	.word	0x0003021c

000b47c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <free+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	685b      	ldr	r3, [r3, #4]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003021c 	.word	0x0003021c

000b47d8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <realloc+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	689b      	ldr	r3, [r3, #8]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003021c 	.word	0x0003021c

000b47e8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <vsnprintf+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003021c 	.word	0x0003021c

000b47f8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <abort+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003021c 	.word	0x0003021c

000b4808 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <__errno+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	0003021c 	.word	0x0003021c

000b4818 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <__assert_func+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	0003021c 	.word	0x0003021c

000b4828 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <newlib_impure_ptr_callback+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	0003021c 	.word	0x0003021c

000b4838 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b4838:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b483a:	460b      	mov	r3, r1
    s->update(ticks);
   b483c:	6892      	ldr	r2, [r2, #8]
   b483e:	4601      	mov	r1, r0
   b4840:	4618      	mov	r0, r3
   b4842:	4710      	bx	r2

000b4844 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b4844:	b570      	push	{r4, r5, r6, lr}
   b4846:	4c0e      	ldr	r4, [pc, #56]	; (b4880 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b4848:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b484a:	2500      	movs	r5, #0
   b484c:	241c      	movs	r4, #28
   b484e:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b4852:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b4856:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b485a:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b485c:	f004 0403 	and.w	r4, r4, #3
   b4860:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b4864:	b2e4      	uxtb	r4, r4
   b4866:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b4868:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b486a:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b486c:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b486e:	7c42      	ldrb	r2, [r0, #17]
   b4870:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b4872:	bf0a      	itet	eq
   b4874:	4b03      	ldreq	r3, [pc, #12]	; (b4884 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b4876:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b4878:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b487c:	bd70      	pop	{r4, r5, r6, pc}
   b487e:	bf00      	nop
   b4880:	000b8088 	.word	0x000b8088
   b4884:	000b4839 	.word	0x000b4839

000b4888 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4888:	2300      	movs	r3, #0
   b488a:	6840      	ldr	r0, [r0, #4]
   b488c:	461a      	mov	r2, r3
   b488e:	f7ff bf0f 	b.w	b46b0 <network_connect>

000b4892 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4892:	6840      	ldr	r0, [r0, #4]
   b4894:	2200      	movs	r2, #0
   b4896:	2102      	movs	r1, #2
   b4898:	f7ff bf1a 	b.w	b46d0 <network_disconnect>

000b489c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b489c:	2200      	movs	r2, #0
   b489e:	6840      	ldr	r0, [r0, #4]
   b48a0:	4611      	mov	r1, r2
   b48a2:	f7ff bf0d 	b.w	b46c0 <network_connecting>

000b48a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b48a6:	2200      	movs	r2, #0
   b48a8:	6840      	ldr	r0, [r0, #4]
   b48aa:	4611      	mov	r1, r2
   b48ac:	f7ff bf18 	b.w	b46e0 <network_ready>

000b48b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b48b0:	2300      	movs	r3, #0
   b48b2:	6840      	ldr	r0, [r0, #4]
   b48b4:	461a      	mov	r2, r3
   b48b6:	4619      	mov	r1, r3
   b48b8:	f7ff bf1a 	b.w	b46f0 <network_on>

000b48bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b48bc:	2300      	movs	r3, #0
   b48be:	6840      	ldr	r0, [r0, #4]
   b48c0:	461a      	mov	r2, r3
   b48c2:	4619      	mov	r1, r3
   b48c4:	f7ff bf1c 	b.w	b4700 <network_off>

000b48c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b48c8:	6840      	ldr	r0, [r0, #4]
   b48ca:	2100      	movs	r1, #0
   b48cc:	f7ff bf40 	b.w	b4750 <network_is_on>

000b48d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b48d0:	6840      	ldr	r0, [r0, #4]
   b48d2:	2100      	movs	r1, #0
   b48d4:	f7ff bf44 	b.w	b4760 <network_is_off>

000b48d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b48d8:	6840      	ldr	r0, [r0, #4]
   b48da:	2200      	movs	r2, #0
   b48dc:	f081 0101 	eor.w	r1, r1, #1
   b48e0:	f7ff bf16 	b.w	b4710 <network_listen>

000b48e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b48e4:	6840      	ldr	r0, [r0, #4]
   b48e6:	2200      	movs	r2, #0
   b48e8:	f7ff bf22 	b.w	b4730 <network_set_listen_timeout>

000b48ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b48ec:	2200      	movs	r2, #0
   b48ee:	6840      	ldr	r0, [r0, #4]
   b48f0:	4611      	mov	r1, r2
   b48f2:	f7ff bf25 	b.w	b4740 <network_get_listen_timeout>

000b48f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b48f6:	2200      	movs	r2, #0
   b48f8:	6840      	ldr	r0, [r0, #4]
   b48fa:	4611      	mov	r1, r2
   b48fc:	f7ff bf10 	b.w	b4720 <network_listening>

000b4900 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4904:	b095      	sub	sp, #84	; 0x54
   b4906:	4614      	mov	r4, r2
   b4908:	460d      	mov	r5, r1
   b490a:	4607      	mov	r7, r0
    IPAddress addr;
   b490c:	f000 fb9e 	bl	b504c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4910:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4912:	221c      	movs	r2, #28
   b4914:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4916:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4918:	f003 fa14 	bl	b7d44 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b491c:	2340      	movs	r3, #64	; 0x40
   b491e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4920:	4620      	mov	r0, r4
   b4922:	466b      	mov	r3, sp
   b4924:	aa0c      	add	r2, sp, #48	; 0x30
   b4926:	2100      	movs	r1, #0
   b4928:	f7ff fe80 	bl	b462c <netdb_getaddrinfo>
    if (!r) {
   b492c:	4604      	mov	r4, r0
   b492e:	2800      	cmp	r0, #0
   b4930:	d14b      	bne.n	b49ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4932:	4602      	mov	r2, r0
   b4934:	2101      	movs	r1, #1
   b4936:	6868      	ldr	r0, [r5, #4]
   b4938:	f7ff fed2 	bl	b46e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b493c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b493e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4940:	4622      	mov	r2, r4
   b4942:	6868      	ldr	r0, [r5, #4]
   b4944:	f7ff fecc 	bl	b46e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4948:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b494a:	4681      	mov	r9, r0
        bool ok = false;
   b494c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b494e:	2e00      	cmp	r6, #0
   b4950:	d03b      	beq.n	b49ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4952:	2900      	cmp	r1, #0
   b4954:	d139      	bne.n	b49ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4956:	6873      	ldr	r3, [r6, #4]
   b4958:	2b02      	cmp	r3, #2
   b495a:	d003      	beq.n	b4964 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b495c:	2b0a      	cmp	r3, #10
   b495e:	d011      	beq.n	b4984 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4960:	69f6      	ldr	r6, [r6, #28]
   b4962:	e7f4      	b.n	b494e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4964:	f1b8 0f00 	cmp.w	r8, #0
   b4968:	d0fa      	beq.n	b4960 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b496a:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
   b496c:	a806      	add	r0, sp, #24
   b496e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4970:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4972:	f000 fb99 	bl	b50a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4978:	1d3c      	adds	r4, r7, #4
   b497a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b497c:	682b      	ldr	r3, [r5, #0]
   b497e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4980:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4982:	e7ed      	b.n	b4960 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4984:	f1b9 0f00 	cmp.w	r9, #0
   b4988:	d0ea      	beq.n	b4960 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b498a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b498c:	2210      	movs	r2, #16
   b498e:	a801      	add	r0, sp, #4
   b4990:	f003 f9d8 	bl	b7d44 <memset>
                    a.v = 6;
   b4994:	2306      	movs	r3, #6
   b4996:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b499a:	ad01      	add	r5, sp, #4
   b499c:	f104 0308 	add.w	r3, r4, #8
   b49a0:	3418      	adds	r4, #24
   b49a2:	6818      	ldr	r0, [r3, #0]
   b49a4:	6859      	ldr	r1, [r3, #4]
   b49a6:	462a      	mov	r2, r5
   b49a8:	c203      	stmia	r2!, {r0, r1}
   b49aa:	3308      	adds	r3, #8
   b49ac:	42a3      	cmp	r3, r4
   b49ae:	4615      	mov	r5, r2
   b49b0:	d1f7      	bne.n	b49a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b49b2:	a901      	add	r1, sp, #4
   b49b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b49b6:	ad07      	add	r5, sp, #28
   b49b8:	f000 fb56 	bl	b5068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b49bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b49be:	1d3c      	adds	r4, r7, #4
   b49c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b49c2:	682b      	ldr	r3, [r5, #0]
   b49c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b49c6:	4649      	mov	r1, r9
   b49c8:	e7ca      	b.n	b4960 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b49ca:	9800      	ldr	r0, [sp, #0]
   b49cc:	f7ff fe26 	bl	b461c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b49d0:	4638      	mov	r0, r7
   b49d2:	b015      	add	sp, #84	; 0x54
   b49d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b49d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b49d8:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b49da:	4a03      	ldr	r2, [pc, #12]	; (b49e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b49dc:	601a      	str	r2, [r3, #0]
   b49de:	2200      	movs	r2, #0
   b49e0:	605a      	str	r2, [r3, #4]

} // spark
   b49e2:	4770      	bx	lr
   b49e4:	2003e6a0 	.word	0x2003e6a0
   b49e8:	000b80b4 	.word	0x000b80b4

000b49ec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b49ec:	2200      	movs	r2, #0
   b49ee:	6840      	ldr	r0, [r0, #4]
   b49f0:	4611      	mov	r1, r2
   b49f2:	f7ff be75 	b.w	b46e0 <network_ready>

000b49f6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49f6:	2200      	movs	r2, #0
   b49f8:	6840      	ldr	r0, [r0, #4]
   b49fa:	4611      	mov	r1, r2
   b49fc:	f7ff be90 	b.w	b4720 <network_listening>

000b4a00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4a00:	2200      	movs	r2, #0
   b4a02:	6840      	ldr	r0, [r0, #4]
   b4a04:	4611      	mov	r1, r2
   b4a06:	f7ff be9b 	b.w	b4740 <network_get_listen_timeout>

000b4a0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4a0a:	6840      	ldr	r0, [r0, #4]
   b4a0c:	2200      	movs	r2, #0
   b4a0e:	f7ff be8f 	b.w	b4730 <network_set_listen_timeout>

000b4a12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a12:	6840      	ldr	r0, [r0, #4]
   b4a14:	2200      	movs	r2, #0
   b4a16:	f081 0101 	eor.w	r1, r1, #1
   b4a1a:	f7ff be79 	b.w	b4710 <network_listen>

000b4a1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a1e:	2300      	movs	r3, #0
   b4a20:	6840      	ldr	r0, [r0, #4]
   b4a22:	461a      	mov	r2, r3
   b4a24:	4619      	mov	r1, r3
   b4a26:	f7ff be6b 	b.w	b4700 <network_off>

000b4a2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a2a:	2300      	movs	r3, #0
   b4a2c:	6840      	ldr	r0, [r0, #4]
   b4a2e:	461a      	mov	r2, r3
   b4a30:	4619      	mov	r1, r3
   b4a32:	f7ff be5d 	b.w	b46f0 <network_on>

000b4a36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a36:	2200      	movs	r2, #0
   b4a38:	6840      	ldr	r0, [r0, #4]
   b4a3a:	4611      	mov	r1, r2
   b4a3c:	f7ff be40 	b.w	b46c0 <network_connecting>

000b4a40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a40:	6840      	ldr	r0, [r0, #4]
   b4a42:	2200      	movs	r2, #0
   b4a44:	2102      	movs	r1, #2
   b4a46:	f7ff be43 	b.w	b46d0 <network_disconnect>

000b4a4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a4a:	2300      	movs	r3, #0
   b4a4c:	6840      	ldr	r0, [r0, #4]
   b4a4e:	461a      	mov	r2, r3
   b4a50:	f7ff be2e 	b.w	b46b0 <network_connect>

000b4a54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4a54:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4a56:	2204      	movs	r2, #4
   b4a58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4a5a:	4a02      	ldr	r2, [pc, #8]	; (b4a64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4a5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4a5e:	4770      	bx	lr
   b4a60:	2003e6a8 	.word	0x2003e6a8
   b4a64:	000b80f0 	.word	0x000b80f0

000b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4a68:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4a6a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4a6c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4a6e:	b17c      	cbz	r4, b4a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4a70:	6863      	ldr	r3, [r4, #4]
   b4a72:	3b01      	subs	r3, #1
   b4a74:	6063      	str	r3, [r4, #4]
   b4a76:	b95b      	cbnz	r3, b4a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4a78:	6823      	ldr	r3, [r4, #0]
   b4a7a:	4620      	mov	r0, r4
   b4a7c:	689b      	ldr	r3, [r3, #8]
   b4a7e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4a80:	68a3      	ldr	r3, [r4, #8]
   b4a82:	3b01      	subs	r3, #1
   b4a84:	60a3      	str	r3, [r4, #8]
   b4a86:	b91b      	cbnz	r3, b4a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4a88:	6823      	ldr	r3, [r4, #0]
   b4a8a:	4620      	mov	r0, r4
   b4a8c:	68db      	ldr	r3, [r3, #12]
   b4a8e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4a90:	4628      	mov	r0, r5
   b4a92:	bd38      	pop	{r3, r4, r5, pc}

000b4a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   b4a94:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   b4a96:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b4a98:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b4a9a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b4a9c:	dd03      	ble.n	b4aa6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   b4a9e:	f7ff fe9b 	bl	b47d8 <realloc>
            if (!d) {
   b4aa2:	b918      	cbnz	r0, b4aac <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b4aa4:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4aa6:	f7ff fe8f 	bl	b47c8 <free>
        T* d = nullptr;
   b4aaa:	2000      	movs	r0, #0
        data_ = d;
   b4aac:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b4aae:	60a5      	str	r5, [r4, #8]
        return true;
   b4ab0:	2001      	movs	r0, #1
   b4ab2:	e7f7      	b.n	b4aa4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4ab4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4ab6:	2300      	movs	r3, #0
   b4ab8:	e9c0 3300 	strd	r3, r3, [r0]
   b4abc:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4abe:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4ac0:	6849      	ldr	r1, [r1, #4]
   b4ac2:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4ac4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4ac6:	dd10      	ble.n	b4aea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b4ac8:	f7ff ffe4 	bl	b4a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b4acc:	b168      	cbz	r0, b4aea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4ace:	e9d5 3100 	ldrd	r3, r1, [r5]
   b4ad2:	6822      	ldr	r2, [r4, #0]
   b4ad4:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b4ad6:	4299      	cmp	r1, r3
   b4ad8:	d005      	beq.n	b4ae6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b4ada:	b10a      	cbz	r2, b4ae0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b4adc:	7818      	ldrb	r0, [r3, #0]
   b4ade:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b4ae0:	3301      	adds	r3, #1
   b4ae2:	3201      	adds	r2, #1
   b4ae4:	e7f7      	b.n	b4ad6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b4ae6:	686b      	ldr	r3, [r5, #4]
   b4ae8:	6063      	str	r3, [r4, #4]
    }
}
   b4aea:	4620      	mov	r0, r4
   b4aec:	bd38      	pop	{r3, r4, r5, pc}

000b4aee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4aee:	f100 0310 	add.w	r3, r0, #16
   b4af2:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b4af4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b4af8:	2901      	cmp	r1, #1
   b4afa:	4618      	mov	r0, r3
   b4afc:	d108      	bne.n	b4b10 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b4afe:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b4b02:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b4b06:	3a01      	subs	r2, #1
   b4b08:	f103 0310 	add.w	r3, r3, #16
   b4b0c:	d1f2      	bne.n	b4af4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b4b0e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b4b10:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b4b12:	bf04      	itt	eq
   b4b14:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b4b18:	1852      	addeq	r2, r2, r1
   b4b1a:	e7f4      	b.n	b4b06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b4b1c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b1c:	b40e      	push	{r1, r2, r3}
   b4b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b20:	b088      	sub	sp, #32
   b4b22:	af00      	add	r7, sp, #0
   b4b24:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b28:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b2a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b2e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4b30:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b32:	462b      	mov	r3, r5
   b4b34:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4b36:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b38:	f7ff fe56 	bl	b47e8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4b3c:	280f      	cmp	r0, #15
   b4b3e:	687a      	ldr	r2, [r7, #4]
   b4b40:	d91a      	bls.n	b4b78 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4b42:	f100 0308 	add.w	r3, r0, #8
   b4b46:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4b4a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4b4c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b50:	1c41      	adds	r1, r0, #1
   b4b52:	462b      	mov	r3, r5
   b4b54:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4b56:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4b58:	f7ff fe46 	bl	b47e8 <vsnprintf>
        if (n > 0) {
   b4b5c:	1e02      	subs	r2, r0, #0
   b4b5e:	dd04      	ble.n	b4b6a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4b60:	6823      	ldr	r3, [r4, #0]
   b4b62:	4669      	mov	r1, sp
   b4b64:	689b      	ldr	r3, [r3, #8]
   b4b66:	4620      	mov	r0, r4
   b4b68:	4798      	blx	r3
   b4b6a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4b6c:	3720      	adds	r7, #32
   b4b6e:	46bd      	mov	sp, r7
   b4b70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4b74:	b003      	add	sp, #12
   b4b76:	4770      	bx	lr
    } else if (n > 0) {
   b4b78:	2800      	cmp	r0, #0
   b4b7a:	d0f7      	beq.n	b4b6c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4b7c:	6823      	ldr	r3, [r4, #0]
   b4b7e:	4602      	mov	r2, r0
   b4b80:	689b      	ldr	r3, [r3, #8]
   b4b82:	f107 0110 	add.w	r1, r7, #16
   b4b86:	4620      	mov	r0, r4
   b4b88:	4798      	blx	r3
}
   b4b8a:	e7ef      	b.n	b4b6c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4b8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4b8c:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4b8e:	6843      	ldr	r3, [r0, #4]
   b4b90:	3b01      	subs	r3, #1
    {
   b4b92:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4b94:	6043      	str	r3, [r0, #4]
   b4b96:	b963      	cbnz	r3, b4bb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4b98:	6803      	ldr	r3, [r0, #0]
   b4b9a:	689b      	ldr	r3, [r3, #8]
   b4b9c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b9e:	68a3      	ldr	r3, [r4, #8]
   b4ba0:	3b01      	subs	r3, #1
   b4ba2:	60a3      	str	r3, [r4, #8]
   b4ba4:	b92b      	cbnz	r3, b4bb2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ba6:	6823      	ldr	r3, [r4, #0]
   b4ba8:	4620      	mov	r0, r4
   b4baa:	68db      	ldr	r3, [r3, #12]
    }
   b4bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4bb0:	4718      	bx	r3
    }
   b4bb2:	bd10      	pop	{r4, pc}

000b4bb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4bb4:	b538      	push	{r3, r4, r5, lr}
   b4bb6:	680b      	ldr	r3, [r1, #0]
   b4bb8:	6003      	str	r3, [r0, #0]
   b4bba:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4bbc:	6843      	ldr	r3, [r0, #4]
   b4bbe:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4bc0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4bc2:	d008      	beq.n	b4bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4bc4:	b115      	cbz	r5, b4bcc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4bc6:	686b      	ldr	r3, [r5, #4]
   b4bc8:	3301      	adds	r3, #1
   b4bca:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4bcc:	6860      	ldr	r0, [r4, #4]
   b4bce:	b108      	cbz	r0, b4bd4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4bd0:	f7ff ffdc 	bl	b4b8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4bd4:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4bd6:	bd38      	pop	{r3, r4, r5, pc}

000b4bd8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4bd8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4bda:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4bdc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4be0:	689b      	ldr	r3, [r3, #8]
   b4be2:	2201      	movs	r2, #1
   b4be4:	f10d 0107 	add.w	r1, sp, #7
   b4be8:	4798      	blx	r3
}
   b4bea:	b003      	add	sp, #12
   b4bec:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bf0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4bf0:	460b      	mov	r3, r1
   b4bf2:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4bf4:	2200      	movs	r2, #0
   b4bf6:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4bf8:	e9c0 2200 	strd	r2, r2, [r0]
   b4bfc:	4604      	mov	r4, r0
        t_ = t;
   b4bfe:	6083      	str	r3, [r0, #8]
    if (t) {
   b4c00:	b90b      	cbnz	r3, b4c06 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4c02:	4620      	mov	r0, r4
   b4c04:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4c06:	f7ff ffd5 	bl	b4bb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4c0a:	e7fa      	b.n	b4c02 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4c0c <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4c0c:	6883      	ldr	r3, [r0, #8]
   b4c0e:	b1eb      	cbz	r3, b4c4c <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4c10:	781a      	ldrb	r2, [r3, #0]
   b4c12:	2a03      	cmp	r2, #3
   b4c14:	d81a      	bhi.n	b4c4c <_ZNK5spark9JSONValue4typeEv+0x40>
   b4c16:	e8df f002 	tbb	[pc, r2]
   b4c1a:	1704      	.short	0x1704
   b4c1c:	1b02      	.short	0x1b02
   b4c1e:	2005      	movs	r0, #5
   b4c20:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4c22:	6802      	ldr	r2, [r0, #0]
   b4c24:	685b      	ldr	r3, [r3, #4]
   b4c26:	6852      	ldr	r2, [r2, #4]
   b4c28:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4c2a:	282d      	cmp	r0, #45	; 0x2d
   b4c2c:	d012      	beq.n	b4c54 <_ZNK5spark9JSONValue4typeEv+0x48>
   b4c2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4c32:	2b09      	cmp	r3, #9
   b4c34:	d90e      	bls.n	b4c54 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4c36:	2874      	cmp	r0, #116	; 0x74
   b4c38:	d00e      	beq.n	b4c58 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4c3a:	2866      	cmp	r0, #102	; 0x66
   b4c3c:	d00c      	beq.n	b4c58 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4c3e:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4c42:	4258      	negs	r0, r3
   b4c44:	4158      	adcs	r0, r3
   b4c46:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4c48:	2006      	movs	r0, #6
   b4c4a:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4c4c:	2000      	movs	r0, #0
   b4c4e:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4c50:	2004      	movs	r0, #4
   b4c52:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4c54:	2003      	movs	r0, #3
   b4c56:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4c58:	2002      	movs	r0, #2
}
   b4c5a:	4770      	bx	lr

000b4c5c <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4c5c:	b510      	push	{r4, lr}
   b4c5e:	4604      	mov	r4, r0
    switch (type()) {
   b4c60:	f7ff ffd4 	bl	b4c0c <_ZNK5spark9JSONValue4typeEv>
   b4c64:	2802      	cmp	r0, #2
   b4c66:	d00e      	beq.n	b4c86 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4c68:	1ec3      	subs	r3, r0, #3
   b4c6a:	b2db      	uxtb	r3, r3
   b4c6c:	2b01      	cmp	r3, #1
   b4c6e:	d814      	bhi.n	b4c9a <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4c70:	6822      	ldr	r2, [r4, #0]
   b4c72:	68a3      	ldr	r3, [r4, #8]
   b4c74:	6850      	ldr	r0, [r2, #4]
   b4c76:	685b      	ldr	r3, [r3, #4]
}
   b4c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4c7c:	220a      	movs	r2, #10
   b4c7e:	2100      	movs	r1, #0
   b4c80:	4418      	add	r0, r3
   b4c82:	f003 b95f 	b.w	b7f44 <strtol>
        const char* const s = d_->json + t_->start;
   b4c86:	6822      	ldr	r2, [r4, #0]
   b4c88:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4c8a:	6852      	ldr	r2, [r2, #4]
   b4c8c:	685b      	ldr	r3, [r3, #4]
   b4c8e:	5cd0      	ldrb	r0, [r2, r3]
   b4c90:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4c94:	4258      	negs	r0, r3
   b4c96:	4158      	adcs	r0, r3
}
   b4c98:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4c9a:	2000      	movs	r0, #0
   b4c9c:	e7fc      	b.n	b4c98 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000b4ca0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4ca0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4ca2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ca4:	e9c0 3300 	strd	r3, r3, [r0]
   b4ca8:	4604      	mov	r4, r0
        n_(0) {
   b4caa:	480e      	ldr	r0, [pc, #56]	; (b4ce4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4cac:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4cb0:	b1a9      	cbz	r1, b4cde <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4cb2:	780b      	ldrb	r3, [r1, #0]
   b4cb4:	2b03      	cmp	r3, #3
   b4cb6:	d006      	beq.n	b4cc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4cb8:	b98b      	cbnz	r3, b4cde <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4cba:	6813      	ldr	r3, [r2, #0]
   b4cbc:	6858      	ldr	r0, [r3, #4]
   b4cbe:	684b      	ldr	r3, [r1, #4]
   b4cc0:	5cc3      	ldrb	r3, [r0, r3]
   b4cc2:	2b6e      	cmp	r3, #110	; 0x6e
   b4cc4:	d007      	beq.n	b4cd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4cc6:	6813      	ldr	r3, [r2, #0]
   b4cc8:	684d      	ldr	r5, [r1, #4]
   b4cca:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4ccc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4cce:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4cd0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4cd2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4cd4:	60e3      	str	r3, [r4, #12]
   b4cd6:	4611      	mov	r1, r2
   b4cd8:	4620      	mov	r0, r4
   b4cda:	f7ff ff6b 	bl	b4bb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4cde:	4620      	mov	r0, r4
   b4ce0:	bd38      	pop	{r3, r4, r5, pc}
   b4ce2:	bf00      	nop
   b4ce4:	000b81f2 	.word	0x000b81f2

000b4ce8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4ce8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4cea:	2500      	movs	r5, #0
   b4cec:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4cee:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4cf2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4cf6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4cfa:	4604      	mov	r4, r0
   b4cfc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4cfe:	b14b      	cbz	r3, b4d14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4d00:	781a      	ldrb	r2, [r3, #0]
   b4d02:	2a01      	cmp	r2, #1
   b4d04:	d106      	bne.n	b4d14 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4d06:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4d0a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4d0c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4d0e:	6143      	str	r3, [r0, #20]
   b4d10:	f7ff ff50 	bl	b4bb4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4d14:	4620      	mov	r0, r4
   b4d16:	bd38      	pop	{r3, r4, r5, pc}

000b4d18 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4d18:	b510      	push	{r4, lr}
    if (!n_) {
   b4d1a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4d1c:	4604      	mov	r4, r0
    if (!n_) {
   b4d1e:	b163      	cbz	r3, b4d3a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4d20:	6880      	ldr	r0, [r0, #8]
   b4d22:	60e0      	str	r0, [r4, #12]
    --n_;
   b4d24:	3b01      	subs	r3, #1
    ++t_;
   b4d26:	3010      	adds	r0, #16
   b4d28:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4d2a:	6120      	str	r0, [r4, #16]
    --n_;
   b4d2c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4d2e:	b113      	cbz	r3, b4d36 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4d30:	f7ff fedd 	bl	b4aee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4d34:	60a0      	str	r0, [r4, #8]
    return true;
   b4d36:	2001      	movs	r0, #1
   b4d38:	e000      	b.n	b4d3c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4d3a:	4618      	mov	r0, r3
}
   b4d3c:	bd10      	pop	{r4, pc}

000b4d3e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4d3e:	b510      	push	{r4, lr}
    write('}');
   b4d40:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4d42:	4604      	mov	r4, r0
    write('}');
   b4d44:	f7ff ff48 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4d48:	2301      	movs	r3, #1
   b4d4a:	7123      	strb	r3, [r4, #4]
}
   b4d4c:	4620      	mov	r0, r4
   b4d4e:	bd10      	pop	{r4, pc}

000b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4d50:	b508      	push	{r3, lr}
    switch (state_) {
   b4d52:	7903      	ldrb	r3, [r0, #4]
   b4d54:	2b01      	cmp	r3, #1
   b4d56:	d002      	beq.n	b4d5e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4d58:	2b02      	cmp	r3, #2
   b4d5a:	d004      	beq.n	b4d66 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4d5c:	bd08      	pop	{r3, pc}
        write(',');
   b4d5e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4d60:	f7ff ff3a 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
}
   b4d64:	e7fa      	b.n	b4d5c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4d66:	213a      	movs	r1, #58	; 0x3a
   b4d68:	e7fa      	b.n	b4d60 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4d6a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4d6a:	b510      	push	{r4, lr}
   b4d6c:	4604      	mov	r4, r0
    writeSeparator();
   b4d6e:	f7ff ffef 	bl	b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4d72:	4620      	mov	r0, r4
   b4d74:	217b      	movs	r1, #123	; 0x7b
   b4d76:	f7ff ff2f 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4d7a:	2300      	movs	r3, #0
   b4d7c:	7123      	strb	r3, [r4, #4]
}
   b4d7e:	4620      	mov	r0, r4
   b4d80:	bd10      	pop	{r4, pc}
	...

000b4d84 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4d84:	b513      	push	{r0, r1, r4, lr}
   b4d86:	4604      	mov	r4, r0
   b4d88:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4d8a:	f7ff ffe1 	bl	b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4d8e:	6823      	ldr	r3, [r4, #0]
   b4d90:	9a01      	ldr	r2, [sp, #4]
   b4d92:	68db      	ldr	r3, [r3, #12]
   b4d94:	4903      	ldr	r1, [pc, #12]	; (b4da4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4d96:	4620      	mov	r0, r4
   b4d98:	4798      	blx	r3
    state_ = NEXT;
   b4d9a:	2301      	movs	r3, #1
}
   b4d9c:	4620      	mov	r0, r4
    state_ = NEXT;
   b4d9e:	7123      	strb	r3, [r4, #4]
}
   b4da0:	b002      	add	sp, #8
   b4da2:	bd10      	pop	{r4, pc}
   b4da4:	000b812c 	.word	0x000b812c

000b4da8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4da8:	b513      	push	{r0, r1, r4, lr}
   b4daa:	4604      	mov	r4, r0
   b4dac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4dae:	f7ff ffcf 	bl	b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4db2:	6823      	ldr	r3, [r4, #0]
   b4db4:	9a01      	ldr	r2, [sp, #4]
   b4db6:	68db      	ldr	r3, [r3, #12]
   b4db8:	4903      	ldr	r1, [pc, #12]	; (b4dc8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4dba:	4620      	mov	r0, r4
   b4dbc:	4798      	blx	r3
    state_ = NEXT;
   b4dbe:	2301      	movs	r3, #1
}
   b4dc0:	4620      	mov	r0, r4
    state_ = NEXT;
   b4dc2:	7123      	strb	r3, [r4, #4]
}
   b4dc4:	b002      	add	sp, #8
   b4dc6:	bd10      	pop	{r4, pc}
   b4dc8:	000b812f 	.word	0x000b812f

000b4dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4dd0:	460d      	mov	r5, r1
    write('"');
   b4dd2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4dd4:	4690      	mov	r8, r2
   b4dd6:	4604      	mov	r4, r0
    write('"');
   b4dd8:	f7ff fefe 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4ddc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4e84 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4de0:	44a8      	add	r8, r5
    const char *s = str;
   b4de2:	462f      	mov	r7, r5
    while (s != end) {
   b4de4:	4547      	cmp	r7, r8
   b4de6:	46ba      	mov	sl, r7
   b4de8:	d03d      	beq.n	b4e66 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4dea:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4dee:	2e22      	cmp	r6, #34	; 0x22
   b4df0:	d006      	beq.n	b4e00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4df2:	2e5c      	cmp	r6, #92	; 0x5c
   b4df4:	d004      	beq.n	b4e00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4df6:	4630      	mov	r0, r6
   b4df8:	f002 ff64 	bl	b7cc4 <isprint>
   b4dfc:	2800      	cmp	r0, #0
   b4dfe:	d1f1      	bne.n	b4de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4e00:	6823      	ldr	r3, [r4, #0]
   b4e02:	ebaa 0205 	sub.w	r2, sl, r5
   b4e06:	689b      	ldr	r3, [r3, #8]
   b4e08:	4629      	mov	r1, r5
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	4798      	blx	r3
            write('\\');
   b4e0e:	215c      	movs	r1, #92	; 0x5c
   b4e10:	4620      	mov	r0, r4
   b4e12:	f7ff fee1 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4e16:	2e0d      	cmp	r6, #13
   b4e18:	d80a      	bhi.n	b4e30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4e1a:	2e07      	cmp	r6, #7
   b4e1c:	d91c      	bls.n	b4e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4e1e:	f1a6 0308 	sub.w	r3, r6, #8
   b4e22:	2b05      	cmp	r3, #5
   b4e24:	d818      	bhi.n	b4e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4e26:	e8df f003 	tbb	[pc, r3]
   b4e2a:	0f0d      	.short	0x0f0d
   b4e2c:	15131711 	.word	0x15131711
   b4e30:	2e22      	cmp	r6, #34	; 0x22
   b4e32:	d001      	beq.n	b4e38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4e34:	2e5c      	cmp	r6, #92	; 0x5c
   b4e36:	d10f      	bne.n	b4e58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4e38:	4631      	mov	r1, r6
                write('b');
   b4e3a:	4620      	mov	r0, r4
   b4e3c:	f7ff fecc 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4e40:	463d      	mov	r5, r7
    while (s != end) {
   b4e42:	e7cf      	b.n	b4de4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4e44:	2162      	movs	r1, #98	; 0x62
   b4e46:	e7f8      	b.n	b4e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4e48:	2174      	movs	r1, #116	; 0x74
   b4e4a:	e7f6      	b.n	b4e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4e4c:	216e      	movs	r1, #110	; 0x6e
   b4e4e:	e7f4      	b.n	b4e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4e50:	2166      	movs	r1, #102	; 0x66
   b4e52:	e7f2      	b.n	b4e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4e54:	2172      	movs	r1, #114	; 0x72
   b4e56:	e7f0      	b.n	b4e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4e58:	6823      	ldr	r3, [r4, #0]
   b4e5a:	4632      	mov	r2, r6
   b4e5c:	68db      	ldr	r3, [r3, #12]
   b4e5e:	4649      	mov	r1, r9
   b4e60:	4620      	mov	r0, r4
   b4e62:	4798      	blx	r3
                break;
   b4e64:	e7ec      	b.n	b4e40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4e66:	42bd      	cmp	r5, r7
   b4e68:	d005      	beq.n	b4e76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4e6a:	6823      	ldr	r3, [r4, #0]
   b4e6c:	1b7a      	subs	r2, r7, r5
   b4e6e:	689b      	ldr	r3, [r3, #8]
   b4e70:	4629      	mov	r1, r5
   b4e72:	4620      	mov	r0, r4
   b4e74:	4798      	blx	r3
    }
    write('"');
   b4e76:	2122      	movs	r1, #34	; 0x22
   b4e78:	4620      	mov	r0, r4
   b4e7a:	f7ff fead 	bl	b4bd8 <_ZN5spark10JSONWriter5writeEc>
}
   b4e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e82:	bf00      	nop
   b4e84:	000b8132 	.word	0x000b8132

000b4e88 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4e88:	b513      	push	{r0, r1, r4, lr}
   b4e8a:	4604      	mov	r4, r0
   b4e8c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4e90:	f7ff ff5e 	bl	b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4e94:	4620      	mov	r0, r4
   b4e96:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4e9a:	f7ff ff97 	bl	b4dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4e9e:	2302      	movs	r3, #2
}
   b4ea0:	4620      	mov	r0, r4
    state_ = VALUE;
   b4ea2:	7123      	strb	r3, [r4, #4]
}
   b4ea4:	b002      	add	sp, #8
   b4ea6:	bd10      	pop	{r4, pc}

000b4ea8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4ea8:	b513      	push	{r0, r1, r4, lr}
   b4eaa:	4604      	mov	r4, r0
   b4eac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4eb0:	f7ff ff4e 	bl	b4d50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4eba:	f7ff ff87 	bl	b4dcc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4ebe:	2301      	movs	r3, #1
}
   b4ec0:	4620      	mov	r0, r4
    state_ = NEXT;
   b4ec2:	7123      	strb	r3, [r4, #4]
}
   b4ec4:	b002      	add	sp, #8
   b4ec6:	bd10      	pop	{r4, pc}

000b4ec8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4ec8:	7441      	strb	r1, [r0, #17]
}
   b4eca:	4770      	bx	lr

000b4ecc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4ecc:	4770      	bx	lr

000b4ece <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4ece:	4770      	bx	lr

000b4ed0 <_ZN9USBSerial4readEv>:
{
   b4ed0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ed2:	2100      	movs	r1, #0
   b4ed4:	7c00      	ldrb	r0, [r0, #16]
   b4ed6:	f7ff fac3 	bl	b4460 <HAL_USB_USART_Receive_Data>
}
   b4eda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4ede:	bd08      	pop	{r3, pc}

000b4ee0 <_ZN9USBSerial4peekEv>:
{
   b4ee0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4ee2:	2101      	movs	r1, #1
   b4ee4:	7c00      	ldrb	r0, [r0, #16]
   b4ee6:	f7ff fabb 	bl	b4460 <HAL_USB_USART_Receive_Data>
}
   b4eea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4eee:	bd08      	pop	{r3, pc}

000b4ef0 <_ZN9USBSerial17availableForWriteEv>:
{
   b4ef0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4ef2:	7c00      	ldrb	r0, [r0, #16]
   b4ef4:	f7ff faac 	bl	b4450 <HAL_USB_USART_Available_Data_For_Write>
}
   b4ef8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4efc:	bd08      	pop	{r3, pc}

000b4efe <_ZN9USBSerial9availableEv>:
{
   b4efe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f00:	7c00      	ldrb	r0, [r0, #16]
   b4f02:	f7ff fa9d 	bl	b4440 <HAL_USB_USART_Available_Data>
}
   b4f06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f0a:	bd08      	pop	{r3, pc}

000b4f0c <_ZN9USBSerial5writeEh>:
{
   b4f0c:	b513      	push	{r0, r1, r4, lr}
   b4f0e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f10:	7c00      	ldrb	r0, [r0, #16]
{
   b4f12:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f14:	f7ff fa9c 	bl	b4450 <HAL_USB_USART_Available_Data_For_Write>
   b4f18:	2800      	cmp	r0, #0
   b4f1a:	9901      	ldr	r1, [sp, #4]
   b4f1c:	dc01      	bgt.n	b4f22 <_ZN9USBSerial5writeEh+0x16>
   b4f1e:	7c60      	ldrb	r0, [r4, #17]
   b4f20:	b120      	cbz	r0, b4f2c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f22:	7c20      	ldrb	r0, [r4, #16]
   b4f24:	f7ff faa4 	bl	b4470 <HAL_USB_USART_Send_Data>
   b4f28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4f2c:	b002      	add	sp, #8
   b4f2e:	bd10      	pop	{r4, pc}

000b4f30 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4f30:	7c00      	ldrb	r0, [r0, #16]
   b4f32:	f7ff baa5 	b.w	b4480 <HAL_USB_USART_Flush_Data>

000b4f36 <_ZN9USBSerialD0Ev>:
   b4f36:	b510      	push	{r4, lr}
   b4f38:	2114      	movs	r1, #20
   b4f3a:	4604      	mov	r4, r0
   b4f3c:	f7ff f8bf 	bl	b40be <_ZdlPvj>
   b4f40:	4620      	mov	r0, r4
   b4f42:	bd10      	pop	{r4, pc}

000b4f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4f44:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f4a:	4604      	mov	r4, r0
   b4f4c:	4608      	mov	r0, r1
   b4f4e:	2100      	movs	r1, #0
   b4f50:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4f54:	4b04      	ldr	r3, [pc, #16]	; (b4f68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4f56:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4f58:	2301      	movs	r3, #1
  _serial = serial;
   b4f5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4f5c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4f5e:	4611      	mov	r1, r2
   b4f60:	f7ff fa56 	bl	b4410 <HAL_USB_USART_Init>
}
   b4f64:	4620      	mov	r0, r4
   b4f66:	bd10      	pop	{r4, pc}
   b4f68:	000b8140 	.word	0x000b8140

000b4f6c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4f6c:	7c00      	ldrb	r0, [r0, #16]
   b4f6e:	2200      	movs	r2, #0
   b4f70:	f7ff ba56 	b.w	b4420 <HAL_USB_USART_Begin>

000b4f74 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b4f74:	7c00      	ldrb	r0, [r0, #16]
   b4f76:	f7ff ba5b 	b.w	b4430 <HAL_USB_USART_End>

000b4f7a <_Z19acquireSerialBufferv>:
{
   b4f7a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4f7c:	2214      	movs	r2, #20
{
   b4f7e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4f80:	2100      	movs	r1, #0
   b4f82:	f002 fedf 	bl	b7d44 <memset>
}
   b4f86:	4620      	mov	r0, r4
   b4f88:	bd10      	pop	{r4, pc}
	...

000b4f8c <_Z16_fetch_usbserialv>:
{
   b4f8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f8e:	4c0f      	ldr	r4, [pc, #60]	; (b4fcc <_Z16_fetch_usbserialv+0x40>)
{
   b4f90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4f92:	a803      	add	r0, sp, #12
   b4f94:	f7ff fff1 	bl	b4f7a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f98:	7821      	ldrb	r1, [r4, #0]
   b4f9a:	f3bf 8f5b 	dmb	ish
   b4f9e:	f011 0101 	ands.w	r1, r1, #1
   b4fa2:	d10f      	bne.n	b4fc4 <_Z16_fetch_usbserialv+0x38>
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	9101      	str	r1, [sp, #4]
   b4fa8:	f7ff f898 	bl	b40dc <__cxa_guard_acquire>
   b4fac:	9901      	ldr	r1, [sp, #4]
   b4fae:	b148      	cbz	r0, b4fc4 <_Z16_fetch_usbserialv+0x38>
   b4fb0:	aa03      	add	r2, sp, #12
   b4fb2:	4807      	ldr	r0, [pc, #28]	; (b4fd0 <_Z16_fetch_usbserialv+0x44>)
   b4fb4:	f7ff ffc6 	bl	b4f44 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4fb8:	4620      	mov	r0, r4
   b4fba:	f7ff f894 	bl	b40e6 <__cxa_guard_release>
   b4fbe:	4805      	ldr	r0, [pc, #20]	; (b4fd4 <_Z16_fetch_usbserialv+0x48>)
   b4fc0:	f002 fe7a 	bl	b7cb8 <atexit>
	return _usbserial;
}
   b4fc4:	4802      	ldr	r0, [pc, #8]	; (b4fd0 <_Z16_fetch_usbserialv+0x44>)
   b4fc6:	b008      	add	sp, #32
   b4fc8:	bd10      	pop	{r4, pc}
   b4fca:	bf00      	nop
   b4fcc:	2003e6b0 	.word	0x2003e6b0
   b4fd0:	2003e6b4 	.word	0x2003e6b4
   b4fd4:	000b4ecd 	.word	0x000b4ecd

000b4fd8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   b4fd8:	4770      	bx	lr

000b4fda <_ZN9IPAddressD0Ev>:
   b4fda:	b510      	push	{r4, lr}
   b4fdc:	2118      	movs	r1, #24
   b4fde:	4604      	mov	r4, r0
   b4fe0:	f7ff f86d 	bl	b40be <_ZdlPvj>
   b4fe4:	4620      	mov	r0, r4
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4fea:	7d03      	ldrb	r3, [r0, #20]
   b4fec:	2b06      	cmp	r3, #6
{
   b4fee:	b08d      	sub	sp, #52	; 0x34
   b4ff0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ff2:	f100 0704 	add.w	r7, r0, #4
   b4ff6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4ffa:	d012      	beq.n	b5022 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4ffc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5000:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5004:	220a      	movs	r2, #10
   b5006:	4630      	mov	r0, r6
   b5008:	f001 f90b 	bl	b6222 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b500c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b500e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5010:	d019      	beq.n	b5046 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5012:	2c00      	cmp	r4, #0
   b5014:	d0f4      	beq.n	b5000 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5016:	212e      	movs	r1, #46	; 0x2e
   b5018:	4630      	mov	r0, r6
   b501a:	f001 f8ff 	bl	b621c <_ZN5Print5printEc>
   b501e:	4404      	add	r4, r0
   b5020:	e7ee      	b.n	b5000 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5022:	232f      	movs	r3, #47	; 0x2f
   b5024:	466a      	mov	r2, sp
   b5026:	4639      	mov	r1, r7
   b5028:	200a      	movs	r0, #10
		buf[0] = 0;
   b502a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b502e:	f7ff fa77 	bl	b4520 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5032:	4668      	mov	r0, sp
   b5034:	f7fe fffc 	bl	b4030 <strlen>
   b5038:	6833      	ldr	r3, [r6, #0]
   b503a:	4602      	mov	r2, r0
   b503c:	68db      	ldr	r3, [r3, #12]
   b503e:	4669      	mov	r1, sp
   b5040:	4630      	mov	r0, r6
   b5042:	4798      	blx	r3
   b5044:	4604      	mov	r4, r0
    }
    return n;
}
   b5046:	4620      	mov	r0, r4
   b5048:	b00d      	add	sp, #52	; 0x34
   b504a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b504c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b504c:	b510      	push	{r4, lr}
   b504e:	4b05      	ldr	r3, [pc, #20]	; (b5064 <_ZN9IPAddressC1Ev+0x18>)
   b5050:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5052:	2211      	movs	r2, #17
   b5054:	f840 3b04 	str.w	r3, [r0], #4
   b5058:	2100      	movs	r1, #0
   b505a:	f002 fe73 	bl	b7d44 <memset>
}
   b505e:	4620      	mov	r0, r4
   b5060:	bd10      	pop	{r4, pc}
   b5062:	bf00      	nop
   b5064:	000b8170 	.word	0x000b8170

000b5068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5068:	4603      	mov	r3, r0
   b506a:	4a07      	ldr	r2, [pc, #28]	; (b5088 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b506c:	b510      	push	{r4, lr}
   b506e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5072:	f101 0210 	add.w	r2, r1, #16
   b5076:	f851 4b04 	ldr.w	r4, [r1], #4
   b507a:	f843 4b04 	str.w	r4, [r3], #4
   b507e:	4291      	cmp	r1, r2
   b5080:	d1f9      	bne.n	b5076 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5082:	780a      	ldrb	r2, [r1, #0]
   b5084:	701a      	strb	r2, [r3, #0]
}
   b5086:	bd10      	pop	{r4, pc}
   b5088:	000b8170 	.word	0x000b8170

000b508c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b508c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b508e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5092:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5096:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b509a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b509e:	2304      	movs	r3, #4
   b50a0:	6041      	str	r1, [r0, #4]
   b50a2:	7503      	strb	r3, [r0, #20]
}
   b50a4:	bd10      	pop	{r4, pc}
	...

000b50a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b50a8:	b507      	push	{r0, r1, r2, lr}
   b50aa:	4b06      	ldr	r3, [pc, #24]	; (b50c4 <_ZN9IPAddressC1EPKh+0x1c>)
   b50ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b50ae:	78cb      	ldrb	r3, [r1, #3]
   b50b0:	9300      	str	r3, [sp, #0]
   b50b2:	788b      	ldrb	r3, [r1, #2]
   b50b4:	784a      	ldrb	r2, [r1, #1]
   b50b6:	7809      	ldrb	r1, [r1, #0]
   b50b8:	f7ff ffe8 	bl	b508c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b50bc:	b003      	add	sp, #12
   b50be:	f85d fb04 	ldr.w	pc, [sp], #4
   b50c2:	bf00      	nop
   b50c4:	000b8170 	.word	0x000b8170

000b50c8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b50c8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b50ca:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b50cc:	4604      	mov	r4, r0
      if (_M_manager)
   b50ce:	b113      	cbz	r3, b50d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b50d0:	2203      	movs	r2, #3
   b50d2:	4601      	mov	r1, r0
   b50d4:	4798      	blx	r3
    }
   b50d6:	4620      	mov	r0, r4
   b50d8:	bd10      	pop	{r4, pc}
	...

000b50dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b50dc:	4b01      	ldr	r3, [pc, #4]	; (b50e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b50de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b50e0:	4770      	bx	lr
   b50e2:	bf00      	nop
   b50e4:	2003e1bc 	.word	0x2003e1bc

000b50e8 <serialEventRun>:
{
   b50e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b50ea:	4b0b      	ldr	r3, [pc, #44]	; (b5118 <serialEventRun+0x30>)
   b50ec:	b143      	cbz	r3, b5100 <serialEventRun+0x18>
   b50ee:	f7ff ff4d 	bl	b4f8c <_Z16_fetch_usbserialv>
   b50f2:	6803      	ldr	r3, [r0, #0]
   b50f4:	691b      	ldr	r3, [r3, #16]
   b50f6:	4798      	blx	r3
   b50f8:	2800      	cmp	r0, #0
   b50fa:	dd01      	ble.n	b5100 <serialEventRun+0x18>
        serialEvent();
   b50fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5100:	4b06      	ldr	r3, [pc, #24]	; (b511c <serialEventRun+0x34>)
   b5102:	b143      	cbz	r3, b5116 <serialEventRun+0x2e>
   b5104:	f002 fc9a 	bl	b7a3c <_Z22__fetch_global_Serial1v>
   b5108:	6803      	ldr	r3, [r0, #0]
   b510a:	691b      	ldr	r3, [r3, #16]
   b510c:	4798      	blx	r3
   b510e:	2800      	cmp	r0, #0
   b5110:	dd01      	ble.n	b5116 <serialEventRun+0x2e>
        serialEvent1();
   b5112:	f3af 8000 	nop.w
}
   b5116:	bd08      	pop	{r3, pc}
	...

000b5120 <_post_loop>:
{
   b5120:	b508      	push	{r3, lr}
	serialEventRun();
   b5122:	f7ff ffe1 	bl	b50e8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5126:	f7ff fa71 	bl	b460c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b512a:	4b01      	ldr	r3, [pc, #4]	; (b5130 <_post_loop+0x10>)
   b512c:	6018      	str	r0, [r3, #0]
}
   b512e:	bd08      	pop	{r3, pc}
   b5130:	2003e740 	.word	0x2003e740

000b5134 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5134:	4805      	ldr	r0, [pc, #20]	; (b514c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5136:	4a06      	ldr	r2, [pc, #24]	; (b5150 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5138:	4906      	ldr	r1, [pc, #24]	; (b5154 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b513a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b513c:	1a12      	subs	r2, r2, r0
   b513e:	f002 fdd9 	bl	b7cf4 <memcpy>
    __backup_sram_signature = signature;
   b5142:	4b05      	ldr	r3, [pc, #20]	; (b5158 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5144:	4a05      	ldr	r2, [pc, #20]	; (b515c <_Z33system_initialize_user_backup_ramv+0x28>)
   b5146:	601a      	str	r2, [r3, #0]
}
   b5148:	bd08      	pop	{r3, pc}
   b514a:	bf00      	nop
   b514c:	2003f400 	.word	0x2003f400
   b5150:	2003f404 	.word	0x2003f404
   b5154:	000b872c 	.word	0x000b872c
   b5158:	2003f400 	.word	0x2003f400
   b515c:	9a271c1e 	.word	0x9a271c1e

000b5160 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5160:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5162:	2300      	movs	r3, #0
   b5164:	9300      	str	r3, [sp, #0]
   b5166:	461a      	mov	r2, r3
   b5168:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b516c:	f7ff fb1a 	bl	b47a4 <system_ctrl_set_result>
}
   b5170:	b003      	add	sp, #12
   b5172:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5178 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5178:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b517a:	8843      	ldrh	r3, [r0, #2]
   b517c:	2b0a      	cmp	r3, #10
   b517e:	d008      	beq.n	b5192 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5180:	2b50      	cmp	r3, #80	; 0x50
   b5182:	d10b      	bne.n	b519c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5184:	4b09      	ldr	r3, [pc, #36]	; (b51ac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5186:	681b      	ldr	r3, [r3, #0]
   b5188:	b14b      	cbz	r3, b519e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b518a:	b003      	add	sp, #12
   b518c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5190:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5192:	f7ff ffe5 	bl	b5160 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5196:	b003      	add	sp, #12
   b5198:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b519c:	2300      	movs	r3, #0
   b519e:	9300      	str	r3, [sp, #0]
   b51a0:	461a      	mov	r2, r3
   b51a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b51a6:	f7ff fafd 	bl	b47a4 <system_ctrl_set_result>
}
   b51aa:	e7f4      	b.n	b5196 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b51ac:	2003e6cc 	.word	0x2003e6cc

000b51b0 <module_user_init_hook>:
{
   b51b0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b51b2:	4812      	ldr	r0, [pc, #72]	; (b51fc <module_user_init_hook+0x4c>)
   b51b4:	2100      	movs	r1, #0
   b51b6:	f7ff fb37 	bl	b4828 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b51ba:	4b11      	ldr	r3, [pc, #68]	; (b5200 <module_user_init_hook+0x50>)
   b51bc:	681a      	ldr	r2, [r3, #0]
   b51be:	4b11      	ldr	r3, [pc, #68]	; (b5204 <module_user_init_hook+0x54>)
   b51c0:	429a      	cmp	r2, r3
   b51c2:	4b11      	ldr	r3, [pc, #68]	; (b5208 <module_user_init_hook+0x58>)
   b51c4:	bf0c      	ite	eq
   b51c6:	2201      	moveq	r2, #1
   b51c8:	2200      	movne	r2, #0
   b51ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b51cc:	d001      	beq.n	b51d2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b51ce:	f7ff ffb1 	bl	b5134 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b51d2:	f7ff fa0b 	bl	b45ec <HAL_RNG_GetRandomNumber>
   b51d6:	4604      	mov	r4, r0
    srand(seed);
   b51d8:	f002 fdbc 	bl	b7d54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b51dc:	4b0b      	ldr	r3, [pc, #44]	; (b520c <module_user_init_hook+0x5c>)
   b51de:	b113      	cbz	r3, b51e6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b51e0:	4620      	mov	r0, r4
   b51e2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b51e6:	2100      	movs	r1, #0
   b51e8:	4808      	ldr	r0, [pc, #32]	; (b520c <module_user_init_hook+0x5c>)
   b51ea:	f7ff fa59 	bl	b46a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b51ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b51f2:	4807      	ldr	r0, [pc, #28]	; (b5210 <module_user_init_hook+0x60>)
   b51f4:	2100      	movs	r1, #0
   b51f6:	f7ff bacb 	b.w	b4790 <system_ctrl_set_app_request_handler>
   b51fa:	bf00      	nop
   b51fc:	000b50dd 	.word	0x000b50dd
   b5200:	2003f400 	.word	0x2003f400
   b5204:	9a271c1e 	.word	0x9a271c1e
   b5208:	2003e6c8 	.word	0x2003e6c8
   b520c:	00000000 	.word	0x00000000
   b5210:	000b5179 	.word	0x000b5179

000b5214 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5214:	4b01      	ldr	r3, [pc, #4]	; (b521c <_GLOBAL__sub_I_RGB+0x8>)
   b5216:	2200      	movs	r2, #0
   b5218:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b521a:	4770      	bx	lr
   b521c:	2003e6d0 	.word	0x2003e6d0

000b5220 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5220:	4b02      	ldr	r3, [pc, #8]	; (b522c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5222:	681a      	ldr	r2, [r3, #0]
   b5224:	4b02      	ldr	r3, [pc, #8]	; (b5230 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5226:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5228:	4770      	bx	lr
   b522a:	bf00      	nop
   b522c:	2003e1b0 	.word	0x2003e1b0
   b5230:	2003e6e0 	.word	0x2003e6e0

000b5234 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b5234:	6880      	ldr	r0, [r0, #8]
   b5236:	6803      	ldr	r3, [r0, #0]
   b5238:	68db      	ldr	r3, [r3, #12]
   b523a:	4718      	bx	r3

000b523c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b523c:	4770      	bx	lr

000b523e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b523e:	4608      	mov	r0, r1
   b5240:	b111      	cbz	r1, b5248 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5242:	680b      	ldr	r3, [r1, #0]
   b5244:	685b      	ldr	r3, [r3, #4]
   b5246:	4718      	bx	r3
}
   b5248:	4770      	bx	lr

000b524a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b524a:	4770      	bx	lr

000b524c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b524c:	4770      	bx	lr

000b524e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b524e:	4770      	bx	lr

000b5250 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b5250:	4770      	bx	lr

000b5252 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5252:	b538      	push	{r3, r4, r5, lr}
   b5254:	4604      	mov	r4, r0
   b5256:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b5258:	6800      	ldr	r0, [r0, #0]
   b525a:	212e      	movs	r1, #46	; 0x2e
   b525c:	f002 fdb5 	bl	b7dca <strchrnul>
    size = s - category;
   b5260:	6823      	ldr	r3, [r4, #0]
   b5262:	1ac3      	subs	r3, r0, r3
   b5264:	602b      	str	r3, [r5, #0]
    if (size) {
   b5266:	b123      	cbz	r3, b5272 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b5268:	7803      	ldrb	r3, [r0, #0]
   b526a:	b103      	cbz	r3, b526e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b526c:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b526e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5270:	6020      	str	r0, [r4, #0]
}
   b5272:	4618      	mov	r0, r3
   b5274:	bd38      	pop	{r3, r4, r5, pc}

000b5276 <_ZN5spark16JSONStreamWriterD0Ev>:
   b5276:	b510      	push	{r4, lr}
   b5278:	210c      	movs	r1, #12
   b527a:	4604      	mov	r4, r0
   b527c:	f7fe ff1f 	bl	b40be <_ZdlPvj>
   b5280:	4620      	mov	r0, r4
   b5282:	bd10      	pop	{r4, pc}

000b5284 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b5284:	b510      	push	{r4, lr}
   b5286:	2104      	movs	r1, #4
   b5288:	4604      	mov	r4, r0
   b528a:	f7fe ff18 	bl	b40be <_ZdlPvj>
   b528e:	4620      	mov	r0, r4
   b5290:	bd10      	pop	{r4, pc}

000b5292 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5292:	b510      	push	{r4, lr}
   b5294:	2104      	movs	r1, #4
   b5296:	4604      	mov	r4, r0
   b5298:	f7fe ff11 	bl	b40be <_ZdlPvj>
   b529c:	4620      	mov	r0, r4
   b529e:	bd10      	pop	{r4, pc}

000b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b52a0:	f7ff b956 	b.w	b4550 <os_mutex_recursive_lock>

000b52a4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b52a4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b52a6:	f7fe feb9 	bl	b401c <strcmp>
}
   b52aa:	fab0 f080 	clz	r0, r0
   b52ae:	0940      	lsrs	r0, r0, #5
   b52b0:	bd08      	pop	{r3, pc}

000b52b2 <__tcf_1>:
   b52b2:	4770      	bx	lr

000b52b4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b52b4:	b510      	push	{r4, lr}
   b52b6:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b52b8:	f7ff fe68 	bl	b4f8c <_Z16_fetch_usbserialv>
   b52bc:	4284      	cmp	r4, r0
   b52be:	d010      	beq.n	b52e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b52c0:	f002 fbbc 	bl	b7a3c <_Z22__fetch_global_Serial1v>
   b52c4:	4284      	cmp	r4, r0
   b52c6:	d105      	bne.n	b52d4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b52c8:	f002 fbb8 	bl	b7a3c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b52cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b52d0:	f002 ba5f 	b.w	b7792 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b52d4:	b12c      	cbz	r4, b52e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b52d6:	6823      	ldr	r3, [r4, #0]
   b52d8:	4620      	mov	r0, r4
   b52da:	685b      	ldr	r3, [r3, #4]
}
   b52dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52e0:	4718      	bx	r3
   b52e2:	bd10      	pop	{r4, pc}

000b52e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b52e4:	680b      	ldr	r3, [r1, #0]
   b52e6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b52e8:	684b      	ldr	r3, [r1, #4]
   b52ea:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b52ec:	b113      	cbz	r3, b52f4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b52ee:	685a      	ldr	r2, [r3, #4]
   b52f0:	3201      	adds	r2, #1
   b52f2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b52f4:	4770      	bx	lr

000b52f6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b52f6:	b513      	push	{r0, r1, r4, lr}
   b52f8:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b52fa:	4608      	mov	r0, r1
   b52fc:	9101      	str	r1, [sp, #4]
   b52fe:	f7fe fe97 	bl	b4030 <strlen>
   b5302:	9901      	ldr	r1, [sp, #4]
   b5304:	4602      	mov	r2, r0
   b5306:	4620      	mov	r0, r4
}
   b5308:	b002      	add	sp, #8
   b530a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b530e:	f7ff bdcb 	b.w	b4ea8 <_ZN5spark10JSONWriter5valueEPKcj>

000b5312 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b5312:	b513      	push	{r0, r1, r4, lr}
   b5314:	4604      	mov	r4, r0
    write(str, strlen(str));
   b5316:	4608      	mov	r0, r1
   b5318:	9101      	str	r1, [sp, #4]
   b531a:	f7fe fe89 	bl	b4030 <strlen>
   b531e:	6823      	ldr	r3, [r4, #0]
   b5320:	9901      	ldr	r1, [sp, #4]
   b5322:	68db      	ldr	r3, [r3, #12]
   b5324:	4602      	mov	r2, r0
   b5326:	4620      	mov	r0, r4
}
   b5328:	b002      	add	sp, #8
   b532a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b532e:	4718      	bx	r3

000b5330 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b5330:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b5332:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b5334:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b5338:	68db      	ldr	r3, [r3, #12]
   b533a:	2201      	movs	r2, #1
   b533c:	f10d 0107 	add.w	r1, sp, #7
   b5340:	4798      	blx	r3
}
   b5342:	b003      	add	sp, #12
   b5344:	f85d fb04 	ldr.w	pc, [sp], #4

000b5348 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b5348:	680a      	ldr	r2, [r1, #0]
   b534a:	6002      	str	r2, [r0, #0]
   b534c:	684a      	ldr	r2, [r1, #4]
   b534e:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b5350:	2200      	movs	r2, #0
   b5352:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5356:	b510      	push	{r4, lr}
   b5358:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b535a:	688c      	ldr	r4, [r1, #8]
   b535c:	6084      	str	r4, [r0, #8]
   b535e:	68cc      	ldr	r4, [r1, #12]
   b5360:	60c4      	str	r4, [r0, #12]
   b5362:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5364:	608a      	str	r2, [r1, #8]
   b5366:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5368:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b536a:	610a      	str	r2, [r1, #16]
   b536c:	bd10      	pop	{r4, pc}
	...

000b5370 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b5370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5374:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5378:	f04f 0a14 	mov.w	sl, #20
   b537c:	9300      	str	r3, [sp, #0]
   b537e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b5382:	4b18      	ldr	r3, [pc, #96]	; (b53e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5384:	10a4      	asrs	r4, r4, #2
   b5386:	4617      	mov	r7, r2
   b5388:	435c      	muls	r4, r3
   b538a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b538c:	2c00      	cmp	r4, #0
   b538e:	dd21      	ble.n	b53d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b5390:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b5392:	fb0a f006 	mul.w	r0, sl, r6
   b5396:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b539a:	463a      	mov	r2, r7
   b539c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b53a0:	5828      	ldr	r0, [r5, r0]
   b53a2:	9101      	str	r1, [sp, #4]
   b53a4:	455f      	cmp	r7, fp
   b53a6:	bf28      	it	cs
   b53a8:	465a      	movcs	r2, fp
   b53aa:	f002 fd20 	bl	b7dee <strncmp>
                if (cmp == 0) {
   b53ae:	2800      	cmp	r0, #0
   b53b0:	9901      	ldr	r1, [sp, #4]
   b53b2:	f04f 0301 	mov.w	r3, #1
   b53b6:	d10b      	bne.n	b53d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b53b8:	455f      	cmp	r7, fp
   b53ba:	d103      	bne.n	b53c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b53bc:	9a00      	ldr	r2, [sp, #0]
   b53be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b53c0:	4634      	mov	r4, r6
   b53c2:	e7e3      	b.n	b538c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b53c4:	d9fc      	bls.n	b53c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b53c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b53c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b53cc:	3e01      	subs	r6, #1
   b53ce:	e7f7      	b.n	b53c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b53d0:	dbf9      	blt.n	b53c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b53d2:	e7f5      	b.n	b53c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b53d4:	eba5 0508 	sub.w	r5, r5, r8
}
   b53d8:	4802      	ldr	r0, [pc, #8]	; (b53e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b53da:	10ad      	asrs	r5, r5, #2
   b53dc:	4368      	muls	r0, r5
   b53de:	b003      	add	sp, #12
   b53e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b53e4:	cccccccd 	.word	0xcccccccd

000b53e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b53e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b53ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b53ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b53ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b53f0:	b303      	cbz	r3, b5434 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b53f2:	b1f9      	cbz	r1, b5434 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b53f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b53f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b53fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b53fc:	a903      	add	r1, sp, #12
   b53fe:	a801      	add	r0, sp, #4
   b5400:	f7ff ff27 	bl	b5252 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5404:	4601      	mov	r1, r0
   b5406:	b1a8      	cbz	r0, b5434 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b5408:	f10d 030b 	add.w	r3, sp, #11
   b540c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b540e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5412:	4620      	mov	r0, r4
   b5414:	f7ff ffac 	bl	b5370 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b5418:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b541c:	b153      	cbz	r3, b5434 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b541e:	6823      	ldr	r3, [r4, #0]
   b5420:	2414      	movs	r4, #20
   b5422:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b5426:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b5428:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b542c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b542e:	bfa8      	it	ge
   b5430:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b5432:	e7e3      	b.n	b53fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b5434:	4628      	mov	r0, r5
   b5436:	b004      	add	sp, #16
   b5438:	bd70      	pop	{r4, r5, r6, pc}

000b543a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b543a:	b40e      	push	{r1, r2, r3}
   b543c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b543e:	b08c      	sub	sp, #48	; 0x30
   b5440:	af00      	add	r7, sp, #0
   b5442:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b5446:	4604      	mov	r4, r0
   b5448:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b544c:	607a      	str	r2, [r7, #4]
   b544e:	462b      	mov	r3, r5
   b5450:	2120      	movs	r1, #32
   b5452:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b5456:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5458:	f7ff f9c6 	bl	b47e8 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b545c:	281f      	cmp	r0, #31
   b545e:	687a      	ldr	r2, [r7, #4]
   b5460:	d91a      	bls.n	b5498 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b5462:	f100 0308 	add.w	r3, r0, #8
   b5466:	f023 0307 	bic.w	r3, r3, #7
        }
   b546a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b546c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5470:	1c41      	adds	r1, r0, #1
   b5472:	462b      	mov	r3, r5
   b5474:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5476:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5478:	f7ff f9b6 	bl	b47e8 <vsnprintf>
        if (n > 0) {
   b547c:	1e02      	subs	r2, r0, #0
   b547e:	dd04      	ble.n	b548a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b5480:	6823      	ldr	r3, [r4, #0]
   b5482:	4669      	mov	r1, sp
   b5484:	68db      	ldr	r3, [r3, #12]
   b5486:	4620      	mov	r0, r4
   b5488:	4798      	blx	r3
   b548a:	46b5      	mov	sp, r6
}
   b548c:	3730      	adds	r7, #48	; 0x30
   b548e:	46bd      	mov	sp, r7
   b5490:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5494:	b003      	add	sp, #12
   b5496:	4770      	bx	lr
    } else if (n > 0) {
   b5498:	2800      	cmp	r0, #0
   b549a:	d0f7      	beq.n	b548c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b549c:	6823      	ldr	r3, [r4, #0]
   b549e:	4602      	mov	r2, r0
   b54a0:	68db      	ldr	r3, [r3, #12]
   b54a2:	f107 0110 	add.w	r1, r7, #16
   b54a6:	4620      	mov	r0, r4
   b54a8:	4798      	blx	r3
}
   b54aa:	e7ef      	b.n	b548c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b54ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b54ac:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b54ae:	4c09      	ldr	r4, [pc, #36]	; (b54d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b54b0:	7823      	ldrb	r3, [r4, #0]
   b54b2:	f3bf 8f5b 	dmb	ish
   b54b6:	07db      	lsls	r3, r3, #31
   b54b8:	d409      	bmi.n	b54ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b54ba:	4620      	mov	r0, r4
   b54bc:	f7fe fe0e 	bl	b40dc <__cxa_guard_acquire>
   b54c0:	b128      	cbz	r0, b54ce <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b54c2:	4620      	mov	r0, r4
   b54c4:	f7fe fe0f 	bl	b40e6 <__cxa_guard_release>
   b54c8:	4803      	ldr	r0, [pc, #12]	; (b54d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b54ca:	f002 fbf5 	bl	b7cb8 <atexit>
}
   b54ce:	4803      	ldr	r0, [pc, #12]	; (b54dc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b54d0:	bd10      	pop	{r4, pc}
   b54d2:	bf00      	nop
   b54d4:	2003e6e8 	.word	0x2003e6e8
   b54d8:	000b524b 	.word	0x000b524b
   b54dc:	2003e1b4 	.word	0x2003e1b4

000b54e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b54e0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b54e2:	4c09      	ldr	r4, [pc, #36]	; (b5508 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b54e4:	7823      	ldrb	r3, [r4, #0]
   b54e6:	f3bf 8f5b 	dmb	ish
   b54ea:	07db      	lsls	r3, r3, #31
   b54ec:	d409      	bmi.n	b5502 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b54ee:	4620      	mov	r0, r4
   b54f0:	f7fe fdf4 	bl	b40dc <__cxa_guard_acquire>
   b54f4:	b128      	cbz	r0, b5502 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b54f6:	4620      	mov	r0, r4
   b54f8:	f7fe fdf5 	bl	b40e6 <__cxa_guard_release>
   b54fc:	4803      	ldr	r0, [pc, #12]	; (b550c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b54fe:	f002 fbdb 	bl	b7cb8 <atexit>
    return &factory;
}
   b5502:	4803      	ldr	r0, [pc, #12]	; (b5510 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b5504:	bd10      	pop	{r4, pc}
   b5506:	bf00      	nop
   b5508:	2003e6ec 	.word	0x2003e6ec
   b550c:	000b52b3 	.word	0x000b52b3
   b5510:	2003e1b8 	.word	0x2003e1b8

000b5514 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5514:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b5516:	2500      	movs	r5, #0
   b5518:	4604      	mov	r4, r0
   b551a:	e9c0 5500 	strd	r5, r5, [r0]
   b551e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5522:	6085      	str	r5, [r0, #8]
   b5524:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b5526:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b552a:	f7ff f801 	bl	b4530 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b552e:	f7ff ffbd 	bl	b54ac <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5532:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5534:	f7ff ffd4 	bl	b54e0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b5538:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b553a:	6220      	str	r0, [r4, #32]
}
   b553c:	4620      	mov	r0, r4
   b553e:	bd38      	pop	{r3, r4, r5, pc}

000b5540 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5540:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5542:	4c0a      	ldr	r4, [pc, #40]	; (b556c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5544:	7823      	ldrb	r3, [r4, #0]
   b5546:	f3bf 8f5b 	dmb	ish
   b554a:	07db      	lsls	r3, r3, #31
   b554c:	d40c      	bmi.n	b5568 <_ZN5spark10LogManager8instanceEv+0x28>
   b554e:	4620      	mov	r0, r4
   b5550:	f7fe fdc4 	bl	b40dc <__cxa_guard_acquire>
   b5554:	b140      	cbz	r0, b5568 <_ZN5spark10LogManager8instanceEv+0x28>
   b5556:	4806      	ldr	r0, [pc, #24]	; (b5570 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5558:	f7ff ffdc 	bl	b5514 <_ZN5spark10LogManagerC1Ev>
   b555c:	4620      	mov	r0, r4
   b555e:	f7fe fdc2 	bl	b40e6 <__cxa_guard_release>
   b5562:	4804      	ldr	r0, [pc, #16]	; (b5574 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5564:	f002 fba8 	bl	b7cb8 <atexit>
    return &mgr;
}
   b5568:	4801      	ldr	r0, [pc, #4]	; (b5570 <_ZN5spark10LogManager8instanceEv+0x30>)
   b556a:	bd10      	pop	{r4, pc}
   b556c:	2003e6e4 	.word	0x2003e6e4
   b5570:	2003e6f4 	.word	0x2003e6f4
   b5574:	000b5ab9 	.word	0x000b5ab9

000b5578 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5578:	4a02      	ldr	r2, [pc, #8]	; (b5584 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b557a:	4903      	ldr	r1, [pc, #12]	; (b5588 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b557c:	4803      	ldr	r0, [pc, #12]	; (b558c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b557e:	2300      	movs	r3, #0
   b5580:	f7ff b87c 	b.w	b467c <log_set_callbacks>
   b5584:	000b589d 	.word	0x000b589d
   b5588:	000b5829 	.word	0x000b5829
   b558c:	000b57a9 	.word	0x000b57a9

000b5590 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5590:	2300      	movs	r3, #0
   b5592:	461a      	mov	r2, r3
   b5594:	4619      	mov	r1, r3
   b5596:	4618      	mov	r0, r3
   b5598:	f7ff b870 	b.w	b467c <log_set_callbacks>

000b559c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b559c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b559e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b55a0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b55a2:	4668      	mov	r0, sp
   b55a4:	f7ff fe9e 	bl	b52e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b55a8:	466a      	mov	r2, sp
   b55aa:	4629      	mov	r1, r5
   b55ac:	4620      	mov	r0, r4
   b55ae:	f7ff fb9b 	bl	b4ce8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b55b2:	a801      	add	r0, sp, #4
   b55b4:	f7ff fa58 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55b8:	4620      	mov	r0, r4
   b55ba:	b003      	add	sp, #12
   b55bc:	bd30      	pop	{r4, r5, pc}

000b55be <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b55be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b55c0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b55c2:	4604      	mov	r4, r0
   b55c4:	4668      	mov	r0, sp
   b55c6:	f7ff fe8d 	bl	b52e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b55ca:	466a      	mov	r2, sp
   b55cc:	4629      	mov	r1, r5
   b55ce:	4620      	mov	r0, r4
   b55d0:	f7ff fb66 	bl	b4ca0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b55d4:	a801      	add	r0, sp, #4
   b55d6:	f7ff fa47 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55da:	4620      	mov	r0, r4
   b55dc:	b003      	add	sp, #12
   b55de:	bd30      	pop	{r4, r5, pc}

000b55e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b55e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b55e2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b55e4:	4604      	mov	r4, r0
   b55e6:	4668      	mov	r0, sp
   b55e8:	f7ff fe7c 	bl	b52e4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b55ec:	466a      	mov	r2, sp
   b55ee:	4629      	mov	r1, r5
   b55f0:	4620      	mov	r0, r4
   b55f2:	f7ff fafd 	bl	b4bf0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b55f6:	a801      	add	r0, sp, #4
   b55f8:	f7ff fa36 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55fc:	4620      	mov	r0, r4
   b55fe:	b003      	add	sp, #12
   b5600:	bd30      	pop	{r4, r5, pc}
	...

000b5604 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b5604:	b570      	push	{r4, r5, r6, lr}
   b5606:	b08a      	sub	sp, #40	; 0x28
   b5608:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b560a:	4601      	mov	r1, r0
   b560c:	a804      	add	r0, sp, #16
   b560e:	f7ff ffc5 	bl	b559c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5612:	4e14      	ldr	r6, [pc, #80]	; (b5664 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5614:	a804      	add	r0, sp, #16
   b5616:	f7ff fb7f 	bl	b4d18 <_ZN5spark18JSONObjectIterator4nextEv>
   b561a:	b1e8      	cbz	r0, b5658 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b561c:	a904      	add	r1, sp, #16
   b561e:	4668      	mov	r0, sp
   b5620:	f7ff ffcd 	bl	b55be <_ZNK5spark18JSONObjectIterator4nameEv>
   b5624:	9802      	ldr	r0, [sp, #8]
   b5626:	4631      	mov	r1, r6
   b5628:	f7ff fe3c 	bl	b52a4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b562c:	4604      	mov	r4, r0
   b562e:	b110      	cbz	r0, b5636 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5630:	1e2c      	subs	r4, r5, #0
   b5632:	bf18      	it	ne
   b5634:	2401      	movne	r4, #1
   b5636:	a801      	add	r0, sp, #4
   b5638:	f7ff fa16 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b563c:	2c00      	cmp	r4, #0
   b563e:	d0e9      	beq.n	b5614 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5640:	a904      	add	r1, sp, #16
   b5642:	4668      	mov	r0, sp
   b5644:	f7ff ffcc 	bl	b55e0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5648:	4668      	mov	r0, sp
   b564a:	f7ff fb07 	bl	b4c5c <_ZNK5spark9JSONValue5toIntEv>
   b564e:	6028      	str	r0, [r5, #0]
   b5650:	a801      	add	r0, sp, #4
   b5652:	f7ff fa09 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5656:	e7dd      	b.n	b5614 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5658:	a805      	add	r0, sp, #20
   b565a:	f7ff fa05 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b565e:	b00a      	add	sp, #40	; 0x28
   b5660:	bd70      	pop	{r4, r5, r6, pc}
   b5662:	bf00      	nop
   b5664:	000b8198 	.word	0x000b8198

000b5668 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5668:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b566a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b566c:	4620      	mov	r0, r4
   b566e:	4913      	ldr	r1, [pc, #76]	; (b56bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5670:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5672:	f7fe fcd3 	bl	b401c <strcmp>
   b5676:	b950      	cbnz	r0, b568e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5678:	f7ff fc88 	bl	b4f8c <_Z16_fetch_usbserialv>
   b567c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5680:	f7ff fc74 	bl	b4f6c <_ZN9USBSerial5beginEl>
}
   b5684:	b003      	add	sp, #12
   b5686:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b568a:	f7ff bc7f 	b.w	b4f8c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b568e:	490c      	ldr	r1, [pc, #48]	; (b56c0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5690:	4620      	mov	r0, r4
   b5692:	f7fe fcc3 	bl	b401c <strcmp>
   b5696:	b978      	cbnz	r0, b56b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5698:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b569c:	a901      	add	r1, sp, #4
   b569e:	4628      	mov	r0, r5
        int baud = 9600;
   b56a0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b56a2:	f7ff ffaf 	bl	b5604 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b56a6:	f002 f9c9 	bl	b7a3c <_Z22__fetch_global_Serial1v>
   b56aa:	9901      	ldr	r1, [sp, #4]
   b56ac:	f002 f86e 	bl	b778c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b56b0:	f002 f9c4 	bl	b7a3c <_Z22__fetch_global_Serial1v>
}
   b56b4:	b003      	add	sp, #12
   b56b6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b56b8:	2000      	movs	r0, #0
   b56ba:	e7fb      	b.n	b56b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b56bc:	000b819d 	.word	0x000b819d
   b56c0:	000b81a4 	.word	0x000b81a4

000b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b56c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b56c6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b56ca:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b56cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b56ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b56d2:	42ae      	cmp	r6, r5
   b56d4:	d005      	beq.n	b56e2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b56d6:	f105 0008 	add.w	r0, r5, #8
   b56da:	f7ff fff3 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b56de:	3514      	adds	r5, #20
   b56e0:	e7f7      	b.n	b56d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b56e2:	6820      	ldr	r0, [r4, #0]
   b56e4:	f7ff f870 	bl	b47c8 <free>
}
   b56e8:	4620      	mov	r0, r4
   b56ea:	bd70      	pop	{r4, r5, r6, pc}

000b56ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b56ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b56ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b56f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b56f4:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b56f8:	42ae      	cmp	r6, r5
   b56fa:	d004      	beq.n	b5706 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b56fc:	4628      	mov	r0, r5
   b56fe:	f002 f89b 	bl	b7838 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5702:	3510      	adds	r5, #16
   b5704:	e7f8      	b.n	b56f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5706:	6820      	ldr	r0, [r4, #0]
   b5708:	f7ff f85e 	bl	b47c8 <free>
}
   b570c:	4620      	mov	r0, r4
   b570e:	bd70      	pop	{r4, r5, r6, pc}

000b5710 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5710:	b510      	push	{r4, lr}
   b5712:	4604      	mov	r4, r0
   b5714:	300c      	adds	r0, #12
   b5716:	f7ff ffd5 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b571a:	4620      	mov	r0, r4
   b571c:	f7ff ffe6 	bl	b56ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5720:	4620      	mov	r0, r4
   b5722:	bd10      	pop	{r4, pc}

000b5724 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b5724:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b5726:	4b04      	ldr	r3, [pc, #16]	; (b5738 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b5728:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b572a:	f840 3b04 	str.w	r3, [r0], #4
   b572e:	f7ff ffef 	bl	b5710 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5732:	4620      	mov	r0, r4
   b5734:	bd10      	pop	{r4, pc}
   b5736:	bf00      	nop
   b5738:	000b8070 	.word	0x000b8070

000b573c <_ZN5spark16StreamLogHandlerD0Ev>:
   b573c:	b510      	push	{r4, lr}
   b573e:	4604      	mov	r4, r0
   b5740:	f7ff fff0 	bl	b5724 <_ZN5spark16StreamLogHandlerD1Ev>
   b5744:	4620      	mov	r0, r4
   b5746:	2124      	movs	r1, #36	; 0x24
   b5748:	f7fe fcb9 	bl	b40be <_ZdlPvj>
   b574c:	4620      	mov	r0, r4
   b574e:	bd10      	pop	{r4, pc}

000b5750 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5750:	b510      	push	{r4, lr}
   b5752:	4b03      	ldr	r3, [pc, #12]	; (b5760 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5754:	6003      	str	r3, [r0, #0]
   b5756:	4604      	mov	r4, r0
   b5758:	f7ff ffe4 	bl	b5724 <_ZN5spark16StreamLogHandlerD1Ev>
   b575c:	4620      	mov	r0, r4
   b575e:	bd10      	pop	{r4, pc}
   b5760:	000b8244 	.word	0x000b8244

000b5764 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5764:	b510      	push	{r4, lr}
   b5766:	4604      	mov	r4, r0
   b5768:	f7ff fff2 	bl	b5750 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b576c:	4620      	mov	r0, r4
   b576e:	2124      	movs	r1, #36	; 0x24
   b5770:	f7fe fca5 	bl	b40be <_ZdlPvj>
   b5774:	4620      	mov	r0, r4
   b5776:	bd10      	pop	{r4, pc}

000b5778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5778:	2200      	movs	r2, #0
   b577a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b577e:	b510      	push	{r4, lr}
        capacity_(0) {
   b5780:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5782:	680c      	ldr	r4, [r1, #0]
   b5784:	6004      	str	r4, [r0, #0]
   b5786:	684c      	ldr	r4, [r1, #4]
   b5788:	6044      	str	r4, [r0, #4]
   b578a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b578c:	600a      	str	r2, [r1, #0]
   b578e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5790:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5792:	608a      	str	r2, [r1, #8]
}
   b5794:	bd10      	pop	{r4, pc}

000b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5796:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5798:	6803      	ldr	r3, [r0, #0]
   b579a:	4604      	mov	r4, r0
   b579c:	6818      	ldr	r0, [r3, #0]
   b579e:	f7fe fedf 	bl	b4560 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b57a2:	4620      	mov	r0, r4
   b57a4:	bd10      	pop	{r4, pc}
	...

000b57a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b57a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57ac:	b087      	sub	sp, #28
   b57ae:	4680      	mov	r8, r0
   b57b0:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b57b2:	4b1c      	ldr	r3, [pc, #112]	; (b5824 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b57b4:	685b      	ldr	r3, [r3, #4]
   b57b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b57ba:	4689      	mov	r9, r1
   b57bc:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b57be:	b96b      	cbnz	r3, b57dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b57c0:	f7ff febe 	bl	b5540 <_ZN5spark10LogManager8instanceEv>
   b57c4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b57c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b57ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b57cc:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b57ce:	f7ff fd67 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b57d2:	7b23      	ldrb	r3, [r4, #12]
   b57d4:	b12b      	cbz	r3, b57e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b57d6:	a805      	add	r0, sp, #20
   b57d8:	f7ff ffdd 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b57dc:	b007      	add	sp, #28
   b57de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b57e2:	2301      	movs	r3, #1
   b57e4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b57e6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b57ea:	fa5f f989 	uxtb.w	r9, r9
   b57ee:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b57f2:	45aa      	cmp	sl, r5
   b57f4:	d012      	beq.n	b581c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b57f6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b57fa:	4631      	mov	r1, r6
   b57fc:	1d38      	adds	r0, r7, #4
   b57fe:	f7ff fdf3 	bl	b53e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b5802:	4581      	cmp	r9, r0
   b5804:	d3f5      	bcc.n	b57f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b5806:	683b      	ldr	r3, [r7, #0]
   b5808:	9a03      	ldr	r2, [sp, #12]
   b580a:	9200      	str	r2, [sp, #0]
   b580c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b5810:	464a      	mov	r2, r9
   b5812:	4633      	mov	r3, r6
   b5814:	4641      	mov	r1, r8
   b5816:	4638      	mov	r0, r7
   b5818:	47d8      	blx	fp
   b581a:	e7ea      	b.n	b57f2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b581c:	2300      	movs	r3, #0
   b581e:	7323      	strb	r3, [r4, #12]
   b5820:	e7d9      	b.n	b57d6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b5822:	bf00      	nop
   b5824:	e000ed00 	.word	0xe000ed00

000b5828 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b5828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b582c:	469b      	mov	fp, r3
   b582e:	4b1a      	ldr	r3, [pc, #104]	; (b5898 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5830:	685b      	ldr	r3, [r3, #4]
   b5832:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5836:	4680      	mov	r8, r0
   b5838:	4689      	mov	r9, r1
   b583a:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b583c:	b96b      	cbnz	r3, b585a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b583e:	f7ff fe7f 	bl	b5540 <_ZN5spark10LogManager8instanceEv>
   b5842:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5844:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5848:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b584a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b584c:	f7ff fd28 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5850:	7b23      	ldrb	r3, [r4, #12]
   b5852:	b12b      	cbz	r3, b5860 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5854:	a801      	add	r0, sp, #4
   b5856:	f7ff ff9e 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b585a:	b003      	add	sp, #12
   b585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5860:	2301      	movs	r3, #1
   b5862:	7323      	strb	r3, [r4, #12]
   b5864:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5868:	b2f6      	uxtb	r6, r6
   b586a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b586e:	4555      	cmp	r5, sl
   b5870:	d00e      	beq.n	b5890 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5872:	f855 7b04 	ldr.w	r7, [r5], #4
   b5876:	4659      	mov	r1, fp
   b5878:	1d38      	adds	r0, r7, #4
   b587a:	f7ff fdb5 	bl	b53e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b587e:	4286      	cmp	r6, r0
   b5880:	d3f5      	bcc.n	b586e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5882:	683b      	ldr	r3, [r7, #0]
   b5884:	464a      	mov	r2, r9
   b5886:	68db      	ldr	r3, [r3, #12]
   b5888:	4641      	mov	r1, r8
   b588a:	4638      	mov	r0, r7
   b588c:	4798      	blx	r3
   b588e:	e7ee      	b.n	b586e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5890:	2300      	movs	r3, #0
   b5892:	7323      	strb	r3, [r4, #12]
   b5894:	e7de      	b.n	b5854 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5896:	bf00      	nop
   b5898:	e000ed00 	.word	0xe000ed00

000b589c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b589c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b58a0:	4b16      	ldr	r3, [pc, #88]	; (b58fc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b58a2:	685b      	ldr	r3, [r3, #4]
   b58a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b58a8:	4605      	mov	r5, r0
   b58aa:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b58ac:	bb1b      	cbnz	r3, b58f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b58ae:	f7ff fe47 	bl	b5540 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b58b2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b58b6:	4604      	mov	r4, r0
   b58b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58ba:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b58bc:	f7ff fcf0 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
   b58c0:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b58c4:	2446      	movs	r4, #70	; 0x46
   b58c6:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b58ca:	45b0      	cmp	r8, r6
   b58cc:	d109      	bne.n	b58e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b58ce:	a801      	add	r0, sp, #4
   b58d0:	f7ff ff61 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b58d4:	42a5      	cmp	r5, r4
   b58d6:	bfb4      	ite	lt
   b58d8:	2000      	movlt	r0, #0
   b58da:	2001      	movge	r0, #1
}
   b58dc:	b002      	add	sp, #8
   b58de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b58e2:	f856 0b04 	ldr.w	r0, [r6], #4
   b58e6:	4639      	mov	r1, r7
   b58e8:	3004      	adds	r0, #4
   b58ea:	f7ff fd7d 	bl	b53e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b58ee:	4284      	cmp	r4, r0
   b58f0:	bfa8      	it	ge
   b58f2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b58f4:	e7e9      	b.n	b58ca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b58f6:	2000      	movs	r0, #0
   b58f8:	e7f0      	b.n	b58dc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b58fa:	bf00      	nop
   b58fc:	e000ed00 	.word	0xe000ed00

000b5900 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5902:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b5906:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5908:	4604      	mov	r4, r0
   b590a:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b590c:	db0d      	blt.n	b592a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b590e:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b5910:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5912:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5914:	dd04      	ble.n	b5920 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b5916:	00b9      	lsls	r1, r7, #2
   b5918:	f7fe ff5e 	bl	b47d8 <realloc>
            if (!d) {
   b591c:	b918      	cbnz	r0, b5926 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b591e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b5920:	f7fe ff52 	bl	b47c8 <free>
        T* d = nullptr;
   b5924:	2000      	movs	r0, #0
        data_ = d;
   b5926:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5928:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b592a:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b592c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b592e:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5932:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5934:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5938:	1d08      	adds	r0, r1, #4
   b593a:	f002 f9e9 	bl	b7d10 <memmove>
    new(p) T(std::move(value));
   b593e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5942:	6863      	ldr	r3, [r4, #4]
   b5944:	3301      	adds	r3, #1
   b5946:	6063      	str	r3, [r4, #4]
    return true;
   b5948:	2001      	movs	r0, #1
   b594a:	e7e8      	b.n	b591e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b594c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b594c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b594e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5952:	4604      	mov	r4, r0
   b5954:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5956:	9301      	str	r3, [sp, #4]
   b5958:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b595a:	f7ff fca1 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b595e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5962:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5966:	4293      	cmp	r3, r2
   b5968:	4619      	mov	r1, r3
   b596a:	d00b      	beq.n	b5984 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b596c:	6809      	ldr	r1, [r1, #0]
   b596e:	42a9      	cmp	r1, r5
   b5970:	f103 0304 	add.w	r3, r3, #4
   b5974:	d1f7      	bne.n	b5966 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5976:	a801      	add	r0, sp, #4
   b5978:	f7ff ff0d 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b597c:	2500      	movs	r5, #0
}
   b597e:	4628      	mov	r0, r5
   b5980:	b003      	add	sp, #12
   b5982:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5984:	4629      	mov	r1, r5
   b5986:	4620      	mov	r0, r4
   b5988:	f7ff ffba 	bl	b5900 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b598c:	4605      	mov	r5, r0
   b598e:	2800      	cmp	r0, #0
   b5990:	d0f1      	beq.n	b5976 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5992:	6863      	ldr	r3, [r4, #4]
   b5994:	2b01      	cmp	r3, #1
   b5996:	d101      	bne.n	b599c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5998:	f7ff fdee 	bl	b5578 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b599c:	a801      	add	r0, sp, #4
   b599e:	f7ff fefa 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b59a2:	e7ec      	b.n	b597e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b59a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b59a4:	b570      	push	{r4, r5, r6, lr}
   b59a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b59a8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b59ac:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b59ae:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b59b2:	4282      	cmp	r2, r0
   b59b4:	d00f      	beq.n	b59d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b59b6:	4601      	mov	r1, r0
            if (*p == value) {
   b59b8:	681d      	ldr	r5, [r3, #0]
   b59ba:	f851 6b04 	ldr.w	r6, [r1], #4
   b59be:	42ae      	cmp	r6, r5
   b59c0:	d107      	bne.n	b59d2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b59c2:	1a52      	subs	r2, r2, r1
   b59c4:	f002 f9a4 	bl	b7d10 <memmove>
    --size_;
   b59c8:	6863      	ldr	r3, [r4, #4]
   b59ca:	3b01      	subs	r3, #1
   b59cc:	6063      	str	r3, [r4, #4]
    return true;
   b59ce:	2001      	movs	r0, #1
}
   b59d0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b59d2:	4608      	mov	r0, r1
   b59d4:	e7ed      	b.n	b59b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b59d6:	2000      	movs	r0, #0
   b59d8:	e7fa      	b.n	b59d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b59da <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b59da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b59dc:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b59e0:	4604      	mov	r4, r0
   b59e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b59e4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b59e6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b59e8:	f7ff fc5a 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b59ec:	a901      	add	r1, sp, #4
   b59ee:	4620      	mov	r0, r4
   b59f0:	f7ff ffd8 	bl	b59a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b59f4:	b118      	cbz	r0, b59fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b59f6:	6863      	ldr	r3, [r4, #4]
   b59f8:	b90b      	cbnz	r3, b59fe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b59fa:	f7ff fdc9 	bl	b5590 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b59fe:	a803      	add	r0, sp, #12
   b5a00:	f7ff fec9 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b5a04:	b004      	add	sp, #16
   b5a06:	bd10      	pop	{r4, pc}

000b5a08 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b5a08:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b5a0a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b5a0e:	2318      	movs	r3, #24
   b5a10:	4604      	mov	r4, r0
   b5a12:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b5a16:	42ae      	cmp	r6, r5
   b5a18:	d015      	beq.n	b5a46 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b5a1a:	f105 0110 	add.w	r1, r5, #16
   b5a1e:	4620      	mov	r0, r4
   b5a20:	f7ff ffc0 	bl	b59a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b5a24:	6863      	ldr	r3, [r4, #4]
   b5a26:	b90b      	cbnz	r3, b5a2c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b5a28:	f7ff fdb2 	bl	b5590 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b5a2c:	69e0      	ldr	r0, [r4, #28]
   b5a2e:	6929      	ldr	r1, [r5, #16]
   b5a30:	6803      	ldr	r3, [r0, #0]
   b5a32:	68db      	ldr	r3, [r3, #12]
   b5a34:	4798      	blx	r3
        if (h.stream) {
   b5a36:	6969      	ldr	r1, [r5, #20]
   b5a38:	b119      	cbz	r1, b5a42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b5a3a:	6a20      	ldr	r0, [r4, #32]
   b5a3c:	6803      	ldr	r3, [r0, #0]
   b5a3e:	68db      	ldr	r3, [r3, #12]
   b5a40:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5a42:	3518      	adds	r5, #24
   b5a44:	e7e7      	b.n	b5a16 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5a46:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5a4a:	2618      	movs	r6, #24
   b5a4c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5a50:	42ae      	cmp	r6, r5
   b5a52:	d004      	beq.n	b5a5e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5a54:	4628      	mov	r0, r5
   b5a56:	f001 feef 	bl	b7838 <_ZN6StringD1Ev>
   b5a5a:	3518      	adds	r5, #24
   b5a5c:	e7f8      	b.n	b5a50 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b5a5e:	2300      	movs	r3, #0
   b5a60:	6163      	str	r3, [r4, #20]
}
   b5a62:	bd70      	pop	{r4, r5, r6, pc}

000b5a64 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5a64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a66:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5a68:	f7ff fd92 	bl	b5590 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a6c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5a70:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a72:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5a74:	f7ff fc14 	bl	b52a0 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff ffc5 	bl	b5a08 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5a7e:	a801      	add	r0, sp, #4
   b5a80:	f7ff fe89 	bl	b5796 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5a84:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a86:	b108      	cbz	r0, b5a8c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5a88:	f7fe fd5a 	bl	b4540 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5a8c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5a90:	2618      	movs	r6, #24
   b5a92:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5a96:	42ae      	cmp	r6, r5
   b5a98:	d004      	beq.n	b5aa4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5a9a:	4628      	mov	r0, r5
   b5a9c:	f001 fecc 	bl	b7838 <_ZN6StringD1Ev>
   b5aa0:	3518      	adds	r5, #24
   b5aa2:	e7f8      	b.n	b5a96 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5aa4:	6920      	ldr	r0, [r4, #16]
   b5aa6:	f7fe fe8f 	bl	b47c8 <free>
   b5aaa:	6820      	ldr	r0, [r4, #0]
   b5aac:	f7fe fe8c 	bl	b47c8 <free>
}
   b5ab0:	4620      	mov	r0, r4
   b5ab2:	b002      	add	sp, #8
   b5ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5ab8 <__tcf_2>:
    static LogManager mgr;
   b5ab8:	4801      	ldr	r0, [pc, #4]	; (b5ac0 <__tcf_2+0x8>)
   b5aba:	f7ff bfd3 	b.w	b5a64 <_ZN5spark10LogManagerD1Ev>
   b5abe:	bf00      	nop
   b5ac0:	2003e6f4 	.word	0x2003e6f4

000b5ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5ac4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ac8:	4604      	mov	r4, r0
   b5aca:	460d      	mov	r5, r1
   b5acc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5ace:	d915      	bls.n	b5afc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5ad0:	4290      	cmp	r0, r2
   b5ad2:	d214      	bcs.n	b5afe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5ad4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5ad8:	1a75      	subs	r5, r6, r1
   b5ada:	f1a1 0714 	sub.w	r7, r1, #20
   b5ade:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ae0:	42b7      	cmp	r7, r6
   b5ae2:	d01a      	beq.n	b5b1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5ae4:	b11c      	cbz	r4, b5aee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5ae6:	4631      	mov	r1, r6
   b5ae8:	4620      	mov	r0, r4
   b5aea:	f7ff fc2d 	bl	b5348 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5aee:	f106 0008 	add.w	r0, r6, #8
   b5af2:	f7ff fde7 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5af6:	3e14      	subs	r6, #20
   b5af8:	3c14      	subs	r4, #20
   b5afa:	e7f1      	b.n	b5ae0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5afc:	d00d      	beq.n	b5b1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5afe:	42b5      	cmp	r5, r6
   b5b00:	d00b      	beq.n	b5b1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5b02:	b11c      	cbz	r4, b5b0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5b04:	4629      	mov	r1, r5
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff fc1e 	bl	b5348 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5b0c:	f105 0008 	add.w	r0, r5, #8
   b5b10:	f7ff fdd8 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5b14:	3514      	adds	r5, #20
   b5b16:	3414      	adds	r4, #20
   b5b18:	e7f1      	b.n	b5afe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5b1c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b20:	4604      	mov	r4, r0
   b5b22:	460d      	mov	r5, r1
   b5b24:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5b26:	d914      	bls.n	b5b52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5b28:	4290      	cmp	r0, r2
   b5b2a:	d213      	bcs.n	b5b54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5b2c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5b30:	1a75      	subs	r5, r6, r1
   b5b32:	f1a1 0710 	sub.w	r7, r1, #16
   b5b36:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5b38:	42b7      	cmp	r7, r6
   b5b3a:	d018      	beq.n	b5b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5b3c:	b11c      	cbz	r4, b5b46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5b3e:	4631      	mov	r1, r6
   b5b40:	4620      	mov	r0, r4
   b5b42:	f001 fef5 	bl	b7930 <_ZN6StringC1EOS_>
                end->~T();
   b5b46:	4630      	mov	r0, r6
   b5b48:	f001 fe76 	bl	b7838 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5b4c:	3e10      	subs	r6, #16
   b5b4e:	3c10      	subs	r4, #16
   b5b50:	e7f2      	b.n	b5b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5b52:	d00c      	beq.n	b5b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5b54:	42b5      	cmp	r5, r6
   b5b56:	d00a      	beq.n	b5b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5b58:	b11c      	cbz	r4, b5b62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5b5a:	4629      	mov	r1, r5
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f001 fee7 	bl	b7930 <_ZN6StringC1EOS_>
                p->~T();
   b5b62:	4628      	mov	r0, r5
   b5b64:	f001 fe68 	bl	b7838 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5b68:	3510      	adds	r5, #16
   b5b6a:	3410      	adds	r4, #16
   b5b6c:	e7f2      	b.n	b5b54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5b70:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5b72:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5b74:	4605      	mov	r5, r0
        if (n > 0) {
   b5b76:	dd11      	ble.n	b5b9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5b78:	0130      	lsls	r0, r6, #4
   b5b7a:	f7fe fe1d 	bl	b47b8 <malloc>
            if (!d) {
   b5b7e:	4604      	mov	r4, r0
   b5b80:	b158      	cbz	r0, b5b9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5b82:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5b86:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5b8a:	f7ff ffc7 	bl	b5b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5b8e:	6828      	ldr	r0, [r5, #0]
   b5b90:	f7fe fe1a 	bl	b47c8 <free>
        data_ = d;
   b5b94:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5b96:	60ae      	str	r6, [r5, #8]
        return true;
   b5b98:	2001      	movs	r0, #1
    }
   b5b9a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5b9c:	2400      	movs	r4, #0
   b5b9e:	e7f6      	b.n	b5b8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5ba0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ba4:	4690      	mov	r8, r2
   b5ba6:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5ba8:	2300      	movs	r3, #0
   b5baa:	9103      	str	r1, [sp, #12]
    return size_;
   b5bac:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5bb0:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5bb2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5bb4:	4299      	cmp	r1, r3
        capacity_(0) {
   b5bb6:	e9c0 3300 	strd	r3, r3, [r0]
   b5bba:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5bc2:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5bc6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5bc8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5bca:	dc23      	bgt.n	b5c14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5bcc:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5bd0:	2314      	movs	r3, #20
   b5bd2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5bd6:	42af      	cmp	r7, r5
   b5bd8:	d03b      	beq.n	b5c52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5bda:	4629      	mov	r1, r5
   b5bdc:	a80b      	add	r0, sp, #44	; 0x2c
   b5bde:	f001 fea7 	bl	b7930 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5be2:	a90b      	add	r1, sp, #44	; 0x2c
   b5be4:	a80f      	add	r0, sp, #60	; 0x3c
   b5be6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5be8:	f001 fea2 	bl	b7930 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bec:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5bf0:	4299      	cmp	r1, r3
   b5bf2:	da1b      	bge.n	b5c2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5bf4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5bf8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5bfc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5c00:	4631      	mov	r1, r6
   b5c02:	f106 0010 	add.w	r0, r6, #16
   b5c06:	f7ff ff89 	bl	b5b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5c0a:	b9ee      	cbnz	r6, b5c48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5c0e:	3301      	adds	r3, #1
   b5c10:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5c12:	e011      	b.n	b5c38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5c14:	a808      	add	r0, sp, #32
   b5c16:	f7ff ffab 	bl	b5b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c1a:	2800      	cmp	r0, #0
   b5c1c:	d1d6      	bne.n	b5bcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5c1e:	a808      	add	r0, sp, #32
   b5c20:	f7ff fd64 	bl	b56ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5c24:	4620      	mov	r0, r4
   b5c26:	b015      	add	sp, #84	; 0x54
   b5c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c2c:	3101      	adds	r1, #1
   b5c2e:	a808      	add	r0, sp, #32
   b5c30:	f7ff ff9e 	bl	b5b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5c34:	2800      	cmp	r0, #0
   b5c36:	d1dd      	bne.n	b5bf4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5c38:	a80f      	add	r0, sp, #60	; 0x3c
   b5c3a:	f001 fdfd 	bl	b7838 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5c3e:	a80b      	add	r0, sp, #44	; 0x2c
   b5c40:	f001 fdfa 	bl	b7838 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5c44:	3514      	adds	r5, #20
   b5c46:	e7c6      	b.n	b5bd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5c48:	a90f      	add	r1, sp, #60	; 0x3c
   b5c4a:	4630      	mov	r0, r6
   b5c4c:	f001 fe70 	bl	b7930 <_ZN6StringC1EOS_>
   b5c50:	e7dc      	b.n	b5c0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5c52:	2600      	movs	r6, #0
   b5c54:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5c58:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5c5a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5c5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5c62:	429e      	cmp	r6, r3
   b5c64:	da7c      	bge.n	b5d60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5c66:	0133      	lsls	r3, r6, #4
   b5c68:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5c6a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5c6c:	b90b      	cbnz	r3, b5c72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5c6e:	3601      	adds	r6, #1
   b5c70:	e7f5      	b.n	b5c5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5c72:	2300      	movs	r3, #0
   b5c74:	9307      	str	r3, [sp, #28]
   b5c76:	fb09 f306 	mul.w	r3, r9, r6
   b5c7a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5c7c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5c7e:	a907      	add	r1, sp, #28
   b5c80:	a806      	add	r0, sp, #24
   b5c82:	f7ff fae6 	bl	b5252 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5c86:	4682      	mov	sl, r0
   b5c88:	2800      	cmp	r0, #0
   b5c8a:	d0f0      	beq.n	b5c6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5c8c:	f04f 0300 	mov.w	r3, #0
   b5c90:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5c94:	4601      	mov	r1, r0
   b5c96:	9a07      	ldr	r2, [sp, #28]
   b5c98:	f10d 0317 	add.w	r3, sp, #23
   b5c9c:	4628      	mov	r0, r5
   b5c9e:	f7ff fb67 	bl	b5370 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ca2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5ca6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ca8:	2f00      	cmp	r7, #0
   b5caa:	d14a      	bne.n	b5d42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5cac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5cb0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5cb4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5cbc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5cc0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5cc4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5cc6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5cca:	4293      	cmp	r3, r2
   b5ccc:	db17      	blt.n	b5cfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5cce:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5cd2:	f1ba 0f00 	cmp.w	sl, #0
   b5cd6:	dd30      	ble.n	b5d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5cd8:	fb09 f00a 	mul.w	r0, r9, sl
   b5cdc:	f7fe fd6c 	bl	b47b8 <malloc>
            if (!d) {
   b5ce0:	4683      	mov	fp, r0
   b5ce2:	b360      	cbz	r0, b5d3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5ce4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5ce8:	fb09 1202 	mla	r2, r9, r2, r1
   b5cec:	f7ff feea 	bl	b5ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5cf0:	6828      	ldr	r0, [r5, #0]
   b5cf2:	f7fe fd69 	bl	b47c8 <free>
        data_ = d;
   b5cf6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5cfa:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5cfe:	682b      	ldr	r3, [r5, #0]
   b5d00:	9a01      	ldr	r2, [sp, #4]
   b5d02:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5d06:	686a      	ldr	r2, [r5, #4]
   b5d08:	4651      	mov	r1, sl
   b5d0a:	fb09 3202 	mla	r2, r9, r2, r3
   b5d0e:	f10a 0014 	add.w	r0, sl, #20
   b5d12:	f7ff fed7 	bl	b5ac4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5d16:	f1ba 0f00 	cmp.w	sl, #0
   b5d1a:	d003      	beq.n	b5d24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5d1c:	a90f      	add	r1, sp, #60	; 0x3c
   b5d1e:	4650      	mov	r0, sl
   b5d20:	f7ff fb12 	bl	b5348 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5d24:	686b      	ldr	r3, [r5, #4]
   b5d26:	3301      	adds	r3, #1
   b5d28:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5d2a:	a811      	add	r0, sp, #68	; 0x44
   b5d2c:	f7ff fcca 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d30:	b13f      	cbz	r7, b5d42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5d32:	a80b      	add	r0, sp, #44	; 0x2c
   b5d34:	f7ff fcc6 	bl	b56c4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5d38:	e771      	b.n	b5c1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5d3a:	46bb      	mov	fp, r7
   b5d3c:	e7d8      	b.n	b5cf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5d3e:	2701      	movs	r7, #1
   b5d40:	e7f3      	b.n	b5d2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5d42:	9b01      	ldr	r3, [sp, #4]
   b5d44:	682d      	ldr	r5, [r5, #0]
   b5d46:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5d4a:	9b06      	ldr	r3, [sp, #24]
   b5d4c:	781b      	ldrb	r3, [r3, #0]
   b5d4e:	b92b      	cbnz	r3, b5d5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5d50:	f8d8 3000 	ldr.w	r3, [r8]
   b5d54:	9a02      	ldr	r2, [sp, #8]
   b5d56:	4413      	add	r3, r2
   b5d58:	7c1b      	ldrb	r3, [r3, #16]
   b5d5a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5d5c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5d5e:	e78e      	b.n	b5c7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d60:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5d62:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d64:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5d66:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d68:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d6a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5d6e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d70:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5d72:	60a2      	str	r2, [r4, #8]
   b5d74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5d76:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d78:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5d7a:	60e2      	str	r2, [r4, #12]
   b5d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5d7e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d80:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5d82:	6122      	str	r2, [r4, #16]
   b5d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5d86:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5d88:	9b03      	ldr	r3, [sp, #12]
   b5d8a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5d8c:	6162      	str	r2, [r4, #20]
   b5d8e:	7623      	strb	r3, [r4, #24]
   b5d90:	e7cf      	b.n	b5d32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5d94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5d94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d96:	4604      	mov	r4, r0
   b5d98:	b087      	sub	sp, #28
   b5d9a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5d9c:	4626      	mov	r6, r4
        stream_(&stream) {
   b5d9e:	4619      	mov	r1, r3
   b5da0:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5da2:	4617      	mov	r7, r2
        stream_(&stream) {
   b5da4:	f7fe fa97 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5da8:	4b0b      	ldr	r3, [pc, #44]	; (b5dd8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5daa:	f846 3b04 	str.w	r3, [r6], #4
   b5dae:	4669      	mov	r1, sp
   b5db0:	a803      	add	r0, sp, #12
   b5db2:	f7fe fa90 	bl	b42d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5db6:	aa03      	add	r2, sp, #12
   b5db8:	4639      	mov	r1, r7
   b5dba:	4630      	mov	r0, r6
   b5dbc:	f7ff fef0 	bl	b5ba0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5dc0:	a803      	add	r0, sp, #12
   b5dc2:	f7fe fa47 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5dc6:	4668      	mov	r0, sp
   b5dc8:	f7fe fa44 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5dcc:	4b03      	ldr	r3, [pc, #12]	; (b5ddc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5dce:	6023      	str	r3, [r4, #0]
}
   b5dd0:	4620      	mov	r0, r4
        stream_(&stream) {
   b5dd2:	6225      	str	r5, [r4, #32]
}
   b5dd4:	b007      	add	sp, #28
   b5dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5dd8:	000b8070 	.word	0x000b8070
   b5ddc:	000b822c 	.word	0x000b822c

000b5de0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5de2:	460f      	mov	r7, r1
   b5de4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5de6:	491d      	ldr	r1, [pc, #116]	; (b5e5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5de8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5dea:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5dec:	4616      	mov	r6, r2
   b5dee:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5df0:	f7fe f914 	bl	b401c <strcmp>
   b5df4:	b9c0      	cbnz	r0, b5e28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5df6:	b1a4      	cbz	r4, b5e22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5df8:	4629      	mov	r1, r5
   b5dfa:	a801      	add	r0, sp, #4
   b5dfc:	f7ff fcbc 	bl	b5778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5e00:	4917      	ldr	r1, [pc, #92]	; (b5e60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5e02:	2024      	movs	r0, #36	; 0x24
   b5e04:	f001 fe3e 	bl	b7a84 <_ZnwjRKSt9nothrow_t>
   b5e08:	4605      	mov	r5, r0
   b5e0a:	b130      	cbz	r0, b5e1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5e0c:	ab01      	add	r3, sp, #4
   b5e0e:	4632      	mov	r2, r6
   b5e10:	4621      	mov	r1, r4
   b5e12:	f7ff ffbf 	bl	b5d94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e16:	4b13      	ldr	r3, [pc, #76]	; (b5e64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5e18:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e1a:	a801      	add	r0, sp, #4
   b5e1c:	f7fe fa1a 	bl	b4254 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5e20:	462c      	mov	r4, r5
}
   b5e22:	4620      	mov	r0, r4
   b5e24:	b005      	add	sp, #20
   b5e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5e28:	490f      	ldr	r1, [pc, #60]	; (b5e68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5e2a:	4638      	mov	r0, r7
   b5e2c:	f7fe f8f6 	bl	b401c <strcmp>
   b5e30:	b990      	cbnz	r0, b5e58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5e32:	2c00      	cmp	r4, #0
   b5e34:	d0f5      	beq.n	b5e22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5e36:	4629      	mov	r1, r5
   b5e38:	a801      	add	r0, sp, #4
   b5e3a:	f7ff fc9d 	bl	b5778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5e3e:	4908      	ldr	r1, [pc, #32]	; (b5e60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5e40:	2024      	movs	r0, #36	; 0x24
   b5e42:	f001 fe1f 	bl	b7a84 <_ZnwjRKSt9nothrow_t>
   b5e46:	4605      	mov	r5, r0
   b5e48:	2800      	cmp	r0, #0
   b5e4a:	d0e6      	beq.n	b5e1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5e4c:	ab01      	add	r3, sp, #4
   b5e4e:	4632      	mov	r2, r6
   b5e50:	4621      	mov	r1, r4
   b5e52:	f7ff ff9f 	bl	b5d94 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5e56:	e7e0      	b.n	b5e1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5e58:	2400      	movs	r4, #0
   b5e5a:	e7e2      	b.n	b5e22 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5e5c:	000b81ac 	.word	0x000b81ac
   b5e60:	000b83e4 	.word	0x000b83e4
   b5e64:	000b8244 	.word	0x000b8244
   b5e68:	000b81b0 	.word	0x000b81b0

000b5e6c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5e6c:	4b01      	ldr	r3, [pc, #4]	; (b5e74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5e6e:	4a02      	ldr	r2, [pc, #8]	; (b5e78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5e70:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5e72:	4770      	bx	lr
   b5e74:	2003e6f0 	.word	0x2003e6f0
   b5e78:	000b81c1 	.word	0x000b81c1

000b5e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5e80:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5e82:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5e86:	4604      	mov	r4, r0
   b5e88:	460e      	mov	r6, r1
   b5e8a:	4617      	mov	r7, r2
   b5e8c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5e8e:	f7ff f87d 	bl	b4f8c <_Z16_fetch_usbserialv>
   b5e92:	4581      	cmp	r9, r0
   b5e94:	d04c      	beq.n	b5f30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5e96:	792b      	ldrb	r3, [r5, #4]
   b5e98:	0719      	lsls	r1, r3, #28
   b5e9a:	d504      	bpl.n	b5ea6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5e9c:	696a      	ldr	r2, [r5, #20]
   b5e9e:	4954      	ldr	r1, [pc, #336]	; (b5ff0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5ea0:	4620      	mov	r0, r4
   b5ea2:	f7ff faca 	bl	b543a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5ea6:	f1b8 0f00 	cmp.w	r8, #0
   b5eaa:	d00d      	beq.n	b5ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5eac:	215b      	movs	r1, #91	; 0x5b
   b5eae:	4620      	mov	r0, r4
   b5eb0:	f7ff fa3e 	bl	b5330 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5eb4:	4641      	mov	r1, r8
   b5eb6:	4620      	mov	r0, r4
   b5eb8:	f7ff fa2b 	bl	b5312 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5ebc:	6823      	ldr	r3, [r4, #0]
   b5ebe:	494d      	ldr	r1, [pc, #308]	; (b5ff4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5ec0:	68db      	ldr	r3, [r3, #12]
   b5ec2:	2202      	movs	r2, #2
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	4798      	blx	r3
    if (attr.has_file) {
   b5ec8:	792b      	ldrb	r3, [r5, #4]
   b5eca:	07da      	lsls	r2, r3, #31
   b5ecc:	d523      	bpl.n	b5f16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5ece:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5ed2:	212f      	movs	r1, #47	; 0x2f
   b5ed4:	4640      	mov	r0, r8
   b5ed6:	f001 ff9e 	bl	b7e16 <strrchr>
    if (s1) {
   b5eda:	b108      	cbz	r0, b5ee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5edc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5ee0:	4641      	mov	r1, r8
   b5ee2:	4620      	mov	r0, r4
   b5ee4:	f7ff fa15 	bl	b5312 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5ee8:	792b      	ldrb	r3, [r5, #4]
   b5eea:	079b      	lsls	r3, r3, #30
   b5eec:	d508      	bpl.n	b5f00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5eee:	213a      	movs	r1, #58	; 0x3a
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	f7ff fa1d 	bl	b5330 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5ef6:	68ea      	ldr	r2, [r5, #12]
   b5ef8:	493f      	ldr	r1, [pc, #252]	; (b5ff8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5efa:	4620      	mov	r0, r4
   b5efc:	f7ff fa9d 	bl	b543a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5f00:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5f02:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5f04:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5f08:	68db      	ldr	r3, [r3, #12]
   b5f0a:	bf14      	ite	ne
   b5f0c:	493b      	ldrne	r1, [pc, #236]	; (b5ffc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5f0e:	493c      	ldreq	r1, [pc, #240]	; (b6000 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5f10:	2202      	movs	r2, #2
            write(": ", 2);
   b5f12:	4620      	mov	r0, r4
   b5f14:	4798      	blx	r3
    if (attr.has_function) {
   b5f16:	792b      	ldrb	r3, [r5, #4]
   b5f18:	0758      	lsls	r0, r3, #29
   b5f1a:	d51d      	bpl.n	b5f58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5f1c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5f1e:	460b      	mov	r3, r1
   b5f20:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5f22:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f26:	b160      	cbz	r0, b5f42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5f28:	2820      	cmp	r0, #32
   b5f2a:	d108      	bne.n	b5f3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5f2c:	4619      	mov	r1, r3
   b5f2e:	e7f7      	b.n	b5f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5f30:	4834      	ldr	r0, [pc, #208]	; (b6004 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5f32:	f7fe fce0 	bl	b48f6 <_ZN5spark12NetworkClass9listeningEv>
   b5f36:	2800      	cmp	r0, #0
   b5f38:	d0ad      	beq.n	b5e96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5f3e:	2828      	cmp	r0, #40	; 0x28
   b5f40:	d1ee      	bne.n	b5f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5f42:	6823      	ldr	r3, [r4, #0]
   b5f44:	1a52      	subs	r2, r2, r1
   b5f46:	68db      	ldr	r3, [r3, #12]
   b5f48:	4620      	mov	r0, r4
   b5f4a:	4798      	blx	r3
        write("(): ", 4);
   b5f4c:	6823      	ldr	r3, [r4, #0]
   b5f4e:	492e      	ldr	r1, [pc, #184]	; (b6008 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5f50:	68db      	ldr	r3, [r3, #12]
   b5f52:	2204      	movs	r2, #4
   b5f54:	4620      	mov	r0, r4
   b5f56:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5f58:	2100      	movs	r1, #0
   b5f5a:	4638      	mov	r0, r7
   b5f5c:	f7fe fb86 	bl	b466c <log_level_name>
   b5f60:	4601      	mov	r1, r0
    write(s);
   b5f62:	4620      	mov	r0, r4
   b5f64:	f7ff f9d5 	bl	b5312 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5f68:	6823      	ldr	r3, [r4, #0]
   b5f6a:	4925      	ldr	r1, [pc, #148]	; (b6000 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5f6c:	68db      	ldr	r3, [r3, #12]
   b5f6e:	2202      	movs	r2, #2
   b5f70:	4620      	mov	r0, r4
   b5f72:	4798      	blx	r3
    if (msg) {
   b5f74:	b11e      	cbz	r6, b5f7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5f76:	4631      	mov	r1, r6
   b5f78:	4620      	mov	r0, r4
   b5f7a:	f7ff f9ca 	bl	b5312 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5f7e:	792b      	ldrb	r3, [r5, #4]
   b5f80:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5f84:	d02c      	beq.n	b5fe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5f86:	6823      	ldr	r3, [r4, #0]
   b5f88:	4920      	ldr	r1, [pc, #128]	; (b600c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5f8a:	68db      	ldr	r3, [r3, #12]
   b5f8c:	2202      	movs	r2, #2
   b5f8e:	4620      	mov	r0, r4
   b5f90:	4798      	blx	r3
        if (attr.has_code) {
   b5f92:	792b      	ldrb	r3, [r5, #4]
   b5f94:	06d9      	lsls	r1, r3, #27
   b5f96:	d50a      	bpl.n	b5fae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5f98:	6823      	ldr	r3, [r4, #0]
   b5f9a:	491d      	ldr	r1, [pc, #116]	; (b6010 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5f9c:	68db      	ldr	r3, [r3, #12]
   b5f9e:	2207      	movs	r2, #7
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5fa4:	69aa      	ldr	r2, [r5, #24]
   b5fa6:	491b      	ldr	r1, [pc, #108]	; (b6014 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5fa8:	4620      	mov	r0, r4
   b5faa:	f7ff fa46 	bl	b543a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5fae:	792b      	ldrb	r3, [r5, #4]
   b5fb0:	069a      	lsls	r2, r3, #26
   b5fb2:	d511      	bpl.n	b5fd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5fb4:	06db      	lsls	r3, r3, #27
   b5fb6:	d505      	bpl.n	b5fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5fb8:	6823      	ldr	r3, [r4, #0]
   b5fba:	4910      	ldr	r1, [pc, #64]	; (b5ffc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5fbc:	68db      	ldr	r3, [r3, #12]
   b5fbe:	2202      	movs	r2, #2
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	4798      	blx	r3
            write("details = ", 10);
   b5fc4:	6823      	ldr	r3, [r4, #0]
   b5fc6:	4914      	ldr	r1, [pc, #80]	; (b6018 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5fc8:	68db      	ldr	r3, [r3, #12]
   b5fca:	4620      	mov	r0, r4
   b5fcc:	220a      	movs	r2, #10
   b5fce:	4798      	blx	r3
            write(attr.details);
   b5fd0:	69e9      	ldr	r1, [r5, #28]
   b5fd2:	4620      	mov	r0, r4
   b5fd4:	f7ff f99d 	bl	b5312 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5fd8:	215d      	movs	r1, #93	; 0x5d
   b5fda:	4620      	mov	r0, r4
   b5fdc:	f7ff f9a8 	bl	b5330 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5fe0:	6823      	ldr	r3, [r4, #0]
   b5fe2:	490e      	ldr	r1, [pc, #56]	; (b601c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5fe4:	68db      	ldr	r3, [r3, #12]
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	2202      	movs	r2, #2
}
   b5fea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5fee:	4718      	bx	r3
   b5ff0:	000b81c5 	.word	0x000b81c5
   b5ff4:	000b81cc 	.word	0x000b81cc
   b5ff8:	000b812c 	.word	0x000b812c
   b5ffc:	000b81cf 	.word	0x000b81cf
   b6000:	000b81d4 	.word	0x000b81d4
   b6004:	2003e6a0 	.word	0x2003e6a0
   b6008:	000b81d2 	.word	0x000b81d2
   b600c:	000b81d7 	.word	0x000b81d7
   b6010:	000b81da 	.word	0x000b81da
   b6014:	000b81e2 	.word	0x000b81e2
   b6018:	000b81e5 	.word	0x000b81e5
   b601c:	000b81f0 	.word	0x000b81f0

000b6020 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6024:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b6026:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b6028:	460d      	mov	r5, r1
   b602a:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b602c:	f7fe ffae 	bl	b4f8c <_Z16_fetch_usbserialv>
   b6030:	4287      	cmp	r7, r0
   b6032:	d007      	beq.n	b6044 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b6034:	6a20      	ldr	r0, [r4, #32]
   b6036:	6803      	ldr	r3, [r0, #0]
   b6038:	4632      	mov	r2, r6
   b603a:	4629      	mov	r1, r5
   b603c:	68db      	ldr	r3, [r3, #12]
}
   b603e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b6042:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b6044:	4803      	ldr	r0, [pc, #12]	; (b6054 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b6046:	f7fe fc56 	bl	b48f6 <_ZN5spark12NetworkClass9listeningEv>
   b604a:	2800      	cmp	r0, #0
   b604c:	d0f2      	beq.n	b6034 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6052:	bf00      	nop
   b6054:	2003e6a0 	.word	0x2003e6a0

000b6058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b6058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b605c:	b085      	sub	sp, #20
    return stream_;
   b605e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6062:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6064:	4605      	mov	r5, r0
   b6066:	460f      	mov	r7, r1
   b6068:	4690      	mov	r8, r2
   b606a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b606c:	f7fe ff8e 	bl	b4f8c <_Z16_fetch_usbserialv>
   b6070:	4581      	cmp	r9, r0
   b6072:	d105      	bne.n	b6080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6074:	4849      	ldr	r0, [pc, #292]	; (b619c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6076:	f7fe fc3e 	bl	b48f6 <_ZN5spark12NetworkClass9listeningEv>
   b607a:	2800      	cmp	r0, #0
   b607c:	f040 808a 	bne.w	b6194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b6080:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b6082:	4a47      	ldr	r2, [pc, #284]	; (b61a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6084:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b6086:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b608a:	a801      	add	r0, sp, #4
        strm_(stream) {
   b608c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b608e:	f88d 9008 	strb.w	r9, [sp, #8]
   b6092:	f7fe fe6a 	bl	b4d6a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6096:	4649      	mov	r1, r9
   b6098:	4640      	mov	r0, r8
   b609a:	f7fe fae7 	bl	b466c <log_level_name>
    json.name("l", 1).value(s);
   b609e:	4941      	ldr	r1, [pc, #260]	; (b61a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b60a0:	4680      	mov	r8, r0
   b60a2:	2201      	movs	r2, #1
   b60a4:	a801      	add	r0, sp, #4
   b60a6:	f7fe feef 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b60aa:	4641      	mov	r1, r8
   b60ac:	f7ff f923 	bl	b52f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b60b0:	b13f      	cbz	r7, b60c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b60b2:	493d      	ldr	r1, [pc, #244]	; (b61a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b60b4:	2201      	movs	r2, #1
   b60b6:	a801      	add	r0, sp, #4
   b60b8:	f7fe fee6 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b60bc:	4639      	mov	r1, r7
   b60be:	f7ff f91a 	bl	b52f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b60c2:	b13e      	cbz	r6, b60d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b60c4:	4939      	ldr	r1, [pc, #228]	; (b61ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b60c6:	2201      	movs	r2, #1
   b60c8:	a801      	add	r0, sp, #4
   b60ca:	f7fe fedd 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b60ce:	4631      	mov	r1, r6
   b60d0:	f7ff f911 	bl	b52f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b60d4:	7923      	ldrb	r3, [r4, #4]
   b60d6:	07df      	lsls	r7, r3, #31
   b60d8:	d50e      	bpl.n	b60f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b60da:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b60dc:	212f      	movs	r1, #47	; 0x2f
   b60de:	4630      	mov	r0, r6
   b60e0:	f001 fe99 	bl	b7e16 <strrchr>
    if (s1) {
   b60e4:	b100      	cbz	r0, b60e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b60e6:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b60e8:	4931      	ldr	r1, [pc, #196]	; (b61b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b60ea:	2201      	movs	r2, #1
   b60ec:	a801      	add	r0, sp, #4
   b60ee:	f7fe fecb 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b60f2:	4631      	mov	r1, r6
   b60f4:	f7ff f8ff 	bl	b52f6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b60f8:	7923      	ldrb	r3, [r4, #4]
   b60fa:	079e      	lsls	r6, r3, #30
   b60fc:	d507      	bpl.n	b610e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b60fe:	492d      	ldr	r1, [pc, #180]	; (b61b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b6100:	2202      	movs	r2, #2
   b6102:	a801      	add	r0, sp, #4
   b6104:	f7fe fec0 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b6108:	68e1      	ldr	r1, [r4, #12]
   b610a:	f7fe fe3b 	bl	b4d84 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b610e:	7923      	ldrb	r3, [r4, #4]
   b6110:	0758      	lsls	r0, r3, #29
   b6112:	d514      	bpl.n	b613e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b6114:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b6116:	4633      	mov	r3, r6
   b6118:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b611a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b611e:	b12a      	cbz	r2, b612c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b6120:	2a20      	cmp	r2, #32
   b6122:	d101      	bne.n	b6128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b6124:	461e      	mov	r6, r3
   b6126:	e7f7      	b.n	b6118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b6128:	2a28      	cmp	r2, #40	; 0x28
   b612a:	d1f5      	bne.n	b6118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b612c:	4922      	ldr	r1, [pc, #136]	; (b61b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b612e:	2202      	movs	r2, #2
   b6130:	a801      	add	r0, sp, #4
   b6132:	f7fe fea9 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b6136:	1bba      	subs	r2, r7, r6
   b6138:	4631      	mov	r1, r6
   b613a:	f7fe feb5 	bl	b4ea8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b613e:	7923      	ldrb	r3, [r4, #4]
   b6140:	0719      	lsls	r1, r3, #28
   b6142:	d507      	bpl.n	b6154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b6144:	491d      	ldr	r1, [pc, #116]	; (b61bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b6146:	2201      	movs	r2, #1
   b6148:	a801      	add	r0, sp, #4
   b614a:	f7fe fe9d 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b614e:	6961      	ldr	r1, [r4, #20]
   b6150:	f7fe fe2a 	bl	b4da8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b6154:	7923      	ldrb	r3, [r4, #4]
   b6156:	06da      	lsls	r2, r3, #27
   b6158:	d508      	bpl.n	b616c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b615a:	2204      	movs	r2, #4
   b615c:	4918      	ldr	r1, [pc, #96]	; (b61c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b615e:	eb0d 0002 	add.w	r0, sp, r2
   b6162:	f7fe fe91 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b6166:	69a1      	ldr	r1, [r4, #24]
   b6168:	f7fe fe0c 	bl	b4d84 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b616c:	7923      	ldrb	r3, [r4, #4]
   b616e:	069b      	lsls	r3, r3, #26
   b6170:	d507      	bpl.n	b6182 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b6172:	4914      	ldr	r1, [pc, #80]	; (b61c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6174:	2206      	movs	r2, #6
   b6176:	a801      	add	r0, sp, #4
   b6178:	f7fe fe86 	bl	b4e88 <_ZN5spark10JSONWriter4nameEPKcj>
   b617c:	69e1      	ldr	r1, [r4, #28]
   b617e:	f7ff f8ba 	bl	b52f6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b6182:	a801      	add	r0, sp, #4
   b6184:	f7fe fddb 	bl	b4d3e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6188:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b618a:	490f      	ldr	r1, [pc, #60]	; (b61c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b618c:	6803      	ldr	r3, [r0, #0]
   b618e:	2202      	movs	r2, #2
   b6190:	68db      	ldr	r3, [r3, #12]
   b6192:	4798      	blx	r3
}
   b6194:	b005      	add	sp, #20
   b6196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b619a:	bf00      	nop
   b619c:	2003e6a0 	.word	0x2003e6a0
   b61a0:	000b8214 	.word	0x000b8214
   b61a4:	000b81a2 	.word	0x000b81a2
   b61a8:	000b81f3 	.word	0x000b81f3
   b61ac:	000b856b 	.word	0x000b856b
   b61b0:	000b81f5 	.word	0x000b81f5
   b61b4:	000b81f7 	.word	0x000b81f7
   b61b8:	000b81fa 	.word	0x000b81fa
   b61bc:	000b81fd 	.word	0x000b81fd
   b61c0:	000b81ff 	.word	0x000b81ff
   b61c4:	000b8204 	.word	0x000b8204
   b61c8:	000b81f0 	.word	0x000b81f0

000b61cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b61cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61ce:	4606      	mov	r6, r0
   b61d0:	460d      	mov	r5, r1
  size_t n = 0;
   b61d2:	188f      	adds	r7, r1, r2
   b61d4:	2400      	movs	r4, #0
  while (size--) {
   b61d6:	42bd      	cmp	r5, r7
   b61d8:	d00c      	beq.n	b61f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b61da:	6833      	ldr	r3, [r6, #0]
   b61dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61e0:	689b      	ldr	r3, [r3, #8]
   b61e2:	4630      	mov	r0, r6
   b61e4:	4798      	blx	r3
     if (chunk>=0)
   b61e6:	1e03      	subs	r3, r0, #0
   b61e8:	db01      	blt.n	b61ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b61ea:	441c      	add	r4, r3
  while (size--) {
   b61ec:	e7f3      	b.n	b61d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b61ee:	2c00      	cmp	r4, #0
   b61f0:	bf08      	it	eq
   b61f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b61f4:	4620      	mov	r0, r4
   b61f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61f8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b61f8:	b513      	push	{r0, r1, r4, lr}
   b61fa:	4604      	mov	r4, r0
    }
   b61fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b61fe:	b159      	cbz	r1, b6218 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6200:	9101      	str	r1, [sp, #4]
   b6202:	f7fd ff15 	bl	b4030 <strlen>
   b6206:	6823      	ldr	r3, [r4, #0]
   b6208:	9901      	ldr	r1, [sp, #4]
   b620a:	68db      	ldr	r3, [r3, #12]
   b620c:	4602      	mov	r2, r0
   b620e:	4620      	mov	r0, r4
    }
   b6210:	b002      	add	sp, #8
   b6212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6216:	4718      	bx	r3
    }
   b6218:	b002      	add	sp, #8
   b621a:	bd10      	pop	{r4, pc}

000b621c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b621c:	6803      	ldr	r3, [r0, #0]
   b621e:	689b      	ldr	r3, [r3, #8]
   b6220:	4718      	bx	r3

000b6222 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6222:	b530      	push	{r4, r5, lr}
   b6224:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6226:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6228:	2a01      	cmp	r2, #1
  *str = '\0';
   b622a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b622e:	bf98      	it	ls
   b6230:	220a      	movls	r2, #10
   b6232:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6234:	460d      	mov	r5, r1
   b6236:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b623a:	fb01 5312 	mls	r3, r1, r2, r5
   b623e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6242:	2b09      	cmp	r3, #9
   b6244:	bf94      	ite	ls
   b6246:	3330      	addls	r3, #48	; 0x30
   b6248:	3337      	addhi	r3, #55	; 0x37
   b624a:	b2db      	uxtb	r3, r3
  } while(n);
   b624c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b624e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6252:	d9ef      	bls.n	b6234 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6254:	4621      	mov	r1, r4
   b6256:	f7ff ffcf 	bl	b61f8 <_ZN5Print5writeEPKc>
}
   b625a:	b00b      	add	sp, #44	; 0x2c
   b625c:	bd30      	pop	{r4, r5, pc}

000b625e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b625e:	4770      	bx	lr

000b6260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6260:	4b06      	ldr	r3, [pc, #24]	; (b627c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6262:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6264:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6266:	f100 040c 	add.w	r4, r0, #12
	    ||
   b626a:	d005      	beq.n	b6278 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b626c:	4608      	mov	r0, r1
   b626e:	f001 fc11 	bl	b7a94 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6272:	2800      	cmp	r0, #0
   b6274:	bf08      	it	eq
   b6276:	2400      	moveq	r4, #0
      }
   b6278:	4620      	mov	r0, r4
   b627a:	bd10      	pop	{r4, pc}
   b627c:	000b8124 	.word	0x000b8124

000b6280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6280:	b510      	push	{r4, lr}
   b6282:	2130      	movs	r1, #48	; 0x30
   b6284:	4604      	mov	r4, r0
   b6286:	f7fd ff1a 	bl	b40be <_ZdlPvj>
   b628a:	4620      	mov	r0, r4
   b628c:	bd10      	pop	{r4, pc}

000b628e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b628e:	2130      	movs	r1, #48	; 0x30
   b6290:	f7fd bf15 	b.w	b40be <_ZdlPvj>

000b6294 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b6294:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b6296:	2500      	movs	r5, #0
   b6298:	1cec      	adds	r4, r5, #3
   b629a:	428c      	cmp	r4, r1
   b629c:	d80d      	bhi.n	b62ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b629e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b62a0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b62a2:	5d87      	ldrb	r7, [r0, r6]
   b62a4:	4297      	cmp	r7, r2
   b62a6:	d105      	bne.n	b62b4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b62a8:	4426      	add	r6, r4
   b62aa:	42b1      	cmp	r1, r6
   b62ac:	d305      	bcc.n	b62ba <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b62ae:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b62b0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b62b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b62b4:	3401      	adds	r4, #1
   b62b6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b62b8:	e7ee      	b.n	b6298 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b62ba:	2000      	movs	r0, #0
   b62bc:	e7f9      	b.n	b62b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b62be <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b62be:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b62c0:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b62c2:	4604      	mov	r4, r0
	if (_M_manager)
   b62c4:	b12b      	cbz	r3, b62d2 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b62c6:	2203      	movs	r2, #3
   b62c8:	4601      	mov	r1, r0
   b62ca:	4798      	blx	r3
	    _M_manager = nullptr;
   b62cc:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b62ce:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b62d2:	bd10      	pop	{r4, pc}

000b62d4 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b62d4:	b510      	push	{r4, lr}
	if (_M_manager)
   b62d6:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b62d8:	4604      	mov	r4, r0
	if (_M_manager)
   b62da:	b12b      	cbz	r3, b62e8 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b62dc:	2203      	movs	r2, #3
   b62de:	4601      	mov	r1, r0
   b62e0:	4798      	blx	r3
	    _M_manager = nullptr;
   b62e2:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b62e4:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b62e8:	bd10      	pop	{r4, pc}
	...

000b62ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b62ec:	b510      	push	{r4, lr}
            locked_(false) {
   b62ee:	2300      	movs	r3, #0
   b62f0:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
   b62f2:	4b04      	ldr	r3, [pc, #16]	; (b6304 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b62f4:	4604      	mov	r4, r0
   b62f6:	6818      	ldr	r0, [r3, #0]
   b62f8:	f7fe f92a 	bl	b4550 <os_mutex_recursive_lock>
        locked_ = true;
   b62fc:	2301      	movs	r3, #1
   b62fe:	7023      	strb	r3, [r4, #0]
    }
   b6300:	4620      	mov	r0, r4
   b6302:	bd10      	pop	{r4, pc}
   b6304:	2003e720 	.word	0x2003e720

000b6308 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b6308:	b510      	push	{r4, lr}
        if (locked_) {
   b630a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b630c:	4604      	mov	r4, r0
        if (locked_) {
   b630e:	b11b      	cbz	r3, b6318 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6310:	4b02      	ldr	r3, [pc, #8]	; (b631c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6312:	6818      	ldr	r0, [r3, #0]
   b6314:	f7fe f924 	bl	b4560 <os_mutex_recursive_unlock>
    }
   b6318:	4620      	mov	r0, r4
   b631a:	bd10      	pop	{r4, pc}
   b631c:	2003e720 	.word	0x2003e720

000b6320 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b6320:	b082      	sub	sp, #8
   b6322:	4603      	mov	r3, r0
    address_ = addr;
   b6324:	6808      	ldr	r0, [r1, #0]
   b6326:	6849      	ldr	r1, [r1, #4]
   b6328:	466a      	mov	r2, sp
   b632a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b632c:	466a      	mov	r2, sp
   b632e:	ca03      	ldmia	r2!, {r0, r1}
   b6330:	6018      	str	r0, [r3, #0]
}
   b6332:	4618      	mov	r0, r3
    address_ = addr.address_;
   b6334:	6059      	str	r1, [r3, #4]
}
   b6336:	b002      	add	sp, #8
   b6338:	4770      	bx	lr

000b633a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b633a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b633c:	7982      	ldrb	r2, [r0, #6]
   b633e:	798b      	ldrb	r3, [r1, #6]
   b6340:	429a      	cmp	r2, r3
   b6342:	d106      	bne.n	b6352 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b6344:	2206      	movs	r2, #6
   b6346:	f001 fcc5 	bl	b7cd4 <memcmp>
   b634a:	fab0 f080 	clz	r0, r0
   b634e:	0940      	lsrs	r0, r0, #5
}
   b6350:	bd08      	pop	{r3, pc}
    return false;
   b6352:	2000      	movs	r0, #0
   b6354:	e7fc      	b.n	b6350 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b6356 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b6356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b635a:	6003      	str	r3, [r0, #0]
   b635c:	8083      	strh	r3, [r0, #4]
}
   b635e:	2000      	movs	r0, #0
   b6360:	4770      	bx	lr

000b6362 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b6362:	b508      	push	{r3, lr}
   b6364:	4602      	mov	r2, r0
        : address_{} {
   b6366:	2100      	movs	r1, #0
   b6368:	6001      	str	r1, [r0, #0]
   b636a:	6041      	str	r1, [r0, #4]
    clear();
   b636c:	f7ff fff3 	bl	b6356 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b6370:	7191      	strb	r1, [r2, #6]
}
   b6372:	4610      	mov	r0, r2
   b6374:	bd08      	pop	{r3, pc}
	...

000b6378 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b6378:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b637a:	2301      	movs	r3, #1
   b637c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b637e:	4b05      	ldr	r3, [pc, #20]	; (b6394 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6380:	4602      	mov	r2, r0
   b6382:	f103 0110 	add.w	r1, r3, #16
   b6386:	f853 4b04 	ldr.w	r4, [r3], #4
   b638a:	f842 4b04 	str.w	r4, [r2], #4
   b638e:	428b      	cmp	r3, r1
   b6390:	d1f9      	bne.n	b6386 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6392:	bd10      	pop	{r4, pc}
   b6394:	000b802a 	.word	0x000b802a

000b6398 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6398:	b510      	push	{r4, lr}
    if (uuid128) {
   b639a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b639c:	4604      	mov	r4, r0
    if (uuid128) {
   b639e:	b1b1      	cbz	r1, b63ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b63a0:	2a01      	cmp	r2, #1
   b63a2:	f101 0210 	add.w	r2, r1, #16
   b63a6:	d10a      	bne.n	b63be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b63a8:	4601      	mov	r1, r0
   b63aa:	f853 0b04 	ldr.w	r0, [r3], #4
   b63ae:	f841 0b04 	str.w	r0, [r1], #4
   b63b2:	4293      	cmp	r3, r2
   b63b4:	d1f9      	bne.n	b63aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b63b6:	2301      	movs	r3, #1
   b63b8:	6123      	str	r3, [r4, #16]
}
   b63ba:	4620      	mov	r0, r4
   b63bc:	bd10      	pop	{r4, pc}
   b63be:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b63c0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b63c4:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b63c8:	429a      	cmp	r2, r3
   b63ca:	d1f9      	bne.n	b63c0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b63cc:	e7f3      	b.n	b63b6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b63ce:	2210      	movs	r2, #16
   b63d0:	f001 fcb8 	bl	b7d44 <memset>
   b63d4:	e7f1      	b.n	b63ba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b63d6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b63d6:	b538      	push	{r3, r4, r5, lr}
   b63d8:	4604      	mov	r4, r0
   b63da:	460d      	mov	r5, r1
        : BleUuid() {
   b63dc:	f7ff ffcc 	bl	b6378 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b63e0:	2300      	movs	r3, #0
   b63e2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b63e4:	81a5      	strh	r5, [r4, #12]
}
   b63e6:	4620      	mov	r0, r4
   b63e8:	bd38      	pop	{r3, r4, r5, pc}

000b63ea <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b63ea:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b63ec:	6902      	ldr	r2, [r0, #16]
   b63ee:	690b      	ldr	r3, [r1, #16]
   b63f0:	429a      	cmp	r2, r3
   b63f2:	d106      	bne.n	b6402 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b63f4:	2210      	movs	r2, #16
   b63f6:	f001 fc6d 	bl	b7cd4 <memcmp>
   b63fa:	fab0 f080 	clz	r0, r0
   b63fe:	0940      	lsrs	r0, r0, #5
}
   b6400:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b6402:	2000      	movs	r0, #0
   b6404:	e7fc      	b.n	b6400 <_ZNK8particle7BleUuideqERKS0_+0x16>

000b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b6406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6408:	4605      	mov	r5, r0
   b640a:	4616      	mov	r6, r2
   b640c:	461f      	mov	r7, r3
   b640e:	460a      	mov	r2, r1
   b6410:	ab01      	add	r3, sp, #4
   b6412:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6416:	f7ff ff3d 	bl	b6294 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b641a:	f030 0402 	bics.w	r4, r0, #2
   b641e:	d00c      	beq.n	b643a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b6420:	1e84      	subs	r4, r0, #2
   b6422:	42bc      	cmp	r4, r7
   b6424:	bf28      	it	cs
   b6426:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b6428:	b13e      	cbz	r6, b643a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b642a:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b642c:	682b      	ldr	r3, [r5, #0]
   b642e:	3102      	adds	r1, #2
   b6430:	4622      	mov	r2, r4
   b6432:	4419      	add	r1, r3
   b6434:	4630      	mov	r0, r6
   b6436:	f001 fc5d 	bl	b7cf4 <memcpy>
}
   b643a:	4620      	mov	r0, r4
   b643c:	b003      	add	sp, #12
   b643e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6440 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6442:	4613      	mov	r3, r2
   b6444:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6446:	9201      	str	r2, [sp, #4]
   b6448:	460a      	mov	r2, r1
   b644a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b644c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b644e:	f7ff ffda 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6452:	b940      	cbnz	r0, b6466 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6454:	9b01      	ldr	r3, [sp, #4]
   b6456:	4622      	mov	r2, r4
   b6458:	2109      	movs	r1, #9
   b645a:	4628      	mov	r0, r5
}
   b645c:	b003      	add	sp, #12
   b645e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6462:	f7ff bfd0 	b.w	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b6466:	b003      	add	sp, #12
   b6468:	bd30      	pop	{r4, r5, pc}
	...

000b646c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b646c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b646e:	460c      	mov	r4, r1
   b6470:	b089      	sub	sp, #36	; 0x24
    String name;
   b6472:	490c      	ldr	r1, [pc, #48]	; (b64a4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6474:	4605      	mov	r5, r0
    String name;
   b6476:	f001 fa2a 	bl	b78ce <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b647a:	221f      	movs	r2, #31
   b647c:	4669      	mov	r1, sp
   b647e:	4620      	mov	r0, r4
   b6480:	f7ff ffde 	bl	b6440 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6484:	4606      	mov	r6, r0
   b6486:	b150      	cbz	r0, b649e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b6488:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b648a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b648c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6490:	4628      	mov	r0, r5
   b6492:	f001 fa89 	bl	b79a8 <_ZN6String6concatEc>
   b6496:	b110      	cbz	r0, b649e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b6498:	3701      	adds	r7, #1
   b649a:	42be      	cmp	r6, r7
   b649c:	d1f6      	bne.n	b648c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b649e:	4628      	mov	r0, r5
   b64a0:	b009      	add	sp, #36	; 0x24
   b64a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b64a4:	000b81f2 	.word	0x000b81f2

000b64a8 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b64a8:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b64aa:	2302      	movs	r3, #2
   b64ac:	aa01      	add	r2, sp, #4
   b64ae:	2119      	movs	r1, #25
   b64b0:	f7ff ffa9 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b64b4:	b108      	cbz	r0, b64ba <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b64b6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b64ba:	b003      	add	sp, #12
   b64bc:	f85d fb04 	ldr.w	pc, [sp], #4

000b64c0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b64c0:	b510      	push	{r4, lr}
    return data_ + size_;
   b64c2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b64c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b64ca:	4293      	cmp	r3, r2
   b64cc:	4618      	mov	r0, r3
   b64ce:	d006      	beq.n	b64de <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b64d0:	6804      	ldr	r4, [r0, #0]
   b64d2:	8824      	ldrh	r4, [r4, #0]
   b64d4:	428c      	cmp	r4, r1
   b64d6:	f103 0308 	add.w	r3, r3, #8
   b64da:	d1f6      	bne.n	b64ca <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b64dc:	bd10      	pop	{r4, pc}
        return nullptr;
   b64de:	2000      	movs	r0, #0
   b64e0:	e7fc      	b.n	b64dc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b64e4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b64e4:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b64e6:	2500      	movs	r5, #0
   b64e8:	6005      	str	r5, [r0, #0]
   b64ea:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64ec:	2030      	movs	r0, #48	; 0x30
   b64ee:	f7fd fde2 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b64f2:	4604      	mov	r4, r0
   b64f4:	b188      	cbz	r0, b651a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b64f6:	2301      	movs	r3, #1
   b64f8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b64fc:	4b09      	ldr	r3, [pc, #36]	; (b6524 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b64fe:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6500:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6504:	8183      	strh	r3, [r0, #12]
   b6506:	300e      	adds	r0, #14
   b6508:	f7ff ff2b 	bl	b6362 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b650c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6510:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6514:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b6518:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b651a:	6074      	str	r4, [r6, #4]
   b651c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b651e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6520:	4630      	mov	r0, r6
   b6522:	bd70      	pop	{r4, r5, r6, pc}
   b6524:	000b8364 	.word	0x000b8364

000b6528 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b6528:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b652a:	460d      	mov	r5, r1
   b652c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b652e:	a801      	add	r0, sp, #4
   b6530:	f7ff fedc 	bl	b62ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6534:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b6536:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b653a:	6023      	str	r3, [r4, #0]
   b653c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b6540:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b6542:	a801      	add	r0, sp, #4
   b6544:	f7ff fee0 	bl	b6308 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b6548:	4620      	mov	r0, r4
   b654a:	b003      	add	sp, #12
   b654c:	bd30      	pop	{r4, r5, pc}

000b654e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b654e:	b530      	push	{r4, r5, lr}
   b6550:	4605      	mov	r5, r0
   b6552:	b087      	sub	sp, #28
   b6554:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6556:	a801      	add	r0, sp, #4
   b6558:	f7ff fec8 	bl	b62ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b655c:	682a      	ldr	r2, [r5, #0]
   b655e:	6823      	ldr	r3, [r4, #0]
   b6560:	8812      	ldrh	r2, [r2, #0]
   b6562:	881b      	ldrh	r3, [r3, #0]
   b6564:	429a      	cmp	r2, r3
   b6566:	d10d      	bne.n	b6584 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b6568:	4629      	mov	r1, r5
   b656a:	a802      	add	r0, sp, #8
   b656c:	f7ff ffdc 	bl	b6528 <_ZNK8particle13BlePeerDevice7addressEv>
   b6570:	4621      	mov	r1, r4
   b6572:	a804      	add	r0, sp, #16
   b6574:	f7ff ffd8 	bl	b6528 <_ZNK8particle13BlePeerDevice7addressEv>
   b6578:	a904      	add	r1, sp, #16
   b657a:	a802      	add	r0, sp, #8
   b657c:	f7ff fedd 	bl	b633a <_ZNK8particle10BleAddresseqERKS0_>
   b6580:	4604      	mov	r4, r0
   b6582:	b900      	cbnz	r0, b6586 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b6584:	2400      	movs	r4, #0
    WiringBleLock lk;
   b6586:	a801      	add	r0, sp, #4
   b6588:	f7ff febe 	bl	b6308 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b658c:	4620      	mov	r0, r4
   b658e:	b007      	add	sp, #28
   b6590:	bd30      	pop	{r4, r5, pc}
	...

000b6594 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6594:	b510      	push	{r4, lr}
   b6596:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6598:	2064      	movs	r0, #100	; 0x64
   b659a:	f7fd fd8c 	bl	b40b6 <_Znwj>
   b659e:	b168      	cbz	r0, b65bc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b65a0:	2300      	movs	r3, #0
   b65a2:	e9c0 3300 	strd	r3, r3, [r0]
   b65a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b65aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b65ae:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b65b2:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b65b4:	62c3      	str	r3, [r0, #44]	; 0x2c
   b65b6:	63c3      	str	r3, [r0, #60]	; 0x3c
   b65b8:	64c3      	str	r3, [r0, #76]	; 0x4c
   b65ba:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b65bc:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b65be:	b920      	cbnz	r0, b65ca <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b65c0:	4a0a      	ldr	r2, [pc, #40]	; (b65ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b65c2:	490b      	ldr	r1, [pc, #44]	; (b65f0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b65c4:	200a      	movs	r0, #10
   b65c6:	f7fe f839 	bl	b463c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b65ca:	2000      	movs	r0, #0
   b65cc:	f7fd ffd0 	bl	b4570 <hal_ble_stack_init>
   b65d0:	b120      	cbz	r0, b65dc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b65d2:	4a06      	ldr	r2, [pc, #24]	; (b65ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b65d4:	4907      	ldr	r1, [pc, #28]	; (b65f4 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b65d6:	200a      	movs	r0, #10
   b65d8:	f7fe f830 	bl	b463c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b65dc:	6821      	ldr	r1, [r4, #0]
   b65de:	4806      	ldr	r0, [pc, #24]	; (b65f8 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b65e0:	2200      	movs	r2, #0
   b65e2:	f7fd fff9 	bl	b45d8 <hal_ble_set_callback_on_periph_link_events>
}
   b65e6:	4620      	mov	r0, r4
   b65e8:	bd10      	pop	{r4, pc}
   b65ea:	bf00      	nop
   b65ec:	000b45fd 	.word	0x000b45fd
   b65f0:	000b8284 	.word	0x000b8284
   b65f4:	000b82c2 	.word	0x000b82c2
   b65f8:	000b6ed1 	.word	0x000b6ed1

000b65fc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b65fc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b65fe:	4c0a      	ldr	r4, [pc, #40]	; (b6628 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b6600:	7823      	ldrb	r3, [r4, #0]
   b6602:	f3bf 8f5b 	dmb	ish
   b6606:	07db      	lsls	r3, r3, #31
   b6608:	d40c      	bmi.n	b6624 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b660a:	4620      	mov	r0, r4
   b660c:	f7fd fd66 	bl	b40dc <__cxa_guard_acquire>
   b6610:	b140      	cbz	r0, b6624 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6612:	4806      	ldr	r0, [pc, #24]	; (b662c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6614:	f7ff ffbe 	bl	b6594 <_ZN8particle14BleLocalDeviceC1Ev>
   b6618:	4620      	mov	r0, r4
   b661a:	f7fd fd64 	bl	b40e6 <__cxa_guard_release>
   b661e:	4804      	ldr	r0, [pc, #16]	; (b6630 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b6620:	f001 fb4a 	bl	b7cb8 <atexit>
    return instance;
}
   b6624:	4801      	ldr	r0, [pc, #4]	; (b662c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6626:	bd10      	pop	{r4, pc}
   b6628:	2003e71c 	.word	0x2003e71c
   b662c:	2003e724 	.word	0x2003e724
   b6630:	000b6831 	.word	0x000b6831

000b6634 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b6634:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b6636:	2000      	movs	r0, #0
   b6638:	f7fd ff9a 	bl	b4570 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b663c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6640:	bd08      	pop	{r3, pc}
	...

000b6644 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b6644:	b570      	push	{r4, r5, r6, lr}
   b6646:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b6648:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b664a:	460e      	mov	r6, r1
   b664c:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b664e:	f7ff fe36 	bl	b62be <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b6652:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6656:	f7ff fe3d 	bl	b62d4 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b665a:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b665e:	2200      	movs	r2, #0
   b6660:	4621      	mov	r1, r4
   b6662:	4803      	ldr	r0, [pc, #12]	; (b6670 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b6664:	f7fd ff9c 	bl	b45a0 <hal_ble_gap_start_scan>
   b6668:	2800      	cmp	r0, #0
        return foundCount_;
   b666a:	bfa8      	it	ge
   b666c:	6960      	ldrge	r0, [r4, #20]
    }
   b666e:	bd70      	pop	{r4, r5, r6, pc}
   b6670:	000b74b7 	.word	0x000b74b7

000b6674 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b6674:	b510      	push	{r4, lr}
   b6676:	4604      	mov	r4, r0
    ::free(ptr);
   b6678:	6940      	ldr	r0, [r0, #20]
   b667a:	f7fe f8a5 	bl	b47c8 <free>
   b667e:	68a0      	ldr	r0, [r4, #8]
   b6680:	f7fe f8a2 	bl	b47c8 <free>
   b6684:	4620      	mov	r0, r4
   b6686:	bd10      	pop	{r4, pc}

000b6688 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b6688:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b668a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b668e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b6692:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6696:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b669a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b669e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b66a2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b66a6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b66aa:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b66ae:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b66b2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b66b6:	6202      	str	r2, [r0, #32]
   b66b8:	6302      	str	r2, [r0, #48]	; 0x30
   b66ba:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b66be:	4770      	bx	lr

000b66c0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b66c0:	b530      	push	{r4, r5, lr}
   b66c2:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b66c4:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b66c6:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b66c8:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b66ca:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b66ce:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b66d0:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b66d2:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b66d4:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b66d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b66dc:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b66de:	f7fd ff57 	bl	b4590 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b66e2:	4621      	mov	r1, r4
   b66e4:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b66e6:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b66ea:	f7fd ff49 	bl	b4580 <hal_ble_gap_set_scan_parameters>
}
   b66ee:	b005      	add	sp, #20
   b66f0:	bd30      	pop	{r4, r5, pc}

000b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b66f2:	b510      	push	{r4, lr}
   b66f4:	4604      	mov	r4, r0
    ::free(ptr);
   b66f6:	6800      	ldr	r0, [r0, #0]
   b66f8:	f7fe f866 	bl	b47c8 <free>
}
   b66fc:	4620      	mov	r0, r4
   b66fe:	bd10      	pop	{r4, pc}

000b6700 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b6700:	b570      	push	{r4, r5, r6, lr}
   b6702:	4604      	mov	r4, r0
    ::free(ptr);
   b6704:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b6706:	f7fe f85f 	bl	b47c8 <free>
   b670a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b670c:	f7fe f85c 	bl	b47c8 <free>
    }
    ~BleScanFilter() = default;
   b6710:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b6714:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6718:	f7ff ffeb 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b671c:	4628      	mov	r0, r5
   b671e:	f7fe ffe5 	bl	b56ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b6722:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6726:	f7fe fccf 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
   b672a:	f104 0018 	add.w	r0, r4, #24
   b672e:	f7fe fccb 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6732:	e9d4 5300 	ldrd	r5, r3, [r4]
   b6736:	2624      	movs	r6, #36	; 0x24
   b6738:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b673c:	42ae      	cmp	r6, r5
   b673e:	d004      	beq.n	b674a <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6740:	4628      	mov	r0, r5
   b6742:	f7ff ff97 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6746:	3524      	adds	r5, #36	; 0x24
   b6748:	e7f8      	b.n	b673c <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b674a:	6820      	ldr	r0, [r4, #0]
   b674c:	f7fe f83c 	bl	b47c8 <free>
   b6750:	4620      	mov	r0, r4
   b6752:	bd70      	pop	{r4, r5, r6, pc}

000b6754 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b6754:	b530      	push	{r4, r5, lr}
   b6756:	4615      	mov	r5, r2
   b6758:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b675a:	460c      	mov	r4, r1
   b675c:	b179      	cbz	r1, b677e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b675e:	b172      	cbz	r2, b677e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   b6760:	a801      	add	r0, sp, #4
   b6762:	f7ff ff91 	bl	b6688 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b6766:	4621      	mov	r1, r4
   b6768:	462a      	mov	r2, r5
   b676a:	a801      	add	r0, sp, #4
   b676c:	f7ff ff6a 	bl	b6644 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b6770:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b6772:	a801      	add	r0, sp, #4
   b6774:	f7ff ffc4 	bl	b6700 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b6778:	4620      	mov	r0, r4
   b677a:	b01f      	add	sp, #124	; 0x7c
   b677c:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b677e:	4c01      	ldr	r4, [pc, #4]	; (b6784 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b6780:	e7fa      	b.n	b6778 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b6782:	bf00      	nop
   b6784:	fffffef2 	.word	0xfffffef2

000b6788 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6788:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b678a:	1e14      	subs	r4, r2, #0
   b678c:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b678e:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6790:	db02      	blt.n	b6798 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6792:	1862      	adds	r2, r4, r1
   b6794:	429a      	cmp	r2, r3
   b6796:	dd00      	ble.n	b679a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6798:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b679a:	682a      	ldr	r2, [r5, #0]
   b679c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b679e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b67a0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b67a2:	1a52      	subs	r2, r2, r1
   b67a4:	f001 fab4 	bl	b7d10 <memmove>
    size_ -= n;
   b67a8:	686a      	ldr	r2, [r5, #4]
   b67aa:	1b12      	subs	r2, r2, r4
   b67ac:	606a      	str	r2, [r5, #4]
}
   b67ae:	bd38      	pop	{r3, r4, r5, pc}

000b67b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b67b0:	680b      	ldr	r3, [r1, #0]
   b67b2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b67b4:	b113      	cbz	r3, b67bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b67b6:	685a      	ldr	r2, [r3, #4]
   b67b8:	3201      	adds	r2, #1
   b67ba:	605a      	str	r2, [r3, #4]
      }
   b67bc:	4770      	bx	lr

000b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b67be:	b510      	push	{r4, lr}
   b67c0:	f851 3b04 	ldr.w	r3, [r1], #4
   b67c4:	4604      	mov	r4, r0
   b67c6:	f840 3b04 	str.w	r3, [r0], #4
   b67ca:	f7ff fff1 	bl	b67b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b67ce:	4620      	mov	r0, r4
   b67d0:	bd10      	pop	{r4, pc}

000b67d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67d2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b67d4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67d8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b67da:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b67de:	42ae      	cmp	r6, r5
   b67e0:	d004      	beq.n	b67ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b67e2:	1d28      	adds	r0, r5, #4
   b67e4:	f7fe f940 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b67e8:	3508      	adds	r5, #8
   b67ea:	e7f8      	b.n	b67de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b67ec:	6820      	ldr	r0, [r4, #0]
   b67ee:	f7fd ffeb 	bl	b47c8 <free>
}
   b67f2:	4620      	mov	r0, r4
   b67f4:	bd70      	pop	{r4, r5, r6, pc}

000b67f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67f6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b67f8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b67fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b67fe:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6802:	42ae      	cmp	r6, r5
   b6804:	d004      	beq.n	b6810 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6806:	1d28      	adds	r0, r5, #4
   b6808:	f7fe f92e 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b680c:	3508      	adds	r5, #8
   b680e:	e7f8      	b.n	b6802 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6810:	6820      	ldr	r0, [r4, #0]
   b6812:	f7fd ffd9 	bl	b47c8 <free>
}
   b6816:	4620      	mov	r0, r4
   b6818:	bd70      	pop	{r4, r5, r6, pc}

000b681a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b681a:	b510      	push	{r4, lr}
   b681c:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b681e:	3024      	adds	r0, #36	; 0x24
   b6820:	f7ff ffe9 	bl	b67f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6824:	f104 0018 	add.w	r0, r4, #24
   b6828:	f7ff ffd3 	bl	b67d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b682c:	bd10      	pop	{r4, pc}
	...

000b6830 <__tcf_0>:
    static BleLocalDevice instance;
   b6830:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6832:	4b17      	ldr	r3, [pc, #92]	; (b6890 <__tcf_0+0x60>)
   b6834:	681c      	ldr	r4, [r3, #0]
   b6836:	b354      	cbz	r4, b688e <__tcf_0+0x5e>
   b6838:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b683c:	f7fe fc44 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
   b6840:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6844:	f7fe fc40 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
   b6848:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b684c:	f7fe fc3c 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
   b6850:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6854:	f7fe fc38 	bl	b50c8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6858:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b685c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6860:	42ae      	cmp	r6, r5
   b6862:	d004      	beq.n	b686e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6864:	1d28      	adds	r0, r5, #4
   b6866:	f7fe f8ff 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b686a:	3508      	adds	r5, #8
   b686c:	e7f8      	b.n	b6860 <__tcf_0+0x30>
    ::free(ptr);
   b686e:	69a0      	ldr	r0, [r4, #24]
   b6870:	f7fd ffaa 	bl	b47c8 <free>
    ~BleLocalDeviceImpl() = default;
   b6874:	f104 000c 	add.w	r0, r4, #12
   b6878:	f7ff ffbd 	bl	b67f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b687c:	4620      	mov	r0, r4
   b687e:	f7ff ffa8 	bl	b67d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6882:	4620      	mov	r0, r4
   b6884:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b688a:	f7fd bc18 	b.w	b40be <_ZdlPvj>
   b688e:	bd70      	pop	{r4, r5, r6, pc}
   b6890:	2003e724 	.word	0x2003e724

000b6894 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6894:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6896:	b510      	push	{r4, lr}
      if (_M_empty())
   b6898:	b90a      	cbnz	r2, b689e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b689a:	f001 f8f7 	bl	b7a8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68a2:	68c3      	ldr	r3, [r0, #12]
   b68a4:	4718      	bx	r3

000b68a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b68a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b68aa:	2300      	movs	r3, #0
   b68ac:	e9c0 3300 	strd	r3, r3, [r0]
   b68b0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b68b2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b68b6:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b68b8:	4605      	mov	r5, r0
   b68ba:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b68bc:	dd4a      	ble.n	b6954 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b68be:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b68c2:	f7fd ff79 	bl	b47b8 <malloc>
            if (!d) {
   b68c6:	4606      	mov	r6, r0
   b68c8:	2800      	cmp	r0, #0
   b68ca:	d043      	beq.n	b6954 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b68cc:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b68d0:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b68d2:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b68d6:	d916      	bls.n	b6906 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b68d8:	4550      	cmp	r0, sl
   b68da:	d215      	bcs.n	b6908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b68dc:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b68e0:	f1a4 0910 	sub.w	r9, r4, #16
   b68e4:	ebaa 0404 	sub.w	r4, sl, r4
   b68e8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b68ea:	45d1      	cmp	r9, sl
   b68ec:	d01d      	beq.n	b692a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b68ee:	b11c      	cbz	r4, b68f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b68f0:	4651      	mov	r1, sl
   b68f2:	4620      	mov	r0, r4
   b68f4:	f001 f81c 	bl	b7930 <_ZN6StringC1EOS_>
                end->~T();
   b68f8:	4650      	mov	r0, sl
   b68fa:	f000 ff9d 	bl	b7838 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b68fe:	f1aa 0a10 	sub.w	sl, sl, #16
   b6902:	3c10      	subs	r4, #16
   b6904:	e7f1      	b.n	b68ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b6906:	d010      	beq.n	b692a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b6908:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b690a:	45a2      	cmp	sl, r4
   b690c:	d00d      	beq.n	b692a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b690e:	f1b9 0f00 	cmp.w	r9, #0
   b6912:	d003      	beq.n	b691c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b6914:	4621      	mov	r1, r4
   b6916:	4648      	mov	r0, r9
   b6918:	f001 f80a 	bl	b7930 <_ZN6StringC1EOS_>
                p->~T();
   b691c:	4620      	mov	r0, r4
   b691e:	f000 ff8b 	bl	b7838 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6922:	3410      	adds	r4, #16
   b6924:	f109 0910 	add.w	r9, r9, #16
   b6928:	e7ef      	b.n	b690a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b692a:	6828      	ldr	r0, [r5, #0]
   b692c:	f7fd ff4c 	bl	b47c8 <free>
        capacity_ = n;
   b6930:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b6934:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6936:	e9d7 4300 	ldrd	r4, r3, [r7]
   b693a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b693e:	45a0      	cmp	r8, r4
   b6940:	d006      	beq.n	b6950 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b6942:	4621      	mov	r1, r4
   b6944:	4630      	mov	r0, r6
   b6946:	f001 f80d 	bl	b7964 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b694a:	3410      	adds	r4, #16
   b694c:	3610      	adds	r6, #16
   b694e:	e7f6      	b.n	b693e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b6950:	687b      	ldr	r3, [r7, #4]
   b6952:	606b      	str	r3, [r5, #4]
}
   b6954:	4628      	mov	r0, r5
   b6956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b695a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b695a:	b530      	push	{r4, r5, lr}
   b695c:	b08d      	sub	sp, #52	; 0x34
   b695e:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b6960:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b6964:	a801      	add	r0, sp, #4
   b6966:	f7ff ff9e 	bl	b68a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b696a:	9b02      	ldr	r3, [sp, #8]
   b696c:	2b00      	cmp	r3, #0
   b696e:	dd2f      	ble.n	b69d0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b6970:	f104 0114 	add.w	r1, r4, #20
   b6974:	a804      	add	r0, sp, #16
   b6976:	f7ff fd79 	bl	b646c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b697a:	f104 0108 	add.w	r1, r4, #8
   b697e:	a808      	add	r0, sp, #32
   b6980:	f7ff fd74 	bl	b646c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b6984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6986:	9b06      	ldr	r3, [sp, #24]
   b6988:	4313      	orrs	r3, r2
   b698a:	d01f      	beq.n	b69cc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b698c:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b6990:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b6994:	42ac      	cmp	r4, r5
   b6996:	d019      	beq.n	b69cc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b6998:	a904      	add	r1, sp, #16
   b699a:	4620      	mov	r0, r4
   b699c:	f001 f826 	bl	b79ec <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b69a0:	b160      	cbz	r0, b69bc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b69a2:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b69a4:	a808      	add	r0, sp, #32
   b69a6:	f000 ff47 	bl	b7838 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b69aa:	a804      	add	r0, sp, #16
   b69ac:	f000 ff44 	bl	b7838 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b69b0:	a801      	add	r0, sp, #4
   b69b2:	f7fe fe9b 	bl	b56ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b69b6:	4620      	mov	r0, r4
   b69b8:	b00d      	add	sp, #52	; 0x34
   b69ba:	bd30      	pop	{r4, r5, pc}
   b69bc:	4620      	mov	r0, r4
   b69be:	a908      	add	r1, sp, #32
   b69c0:	f001 f814 	bl	b79ec <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b69c4:	3410      	adds	r4, #16
   b69c6:	2800      	cmp	r0, #0
   b69c8:	d0e4      	beq.n	b6994 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b69ca:	e7ea      	b.n	b69a2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b69cc:	2400      	movs	r4, #0
   b69ce:	e7e9      	b.n	b69a4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b69d0:	2401      	movs	r4, #1
   b69d2:	e7ed      	b.n	b69b0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b69d4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b69d6:	2300      	movs	r3, #0
   b69d8:	e9c0 3300 	strd	r3, r3, [r0]
   b69dc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69de:	684f      	ldr	r7, [r1, #4]
   b69e0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b69e2:	4605      	mov	r5, r0
   b69e4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b69e6:	dd3e      	ble.n	b6a66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b69e8:	00f8      	lsls	r0, r7, #3
   b69ea:	f7fd fee5 	bl	b47b8 <malloc>
            if (!d) {
   b69ee:	4604      	mov	r4, r0
   b69f0:	b3c8      	cbz	r0, b6a66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b69f2:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b69f6:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b69f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b69fc:	d910      	bls.n	b6a20 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b69fe:	429c      	cmp	r4, r3
   b6a00:	d20f      	bcs.n	b6a22 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b6a02:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b6a04:	1a1a      	subs	r2, r3, r0
   b6a06:	f1a0 0c08 	sub.w	ip, r0, #8
   b6a0a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b6a0c:	459c      	cmp	ip, r3
   b6a0e:	d018      	beq.n	b6a42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b6a10:	b11a      	cbz	r2, b6a1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b6a12:	6819      	ldr	r1, [r3, #0]
   b6a14:	6011      	str	r1, [r2, #0]
   b6a16:	6859      	ldr	r1, [r3, #4]
   b6a18:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b6a1a:	3b08      	subs	r3, #8
   b6a1c:	3a08      	subs	r2, #8
   b6a1e:	e7f5      	b.n	b6a0c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b6a20:	d00f      	beq.n	b6a42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b6a22:	4601      	mov	r1, r0
   b6a24:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b6a26:	428b      	cmp	r3, r1
   b6a28:	d00b      	beq.n	b6a42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b6a2a:	b13a      	cbz	r2, b6a3c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b6a2c:	f8d1 c000 	ldr.w	ip, [r1]
   b6a30:	f8c2 c000 	str.w	ip, [r2]
   b6a34:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b6a38:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b6a3c:	3108      	adds	r1, #8
   b6a3e:	3208      	adds	r2, #8
   b6a40:	e7f1      	b.n	b6a26 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b6a42:	f7fd fec1 	bl	b47c8 <free>
        data_ = d;
   b6a46:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6a48:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6a4a:	e9d6 3100 	ldrd	r3, r1, [r6]
   b6a4e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b6a52:	4298      	cmp	r0, r3
   b6a54:	d006      	beq.n	b6a64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b6a56:	681a      	ldr	r2, [r3, #0]
   b6a58:	6022      	str	r2, [r4, #0]
   b6a5a:	685a      	ldr	r2, [r3, #4]
   b6a5c:	6062      	str	r2, [r4, #4]
   b6a5e:	3308      	adds	r3, #8
   b6a60:	3408      	adds	r4, #8
   b6a62:	e7f6      	b.n	b6a52 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b6a64:	6069      	str	r1, [r5, #4]
}
   b6a66:	4628      	mov	r0, r5
   b6a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a6a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a6a:	b570      	push	{r4, r5, r6, lr}
   b6a6c:	4604      	mov	r4, r0
        capacity_(0) {
   b6a6e:	2000      	movs	r0, #0
   b6a70:	e9c4 0000 	strd	r0, r0, [r4]
   b6a74:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6a76:	684e      	ldr	r6, [r1, #4]
   b6a78:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6a7a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6a7c:	dd12      	ble.n	b6aa4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b6a7e:	0071      	lsls	r1, r6, #1
   b6a80:	f7fd feaa 	bl	b47d8 <realloc>
            if (!d) {
   b6a84:	b170      	cbz	r0, b6aa4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b6a86:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6a88:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6a8a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6a8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b6a92:	429a      	cmp	r2, r3
   b6a94:	d004      	beq.n	b6aa0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b6a96:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6a9a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b6a9e:	e7f8      	b.n	b6a92 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b6aa0:	686b      	ldr	r3, [r5, #4]
   b6aa2:	6063      	str	r3, [r4, #4]
}
   b6aa4:	4620      	mov	r0, r4
   b6aa6:	bd70      	pop	{r4, r5, r6, pc}

000b6aa8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b6aa8:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6aaa:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6aac:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6aae:	b923      	cbnz	r3, b6aba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b6ab0:	6803      	ldr	r3, [r0, #0]
   b6ab2:	6818      	ldr	r0, [r3, #0]
   b6ab4:	b108      	cbz	r0, b6aba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b6ab6:	f7fd fe87 	bl	b47c8 <free>
            func_();
        }
    }
   b6aba:	4620      	mov	r0, r4
   b6abc:	bd10      	pop	{r4, pc}

000b6abe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b6abe:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6ac0:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6ac2:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6ac4:	b923      	cbnz	r3, b6ad0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b6ac6:	6803      	ldr	r3, [r0, #0]
   b6ac8:	6818      	ldr	r0, [r3, #0]
   b6aca:	b108      	cbz	r0, b6ad0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b6acc:	f7fd fe7c 	bl	b47c8 <free>
    }
   b6ad0:	4620      	mov	r0, r4
   b6ad2:	bd10      	pop	{r4, pc}

000b6ad4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b6ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b6ad8:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b6adc:	b08f      	sub	sp, #60	; 0x3c
   b6ade:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b6ae0:	f1b8 0f00 	cmp.w	r8, #0
   b6ae4:	d072      	beq.n	b6bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b6ae6:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b6ae8:	2d00      	cmp	r5, #0
   b6aea:	d06f      	beq.n	b6bcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b6aec:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6af0:	231f      	movs	r3, #31
   b6af2:	2200      	movs	r2, #0
   b6af4:	21ff      	movs	r1, #255	; 0xff
   b6af6:	4648      	mov	r0, r9
   b6af8:	f7ff fc85 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b6afc:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6afe:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6b00:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6b02:	2200      	movs	r2, #0
   b6b04:	4619      	mov	r1, r3
   b6b06:	4638      	mov	r0, r7
   b6b08:	f7ff fc7d 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6b0c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6b0e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6b10:	d006      	beq.n	b6b20 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b6b12:	42ae      	cmp	r6, r5
   b6b14:	d030      	beq.n	b6b78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b6b16:	2400      	movs	r4, #0
    }
   b6b18:	4620      	mov	r0, r4
   b6b1a:	b00f      	add	sp, #60	; 0x3c
   b6b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b6b20:	4620      	mov	r0, r4
   b6b22:	f7fd fe49 	bl	b47b8 <malloc>
            dismissed_(false) {
   b6b26:	ab03      	add	r3, sp, #12
   b6b28:	9304      	str	r3, [sp, #16]
   b6b2a:	2300      	movs	r3, #0
   b6b2c:	4604      	mov	r4, r0
   b6b2e:	9003      	str	r0, [sp, #12]
   b6b30:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b6b34:	b970      	cbnz	r0, b6b54 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b6b36:	2320      	movs	r3, #32
   b6b38:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6b3c:	4b24      	ldr	r3, [pc, #144]	; (b6bd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6b3e:	9300      	str	r3, [sp, #0]
   b6b40:	4924      	ldr	r1, [pc, #144]	; (b6bd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6b42:	4603      	mov	r3, r0
   b6b44:	aa06      	add	r2, sp, #24
   b6b46:	2032      	movs	r0, #50	; 0x32
   b6b48:	f7fd fd80 	bl	b464c <log_message>
                    return false;
   b6b4c:	a804      	add	r0, sp, #16
   b6b4e:	f7ff ffab 	bl	b6aa8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b6b52:	e7e1      	b.n	b6b18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b6b54:	4602      	mov	r2, r0
   b6b56:	21ff      	movs	r1, #255	; 0xff
   b6b58:	462b      	mov	r3, r5
   b6b5a:	4648      	mov	r0, r9
   b6b5c:	f7ff fc53 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b6b60:	9803      	ldr	r0, [sp, #12]
   b6b62:	462a      	mov	r2, r5
   b6b64:	4641      	mov	r1, r8
   b6b66:	f001 f8b5 	bl	b7cd4 <memcmp>
   b6b6a:	b118      	cbz	r0, b6b74 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b6b6c:	a804      	add	r0, sp, #16
   b6b6e:	f7ff ff9b 	bl	b6aa8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b6b72:	e7ce      	b.n	b6b12 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b6b74:	2401      	movs	r4, #1
   b6b76:	e7e9      	b.n	b6b4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b6b78:	4628      	mov	r0, r5
   b6b7a:	f7fd fe1d 	bl	b47b8 <malloc>
   b6b7e:	2400      	movs	r4, #0
   b6b80:	ab03      	add	r3, sp, #12
   b6b82:	4606      	mov	r6, r0
   b6b84:	9003      	str	r0, [sp, #12]
   b6b86:	9304      	str	r3, [sp, #16]
   b6b88:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b6b8c:	b978      	cbnz	r0, b6bae <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b6b8e:	2320      	movs	r3, #32
   b6b90:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6b94:	4b0e      	ldr	r3, [pc, #56]	; (b6bd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6b96:	9300      	str	r3, [sp, #0]
   b6b98:	490e      	ldr	r1, [pc, #56]	; (b6bd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6b9a:	4603      	mov	r3, r0
   b6b9c:	aa06      	add	r2, sp, #24
   b6b9e:	2032      	movs	r0, #50	; 0x32
   b6ba0:	f7fd fd54 	bl	b464c <log_message>
                    return false;
   b6ba4:	4634      	mov	r4, r6
   b6ba6:	a804      	add	r0, sp, #16
   b6ba8:	f7ff ff89 	bl	b6abe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b6bac:	e7b4      	b.n	b6b18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b6bae:	4602      	mov	r2, r0
   b6bb0:	21ff      	movs	r1, #255	; 0xff
   b6bb2:	462b      	mov	r3, r5
   b6bb4:	4638      	mov	r0, r7
   b6bb6:	f7ff fc26 	bl	b6406 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b6bba:	9803      	ldr	r0, [sp, #12]
   b6bbc:	462a      	mov	r2, r5
   b6bbe:	4641      	mov	r1, r8
   b6bc0:	f001 f888 	bl	b7cd4 <memcmp>
   b6bc4:	2800      	cmp	r0, #0
   b6bc6:	d1ee      	bne.n	b6ba6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b6bc8:	2401      	movs	r4, #1
   b6bca:	e7ec      	b.n	b6ba6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b6bcc:	2401      	movs	r4, #1
   b6bce:	e7a3      	b.n	b6b18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b6bd0:	000b8304 	.word	0x000b8304
   b6bd4:	000b829b 	.word	0x000b829b

000b6bd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6bd8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6bda:	6883      	ldr	r3, [r0, #8]
   b6bdc:	428b      	cmp	r3, r1
   b6bde:	da02      	bge.n	b6be6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6be0:	f7fd ff58 	bl	b4a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6be4:	bd08      	pop	{r3, pc}
    return true;
   b6be6:	2001      	movs	r0, #1
   b6be8:	e7fc      	b.n	b6be4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6bea <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b6bea:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b6bec:	680b      	ldr	r3, [r1, #0]
   b6bee:	6003      	str	r3, [r0, #0]
   b6bf0:	684b      	ldr	r3, [r1, #4]
   b6bf2:	6043      	str	r3, [r0, #4]
   b6bf4:	4604      	mov	r4, r0
   b6bf6:	460d      	mov	r5, r1
class BleAdvertisingData {
   b6bf8:	3008      	adds	r0, #8
   b6bfa:	3108      	adds	r1, #8
   b6bfc:	f7fd ff5a 	bl	b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6c00:	f105 0114 	add.w	r1, r5, #20
   b6c04:	f104 0014 	add.w	r0, r4, #20
   b6c08:	f7fd ff54 	bl	b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6c0c:	f895 3020 	ldrb.w	r3, [r5, #32]
   b6c10:	f884 3020 	strb.w	r3, [r4, #32]
   b6c14:	4620      	mov	r0, r4
   b6c16:	bd38      	pop	{r3, r4, r5, pc}

000b6c18 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b6c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	a801      	add	r0, sp, #4
   b6c1e:	f7fd ff49 	bl	b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6c22:	9b01      	ldr	r3, [sp, #4]
   b6c24:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c26:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6c28:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c2a:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6c2c:	6062      	str	r2, [r4, #4]
   b6c2e:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c30:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6c32:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6c34:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6c36:	9001      	str	r0, [sp, #4]
   b6c38:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b6c3a:	f7fd fdc5 	bl	b47c8 <free>
   b6c3e:	b004      	add	sp, #16
   b6c40:	bd10      	pop	{r4, pc}

000b6c42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c46:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6c48:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6c4a:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6c4c:	4419      	add	r1, r3
   b6c4e:	6883      	ldr	r3, [r0, #8]
   b6c50:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6c52:	4604      	mov	r4, r0
   b6c54:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6c56:	dc12      	bgt.n	b6c7e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6c58:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6c5a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6c5c:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6c5e:	1bd2      	subs	r2, r2, r7
   b6c60:	4631      	mov	r1, r6
   b6c62:	1970      	adds	r0, r6, r5
   b6c64:	f001 f854 	bl	b7d10 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6c68:	462a      	mov	r2, r5
   b6c6a:	4641      	mov	r1, r8
   b6c6c:	4630      	mov	r0, r6
   b6c6e:	f001 f841 	bl	b7cf4 <memcpy>
    size_ += n;
   b6c72:	6863      	ldr	r3, [r4, #4]
   b6c74:	442b      	add	r3, r5
   b6c76:	6063      	str	r3, [r4, #4]
    return true;
   b6c78:	2001      	movs	r0, #1
}
   b6c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6c7e:	f7fd ff09 	bl	b4a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6c82:	2800      	cmp	r0, #0
   b6c84:	d1e8      	bne.n	b6c58 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6c86:	e7f8      	b.n	b6c7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6c88 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b6c88:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b6c8a:	460a      	mov	r2, r1
   b6c8c:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b6c8e:	b510      	push	{r4, lr}
   b6c90:	4604      	mov	r4, r0
    size_ = 0;
   b6c92:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b6c94:	b102      	cbz	r2, b6c98 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b6c96:	b90b      	cbnz	r3, b6c9c <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b6c98:	2000      	movs	r0, #0
}
   b6c9a:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b6c9c:	2bff      	cmp	r3, #255	; 0xff
   b6c9e:	bf28      	it	cs
   b6ca0:	23ff      	movcs	r3, #255	; 0xff
   b6ca2:	f7ff ffce 	bl	b6c42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b6ca6:	2800      	cmp	r0, #0
   b6ca8:	d0f7      	beq.n	b6c9a <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b6caa:	6860      	ldr	r0, [r4, #4]
   b6cac:	e7f5      	b.n	b6c9a <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b6cae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cb0:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6cb2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6cb6:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6cb8:	4604      	mov	r4, r0
   b6cba:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6cbc:	da0b      	bge.n	b6cd6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6cbe:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6cc0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6cc2:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6cc4:	1b52      	subs	r2, r2, r5
   b6cc6:	1c48      	adds	r0, r1, #1
   b6cc8:	f001 f822 	bl	b7d10 <memmove>
    new(p) T(std::move(value));
   b6ccc:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6cce:	6863      	ldr	r3, [r4, #4]
   b6cd0:	3301      	adds	r3, #1
   b6cd2:	6063      	str	r3, [r4, #4]
}
   b6cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6cd6:	3101      	adds	r1, #1
   b6cd8:	f7fd fedc 	bl	b4a94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6cdc:	2800      	cmp	r0, #0
   b6cde:	d1ee      	bne.n	b6cbe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6ce0:	e7f8      	b.n	b6cd4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6ce2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6ce2:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b6ce4:	6841      	ldr	r1, [r0, #4]
   b6ce6:	f7ff bfe2 	b.w	b6cae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6cea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6cea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6cee:	4604      	mov	r4, r0
   b6cf0:	461d      	mov	r5, r3
   b6cf2:	460f      	mov	r7, r1
   b6cf4:	ab01      	add	r3, sp, #4
   b6cf6:	4690      	mov	r8, r2
   b6cf8:	460a      	mov	r2, r1
   b6cfa:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6cfe:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6d02:	f7ff fac7 	bl	b6294 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6d06:	1cae      	adds	r6, r5, #2
   b6d08:	6863      	ldr	r3, [r4, #4]
   b6d0a:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6d0c:	f1b9 0f00 	cmp.w	r9, #0
   b6d10:	d126      	bne.n	b6d60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b6d12:	b328      	cbz	r0, b6d60 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6d14:	4433      	add	r3, r6
   b6d16:	1a1b      	subs	r3, r3, r0
   b6d18:	2bff      	cmp	r3, #255	; 0xff
   b6d1a:	d809      	bhi.n	b6d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6d1c:	9901      	ldr	r1, [sp, #4]
   b6d1e:	4620      	mov	r0, r4
   b6d20:	f7ff fd32 	bl	b6788 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6d24:	6861      	ldr	r1, [r4, #4]
   b6d26:	4620      	mov	r0, r4
   b6d28:	4431      	add	r1, r6
   b6d2a:	f7ff ff55 	bl	b6bd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6d2e:	b918      	cbnz	r0, b6d38 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b6d30:	6860      	ldr	r0, [r4, #4]
}
   b6d32:	b003      	add	sp, #12
   b6d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6d38:	1c6a      	adds	r2, r5, #1
   b6d3a:	9901      	ldr	r1, [sp, #4]
   b6d3c:	b2d2      	uxtb	r2, r2
   b6d3e:	4620      	mov	r0, r4
   b6d40:	f7ff ffb5 	bl	b6cae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b6d44:	9901      	ldr	r1, [sp, #4]
   b6d46:	463a      	mov	r2, r7
   b6d48:	3101      	adds	r1, #1
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	f7ff ffaf 	bl	b6cae <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b6d50:	9901      	ldr	r1, [sp, #4]
   b6d52:	462b      	mov	r3, r5
   b6d54:	4642      	mov	r2, r8
   b6d56:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b6d58:	4620      	mov	r0, r4
   b6d5a:	f7ff ff72 	bl	b6c42 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b6d5e:	e7e7      	b.n	b6d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b6d60:	18f1      	adds	r1, r6, r3
   b6d62:	29ff      	cmp	r1, #255	; 0xff
   b6d64:	d8e4      	bhi.n	b6d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b6d66:	4620      	mov	r0, r4
   b6d68:	f7ff ff36 	bl	b6bd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6d6c:	2800      	cmp	r0, #0
   b6d6e:	d0df      	beq.n	b6d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6d70:	1c69      	adds	r1, r5, #1
   b6d72:	b2c9      	uxtb	r1, r1
   b6d74:	4620      	mov	r0, r4
   b6d76:	f7ff ffb4 	bl	b6ce2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6d7a:	4639      	mov	r1, r7
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	f7ff ffb0 	bl	b6ce2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6d82:	6861      	ldr	r1, [r4, #4]
   b6d84:	462b      	mov	r3, r5
   b6d86:	4642      	mov	r2, r8
   b6d88:	e7e6      	b.n	b6d58 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6d8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6d8a:	b430      	push	{r4, r5}
   b6d8c:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6d90:	b11a      	cbz	r2, b6d9a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6d92:	9502      	str	r5, [sp, #8]
}
   b6d94:	bc30      	pop	{r4, r5}
   b6d96:	f7ff bfa8 	b.w	b6cea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6d9a:	6840      	ldr	r0, [r0, #4]
}
   b6d9c:	bc30      	pop	{r4, r5}
   b6d9e:	4770      	bx	lr

000b6da0 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6da2:	2300      	movs	r3, #0
   b6da4:	e9c0 3300 	strd	r3, r3, [r0]
   b6da8:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6daa:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6dac:	9300      	str	r3, [sp, #0]
   b6dae:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6db0:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6db4:	4619      	mov	r1, r3
   b6db6:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6dba:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6dbc:	f7ff ffe5 	bl	b6d8a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6dc0:	4620      	mov	r0, r4
   b6dc2:	b004      	add	sp, #16
   b6dc4:	bd10      	pop	{r4, pc}

000b6dc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6dc6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dca:	4604      	mov	r4, r0
   b6dcc:	460d      	mov	r5, r1
   b6dce:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6dd0:	d914      	bls.n	b6dfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6dd2:	4290      	cmp	r0, r2
   b6dd4:	d213      	bcs.n	b6dfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6dd6:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6dda:	1a75      	subs	r5, r6, r1
   b6ddc:	f1a1 0708 	sub.w	r7, r1, #8
   b6de0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6de2:	42b7      	cmp	r7, r6
   b6de4:	d018      	beq.n	b6e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6de6:	b11c      	cbz	r4, b6df0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6de8:	4631      	mov	r1, r6
   b6dea:	4620      	mov	r0, r4
   b6dec:	f7ff fce7 	bl	b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6df0:	1d30      	adds	r0, r6, #4
   b6df2:	f7fd fe39 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6df6:	3e08      	subs	r6, #8
   b6df8:	3c08      	subs	r4, #8
   b6dfa:	e7f2      	b.n	b6de2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6dfc:	d00c      	beq.n	b6e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6dfe:	42b5      	cmp	r5, r6
   b6e00:	d00a      	beq.n	b6e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6e02:	b11c      	cbz	r4, b6e0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6e04:	4629      	mov	r1, r5
   b6e06:	4620      	mov	r0, r4
   b6e08:	f7ff fcd9 	bl	b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6e0c:	1d28      	adds	r0, r5, #4
   b6e0e:	f7fd fe2b 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b6e12:	3508      	adds	r5, #8
   b6e14:	3408      	adds	r4, #8
   b6e16:	e7f2      	b.n	b6dfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6e1c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6e1e:	6846      	ldr	r6, [r0, #4]
   b6e20:	4668      	mov	r0, sp
   b6e22:	f7ff fccc 	bl	b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6e26:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6e2a:	429f      	cmp	r7, r3
   b6e2c:	db12      	blt.n	b6e54 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6e2e:	3701      	adds	r7, #1
        if (n > 0) {
   b6e30:	2f00      	cmp	r7, #0
   b6e32:	dd29      	ble.n	b6e88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6e34:	00f8      	lsls	r0, r7, #3
   b6e36:	f7fd fcbf 	bl	b47b8 <malloc>
            if (!d) {
   b6e3a:	4605      	mov	r5, r0
   b6e3c:	b1f0      	cbz	r0, b6e7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6e3e:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6e42:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6e46:	f7ff ffbe 	bl	b6dc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6e4a:	6820      	ldr	r0, [r4, #0]
   b6e4c:	f7fd fcbc 	bl	b47c8 <free>
        data_ = d;
   b6e50:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6e52:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6e54:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6e56:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6e58:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b6e5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6e60:	4631      	mov	r1, r6
   b6e62:	f106 0008 	add.w	r0, r6, #8
   b6e66:	f7ff ffae 	bl	b6dc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6e6a:	b11e      	cbz	r6, b6e74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6e6c:	4669      	mov	r1, sp
   b6e6e:	4630      	mov	r0, r6
   b6e70:	f7ff fca5 	bl	b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6e74:	6863      	ldr	r3, [r4, #4]
   b6e76:	3301      	adds	r3, #1
   b6e78:	6063      	str	r3, [r4, #4]
    return true;
   b6e7a:	2501      	movs	r5, #1
   b6e7c:	a801      	add	r0, sp, #4
   b6e7e:	f7fd fdf3 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6e82:	4628      	mov	r0, r5
   b6e84:	b003      	add	sp, #12
   b6e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6e88:	2500      	movs	r5, #0
   b6e8a:	e7de      	b.n	b6e4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6e8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6e8e:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6e92:	4605      	mov	r5, r0
   b6e94:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6e96:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6e9a:	42a6      	cmp	r6, r4
   b6e9c:	d005      	beq.n	b6eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6e9e:	4639      	mov	r1, r7
   b6ea0:	4620      	mov	r0, r4
   b6ea2:	f7ff fb54 	bl	b654e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6ea6:	b108      	cbz	r0, b6eac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6ea8:	b914      	cbnz	r4, b6eb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6eac:	3408      	adds	r4, #8
   b6eae:	e7f4      	b.n	b6e9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6eb0:	1d20      	adds	r0, r4, #4
   b6eb2:	f7fd fdd9 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6eb6:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6eba:	f104 0108 	add.w	r1, r4, #8
   b6ebe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6ec2:	4620      	mov	r0, r4
   b6ec4:	f7ff ff7f 	bl	b6dc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6ec8:	686b      	ldr	r3, [r5, #4]
   b6eca:	3b01      	subs	r3, #1
   b6ecc:	606b      	str	r3, [r5, #4]
    return true;
   b6ece:	e7ec      	b.n	b6eaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b6ed0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ed4:	4605      	mov	r5, r0
   b6ed6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6ed8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6eda:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6edc:	f7ff fa06 	bl	b62ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6ee0:	682e      	ldr	r6, [r5, #0]
   b6ee2:	1ef3      	subs	r3, r6, #3
   b6ee4:	2b0d      	cmp	r3, #13
   b6ee6:	d83c      	bhi.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6ee8:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6eec:	0057000e 	.word	0x0057000e
   b6ef0:	00d3003b 	.word	0x00d3003b
   b6ef4:	003b003b 	.word	0x003b003b
   b6ef8:	003b003b 	.word	0x003b003b
   b6efc:	009d003b 	.word	0x009d003b
   b6f00:	009d009d 	.word	0x009d009d
   b6f04:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b6f08:	a804      	add	r0, sp, #16
   b6f0a:	f7ff faeb 	bl	b64e4 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b6f0e:	9b04      	ldr	r3, [sp, #16]
   b6f10:	89aa      	ldrh	r2, [r5, #12]
   b6f12:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b6f14:	6869      	ldr	r1, [r5, #4]
   b6f16:	9804      	ldr	r0, [sp, #16]
   b6f18:	3108      	adds	r1, #8
   b6f1a:	3002      	adds	r0, #2
   b6f1c:	f7ff fa00 	bl	b6320 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6f20:	a904      	add	r1, sp, #16
   b6f22:	a806      	add	r0, sp, #24
   b6f24:	f7ff fc4b 	bl	b67be <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6f28:	a906      	add	r1, sp, #24
   b6f2a:	f104 0018 	add.w	r0, r4, #24
   b6f2e:	f7ff ff74 	bl	b6e1a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6f32:	4605      	mov	r5, r0
   b6f34:	a807      	add	r0, sp, #28
   b6f36:	f7fd fd97 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6f3a:	b9c5      	cbnz	r5, b6f6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6f3c:	2320      	movs	r3, #32
   b6f3e:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b6f42:	4b5e      	ldr	r3, [pc, #376]	; (b70bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b6f44:	495e      	ldr	r1, [pc, #376]	; (b70c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6f46:	9300      	str	r3, [sp, #0]
   b6f48:	aa06      	add	r2, sp, #24
   b6f4a:	462b      	mov	r3, r5
   b6f4c:	2001      	movs	r0, #1
   b6f4e:	f7fd fb7d 	bl	b464c <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6f52:	9b04      	ldr	r3, [sp, #16]
   b6f54:	4629      	mov	r1, r5
   b6f56:	8818      	ldrh	r0, [r3, #0]
   b6f58:	f7fd fb34 	bl	b45c4 <hal_ble_gap_disconnect>
   b6f5c:	a805      	add	r0, sp, #20
   b6f5e:	f7fd fd83 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b6f62:	a803      	add	r0, sp, #12
   b6f64:	f7ff f9d0 	bl	b6308 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b6f68:	b00e      	add	sp, #56	; 0x38
   b6f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b6f6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6f70:	b123      	cbz	r3, b6f7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b6f72:	a904      	add	r1, sp, #16
   b6f74:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6f78:	f7ff fc8c 	bl	b6894 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6f7c:	a805      	add	r0, sp, #20
   b6f7e:	f7fd fd73 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b6f82:	2120      	movs	r1, #32
   b6f84:	2300      	movs	r3, #0
   b6f86:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b6f8a:	4a4e      	ldr	r2, [pc, #312]	; (b70c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b6f8c:	9200      	str	r2, [sp, #0]
   b6f8e:	494c      	ldr	r1, [pc, #304]	; (b70c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b6f90:	aa06      	add	r2, sp, #24
   b6f92:	2001      	movs	r0, #1
   b6f94:	f7fd fb5a 	bl	b464c <log_message>
   b6f98:	e7e3      	b.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6f9a:	89a9      	ldrh	r1, [r5, #12]
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	f7ff fa8f 	bl	b64c0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6fa2:	4606      	mov	r6, r0
   b6fa4:	2800      	cmp	r0, #0
   b6fa6:	d0dc      	beq.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6fa8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6faa:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b6fae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6fb2:	8029      	strh	r1, [r5, #0]
   b6fb4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6fb8:	429a      	cmp	r2, r3
   b6fba:	d003      	beq.n	b6fc4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b6fbc:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6fc0:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6fc2:	e7f9      	b.n	b6fb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b6fc4:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6fc8:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6fcc:	45b8      	cmp	r8, r7
   b6fce:	d004      	beq.n	b6fda <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b6fd0:	1d38      	adds	r0, r7, #4
   b6fd2:	f7fd fd49 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6fd6:	3708      	adds	r7, #8
   b6fd8:	e7f8      	b.n	b6fcc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b6fda:	2300      	movs	r3, #0
   b6fdc:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b6fde:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b6fe2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6fe6:	45b8      	cmp	r8, r7
   b6fe8:	d004      	beq.n	b6ff4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b6fea:	1d38      	adds	r0, r7, #4
   b6fec:	f7fd fd3c 	bl	b4a68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ff0:	3708      	adds	r7, #8
   b6ff2:	e7f8      	b.n	b6fe6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b6ff4:	2300      	movs	r3, #0
   b6ff6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6ff8:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b6ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6ffc:	b123      	cbz	r3, b7008 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b6ffe:	4631      	mov	r1, r6
   b7000:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7004:	f7ff fc46 	bl	b6894 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7008:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b700a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b700e:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7010:	4631      	mov	r1, r6
   b7012:	f104 0018 	add.w	r0, r4, #24
   b7016:	f7ff ff39 	bl	b6e8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b701a:	2220      	movs	r2, #32
   b701c:	2300      	movs	r3, #0
   b701e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7022:	4a29      	ldr	r2, [pc, #164]	; (b70c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7024:	e7b2      	b.n	b6f8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7026:	89a9      	ldrh	r1, [r5, #12]
   b7028:	4620      	mov	r0, r4
   b702a:	f7ff fa49 	bl	b64c0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b702e:	2800      	cmp	r0, #0
   b7030:	d097      	beq.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7032:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7034:	2b00      	cmp	r3, #0
   b7036:	d094      	beq.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7038:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b703a:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b703c:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7040:	d001      	beq.n	b7046 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7042:	2e10      	cmp	r6, #16
   b7044:	d117      	bne.n	b7076 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7046:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7048:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b704a:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b704c:	2506      	movs	r5, #6
                        };
   b704e:	f88d 3015 	strb.w	r3, [sp, #21]
   b7052:	9104      	str	r1, [sp, #16]
   b7054:	f88d 2014 	strb.w	r2, [sp, #20]
   b7058:	9006      	str	r0, [sp, #24]
   b705a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b705e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7060:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7064:	9508      	str	r5, [sp, #32]
   b7066:	e883 0003 	stmia.w	r3, {r0, r1}
   b706a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b706c:	a906      	add	r1, sp, #24
   b706e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7072:	4798      	blx	r3
   b7074:	e775      	b.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7076:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7078:	bf01      	itttt	eq
   b707a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b707c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b707e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7082:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7084:	bf0f      	iteee	eq
   b7086:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b708a:	461a      	movne	r2, r3
   b708c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b708e:	461d      	movne	r5, r3
   b7090:	e7dd      	b.n	b704e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7092:	89a9      	ldrh	r1, [r5, #12]
   b7094:	4620      	mov	r0, r4
   b7096:	f7ff fa13 	bl	b64c0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b709a:	4601      	mov	r1, r0
   b709c:	2800      	cmp	r0, #0
   b709e:	f43f af60 	beq.w	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b70a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b70a4:	2b00      	cmp	r3, #0
   b70a6:	f43f af5c 	beq.w	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b70aa:	686b      	ldr	r3, [r5, #4]
   b70ac:	9306      	str	r3, [sp, #24]
   b70ae:	aa06      	add	r2, sp, #24
   b70b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b70b2:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b70b6:	4798      	blx	r3
   b70b8:	e753      	b.n	b6f62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b70ba:	bf00      	nop
   b70bc:	000b831f 	.word	0x000b831f
   b70c0:	000b829b 	.word	0x000b829b
   b70c4:	000b8345 	.word	0x000b8345
   b70c8:	000b834f 	.word	0x000b834f

000b70cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b70cc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b70ce:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b70d0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b70d2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b70d4:	dd05      	ble.n	b70e2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b70d6:	2114      	movs	r1, #20
   b70d8:	4369      	muls	r1, r5
   b70da:	f7fd fb7d 	bl	b47d8 <realloc>
            if (!d) {
   b70de:	b918      	cbnz	r0, b70e8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b70e0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b70e2:	f7fd fb71 	bl	b47c8 <free>
        T* d = nullptr;
   b70e6:	2000      	movs	r0, #0
        data_ = d;
   b70e8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b70ea:	60a5      	str	r5, [r4, #8]
        return true;
   b70ec:	2001      	movs	r0, #1
   b70ee:	e7f7      	b.n	b70e0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b70f0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b70f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b70f4:	2400      	movs	r4, #0
   b70f6:	e9c0 4400 	strd	r4, r4, [r0]
   b70fa:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b70fc:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b70fe:	6849      	ldr	r1, [r1, #4]
   b7100:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7102:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7104:	dd1a      	ble.n	b713c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b7106:	f7ff ffe1 	bl	b70cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b710a:	b1b8      	cbz	r0, b713c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b710c:	e9d8 9300 	ldrd	r9, r3, [r8]
   b7110:	f04f 0c14 	mov.w	ip, #20
   b7114:	f8d7 e000 	ldr.w	lr, [r7]
   b7118:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b711c:	eb09 0504 	add.w	r5, r9, r4
   b7120:	45ac      	cmp	ip, r5
   b7122:	d008      	beq.n	b7136 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b7124:	eb1e 0604 	adds.w	r6, lr, r4
   b7128:	bf1f      	itttt	ne
   b712a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b712c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b712e:	682b      	ldrne	r3, [r5, #0]
   b7130:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b7132:	3414      	adds	r4, #20
   b7134:	e7f2      	b.n	b711c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b7136:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b713a:	607b      	str	r3, [r7, #4]
}
   b713c:	4638      	mov	r0, r7
   b713e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b7146:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b714a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b714c:	6883      	ldr	r3, [r0, #8]
   b714e:	19e9      	adds	r1, r5, r7
   b7150:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b7152:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7154:	dc17      	bgt.n	b7186 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b7156:	2314      	movs	r3, #20
   b7158:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b715a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b715c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b715e:	fb03 f907 	mul.w	r9, r3, r7
   b7162:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7164:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7166:	1b52      	subs	r2, r2, r5
   b7168:	4631      	mov	r1, r6
   b716a:	eb06 0009 	add.w	r0, r6, r9
   b716e:	f000 fdcf 	bl	b7d10 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7172:	464a      	mov	r2, r9
   b7174:	4641      	mov	r1, r8
   b7176:	4630      	mov	r0, r6
   b7178:	f000 fdbc 	bl	b7cf4 <memcpy>
    size_ += n;
   b717c:	6863      	ldr	r3, [r4, #4]
   b717e:	443b      	add	r3, r7
   b7180:	6063      	str	r3, [r4, #4]
}
   b7182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7186:	f7ff ffa1 	bl	b70cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b718a:	2800      	cmp	r0, #0
   b718c:	d1e3      	bne.n	b7156 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b718e:	e7f8      	b.n	b7182 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b7190 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7190:	b082      	sub	sp, #8
   b7192:	b570      	push	{r4, r5, r6, lr}
   b7194:	460c      	mov	r4, r1
   b7196:	a904      	add	r1, sp, #16
   b7198:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b719c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b71a0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b71a2:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71a4:	da17      	bge.n	b71d6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b71a6:	2314      	movs	r3, #20
   b71a8:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b71ac:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b71ae:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b71b0:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b71b2:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71b4:	1a52      	subs	r2, r2, r1
   b71b6:	18e0      	adds	r0, r4, r3
   b71b8:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b71ba:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b71bc:	f000 fda8 	bl	b7d10 <memmove>
    new(p) T(std::move(value));
   b71c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b71c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71c4:	6833      	ldr	r3, [r6, #0]
   b71c6:	6023      	str	r3, [r4, #0]
    ++size_;
   b71c8:	686b      	ldr	r3, [r5, #4]
   b71ca:	3301      	adds	r3, #1
   b71cc:	606b      	str	r3, [r5, #4]
}
   b71ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b71d2:	b002      	add	sp, #8
   b71d4:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71d6:	3101      	adds	r1, #1
   b71d8:	f7ff ff78 	bl	b70cc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b71dc:	2800      	cmp	r0, #0
   b71de:	d1e2      	bne.n	b71a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b71e0:	e7f5      	b.n	b71ce <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b71e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b71e6:	2400      	movs	r4, #0
   b71e8:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b71ea:	1e93      	subs	r3, r2, #2
   b71ec:	e9c0 4400 	strd	r4, r4, [r0]
   b71f0:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b71f2:	4605      	mov	r5, r0
   b71f4:	460f      	mov	r7, r1
   b71f6:	4690      	mov	r8, r2
   b71f8:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b71fa:	9305      	str	r3, [sp, #20]
    return size_;
   b71fc:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b71fe:	428c      	cmp	r4, r1
   b7200:	da72      	bge.n	b72e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b7202:	6838      	ldr	r0, [r7, #0]
   b7204:	ab07      	add	r3, sp, #28
   b7206:	4642      	mov	r2, r8
   b7208:	1b09      	subs	r1, r1, r4
   b720a:	4420      	add	r0, r4
   b720c:	f7ff f842 	bl	b6294 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b7210:	4606      	mov	r6, r0
   b7212:	2800      	cmp	r0, #0
   b7214:	d068      	beq.n	b72e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7216:	9b05      	ldr	r3, [sp, #20]
   b7218:	2b01      	cmp	r3, #1
   b721a:	d82f      	bhi.n	b727c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b721c:	f1a0 0b02 	sub.w	fp, r0, #2
   b7220:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b7224:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b7228:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b722c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b722e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7230:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7232:	d055      	beq.n	b72e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b7234:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b7236:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b723a:	4413      	add	r3, r2
   b723c:	a808      	add	r0, sp, #32
   b723e:	78d9      	ldrb	r1, [r3, #3]
   b7240:	789b      	ldrb	r3, [r3, #2]
   b7242:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b7246:	f7ff f8c6 	bl	b63d6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b724a:	f10d 0e20 	add.w	lr, sp, #32
   b724e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7252:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b725a:	f8de 3000 	ldr.w	r3, [lr]
   b725e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7262:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7266:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b726a:	ab0d      	add	r3, sp, #52	; 0x34
   b726c:	cb0c      	ldmia	r3, {r2, r3}
   b726e:	6869      	ldr	r1, [r5, #4]
   b7270:	4628      	mov	r0, r5
   b7272:	f7ff ff8d 	bl	b7190 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7276:	f109 0901 	add.w	r9, r9, #1
   b727a:	e7d7      	b.n	b722c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b727c:	f1a8 0306 	sub.w	r3, r8, #6
   b7280:	2b01      	cmp	r3, #1
   b7282:	d82d      	bhi.n	b72e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7284:	f1a0 0b02 	sub.w	fp, r0, #2
   b7288:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b728c:	f04f 0900 	mov.w	r9, #0
   b7290:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7294:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7296:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7298:	d022      	beq.n	b72e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b729a:	3302      	adds	r3, #2
    return data_[i];
   b729c:	6839      	ldr	r1, [r7, #0]
   b729e:	4423      	add	r3, r4
   b72a0:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b72a4:	2201      	movs	r2, #1
   b72a6:	4419      	add	r1, r3
   b72a8:	a808      	add	r0, sp, #32
   b72aa:	f7ff f875 	bl	b6398 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b72ae:	f10d 0e20 	add.w	lr, sp, #32
   b72b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b72b6:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b72ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b72be:	f8de 3000 	ldr.w	r3, [lr]
   b72c2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b72c6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b72ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b72ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b72d2:	6869      	ldr	r1, [r5, #4]
   b72d4:	4628      	mov	r0, r5
   b72d6:	f7ff ff5b 	bl	b7190 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b72da:	f109 0901 	add.w	r9, r9, #1
   b72de:	e7d9      	b.n	b7294 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b72e0:	9b07      	ldr	r3, [sp, #28]
   b72e2:	441c      	add	r4, r3
   b72e4:	4434      	add	r4, r6
   b72e6:	e789      	b.n	b71fc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b72e8:	4628      	mov	r0, r5
   b72ea:	b013      	add	sp, #76	; 0x4c
   b72ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b72f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b72f0:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b72f2:	2300      	movs	r3, #0
   b72f4:	b085      	sub	sp, #20
   b72f6:	e9c0 3300 	strd	r3, r3, [r0]
   b72fa:	6083      	str	r3, [r0, #8]
   b72fc:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b72fe:	2202      	movs	r2, #2
   b7300:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b7302:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7304:	f7ff ff6d 	bl	b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7308:	a901      	add	r1, sp, #4
   b730a:	4620      	mov	r0, r4
   b730c:	f7ff ff19 	bl	b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7310:	a801      	add	r0, sp, #4
   b7312:	f7ff f9ee 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b7316:	2202      	movs	r2, #2
   b7318:	4629      	mov	r1, r5
   b731a:	a801      	add	r0, sp, #4
   b731c:	f7ff ff61 	bl	b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7320:	a901      	add	r1, sp, #4
   b7322:	4620      	mov	r0, r4
   b7324:	f7ff ff0d 	bl	b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7328:	a801      	add	r0, sp, #4
   b732a:	f7ff f9e2 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b732e:	2203      	movs	r2, #3
   b7330:	4629      	mov	r1, r5
   b7332:	a801      	add	r0, sp, #4
   b7334:	f7ff ff55 	bl	b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7338:	a901      	add	r1, sp, #4
   b733a:	4620      	mov	r0, r4
   b733c:	f7ff ff01 	bl	b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7340:	a801      	add	r0, sp, #4
   b7342:	f7ff f9d6 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b7346:	2206      	movs	r2, #6
   b7348:	4629      	mov	r1, r5
   b734a:	a801      	add	r0, sp, #4
   b734c:	f7ff ff49 	bl	b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7350:	a901      	add	r1, sp, #4
   b7352:	4620      	mov	r0, r4
   b7354:	f7ff fef5 	bl	b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7358:	a801      	add	r0, sp, #4
   b735a:	f7ff f9ca 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b735e:	2207      	movs	r2, #7
   b7360:	4629      	mov	r1, r5
   b7362:	a801      	add	r0, sp, #4
   b7364:	f7ff ff3d 	bl	b71e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7368:	a901      	add	r1, sp, #4
   b736a:	4620      	mov	r0, r4
   b736c:	f7ff fee9 	bl	b7142 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b7370:	a801      	add	r0, sp, #4
   b7372:	f7ff f9be 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7376:	4620      	mov	r0, r4
   b7378:	b005      	add	sp, #20
   b737a:	bd30      	pop	{r4, r5, pc}

000b737c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b737c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7380:	b08b      	sub	sp, #44	; 0x2c
   b7382:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b7384:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7388:	a801      	add	r0, sp, #4
   b738a:	f7ff feb1 	bl	b70f0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b738e:	9b02      	ldr	r3, [sp, #8]
   b7390:	2b00      	cmp	r3, #0
   b7392:	dd4a      	ble.n	b742a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b7394:	f104 0114 	add.w	r1, r4, #20
   b7398:	a804      	add	r0, sp, #16
   b739a:	f7ff ffa9 	bl	b72f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b739e:	f104 0108 	add.w	r1, r4, #8
   b73a2:	a807      	add	r0, sp, #28
   b73a4:	f7ff ffa4 	bl	b72f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b73a8:	9d05      	ldr	r5, [sp, #20]
   b73aa:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b73ac:	2d00      	cmp	r5, #0
   b73ae:	dc01      	bgt.n	b73b4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b73b0:	2e00      	cmp	r6, #0
   b73b2:	dd38      	ble.n	b7426 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b73b4:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b73b6:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b73b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b73bc:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b73c0:	2314      	movs	r3, #20
   b73c2:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b73c6:	fb03 8505 	mla	r5, r3, r5, r8
   b73ca:	fb03 9606 	mla	r6, r3, r6, r9
   b73ce:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b73d0:	45ba      	cmp	sl, r7
   b73d2:	d028      	beq.n	b7426 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b73d4:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b73d6:	45ab      	cmp	fp, r5
   b73d8:	d015      	beq.n	b7406 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b73da:	4659      	mov	r1, fp
   b73dc:	4650      	mov	r0, sl
   b73de:	f7ff f804 	bl	b63ea <_ZNK8particle7BleUuideqERKS0_>
   b73e2:	f10b 0b14 	add.w	fp, fp, #20
   b73e6:	4604      	mov	r4, r0
   b73e8:	2800      	cmp	r0, #0
   b73ea:	d0f4      	beq.n	b73d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b73ec:	a807      	add	r0, sp, #28
   b73ee:	f7ff f980 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b73f2:	a804      	add	r0, sp, #16
   b73f4:	f7ff f97d 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b73f8:	a801      	add	r0, sp, #4
   b73fa:	f7ff f97a 	bl	b66f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b73fe:	4620      	mov	r0, r4
   b7400:	b00b      	add	sp, #44	; 0x2c
   b7402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7406:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b7408:	45b3      	cmp	fp, r6
   b740a:	d009      	beq.n	b7420 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b740c:	4659      	mov	r1, fp
   b740e:	4650      	mov	r0, sl
   b7410:	f7fe ffeb 	bl	b63ea <_ZNK8particle7BleUuideqERKS0_>
   b7414:	f10b 0b14 	add.w	fp, fp, #20
   b7418:	4604      	mov	r4, r0
   b741a:	2800      	cmp	r0, #0
   b741c:	d0f4      	beq.n	b7408 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b741e:	e7e5      	b.n	b73ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b7420:	f10a 0a14 	add.w	sl, sl, #20
   b7424:	e7d4      	b.n	b73d0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7426:	2400      	movs	r4, #0
   b7428:	e7e0      	b.n	b73ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b742a:	2401      	movs	r4, #1
   b742c:	e7e4      	b.n	b73f8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b742e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b742e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7432:	4604      	mov	r4, r0
   b7434:	460d      	mov	r5, r1
   b7436:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7438:	d914      	bls.n	b7464 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b743a:	4290      	cmp	r0, r2
   b743c:	d213      	bcs.n	b7466 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b743e:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b7442:	1a75      	subs	r5, r6, r1
   b7444:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b7448:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b744a:	42b7      	cmp	r7, r6
   b744c:	d018      	beq.n	b7480 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b744e:	b11c      	cbz	r4, b7458 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7450:	4631      	mov	r1, r6
   b7452:	4620      	mov	r0, r4
   b7454:	f7ff fbc9 	bl	b6bea <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b7458:	4630      	mov	r0, r6
   b745a:	f7ff f90b 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b745e:	3e24      	subs	r6, #36	; 0x24
   b7460:	3c24      	subs	r4, #36	; 0x24
   b7462:	e7f2      	b.n	b744a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7464:	d00c      	beq.n	b7480 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7466:	42b5      	cmp	r5, r6
   b7468:	d00a      	beq.n	b7480 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b746a:	b11c      	cbz	r4, b7474 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b746c:	4629      	mov	r1, r5
   b746e:	4620      	mov	r0, r4
   b7470:	f7ff fbbb 	bl	b6bea <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b7474:	4628      	mov	r0, r5
   b7476:	f7ff f8fd 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b747a:	3524      	adds	r5, #36	; 0x24
   b747c:	3424      	adds	r4, #36	; 0x24
   b747e:	e7f2      	b.n	b7466 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7482 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b7484:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7486:	4605      	mov	r5, r0
        if (n > 0) {
   b7488:	dd13      	ble.n	b74b2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b748a:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b748c:	fb07 f006 	mul.w	r0, r7, r6
   b7490:	f7fd f992 	bl	b47b8 <malloc>
            if (!d) {
   b7494:	4604      	mov	r4, r0
   b7496:	b158      	cbz	r0, b74b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b7498:	e9d5 1200 	ldrd	r1, r2, [r5]
   b749c:	fb07 1202 	mla	r2, r7, r2, r1
   b74a0:	f7ff ffc5 	bl	b742e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b74a4:	6828      	ldr	r0, [r5, #0]
   b74a6:	f7fd f98f 	bl	b47c8 <free>
        data_ = d;
   b74aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b74ac:	60ae      	str	r6, [r5, #8]
        return true;
   b74ae:	2001      	movs	r0, #1
    }
   b74b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b74b2:	2400      	movs	r4, #0
   b74b4:	e7f6      	b.n	b74a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b74b6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b74b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74ba:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b74bc:	ad01      	add	r5, sp, #4
   b74be:	4606      	mov	r6, r0
   b74c0:	4628      	mov	r0, r5
   b74c2:	460c      	mov	r4, r1
   b74c4:	f7fe ff4d 	bl	b6362 <_ZN8particle10BleAddressC1Ev>
   b74c8:	a803      	add	r0, sp, #12
   b74ca:	f7ff fc69 	bl	b6da0 <_ZN8particle18BleAdvertisingDataC1Ev>
   b74ce:	a806      	add	r0, sp, #24
   b74d0:	f7ff fc66 	bl	b6da0 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b74d4:	6930      	ldr	r0, [r6, #16]
   b74d6:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b74d8:	89f2      	ldrh	r2, [r6, #14]
   b74da:	ab13      	add	r3, sp, #76	; 0x4c
   b74dc:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b74de:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b74e2:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b74e4:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b74e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b74ea:	a806      	add	r0, sp, #24
   b74ec:	f7ff fbcc 	bl	b6c88 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b74f0:	89b2      	ldrh	r2, [r6, #12]
   b74f2:	6871      	ldr	r1, [r6, #4]
   b74f4:	a803      	add	r0, sp, #12
   b74f6:	f7ff fbc7 	bl	b6c88 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b74fa:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b74fe:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b7500:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b7502:	d003      	beq.n	b750c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b7504:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7508:	429a      	cmp	r2, r3
   b750a:	db5c      	blt.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b750c:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b7510:	2b7f      	cmp	r3, #127	; 0x7f
   b7512:	d003      	beq.n	b751c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b7514:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b7518:	429a      	cmp	r2, r3
   b751a:	dc54      	bgt.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b751c:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b7520:	4638      	mov	r0, r7
   b7522:	f7ff fa57 	bl	b69d4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b7526:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b7528:	2b00      	cmp	r3, #0
   b752a:	dd52      	ble.n	b75d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b752c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b752e:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b7532:	45b1      	cmp	r9, r6
   b7534:	d050      	beq.n	b75d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b7536:	4630      	mov	r0, r6
   b7538:	4629      	mov	r1, r5
   b753a:	f7fe fefe 	bl	b633a <_ZNK8particle10BleAddresseqERKS0_>
   b753e:	3608      	adds	r6, #8
   b7540:	4680      	mov	r8, r0
   b7542:	2800      	cmp	r0, #0
   b7544:	d0f5      	beq.n	b7532 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b7546:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b7548:	f7fd f93e 	bl	b47c8 <free>
        if (!delegator->filterByRssi(result) ||
   b754c:	f1b8 0f00 	cmp.w	r8, #0
   b7550:	d039      	beq.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b7552:	4629      	mov	r1, r5
   b7554:	4620      	mov	r0, r4
   b7556:	f7ff fa00 	bl	b695a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b755a:	b3a0      	cbz	r0, b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b755c:	4629      	mov	r1, r5
   b755e:	4620      	mov	r0, r4
   b7560:	f7ff ff0c 	bl	b737c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b7564:	4606      	mov	r6, r0
   b7566:	b370      	cbz	r0, b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b7568:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b756c:	4638      	mov	r0, r7
   b756e:	f7ff fa7c 	bl	b6a6a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b7572:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7574:	2b00      	cmp	r3, #0
   b7576:	dd12      	ble.n	b759e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b7578:	a806      	add	r0, sp, #24
   b757a:	f7fe ff95 	bl	b64a8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b757e:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b7580:	a803      	add	r0, sp, #12
   b7582:	f7fe ff91 	bl	b64a8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b7586:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b758a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b758e:	429a      	cmp	r2, r3
   b7590:	d025      	beq.n	b75de <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b7592:	f833 1b02 	ldrh.w	r1, [r3], #2
   b7596:	4588      	cmp	r8, r1
   b7598:	d001      	beq.n	b759e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b759a:	4288      	cmp	r0, r1
   b759c:	d1f7      	bne.n	b758e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b759e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b75a0:	f7fd f912 	bl	b47c8 <free>
              !delegator->filterByServiceUUID(result) ||
   b75a4:	b17e      	cbz	r6, b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b75a6:	4629      	mov	r1, r5
   b75a8:	4620      	mov	r0, r4
   b75aa:	f7ff fa93 	bl	b6ad4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b75ae:	b150      	cbz	r0, b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b75b0:	6a23      	ldr	r3, [r4, #32]
   b75b2:	b1b3      	cbz	r3, b75e2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b75b4:	6963      	ldr	r3, [r4, #20]
   b75b6:	9513      	str	r5, [sp, #76]	; 0x4c
   b75b8:	3301      	adds	r3, #1
   b75ba:	6163      	str	r3, [r4, #20]
   b75bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b75be:	4639      	mov	r1, r7
   b75c0:	f104 0018 	add.w	r0, r4, #24
   b75c4:	4798      	blx	r3
            return;
   b75c6:	4628      	mov	r0, r5
   b75c8:	f7ff f854 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
    }
   b75cc:	b01d      	add	sp, #116	; 0x74
   b75ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b75d2:	f04f 0801 	mov.w	r8, #1
   b75d6:	e7b6      	b.n	b7546 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b75d8:	f04f 0800 	mov.w	r8, #0
   b75dc:	e7b3      	b.n	b7546 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b75de:	2600      	movs	r6, #0
   b75e0:	e7dd      	b.n	b759e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b75e2:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b75e6:	f1b8 0f00 	cmp.w	r8, #0
   b75ea:	d007      	beq.n	b75fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b75ec:	6963      	ldr	r3, [r4, #20]
   b75ee:	3301      	adds	r3, #1
   b75f0:	6163      	str	r3, [r4, #20]
   b75f2:	4629      	mov	r1, r5
   b75f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b75f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b75fa:	e7e3      	b.n	b75c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b75fc:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b7600:	f1bc 0f00 	cmp.w	ip, #0
   b7604:	d025      	beq.n	b7652 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b7606:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7608:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b760a:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b760c:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b760e:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b7610:	d8d9      	bhi.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b7612:	2224      	movs	r2, #36	; 0x24
   b7614:	4353      	muls	r3, r2
    address_ = addr.address_;
   b7616:	462a      	mov	r2, r5
   b7618:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b761a:	3b24      	subs	r3, #36	; 0x24
   b761c:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b7620:	f84c 0003 	str.w	r0, [ip, r3]
   b7624:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b7626:	f106 0008 	add.w	r0, r6, #8
   b762a:	a903      	add	r1, sp, #12
   b762c:	f7ff faf4 	bl	b6c18 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b7630:	a906      	add	r1, sp, #24
   b7632:	f106 0014 	add.w	r0, r6, #20
   b7636:	f7ff faef 	bl	b6c18 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b763a:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b763e:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b7642:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b7646:	429a      	cmp	r2, r3
   b7648:	d3bd      	bcc.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b764a:	4640      	mov	r0, r8
   b764c:	f7fc ffb0 	bl	b45b0 <hal_ble_gap_stop_scan>
   b7650:	e7b9      	b.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b7652:	e895 0003 	ldmia.w	r5, {r0, r1}
   b7656:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b765a:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b765e:	a903      	add	r1, sp, #12
   b7660:	a80c      	add	r0, sp, #48	; 0x30
   b7662:	f7fd fa27 	bl	b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b7666:	a906      	add	r1, sp, #24
   b7668:	a80f      	add	r0, sp, #60	; 0x3c
   b766a:	f7fd fa23 	bl	b4ab4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b766e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b7672:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b7676:	4641      	mov	r1, r8
   b7678:	4638      	mov	r0, r7
   b767a:	6866      	ldr	r6, [r4, #4]
   b767c:	f7ff fab5 	bl	b6bea <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7680:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7684:	4299      	cmp	r1, r3
   b7686:	da10      	bge.n	b76aa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b7688:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b768a:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b768c:	2224      	movs	r2, #36	; 0x24
   b768e:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b7692:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b7696:	fb02 3201 	mla	r2, r2, r1, r3
   b769a:	4631      	mov	r1, r6
   b769c:	f7ff fec7 	bl	b742e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b76a0:	b986      	cbnz	r6, b76c4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b76a2:	6863      	ldr	r3, [r4, #4]
   b76a4:	3301      	adds	r3, #1
   b76a6:	6063      	str	r3, [r4, #4]
    return true;
   b76a8:	e005      	b.n	b76b6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76aa:	3101      	adds	r1, #1
   b76ac:	4620      	mov	r0, r4
   b76ae:	f7ff fee8 	bl	b7482 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b76b2:	2800      	cmp	r0, #0
   b76b4:	d1e8      	bne.n	b7688 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b76b6:	4638      	mov	r0, r7
   b76b8:	f7fe ffdc 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b76bc:	4640      	mov	r0, r8
   b76be:	f7fe ffd9 	bl	b6674 <_ZN8particle13BleScanResultD1Ev>
   b76c2:	e780      	b.n	b75c6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b76c4:	4639      	mov	r1, r7
   b76c6:	4630      	mov	r0, r6
   b76c8:	f7ff fa8f 	bl	b6bea <_ZN8particle13BleScanResultC1EOS0_>
   b76cc:	e7e9      	b.n	b76a2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

000b76d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b76d0:	4802      	ldr	r0, [pc, #8]	; (b76dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b76d2:	2300      	movs	r3, #0
   b76d4:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b76d6:	f7fc bf2b 	b.w	b4530 <os_mutex_recursive_create>
   b76da:	bf00      	nop
   b76dc:	2003e720 	.word	0x2003e720

000b76e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b76e0:	4770      	bx	lr

000b76e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b76e2:	7441      	strb	r1, [r0, #17]
}
   b76e4:	4770      	bx	lr

000b76e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b76e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b76e8:	7c00      	ldrb	r0, [r0, #16]
   b76ea:	f7fc ff01 	bl	b44f0 <hal_usart_available_data_for_write>
}
   b76ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76f2:	bd08      	pop	{r3, pc}

000b76f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b76f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b76f6:	7c00      	ldrb	r0, [r0, #16]
   b76f8:	f7fc feda 	bl	b44b0 <hal_usart_available>
}
   b76fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7700:	bd08      	pop	{r3, pc}

000b7702 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7702:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7704:	7c00      	ldrb	r0, [r0, #16]
   b7706:	f7fc fee3 	bl	b44d0 <hal_usart_peek>
}
   b770a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b770e:	bd08      	pop	{r3, pc}

000b7710 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7710:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7712:	7c00      	ldrb	r0, [r0, #16]
   b7714:	f7fc fed4 	bl	b44c0 <hal_usart_read>
}
   b7718:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b771c:	bd08      	pop	{r3, pc}

000b771e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b771e:	7c00      	ldrb	r0, [r0, #16]
   b7720:	f7fc bede 	b.w	b44e0 <hal_usart_flush>

000b7724 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7724:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7726:	7c45      	ldrb	r5, [r0, #17]
{
   b7728:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b772a:	b12d      	cbz	r5, b7738 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b772c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b772e:	b003      	add	sp, #12
   b7730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7734:	f7fc beb4 	b.w	b44a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7738:	7c00      	ldrb	r0, [r0, #16]
   b773a:	9101      	str	r1, [sp, #4]
   b773c:	f7fc fed8 	bl	b44f0 <hal_usart_available_data_for_write>
   b7740:	2800      	cmp	r0, #0
   b7742:	9901      	ldr	r1, [sp, #4]
   b7744:	dcf2      	bgt.n	b772c <_ZN11USARTSerial5writeEh+0x8>
}
   b7746:	4628      	mov	r0, r5
   b7748:	b003      	add	sp, #12
   b774a:	bd30      	pop	{r4, r5, pc}

000b774c <_ZN11USARTSerialD0Ev>:
   b774c:	b510      	push	{r4, lr}
   b774e:	2114      	movs	r1, #20
   b7750:	4604      	mov	r4, r0
   b7752:	f7fc fcb4 	bl	b40be <_ZdlPvj>
   b7756:	4620      	mov	r0, r4
   b7758:	bd10      	pop	{r4, pc}
	...

000b775c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b775c:	b510      	push	{r4, lr}
   b775e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7762:	4604      	mov	r4, r0
   b7764:	4608      	mov	r0, r1
   b7766:	4611      	mov	r1, r2
   b7768:	2200      	movs	r2, #0
   b776a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b776e:	4b04      	ldr	r3, [pc, #16]	; (b7780 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7770:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7772:	2301      	movs	r3, #1
  _serial = serial;
   b7774:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7776:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7778:	f7fc feca 	bl	b4510 <hal_usart_init_ex>
}
   b777c:	4620      	mov	r0, r4
   b777e:	bd10      	pop	{r4, pc}
   b7780:	000b8380 	.word	0x000b8380

000b7784 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b7784:	7c00      	ldrb	r0, [r0, #16]
   b7786:	2300      	movs	r3, #0
   b7788:	f7fc beba 	b.w	b4500 <hal_usart_begin_config>

000b778c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b778c:	2200      	movs	r2, #0
   b778e:	f7ff bff9 	b.w	b7784 <_ZN11USARTSerial5beginEmm>

000b7792 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b7792:	7c00      	ldrb	r0, [r0, #16]
   b7794:	f7fc be7c 	b.w	b4490 <hal_usart_end>

000b7798 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7798:	4b05      	ldr	r3, [pc, #20]	; (b77b0 <_GLOBAL__sub_I_System+0x18>)
   b779a:	2202      	movs	r2, #2
   b779c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b779e:	4b05      	ldr	r3, [pc, #20]	; (b77b4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b77a0:	4a05      	ldr	r2, [pc, #20]	; (b77b8 <_GLOBAL__sub_I_System+0x20>)
   b77a2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b77a4:	2000      	movs	r0, #0
   b77a6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b77aa:	f7fc bfe1 	b.w	b4770 <set_system_mode>
   b77ae:	bf00      	nop
   b77b0:	2003e734 	.word	0x2003e734
   b77b4:	2003e728 	.word	0x2003e728
   b77b8:	ffff0000 	.word	0xffff0000

000b77bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b77bc:	2200      	movs	r2, #0
   b77be:	6840      	ldr	r0, [r0, #4]
   b77c0:	4611      	mov	r1, r2
   b77c2:	f7fc bfad 	b.w	b4720 <network_listening>

000b77c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b77c6:	2200      	movs	r2, #0
   b77c8:	6840      	ldr	r0, [r0, #4]
   b77ca:	4611      	mov	r1, r2
   b77cc:	f7fc bfb8 	b.w	b4740 <network_get_listen_timeout>

000b77d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b77d0:	6840      	ldr	r0, [r0, #4]
   b77d2:	2200      	movs	r2, #0
   b77d4:	f7fc bfac 	b.w	b4730 <network_set_listen_timeout>

000b77d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b77d8:	6840      	ldr	r0, [r0, #4]
   b77da:	2200      	movs	r2, #0
   b77dc:	f081 0101 	eor.w	r1, r1, #1
   b77e0:	f7fc bf96 	b.w	b4710 <network_listen>

000b77e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b77e4:	2300      	movs	r3, #0
   b77e6:	6840      	ldr	r0, [r0, #4]
   b77e8:	461a      	mov	r2, r3
   b77ea:	4619      	mov	r1, r3
   b77ec:	f7fc bf88 	b.w	b4700 <network_off>

000b77f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b77f0:	2300      	movs	r3, #0
   b77f2:	6840      	ldr	r0, [r0, #4]
   b77f4:	461a      	mov	r2, r3
   b77f6:	4619      	mov	r1, r3
   b77f8:	f7fc bf7a 	b.w	b46f0 <network_on>

000b77fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b77fc:	2200      	movs	r2, #0
   b77fe:	6840      	ldr	r0, [r0, #4]
   b7800:	4611      	mov	r1, r2
   b7802:	f7fc bf6d 	b.w	b46e0 <network_ready>

000b7806 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7806:	2200      	movs	r2, #0
   b7808:	6840      	ldr	r0, [r0, #4]
   b780a:	4611      	mov	r1, r2
   b780c:	f7fc bf58 	b.w	b46c0 <network_connecting>

000b7810 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7810:	6840      	ldr	r0, [r0, #4]
   b7812:	2200      	movs	r2, #0
   b7814:	2102      	movs	r1, #2
   b7816:	f7fc bf5b 	b.w	b46d0 <network_disconnect>

000b781a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b781a:	2300      	movs	r3, #0
   b781c:	6840      	ldr	r0, [r0, #4]
   b781e:	461a      	mov	r2, r3
   b7820:	f7fc bf46 	b.w	b46b0 <network_connect>

000b7824 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b7824:	4b02      	ldr	r3, [pc, #8]	; (b7830 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7826:	2203      	movs	r2, #3
   b7828:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b782a:	4a02      	ldr	r2, [pc, #8]	; (b7834 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b782c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b782e:	4770      	bx	lr
   b7830:	2003e738 	.word	0x2003e738
   b7834:	000b83b0 	.word	0x000b83b0

000b7838 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7838:	b510      	push	{r4, lr}
   b783a:	4604      	mov	r4, r0
{
	free(buffer);
   b783c:	6800      	ldr	r0, [r0, #0]
   b783e:	f7fc ffc3 	bl	b47c8 <free>
}
   b7842:	4620      	mov	r0, r4
   b7844:	bd10      	pop	{r4, pc}

000b7846 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7846:	b510      	push	{r4, lr}
   b7848:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b784a:	6800      	ldr	r0, [r0, #0]
   b784c:	b108      	cbz	r0, b7852 <_ZN6String10invalidateEv+0xc>
   b784e:	f7fc ffbb 	bl	b47c8 <free>
	buffer = NULL;
   b7852:	2300      	movs	r3, #0
	capacity = len = 0;
   b7854:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7858:	6023      	str	r3, [r4, #0]
}
   b785a:	bd10      	pop	{r4, pc}

000b785c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b785c:	b538      	push	{r3, r4, r5, lr}
   b785e:	4604      	mov	r4, r0
   b7860:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7862:	6800      	ldr	r0, [r0, #0]
   b7864:	3101      	adds	r1, #1
   b7866:	f7fc ffb7 	bl	b47d8 <realloc>
	if (newbuffer) {
   b786a:	b110      	cbz	r0, b7872 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b786c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7870:	2001      	movs	r0, #1
	}
	return 0;
}
   b7872:	bd38      	pop	{r3, r4, r5, pc}

000b7874 <_ZN6String7reserveEj>:
{
   b7874:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7876:	6803      	ldr	r3, [r0, #0]
{
   b7878:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b787a:	b123      	cbz	r3, b7886 <_ZN6String7reserveEj+0x12>
   b787c:	6843      	ldr	r3, [r0, #4]
   b787e:	428b      	cmp	r3, r1
   b7880:	d301      	bcc.n	b7886 <_ZN6String7reserveEj+0x12>
   b7882:	2001      	movs	r0, #1
}
   b7884:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7886:	4620      	mov	r0, r4
   b7888:	f7ff ffe8 	bl	b785c <_ZN6String12changeBufferEj>
   b788c:	2800      	cmp	r0, #0
   b788e:	d0f9      	beq.n	b7884 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7890:	68a3      	ldr	r3, [r4, #8]
   b7892:	2b00      	cmp	r3, #0
   b7894:	d1f5      	bne.n	b7882 <_ZN6String7reserveEj+0xe>
   b7896:	6822      	ldr	r2, [r4, #0]
   b7898:	7013      	strb	r3, [r2, #0]
   b789a:	e7f2      	b.n	b7882 <_ZN6String7reserveEj+0xe>

000b789c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b789c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b789e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b78a0:	4611      	mov	r1, r2
   b78a2:	9201      	str	r2, [sp, #4]
{
   b78a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b78a6:	f7ff ffe5 	bl	b7874 <_ZN6String7reserveEj>
   b78aa:	9a01      	ldr	r2, [sp, #4]
   b78ac:	b928      	cbnz	r0, b78ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b78ae:	4620      	mov	r0, r4
   b78b0:	f7ff ffc9 	bl	b7846 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b78b4:	4620      	mov	r0, r4
   b78b6:	b003      	add	sp, #12
   b78b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b78ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b78bc:	4629      	mov	r1, r5
   b78be:	6820      	ldr	r0, [r4, #0]
   b78c0:	f000 fa18 	bl	b7cf4 <memcpy>
	buffer[len] = 0;
   b78c4:	6822      	ldr	r2, [r4, #0]
   b78c6:	68a3      	ldr	r3, [r4, #8]
   b78c8:	2100      	movs	r1, #0
   b78ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   b78cc:	e7f2      	b.n	b78b4 <_ZN6String4copyEPKcj+0x18>

000b78ce <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b78ce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b78d0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b78d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b78d6:	4604      	mov	r4, r0
	len = 0;
   b78d8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b78da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b78dc:	b141      	cbz	r1, b78f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b78de:	4608      	mov	r0, r1
   b78e0:	9101      	str	r1, [sp, #4]
   b78e2:	f7fc fba5 	bl	b4030 <strlen>
   b78e6:	9901      	ldr	r1, [sp, #4]
   b78e8:	4602      	mov	r2, r0
   b78ea:	4620      	mov	r0, r4
   b78ec:	f7ff ffd6 	bl	b789c <_ZN6String4copyEPKcj>
}
   b78f0:	4620      	mov	r0, r4
   b78f2:	b002      	add	sp, #8
   b78f4:	bd10      	pop	{r4, pc}

000b78f6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b78f6:	b538      	push	{r3, r4, r5, lr}
   b78f8:	4605      	mov	r5, r0
	if (buffer) {
   b78fa:	6800      	ldr	r0, [r0, #0]
{
   b78fc:	460c      	mov	r4, r1
	if (buffer) {
   b78fe:	b168      	cbz	r0, b791c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7900:	686a      	ldr	r2, [r5, #4]
   b7902:	688b      	ldr	r3, [r1, #8]
   b7904:	429a      	cmp	r2, r3
   b7906:	d307      	bcc.n	b7918 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7908:	6809      	ldr	r1, [r1, #0]
   b790a:	f000 fa68 	bl	b7dde <strcpy>
			len = rhs.len;
   b790e:	68a3      	ldr	r3, [r4, #8]
   b7910:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7912:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7914:	60a3      	str	r3, [r4, #8]
}
   b7916:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7918:	f7fc ff56 	bl	b47c8 <free>
	buffer = rhs.buffer;
   b791c:	6823      	ldr	r3, [r4, #0]
   b791e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7920:	6863      	ldr	r3, [r4, #4]
   b7922:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7924:	68a3      	ldr	r3, [r4, #8]
   b7926:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7928:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b792a:	e9c4 3300 	strd	r3, r3, [r4]
   b792e:	e7f1      	b.n	b7914 <_ZN6String4moveERS_+0x1e>

000b7930 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7930:	b510      	push	{r4, lr}
	buffer = NULL;
   b7932:	2300      	movs	r3, #0
	capacity = 0;
   b7934:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7938:	4604      	mov	r4, r0
	len = 0;
   b793a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b793c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b793e:	f7ff ffda 	bl	b78f6 <_ZN6String4moveERS_>
}
   b7942:	4620      	mov	r0, r4
   b7944:	bd10      	pop	{r4, pc}

000b7946 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7946:	4288      	cmp	r0, r1
{
   b7948:	b510      	push	{r4, lr}
   b794a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b794c:	d005      	beq.n	b795a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b794e:	680b      	ldr	r3, [r1, #0]
   b7950:	b12b      	cbz	r3, b795e <_ZN6StringaSERKS_+0x18>
   b7952:	688a      	ldr	r2, [r1, #8]
   b7954:	4619      	mov	r1, r3
   b7956:	f7ff ffa1 	bl	b789c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b795a:	4620      	mov	r0, r4
   b795c:	bd10      	pop	{r4, pc}
	else invalidate();
   b795e:	f7ff ff72 	bl	b7846 <_ZN6String10invalidateEv>
   b7962:	e7fa      	b.n	b795a <_ZN6StringaSERKS_+0x14>

000b7964 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7964:	b510      	push	{r4, lr}
	buffer = NULL;
   b7966:	2300      	movs	r3, #0
String::String(const String &value)
   b7968:	4604      	mov	r4, r0
	capacity = 0;
   b796a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b796e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7970:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7972:	f7ff ffe8 	bl	b7946 <_ZN6StringaSERKS_>
}
   b7976:	4620      	mov	r0, r4
   b7978:	bd10      	pop	{r4, pc}

000b797a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b797a:	b570      	push	{r4, r5, r6, lr}
   b797c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b797e:	460e      	mov	r6, r1
   b7980:	b909      	cbnz	r1, b7986 <_ZN6String6concatEPKcj+0xc>
   b7982:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7984:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7986:	b16a      	cbz	r2, b79a4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7988:	6884      	ldr	r4, [r0, #8]
   b798a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b798c:	4621      	mov	r1, r4
   b798e:	f7ff ff71 	bl	b7874 <_ZN6String7reserveEj>
   b7992:	2800      	cmp	r0, #0
   b7994:	d0f5      	beq.n	b7982 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7996:	6828      	ldr	r0, [r5, #0]
   b7998:	68ab      	ldr	r3, [r5, #8]
   b799a:	4631      	mov	r1, r6
   b799c:	4418      	add	r0, r3
   b799e:	f000 fa1e 	bl	b7dde <strcpy>
	len = newlen;
   b79a2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b79a4:	2001      	movs	r0, #1
   b79a6:	e7ed      	b.n	b7984 <_ZN6String6concatEPKcj+0xa>

000b79a8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b79a8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b79aa:	2300      	movs	r3, #0
	buf[0] = c;
   b79ac:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b79b0:	2201      	movs	r2, #1
   b79b2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b79b4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b79b8:	f7ff ffdf 	bl	b797a <_ZN6String6concatEPKcj>
}
   b79bc:	b003      	add	sp, #12
   b79be:	f85d fb04 	ldr.w	pc, [sp], #4

000b79c2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b79c2:	6802      	ldr	r2, [r0, #0]
{
   b79c4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b79c6:	6809      	ldr	r1, [r1, #0]
   b79c8:	b162      	cbz	r2, b79e4 <_ZNK6String9compareToERKS_+0x22>
   b79ca:	b941      	cbnz	r1, b79de <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b79cc:	6880      	ldr	r0, [r0, #8]
   b79ce:	b160      	cbz	r0, b79ea <_ZNK6String9compareToERKS_+0x28>
   b79d0:	7810      	ldrb	r0, [r2, #0]
   b79d2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b79d4:	6898      	ldr	r0, [r3, #8]
   b79d6:	b140      	cbz	r0, b79ea <_ZNK6String9compareToERKS_+0x28>
   b79d8:	7809      	ldrb	r1, [r1, #0]
   b79da:	4248      	negs	r0, r1
   b79dc:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b79de:	4610      	mov	r0, r2
   b79e0:	f7fc bb1c 	b.w	b401c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b79e4:	2900      	cmp	r1, #0
   b79e6:	d1f5      	bne.n	b79d4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b79e8:	4608      	mov	r0, r1
}
   b79ea:	4770      	bx	lr

000b79ec <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b79ec:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b79ee:	6882      	ldr	r2, [r0, #8]
   b79f0:	688b      	ldr	r3, [r1, #8]
   b79f2:	429a      	cmp	r2, r3
   b79f4:	d105      	bne.n	b7a02 <_ZNK6String6equalsERKS_+0x16>
   b79f6:	f7ff ffe4 	bl	b79c2 <_ZNK6String9compareToERKS_>
   b79fa:	fab0 f080 	clz	r0, r0
   b79fe:	0940      	lsrs	r0, r0, #5
}
   b7a00:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b7a02:	2000      	movs	r0, #0
   b7a04:	e7fc      	b.n	b7a00 <_ZNK6String6equalsERKS_+0x14>

000b7a06 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a06:	4770      	bx	lr

000b7a08 <_Z20acquireSerial1Bufferv>:
{
   b7a08:	b538      	push	{r3, r4, r5, lr}
   b7a0a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7a0c:	2514      	movs	r5, #20
   b7a0e:	462a      	mov	r2, r5
   b7a10:	2100      	movs	r1, #0
   b7a12:	f000 f997 	bl	b7d44 <memset>
   b7a16:	8025      	strh	r5, [r4, #0]
   b7a18:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a1a:	4907      	ldr	r1, [pc, #28]	; (b7a38 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7a1c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a1e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7a20:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a22:	f000 f831 	bl	b7a88 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a26:	4904      	ldr	r1, [pc, #16]	; (b7a38 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7a28:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7a2a:	4628      	mov	r0, r5
   b7a2c:	f000 f82c 	bl	b7a88 <_ZnajRKSt9nothrow_t>
    };
   b7a30:	60e0      	str	r0, [r4, #12]
}
   b7a32:	4620      	mov	r0, r4
   b7a34:	bd38      	pop	{r3, r4, r5, pc}
   b7a36:	bf00      	nop
   b7a38:	000b83e4 	.word	0x000b83e4

000b7a3c <_Z22__fetch_global_Serial1v>:
{
   b7a3c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a3e:	4d0e      	ldr	r5, [pc, #56]	; (b7a78 <_Z22__fetch_global_Serial1v+0x3c>)
   b7a40:	7829      	ldrb	r1, [r5, #0]
   b7a42:	f3bf 8f5b 	dmb	ish
   b7a46:	f011 0401 	ands.w	r4, r1, #1
{
   b7a4a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7a4c:	d111      	bne.n	b7a72 <_Z22__fetch_global_Serial1v+0x36>
   b7a4e:	4628      	mov	r0, r5
   b7a50:	f7fc fb44 	bl	b40dc <__cxa_guard_acquire>
   b7a54:	b168      	cbz	r0, b7a72 <_Z22__fetch_global_Serial1v+0x36>
   b7a56:	a801      	add	r0, sp, #4
   b7a58:	f7ff ffd6 	bl	b7a08 <_Z20acquireSerial1Bufferv>
   b7a5c:	aa01      	add	r2, sp, #4
   b7a5e:	4621      	mov	r1, r4
   b7a60:	4806      	ldr	r0, [pc, #24]	; (b7a7c <_Z22__fetch_global_Serial1v+0x40>)
   b7a62:	f7ff fe7b 	bl	b775c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7a66:	4628      	mov	r0, r5
   b7a68:	f7fc fb3d 	bl	b40e6 <__cxa_guard_release>
   b7a6c:	4804      	ldr	r0, [pc, #16]	; (b7a80 <_Z22__fetch_global_Serial1v+0x44>)
   b7a6e:	f000 f923 	bl	b7cb8 <atexit>
    return serial1;
}
   b7a72:	4802      	ldr	r0, [pc, #8]	; (b7a7c <_Z22__fetch_global_Serial1v+0x40>)
   b7a74:	b007      	add	sp, #28
   b7a76:	bd30      	pop	{r4, r5, pc}
   b7a78:	2003e744 	.word	0x2003e744
   b7a7c:	2003e748 	.word	0x2003e748
   b7a80:	000b7a07 	.word	0x000b7a07

000b7a84 <_ZnwjRKSt9nothrow_t>:
   b7a84:	f7fc bb17 	b.w	b40b6 <_Znwj>

000b7a88 <_ZnajRKSt9nothrow_t>:
   b7a88:	f7fc bb17 	b.w	b40ba <_Znaj>

000b7a8c <_ZSt25__throw_bad_function_callv>:
   b7a8c:	b508      	push	{r3, lr}
   b7a8e:	f7fc feb3 	bl	b47f8 <abort>
	...

000b7a94 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7a94:	4901      	ldr	r1, [pc, #4]	; (b7a9c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7a96:	f000 b8f9 	b.w	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7a9a:	bf00      	nop
   b7a9c:	000b8400 	.word	0x000b8400

000b7aa0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7aa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7aa2:	2400      	movs	r4, #0
   b7aa4:	2310      	movs	r3, #16
   b7aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7aaa:	6803      	ldr	r3, [r0, #0]
   b7aac:	4615      	mov	r5, r2
   b7aae:	699e      	ldr	r6, [r3, #24]
   b7ab0:	6812      	ldr	r2, [r2, #0]
   b7ab2:	466b      	mov	r3, sp
   b7ab4:	e9cd 4400 	strd	r4, r4, [sp]
   b7ab8:	47b0      	blx	r6
   b7aba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7abe:	f003 0306 	and.w	r3, r3, #6
   b7ac2:	2b06      	cmp	r3, #6
   b7ac4:	bf03      	ittte	eq
   b7ac6:	9b00      	ldreq	r3, [sp, #0]
   b7ac8:	602b      	streq	r3, [r5, #0]
   b7aca:	2001      	moveq	r0, #1
   b7acc:	4620      	movne	r0, r4
   b7ace:	b004      	add	sp, #16
   b7ad0:	bd70      	pop	{r4, r5, r6, pc}

000b7ad2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7ad2:	9800      	ldr	r0, [sp, #0]
   b7ad4:	4290      	cmp	r0, r2
   b7ad6:	bf14      	ite	ne
   b7ad8:	2001      	movne	r0, #1
   b7ada:	2006      	moveq	r0, #6
   b7adc:	4770      	bx	lr
	...

000b7ae0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7ae0:	b510      	push	{r4, lr}
   b7ae2:	4b03      	ldr	r3, [pc, #12]	; (b7af0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7ae4:	6003      	str	r3, [r0, #0]
   b7ae6:	4604      	mov	r4, r0
   b7ae8:	f000 f8cd 	bl	b7c86 <_ZNSt9type_infoD1Ev>
   b7aec:	4620      	mov	r0, r4
   b7aee:	bd10      	pop	{r4, pc}
   b7af0:	000b8440 	.word	0x000b8440

000b7af4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7af4:	b510      	push	{r4, lr}
   b7af6:	4604      	mov	r4, r0
   b7af8:	f7ff fff2 	bl	b7ae0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7afc:	4620      	mov	r0, r4
   b7afe:	2108      	movs	r1, #8
   b7b00:	f7fc fadd 	bl	b40be <_ZdlPvj>
   b7b04:	4620      	mov	r0, r4
   b7b06:	bd10      	pop	{r4, pc}

000b7b08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b0c:	461f      	mov	r7, r3
   b7b0e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7b12:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7b16:	4598      	cmp	r8, r3
   b7b18:	4606      	mov	r6, r0
   b7b1a:	4615      	mov	r5, r2
   b7b1c:	d107      	bne.n	b7b2e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b1e:	9907      	ldr	r1, [sp, #28]
   b7b20:	f000 f8b4 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7b24:	b118      	cbz	r0, b7b2e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7b26:	7165      	strb	r5, [r4, #5]
   b7b28:	2000      	movs	r0, #0
   b7b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7b2e:	4639      	mov	r1, r7
   b7b30:	4630      	mov	r0, r6
   b7b32:	f000 f8ab 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7b36:	2800      	cmp	r0, #0
   b7b38:	d0f6      	beq.n	b7b28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7b3a:	2301      	movs	r3, #1
   b7b3c:	f8c4 8000 	str.w	r8, [r4]
   b7b40:	7125      	strb	r5, [r4, #4]
   b7b42:	71a3      	strb	r3, [r4, #6]
   b7b44:	e7f0      	b.n	b7b28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7b46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7b46:	b538      	push	{r3, r4, r5, lr}
   b7b48:	4615      	mov	r5, r2
   b7b4a:	461c      	mov	r4, r3
   b7b4c:	f000 f89e 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7b50:	b120      	cbz	r0, b7b5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7b52:	2308      	movs	r3, #8
   b7b54:	60e3      	str	r3, [r4, #12]
   b7b56:	2306      	movs	r3, #6
   b7b58:	6025      	str	r5, [r4, #0]
   b7b5a:	7123      	strb	r3, [r4, #4]
   b7b5c:	bd38      	pop	{r3, r4, r5, pc}

000b7b5e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7b60:	4605      	mov	r5, r0
   b7b62:	460c      	mov	r4, r1
   b7b64:	9201      	str	r2, [sp, #4]
   b7b66:	461e      	mov	r6, r3
   b7b68:	f000 f890 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7b6c:	b950      	cbnz	r0, b7b84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b6e:	2e03      	cmp	r6, #3
   b7b70:	d808      	bhi.n	b7b84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7b72:	6823      	ldr	r3, [r4, #0]
   b7b74:	9a01      	ldr	r2, [sp, #4]
   b7b76:	695b      	ldr	r3, [r3, #20]
   b7b78:	4629      	mov	r1, r5
   b7b7a:	4620      	mov	r0, r4
   b7b7c:	b002      	add	sp, #8
   b7b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7b82:	4718      	bx	r3
   b7b84:	b002      	add	sp, #8
   b7b86:	bd70      	pop	{r4, r5, r6, pc}

000b7b88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7b88:	b510      	push	{r4, lr}
   b7b8a:	4b03      	ldr	r3, [pc, #12]	; (b7b98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7b8c:	6003      	str	r3, [r0, #0]
   b7b8e:	4604      	mov	r4, r0
   b7b90:	f7ff ffa6 	bl	b7ae0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7b94:	4620      	mov	r0, r4
   b7b96:	bd10      	pop	{r4, pc}
   b7b98:	000b84a0 	.word	0x000b84a0

000b7b9c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7b9c:	b510      	push	{r4, lr}
   b7b9e:	4604      	mov	r4, r0
   b7ba0:	f7ff fff2 	bl	b7b88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	210c      	movs	r1, #12
   b7ba8:	f7fc fa89 	bl	b40be <_ZdlPvj>
   b7bac:	4620      	mov	r0, r4
   b7bae:	bd10      	pop	{r4, pc}

000b7bb0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7bb2:	9f08      	ldr	r7, [sp, #32]
   b7bb4:	4297      	cmp	r7, r2
   b7bb6:	4605      	mov	r5, r0
   b7bb8:	460e      	mov	r6, r1
   b7bba:	4614      	mov	r4, r2
   b7bbc:	d00a      	beq.n	b7bd4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7bbe:	68a8      	ldr	r0, [r5, #8]
   b7bc0:	6802      	ldr	r2, [r0, #0]
   b7bc2:	9708      	str	r7, [sp, #32]
   b7bc4:	6a15      	ldr	r5, [r2, #32]
   b7bc6:	4631      	mov	r1, r6
   b7bc8:	4622      	mov	r2, r4
   b7bca:	46ac      	mov	ip, r5
   b7bcc:	b003      	add	sp, #12
   b7bce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7bd2:	4760      	bx	ip
   b7bd4:	4619      	mov	r1, r3
   b7bd6:	9301      	str	r3, [sp, #4]
   b7bd8:	f000 f858 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7bdc:	9b01      	ldr	r3, [sp, #4]
   b7bde:	2800      	cmp	r0, #0
   b7be0:	d0ed      	beq.n	b7bbe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7be2:	2006      	movs	r0, #6
   b7be4:	b003      	add	sp, #12
   b7be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7be8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7be8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7bec:	460d      	mov	r5, r1
   b7bee:	4619      	mov	r1, r3
   b7bf0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7bf4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7bf8:	4681      	mov	r9, r0
   b7bfa:	4617      	mov	r7, r2
   b7bfc:	4698      	mov	r8, r3
   b7bfe:	f000 f845 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7c02:	b190      	cbz	r0, b7c2a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7c04:	2d00      	cmp	r5, #0
   b7c06:	6034      	str	r4, [r6, #0]
   b7c08:	7137      	strb	r7, [r6, #4]
   b7c0a:	db09      	blt.n	b7c20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7c0c:	1961      	adds	r1, r4, r5
   b7c0e:	458a      	cmp	sl, r1
   b7c10:	bf0c      	ite	eq
   b7c12:	2106      	moveq	r1, #6
   b7c14:	2101      	movne	r1, #1
   b7c16:	71b1      	strb	r1, [r6, #6]
   b7c18:	2000      	movs	r0, #0
   b7c1a:	b001      	add	sp, #4
   b7c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7c20:	3502      	adds	r5, #2
   b7c22:	d1f9      	bne.n	b7c18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c24:	2301      	movs	r3, #1
   b7c26:	71b3      	strb	r3, [r6, #6]
   b7c28:	e7f6      	b.n	b7c18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c2a:	4554      	cmp	r4, sl
   b7c2c:	d106      	bne.n	b7c3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c2e:	4659      	mov	r1, fp
   b7c30:	4648      	mov	r0, r9
   b7c32:	f000 f82b 	bl	b7c8c <_ZNKSt9type_infoeqERKS_>
   b7c36:	b108      	cbz	r0, b7c3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7c38:	7177      	strb	r7, [r6, #5]
   b7c3a:	e7ed      	b.n	b7c18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7c3c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7c40:	6803      	ldr	r3, [r0, #0]
   b7c42:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7c46:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7c4a:	69dc      	ldr	r4, [r3, #28]
   b7c4c:	463a      	mov	r2, r7
   b7c4e:	4643      	mov	r3, r8
   b7c50:	4629      	mov	r1, r5
   b7c52:	46a4      	mov	ip, r4
   b7c54:	b001      	add	sp, #4
   b7c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c5a:	4760      	bx	ip

000b7c5c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c60:	4607      	mov	r7, r0
   b7c62:	460c      	mov	r4, r1
   b7c64:	4615      	mov	r5, r2
   b7c66:	461e      	mov	r6, r3
   b7c68:	f7ff ff6d 	bl	b7b46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7c6c:	b948      	cbnz	r0, b7c82 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7c6e:	68b8      	ldr	r0, [r7, #8]
   b7c70:	6803      	ldr	r3, [r0, #0]
   b7c72:	699f      	ldr	r7, [r3, #24]
   b7c74:	462a      	mov	r2, r5
   b7c76:	4633      	mov	r3, r6
   b7c78:	4621      	mov	r1, r4
   b7c7a:	46bc      	mov	ip, r7
   b7c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7c80:	4760      	bx	ip
   b7c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c86 <_ZNSt9type_infoD1Ev>:
   b7c86:	4770      	bx	lr

000b7c88 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7c88:	2000      	movs	r0, #0
   b7c8a:	4770      	bx	lr

000b7c8c <_ZNKSt9type_infoeqERKS_>:
   b7c8c:	4281      	cmp	r1, r0
   b7c8e:	b508      	push	{r3, lr}
   b7c90:	d00e      	beq.n	b7cb0 <_ZNKSt9type_infoeqERKS_+0x24>
   b7c92:	6840      	ldr	r0, [r0, #4]
   b7c94:	7803      	ldrb	r3, [r0, #0]
   b7c96:	2b2a      	cmp	r3, #42	; 0x2a
   b7c98:	d00c      	beq.n	b7cb4 <_ZNKSt9type_infoeqERKS_+0x28>
   b7c9a:	6849      	ldr	r1, [r1, #4]
   b7c9c:	780b      	ldrb	r3, [r1, #0]
   b7c9e:	2b2a      	cmp	r3, #42	; 0x2a
   b7ca0:	bf08      	it	eq
   b7ca2:	3101      	addeq	r1, #1
   b7ca4:	f7fc f9ba 	bl	b401c <strcmp>
   b7ca8:	fab0 f080 	clz	r0, r0
   b7cac:	0940      	lsrs	r0, r0, #5
   b7cae:	bd08      	pop	{r3, pc}
   b7cb0:	2001      	movs	r0, #1
   b7cb2:	e7fc      	b.n	b7cae <_ZNKSt9type_infoeqERKS_+0x22>
   b7cb4:	2000      	movs	r0, #0
   b7cb6:	e7fa      	b.n	b7cae <_ZNKSt9type_infoeqERKS_+0x22>

000b7cb8 <atexit>:
   b7cb8:	2300      	movs	r3, #0
   b7cba:	4601      	mov	r1, r0
   b7cbc:	461a      	mov	r2, r3
   b7cbe:	4618      	mov	r0, r3
   b7cc0:	f000 b94a 	b.w	b7f58 <__register_exitproc>

000b7cc4 <isprint>:
   b7cc4:	4b02      	ldr	r3, [pc, #8]	; (b7cd0 <isprint+0xc>)
   b7cc6:	4418      	add	r0, r3
   b7cc8:	7840      	ldrb	r0, [r0, #1]
   b7cca:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7cce:	4770      	bx	lr
   b7cd0:	000b856d 	.word	0x000b856d

000b7cd4 <memcmp>:
   b7cd4:	b510      	push	{r4, lr}
   b7cd6:	3901      	subs	r1, #1
   b7cd8:	4402      	add	r2, r0
   b7cda:	4290      	cmp	r0, r2
   b7cdc:	d101      	bne.n	b7ce2 <memcmp+0xe>
   b7cde:	2000      	movs	r0, #0
   b7ce0:	e005      	b.n	b7cee <memcmp+0x1a>
   b7ce2:	7803      	ldrb	r3, [r0, #0]
   b7ce4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7ce8:	42a3      	cmp	r3, r4
   b7cea:	d001      	beq.n	b7cf0 <memcmp+0x1c>
   b7cec:	1b18      	subs	r0, r3, r4
   b7cee:	bd10      	pop	{r4, pc}
   b7cf0:	3001      	adds	r0, #1
   b7cf2:	e7f2      	b.n	b7cda <memcmp+0x6>

000b7cf4 <memcpy>:
   b7cf4:	440a      	add	r2, r1
   b7cf6:	4291      	cmp	r1, r2
   b7cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7cfc:	d100      	bne.n	b7d00 <memcpy+0xc>
   b7cfe:	4770      	bx	lr
   b7d00:	b510      	push	{r4, lr}
   b7d02:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7d06:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7d0a:	4291      	cmp	r1, r2
   b7d0c:	d1f9      	bne.n	b7d02 <memcpy+0xe>
   b7d0e:	bd10      	pop	{r4, pc}

000b7d10 <memmove>:
   b7d10:	4288      	cmp	r0, r1
   b7d12:	b510      	push	{r4, lr}
   b7d14:	eb01 0402 	add.w	r4, r1, r2
   b7d18:	d902      	bls.n	b7d20 <memmove+0x10>
   b7d1a:	4284      	cmp	r4, r0
   b7d1c:	4623      	mov	r3, r4
   b7d1e:	d807      	bhi.n	b7d30 <memmove+0x20>
   b7d20:	1e43      	subs	r3, r0, #1
   b7d22:	42a1      	cmp	r1, r4
   b7d24:	d008      	beq.n	b7d38 <memmove+0x28>
   b7d26:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7d2e:	e7f8      	b.n	b7d22 <memmove+0x12>
   b7d30:	4402      	add	r2, r0
   b7d32:	4601      	mov	r1, r0
   b7d34:	428a      	cmp	r2, r1
   b7d36:	d100      	bne.n	b7d3a <memmove+0x2a>
   b7d38:	bd10      	pop	{r4, pc}
   b7d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7d42:	e7f7      	b.n	b7d34 <memmove+0x24>

000b7d44 <memset>:
   b7d44:	4402      	add	r2, r0
   b7d46:	4603      	mov	r3, r0
   b7d48:	4293      	cmp	r3, r2
   b7d4a:	d100      	bne.n	b7d4e <memset+0xa>
   b7d4c:	4770      	bx	lr
   b7d4e:	f803 1b01 	strb.w	r1, [r3], #1
   b7d52:	e7f9      	b.n	b7d48 <memset+0x4>

000b7d54 <srand>:
   b7d54:	b538      	push	{r3, r4, r5, lr}
   b7d56:	4b10      	ldr	r3, [pc, #64]	; (b7d98 <srand+0x44>)
   b7d58:	681d      	ldr	r5, [r3, #0]
   b7d5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7d5c:	4604      	mov	r4, r0
   b7d5e:	b9b3      	cbnz	r3, b7d8e <srand+0x3a>
   b7d60:	2018      	movs	r0, #24
   b7d62:	f7fc fd29 	bl	b47b8 <malloc>
   b7d66:	4602      	mov	r2, r0
   b7d68:	63a8      	str	r0, [r5, #56]	; 0x38
   b7d6a:	b920      	cbnz	r0, b7d76 <srand+0x22>
   b7d6c:	4b0b      	ldr	r3, [pc, #44]	; (b7d9c <srand+0x48>)
   b7d6e:	480c      	ldr	r0, [pc, #48]	; (b7da0 <srand+0x4c>)
   b7d70:	2142      	movs	r1, #66	; 0x42
   b7d72:	f7fc fd51 	bl	b4818 <__assert_func>
   b7d76:	490b      	ldr	r1, [pc, #44]	; (b7da4 <srand+0x50>)
   b7d78:	4b0b      	ldr	r3, [pc, #44]	; (b7da8 <srand+0x54>)
   b7d7a:	e9c0 1300 	strd	r1, r3, [r0]
   b7d7e:	4b0b      	ldr	r3, [pc, #44]	; (b7dac <srand+0x58>)
   b7d80:	6083      	str	r3, [r0, #8]
   b7d82:	230b      	movs	r3, #11
   b7d84:	8183      	strh	r3, [r0, #12]
   b7d86:	2100      	movs	r1, #0
   b7d88:	2001      	movs	r0, #1
   b7d8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7d8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7d90:	2200      	movs	r2, #0
   b7d92:	611c      	str	r4, [r3, #16]
   b7d94:	615a      	str	r2, [r3, #20]
   b7d96:	bd38      	pop	{r3, r4, r5, pc}
   b7d98:	2003e1bc 	.word	0x2003e1bc
   b7d9c:	000b84d9 	.word	0x000b84d9
   b7da0:	000b84f0 	.word	0x000b84f0
   b7da4:	abcd330e 	.word	0xabcd330e
   b7da8:	e66d1234 	.word	0xe66d1234
   b7dac:	0005deec 	.word	0x0005deec

000b7db0 <strchr>:
   b7db0:	b2c9      	uxtb	r1, r1
   b7db2:	4603      	mov	r3, r0
   b7db4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7db8:	b11a      	cbz	r2, b7dc2 <strchr+0x12>
   b7dba:	428a      	cmp	r2, r1
   b7dbc:	d1f9      	bne.n	b7db2 <strchr+0x2>
   b7dbe:	4618      	mov	r0, r3
   b7dc0:	4770      	bx	lr
   b7dc2:	2900      	cmp	r1, #0
   b7dc4:	bf18      	it	ne
   b7dc6:	2300      	movne	r3, #0
   b7dc8:	e7f9      	b.n	b7dbe <strchr+0xe>

000b7dca <strchrnul>:
   b7dca:	b510      	push	{r4, lr}
   b7dcc:	4604      	mov	r4, r0
   b7dce:	f7ff ffef 	bl	b7db0 <strchr>
   b7dd2:	b918      	cbnz	r0, b7ddc <strchrnul+0x12>
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	f7fc f92b 	bl	b4030 <strlen>
   b7dda:	4420      	add	r0, r4
   b7ddc:	bd10      	pop	{r4, pc}

000b7dde <strcpy>:
   b7dde:	4603      	mov	r3, r0
   b7de0:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7de4:	f803 2b01 	strb.w	r2, [r3], #1
   b7de8:	2a00      	cmp	r2, #0
   b7dea:	d1f9      	bne.n	b7de0 <strcpy+0x2>
   b7dec:	4770      	bx	lr

000b7dee <strncmp>:
   b7dee:	b510      	push	{r4, lr}
   b7df0:	b17a      	cbz	r2, b7e12 <strncmp+0x24>
   b7df2:	4603      	mov	r3, r0
   b7df4:	3901      	subs	r1, #1
   b7df6:	1884      	adds	r4, r0, r2
   b7df8:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7dfc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7e00:	4290      	cmp	r0, r2
   b7e02:	d101      	bne.n	b7e08 <strncmp+0x1a>
   b7e04:	42a3      	cmp	r3, r4
   b7e06:	d101      	bne.n	b7e0c <strncmp+0x1e>
   b7e08:	1a80      	subs	r0, r0, r2
   b7e0a:	bd10      	pop	{r4, pc}
   b7e0c:	2800      	cmp	r0, #0
   b7e0e:	d1f3      	bne.n	b7df8 <strncmp+0xa>
   b7e10:	e7fa      	b.n	b7e08 <strncmp+0x1a>
   b7e12:	4610      	mov	r0, r2
   b7e14:	e7f9      	b.n	b7e0a <strncmp+0x1c>

000b7e16 <strrchr>:
   b7e16:	b538      	push	{r3, r4, r5, lr}
   b7e18:	4603      	mov	r3, r0
   b7e1a:	460c      	mov	r4, r1
   b7e1c:	b969      	cbnz	r1, b7e3a <strrchr+0x24>
   b7e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7e22:	f7ff bfc5 	b.w	b7db0 <strchr>
   b7e26:	1c43      	adds	r3, r0, #1
   b7e28:	4605      	mov	r5, r0
   b7e2a:	4621      	mov	r1, r4
   b7e2c:	4618      	mov	r0, r3
   b7e2e:	f7ff ffbf 	bl	b7db0 <strchr>
   b7e32:	2800      	cmp	r0, #0
   b7e34:	d1f7      	bne.n	b7e26 <strrchr+0x10>
   b7e36:	4628      	mov	r0, r5
   b7e38:	bd38      	pop	{r3, r4, r5, pc}
   b7e3a:	2500      	movs	r5, #0
   b7e3c:	e7f5      	b.n	b7e2a <strrchr+0x14>
	...

000b7e40 <_strtol_l.constprop.0>:
   b7e40:	2b01      	cmp	r3, #1
   b7e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e46:	d001      	beq.n	b7e4c <_strtol_l.constprop.0+0xc>
   b7e48:	2b24      	cmp	r3, #36	; 0x24
   b7e4a:	d906      	bls.n	b7e5a <_strtol_l.constprop.0+0x1a>
   b7e4c:	f7fc fcdc 	bl	b4808 <__errno>
   b7e50:	2316      	movs	r3, #22
   b7e52:	6003      	str	r3, [r0, #0]
   b7e54:	2000      	movs	r0, #0
   b7e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7f40 <_strtol_l.constprop.0+0x100>
   b7e5e:	460d      	mov	r5, r1
   b7e60:	462e      	mov	r6, r5
   b7e62:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7e66:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7e6a:	f017 0708 	ands.w	r7, r7, #8
   b7e6e:	d1f7      	bne.n	b7e60 <_strtol_l.constprop.0+0x20>
   b7e70:	2c2d      	cmp	r4, #45	; 0x2d
   b7e72:	d132      	bne.n	b7eda <_strtol_l.constprop.0+0x9a>
   b7e74:	782c      	ldrb	r4, [r5, #0]
   b7e76:	2701      	movs	r7, #1
   b7e78:	1cb5      	adds	r5, r6, #2
   b7e7a:	2b00      	cmp	r3, #0
   b7e7c:	d05b      	beq.n	b7f36 <_strtol_l.constprop.0+0xf6>
   b7e7e:	2b10      	cmp	r3, #16
   b7e80:	d109      	bne.n	b7e96 <_strtol_l.constprop.0+0x56>
   b7e82:	2c30      	cmp	r4, #48	; 0x30
   b7e84:	d107      	bne.n	b7e96 <_strtol_l.constprop.0+0x56>
   b7e86:	782c      	ldrb	r4, [r5, #0]
   b7e88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7e8c:	2c58      	cmp	r4, #88	; 0x58
   b7e8e:	d14d      	bne.n	b7f2c <_strtol_l.constprop.0+0xec>
   b7e90:	786c      	ldrb	r4, [r5, #1]
   b7e92:	2310      	movs	r3, #16
   b7e94:	3502      	adds	r5, #2
   b7e96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7e9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7e9e:	f04f 0c00 	mov.w	ip, #0
   b7ea2:	fbb8 f9f3 	udiv	r9, r8, r3
   b7ea6:	4666      	mov	r6, ip
   b7ea8:	fb03 8a19 	mls	sl, r3, r9, r8
   b7eac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7eb0:	f1be 0f09 	cmp.w	lr, #9
   b7eb4:	d816      	bhi.n	b7ee4 <_strtol_l.constprop.0+0xa4>
   b7eb6:	4674      	mov	r4, lr
   b7eb8:	42a3      	cmp	r3, r4
   b7eba:	dd24      	ble.n	b7f06 <_strtol_l.constprop.0+0xc6>
   b7ebc:	f1bc 0f00 	cmp.w	ip, #0
   b7ec0:	db1e      	blt.n	b7f00 <_strtol_l.constprop.0+0xc0>
   b7ec2:	45b1      	cmp	r9, r6
   b7ec4:	d31c      	bcc.n	b7f00 <_strtol_l.constprop.0+0xc0>
   b7ec6:	d101      	bne.n	b7ecc <_strtol_l.constprop.0+0x8c>
   b7ec8:	45a2      	cmp	sl, r4
   b7eca:	db19      	blt.n	b7f00 <_strtol_l.constprop.0+0xc0>
   b7ecc:	fb06 4603 	mla	r6, r6, r3, r4
   b7ed0:	f04f 0c01 	mov.w	ip, #1
   b7ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ed8:	e7e8      	b.n	b7eac <_strtol_l.constprop.0+0x6c>
   b7eda:	2c2b      	cmp	r4, #43	; 0x2b
   b7edc:	bf04      	itt	eq
   b7ede:	782c      	ldrbeq	r4, [r5, #0]
   b7ee0:	1cb5      	addeq	r5, r6, #2
   b7ee2:	e7ca      	b.n	b7e7a <_strtol_l.constprop.0+0x3a>
   b7ee4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7ee8:	f1be 0f19 	cmp.w	lr, #25
   b7eec:	d801      	bhi.n	b7ef2 <_strtol_l.constprop.0+0xb2>
   b7eee:	3c37      	subs	r4, #55	; 0x37
   b7ef0:	e7e2      	b.n	b7eb8 <_strtol_l.constprop.0+0x78>
   b7ef2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7ef6:	f1be 0f19 	cmp.w	lr, #25
   b7efa:	d804      	bhi.n	b7f06 <_strtol_l.constprop.0+0xc6>
   b7efc:	3c57      	subs	r4, #87	; 0x57
   b7efe:	e7db      	b.n	b7eb8 <_strtol_l.constprop.0+0x78>
   b7f00:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7f04:	e7e6      	b.n	b7ed4 <_strtol_l.constprop.0+0x94>
   b7f06:	f1bc 0f00 	cmp.w	ip, #0
   b7f0a:	da05      	bge.n	b7f18 <_strtol_l.constprop.0+0xd8>
   b7f0c:	2322      	movs	r3, #34	; 0x22
   b7f0e:	6003      	str	r3, [r0, #0]
   b7f10:	4646      	mov	r6, r8
   b7f12:	b942      	cbnz	r2, b7f26 <_strtol_l.constprop.0+0xe6>
   b7f14:	4630      	mov	r0, r6
   b7f16:	e79e      	b.n	b7e56 <_strtol_l.constprop.0+0x16>
   b7f18:	b107      	cbz	r7, b7f1c <_strtol_l.constprop.0+0xdc>
   b7f1a:	4276      	negs	r6, r6
   b7f1c:	2a00      	cmp	r2, #0
   b7f1e:	d0f9      	beq.n	b7f14 <_strtol_l.constprop.0+0xd4>
   b7f20:	f1bc 0f00 	cmp.w	ip, #0
   b7f24:	d000      	beq.n	b7f28 <_strtol_l.constprop.0+0xe8>
   b7f26:	1e69      	subs	r1, r5, #1
   b7f28:	6011      	str	r1, [r2, #0]
   b7f2a:	e7f3      	b.n	b7f14 <_strtol_l.constprop.0+0xd4>
   b7f2c:	2430      	movs	r4, #48	; 0x30
   b7f2e:	2b00      	cmp	r3, #0
   b7f30:	d1b1      	bne.n	b7e96 <_strtol_l.constprop.0+0x56>
   b7f32:	2308      	movs	r3, #8
   b7f34:	e7af      	b.n	b7e96 <_strtol_l.constprop.0+0x56>
   b7f36:	2c30      	cmp	r4, #48	; 0x30
   b7f38:	d0a5      	beq.n	b7e86 <_strtol_l.constprop.0+0x46>
   b7f3a:	230a      	movs	r3, #10
   b7f3c:	e7ab      	b.n	b7e96 <_strtol_l.constprop.0+0x56>
   b7f3e:	bf00      	nop
   b7f40:	000b856e 	.word	0x000b856e

000b7f44 <strtol>:
   b7f44:	4613      	mov	r3, r2
   b7f46:	460a      	mov	r2, r1
   b7f48:	4601      	mov	r1, r0
   b7f4a:	4802      	ldr	r0, [pc, #8]	; (b7f54 <strtol+0x10>)
   b7f4c:	6800      	ldr	r0, [r0, #0]
   b7f4e:	f7ff bf77 	b.w	b7e40 <_strtol_l.constprop.0>
   b7f52:	bf00      	nop
   b7f54:	2003e1bc 	.word	0x2003e1bc

000b7f58 <__register_exitproc>:
   b7f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f5c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8018 <__register_exitproc+0xc0>
   b7f60:	4606      	mov	r6, r0
   b7f62:	f8d8 0000 	ldr.w	r0, [r8]
   b7f66:	461f      	mov	r7, r3
   b7f68:	460d      	mov	r5, r1
   b7f6a:	4691      	mov	r9, r2
   b7f6c:	f000 f856 	bl	b801c <__retarget_lock_acquire_recursive>
   b7f70:	4b25      	ldr	r3, [pc, #148]	; (b8008 <__register_exitproc+0xb0>)
   b7f72:	681c      	ldr	r4, [r3, #0]
   b7f74:	b934      	cbnz	r4, b7f84 <__register_exitproc+0x2c>
   b7f76:	4c25      	ldr	r4, [pc, #148]	; (b800c <__register_exitproc+0xb4>)
   b7f78:	601c      	str	r4, [r3, #0]
   b7f7a:	4b25      	ldr	r3, [pc, #148]	; (b8010 <__register_exitproc+0xb8>)
   b7f7c:	b113      	cbz	r3, b7f84 <__register_exitproc+0x2c>
   b7f7e:	681b      	ldr	r3, [r3, #0]
   b7f80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7f84:	6863      	ldr	r3, [r4, #4]
   b7f86:	2b1f      	cmp	r3, #31
   b7f88:	dd07      	ble.n	b7f9a <__register_exitproc+0x42>
   b7f8a:	f8d8 0000 	ldr.w	r0, [r8]
   b7f8e:	f000 f847 	bl	b8020 <__retarget_lock_release_recursive>
   b7f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7f9a:	b34e      	cbz	r6, b7ff0 <__register_exitproc+0x98>
   b7f9c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7fa0:	b988      	cbnz	r0, b7fc6 <__register_exitproc+0x6e>
   b7fa2:	4b1c      	ldr	r3, [pc, #112]	; (b8014 <__register_exitproc+0xbc>)
   b7fa4:	b923      	cbnz	r3, b7fb0 <__register_exitproc+0x58>
   b7fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b7faa:	f000 f838 	bl	b801e <__retarget_lock_release>
   b7fae:	e7f0      	b.n	b7f92 <__register_exitproc+0x3a>
   b7fb0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7fb4:	f7fc fc00 	bl	b47b8 <malloc>
   b7fb8:	2800      	cmp	r0, #0
   b7fba:	d0f4      	beq.n	b7fa6 <__register_exitproc+0x4e>
   b7fbc:	2300      	movs	r3, #0
   b7fbe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7fc2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7fc6:	6863      	ldr	r3, [r4, #4]
   b7fc8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7fcc:	2201      	movs	r2, #1
   b7fce:	409a      	lsls	r2, r3
   b7fd0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7fd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7fd8:	4313      	orrs	r3, r2
   b7fda:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7fde:	2e02      	cmp	r6, #2
   b7fe0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7fe4:	bf02      	ittt	eq
   b7fe6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7fea:	4313      	orreq	r3, r2
   b7fec:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7ff0:	6863      	ldr	r3, [r4, #4]
   b7ff2:	f8d8 0000 	ldr.w	r0, [r8]
   b7ff6:	1c5a      	adds	r2, r3, #1
   b7ff8:	3302      	adds	r3, #2
   b7ffa:	6062      	str	r2, [r4, #4]
   b7ffc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8000:	f000 f80e 	bl	b8020 <__retarget_lock_release_recursive>
   b8004:	2000      	movs	r0, #0
   b8006:	e7c6      	b.n	b7f96 <__register_exitproc+0x3e>
   b8008:	2003e7e8 	.word	0x2003e7e8
   b800c:	2003e75c 	.word	0x2003e75c
   b8010:	00000000 	.word	0x00000000
   b8014:	000b47b9 	.word	0x000b47b9
   b8018:	2003e220 	.word	0x2003e220

000b801c <__retarget_lock_acquire_recursive>:
   b801c:	4770      	bx	lr

000b801e <__retarget_lock_release>:
   b801e:	4770      	bx	lr

000b8020 <__retarget_lock_release_recursive>:
   b8020:	4770      	bx	lr

000b8022 <link_code_end>:
	...

000b8024 <link_const_data_start>:
   b8024:	00000000 	.word	0x00000000
   b8028:	34fb0000 	.word	0x34fb0000
   b802c:	00805f9b 	.word	0x00805f9b
   b8030:	10008000 	.word	0x10008000
	...

000b803c <dynalib_user>:
   b803c:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b804c:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b805c:	72697620 6c617574 00000000               virtual....

000b8068 <_ZTVN5spark10LogHandlerE>:
	...
   b8078:	000b40c5 000b40ed                       .@...@..

000b8080 <_ZTVN8particle9LEDStatusE>:
	...
   b8088:	000b40f1 000b410d 000b40ef              .@...A...@..

000b8094 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b809c:	000b4121 000b4155 000b5e7d 000b6021     !A..UA..}^..!`..

000b80ac <_ZTVN5spark12NetworkClassE>:
	...
   b80b4:	000b4889 000b4893 000b489d 000b48a7     .H...H...H...H..
   b80c4:	000b48b1 000b48bd 000b48c9 000b48d1     .H...H...H...H..
   b80d4:	000b48d9 000b48e5 000b48ed 000b48f7     .H...H...H...H..
   b80e4:	000b4901                                .I..

000b80e8 <_ZTVN5spark9WiFiClassE>:
	...
   b80f0:	000b4a4b 000b4a41 000b4a37 000b49ed     KJ..AJ..7J...I..
   b8100:	000b4a2b 000b4a1f 000b48c9 000b48d1     +J...J...H...H..
   b8110:	000b4a13 000b4a0b 000b4a01 000b49f7     .J...J...J...I..
   b8120:	000b4901                                .I..

000b8124 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b812c:	25006425 25750075 00783430              %d.%u.u%04x.

000b8138 <_ZTV9USBSerial>:
	...
   b8140:	000b4ecf 000b4f37 000b4f0d 000b61cd     .N..7O...O...a..
   b8150:	000b4eff 000b4ed1 000b4ee1 000b4f31     .N...N...N..1O..
   b8160:	000b4ef1 000b4ec9                       .N...N..

000b8168 <_ZTV9IPAddress>:
	...
   b8170:	000b4fe9 000b4fd9 000b4fdb 252d5925     .O...O...O..%Y-%
   b8180:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   b8190:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
   b81a0:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
   b81b0:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
   b81c0:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
   b81d0:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
   b81e0:	69250020 74656400 736c6961 00203d20      .%i.details = .
   b81f0:	6d000a0d 6c006600 6e66006e 63007400     ...m.f.ln.fn.t.c
   b8200:	0065646f 61746564 00006c69              ode.detail..

000b820c <_ZTVN5spark16JSONStreamWriterE>:
	...
   b8214:	000b5251 000b5277 000b5235 000b4b1d     QR..wR..5R...K..

000b8224 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b822c:	000b5725 000b573d 000b5e7d 000b6021     %W..=W..}^..!`..

000b823c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b8244:	000b5751 000b5765 000b6059 000b523d     QW..eW..Y`..=R..

000b8254 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b825c:	000b524f 000b5285 000b5de1 000b523f     OR...R...]..?R..

000b826c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b8274:	000b524d 000b5293 000b5669 000b52b5     MR...R..iV...R..
   b8284:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   b8294:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   b82a4:	74530065 20747261 63736964 7265766f     e.Start discover
   b82b4:	20676e69 76726573 73656369 7341002e     ing services..As
   b82c4:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   b82d4:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   b82e4:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   b82f4:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   b8304:	6c696146 74206465 6c61206f 61636f6c     Failed to alloca
   b8314:	6d206574 726f6d65 46002179 656c6961     te memory!.Faile
   b8324:	6f742064 70706120 20646e65 72656570     d to append peer
   b8334:	6e654320 6c617274 76656420 2e656369      Central device.
   b8344:	6e6f4300 7463656e 44006465 6f637369     .Connected.Disco
   b8354:	63656e6e 00646574                       nnected.

000b835c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8364:	000b625f 000b6281 000b681b 000b628f     _b...b...h...b..
   b8374:	000b6261                                ab..

000b8378 <_ZTV11USARTSerial>:
	...
   b8380:	000b76e1 000b774d 000b7725 000b61cd     .v..Mw..%w...a..
   b8390:	000b76f5 000b7711 000b7703 000b771f     .v...w...w...w..
   b83a0:	000b76e3 000b76e7                       .v...v..

000b83a8 <_ZTVN5spark13EthernetClassE>:
	...
   b83b0:	000b781b 000b7811 000b7807 000b77fd     .x...x...x...w..
   b83c0:	000b77f1 000b77e5 000b48c9 000b48d1     .w...w...H...H..
   b83d0:	000b77d9 000b77d1 000b77c7 000b77bd     .w...w...w...w..
   b83e0:	000b4901                                .I..

000b83e4 <_ZSt7nothrow>:
	...

000b83e5 <_ZTSSt19_Sp_make_shared_tag>:
   b83e5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b83f5:	5f646572 00676174                        red_tag....

000b8400 <_ZTISt19_Sp_make_shared_tag>:
   b8400:	000b8440 000b83e5                       @.......

000b8408 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8408:	000b84a0 000b8414 000b84c4              ............

000b8414 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8414:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b8424:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b8434:	00000045                                E...

000b8438 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8438:	00000000 000b8408 000b7ae1 000b7af5     .........z...z..
   b8448:	000b7c89 000b7c89 000b7b5f 000b7aa1     .|...|.._{...z..
   b8458:	000b7b47 000b7b09 000b7ad3              G{...{...z..

000b8464 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8464:	000b84a0 000b8470 000b8408              ....p.......

000b8470 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8470:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b8480:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b8490:	456f666e 00000000                       nfoE....

000b8498 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8498:	00000000 000b8464 000b7b89 000b7b9d     ....d....{...{..
   b84a8:	000b7c89 000b7c89 000b7b5f 000b7aa1     .|...|.._{...z..
   b84b8:	000b7c5d 000b7be9 000b7bb1              ]|...{...{..

000b84c4 <_ZTISt9type_info>:
   b84c4:	000b8440 000b84cc                       @.......

000b84cc <_ZTSSt9type_info>:
   b84cc:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b84dc:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b84ec:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b84fc:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b850c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b851c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b852c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b853c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b854c:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b855c:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b856d <_ctype_>:
   b856d:	20202000 20202020 28282020 20282828     .         ((((( 
   b857d:	20202020 20202020 20202020 20202020                     
   b858d:	10108820 10101010 10101010 10101010      ...............
   b859d:	04040410 04040404 10040404 10101010     ................
   b85ad:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b85bd:	01010101 01010101 01010101 10101010     ................
   b85cd:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b85dd:	02020202 02020202 02020202 10101010     ................
   b85ed:	00000020 00000000 00000000 00000000      ...............
	...

000b866e <link_const_data_end>:
	...

000b8670 <link_constructors_location>:
   b8670:	000b433d 	.word	0x000b433d
   b8674:	000b49d9 	.word	0x000b49d9
   b8678:	000b4a55 	.word	0x000b4a55
   b867c:	000b5215 	.word	0x000b5215
   b8680:	000b5221 	.word	0x000b5221
   b8684:	000b5e6d 	.word	0x000b5e6d
   b8688:	000b76d1 	.word	0x000b76d1
   b868c:	000b7799 	.word	0x000b7799
   b8690:	000b7825 	.word	0x000b7825
