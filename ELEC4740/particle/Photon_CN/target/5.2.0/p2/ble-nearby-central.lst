
/home/elec4740/Documents/particle/ble-nearby-central/target/5.2.0/p2/ble-nearby-central.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fb358  085fb088  0000b358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00004c98  023fb360  085fb090  0000b360  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007a974  085ffd28  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005fc  1007a9ec  1007a9ec  0002a9ec  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffda0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000214  085ffda4  085ffda4  0001fda4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fda4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0010e273  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001085d  00000000  00000000  0012e273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b60  00000000  00000000  0013ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f29f  00000000  00000000  00141630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000358d2  00000000  00000000  001608cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6601  00000000  00000000  001961a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0003b652  00000000  00000000  0025c7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000b200  00000000  00000000  00297df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007e68  00000000  00000000  002a2ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	480e      	ldr	r0, [pc, #56]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb01a:	490f      	ldr	r1, [pc, #60]	; (85fb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a0e      	ldr	r2, [pc, #56]	; (85fb05c <module_user_pre_init+0x44>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b0d      	ldr	r3, [pc, #52]	; (85fb060 <module_user_pre_init+0x48>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	480d      	ldr	r0, [pc, #52]	; (85fb064 <module_user_pre_init+0x4c>)
 85fb030:	4a0d      	ldr	r2, [pc, #52]	; (85fb068 <module_user_pre_init+0x50>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b0d      	ldr	r3, [pc, #52]	; (85fb06c <module_user_pre_init+0x54>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb03a:	480d      	ldr	r0, [pc, #52]	; (85fb070 <module_user_pre_init+0x58>)
 85fb03c:	490d      	ldr	r1, [pc, #52]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a0d      	ldr	r2, [pc, #52]	; (85fb078 <module_user_pre_init+0x60>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb048:	4b05      	ldr	r3, [pc, #20]	; (85fb060 <module_user_pre_init+0x48>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb04e:	4801      	ldr	r0, [pc, #4]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb050:	bd08      	pop	{r3, pc}
 85fb052:	bf00      	nop
 85fb054:	1007a974 	.word	0x1007a974
 85fb058:	085ffd28 	.word	0x085ffd28
 85fb05c:	1007a9ec 	.word	0x1007a9ec
 85fb060:	10110d2d 	.word	0x10110d2d
 85fb064:	1007a9ec 	.word	0x1007a9ec
 85fb068:	1007afe8 	.word	0x1007afe8
 85fb06c:	10110ea1 	.word	0x10110ea1
 85fb070:	023fb358 	.word	0x023fb358
 85fb074:	085fb088 	.word	0x085fb088
 85fb078:	023ffff8 	.word	0x023ffff8

085fb07c <dynalib_preinit>:
 85fb07c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fb360 <strcmp>:
 23fb360:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fb364:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fb368:	2a01      	cmp	r2, #1
 23fb36a:	bf28      	it	cs
 23fb36c:	429a      	cmpcs	r2, r3
 23fb36e:	d0f7      	beq.n	23fb360 <strcmp>
 23fb370:	1ad0      	subs	r0, r2, r3
 23fb372:	4770      	bx	lr

023fb374 <strlen>:
 23fb374:	4603      	mov	r3, r0
 23fb376:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fb37a:	2a00      	cmp	r2, #0
 23fb37c:	d1fb      	bne.n	23fb376 <strlen+0x2>
 23fb37e:	1a18      	subs	r0, r3, r0
 23fb380:	3801      	subs	r0, #1
 23fb382:	4770      	bx	lr

023fb384 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fb384:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fb386:	f001 fa1d 	bl	23fc7c4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb38a:	2500      	movs	r5, #0
 23fb38c:	4e05      	ldr	r6, [pc, #20]	; (23fb3a4 <module_user_init+0x20>)
 23fb38e:	4c06      	ldr	r4, [pc, #24]	; (23fb3a8 <module_user_init+0x24>)
 23fb390:	1ba4      	subs	r4, r4, r6
 23fb392:	08a4      	lsrs	r4, r4, #2
 23fb394:	42ac      	cmp	r4, r5
 23fb396:	d100      	bne.n	23fb39a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fb398:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fb39a:	f856 3b04 	ldr.w	r3, [r6], #4
 23fb39e:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fb3a0:	3501      	adds	r5, #1
 23fb3a2:	e7f7      	b.n	23fb394 <module_user_init+0x10>
 23fb3a4:	023fffd4 	.word	0x023fffd4
 23fb3a8:	023ffff8 	.word	0x023ffff8

023fb3ac <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fb3ac:	f000 b878 	b.w	23fb4a0 <setup>

023fb3b0 <module_user_loop>:
}

void module_user_loop() {
 23fb3b0:	b508      	push	{r3, lr}
    loop();
 23fb3b2:	f000 f87d 	bl	23fb4b0 <loop>
    _post_loop();
}
 23fb3b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fb3ba:	f001 b9bb 	b.w	23fc734 <_post_loop>

023fb3be <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fb3be:	f000 bd07 	b.w	23fbdd0 <malloc>

023fb3c2 <_Znaj>:
 23fb3c2:	f000 bd05 	b.w	23fbdd0 <malloc>

023fb3c6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fb3c6:	f000 bd11 	b.w	23fbdec <free>
	...

023fb3cc <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3cc:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fb3ce:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fb3d0:	4a02      	ldr	r2, [pc, #8]	; (23fb3dc <__cxa_pure_virtual+0x10>)
 23fb3d2:	4903      	ldr	r1, [pc, #12]	; (23fb3e0 <__cxa_pure_virtual+0x14>)
 23fb3d4:	f000 fbba 	bl	23fbb4c <panic_>
  while (1);
 23fb3d8:	e7fe      	b.n	23fb3d8 <__cxa_pure_virtual+0xc>
 23fb3da:	bf00      	nop
 23fb3dc:	023fbadd 	.word	0x023fbadd
 23fb3e0:	023ff96c 	.word	0x023ff96c

023fb3e4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fb3e4:	7800      	ldrb	r0, [r0, #0]
 23fb3e6:	fab0 f080 	clz	r0, r0
 23fb3ea:	0940      	lsrs	r0, r0, #5
 23fb3ec:	4770      	bx	lr

023fb3ee <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fb3ee:	2301      	movs	r3, #1
 23fb3f0:	7003      	strb	r3, [r0, #0]
 23fb3f2:	4770      	bx	lr

023fb3f4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fb3f4:	4770      	bx	lr

023fb3f6 <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
 23fb3f6:	4770      	bx	lr

023fb3f8 <_ZN8particle9LEDStatusD1Ev>:
    led_set_status_active(&d_, active, nullptr);
 23fb3f8:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
 23fb3fa:	b510      	push	{r4, lr}
 23fb3fc:	4604      	mov	r4, r0
 23fb3fe:	4b04      	ldr	r3, [pc, #16]	; (23fb410 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
 23fb400:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
 23fb402:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
 23fb406:	f000 fbe7 	bl	23fbbd8 <led_set_status_active>
}
 23fb40a:	4620      	mov	r0, r4
 23fb40c:	bd10      	pop	{r4, pc}
 23fb40e:	bf00      	nop
 23fb410:	023ff9e4 	.word	0x023ff9e4

023fb414 <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
 23fb414:	b510      	push	{r4, lr}
 23fb416:	4604      	mov	r4, r0
}
 23fb418:	f7ff ffee 	bl	23fb3f8 <_ZN8particle9LEDStatusD1Ev>
 23fb41c:	4620      	mov	r0, r4
 23fb41e:	2120      	movs	r1, #32
 23fb420:	f7ff ffd1 	bl	23fb3c6 <_ZdlPvj>
 23fb424:	4620      	mov	r0, r4
 23fb426:	bd10      	pop	{r4, pc}

023fb428 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fb428:	b510      	push	{r4, lr}
 23fb42a:	4604      	mov	r4, r0
 23fb42c:	4b09      	ldr	r3, [pc, #36]	; (23fb454 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fb42e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fb430:	f001 fb92 	bl	23fcb58 <_ZN5spark10LogManager8instanceEv>
 23fb434:	4621      	mov	r1, r4
 23fb436:	f001 fddb 	bl	23fcff0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fb43a:	f001 f8a7 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fb43e:	f001 f899 	bl	23fc574 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fb442:	4620      	mov	r0, r4
 23fb444:	4b04      	ldr	r3, [pc, #16]	; (23fb458 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fb446:	f840 3b04 	str.w	r3, [r0], #4
 23fb44a:	f001 fc6d 	bl	23fcd28 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fb44e:	4620      	mov	r0, r4
 23fb450:	bd10      	pop	{r4, pc}
 23fb452:	bf00      	nop
 23fb454:	023ff9f8 	.word	0x023ff9f8
 23fb458:	023ff9cc 	.word	0x023ff9cc

023fb45c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fb45c:	b510      	push	{r4, lr}
 23fb45e:	4604      	mov	r4, r0
    }
 23fb460:	f7ff ffe2 	bl	23fb428 <_ZN5spark16SerialLogHandlerD1Ev>
 23fb464:	4620      	mov	r0, r4
 23fb466:	2124      	movs	r1, #36	; 0x24
 23fb468:	f7ff ffad 	bl	23fb3c6 <_ZdlPvj>
 23fb46c:	4620      	mov	r0, r4
 23fb46e:	bd10      	pop	{r4, pc}

023fb470 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23fb470:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fb472:	f04f 0c20 	mov.w	ip, #32
 23fb476:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23fb478:	b500      	push	{lr}
 23fb47a:	b08c      	sub	sp, #48	; 0x30
 23fb47c:	aa0d      	add	r2, sp, #52	; 0x34
 23fb47e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fb482:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb486:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fb48a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fb48c:	6801      	ldr	r1, [r0, #0]
 23fb48e:	aa04      	add	r2, sp, #16
 23fb490:	201e      	movs	r0, #30
 23fb492:	f000 fb77 	bl	23fbb84 <log_message_v>
}
 23fb496:	b00c      	add	sp, #48	; 0x30
 23fb498:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb49c:	b003      	add	sp, #12
 23fb49e:	4770      	bx	lr

023fb4a0 <setup>:
int BOOL_var = 0;

BleScanResult scanResults[SCAN_RESULT_MAX];
LEDStatus ledOverride(RGB_COLOR_WHITE, LED_PATTERN_SOLID, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

void setup() {
 23fb4a0:	b508      	push	{r3, lr}
	// (void)logHandler; // Does nothing, just to eliminate the unused variable warning
	BLE.on();
 23fb4a2:	f002 fc4b 	bl	23fdd3c <_ZN8particle14BleLocalDevice11getInstanceEv>
#if SYSTEM_VERSION == SYSTEM_VERSION_v310
	// This is required with 3.1.0 only
	BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
#endif 
  
}
 23fb4a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BLE.on();
 23fb4aa:	f002 bc63 	b.w	23fdd74 <_ZNK8particle14BleLocalDevice2onEv>
	...

023fb4b0 <loop>:

void loop() {
 23fb4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb4b4:	b095      	sub	sp, #84	; 0x54
	// Only scan for 500 milliseconds

	BLE.setScanTimeout(50);
 23fb4b6:	f002 fc41 	bl	23fdd3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb4ba:	2132      	movs	r1, #50	; 0x32
 23fb4bc:	f002 fca0 	bl	23fde00 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
	int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
 23fb4c0:	f002 fc3c 	bl	23fdd3c <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fb4c4:	221e      	movs	r2, #30
 23fb4c6:	4937      	ldr	r1, [pc, #220]	; (23fb5a4 <loop+0xf4>)
 23fb4c8:	f002 fce4 	bl	23fde94 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>

	uint32_t curColorCode;
	int curRssi = -999;

	for (int ii = 0; ii < count; ii++) {
 23fb4cc:	2600      	movs	r6, #0
	int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
 23fb4ce:	4680      	mov	r8, r0
	for (int ii = 0; ii < count; ii++) {
 23fb4d0:	4c34      	ldr	r4, [pc, #208]	; (23fb5a4 <loop+0xf4>)
	int curRssi = -999;
 23fb4d2:	4d35      	ldr	r5, [pc, #212]	; (23fb5a8 <loop+0xf8>)
				// Company ID and internal packet identifier match

				uint32_t colorCode;
				memcpy(&colorCode, &buf[3], 4);

				Log.info("colorCode: 0x%lx rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X ",
 23fb4d4:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 23fb5b4 <loop+0x104>
 23fb4d8:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 23fb5b8 <loop+0x108>
	for (int ii = 0; ii < count; ii++) {
 23fb4dc:	4546      	cmp	r6, r8
 23fb4de:	da4f      	bge.n	23fb580 <loop+0xd0>
		len = scanResults[ii].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, BLE_MAX_ADV_DATA_LEN);
 23fb4e0:	231f      	movs	r3, #31
 23fb4e2:	21ff      	movs	r1, #255	; 0xff
 23fb4e4:	aa0c      	add	r2, sp, #48	; 0x30
 23fb4e6:	f104 0008 	add.w	r0, r4, #8
 23fb4ea:	f002 fb24 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
		if (len == 7) {
 23fb4ee:	2807      	cmp	r0, #7
 23fb4f0:	d143      	bne.n	23fb57a <loop+0xca>
			if (buf[0] == 0xff && buf[1] == 0xff && buf[2] == 0x55) {
 23fb4f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 23fb4f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 23fb4fa:	4013      	ands	r3, r2
 23fb4fc:	2bff      	cmp	r3, #255	; 0xff
 23fb4fe:	d13c      	bne.n	23fb57a <loop+0xca>
 23fb500:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 23fb504:	2b55      	cmp	r3, #85	; 0x55
 23fb506:	d138      	bne.n	23fb57a <loop+0xca>
				Log.info("colorCode: 0x%lx rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X ",
 23fb508:	f994 3020 	ldrsb.w	r3, [r4, #32]
						colorCode, scanResults[ii].rssi(),
						scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
 23fb50c:	2100      	movs	r1, #0
 23fb50e:	4620      	mov	r0, r4
				Log.info("colorCode: 0x%lx rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X ",
 23fb510:	930b      	str	r3, [sp, #44]	; 0x2c
 23fb512:	f8dd 9033 	ldr.w	r9, [sp, #51]	; 0x33
						scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
 23fb516:	f002 fa1f 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
 23fb51a:	2101      	movs	r1, #1
 23fb51c:	9007      	str	r0, [sp, #28]
 23fb51e:	4620      	mov	r0, r4
 23fb520:	f002 fa1a 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
 23fb524:	2102      	movs	r1, #2
 23fb526:	9008      	str	r0, [sp, #32]
 23fb528:	4620      	mov	r0, r4
 23fb52a:	f002 fa15 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
						scanResults[ii].address()[3], scanResults[ii].address()[4], scanResults[ii].address()[5]);
 23fb52e:	2103      	movs	r1, #3
						scanResults[ii].address()[0], scanResults[ii].address()[1], scanResults[ii].address()[2],
 23fb530:	4607      	mov	r7, r0
						scanResults[ii].address()[3], scanResults[ii].address()[4], scanResults[ii].address()[5]);
 23fb532:	4620      	mov	r0, r4
 23fb534:	f002 fa10 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
 23fb538:	2104      	movs	r1, #4
 23fb53a:	900a      	str	r0, [sp, #40]	; 0x28
 23fb53c:	4620      	mov	r0, r4
 23fb53e:	f002 fa0b 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
 23fb542:	2105      	movs	r1, #5
 23fb544:	9009      	str	r0, [sp, #36]	; 0x24
 23fb546:	4620      	mov	r0, r4
 23fb548:	f002 fa06 	bl	23fd958 <_ZNK8particle10BleAddressixEh>
				Log.info("colorCode: 0x%lx rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X ",
 23fb54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fb550:	9304      	str	r3, [sp, #16]
 23fb552:	9b08      	ldr	r3, [sp, #32]
 23fb554:	e9cd 7202 	strd	r7, r2, [sp, #8]
 23fb558:	9301      	str	r3, [sp, #4]
 23fb55a:	9b07      	ldr	r3, [sp, #28]
 23fb55c:	9005      	str	r0, [sp, #20]
 23fb55e:	9300      	str	r3, [sp, #0]
 23fb560:	464a      	mov	r2, r9
 23fb562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fb564:	4651      	mov	r1, sl
 23fb566:	4658      	mov	r0, fp
 23fb568:	f7ff ff82 	bl	23fb470 <_ZNK5spark6Logger4infoEPKcz>

				if (scanResults[ii].rssi() > curRssi) {
 23fb56c:	f994 3020 	ldrsb.w	r3, [r4, #32]
 23fb570:	42ab      	cmp	r3, r5
 23fb572:	bfc4      	itt	gt
 23fb574:	461d      	movgt	r5, r3
					// Show whatever device has the strongest signal
					curRssi = scanResults[ii].rssi();
					curColorCode = colorCode;
 23fb576:	f8cd 9018 	strgt.w	r9, [sp, #24]
	for (int ii = 0; ii < count; ii++) {
 23fb57a:	3601      	adds	r6, #1
 23fb57c:	3424      	adds	r4, #36	; 0x24
 23fb57e:	e7ad      	b.n	23fb4dc <loop+0x2c>
				}
			}
		}
	}
	if (curRssi != -999) {
 23fb580:	4b09      	ldr	r3, [pc, #36]	; (23fb5a8 <loop+0xf8>)
 23fb582:	429d      	cmp	r5, r3
 23fb584:	d00a      	beq.n	23fb59c <loop+0xec>
    led_set_status_active(&d_, active, nullptr);
 23fb586:	2200      	movs	r2, #0
 23fb588:	2101      	movs	r1, #1
    d_.color = color;
 23fb58a:	4808      	ldr	r0, [pc, #32]	; (23fb5ac <loop+0xfc>)
 23fb58c:	9b06      	ldr	r3, [sp, #24]
    led_set_status_active(&d_, active, nullptr);
 23fb58e:	3004      	adds	r0, #4
    d_.color = color;
 23fb590:	6103      	str	r3, [r0, #16]
		ledOverride.setActive(true);
	}
	else {
		ledOverride.setActive(false);
	}
}
 23fb592:	b015      	add	sp, #84	; 0x54
 23fb594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    led_set_status_active(&d_, active, nullptr);
 23fb598:	f000 bb1e 	b.w	23fbbd8 <led_set_status_active>
 23fb59c:	2200      	movs	r2, #0
 23fb59e:	4804      	ldr	r0, [pc, #16]	; (23fb5b0 <loop+0x100>)
 23fb5a0:	4611      	mov	r1, r2
 23fb5a2:	e7f6      	b.n	23fb592 <loop+0xe2>
 23fb5a4:	1007aa30 	.word	0x1007aa30
 23fb5a8:	fffffc19 	.word	0xfffffc19
 23fb5ac:	1007a9ec 	.word	0x1007a9ec
 23fb5b0:	1007a9f0 	.word	0x1007a9f0
 23fb5b4:	023ff981 	.word	0x023ff981
 23fb5b8:	1007aeb8 	.word	0x1007aeb8

023fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb5bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb5be:	2614      	movs	r6, #20
 23fb5c0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb5c4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb5c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb5ca:	42ae      	cmp	r6, r5
 23fb5cc:	d004      	beq.n	23fb5d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fb5ce:	4628      	mov	r0, r5
 23fb5d0:	f003 fd40 	bl	23ff054 <_ZN6StringD1Ev>
 23fb5d4:	3514      	adds	r5, #20
 23fb5d6:	e7f8      	b.n	23fb5ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb5d8:	6820      	ldr	r0, [r4, #0]
 23fb5da:	f000 fc07 	bl	23fbdec <free>
    AllocatorT::free(data_);
}
 23fb5de:	4620      	mov	r0, r4
 23fb5e0:	bd70      	pop	{r4, r5, r6, pc}

023fb5e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fb5e2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb5e6:	4604      	mov	r4, r0
 23fb5e8:	460d      	mov	r5, r1
 23fb5ea:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fb5ec:	d916      	bls.n	23fb61c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fb5ee:	4290      	cmp	r0, r2
 23fb5f0:	d215      	bcs.n	23fb61e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fb5f2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fb5f6:	1a75      	subs	r5, r6, r1
 23fb5f8:	f1a1 0714 	sub.w	r7, r1, #20
 23fb5fc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fb5fe:	42b7      	cmp	r7, r6
 23fb600:	d01c      	beq.n	23fb63c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fb602:	b12c      	cbz	r4, 23fb610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fb604:	4631      	mov	r1, r6
 23fb606:	4620      	mov	r0, r4
 23fb608:	f003 fda0 	bl	23ff14c <_ZN6StringC1EOS_>
 23fb60c:	7c33      	ldrb	r3, [r6, #16]
 23fb60e:	7423      	strb	r3, [r4, #16]
 23fb610:	4630      	mov	r0, r6
 23fb612:	f003 fd1f 	bl	23ff054 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fb616:	3e14      	subs	r6, #20
 23fb618:	3c14      	subs	r4, #20
 23fb61a:	e7f0      	b.n	23fb5fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fb61c:	d00e      	beq.n	23fb63c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fb61e:	42b5      	cmp	r5, r6
 23fb620:	d00c      	beq.n	23fb63c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fb622:	b12c      	cbz	r4, 23fb630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fb624:	4629      	mov	r1, r5
 23fb626:	4620      	mov	r0, r4
 23fb628:	f003 fd90 	bl	23ff14c <_ZN6StringC1EOS_>
 23fb62c:	7c2b      	ldrb	r3, [r5, #16]
 23fb62e:	7423      	strb	r3, [r4, #16]
 23fb630:	4628      	mov	r0, r5
 23fb632:	f003 fd0f 	bl	23ff054 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fb636:	3514      	adds	r5, #20
 23fb638:	3414      	adds	r4, #20
 23fb63a:	e7f0      	b.n	23fb61e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fb63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fb63e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fb644:	e9c0 3300 	strd	r3, r3, [r0]
 23fb648:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb64a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb64c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb64e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb650:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb652:	dd24      	ble.n	23fb69e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fb654:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fb658:	fb08 f007 	mul.w	r0, r8, r7
 23fb65c:	f000 fbb8 	bl	23fbdd0 <malloc>
            if (!d) {
 23fb660:	4605      	mov	r5, r0
 23fb662:	b1e0      	cbz	r0, 23fb69e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fb664:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fb668:	fb08 1202 	mla	r2, r8, r2, r1
 23fb66c:	f7ff ffb9 	bl	23fb5e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fb670:	6820      	ldr	r0, [r4, #0]
 23fb672:	f000 fbbb 	bl	23fbdec <free>
        data_ = d;
 23fb676:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fb678:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb67a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fb67e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fb682:	45b8      	cmp	r8, r7
 23fb684:	d009      	beq.n	23fb69a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fb686:	4639      	mov	r1, r7
 23fb688:	4628      	mov	r0, r5
 23fb68a:	f003 fd79 	bl	23ff180 <_ZN6StringC1ERKS_>
 23fb68e:	7c3b      	ldrb	r3, [r7, #16]
 23fb690:	3514      	adds	r5, #20
 23fb692:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fb696:	3714      	adds	r7, #20
 23fb698:	e7f3      	b.n	23fb682 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fb69a:	6873      	ldr	r3, [r6, #4]
 23fb69c:	6063      	str	r3, [r4, #4]
}
 23fb69e:	4620      	mov	r0, r4
 23fb6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb6a4 <_GLOBAL__sub_I_logHandler>:
        capacity_(0) {
 23fb6a4:	2300      	movs	r3, #0
 23fb6a6:	b570      	push	{r4, r5, r6, lr}
 23fb6a8:	b08e      	sub	sp, #56	; 0x38
 23fb6aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 23fb6ae:	9304      	str	r3, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
 23fb6b0:	f000 ff6c 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fb6b4:	4605      	mov	r5, r0
 23fb6b6:	a902      	add	r1, sp, #8
 23fb6b8:	a805      	add	r0, sp, #20
 23fb6ba:	f7ff ffc0 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fb6be:	a905      	add	r1, sp, #20
 23fb6c0:	a808      	add	r0, sp, #32
        filter_(level, filters) {
 23fb6c2:	4c27      	ldr	r4, [pc, #156]	; (23fb760 <_GLOBAL__sub_I_logHandler+0xbc>)
        stream_(&stream) {
 23fb6c4:	f7ff ffbb 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fb6c8:	4b26      	ldr	r3, [pc, #152]	; (23fb764 <_GLOBAL__sub_I_logHandler+0xc0>)
 23fb6ca:	a908      	add	r1, sp, #32
 23fb6cc:	6023      	str	r3, [r4, #0]
 23fb6ce:	a80b      	add	r0, sp, #44	; 0x2c
 23fb6d0:	f7ff ffb5 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fb6d4:	aa0b      	add	r2, sp, #44	; 0x2c
 23fb6d6:	2101      	movs	r1, #1
 23fb6d8:	1d20      	adds	r0, r4, #4
 23fb6da:	f001 fd6b 	bl	23fd1b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fb6de:	a80b      	add	r0, sp, #44	; 0x2c
 23fb6e0:	f7ff ff6c 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fb6e4:	a808      	add	r0, sp, #32
 23fb6e6:	f7ff ff69 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb6ea:	4b1f      	ldr	r3, [pc, #124]	; (23fb768 <_GLOBAL__sub_I_logHandler+0xc4>)
 23fb6ec:	6225      	str	r5, [r4, #32]
 23fb6ee:	6023      	str	r3, [r4, #0]
 23fb6f0:	a805      	add	r0, sp, #20
 23fb6f2:	f7ff ff63 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fb6f6:	4b1d      	ldr	r3, [pc, #116]	; (23fb76c <_GLOBAL__sub_I_logHandler+0xc8>)
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
 23fb6f8:	251e      	movs	r5, #30
 23fb6fa:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fb6fc:	f000 ff46 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fb700:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fb704:	f000 ff32 	bl	23fc56c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fb708:	f001 fa26 	bl	23fcb58 <_ZN5spark10LogManager8instanceEv>
 23fb70c:	4621      	mov	r1, r4
 23fb70e:	f001 fc29 	bl	23fcf64 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
 23fb712:	a802      	add	r0, sp, #8
 23fb714:	f7ff ff52 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
 23fb718:	267f      	movs	r6, #127	; 0x7f
 23fb71a:	4c15      	ldr	r4, [pc, #84]	; (23fb770 <_GLOBAL__sub_I_logHandler+0xcc>)
 23fb71c:	4620      	mov	r0, r4
 23fb71e:	f002 f9b9 	bl	23fda94 <_ZN8particle10BleAddressC1Ev>
 23fb722:	f104 0008 	add.w	r0, r4, #8
 23fb726:	f002 feda 	bl	23fe4de <_ZN8particle18BleAdvertisingDataC1Ev>
 23fb72a:	f104 0014 	add.w	r0, r4, #20
 23fb72e:	f002 fed6 	bl	23fe4de <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_MAX];
 23fb732:	3d01      	subs	r5, #1
 23fb734:	f884 6020 	strb.w	r6, [r4, #32]
 23fb738:	f104 0424 	add.w	r4, r4, #36	; 0x24
 23fb73c:	d1ee      	bne.n	23fb71c <_GLOBAL__sub_I_logHandler+0x78>
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
 23fb73e:	462a      	mov	r2, r5
 23fb740:	2114      	movs	r1, #20
 23fb742:	2001      	movs	r0, #1
 23fb744:	f000 fb1a 	bl	23fbd7c <led_pattern_period>
 23fb748:	2201      	movs	r2, #1
 23fb74a:	211e      	movs	r1, #30
 23fb74c:	4603      	mov	r3, r0
 23fb74e:	e9cd 1200 	strd	r1, r2, [sp]
 23fb752:	4808      	ldr	r0, [pc, #32]	; (23fb774 <_GLOBAL__sub_I_logHandler+0xd0>)
 23fb754:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23fb758:	f000 fbb0 	bl	23fbebc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>
}
 23fb75c:	b00e      	add	sp, #56	; 0x38
 23fb75e:	bd70      	pop	{r4, r5, r6, pc}
 23fb760:	1007aa0c 	.word	0x1007aa0c
 23fb764:	023ff9cc 	.word	0x023ff9cc
 23fb768:	023ffb88 	.word	0x023ffb88
 23fb76c:	023ff9f8 	.word	0x023ff9f8
 23fb770:	1007aa30 	.word	0x1007aa30
 23fb774:	1007a9ec 	.word	0x1007a9ec

023fb778 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb778:	b509      	push	{r0, r3, lr}
 23fb77a:	4804      	ldr	r0, [pc, #16]	; (23fb78c <HAL_USB_USART_Init+0x14>)
 23fb77c:	6800      	ldr	r0, [r0, #0]
 23fb77e:	4b04      	ldr	r3, [pc, #16]	; (23fb790 <HAL_USB_USART_Init+0x18>)
 23fb780:	4403      	add	r3, r0
 23fb782:	681b      	ldr	r3, [r3, #0]
 23fb784:	681b      	ldr	r3, [r3, #0]
 23fb786:	9302      	str	r3, [sp, #8]
 23fb788:	bd09      	pop	{r0, r3, pc}
 23fb78a:	0000      	.short	0x0000
 23fb78c:	1007a974 	.word	0x1007a974
 23fb790:	00000034 	.word	0x00000034

023fb794 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb794:	b509      	push	{r0, r3, lr}
 23fb796:	4804      	ldr	r0, [pc, #16]	; (23fb7a8 <HAL_USB_USART_Begin+0x14>)
 23fb798:	6800      	ldr	r0, [r0, #0]
 23fb79a:	4b04      	ldr	r3, [pc, #16]	; (23fb7ac <HAL_USB_USART_Begin+0x18>)
 23fb79c:	4403      	add	r3, r0
 23fb79e:	681b      	ldr	r3, [r3, #0]
 23fb7a0:	685b      	ldr	r3, [r3, #4]
 23fb7a2:	9302      	str	r3, [sp, #8]
 23fb7a4:	bd09      	pop	{r0, r3, pc}
 23fb7a6:	0000      	.short	0x0000
 23fb7a8:	1007a974 	.word	0x1007a974
 23fb7ac:	00000034 	.word	0x00000034

023fb7b0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fb7b0:	b509      	push	{r0, r3, lr}
 23fb7b2:	4804      	ldr	r0, [pc, #16]	; (23fb7c4 <HAL_USB_USART_End+0x14>)
 23fb7b4:	6800      	ldr	r0, [r0, #0]
 23fb7b6:	4b04      	ldr	r3, [pc, #16]	; (23fb7c8 <HAL_USB_USART_End+0x18>)
 23fb7b8:	4403      	add	r3, r0
 23fb7ba:	681b      	ldr	r3, [r3, #0]
 23fb7bc:	689b      	ldr	r3, [r3, #8]
 23fb7be:	9302      	str	r3, [sp, #8]
 23fb7c0:	bd09      	pop	{r0, r3, pc}
 23fb7c2:	0000      	.short	0x0000
 23fb7c4:	1007a974 	.word	0x1007a974
 23fb7c8:	00000034 	.word	0x00000034

023fb7cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb7cc:	b509      	push	{r0, r3, lr}
 23fb7ce:	4804      	ldr	r0, [pc, #16]	; (23fb7e0 <HAL_USB_USART_Available_Data+0x14>)
 23fb7d0:	6800      	ldr	r0, [r0, #0]
 23fb7d2:	4b04      	ldr	r3, [pc, #16]	; (23fb7e4 <HAL_USB_USART_Available_Data+0x18>)
 23fb7d4:	4403      	add	r3, r0
 23fb7d6:	681b      	ldr	r3, [r3, #0]
 23fb7d8:	691b      	ldr	r3, [r3, #16]
 23fb7da:	9302      	str	r3, [sp, #8]
 23fb7dc:	bd09      	pop	{r0, r3, pc}
 23fb7de:	0000      	.short	0x0000
 23fb7e0:	1007a974 	.word	0x1007a974
 23fb7e4:	00000034 	.word	0x00000034

023fb7e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb7e8:	b509      	push	{r0, r3, lr}
 23fb7ea:	4804      	ldr	r0, [pc, #16]	; (23fb7fc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb7ec:	6800      	ldr	r0, [r0, #0]
 23fb7ee:	4b04      	ldr	r3, [pc, #16]	; (23fb800 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb7f0:	4403      	add	r3, r0
 23fb7f2:	681b      	ldr	r3, [r3, #0]
 23fb7f4:	695b      	ldr	r3, [r3, #20]
 23fb7f6:	9302      	str	r3, [sp, #8]
 23fb7f8:	bd09      	pop	{r0, r3, pc}
 23fb7fa:	0000      	.short	0x0000
 23fb7fc:	1007a974 	.word	0x1007a974
 23fb800:	00000034 	.word	0x00000034

023fb804 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb804:	b509      	push	{r0, r3, lr}
 23fb806:	4804      	ldr	r0, [pc, #16]	; (23fb818 <HAL_USB_USART_Receive_Data+0x14>)
 23fb808:	6800      	ldr	r0, [r0, #0]
 23fb80a:	4b04      	ldr	r3, [pc, #16]	; (23fb81c <HAL_USB_USART_Receive_Data+0x18>)
 23fb80c:	4403      	add	r3, r0
 23fb80e:	681b      	ldr	r3, [r3, #0]
 23fb810:	699b      	ldr	r3, [r3, #24]
 23fb812:	9302      	str	r3, [sp, #8]
 23fb814:	bd09      	pop	{r0, r3, pc}
 23fb816:	0000      	.short	0x0000
 23fb818:	1007a974 	.word	0x1007a974
 23fb81c:	00000034 	.word	0x00000034

023fb820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb820:	b509      	push	{r0, r3, lr}
 23fb822:	4804      	ldr	r0, [pc, #16]	; (23fb834 <HAL_USB_USART_Send_Data+0x14>)
 23fb824:	6800      	ldr	r0, [r0, #0]
 23fb826:	4b04      	ldr	r3, [pc, #16]	; (23fb838 <HAL_USB_USART_Send_Data+0x18>)
 23fb828:	4403      	add	r3, r0
 23fb82a:	681b      	ldr	r3, [r3, #0]
 23fb82c:	69db      	ldr	r3, [r3, #28]
 23fb82e:	9302      	str	r3, [sp, #8]
 23fb830:	bd09      	pop	{r0, r3, pc}
 23fb832:	0000      	.short	0x0000
 23fb834:	1007a974 	.word	0x1007a974
 23fb838:	00000034 	.word	0x00000034

023fb83c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb83c:	b509      	push	{r0, r3, lr}
 23fb83e:	4804      	ldr	r0, [pc, #16]	; (23fb850 <HAL_USB_USART_Flush_Data+0x14>)
 23fb840:	6800      	ldr	r0, [r0, #0]
 23fb842:	4b04      	ldr	r3, [pc, #16]	; (23fb854 <HAL_USB_USART_Flush_Data+0x18>)
 23fb844:	4403      	add	r3, r0
 23fb846:	681b      	ldr	r3, [r3, #0]
 23fb848:	6a1b      	ldr	r3, [r3, #32]
 23fb84a:	9302      	str	r3, [sp, #8]
 23fb84c:	bd09      	pop	{r0, r3, pc}
 23fb84e:	0000      	.short	0x0000
 23fb850:	1007a974 	.word	0x1007a974
 23fb854:	00000034 	.word	0x00000034

023fb858 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fb858:	b509      	push	{r0, r3, lr}
 23fb85a:	4804      	ldr	r0, [pc, #16]	; (23fb86c <hal_usart_end+0x14>)
 23fb85c:	6800      	ldr	r0, [r0, #0]
 23fb85e:	4b04      	ldr	r3, [pc, #16]	; (23fb870 <hal_usart_end+0x18>)
 23fb860:	4403      	add	r3, r0
 23fb862:	681b      	ldr	r3, [r3, #0]
 23fb864:	689b      	ldr	r3, [r3, #8]
 23fb866:	9302      	str	r3, [sp, #8]
 23fb868:	bd09      	pop	{r0, r3, pc}
 23fb86a:	0000      	.short	0x0000
 23fb86c:	1007a974 	.word	0x1007a974
 23fb870:	00000024 	.word	0x00000024

023fb874 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fb874:	b509      	push	{r0, r3, lr}
 23fb876:	4804      	ldr	r0, [pc, #16]	; (23fb888 <hal_usart_write+0x14>)
 23fb878:	6800      	ldr	r0, [r0, #0]
 23fb87a:	4b04      	ldr	r3, [pc, #16]	; (23fb88c <hal_usart_write+0x18>)
 23fb87c:	4403      	add	r3, r0
 23fb87e:	681b      	ldr	r3, [r3, #0]
 23fb880:	68db      	ldr	r3, [r3, #12]
 23fb882:	9302      	str	r3, [sp, #8]
 23fb884:	bd09      	pop	{r0, r3, pc}
 23fb886:	0000      	.short	0x0000
 23fb888:	1007a974 	.word	0x1007a974
 23fb88c:	00000024 	.word	0x00000024

023fb890 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fb890:	b509      	push	{r0, r3, lr}
 23fb892:	4804      	ldr	r0, [pc, #16]	; (23fb8a4 <hal_usart_available+0x14>)
 23fb894:	6800      	ldr	r0, [r0, #0]
 23fb896:	4b04      	ldr	r3, [pc, #16]	; (23fb8a8 <hal_usart_available+0x18>)
 23fb898:	4403      	add	r3, r0
 23fb89a:	681b      	ldr	r3, [r3, #0]
 23fb89c:	691b      	ldr	r3, [r3, #16]
 23fb89e:	9302      	str	r3, [sp, #8]
 23fb8a0:	bd09      	pop	{r0, r3, pc}
 23fb8a2:	0000      	.short	0x0000
 23fb8a4:	1007a974 	.word	0x1007a974
 23fb8a8:	00000024 	.word	0x00000024

023fb8ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fb8ac:	b509      	push	{r0, r3, lr}
 23fb8ae:	4804      	ldr	r0, [pc, #16]	; (23fb8c0 <hal_usart_read+0x14>)
 23fb8b0:	6800      	ldr	r0, [r0, #0]
 23fb8b2:	4b04      	ldr	r3, [pc, #16]	; (23fb8c4 <hal_usart_read+0x18>)
 23fb8b4:	4403      	add	r3, r0
 23fb8b6:	681b      	ldr	r3, [r3, #0]
 23fb8b8:	695b      	ldr	r3, [r3, #20]
 23fb8ba:	9302      	str	r3, [sp, #8]
 23fb8bc:	bd09      	pop	{r0, r3, pc}
 23fb8be:	0000      	.short	0x0000
 23fb8c0:	1007a974 	.word	0x1007a974
 23fb8c4:	00000024 	.word	0x00000024

023fb8c8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fb8c8:	b509      	push	{r0, r3, lr}
 23fb8ca:	4804      	ldr	r0, [pc, #16]	; (23fb8dc <hal_usart_peek+0x14>)
 23fb8cc:	6800      	ldr	r0, [r0, #0]
 23fb8ce:	4b04      	ldr	r3, [pc, #16]	; (23fb8e0 <hal_usart_peek+0x18>)
 23fb8d0:	4403      	add	r3, r0
 23fb8d2:	681b      	ldr	r3, [r3, #0]
 23fb8d4:	699b      	ldr	r3, [r3, #24]
 23fb8d6:	9302      	str	r3, [sp, #8]
 23fb8d8:	bd09      	pop	{r0, r3, pc}
 23fb8da:	0000      	.short	0x0000
 23fb8dc:	1007a974 	.word	0x1007a974
 23fb8e0:	00000024 	.word	0x00000024

023fb8e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fb8e4:	b509      	push	{r0, r3, lr}
 23fb8e6:	4804      	ldr	r0, [pc, #16]	; (23fb8f8 <hal_usart_flush+0x14>)
 23fb8e8:	6800      	ldr	r0, [r0, #0]
 23fb8ea:	4b04      	ldr	r3, [pc, #16]	; (23fb8fc <hal_usart_flush+0x18>)
 23fb8ec:	4403      	add	r3, r0
 23fb8ee:	681b      	ldr	r3, [r3, #0]
 23fb8f0:	69db      	ldr	r3, [r3, #28]
 23fb8f2:	9302      	str	r3, [sp, #8]
 23fb8f4:	bd09      	pop	{r0, r3, pc}
 23fb8f6:	0000      	.short	0x0000
 23fb8f8:	1007a974 	.word	0x1007a974
 23fb8fc:	00000024 	.word	0x00000024

023fb900 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fb900:	b509      	push	{r0, r3, lr}
 23fb902:	4804      	ldr	r0, [pc, #16]	; (23fb914 <hal_usart_is_enabled+0x14>)
 23fb904:	6800      	ldr	r0, [r0, #0]
 23fb906:	4b04      	ldr	r3, [pc, #16]	; (23fb918 <hal_usart_is_enabled+0x18>)
 23fb908:	4403      	add	r3, r0
 23fb90a:	681b      	ldr	r3, [r3, #0]
 23fb90c:	6a1b      	ldr	r3, [r3, #32]
 23fb90e:	9302      	str	r3, [sp, #8]
 23fb910:	bd09      	pop	{r0, r3, pc}
 23fb912:	0000      	.short	0x0000
 23fb914:	1007a974 	.word	0x1007a974
 23fb918:	00000024 	.word	0x00000024

023fb91c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fb91c:	b509      	push	{r0, r3, lr}
 23fb91e:	4804      	ldr	r0, [pc, #16]	; (23fb930 <hal_usart_available_data_for_write+0x14>)
 23fb920:	6800      	ldr	r0, [r0, #0]
 23fb922:	4b04      	ldr	r3, [pc, #16]	; (23fb934 <hal_usart_available_data_for_write+0x18>)
 23fb924:	4403      	add	r3, r0
 23fb926:	681b      	ldr	r3, [r3, #0]
 23fb928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb92a:	9302      	str	r3, [sp, #8]
 23fb92c:	bd09      	pop	{r0, r3, pc}
 23fb92e:	0000      	.short	0x0000
 23fb930:	1007a974 	.word	0x1007a974
 23fb934:	00000024 	.word	0x00000024

023fb938 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fb938:	b509      	push	{r0, r3, lr}
 23fb93a:	4804      	ldr	r0, [pc, #16]	; (23fb94c <hal_usart_begin_config+0x14>)
 23fb93c:	6800      	ldr	r0, [r0, #0]
 23fb93e:	4b04      	ldr	r3, [pc, #16]	; (23fb950 <hal_usart_begin_config+0x18>)
 23fb940:	4403      	add	r3, r0
 23fb942:	681b      	ldr	r3, [r3, #0]
 23fb944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb946:	9302      	str	r3, [sp, #8]
 23fb948:	bd09      	pop	{r0, r3, pc}
 23fb94a:	0000      	.short	0x0000
 23fb94c:	1007a974 	.word	0x1007a974
 23fb950:	00000024 	.word	0x00000024

023fb954 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fb954:	b509      	push	{r0, r3, lr}
 23fb956:	4804      	ldr	r0, [pc, #16]	; (23fb968 <hal_usart_init_ex+0x14>)
 23fb958:	6800      	ldr	r0, [r0, #0]
 23fb95a:	4b04      	ldr	r3, [pc, #16]	; (23fb96c <hal_usart_init_ex+0x18>)
 23fb95c:	4403      	add	r3, r0
 23fb95e:	681b      	ldr	r3, [r3, #0]
 23fb960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb962:	9302      	str	r3, [sp, #8]
 23fb964:	bd09      	pop	{r0, r3, pc}
 23fb966:	0000      	.short	0x0000
 23fb968:	1007a974 	.word	0x1007a974
 23fb96c:	00000024 	.word	0x00000024

023fb970 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fb970:	b509      	push	{r0, r3, lr}
 23fb972:	4804      	ldr	r0, [pc, #16]	; (23fb984 <inet_inet_ntop+0x14>)
 23fb974:	6800      	ldr	r0, [r0, #0]
 23fb976:	4b04      	ldr	r3, [pc, #16]	; (23fb988 <inet_inet_ntop+0x18>)
 23fb978:	4403      	add	r3, r0
 23fb97a:	681b      	ldr	r3, [r3, #0]
 23fb97c:	695b      	ldr	r3, [r3, #20]
 23fb97e:	9302      	str	r3, [sp, #8]
 23fb980:	bd09      	pop	{r0, r3, pc}
 23fb982:	0000      	.short	0x0000
 23fb984:	1007a974 	.word	0x1007a974
 23fb988:	0000004c 	.word	0x0000004c

023fb98c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb98c:	b509      	push	{r0, r3, lr}
 23fb98e:	4804      	ldr	r0, [pc, #16]	; (23fb9a0 <os_mutex_recursive_create+0x14>)
 23fb990:	6800      	ldr	r0, [r0, #0]
 23fb992:	4b04      	ldr	r3, [pc, #16]	; (23fb9a4 <os_mutex_recursive_create+0x18>)
 23fb994:	4403      	add	r3, r0
 23fb996:	681b      	ldr	r3, [r3, #0]
 23fb998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb99a:	9302      	str	r3, [sp, #8]
 23fb99c:	bd09      	pop	{r0, r3, pc}
 23fb99e:	0000      	.short	0x0000
 23fb9a0:	1007a974 	.word	0x1007a974
 23fb9a4:	00000030 	.word	0x00000030

023fb9a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fb9a8:	b509      	push	{r0, r3, lr}
 23fb9aa:	4804      	ldr	r0, [pc, #16]	; (23fb9bc <os_mutex_recursive_destroy+0x14>)
 23fb9ac:	6800      	ldr	r0, [r0, #0]
 23fb9ae:	4b04      	ldr	r3, [pc, #16]	; (23fb9c0 <os_mutex_recursive_destroy+0x18>)
 23fb9b0:	4403      	add	r3, r0
 23fb9b2:	681b      	ldr	r3, [r3, #0]
 23fb9b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fb9b6:	9302      	str	r3, [sp, #8]
 23fb9b8:	bd09      	pop	{r0, r3, pc}
 23fb9ba:	0000      	.short	0x0000
 23fb9bc:	1007a974 	.word	0x1007a974
 23fb9c0:	00000030 	.word	0x00000030

023fb9c4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb9c4:	b509      	push	{r0, r3, lr}
 23fb9c6:	4804      	ldr	r0, [pc, #16]	; (23fb9d8 <os_mutex_recursive_lock+0x14>)
 23fb9c8:	6800      	ldr	r0, [r0, #0]
 23fb9ca:	4b04      	ldr	r3, [pc, #16]	; (23fb9dc <os_mutex_recursive_lock+0x18>)
 23fb9cc:	4403      	add	r3, r0
 23fb9ce:	681b      	ldr	r3, [r3, #0]
 23fb9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb9d2:	9302      	str	r3, [sp, #8]
 23fb9d4:	bd09      	pop	{r0, r3, pc}
 23fb9d6:	0000      	.short	0x0000
 23fb9d8:	1007a974 	.word	0x1007a974
 23fb9dc:	00000030 	.word	0x00000030

023fb9e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb9e0:	b509      	push	{r0, r3, lr}
 23fb9e2:	4804      	ldr	r0, [pc, #16]	; (23fb9f4 <os_mutex_recursive_unlock+0x14>)
 23fb9e4:	6800      	ldr	r0, [r0, #0]
 23fb9e6:	4b04      	ldr	r3, [pc, #16]	; (23fb9f8 <os_mutex_recursive_unlock+0x18>)
 23fb9e8:	4403      	add	r3, r0
 23fb9ea:	681b      	ldr	r3, [r3, #0]
 23fb9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb9ee:	9302      	str	r3, [sp, #8]
 23fb9f0:	bd09      	pop	{r0, r3, pc}
 23fb9f2:	0000      	.short	0x0000
 23fb9f4:	1007a974 	.word	0x1007a974
 23fb9f8:	00000030 	.word	0x00000030

023fb9fc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23fb9fc:	b509      	push	{r0, r3, lr}
 23fb9fe:	4804      	ldr	r0, [pc, #16]	; (23fba10 <hal_ble_stack_init+0x14>)
 23fba00:	6800      	ldr	r0, [r0, #0]
 23fba02:	4b04      	ldr	r3, [pc, #16]	; (23fba14 <hal_ble_stack_init+0x18>)
 23fba04:	4403      	add	r3, r0
 23fba06:	681b      	ldr	r3, [r3, #0]
 23fba08:	689b      	ldr	r3, [r3, #8]
 23fba0a:	9302      	str	r3, [sp, #8]
 23fba0c:	bd09      	pop	{r0, r3, pc}
 23fba0e:	0000      	.short	0x0000
 23fba10:	1007a974 	.word	0x1007a974
 23fba14:	00000060 	.word	0x00000060

023fba18 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
 23fba18:	b509      	push	{r0, r3, lr}
 23fba1a:	4804      	ldr	r0, [pc, #16]	; (23fba2c <hal_ble_gap_set_scan_parameters+0x14>)
 23fba1c:	6800      	ldr	r0, [r0, #0]
 23fba1e:	4b04      	ldr	r3, [pc, #16]	; (23fba30 <hal_ble_gap_set_scan_parameters+0x18>)
 23fba20:	4403      	add	r3, r0
 23fba22:	681b      	ldr	r3, [r3, #0]
 23fba24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 23fba26:	9302      	str	r3, [sp, #8]
 23fba28:	bd09      	pop	{r0, r3, pc}
 23fba2a:	0000      	.short	0x0000
 23fba2c:	1007a974 	.word	0x1007a974
 23fba30:	00000060 	.word	0x00000060

023fba34 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
 23fba34:	b509      	push	{r0, r3, lr}
 23fba36:	4804      	ldr	r0, [pc, #16]	; (23fba48 <hal_ble_gap_get_scan_parameters+0x14>)
 23fba38:	6800      	ldr	r0, [r0, #0]
 23fba3a:	4b04      	ldr	r3, [pc, #16]	; (23fba4c <hal_ble_gap_get_scan_parameters+0x18>)
 23fba3c:	4403      	add	r3, r0
 23fba3e:	681b      	ldr	r3, [r3, #0]
 23fba40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 23fba42:	9302      	str	r3, [sp, #8]
 23fba44:	bd09      	pop	{r0, r3, pc}
 23fba46:	0000      	.short	0x0000
 23fba48:	1007a974 	.word	0x1007a974
 23fba4c:	00000060 	.word	0x00000060

023fba50 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23fba50:	b509      	push	{r0, r3, lr}
 23fba52:	4804      	ldr	r0, [pc, #16]	; (23fba64 <hal_ble_gap_start_scan+0x14>)
 23fba54:	6800      	ldr	r0, [r0, #0]
 23fba56:	4b04      	ldr	r3, [pc, #16]	; (23fba68 <hal_ble_gap_start_scan+0x18>)
 23fba58:	4403      	add	r3, r0
 23fba5a:	681b      	ldr	r3, [r3, #0]
 23fba5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fba5e:	9302      	str	r3, [sp, #8]
 23fba60:	bd09      	pop	{r0, r3, pc}
 23fba62:	0000      	.short	0x0000
 23fba64:	1007a974 	.word	0x1007a974
 23fba68:	00000060 	.word	0x00000060

023fba6c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23fba6c:	b509      	push	{r0, r3, lr}
 23fba6e:	4804      	ldr	r0, [pc, #16]	; (23fba80 <hal_ble_gap_stop_scan+0x14>)
 23fba70:	6800      	ldr	r0, [r0, #0]
 23fba72:	4b04      	ldr	r3, [pc, #16]	; (23fba84 <hal_ble_gap_stop_scan+0x18>)
 23fba74:	4403      	add	r3, r0
 23fba76:	681b      	ldr	r3, [r3, #0]
 23fba78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23fba7c:	9302      	str	r3, [sp, #8]
 23fba7e:	bd09      	pop	{r0, r3, pc}
 23fba80:	1007a974 	.word	0x1007a974
 23fba84:	00000060 	.word	0x00000060

023fba88 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23fba88:	b509      	push	{r0, r3, lr}
 23fba8a:	4804      	ldr	r0, [pc, #16]	; (23fba9c <hal_ble_gap_disconnect+0x14>)
 23fba8c:	6800      	ldr	r0, [r0, #0]
 23fba8e:	4b04      	ldr	r3, [pc, #16]	; (23fbaa0 <hal_ble_gap_disconnect+0x18>)
 23fba90:	4403      	add	r3, r0
 23fba92:	681b      	ldr	r3, [r3, #0]
 23fba94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fba98:	9302      	str	r3, [sp, #8]
 23fba9a:	bd09      	pop	{r0, r3, pc}
 23fba9c:	1007a974 	.word	0x1007a974
 23fbaa0:	00000060 	.word	0x00000060

023fbaa4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23fbaa4:	b509      	push	{r0, r3, lr}
 23fbaa6:	4804      	ldr	r0, [pc, #16]	; (23fbab8 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23fbaa8:	6800      	ldr	r0, [r0, #0]
 23fbaaa:	4b04      	ldr	r3, [pc, #16]	; (23fbabc <hal_ble_set_callback_on_periph_link_events+0x18>)
 23fbaac:	4403      	add	r3, r0
 23fbaae:	681b      	ldr	r3, [r3, #0]
 23fbab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23fbab4:	9302      	str	r3, [sp, #8]
 23fbab6:	bd09      	pop	{r0, r3, pc}
 23fbab8:	1007a974 	.word	0x1007a974
 23fbabc:	00000060 	.word	0x00000060

023fbac0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fbac0:	b509      	push	{r0, r3, lr}
 23fbac2:	4804      	ldr	r0, [pc, #16]	; (23fbad4 <HAL_RNG_GetRandomNumber+0x14>)
 23fbac4:	6800      	ldr	r0, [r0, #0]
 23fbac6:	4b04      	ldr	r3, [pc, #16]	; (23fbad8 <HAL_RNG_GetRandomNumber+0x18>)
 23fbac8:	4403      	add	r3, r0
 23fbaca:	681b      	ldr	r3, [r3, #0]
 23fbacc:	685b      	ldr	r3, [r3, #4]
 23fbace:	9302      	str	r3, [sp, #8]
 23fbad0:	bd09      	pop	{r0, r3, pc}
 23fbad2:	0000      	.short	0x0000
 23fbad4:	1007a974 	.word	0x1007a974
 23fbad8:	00000000 	.word	0x00000000

023fbadc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fbadc:	b509      	push	{r0, r3, lr}
 23fbade:	4804      	ldr	r0, [pc, #16]	; (23fbaf0 <HAL_Delay_Microseconds+0x14>)
 23fbae0:	6800      	ldr	r0, [r0, #0]
 23fbae2:	4b04      	ldr	r3, [pc, #16]	; (23fbaf4 <HAL_Delay_Microseconds+0x18>)
 23fbae4:	4403      	add	r3, r0
 23fbae6:	681b      	ldr	r3, [r3, #0]
 23fbae8:	68db      	ldr	r3, [r3, #12]
 23fbaea:	9302      	str	r3, [sp, #8]
 23fbaec:	bd09      	pop	{r0, r3, pc}
 23fbaee:	0000      	.short	0x0000
 23fbaf0:	1007a974 	.word	0x1007a974
 23fbaf4:	00000000 	.word	0x00000000

023fbaf8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fbaf8:	b509      	push	{r0, r3, lr}
 23fbafa:	4804      	ldr	r0, [pc, #16]	; (23fbb0c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fbafc:	6800      	ldr	r0, [r0, #0]
 23fbafe:	4b04      	ldr	r3, [pc, #16]	; (23fbb10 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fbb00:	4403      	add	r3, r0
 23fbb02:	681b      	ldr	r3, [r3, #0]
 23fbb04:	695b      	ldr	r3, [r3, #20]
 23fbb06:	9302      	str	r3, [sp, #8]
 23fbb08:	bd09      	pop	{r0, r3, pc}
 23fbb0a:	0000      	.short	0x0000
 23fbb0c:	1007a974 	.word	0x1007a974
 23fbb10:	00000000 	.word	0x00000000

023fbb14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fbb14:	b509      	push	{r0, r3, lr}
 23fbb16:	4804      	ldr	r0, [pc, #16]	; (23fbb28 <netdb_freeaddrinfo+0x14>)
 23fbb18:	6800      	ldr	r0, [r0, #0]
 23fbb1a:	4b04      	ldr	r3, [pc, #16]	; (23fbb2c <netdb_freeaddrinfo+0x18>)
 23fbb1c:	4403      	add	r3, r0
 23fbb1e:	681b      	ldr	r3, [r3, #0]
 23fbb20:	689b      	ldr	r3, [r3, #8]
 23fbb22:	9302      	str	r3, [sp, #8]
 23fbb24:	bd09      	pop	{r0, r3, pc}
 23fbb26:	0000      	.short	0x0000
 23fbb28:	1007a974 	.word	0x1007a974
 23fbb2c:	00000050 	.word	0x00000050

023fbb30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fbb30:	b509      	push	{r0, r3, lr}
 23fbb32:	4804      	ldr	r0, [pc, #16]	; (23fbb44 <netdb_getaddrinfo+0x14>)
 23fbb34:	6800      	ldr	r0, [r0, #0]
 23fbb36:	4b04      	ldr	r3, [pc, #16]	; (23fbb48 <netdb_getaddrinfo+0x18>)
 23fbb38:	4403      	add	r3, r0
 23fbb3a:	681b      	ldr	r3, [r3, #0]
 23fbb3c:	68db      	ldr	r3, [r3, #12]
 23fbb3e:	9302      	str	r3, [sp, #8]
 23fbb40:	bd09      	pop	{r0, r3, pc}
 23fbb42:	0000      	.short	0x0000
 23fbb44:	1007a974 	.word	0x1007a974
 23fbb48:	00000050 	.word	0x00000050

023fbb4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbb4c:	b509      	push	{r0, r3, lr}
 23fbb4e:	4804      	ldr	r0, [pc, #16]	; (23fbb60 <panic_+0x14>)
 23fbb50:	6800      	ldr	r0, [r0, #0]
 23fbb52:	4b04      	ldr	r3, [pc, #16]	; (23fbb64 <panic_+0x18>)
 23fbb54:	4403      	add	r3, r0
 23fbb56:	681b      	ldr	r3, [r3, #0]
 23fbb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbb5a:	9302      	str	r3, [sp, #8]
 23fbb5c:	bd09      	pop	{r0, r3, pc}
 23fbb5e:	0000      	.short	0x0000
 23fbb60:	1007a974 	.word	0x1007a974
 23fbb64:	00000048 	.word	0x00000048

023fbb68 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fbb68:	b509      	push	{r0, r3, lr}
 23fbb6a:	4804      	ldr	r0, [pc, #16]	; (23fbb7c <log_message+0x14>)
 23fbb6c:	6800      	ldr	r0, [r0, #0]
 23fbb6e:	4b04      	ldr	r3, [pc, #16]	; (23fbb80 <log_message+0x18>)
 23fbb70:	4403      	add	r3, r0
 23fbb72:	681b      	ldr	r3, [r3, #0]
 23fbb74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fbb76:	9302      	str	r3, [sp, #8]
 23fbb78:	bd09      	pop	{r0, r3, pc}
 23fbb7a:	0000      	.short	0x0000
 23fbb7c:	1007a974 	.word	0x1007a974
 23fbb80:	00000048 	.word	0x00000048

023fbb84 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fbb84:	b509      	push	{r0, r3, lr}
 23fbb86:	4804      	ldr	r0, [pc, #16]	; (23fbb98 <log_message_v+0x14>)
 23fbb88:	6800      	ldr	r0, [r0, #0]
 23fbb8a:	4b04      	ldr	r3, [pc, #16]	; (23fbb9c <log_message_v+0x18>)
 23fbb8c:	4403      	add	r3, r0
 23fbb8e:	681b      	ldr	r3, [r3, #0]
 23fbb90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbb92:	9302      	str	r3, [sp, #8]
 23fbb94:	bd09      	pop	{r0, r3, pc}
 23fbb96:	0000      	.short	0x0000
 23fbb98:	1007a974 	.word	0x1007a974
 23fbb9c:	00000048 	.word	0x00000048

023fbba0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbba0:	b509      	push	{r0, r3, lr}
 23fbba2:	4804      	ldr	r0, [pc, #16]	; (23fbbb4 <log_level_name+0x14>)
 23fbba4:	6800      	ldr	r0, [r0, #0]
 23fbba6:	4b04      	ldr	r3, [pc, #16]	; (23fbbb8 <log_level_name+0x18>)
 23fbba8:	4403      	add	r3, r0
 23fbbaa:	681b      	ldr	r3, [r3, #0]
 23fbbac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbbae:	9302      	str	r3, [sp, #8]
 23fbbb0:	bd09      	pop	{r0, r3, pc}
 23fbbb2:	0000      	.short	0x0000
 23fbbb4:	1007a974 	.word	0x1007a974
 23fbbb8:	00000048 	.word	0x00000048

023fbbbc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbbbc:	b509      	push	{r0, r3, lr}
 23fbbbe:	4804      	ldr	r0, [pc, #16]	; (23fbbd0 <log_set_callbacks+0x14>)
 23fbbc0:	6800      	ldr	r0, [r0, #0]
 23fbbc2:	4b04      	ldr	r3, [pc, #16]	; (23fbbd4 <log_set_callbacks+0x18>)
 23fbbc4:	4403      	add	r3, r0
 23fbbc6:	681b      	ldr	r3, [r3, #0]
 23fbbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbbca:	9302      	str	r3, [sp, #8]
 23fbbcc:	bd09      	pop	{r0, r3, pc}
 23fbbce:	0000      	.short	0x0000
 23fbbd0:	1007a974 	.word	0x1007a974
 23fbbd4:	00000048 	.word	0x00000048

023fbbd8 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
 23fbbd8:	b509      	push	{r0, r3, lr}
 23fbbda:	4804      	ldr	r0, [pc, #16]	; (23fbbec <led_set_status_active+0x14>)
 23fbbdc:	6800      	ldr	r0, [r0, #0]
 23fbbde:	4b04      	ldr	r3, [pc, #16]	; (23fbbf0 <led_set_status_active+0x18>)
 23fbbe0:	4403      	add	r3, r0
 23fbbe2:	681b      	ldr	r3, [r3, #0]
 23fbbe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 23fbbe8:	9302      	str	r3, [sp, #8]
 23fbbea:	bd09      	pop	{r0, r3, pc}
 23fbbec:	1007a974 	.word	0x1007a974
 23fbbf0:	00000048 	.word	0x00000048

023fbbf4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbbf4:	b509      	push	{r0, r3, lr}
 23fbbf6:	4804      	ldr	r0, [pc, #16]	; (23fbc08 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbbf8:	6800      	ldr	r0, [r0, #0]
 23fbbfa:	4b04      	ldr	r3, [pc, #16]	; (23fbc0c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbbfc:	4403      	add	r3, r0
 23fbbfe:	681b      	ldr	r3, [r3, #0]
 23fbc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbc02:	9302      	str	r3, [sp, #8]
 23fbc04:	bd09      	pop	{r0, r3, pc}
 23fbc06:	0000      	.short	0x0000
 23fbc08:	1007a974 	.word	0x1007a974
 23fbc0c:	0000002c 	.word	0x0000002c

023fbc10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbc10:	b509      	push	{r0, r3, lr}
 23fbc12:	4804      	ldr	r0, [pc, #16]	; (23fbc24 <network_connect+0x14>)
 23fbc14:	6800      	ldr	r0, [r0, #0]
 23fbc16:	4b04      	ldr	r3, [pc, #16]	; (23fbc28 <network_connect+0x18>)
 23fbc18:	4403      	add	r3, r0
 23fbc1a:	681b      	ldr	r3, [r3, #0]
 23fbc1c:	685b      	ldr	r3, [r3, #4]
 23fbc1e:	9302      	str	r3, [sp, #8]
 23fbc20:	bd09      	pop	{r0, r3, pc}
 23fbc22:	0000      	.short	0x0000
 23fbc24:	1007a974 	.word	0x1007a974
 23fbc28:	00000028 	.word	0x00000028

023fbc2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbc2c:	b509      	push	{r0, r3, lr}
 23fbc2e:	4804      	ldr	r0, [pc, #16]	; (23fbc40 <network_connecting+0x14>)
 23fbc30:	6800      	ldr	r0, [r0, #0]
 23fbc32:	4b04      	ldr	r3, [pc, #16]	; (23fbc44 <network_connecting+0x18>)
 23fbc34:	4403      	add	r3, r0
 23fbc36:	681b      	ldr	r3, [r3, #0]
 23fbc38:	689b      	ldr	r3, [r3, #8]
 23fbc3a:	9302      	str	r3, [sp, #8]
 23fbc3c:	bd09      	pop	{r0, r3, pc}
 23fbc3e:	0000      	.short	0x0000
 23fbc40:	1007a974 	.word	0x1007a974
 23fbc44:	00000028 	.word	0x00000028

023fbc48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbc48:	b509      	push	{r0, r3, lr}
 23fbc4a:	4804      	ldr	r0, [pc, #16]	; (23fbc5c <network_disconnect+0x14>)
 23fbc4c:	6800      	ldr	r0, [r0, #0]
 23fbc4e:	4b04      	ldr	r3, [pc, #16]	; (23fbc60 <network_disconnect+0x18>)
 23fbc50:	4403      	add	r3, r0
 23fbc52:	681b      	ldr	r3, [r3, #0]
 23fbc54:	68db      	ldr	r3, [r3, #12]
 23fbc56:	9302      	str	r3, [sp, #8]
 23fbc58:	bd09      	pop	{r0, r3, pc}
 23fbc5a:	0000      	.short	0x0000
 23fbc5c:	1007a974 	.word	0x1007a974
 23fbc60:	00000028 	.word	0x00000028

023fbc64 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbc64:	b509      	push	{r0, r3, lr}
 23fbc66:	4804      	ldr	r0, [pc, #16]	; (23fbc78 <network_ready+0x14>)
 23fbc68:	6800      	ldr	r0, [r0, #0]
 23fbc6a:	4b04      	ldr	r3, [pc, #16]	; (23fbc7c <network_ready+0x18>)
 23fbc6c:	4403      	add	r3, r0
 23fbc6e:	681b      	ldr	r3, [r3, #0]
 23fbc70:	691b      	ldr	r3, [r3, #16]
 23fbc72:	9302      	str	r3, [sp, #8]
 23fbc74:	bd09      	pop	{r0, r3, pc}
 23fbc76:	0000      	.short	0x0000
 23fbc78:	1007a974 	.word	0x1007a974
 23fbc7c:	00000028 	.word	0x00000028

023fbc80 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbc80:	b509      	push	{r0, r3, lr}
 23fbc82:	4804      	ldr	r0, [pc, #16]	; (23fbc94 <network_on+0x14>)
 23fbc84:	6800      	ldr	r0, [r0, #0]
 23fbc86:	4b04      	ldr	r3, [pc, #16]	; (23fbc98 <network_on+0x18>)
 23fbc88:	4403      	add	r3, r0
 23fbc8a:	681b      	ldr	r3, [r3, #0]
 23fbc8c:	695b      	ldr	r3, [r3, #20]
 23fbc8e:	9302      	str	r3, [sp, #8]
 23fbc90:	bd09      	pop	{r0, r3, pc}
 23fbc92:	0000      	.short	0x0000
 23fbc94:	1007a974 	.word	0x1007a974
 23fbc98:	00000028 	.word	0x00000028

023fbc9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbc9c:	b509      	push	{r0, r3, lr}
 23fbc9e:	4804      	ldr	r0, [pc, #16]	; (23fbcb0 <network_off+0x14>)
 23fbca0:	6800      	ldr	r0, [r0, #0]
 23fbca2:	4b04      	ldr	r3, [pc, #16]	; (23fbcb4 <network_off+0x18>)
 23fbca4:	4403      	add	r3, r0
 23fbca6:	681b      	ldr	r3, [r3, #0]
 23fbca8:	699b      	ldr	r3, [r3, #24]
 23fbcaa:	9302      	str	r3, [sp, #8]
 23fbcac:	bd09      	pop	{r0, r3, pc}
 23fbcae:	0000      	.short	0x0000
 23fbcb0:	1007a974 	.word	0x1007a974
 23fbcb4:	00000028 	.word	0x00000028

023fbcb8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbcb8:	b509      	push	{r0, r3, lr}
 23fbcba:	4804      	ldr	r0, [pc, #16]	; (23fbccc <network_listen+0x14>)
 23fbcbc:	6800      	ldr	r0, [r0, #0]
 23fbcbe:	4b04      	ldr	r3, [pc, #16]	; (23fbcd0 <network_listen+0x18>)
 23fbcc0:	4403      	add	r3, r0
 23fbcc2:	681b      	ldr	r3, [r3, #0]
 23fbcc4:	69db      	ldr	r3, [r3, #28]
 23fbcc6:	9302      	str	r3, [sp, #8]
 23fbcc8:	bd09      	pop	{r0, r3, pc}
 23fbcca:	0000      	.short	0x0000
 23fbccc:	1007a974 	.word	0x1007a974
 23fbcd0:	00000028 	.word	0x00000028

023fbcd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fbcd4:	b509      	push	{r0, r3, lr}
 23fbcd6:	4804      	ldr	r0, [pc, #16]	; (23fbce8 <network_listening+0x14>)
 23fbcd8:	6800      	ldr	r0, [r0, #0]
 23fbcda:	4b04      	ldr	r3, [pc, #16]	; (23fbcec <network_listening+0x18>)
 23fbcdc:	4403      	add	r3, r0
 23fbcde:	681b      	ldr	r3, [r3, #0]
 23fbce0:	6a1b      	ldr	r3, [r3, #32]
 23fbce2:	9302      	str	r3, [sp, #8]
 23fbce4:	bd09      	pop	{r0, r3, pc}
 23fbce6:	0000      	.short	0x0000
 23fbce8:	1007a974 	.word	0x1007a974
 23fbcec:	00000028 	.word	0x00000028

023fbcf0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fbcf0:	b509      	push	{r0, r3, lr}
 23fbcf2:	4804      	ldr	r0, [pc, #16]	; (23fbd04 <network_set_listen_timeout+0x14>)
 23fbcf4:	6800      	ldr	r0, [r0, #0]
 23fbcf6:	4b04      	ldr	r3, [pc, #16]	; (23fbd08 <network_set_listen_timeout+0x18>)
 23fbcf8:	4403      	add	r3, r0
 23fbcfa:	681b      	ldr	r3, [r3, #0]
 23fbcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbcfe:	9302      	str	r3, [sp, #8]
 23fbd00:	bd09      	pop	{r0, r3, pc}
 23fbd02:	0000      	.short	0x0000
 23fbd04:	1007a974 	.word	0x1007a974
 23fbd08:	00000028 	.word	0x00000028

023fbd0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fbd0c:	b509      	push	{r0, r3, lr}
 23fbd0e:	4804      	ldr	r0, [pc, #16]	; (23fbd20 <network_get_listen_timeout+0x14>)
 23fbd10:	6800      	ldr	r0, [r0, #0]
 23fbd12:	4b04      	ldr	r3, [pc, #16]	; (23fbd24 <network_get_listen_timeout+0x18>)
 23fbd14:	4403      	add	r3, r0
 23fbd16:	681b      	ldr	r3, [r3, #0]
 23fbd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbd1a:	9302      	str	r3, [sp, #8]
 23fbd1c:	bd09      	pop	{r0, r3, pc}
 23fbd1e:	0000      	.short	0x0000
 23fbd20:	1007a974 	.word	0x1007a974
 23fbd24:	00000028 	.word	0x00000028

023fbd28 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fbd28:	b509      	push	{r0, r3, lr}
 23fbd2a:	4804      	ldr	r0, [pc, #16]	; (23fbd3c <network_is_on+0x14>)
 23fbd2c:	6800      	ldr	r0, [r0, #0]
 23fbd2e:	4b04      	ldr	r3, [pc, #16]	; (23fbd40 <network_is_on+0x18>)
 23fbd30:	4403      	add	r3, r0
 23fbd32:	681b      	ldr	r3, [r3, #0]
 23fbd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbd36:	9302      	str	r3, [sp, #8]
 23fbd38:	bd09      	pop	{r0, r3, pc}
 23fbd3a:	0000      	.short	0x0000
 23fbd3c:	1007a974 	.word	0x1007a974
 23fbd40:	00000028 	.word	0x00000028

023fbd44 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fbd44:	b509      	push	{r0, r3, lr}
 23fbd46:	4804      	ldr	r0, [pc, #16]	; (23fbd58 <network_is_off+0x14>)
 23fbd48:	6800      	ldr	r0, [r0, #0]
 23fbd4a:	4b04      	ldr	r3, [pc, #16]	; (23fbd5c <network_is_off+0x18>)
 23fbd4c:	4403      	add	r3, r0
 23fbd4e:	681b      	ldr	r3, [r3, #0]
 23fbd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbd52:	9302      	str	r3, [sp, #8]
 23fbd54:	bd09      	pop	{r0, r3, pc}
 23fbd56:	0000      	.short	0x0000
 23fbd58:	1007a974 	.word	0x1007a974
 23fbd5c:	00000028 	.word	0x00000028

023fbd60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbd60:	b509      	push	{r0, r3, lr}
 23fbd62:	4804      	ldr	r0, [pc, #16]	; (23fbd74 <set_system_mode+0x14>)
 23fbd64:	6800      	ldr	r0, [r0, #0]
 23fbd66:	4b04      	ldr	r3, [pc, #16]	; (23fbd78 <set_system_mode+0x18>)
 23fbd68:	4403      	add	r3, r0
 23fbd6a:	681b      	ldr	r3, [r3, #0]
 23fbd6c:	685b      	ldr	r3, [r3, #4]
 23fbd6e:	9302      	str	r3, [sp, #8]
 23fbd70:	bd09      	pop	{r0, r3, pc}
 23fbd72:	0000      	.short	0x0000
 23fbd74:	1007a974 	.word	0x1007a974
 23fbd78:	00000008 	.word	0x00000008

023fbd7c <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
 23fbd7c:	b509      	push	{r0, r3, lr}
 23fbd7e:	4804      	ldr	r0, [pc, #16]	; (23fbd90 <led_pattern_period+0x14>)
 23fbd80:	6800      	ldr	r0, [r0, #0]
 23fbd82:	4b04      	ldr	r3, [pc, #16]	; (23fbd94 <led_pattern_period+0x18>)
 23fbd84:	4403      	add	r3, r0
 23fbd86:	681b      	ldr	r3, [r3, #0]
 23fbd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fbd8a:	9302      	str	r3, [sp, #8]
 23fbd8c:	bd09      	pop	{r0, r3, pc}
 23fbd8e:	0000      	.short	0x0000
 23fbd90:	1007a974 	.word	0x1007a974
 23fbd94:	00000008 	.word	0x00000008

023fbd98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbd98:	b509      	push	{r0, r3, lr}
 23fbd9a:	4804      	ldr	r0, [pc, #16]	; (23fbdac <system_ctrl_set_app_request_handler+0x14>)
 23fbd9c:	6800      	ldr	r0, [r0, #0]
 23fbd9e:	4b04      	ldr	r3, [pc, #16]	; (23fbdb0 <system_ctrl_set_app_request_handler+0x18>)
 23fbda0:	4403      	add	r3, r0
 23fbda2:	681b      	ldr	r3, [r3, #0]
 23fbda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbda8:	9302      	str	r3, [sp, #8]
 23fbdaa:	bd09      	pop	{r0, r3, pc}
 23fbdac:	1007a974 	.word	0x1007a974
 23fbdb0:	00000008 	.word	0x00000008

023fbdb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbdb4:	b509      	push	{r0, r3, lr}
 23fbdb6:	4804      	ldr	r0, [pc, #16]	; (23fbdc8 <system_ctrl_set_result+0x14>)
 23fbdb8:	6800      	ldr	r0, [r0, #0]
 23fbdba:	4b04      	ldr	r3, [pc, #16]	; (23fbdcc <system_ctrl_set_result+0x18>)
 23fbdbc:	4403      	add	r3, r0
 23fbdbe:	681b      	ldr	r3, [r3, #0]
 23fbdc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbdc4:	9302      	str	r3, [sp, #8]
 23fbdc6:	bd09      	pop	{r0, r3, pc}
 23fbdc8:	1007a974 	.word	0x1007a974
 23fbdcc:	00000008 	.word	0x00000008

023fbdd0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fbdd0:	b509      	push	{r0, r3, lr}
 23fbdd2:	4804      	ldr	r0, [pc, #16]	; (23fbde4 <malloc+0x14>)
 23fbdd4:	6800      	ldr	r0, [r0, #0]
 23fbdd6:	4b04      	ldr	r3, [pc, #16]	; (23fbde8 <malloc+0x18>)
 23fbdd8:	4403      	add	r3, r0
 23fbdda:	681b      	ldr	r3, [r3, #0]
 23fbddc:	681b      	ldr	r3, [r3, #0]
 23fbdde:	9302      	str	r3, [sp, #8]
 23fbde0:	bd09      	pop	{r0, r3, pc}
 23fbde2:	0000      	.short	0x0000
 23fbde4:	1007a974 	.word	0x1007a974
 23fbde8:	00000004 	.word	0x00000004

023fbdec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fbdec:	b509      	push	{r0, r3, lr}
 23fbdee:	4804      	ldr	r0, [pc, #16]	; (23fbe00 <free+0x14>)
 23fbdf0:	6800      	ldr	r0, [r0, #0]
 23fbdf2:	4b04      	ldr	r3, [pc, #16]	; (23fbe04 <free+0x18>)
 23fbdf4:	4403      	add	r3, r0
 23fbdf6:	681b      	ldr	r3, [r3, #0]
 23fbdf8:	685b      	ldr	r3, [r3, #4]
 23fbdfa:	9302      	str	r3, [sp, #8]
 23fbdfc:	bd09      	pop	{r0, r3, pc}
 23fbdfe:	0000      	.short	0x0000
 23fbe00:	1007a974 	.word	0x1007a974
 23fbe04:	00000004 	.word	0x00000004

023fbe08 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fbe08:	b509      	push	{r0, r3, lr}
 23fbe0a:	4804      	ldr	r0, [pc, #16]	; (23fbe1c <realloc+0x14>)
 23fbe0c:	6800      	ldr	r0, [r0, #0]
 23fbe0e:	4b04      	ldr	r3, [pc, #16]	; (23fbe20 <realloc+0x18>)
 23fbe10:	4403      	add	r3, r0
 23fbe12:	681b      	ldr	r3, [r3, #0]
 23fbe14:	689b      	ldr	r3, [r3, #8]
 23fbe16:	9302      	str	r3, [sp, #8]
 23fbe18:	bd09      	pop	{r0, r3, pc}
 23fbe1a:	0000      	.short	0x0000
 23fbe1c:	1007a974 	.word	0x1007a974
 23fbe20:	00000004 	.word	0x00000004

023fbe24 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fbe24:	b509      	push	{r0, r3, lr}
 23fbe26:	4804      	ldr	r0, [pc, #16]	; (23fbe38 <vsnprintf+0x14>)
 23fbe28:	6800      	ldr	r0, [r0, #0]
 23fbe2a:	4b04      	ldr	r3, [pc, #16]	; (23fbe3c <vsnprintf+0x18>)
 23fbe2c:	4403      	add	r3, r0
 23fbe2e:	681b      	ldr	r3, [r3, #0]
 23fbe30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbe32:	9302      	str	r3, [sp, #8]
 23fbe34:	bd09      	pop	{r0, r3, pc}
 23fbe36:	0000      	.short	0x0000
 23fbe38:	1007a974 	.word	0x1007a974
 23fbe3c:	00000004 	.word	0x00000004

023fbe40 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fbe40:	b509      	push	{r0, r3, lr}
 23fbe42:	4804      	ldr	r0, [pc, #16]	; (23fbe54 <abort+0x14>)
 23fbe44:	6800      	ldr	r0, [r0, #0]
 23fbe46:	4b04      	ldr	r3, [pc, #16]	; (23fbe58 <abort+0x18>)
 23fbe48:	4403      	add	r3, r0
 23fbe4a:	681b      	ldr	r3, [r3, #0]
 23fbe4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbe4e:	9302      	str	r3, [sp, #8]
 23fbe50:	bd09      	pop	{r0, r3, pc}
 23fbe52:	0000      	.short	0x0000
 23fbe54:	1007a974 	.word	0x1007a974
 23fbe58:	00000004 	.word	0x00000004

023fbe5c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fbe5c:	b509      	push	{r0, r3, lr}
 23fbe5e:	4804      	ldr	r0, [pc, #16]	; (23fbe70 <__errno+0x14>)
 23fbe60:	6800      	ldr	r0, [r0, #0]
 23fbe62:	4b04      	ldr	r3, [pc, #16]	; (23fbe74 <__errno+0x18>)
 23fbe64:	4403      	add	r3, r0
 23fbe66:	681b      	ldr	r3, [r3, #0]
 23fbe68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbe6a:	9302      	str	r3, [sp, #8]
 23fbe6c:	bd09      	pop	{r0, r3, pc}
 23fbe6e:	0000      	.short	0x0000
 23fbe70:	1007a974 	.word	0x1007a974
 23fbe74:	00000004 	.word	0x00000004

023fbe78 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fbe78:	b509      	push	{r0, r3, lr}
 23fbe7a:	4804      	ldr	r0, [pc, #16]	; (23fbe8c <__assert_func+0x14>)
 23fbe7c:	6800      	ldr	r0, [r0, #0]
 23fbe7e:	4b04      	ldr	r3, [pc, #16]	; (23fbe90 <__assert_func+0x18>)
 23fbe80:	4403      	add	r3, r0
 23fbe82:	681b      	ldr	r3, [r3, #0]
 23fbe84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbe86:	9302      	str	r3, [sp, #8]
 23fbe88:	bd09      	pop	{r0, r3, pc}
 23fbe8a:	0000      	.short	0x0000
 23fbe8c:	1007a974 	.word	0x1007a974
 23fbe90:	00000004 	.word	0x00000004

023fbe94 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fbe94:	b509      	push	{r0, r3, lr}
 23fbe96:	4804      	ldr	r0, [pc, #16]	; (23fbea8 <newlib_impure_ptr_callback+0x14>)
 23fbe98:	6800      	ldr	r0, [r0, #0]
 23fbe9a:	4b04      	ldr	r3, [pc, #16]	; (23fbeac <newlib_impure_ptr_callback+0x18>)
 23fbe9c:	4403      	add	r3, r0
 23fbe9e:	681b      	ldr	r3, [r3, #0]
 23fbea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbea2:	9302      	str	r3, [sp, #8]
 23fbea4:	bd09      	pop	{r0, r3, pc}
 23fbea6:	0000      	.short	0x0000
 23fbea8:	1007a974 	.word	0x1007a974
 23fbeac:	00000004 	.word	0x00000004

023fbeb0 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    } else {
        d_.period = period;
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
 23fbeb0:	460b      	mov	r3, r1
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
 23fbeb2:	680a      	ldr	r2, [r1, #0]
 23fbeb4:	4601      	mov	r1, r0
 23fbeb6:	6892      	ldr	r2, [r2, #8]
 23fbeb8:	4618      	mov	r0, r3
 23fbeba:	4710      	bx	r2

023fbebc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
 23fbebc:	b570      	push	{r4, r5, r6, lr}
 23fbebe:	4c0e      	ldr	r4, [pc, #56]	; (23fbef8 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
    d_.next = nullptr;
 23fbec0:	2500      	movs	r5, #0
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
 23fbec2:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
 23fbec4:	241c      	movs	r4, #28
 23fbec6:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
 23fbeca:	f89d 4014 	ldrb.w	r4, [sp, #20]
 23fbece:	f89d 6010 	ldrb.w	r6, [sp, #16]
 23fbed2:	f004 0403 	and.w	r4, r4, #3
 23fbed6:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
 23fbeda:	b2e4      	uxtb	r4, r4
 23fbedc:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
 23fbede:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
 23fbee0:	7485      	strb	r5, [r0, #18]
    d_.color = color;
 23fbee2:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
 23fbee4:	7c42      	ldrb	r2, [r0, #17]
    d_.prev = nullptr;
 23fbee6:	60c5      	str	r5, [r0, #12]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
 23fbee8:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
 23fbeea:	bf0a      	itet	eq
 23fbeec:	4b03      	ldreq	r3, [pc, #12]	; (23fbefc <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
 23fbeee:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
 23fbef0:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
 23fbef4:	bd70      	pop	{r4, r5, r6, pc}
 23fbef6:	bf00      	nop
 23fbef8:	023ff9e4 	.word	0x023ff9e4
 23fbefc:	023fbeb1 	.word	0x023fbeb1

023fbf00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fbf00:	2300      	movs	r3, #0
 23fbf02:	6840      	ldr	r0, [r0, #4]
 23fbf04:	461a      	mov	r2, r3
 23fbf06:	f7ff be83 	b.w	23fbc10 <network_connect>

023fbf0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fbf0a:	2200      	movs	r2, #0
 23fbf0c:	2102      	movs	r1, #2
 23fbf0e:	6840      	ldr	r0, [r0, #4]
 23fbf10:	f7ff be9a 	b.w	23fbc48 <network_disconnect>

023fbf14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fbf14:	2200      	movs	r2, #0
 23fbf16:	6840      	ldr	r0, [r0, #4]
 23fbf18:	4611      	mov	r1, r2
 23fbf1a:	f7ff be87 	b.w	23fbc2c <network_connecting>

023fbf1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fbf1e:	2200      	movs	r2, #0
 23fbf20:	6840      	ldr	r0, [r0, #4]
 23fbf22:	4611      	mov	r1, r2
 23fbf24:	f7ff be9e 	b.w	23fbc64 <network_ready>

023fbf28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fbf28:	2300      	movs	r3, #0
 23fbf2a:	6840      	ldr	r0, [r0, #4]
 23fbf2c:	461a      	mov	r2, r3
 23fbf2e:	4619      	mov	r1, r3
 23fbf30:	f7ff bea6 	b.w	23fbc80 <network_on>

023fbf34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fbf34:	2300      	movs	r3, #0
 23fbf36:	6840      	ldr	r0, [r0, #4]
 23fbf38:	461a      	mov	r2, r3
 23fbf3a:	4619      	mov	r1, r3
 23fbf3c:	f7ff beae 	b.w	23fbc9c <network_off>

023fbf40 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fbf40:	2100      	movs	r1, #0
 23fbf42:	6840      	ldr	r0, [r0, #4]
 23fbf44:	f7ff bef0 	b.w	23fbd28 <network_is_on>

023fbf48 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fbf48:	2100      	movs	r1, #0
 23fbf4a:	6840      	ldr	r0, [r0, #4]
 23fbf4c:	f7ff befa 	b.w	23fbd44 <network_is_off>

023fbf50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fbf50:	2200      	movs	r2, #0
 23fbf52:	6840      	ldr	r0, [r0, #4]
 23fbf54:	f081 0101 	eor.w	r1, r1, #1
 23fbf58:	f7ff beae 	b.w	23fbcb8 <network_listen>

023fbf5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fbf5c:	2200      	movs	r2, #0
 23fbf5e:	6840      	ldr	r0, [r0, #4]
 23fbf60:	f7ff bec6 	b.w	23fbcf0 <network_set_listen_timeout>

023fbf64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fbf64:	2200      	movs	r2, #0
 23fbf66:	6840      	ldr	r0, [r0, #4]
 23fbf68:	4611      	mov	r1, r2
 23fbf6a:	f7ff becf 	b.w	23fbd0c <network_get_listen_timeout>

023fbf6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fbf6e:	2200      	movs	r2, #0
 23fbf70:	6840      	ldr	r0, [r0, #4]
 23fbf72:	4611      	mov	r1, r2
 23fbf74:	f7ff beae 	b.w	23fbcd4 <network_listening>

023fbf78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fbf78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fbf7c:	b095      	sub	sp, #84	; 0x54
 23fbf7e:	4614      	mov	r4, r2
 23fbf80:	460d      	mov	r5, r1
 23fbf82:	4607      	mov	r7, r0
    IPAddress addr;
 23fbf84:	f000 fb60 	bl	23fc648 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fbf88:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fbf8a:	221c      	movs	r2, #28
 23fbf8c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fbf8e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fbf90:	f003 fb65 	bl	23ff65e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fbf94:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fbf96:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fbf98:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fbf9a:	2100      	movs	r1, #0
 23fbf9c:	466b      	mov	r3, sp
 23fbf9e:	aa0c      	add	r2, sp, #48	; 0x30
 23fbfa0:	f7ff fdc6 	bl	23fbb30 <netdb_getaddrinfo>
    if (!r) {
 23fbfa4:	4604      	mov	r4, r0
 23fbfa6:	2800      	cmp	r0, #0
 23fbfa8:	d14b      	bne.n	23fc042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fbfaa:	4602      	mov	r2, r0
 23fbfac:	2101      	movs	r1, #1
 23fbfae:	6868      	ldr	r0, [r5, #4]
 23fbfb0:	f7ff fe58 	bl	23fbc64 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbfb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fbfb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbfb8:	4622      	mov	r2, r4
 23fbfba:	6868      	ldr	r0, [r5, #4]
 23fbfbc:	f7ff fe52 	bl	23fbc64 <network_ready>
        bool ok = false;
 23fbfc0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbfc2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fbfc4:	9e00      	ldr	r6, [sp, #0]
 23fbfc6:	2e00      	cmp	r6, #0
 23fbfc8:	d03b      	beq.n	23fc042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fbfca:	2900      	cmp	r1, #0
 23fbfcc:	d139      	bne.n	23fc042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fbfce:	6873      	ldr	r3, [r6, #4]
 23fbfd0:	2b02      	cmp	r3, #2
 23fbfd2:	d003      	beq.n	23fbfdc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fbfd4:	2b0a      	cmp	r3, #10
 23fbfd6:	d011      	beq.n	23fbffc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fbfd8:	69f6      	ldr	r6, [r6, #28]
 23fbfda:	e7f4      	b.n	23fbfc6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fbfdc:	f1b8 0f00 	cmp.w	r8, #0
 23fbfe0:	d0fa      	beq.n	23fbfd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fbfe2:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fbfe4:	a806      	add	r0, sp, #24
 23fbfe6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fbfe8:	1d3c      	adds	r4, r7, #4
 23fbfea:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fbfec:	f000 fb5a 	bl	23fc6a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fbff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbff4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fbff6:	4641      	mov	r1, r8
 23fbff8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fbffa:	e7ed      	b.n	23fbfd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fbffc:	f1b9 0f00 	cmp.w	r9, #0
 23fc000:	d0ea      	beq.n	23fbfd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fc002:	2210      	movs	r2, #16
 23fc004:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fc006:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fc008:	f003 fb29 	bl	23ff65e <memset>
                    a.v = 6;
 23fc00c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc00e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fc010:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc014:	f104 0308 	add.w	r3, r4, #8
 23fc018:	3418      	adds	r4, #24
 23fc01a:	462a      	mov	r2, r5
 23fc01c:	6818      	ldr	r0, [r3, #0]
 23fc01e:	6859      	ldr	r1, [r3, #4]
 23fc020:	3308      	adds	r3, #8
 23fc022:	c203      	stmia	r2!, {r0, r1}
 23fc024:	42a3      	cmp	r3, r4
 23fc026:	4615      	mov	r5, r2
 23fc028:	d1f7      	bne.n	23fc01a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fc02a:	a901      	add	r1, sp, #4
 23fc02c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fc02e:	1d3c      	adds	r4, r7, #4
 23fc030:	ad07      	add	r5, sp, #28
 23fc032:	f000 fb17 	bl	23fc664 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc03a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc03c:	4649      	mov	r1, r9
 23fc03e:	7023      	strb	r3, [r4, #0]
                    break;
 23fc040:	e7ca      	b.n	23fbfd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fc042:	9800      	ldr	r0, [sp, #0]
 23fc044:	f7ff fd66 	bl	23fbb14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fc048:	4638      	mov	r0, r7
 23fc04a:	b015      	add	sp, #84	; 0x54
 23fc04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc050 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc050:	4b02      	ldr	r3, [pc, #8]	; (23fc05c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fc052:	4a03      	ldr	r2, [pc, #12]	; (23fc060 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fc054:	601a      	str	r2, [r3, #0]
 23fc056:	2200      	movs	r2, #0
 23fc058:	605a      	str	r2, [r3, #4]

} // spark
 23fc05a:	4770      	bx	lr
 23fc05c:	1007ae68 	.word	0x1007ae68
 23fc060:	023ffa10 	.word	0x023ffa10

023fc064 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fc064:	2200      	movs	r2, #0
 23fc066:	6840      	ldr	r0, [r0, #4]
 23fc068:	4611      	mov	r1, r2
 23fc06a:	f7ff bdfb 	b.w	23fbc64 <network_ready>

023fc06e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc06e:	2200      	movs	r2, #0
 23fc070:	6840      	ldr	r0, [r0, #4]
 23fc072:	4611      	mov	r1, r2
 23fc074:	f7ff be2e 	b.w	23fbcd4 <network_listening>

023fc078 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc078:	2200      	movs	r2, #0
 23fc07a:	6840      	ldr	r0, [r0, #4]
 23fc07c:	4611      	mov	r1, r2
 23fc07e:	f7ff be45 	b.w	23fbd0c <network_get_listen_timeout>

023fc082 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc082:	2200      	movs	r2, #0
 23fc084:	6840      	ldr	r0, [r0, #4]
 23fc086:	f7ff be33 	b.w	23fbcf0 <network_set_listen_timeout>

023fc08a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc08a:	2200      	movs	r2, #0
 23fc08c:	6840      	ldr	r0, [r0, #4]
 23fc08e:	f081 0101 	eor.w	r1, r1, #1
 23fc092:	f7ff be11 	b.w	23fbcb8 <network_listen>

023fc096 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc096:	2300      	movs	r3, #0
 23fc098:	6840      	ldr	r0, [r0, #4]
 23fc09a:	461a      	mov	r2, r3
 23fc09c:	4619      	mov	r1, r3
 23fc09e:	f7ff bdfd 	b.w	23fbc9c <network_off>

023fc0a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc0a2:	2300      	movs	r3, #0
 23fc0a4:	6840      	ldr	r0, [r0, #4]
 23fc0a6:	461a      	mov	r2, r3
 23fc0a8:	4619      	mov	r1, r3
 23fc0aa:	f7ff bde9 	b.w	23fbc80 <network_on>

023fc0ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc0ae:	2200      	movs	r2, #0
 23fc0b0:	6840      	ldr	r0, [r0, #4]
 23fc0b2:	4611      	mov	r1, r2
 23fc0b4:	f7ff bdba 	b.w	23fbc2c <network_connecting>

023fc0b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc0b8:	2200      	movs	r2, #0
 23fc0ba:	2102      	movs	r1, #2
 23fc0bc:	6840      	ldr	r0, [r0, #4]
 23fc0be:	f7ff bdc3 	b.w	23fbc48 <network_disconnect>

023fc0c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc0c2:	2300      	movs	r3, #0
 23fc0c4:	6840      	ldr	r0, [r0, #4]
 23fc0c6:	461a      	mov	r2, r3
 23fc0c8:	f7ff bda2 	b.w	23fbc10 <network_connect>

023fc0cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fc0cc:	2204      	movs	r2, #4
 23fc0ce:	4b02      	ldr	r3, [pc, #8]	; (23fc0d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fc0d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fc0d2:	4a02      	ldr	r2, [pc, #8]	; (23fc0dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fc0d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fc0d6:	4770      	bx	lr
 23fc0d8:	1007ae70 	.word	0x1007ae70
 23fc0dc:	023ffa4c 	.word	0x023ffa4c

023fc0e0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc0e0:	2201      	movs	r2, #1
 23fc0e2:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc0e6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc0ea:	4618      	mov	r0, r3
 23fc0ec:	2901      	cmp	r1, #1
 23fc0ee:	d108      	bne.n	23fc102 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc0f0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc0f4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc0f8:	3a01      	subs	r2, #1
 23fc0fa:	f103 0310 	add.w	r3, r3, #16
 23fc0fe:	d1f2      	bne.n	23fc0e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc100:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc102:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc104:	bf04      	itt	eq
 23fc106:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc10a:	1852      	addeq	r2, r2, r1
 23fc10c:	e7f4      	b.n	23fc0f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc10e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc10e:	b40e      	push	{r1, r2, r3}
 23fc110:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc112:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc114:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc116:	af00      	add	r7, sp, #0
 23fc118:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc11c:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc120:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc122:	462b      	mov	r3, r5
 23fc124:	1878      	adds	r0, r7, r1
 23fc126:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc128:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc12a:	f7ff fe7b 	bl	23fbe24 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc12e:	280f      	cmp	r0, #15
 23fc130:	687a      	ldr	r2, [r7, #4]
 23fc132:	d91a      	bls.n	23fc16a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc134:	f100 0308 	add.w	r3, r0, #8
 23fc138:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc13c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc13e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc142:	1c41      	adds	r1, r0, #1
 23fc144:	462b      	mov	r3, r5
 23fc146:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc148:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc14a:	f7ff fe6b 	bl	23fbe24 <vsnprintf>
        if (n > 0) {
 23fc14e:	1e02      	subs	r2, r0, #0
 23fc150:	dd04      	ble.n	23fc15c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc152:	6823      	ldr	r3, [r4, #0]
 23fc154:	4669      	mov	r1, sp
 23fc156:	4620      	mov	r0, r4
 23fc158:	689b      	ldr	r3, [r3, #8]
 23fc15a:	4798      	blx	r3
 23fc15c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc15e:	3720      	adds	r7, #32
 23fc160:	46bd      	mov	sp, r7
 23fc162:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc166:	b003      	add	sp, #12
 23fc168:	4770      	bx	lr
    } else if (n > 0) {
 23fc16a:	2800      	cmp	r0, #0
 23fc16c:	d0f7      	beq.n	23fc15e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc16e:	6823      	ldr	r3, [r4, #0]
 23fc170:	4602      	mov	r2, r0
 23fc172:	689b      	ldr	r3, [r3, #8]
 23fc174:	4620      	mov	r0, r4
 23fc176:	f107 0110 	add.w	r1, r7, #16
 23fc17a:	4798      	blx	r3
}
 23fc17c:	e7ef      	b.n	23fc15e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc17e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 23fc17e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc180:	6843      	ldr	r3, [r0, #4]
    {
 23fc182:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc184:	3b01      	subs	r3, #1
 23fc186:	6043      	str	r3, [r0, #4]
 23fc188:	b963      	cbnz	r3, 23fc1a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
 23fc18a:	6803      	ldr	r3, [r0, #0]
 23fc18c:	689b      	ldr	r3, [r3, #8]
 23fc18e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc190:	68a3      	ldr	r3, [r4, #8]
 23fc192:	3b01      	subs	r3, #1
 23fc194:	60a3      	str	r3, [r4, #8]
 23fc196:	b92b      	cbnz	r3, 23fc1a4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc198:	6823      	ldr	r3, [r4, #0]
 23fc19a:	4620      	mov	r0, r4
        }
    }
 23fc19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc1a0:	68db      	ldr	r3, [r3, #12]
 23fc1a2:	4718      	bx	r3
    }
 23fc1a4:	bd10      	pop	{r4, pc}

023fc1a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc1a6:	b538      	push	{r3, r4, r5, lr}
 23fc1a8:	680b      	ldr	r3, [r1, #0]
 23fc1aa:	4604      	mov	r4, r0
 23fc1ac:	6003      	str	r3, [r0, #0]
 23fc1ae:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc1b0:	6843      	ldr	r3, [r0, #4]
 23fc1b2:	429d      	cmp	r5, r3
 23fc1b4:	d008      	beq.n	23fc1c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc1b6:	b115      	cbz	r5, 23fc1be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc1b8:	686b      	ldr	r3, [r5, #4]
 23fc1ba:	3301      	adds	r3, #1
 23fc1bc:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc1be:	6860      	ldr	r0, [r4, #4]
 23fc1c0:	b108      	cbz	r0, 23fc1c6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc1c2:	f7ff ffdc 	bl	23fc17e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc1c6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc1c8:	bd38      	pop	{r3, r4, r5, pc}

023fc1ca <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc1ca:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc1cc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc1ce:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc1d2:	2201      	movs	r2, #1
 23fc1d4:	689b      	ldr	r3, [r3, #8]
 23fc1d6:	f10d 0107 	add.w	r1, sp, #7
 23fc1da:	4798      	blx	r3
}
 23fc1dc:	b003      	add	sp, #12
 23fc1de:	f85d fb04 	ldr.w	pc, [sp], #4

023fc1e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc1e2:	460b      	mov	r3, r1
 23fc1e4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc1e6:	2200      	movs	r2, #0
 23fc1e8:	b510      	push	{r4, lr}
 23fc1ea:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc1ec:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc1f0:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc1f2:	b90b      	cbnz	r3, 23fc1f8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc1f4:	4620      	mov	r0, r4
 23fc1f6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc1f8:	f7ff ffd5 	bl	23fc1a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc1fc:	e7fa      	b.n	23fc1f4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc1fe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc1fe:	6883      	ldr	r3, [r0, #8]
 23fc200:	b1eb      	cbz	r3, 23fc23e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc202:	781a      	ldrb	r2, [r3, #0]
 23fc204:	2a03      	cmp	r2, #3
 23fc206:	d81a      	bhi.n	23fc23e <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc208:	e8df f002 	tbb	[pc, r2]
 23fc20c:	1b021704 	.word	0x1b021704
 23fc210:	2005      	movs	r0, #5
 23fc212:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc214:	6802      	ldr	r2, [r0, #0]
 23fc216:	685b      	ldr	r3, [r3, #4]
 23fc218:	6852      	ldr	r2, [r2, #4]
 23fc21a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc21c:	282d      	cmp	r0, #45	; 0x2d
 23fc21e:	d012      	beq.n	23fc246 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc220:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc224:	2b09      	cmp	r3, #9
 23fc226:	d90e      	bls.n	23fc246 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc228:	2874      	cmp	r0, #116	; 0x74
 23fc22a:	d00e      	beq.n	23fc24a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc22c:	2866      	cmp	r0, #102	; 0x66
 23fc22e:	d00c      	beq.n	23fc24a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc230:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc234:	4258      	negs	r0, r3
 23fc236:	4158      	adcs	r0, r3
 23fc238:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc23a:	2006      	movs	r0, #6
 23fc23c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc23e:	2000      	movs	r0, #0
 23fc240:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc242:	2004      	movs	r0, #4
 23fc244:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc246:	2003      	movs	r0, #3
 23fc248:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc24a:	2002      	movs	r0, #2
}
 23fc24c:	4770      	bx	lr

023fc24e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc24e:	b510      	push	{r4, lr}
 23fc250:	4604      	mov	r4, r0
    switch (type()) {
 23fc252:	f7ff ffd4 	bl	23fc1fe <_ZNK5spark9JSONValue4typeEv>
 23fc256:	2802      	cmp	r0, #2
 23fc258:	d00e      	beq.n	23fc278 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc25a:	1ec3      	subs	r3, r0, #3
 23fc25c:	b2db      	uxtb	r3, r3
 23fc25e:	2b01      	cmp	r3, #1
 23fc260:	d814      	bhi.n	23fc28c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc262:	6822      	ldr	r2, [r4, #0]
 23fc264:	68a3      	ldr	r3, [r4, #8]
 23fc266:	6850      	ldr	r0, [r2, #4]
 23fc268:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc26a:	220a      	movs	r2, #10
}
 23fc26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc270:	2100      	movs	r1, #0
 23fc272:	4418      	add	r0, r3
 23fc274:	f003 baf4 	b.w	23ff860 <strtol>
        const char* const s = d_->json + t_->start;
 23fc278:	6822      	ldr	r2, [r4, #0]
 23fc27a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc27c:	6852      	ldr	r2, [r2, #4]
 23fc27e:	685b      	ldr	r3, [r3, #4]
 23fc280:	5cd0      	ldrb	r0, [r2, r3]
 23fc282:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc286:	4258      	negs	r0, r3
 23fc288:	4158      	adcs	r0, r3
}
 23fc28a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc28c:	2000      	movs	r0, #0
 23fc28e:	e7fc      	b.n	23fc28a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc290 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc290:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc292:	2300      	movs	r3, #0
 23fc294:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc296:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc29a:	480e      	ldr	r0, [pc, #56]	; (23fc2d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc29c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc2a0:	b1a9      	cbz	r1, 23fc2ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc2a2:	780b      	ldrb	r3, [r1, #0]
 23fc2a4:	2b03      	cmp	r3, #3
 23fc2a6:	d006      	beq.n	23fc2b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc2a8:	b98b      	cbnz	r3, 23fc2ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc2aa:	6813      	ldr	r3, [r2, #0]
 23fc2ac:	6858      	ldr	r0, [r3, #4]
 23fc2ae:	684b      	ldr	r3, [r1, #4]
 23fc2b0:	5cc3      	ldrb	r3, [r0, r3]
 23fc2b2:	2b6e      	cmp	r3, #110	; 0x6e
 23fc2b4:	d007      	beq.n	23fc2c6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc2b6:	6813      	ldr	r3, [r2, #0]
 23fc2b8:	684d      	ldr	r5, [r1, #4]
 23fc2ba:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc2bc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc2be:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc2c0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc2c2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc2c4:	60e3      	str	r3, [r4, #12]
 23fc2c6:	4611      	mov	r1, r2
 23fc2c8:	4620      	mov	r0, r4
 23fc2ca:	f7ff ff6c 	bl	23fc1a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc2ce:	4620      	mov	r0, r4
 23fc2d0:	bd38      	pop	{r3, r4, r5, pc}
 23fc2d2:	bf00      	nop
 23fc2d4:	023ffb4e 	.word	0x023ffb4e

023fc2d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc2d8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc2da:	2500      	movs	r5, #0
 23fc2dc:	460b      	mov	r3, r1
 23fc2de:	4604      	mov	r4, r0
 23fc2e0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc2e2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc2e6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc2ea:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc2ee:	b14b      	cbz	r3, 23fc304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc2f0:	781a      	ldrb	r2, [r3, #0]
 23fc2f2:	2a01      	cmp	r2, #1
 23fc2f4:	d106      	bne.n	23fc304 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc2f6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc2fa:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc2fc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc2fe:	6143      	str	r3, [r0, #20]
 23fc300:	f7ff ff51 	bl	23fc1a6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc304:	4620      	mov	r0, r4
 23fc306:	bd38      	pop	{r3, r4, r5, pc}

023fc308 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc308:	b510      	push	{r4, lr}
    if (!n_) {
 23fc30a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc30c:	4604      	mov	r4, r0
    if (!n_) {
 23fc30e:	b163      	cbz	r3, 23fc32a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc310:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc312:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc314:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc316:	3010      	adds	r0, #16
 23fc318:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc31a:	6120      	str	r0, [r4, #16]
    --n_;
 23fc31c:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc31e:	b113      	cbz	r3, 23fc326 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc320:	f7ff fede 	bl	23fc0e0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc324:	60a0      	str	r0, [r4, #8]
    return true;
 23fc326:	2001      	movs	r0, #1
 23fc328:	e000      	b.n	23fc32c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc32a:	4618      	mov	r0, r3
}
 23fc32c:	bd10      	pop	{r4, pc}

023fc32e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc32e:	b510      	push	{r4, lr}
    write('}');
 23fc330:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc332:	4604      	mov	r4, r0
    write('}');
 23fc334:	f7ff ff49 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc338:	2301      	movs	r3, #1
}
 23fc33a:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc33c:	7123      	strb	r3, [r4, #4]
}
 23fc33e:	bd10      	pop	{r4, pc}

023fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc340:	b508      	push	{r3, lr}
    switch (state_) {
 23fc342:	7903      	ldrb	r3, [r0, #4]
 23fc344:	2b01      	cmp	r3, #1
 23fc346:	d002      	beq.n	23fc34e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc348:	2b02      	cmp	r3, #2
 23fc34a:	d004      	beq.n	23fc356 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc34c:	bd08      	pop	{r3, pc}
        write(',');
 23fc34e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc350:	f7ff ff3b 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
}
 23fc354:	e7fa      	b.n	23fc34c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc356:	213a      	movs	r1, #58	; 0x3a
 23fc358:	e7fa      	b.n	23fc350 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc35a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc35a:	b510      	push	{r4, lr}
 23fc35c:	4604      	mov	r4, r0
    writeSeparator();
 23fc35e:	f7ff ffef 	bl	23fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc362:	4620      	mov	r0, r4
 23fc364:	217b      	movs	r1, #123	; 0x7b
 23fc366:	f7ff ff30 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc36a:	2300      	movs	r3, #0
}
 23fc36c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc36e:	7123      	strb	r3, [r4, #4]
}
 23fc370:	bd10      	pop	{r4, pc}
	...

023fc374 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc374:	b513      	push	{r0, r1, r4, lr}
 23fc376:	4604      	mov	r4, r0
 23fc378:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc37a:	f7ff ffe1 	bl	23fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc37e:	6823      	ldr	r3, [r4, #0]
 23fc380:	4620      	mov	r0, r4
 23fc382:	68db      	ldr	r3, [r3, #12]
 23fc384:	9a01      	ldr	r2, [sp, #4]
 23fc386:	4903      	ldr	r1, [pc, #12]	; (23fc394 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc388:	4798      	blx	r3
    state_ = NEXT;
 23fc38a:	2301      	movs	r3, #1
}
 23fc38c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc38e:	7123      	strb	r3, [r4, #4]
}
 23fc390:	b002      	add	sp, #8
 23fc392:	bd10      	pop	{r4, pc}
 23fc394:	023ffa88 	.word	0x023ffa88

023fc398 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc398:	b513      	push	{r0, r1, r4, lr}
 23fc39a:	4604      	mov	r4, r0
 23fc39c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc39e:	f7ff ffcf 	bl	23fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc3a2:	6823      	ldr	r3, [r4, #0]
 23fc3a4:	4620      	mov	r0, r4
 23fc3a6:	68db      	ldr	r3, [r3, #12]
 23fc3a8:	9a01      	ldr	r2, [sp, #4]
 23fc3aa:	4903      	ldr	r1, [pc, #12]	; (23fc3b8 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc3ac:	4798      	blx	r3
    state_ = NEXT;
 23fc3ae:	2301      	movs	r3, #1
}
 23fc3b0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc3b2:	7123      	strb	r3, [r4, #4]
}
 23fc3b4:	b002      	add	sp, #8
 23fc3b6:	bd10      	pop	{r4, pc}
 23fc3b8:	023ffa8b 	.word	0x023ffa8b

023fc3bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fc3c0:	460d      	mov	r5, r1
 23fc3c2:	4690      	mov	r8, r2
    write('"');
 23fc3c4:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fc3c6:	4604      	mov	r4, r0
 23fc3c8:	462f      	mov	r7, r5
    write('"');
 23fc3ca:	f7ff fefe 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fc3ce:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fc474 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fc3d2:	44a8      	add	r8, r5
    while (s != end) {
 23fc3d4:	4547      	cmp	r7, r8
 23fc3d6:	46ba      	mov	sl, r7
 23fc3d8:	d03d      	beq.n	23fc456 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fc3da:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fc3de:	2e22      	cmp	r6, #34	; 0x22
 23fc3e0:	d006      	beq.n	23fc3f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc3e2:	2e5c      	cmp	r6, #92	; 0x5c
 23fc3e4:	d004      	beq.n	23fc3f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fc3e6:	4630      	mov	r0, r6
 23fc3e8:	f003 f8fa 	bl	23ff5e0 <isprint>
 23fc3ec:	2800      	cmp	r0, #0
 23fc3ee:	d1f1      	bne.n	23fc3d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fc3f0:	6823      	ldr	r3, [r4, #0]
 23fc3f2:	4629      	mov	r1, r5
 23fc3f4:	4620      	mov	r0, r4
 23fc3f6:	689b      	ldr	r3, [r3, #8]
 23fc3f8:	ebaa 0205 	sub.w	r2, sl, r5
 23fc3fc:	4798      	blx	r3
            write('\\');
 23fc3fe:	215c      	movs	r1, #92	; 0x5c
 23fc400:	4620      	mov	r0, r4
 23fc402:	f7ff fee2 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fc406:	2e0d      	cmp	r6, #13
 23fc408:	d80a      	bhi.n	23fc420 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fc40a:	2e07      	cmp	r6, #7
 23fc40c:	d91c      	bls.n	23fc448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc40e:	f1a6 0308 	sub.w	r3, r6, #8
 23fc412:	2b05      	cmp	r3, #5
 23fc414:	d818      	bhi.n	23fc448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fc416:	e8df f003 	tbb	[pc, r3]
 23fc41a:	0f0d      	.short	0x0f0d
 23fc41c:	15131711 	.word	0x15131711
 23fc420:	2e22      	cmp	r6, #34	; 0x22
 23fc422:	d001      	beq.n	23fc428 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fc424:	2e5c      	cmp	r6, #92	; 0x5c
 23fc426:	d10f      	bne.n	23fc448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fc428:	4631      	mov	r1, r6
                write('b');
 23fc42a:	4620      	mov	r0, r4
 23fc42c:	f7ff fecd 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fc430:	463d      	mov	r5, r7
    while (s != end) {
 23fc432:	e7cf      	b.n	23fc3d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fc434:	2162      	movs	r1, #98	; 0x62
 23fc436:	e7f8      	b.n	23fc42a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fc438:	2174      	movs	r1, #116	; 0x74
 23fc43a:	e7f6      	b.n	23fc42a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fc43c:	216e      	movs	r1, #110	; 0x6e
 23fc43e:	e7f4      	b.n	23fc42a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fc440:	2166      	movs	r1, #102	; 0x66
 23fc442:	e7f2      	b.n	23fc42a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fc444:	2172      	movs	r1, #114	; 0x72
 23fc446:	e7f0      	b.n	23fc42a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fc448:	6823      	ldr	r3, [r4, #0]
 23fc44a:	4632      	mov	r2, r6
 23fc44c:	4649      	mov	r1, r9
 23fc44e:	4620      	mov	r0, r4
 23fc450:	68db      	ldr	r3, [r3, #12]
 23fc452:	4798      	blx	r3
                break;
 23fc454:	e7ec      	b.n	23fc430 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fc456:	42bd      	cmp	r5, r7
 23fc458:	d005      	beq.n	23fc466 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fc45a:	6823      	ldr	r3, [r4, #0]
 23fc45c:	4629      	mov	r1, r5
 23fc45e:	4620      	mov	r0, r4
 23fc460:	689b      	ldr	r3, [r3, #8]
 23fc462:	1b7a      	subs	r2, r7, r5
 23fc464:	4798      	blx	r3
    }
    write('"');
 23fc466:	2122      	movs	r1, #34	; 0x22
 23fc468:	4620      	mov	r0, r4
 23fc46a:	f7ff feae 	bl	23fc1ca <_ZN5spark10JSONWriter5writeEc>
}
 23fc46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fc472:	bf00      	nop
 23fc474:	023ffa8e 	.word	0x023ffa8e

023fc478 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fc478:	b513      	push	{r0, r1, r4, lr}
 23fc47a:	4604      	mov	r4, r0
 23fc47c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc480:	f7ff ff5e 	bl	23fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fc484:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc488:	4620      	mov	r0, r4
 23fc48a:	f7ff ff97 	bl	23fc3bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fc48e:	2302      	movs	r3, #2
}
 23fc490:	4620      	mov	r0, r4
    state_ = VALUE;
 23fc492:	7123      	strb	r3, [r4, #4]
}
 23fc494:	b002      	add	sp, #8
 23fc496:	bd10      	pop	{r4, pc}

023fc498 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fc498:	b513      	push	{r0, r1, r4, lr}
 23fc49a:	4604      	mov	r4, r0
 23fc49c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fc4a0:	f7ff ff4e 	bl	23fc340 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fc4a4:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fc4a8:	4620      	mov	r0, r4
 23fc4aa:	f7ff ff87 	bl	23fc3bc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fc4ae:	2301      	movs	r3, #1
}
 23fc4b0:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc4b2:	7123      	strb	r3, [r4, #4]
}
 23fc4b4:	b002      	add	sp, #8
 23fc4b6:	bd10      	pop	{r4, pc}

023fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fc4b8:	b510      	push	{r4, lr}
 23fc4ba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fc4bc:	6800      	ldr	r0, [r0, #0]
 23fc4be:	b108      	cbz	r0, 23fc4c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fc4c0:	f7ff fe5d 	bl	23fc17e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fc4c4:	4620      	mov	r0, r4
 23fc4c6:	bd10      	pop	{r4, pc}

023fc4c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc4c8:	7441      	strb	r1, [r0, #17]
}
 23fc4ca:	4770      	bx	lr

023fc4cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc4cc:	4770      	bx	lr

023fc4ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc4ce:	4770      	bx	lr

023fc4d0 <_ZN9USBSerial4readEv>:
{
 23fc4d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc4d2:	2100      	movs	r1, #0
 23fc4d4:	7c00      	ldrb	r0, [r0, #16]
 23fc4d6:	f7ff f995 	bl	23fb804 <HAL_USB_USART_Receive_Data>
}
 23fc4da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc4de:	bd08      	pop	{r3, pc}

023fc4e0 <_ZN9USBSerial4peekEv>:
{
 23fc4e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc4e2:	2101      	movs	r1, #1
 23fc4e4:	7c00      	ldrb	r0, [r0, #16]
 23fc4e6:	f7ff f98d 	bl	23fb804 <HAL_USB_USART_Receive_Data>
}
 23fc4ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc4ee:	bd08      	pop	{r3, pc}

023fc4f0 <_ZN9USBSerial17availableForWriteEv>:
{
 23fc4f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc4f2:	7c00      	ldrb	r0, [r0, #16]
 23fc4f4:	f7ff f978 	bl	23fb7e8 <HAL_USB_USART_Available_Data_For_Write>
}
 23fc4f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc4fc:	bd08      	pop	{r3, pc}

023fc4fe <_ZN9USBSerial9availableEv>:
{
 23fc4fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc500:	7c00      	ldrb	r0, [r0, #16]
 23fc502:	f7ff f963 	bl	23fb7cc <HAL_USB_USART_Available_Data>
}
 23fc506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc50a:	bd08      	pop	{r3, pc}

023fc50c <_ZN9USBSerial5writeEh>:
{
 23fc50c:	b513      	push	{r0, r1, r4, lr}
 23fc50e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc510:	7c00      	ldrb	r0, [r0, #16]
{
 23fc512:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc514:	f7ff f968 	bl	23fb7e8 <HAL_USB_USART_Available_Data_For_Write>
 23fc518:	2800      	cmp	r0, #0
 23fc51a:	9901      	ldr	r1, [sp, #4]
 23fc51c:	dc01      	bgt.n	23fc522 <_ZN9USBSerial5writeEh+0x16>
 23fc51e:	7c60      	ldrb	r0, [r4, #17]
 23fc520:	b120      	cbz	r0, 23fc52c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc522:	7c20      	ldrb	r0, [r4, #16]
 23fc524:	f7ff f97c 	bl	23fb820 <HAL_USB_USART_Send_Data>
 23fc528:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc52c:	b002      	add	sp, #8
 23fc52e:	bd10      	pop	{r4, pc}

023fc530 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc530:	7c00      	ldrb	r0, [r0, #16]
 23fc532:	f7ff b983 	b.w	23fb83c <HAL_USB_USART_Flush_Data>

023fc536 <_ZN9USBSerialD0Ev>:
 23fc536:	b510      	push	{r4, lr}
 23fc538:	4604      	mov	r4, r0
 23fc53a:	2114      	movs	r1, #20
 23fc53c:	f7fe ff43 	bl	23fb3c6 <_ZdlPvj>
 23fc540:	4620      	mov	r0, r4
 23fc542:	bd10      	pop	{r4, pc}

023fc544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc544:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc54a:	4604      	mov	r4, r0
 23fc54c:	4608      	mov	r0, r1
 23fc54e:	2100      	movs	r1, #0
 23fc550:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc554:	4b04      	ldr	r3, [pc, #16]	; (23fc568 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc556:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc558:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc55a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc55c:	4611      	mov	r1, r2
  _blocking = true;
 23fc55e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc560:	f7ff f90a 	bl	23fb778 <HAL_USB_USART_Init>
}
 23fc564:	4620      	mov	r0, r4
 23fc566:	bd10      	pop	{r4, pc}
 23fc568:	023ffa9c 	.word	0x023ffa9c

023fc56c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc56c:	2200      	movs	r2, #0
 23fc56e:	7c00      	ldrb	r0, [r0, #16]
 23fc570:	f7ff b910 	b.w	23fb794 <HAL_USB_USART_Begin>

023fc574 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fc574:	7c00      	ldrb	r0, [r0, #16]
 23fc576:	f7ff b91b 	b.w	23fb7b0 <HAL_USB_USART_End>

023fc57a <_Z19acquireSerialBufferv>:
{
 23fc57a:	b510      	push	{r4, lr}
 23fc57c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc57e:	2214      	movs	r2, #20
 23fc580:	2100      	movs	r1, #0
 23fc582:	f003 f86c 	bl	23ff65e <memset>
}
 23fc586:	4620      	mov	r0, r4
 23fc588:	bd10      	pop	{r4, pc}
	...

023fc58c <_Z16_fetch_usbserialv>:
{
 23fc58c:	b510      	push	{r4, lr}
 23fc58e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc590:	a803      	add	r0, sp, #12
 23fc592:	f7ff fff2 	bl	23fc57a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc596:	4c0c      	ldr	r4, [pc, #48]	; (23fc5c8 <_Z16_fetch_usbserialv+0x3c>)
 23fc598:	e8d4 1f8f 	ldab	r1, [r4]
 23fc59c:	f011 0101 	ands.w	r1, r1, #1
 23fc5a0:	d10f      	bne.n	23fc5c2 <_Z16_fetch_usbserialv+0x36>
 23fc5a2:	4620      	mov	r0, r4
 23fc5a4:	9101      	str	r1, [sp, #4]
 23fc5a6:	f7fe ff1d 	bl	23fb3e4 <__cxa_guard_acquire>
 23fc5aa:	9901      	ldr	r1, [sp, #4]
 23fc5ac:	b148      	cbz	r0, 23fc5c2 <_Z16_fetch_usbserialv+0x36>
 23fc5ae:	aa03      	add	r2, sp, #12
 23fc5b0:	4806      	ldr	r0, [pc, #24]	; (23fc5cc <_Z16_fetch_usbserialv+0x40>)
 23fc5b2:	f7ff ffc7 	bl	23fc544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc5b6:	4620      	mov	r0, r4
 23fc5b8:	f7fe ff19 	bl	23fb3ee <__cxa_guard_release>
 23fc5bc:	4804      	ldr	r0, [pc, #16]	; (23fc5d0 <_Z16_fetch_usbserialv+0x44>)
 23fc5be:	f003 f809 	bl	23ff5d4 <atexit>
	return _usbserial;
}
 23fc5c2:	4802      	ldr	r0, [pc, #8]	; (23fc5cc <_Z16_fetch_usbserialv+0x40>)
 23fc5c4:	b008      	add	sp, #32
 23fc5c6:	bd10      	pop	{r4, pc}
 23fc5c8:	1007ae78 	.word	0x1007ae78
 23fc5cc:	1007ae7c 	.word	0x1007ae7c
 23fc5d0:	023fc4cd 	.word	0x023fc4cd

023fc5d4 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fc5d4:	4770      	bx	lr

023fc5d6 <_ZN9IPAddressD0Ev>:
 23fc5d6:	b510      	push	{r4, lr}
 23fc5d8:	4604      	mov	r4, r0
 23fc5da:	2118      	movs	r1, #24
 23fc5dc:	f7fe fef3 	bl	23fb3c6 <_ZdlPvj>
 23fc5e0:	4620      	mov	r0, r4
 23fc5e2:	bd10      	pop	{r4, pc}

023fc5e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc5e6:	7d03      	ldrb	r3, [r0, #20]
{
 23fc5e8:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc5ea:	2b06      	cmp	r3, #6
 23fc5ec:	f04f 0400 	mov.w	r4, #0
{
 23fc5f0:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc5f2:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc5f6:	d012      	beq.n	23fc61e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc5f8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc5fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc600:	220a      	movs	r2, #10
 23fc602:	4630      	mov	r0, r6
 23fc604:	f001 f919 	bl	23fd83a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc608:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc60a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc60c:	d019      	beq.n	23fc642 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc60e:	2c00      	cmp	r4, #0
 23fc610:	d0f4      	beq.n	23fc5fc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc612:	212e      	movs	r1, #46	; 0x2e
 23fc614:	4630      	mov	r0, r6
 23fc616:	f001 f90d 	bl	23fd834 <_ZN5Print5printEc>
 23fc61a:	4404      	add	r4, r0
 23fc61c:	e7ee      	b.n	23fc5fc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc61e:	232f      	movs	r3, #47	; 0x2f
 23fc620:	466a      	mov	r2, sp
 23fc622:	4639      	mov	r1, r7
 23fc624:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc626:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc62a:	f7ff f9a1 	bl	23fb970 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc62e:	4668      	mov	r0, sp
 23fc630:	f7fe fea0 	bl	23fb374 <strlen>
 23fc634:	6833      	ldr	r3, [r6, #0]
 23fc636:	4602      	mov	r2, r0
 23fc638:	4669      	mov	r1, sp
 23fc63a:	4630      	mov	r0, r6
 23fc63c:	68db      	ldr	r3, [r3, #12]
 23fc63e:	4798      	blx	r3
 23fc640:	4604      	mov	r4, r0
    }
    return n;
}
 23fc642:	4620      	mov	r0, r4
 23fc644:	b00d      	add	sp, #52	; 0x34
 23fc646:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc648 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc648:	b510      	push	{r4, lr}
 23fc64a:	4604      	mov	r4, r0
 23fc64c:	4b04      	ldr	r3, [pc, #16]	; (23fc660 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc64e:	2211      	movs	r2, #17
 23fc650:	2100      	movs	r1, #0
 23fc652:	f840 3b04 	str.w	r3, [r0], #4
 23fc656:	f003 f802 	bl	23ff65e <memset>
}
 23fc65a:	4620      	mov	r0, r4
 23fc65c:	bd10      	pop	{r4, pc}
 23fc65e:	bf00      	nop
 23fc660:	023ffacc 	.word	0x023ffacc

023fc664 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc664:	4603      	mov	r3, r0
 23fc666:	4a07      	ldr	r2, [pc, #28]	; (23fc684 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc668:	b510      	push	{r4, lr}
 23fc66a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc66e:	f101 0210 	add.w	r2, r1, #16
 23fc672:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc676:	4291      	cmp	r1, r2
 23fc678:	f843 4b04 	str.w	r4, [r3], #4
 23fc67c:	d1f9      	bne.n	23fc672 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc67e:	780a      	ldrb	r2, [r1, #0]
 23fc680:	701a      	strb	r2, [r3, #0]
}
 23fc682:	bd10      	pop	{r4, pc}
 23fc684:	023ffacc 	.word	0x023ffacc

023fc688 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc688:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc68a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc68e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc692:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc696:	2304      	movs	r3, #4
 23fc698:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc69c:	6041      	str	r1, [r0, #4]
 23fc69e:	7503      	strb	r3, [r0, #20]
}
 23fc6a0:	bd10      	pop	{r4, pc}
	...

023fc6a4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc6a4:	b507      	push	{r0, r1, r2, lr}
 23fc6a6:	4b06      	ldr	r3, [pc, #24]	; (23fc6c0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc6a8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc6aa:	78cb      	ldrb	r3, [r1, #3]
 23fc6ac:	9300      	str	r3, [sp, #0]
 23fc6ae:	788b      	ldrb	r3, [r1, #2]
 23fc6b0:	784a      	ldrb	r2, [r1, #1]
 23fc6b2:	7809      	ldrb	r1, [r1, #0]
 23fc6b4:	f7ff ffe8 	bl	23fc688 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc6b8:	b003      	add	sp, #12
 23fc6ba:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc6be:	bf00      	nop
 23fc6c0:	023ffacc 	.word	0x023ffacc

023fc6c4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fc6c4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fc6c6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fc6c8:	4604      	mov	r4, r0
      if (_M_manager)
 23fc6ca:	b113      	cbz	r3, 23fc6d2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc6cc:	2203      	movs	r2, #3
 23fc6ce:	4601      	mov	r1, r0
 23fc6d0:	4798      	blx	r3
    }
 23fc6d2:	4620      	mov	r0, r4
 23fc6d4:	bd10      	pop	{r4, pc}
	...

023fc6d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fc6d8:	4b01      	ldr	r3, [pc, #4]	; (23fc6e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fc6da:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fc6dc:	4770      	bx	lr
 23fc6de:	bf00      	nop
 23fc6e0:	1007a984 	.word	0x1007a984

023fc6e4 <serialEventRun>:
{
 23fc6e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fc6e6:	4b0f      	ldr	r3, [pc, #60]	; (23fc724 <serialEventRun+0x40>)
 23fc6e8:	b143      	cbz	r3, 23fc6fc <serialEventRun+0x18>
 23fc6ea:	f7ff ff4f 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fc6ee:	6803      	ldr	r3, [r0, #0]
 23fc6f0:	691b      	ldr	r3, [r3, #16]
 23fc6f2:	4798      	blx	r3
 23fc6f4:	2800      	cmp	r0, #0
 23fc6f6:	dd01      	ble.n	23fc6fc <serialEventRun+0x18>
        serialEvent();
 23fc6f8:	e000      	b.n	23fc6fc <serialEventRun+0x18>
 23fc6fa:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fc6fc:	4b0a      	ldr	r3, [pc, #40]	; (23fc728 <serialEventRun+0x44>)
 23fc6fe:	b143      	cbz	r3, 23fc712 <serialEventRun+0x2e>
 23fc700:	f002 fdbe 	bl	23ff280 <_Z22__fetch_global_Serial1v>
 23fc704:	6803      	ldr	r3, [r0, #0]
 23fc706:	691b      	ldr	r3, [r3, #16]
 23fc708:	4798      	blx	r3
 23fc70a:	2800      	cmp	r0, #0
 23fc70c:	dd01      	ble.n	23fc712 <serialEventRun+0x2e>
        serialEvent1();
 23fc70e:	e000      	b.n	23fc712 <serialEventRun+0x2e>
 23fc710:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fc712:	4b06      	ldr	r3, [pc, #24]	; (23fc72c <serialEventRun+0x48>)
 23fc714:	b10b      	cbz	r3, 23fc71a <serialEventRun+0x36>
 23fc716:	f002 fdf9 	bl	23ff30c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fc71a:	4b05      	ldr	r3, [pc, #20]	; (23fc730 <serialEventRun+0x4c>)
 23fc71c:	b10b      	cbz	r3, 23fc722 <serialEventRun+0x3e>
 23fc71e:	f002 fe2b 	bl	23ff378 <_Z15serialEventRun3v>
}
 23fc722:	bd08      	pop	{r3, pc}
	...

023fc734 <_post_loop>:
{
 23fc734:	b508      	push	{r3, lr}
	serialEventRun();
 23fc736:	f7ff ffd5 	bl	23fc6e4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fc73a:	f7ff f9dd 	bl	23fbaf8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fc73e:	4b01      	ldr	r3, [pc, #4]	; (23fc744 <_post_loop+0x10>)
 23fc740:	6018      	str	r0, [r3, #0]
}
 23fc742:	bd08      	pop	{r3, pc}
 23fc744:	1007af08 	.word	0x1007af08

023fc748 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc748:	4805      	ldr	r0, [pc, #20]	; (23fc760 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fc74a:	4a06      	ldr	r2, [pc, #24]	; (23fc764 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fc74c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc74e:	1a12      	subs	r2, r2, r0
 23fc750:	4905      	ldr	r1, [pc, #20]	; (23fc768 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fc752:	f002 ff5d 	bl	23ff610 <memcpy>
    __backup_sram_signature = signature;
 23fc756:	4b05      	ldr	r3, [pc, #20]	; (23fc76c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fc758:	4a05      	ldr	r2, [pc, #20]	; (23fc770 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fc75a:	601a      	str	r2, [r3, #0]
}
 23fc75c:	bd08      	pop	{r3, pc}
 23fc75e:	bf00      	nop
 23fc760:	1007b400 	.word	0x1007b400
 23fc764:	1007b404 	.word	0x1007b404
 23fc768:	085ffda0 	.word	0x085ffda0
 23fc76c:	1007b400 	.word	0x1007b400
 23fc770:	9a271c1e 	.word	0x9a271c1e

023fc774 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc774:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fc776:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc778:	461a      	mov	r2, r3
 23fc77a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc77e:	9300      	str	r3, [sp, #0]
 23fc780:	f7ff fb18 	bl	23fbdb4 <system_ctrl_set_result>
}
 23fc784:	b003      	add	sp, #12
 23fc786:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc78c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fc78c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fc78e:	8843      	ldrh	r3, [r0, #2]
 23fc790:	2b0a      	cmp	r3, #10
 23fc792:	d008      	beq.n	23fc7a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fc794:	2b50      	cmp	r3, #80	; 0x50
 23fc796:	d10b      	bne.n	23fc7b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fc798:	4b09      	ldr	r3, [pc, #36]	; (23fc7c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fc79a:	681b      	ldr	r3, [r3, #0]
 23fc79c:	b14b      	cbz	r3, 23fc7b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fc79e:	b003      	add	sp, #12
 23fc7a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fc7a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fc7a6:	f7ff ffe5 	bl	23fc774 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fc7aa:	b003      	add	sp, #12
 23fc7ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc7b0:	2300      	movs	r3, #0
 23fc7b2:	461a      	mov	r2, r3
 23fc7b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc7b8:	9300      	str	r3, [sp, #0]
 23fc7ba:	f7ff fafb 	bl	23fbdb4 <system_ctrl_set_result>
}
 23fc7be:	e7f4      	b.n	23fc7aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fc7c0:	1007ae94 	.word	0x1007ae94

023fc7c4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc7c4:	2100      	movs	r1, #0
{
 23fc7c6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc7c8:	4811      	ldr	r0, [pc, #68]	; (23fc810 <module_user_init_hook+0x4c>)
 23fc7ca:	f7ff fb63 	bl	23fbe94 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fc7ce:	4b11      	ldr	r3, [pc, #68]	; (23fc814 <module_user_init_hook+0x50>)
 23fc7d0:	681a      	ldr	r2, [r3, #0]
 23fc7d2:	4b11      	ldr	r3, [pc, #68]	; (23fc818 <module_user_init_hook+0x54>)
 23fc7d4:	429a      	cmp	r2, r3
 23fc7d6:	bf0c      	ite	eq
 23fc7d8:	2201      	moveq	r2, #1
 23fc7da:	2200      	movne	r2, #0
 23fc7dc:	4b0f      	ldr	r3, [pc, #60]	; (23fc81c <module_user_init_hook+0x58>)
 23fc7de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fc7e0:	d001      	beq.n	23fc7e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fc7e2:	f7ff ffb1 	bl	23fc748 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fc7e6:	f7ff f96b 	bl	23fbac0 <HAL_RNG_GetRandomNumber>
 23fc7ea:	4604      	mov	r4, r0
    srand(seed);
 23fc7ec:	f002 ff40 	bl	23ff670 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fc7f0:	4b0b      	ldr	r3, [pc, #44]	; (23fc820 <module_user_init_hook+0x5c>)
 23fc7f2:	b113      	cbz	r3, 23fc7fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fc7f4:	4620      	mov	r0, r4
 23fc7f6:	e000      	b.n	23fc7fa <module_user_init_hook+0x36>
 23fc7f8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fc7fa:	2100      	movs	r1, #0
 23fc7fc:	4808      	ldr	r0, [pc, #32]	; (23fc820 <module_user_init_hook+0x5c>)
 23fc7fe:	f7ff f9f9 	bl	23fbbf4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fc802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fc806:	2100      	movs	r1, #0
 23fc808:	4806      	ldr	r0, [pc, #24]	; (23fc824 <module_user_init_hook+0x60>)
 23fc80a:	f7ff bac5 	b.w	23fbd98 <system_ctrl_set_app_request_handler>
 23fc80e:	bf00      	nop
 23fc810:	023fc6d9 	.word	0x023fc6d9
 23fc814:	1007b400 	.word	0x1007b400
 23fc818:	9a271c1e 	.word	0x9a271c1e
 23fc81c:	1007ae90 	.word	0x1007ae90
 23fc820:	00000000 	.word	0x00000000
 23fc824:	023fc78d 	.word	0x023fc78d

023fc828 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fc828:	2200      	movs	r2, #0
 23fc82a:	4b01      	ldr	r3, [pc, #4]	; (23fc830 <_GLOBAL__sub_I_RGB+0x8>)
 23fc82c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fc82e:	4770      	bx	lr
 23fc830:	1007ae98 	.word	0x1007ae98

023fc834 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc834:	4b02      	ldr	r3, [pc, #8]	; (23fc840 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc836:	681a      	ldr	r2, [r3, #0]
 23fc838:	4b02      	ldr	r3, [pc, #8]	; (23fc844 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc83a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc83c:	4770      	bx	lr
 23fc83e:	bf00      	nop
 23fc840:	1007a978 	.word	0x1007a978
 23fc844:	1007aea8 	.word	0x1007aea8

023fc848 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc848:	6880      	ldr	r0, [r0, #8]
 23fc84a:	6803      	ldr	r3, [r0, #0]
 23fc84c:	68db      	ldr	r3, [r3, #12]
 23fc84e:	4718      	bx	r3

023fc850 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc850:	4770      	bx	lr

023fc852 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc852:	4608      	mov	r0, r1
 23fc854:	b111      	cbz	r1, 23fc85c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc856:	680b      	ldr	r3, [r1, #0]
 23fc858:	685b      	ldr	r3, [r3, #4]
 23fc85a:	4718      	bx	r3
}
 23fc85c:	4770      	bx	lr

023fc85e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc85e:	4770      	bx	lr

023fc860 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc860:	4770      	bx	lr

023fc862 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc862:	4770      	bx	lr

023fc864 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc864:	4770      	bx	lr

023fc866 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc866:	b538      	push	{r3, r4, r5, lr}
 23fc868:	4604      	mov	r4, r0
 23fc86a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc86c:	6800      	ldr	r0, [r0, #0]
 23fc86e:	212e      	movs	r1, #46	; 0x2e
 23fc870:	f002 ff39 	bl	23ff6e6 <strchrnul>
    size = s - category;
 23fc874:	6823      	ldr	r3, [r4, #0]
 23fc876:	1ac3      	subs	r3, r0, r3
 23fc878:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc87a:	b123      	cbz	r3, 23fc886 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc87c:	7803      	ldrb	r3, [r0, #0]
 23fc87e:	b103      	cbz	r3, 23fc882 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc880:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fc882:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc884:	6020      	str	r0, [r4, #0]
}
 23fc886:	4618      	mov	r0, r3
 23fc888:	bd38      	pop	{r3, r4, r5, pc}

023fc88a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc88a:	b510      	push	{r4, lr}
 23fc88c:	4604      	mov	r4, r0
 23fc88e:	210c      	movs	r1, #12
 23fc890:	f7fe fd99 	bl	23fb3c6 <_ZdlPvj>
 23fc894:	4620      	mov	r0, r4
 23fc896:	bd10      	pop	{r4, pc}

023fc898 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc898:	b510      	push	{r4, lr}
 23fc89a:	4604      	mov	r4, r0
 23fc89c:	2104      	movs	r1, #4
 23fc89e:	f7fe fd92 	bl	23fb3c6 <_ZdlPvj>
 23fc8a2:	4620      	mov	r0, r4
 23fc8a4:	bd10      	pop	{r4, pc}

023fc8a6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc8a6:	b510      	push	{r4, lr}
 23fc8a8:	4604      	mov	r4, r0
 23fc8aa:	2104      	movs	r1, #4
 23fc8ac:	f7fe fd8b 	bl	23fb3c6 <_ZdlPvj>
 23fc8b0:	4620      	mov	r0, r4
 23fc8b2:	bd10      	pop	{r4, pc}

023fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc8b4:	f7ff b886 	b.w	23fb9c4 <os_mutex_recursive_lock>

023fc8b8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc8b8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc8ba:	f7fe fd51 	bl	23fb360 <strcmp>
}
 23fc8be:	fab0 f080 	clz	r0, r0
 23fc8c2:	0940      	lsrs	r0, r0, #5
 23fc8c4:	bd08      	pop	{r3, pc}

023fc8c6 <__tcf_1>:
 23fc8c6:	4770      	bx	lr

023fc8c8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc8c8:	b510      	push	{r4, lr}
 23fc8ca:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc8cc:	f7ff fe5e 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fc8d0:	4284      	cmp	r4, r0
 23fc8d2:	d105      	bne.n	23fc8e0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc8d4:	f7ff fe5a 	bl	23fc58c <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc8dc:	f7ff be4a 	b.w	23fc574 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc8e0:	f002 fcce 	bl	23ff280 <_Z22__fetch_global_Serial1v>
 23fc8e4:	4284      	cmp	r4, r0
 23fc8e6:	d105      	bne.n	23fc8f4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc8e8:	f002 fcca 	bl	23ff280 <_Z22__fetch_global_Serial1v>
}
 23fc8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc8f0:	f002 bb59 	b.w	23fefa6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc8f4:	b12c      	cbz	r4, 23fc902 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc8f6:	6823      	ldr	r3, [r4, #0]
 23fc8f8:	4620      	mov	r0, r4
}
 23fc8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc8fe:	685b      	ldr	r3, [r3, #4]
 23fc900:	4718      	bx	r3
 23fc902:	bd10      	pop	{r4, pc}

023fc904 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc904:	680b      	ldr	r3, [r1, #0]
 23fc906:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc908:	684b      	ldr	r3, [r1, #4]
 23fc90a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc90c:	b113      	cbz	r3, 23fc914 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc90e:	685a      	ldr	r2, [r3, #4]
 23fc910:	3201      	adds	r2, #1
 23fc912:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc914:	4770      	bx	lr

023fc916 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc916:	b513      	push	{r0, r1, r4, lr}
 23fc918:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc91a:	4608      	mov	r0, r1
 23fc91c:	9101      	str	r1, [sp, #4]
 23fc91e:	f7fe fd29 	bl	23fb374 <strlen>
 23fc922:	4602      	mov	r2, r0
 23fc924:	4620      	mov	r0, r4
 23fc926:	9901      	ldr	r1, [sp, #4]
}
 23fc928:	b002      	add	sp, #8
 23fc92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc92e:	f7ff bdb3 	b.w	23fc498 <_ZN5spark10JSONWriter5valueEPKcj>

023fc932 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc932:	b513      	push	{r0, r1, r4, lr}
 23fc934:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc936:	4608      	mov	r0, r1
 23fc938:	9101      	str	r1, [sp, #4]
 23fc93a:	f7fe fd1b 	bl	23fb374 <strlen>
 23fc93e:	4602      	mov	r2, r0
 23fc940:	4620      	mov	r0, r4
 23fc942:	6823      	ldr	r3, [r4, #0]
 23fc944:	9901      	ldr	r1, [sp, #4]
 23fc946:	68db      	ldr	r3, [r3, #12]
}
 23fc948:	b002      	add	sp, #8
 23fc94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc94e:	4718      	bx	r3

023fc950 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc950:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc952:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc954:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc958:	2201      	movs	r2, #1
 23fc95a:	68db      	ldr	r3, [r3, #12]
 23fc95c:	f10d 0107 	add.w	r1, sp, #7
 23fc960:	4798      	blx	r3
}
 23fc962:	b003      	add	sp, #12
 23fc964:	f85d fb04 	ldr.w	pc, [sp], #4

023fc968 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc968:	680a      	ldr	r2, [r1, #0]
 23fc96a:	b510      	push	{r4, lr}
 23fc96c:	6002      	str	r2, [r0, #0]
 23fc96e:	684a      	ldr	r2, [r1, #4]
 23fc970:	6042      	str	r2, [r0, #4]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 23fc972:	2200      	movs	r2, #0
 23fc974:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc978:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc97a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc97c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc97e:	6084      	str	r4, [r0, #8]
 23fc980:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc982:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc984:	60c4      	str	r4, [r0, #12]
 23fc986:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc988:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc98a:	6104      	str	r4, [r0, #16]
 23fc98c:	bd10      	pop	{r4, pc}
	...

023fc990 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc994:	f04f 0a14 	mov.w	sl, #20
 23fc998:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc99c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc99e:	4645      	mov	r5, r8
 23fc9a0:	fb0a f404 	mul.w	r4, sl, r4
 23fc9a4:	9300      	str	r3, [sp, #0]
 23fc9a6:	4b17      	ldr	r3, [pc, #92]	; (23fca04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc9a8:	10a4      	asrs	r4, r4, #2
 23fc9aa:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc9ac:	2c00      	cmp	r4, #0
 23fc9ae:	dd21      	ble.n	23fc9f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc9b0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc9b2:	fb0a f006 	mul.w	r0, sl, r6
 23fc9b6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc9ba:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc9be:	463a      	mov	r2, r7
 23fc9c0:	455f      	cmp	r7, fp
 23fc9c2:	bf28      	it	cs
 23fc9c4:	465a      	movcs	r2, fp
 23fc9c6:	5828      	ldr	r0, [r5, r0]
 23fc9c8:	9101      	str	r1, [sp, #4]
 23fc9ca:	f002 fe9e 	bl	23ff70a <strncmp>
                if (cmp == 0) {
 23fc9ce:	2800      	cmp	r0, #0
 23fc9d0:	f04f 0301 	mov.w	r3, #1
 23fc9d4:	9901      	ldr	r1, [sp, #4]
 23fc9d6:	d10b      	bne.n	23fc9f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc9d8:	455f      	cmp	r7, fp
 23fc9da:	d103      	bne.n	23fc9e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc9dc:	9a00      	ldr	r2, [sp, #0]
 23fc9de:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc9e0:	4634      	mov	r4, r6
 23fc9e2:	e7e3      	b.n	23fc9ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc9e4:	d9fc      	bls.n	23fc9e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc9e6:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc9e8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc9ec:	3e01      	subs	r6, #1
 23fc9ee:	e7f7      	b.n	23fc9e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc9f0:	dbf9      	blt.n	23fc9e6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc9f2:	e7f5      	b.n	23fc9e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc9f4:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc9f8:	4802      	ldr	r0, [pc, #8]	; (23fca04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc9fa:	10ad      	asrs	r5, r5, #2
 23fc9fc:	4368      	muls	r0, r5
 23fc9fe:	b003      	add	sp, #12
 23fca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fca04:	cccccccd 	.word	0xcccccccd

023fca08 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fca08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fca0a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fca0c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fca0e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fca10:	b303      	cbz	r3, 23fca54 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fca12:	b1f9      	cbz	r1, 23fca54 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fca14:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fca16:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fca1a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fca1c:	a903      	add	r1, sp, #12
 23fca1e:	a801      	add	r0, sp, #4
 23fca20:	f7ff ff21 	bl	23fc866 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fca24:	4601      	mov	r1, r0
 23fca26:	b1a8      	cbz	r0, 23fca54 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fca28:	f10d 030b 	add.w	r3, sp, #11
 23fca2c:	4620      	mov	r0, r4
 23fca2e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fca30:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fca34:	f7ff ffac 	bl	23fc990 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fca38:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fca3c:	b153      	cbz	r3, 23fca54 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fca3e:	6823      	ldr	r3, [r4, #0]
 23fca40:	2414      	movs	r4, #20
 23fca42:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fca46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fca4a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fca4c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fca4e:	bfa8      	it	ge
 23fca50:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fca52:	e7e3      	b.n	23fca1c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fca54:	4628      	mov	r0, r5
 23fca56:	b004      	add	sp, #16
 23fca58:	bd70      	pop	{r4, r5, r6, pc}

023fca5a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fca5a:	b40e      	push	{r1, r2, r3}
 23fca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fca5e:	b08c      	sub	sp, #48	; 0x30
 23fca60:	af00      	add	r7, sp, #0
 23fca62:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fca66:	f855 2b04 	ldr.w	r2, [r5], #4
 23fca6a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fca6c:	462b      	mov	r3, r5
 23fca6e:	2120      	movs	r1, #32
 23fca70:	f107 0010 	add.w	r0, r7, #16
 23fca74:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fca76:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fca78:	f7ff f9d4 	bl	23fbe24 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fca7c:	281f      	cmp	r0, #31
 23fca7e:	687a      	ldr	r2, [r7, #4]
 23fca80:	d91a      	bls.n	23fcab8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fca82:	f100 0308 	add.w	r3, r0, #8
 23fca86:	f023 0307 	bic.w	r3, r3, #7
        }
 23fca8a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fca8c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fca90:	1c41      	adds	r1, r0, #1
 23fca92:	462b      	mov	r3, r5
 23fca94:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fca96:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fca98:	f7ff f9c4 	bl	23fbe24 <vsnprintf>
        if (n > 0) {
 23fca9c:	1e02      	subs	r2, r0, #0
 23fca9e:	dd04      	ble.n	23fcaaa <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fcaa0:	6823      	ldr	r3, [r4, #0]
 23fcaa2:	4669      	mov	r1, sp
 23fcaa4:	4620      	mov	r0, r4
 23fcaa6:	68db      	ldr	r3, [r3, #12]
 23fcaa8:	4798      	blx	r3
 23fcaaa:	46b5      	mov	sp, r6
}
 23fcaac:	3730      	adds	r7, #48	; 0x30
 23fcaae:	46bd      	mov	sp, r7
 23fcab0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fcab4:	b003      	add	sp, #12
 23fcab6:	4770      	bx	lr
    } else if (n > 0) {
 23fcab8:	2800      	cmp	r0, #0
 23fcaba:	d0f7      	beq.n	23fcaac <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fcabc:	6823      	ldr	r3, [r4, #0]
 23fcabe:	4602      	mov	r2, r0
 23fcac0:	68db      	ldr	r3, [r3, #12]
 23fcac2:	4620      	mov	r0, r4
 23fcac4:	f107 0110 	add.w	r1, r7, #16
 23fcac8:	4798      	blx	r3
}
 23fcaca:	e7ef      	b.n	23fcaac <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fcacc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fcacc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fcace:	4c08      	ldr	r4, [pc, #32]	; (23fcaf0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fcad0:	e8d4 3f8f 	ldab	r3, [r4]
 23fcad4:	07db      	lsls	r3, r3, #31
 23fcad6:	d409      	bmi.n	23fcaec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcad8:	4620      	mov	r0, r4
 23fcada:	f7fe fc83 	bl	23fb3e4 <__cxa_guard_acquire>
 23fcade:	b128      	cbz	r0, 23fcaec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcae0:	4620      	mov	r0, r4
 23fcae2:	f7fe fc84 	bl	23fb3ee <__cxa_guard_release>
 23fcae6:	4803      	ldr	r0, [pc, #12]	; (23fcaf4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fcae8:	f002 fd74 	bl	23ff5d4 <atexit>
}
 23fcaec:	4802      	ldr	r0, [pc, #8]	; (23fcaf8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fcaee:	bd10      	pop	{r4, pc}
 23fcaf0:	1007aeb0 	.word	0x1007aeb0
 23fcaf4:	023fc85f 	.word	0x023fc85f
 23fcaf8:	1007a97c 	.word	0x1007a97c

023fcafc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fcafc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fcafe:	4c08      	ldr	r4, [pc, #32]	; (23fcb20 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fcb00:	e8d4 3f8f 	ldab	r3, [r4]
 23fcb04:	07db      	lsls	r3, r3, #31
 23fcb06:	d409      	bmi.n	23fcb1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcb08:	4620      	mov	r0, r4
 23fcb0a:	f7fe fc6b 	bl	23fb3e4 <__cxa_guard_acquire>
 23fcb0e:	b128      	cbz	r0, 23fcb1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcb10:	4620      	mov	r0, r4
 23fcb12:	f7fe fc6c 	bl	23fb3ee <__cxa_guard_release>
 23fcb16:	4803      	ldr	r0, [pc, #12]	; (23fcb24 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fcb18:	f002 fd5c 	bl	23ff5d4 <atexit>
    return &factory;
}
 23fcb1c:	4802      	ldr	r0, [pc, #8]	; (23fcb28 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fcb1e:	bd10      	pop	{r4, pc}
 23fcb20:	1007aeb4 	.word	0x1007aeb4
 23fcb24:	023fc8c7 	.word	0x023fc8c7
 23fcb28:	1007a980 	.word	0x1007a980

023fcb2c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fcb2c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fcb2e:	2500      	movs	r5, #0
 23fcb30:	4604      	mov	r4, r0
 23fcb32:	e9c0 5500 	strd	r5, r5, [r0]
 23fcb36:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fcb3a:	6085      	str	r5, [r0, #8]
 23fcb3c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fcb3e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fcb42:	f7fe ff23 	bl	23fb98c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fcb46:	f7ff ffc1 	bl	23fcacc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fcb4a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcb4c:	f7ff ffd6 	bl	23fcafc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fcb50:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcb52:	6220      	str	r0, [r4, #32]
}
 23fcb54:	4620      	mov	r0, r4
 23fcb56:	bd38      	pop	{r3, r4, r5, pc}

023fcb58 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fcb58:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fcb5a:	4c0a      	ldr	r4, [pc, #40]	; (23fcb84 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fcb5c:	e8d4 3f8f 	ldab	r3, [r4]
 23fcb60:	07db      	lsls	r3, r3, #31
 23fcb62:	d40c      	bmi.n	23fcb7e <_ZN5spark10LogManager8instanceEv+0x26>
 23fcb64:	4620      	mov	r0, r4
 23fcb66:	f7fe fc3d 	bl	23fb3e4 <__cxa_guard_acquire>
 23fcb6a:	b140      	cbz	r0, 23fcb7e <_ZN5spark10LogManager8instanceEv+0x26>
 23fcb6c:	4806      	ldr	r0, [pc, #24]	; (23fcb88 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcb6e:	f7ff ffdd 	bl	23fcb2c <_ZN5spark10LogManagerC1Ev>
 23fcb72:	4620      	mov	r0, r4
 23fcb74:	f7fe fc3b 	bl	23fb3ee <__cxa_guard_release>
 23fcb78:	4804      	ldr	r0, [pc, #16]	; (23fcb8c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fcb7a:	f002 fd2b 	bl	23ff5d4 <atexit>
    return &mgr;
}
 23fcb7e:	4802      	ldr	r0, [pc, #8]	; (23fcb88 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcb80:	bd10      	pop	{r4, pc}
 23fcb82:	bf00      	nop
 23fcb84:	1007aeac 	.word	0x1007aeac
 23fcb88:	1007aebc 	.word	0x1007aebc
 23fcb8c:	023fd0cd 	.word	0x023fd0cd

023fcb90 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fcb90:	2300      	movs	r3, #0
 23fcb92:	4a02      	ldr	r2, [pc, #8]	; (23fcb9c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fcb94:	4902      	ldr	r1, [pc, #8]	; (23fcba0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fcb96:	4803      	ldr	r0, [pc, #12]	; (23fcba4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fcb98:	f7ff b810 	b.w	23fbbbc <log_set_callbacks>
 23fcb9c:	023fceb5 	.word	0x023fceb5
 23fcba0:	023fce41 	.word	0x023fce41
 23fcba4:	023fcdc1 	.word	0x023fcdc1

023fcba8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fcba8:	2300      	movs	r3, #0
 23fcbaa:	461a      	mov	r2, r3
 23fcbac:	4619      	mov	r1, r3
 23fcbae:	4618      	mov	r0, r3
 23fcbb0:	f7ff b804 	b.w	23fbbbc <log_set_callbacks>

023fcbb4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fcbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcbb6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fcbb8:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcbba:	4668      	mov	r0, sp
 23fcbbc:	f7ff fea2 	bl	23fc904 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcbc0:	466a      	mov	r2, sp
 23fcbc2:	4629      	mov	r1, r5
 23fcbc4:	4620      	mov	r0, r4
 23fcbc6:	f7ff fb87 	bl	23fc2d8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fcbca:	a801      	add	r0, sp, #4
 23fcbcc:	f7ff fc74 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcbd0:	4620      	mov	r0, r4
 23fcbd2:	b003      	add	sp, #12
 23fcbd4:	bd30      	pop	{r4, r5, pc}

023fcbd6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fcbd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcbd8:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fcbda:	68cd      	ldr	r5, [r1, #12]
 23fcbdc:	4668      	mov	r0, sp
 23fcbde:	f7ff fe91 	bl	23fc904 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcbe2:	466a      	mov	r2, sp
 23fcbe4:	4629      	mov	r1, r5
 23fcbe6:	4620      	mov	r0, r4
 23fcbe8:	f7ff fb52 	bl	23fc290 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcbec:	a801      	add	r0, sp, #4
 23fcbee:	f7ff fc63 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcbf2:	4620      	mov	r0, r4
 23fcbf4:	b003      	add	sp, #12
 23fcbf6:	bd30      	pop	{r4, r5, pc}

023fcbf8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fcbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcbfa:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fcbfc:	690d      	ldr	r5, [r1, #16]
 23fcbfe:	4668      	mov	r0, sp
 23fcc00:	f7ff fe80 	bl	23fc904 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcc04:	466a      	mov	r2, sp
 23fcc06:	4629      	mov	r1, r5
 23fcc08:	4620      	mov	r0, r4
 23fcc0a:	f7ff faea 	bl	23fc1e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fcc0e:	a801      	add	r0, sp, #4
 23fcc10:	f7ff fc52 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcc14:	4620      	mov	r0, r4
 23fcc16:	b003      	add	sp, #12
 23fcc18:	bd30      	pop	{r4, r5, pc}
	...

023fcc1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fcc1c:	b570      	push	{r4, r5, r6, lr}
 23fcc1e:	b08a      	sub	sp, #40	; 0x28
 23fcc20:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fcc22:	4601      	mov	r1, r0
 23fcc24:	a804      	add	r0, sp, #16
 23fcc26:	f7ff ffc5 	bl	23fcbb4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fcc2a:	4e14      	ldr	r6, [pc, #80]	; (23fcc7c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fcc2c:	a804      	add	r0, sp, #16
 23fcc2e:	f7ff fb6b 	bl	23fc308 <_ZN5spark18JSONObjectIterator4nextEv>
 23fcc32:	b1e8      	cbz	r0, 23fcc70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fcc34:	4668      	mov	r0, sp
 23fcc36:	a904      	add	r1, sp, #16
 23fcc38:	f7ff ffcd 	bl	23fcbd6 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fcc3c:	4631      	mov	r1, r6
 23fcc3e:	9802      	ldr	r0, [sp, #8]
 23fcc40:	f7ff fe3a 	bl	23fc8b8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fcc44:	4604      	mov	r4, r0
 23fcc46:	b110      	cbz	r0, 23fcc4e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fcc48:	1e2c      	subs	r4, r5, #0
 23fcc4a:	bf18      	it	ne
 23fcc4c:	2401      	movne	r4, #1
 23fcc4e:	a801      	add	r0, sp, #4
 23fcc50:	f7ff fc32 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcc54:	2c00      	cmp	r4, #0
 23fcc56:	d0e9      	beq.n	23fcc2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fcc58:	4668      	mov	r0, sp
 23fcc5a:	a904      	add	r1, sp, #16
 23fcc5c:	f7ff ffcc 	bl	23fcbf8 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fcc60:	4668      	mov	r0, sp
 23fcc62:	f7ff faf4 	bl	23fc24e <_ZNK5spark9JSONValue5toIntEv>
 23fcc66:	6028      	str	r0, [r5, #0]
 23fcc68:	a801      	add	r0, sp, #4
 23fcc6a:	f7ff fc25 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcc6e:	e7dd      	b.n	23fcc2c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fcc70:	a805      	add	r0, sp, #20
 23fcc72:	f7ff fc21 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fcc76:	b00a      	add	sp, #40	; 0x28
 23fcc78:	bd70      	pop	{r4, r5, r6, pc}
 23fcc7a:	bf00      	nop
 23fcc7c:	023ffaf4 	.word	0x023ffaf4

023fcc80 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcc82:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fcc84:	4913      	ldr	r1, [pc, #76]	; (23fccd4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fcc86:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcc88:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fcc8a:	f7fe fb69 	bl	23fb360 <strcmp>
 23fcc8e:	b950      	cbnz	r0, 23fcca6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fcc90:	f7ff fc7c 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fcc94:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fcc98:	f7ff fc68 	bl	23fc56c <_ZN9USBSerial5beginEl>
}
 23fcc9c:	b003      	add	sp, #12
 23fcc9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fcca2:	f7ff bc73 	b.w	23fc58c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fcca6:	4620      	mov	r0, r4
 23fcca8:	490b      	ldr	r1, [pc, #44]	; (23fccd8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fccaa:	f7fe fb59 	bl	23fb360 <strcmp>
 23fccae:	b978      	cbnz	r0, 23fccd0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fccb0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fccb4:	a901      	add	r1, sp, #4
 23fccb6:	4628      	mov	r0, r5
        int baud = 9600;
 23fccb8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fccba:	f7ff ffaf 	bl	23fcc1c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fccbe:	f002 fadf 	bl	23ff280 <_Z22__fetch_global_Serial1v>
 23fccc2:	9901      	ldr	r1, [sp, #4]
 23fccc4:	f002 f96c 	bl	23fefa0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fccc8:	f002 fada 	bl	23ff280 <_Z22__fetch_global_Serial1v>
}
 23fcccc:	b003      	add	sp, #12
 23fccce:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fccd0:	2000      	movs	r0, #0
 23fccd2:	e7fb      	b.n	23fcccc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fccd4:	023ffaf9 	.word	0x023ffaf9
 23fccd8:	023ffb00 	.word	0x023ffb00

023fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fccdc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fccde:	2614      	movs	r6, #20
 23fcce0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcce4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcce6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fccea:	42ae      	cmp	r6, r5
 23fccec:	d005      	beq.n	23fccfa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fccee:	f105 0008 	add.w	r0, r5, #8
 23fccf2:	f7ff fff3 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fccf6:	3514      	adds	r5, #20
 23fccf8:	e7f7      	b.n	23fccea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fccfa:	6820      	ldr	r0, [r4, #0]
 23fccfc:	f7ff f876 	bl	23fbdec <free>
}
 23fcd00:	4620      	mov	r0, r4
 23fcd02:	bd70      	pop	{r4, r5, r6, pc}

023fcd04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcd04:	b570      	push	{r4, r5, r6, lr}
 23fcd06:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcd08:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fcd0c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fcd10:	42ae      	cmp	r6, r5
 23fcd12:	d004      	beq.n	23fcd1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fcd14:	4628      	mov	r0, r5
 23fcd16:	f002 f99d 	bl	23ff054 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fcd1a:	3510      	adds	r5, #16
 23fcd1c:	e7f8      	b.n	23fcd10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fcd1e:	6820      	ldr	r0, [r4, #0]
 23fcd20:	f7ff f864 	bl	23fbdec <free>
}
 23fcd24:	4620      	mov	r0, r4
 23fcd26:	bd70      	pop	{r4, r5, r6, pc}

023fcd28 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fcd28:	b510      	push	{r4, lr}
 23fcd2a:	4604      	mov	r4, r0
 23fcd2c:	300c      	adds	r0, #12
 23fcd2e:	f7ff ffd5 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcd32:	4620      	mov	r0, r4
 23fcd34:	f7ff ffe6 	bl	23fcd04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcd38:	4620      	mov	r0, r4
 23fcd3a:	bd10      	pop	{r4, pc}

023fcd3c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fcd3c:	b510      	push	{r4, lr}
 23fcd3e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fcd40:	4b03      	ldr	r3, [pc, #12]	; (23fcd50 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fcd42:	f840 3b04 	str.w	r3, [r0], #4
 23fcd46:	f7ff ffef 	bl	23fcd28 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fcd4a:	4620      	mov	r0, r4
 23fcd4c:	bd10      	pop	{r4, pc}
 23fcd4e:	bf00      	nop
 23fcd50:	023ff9cc 	.word	0x023ff9cc

023fcd54 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fcd54:	b510      	push	{r4, lr}
 23fcd56:	4604      	mov	r4, r0
 23fcd58:	f7ff fff0 	bl	23fcd3c <_ZN5spark16StreamLogHandlerD1Ev>
 23fcd5c:	4620      	mov	r0, r4
 23fcd5e:	2124      	movs	r1, #36	; 0x24
 23fcd60:	f7fe fb31 	bl	23fb3c6 <_ZdlPvj>
 23fcd64:	4620      	mov	r0, r4
 23fcd66:	bd10      	pop	{r4, pc}

023fcd68 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fcd68:	b510      	push	{r4, lr}
 23fcd6a:	4604      	mov	r4, r0
 23fcd6c:	4b02      	ldr	r3, [pc, #8]	; (23fcd78 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fcd6e:	6003      	str	r3, [r0, #0]
 23fcd70:	f7ff ffe4 	bl	23fcd3c <_ZN5spark16StreamLogHandlerD1Ev>
 23fcd74:	4620      	mov	r0, r4
 23fcd76:	bd10      	pop	{r4, pc}
 23fcd78:	023ffba0 	.word	0x023ffba0

023fcd7c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fcd7c:	b510      	push	{r4, lr}
 23fcd7e:	4604      	mov	r4, r0
 23fcd80:	f7ff fff2 	bl	23fcd68 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fcd84:	4620      	mov	r0, r4
 23fcd86:	2124      	movs	r1, #36	; 0x24
 23fcd88:	f7fe fb1d 	bl	23fb3c6 <_ZdlPvj>
 23fcd8c:	4620      	mov	r0, r4
 23fcd8e:	bd10      	pop	{r4, pc}

023fcd90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fcd90:	2200      	movs	r2, #0
 23fcd92:	e9c0 2200 	strd	r2, r2, [r0]
 23fcd96:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fcd98:	b510      	push	{r4, lr}
 23fcd9a:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd9c:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcd9e:	6004      	str	r4, [r0, #0]
 23fcda0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcda2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcda4:	6044      	str	r4, [r0, #4]
 23fcda6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcda8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcdaa:	6084      	str	r4, [r0, #8]
}
 23fcdac:	bd10      	pop	{r4, pc}

023fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fcdae:	b510      	push	{r4, lr}
 23fcdb0:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fcdb2:	6803      	ldr	r3, [r0, #0]
 23fcdb4:	6818      	ldr	r0, [r3, #0]
 23fcdb6:	f7fe fe13 	bl	23fb9e0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fcdba:	4620      	mov	r0, r4
 23fcdbc:	bd10      	pop	{r4, pc}
	...

023fcdc0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fcdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcdc4:	b087      	sub	sp, #28
 23fcdc6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fcdc8:	4b1c      	ldr	r3, [pc, #112]	; (23fce3c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fcdca:	4680      	mov	r8, r0
 23fcdcc:	685b      	ldr	r3, [r3, #4]
 23fcdce:	4689      	mov	r9, r1
 23fcdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcdd4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fcdd6:	b96b      	cbnz	r3, 23fcdf4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fcdd8:	f7ff febe 	bl	23fcb58 <_ZN5spark10LogManager8instanceEv>
 23fcddc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcdde:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fcde2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcde4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fcde6:	f7ff fd65 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fcdea:	7b23      	ldrb	r3, [r4, #12]
 23fcdec:	b12b      	cbz	r3, 23fcdfa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fcdee:	a805      	add	r0, sp, #20
 23fcdf0:	f7ff ffdd 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fcdf4:	b007      	add	sp, #28
 23fcdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fcdfa:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fcdfc:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fce00:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fce02:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fce06:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fce0a:	45aa      	cmp	sl, r5
 23fce0c:	d012      	beq.n	23fce34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fce0e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fce12:	4631      	mov	r1, r6
 23fce14:	1d38      	adds	r0, r7, #4
 23fce16:	f7ff fdf7 	bl	23fca08 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fce1a:	4581      	cmp	r9, r0
 23fce1c:	d3f5      	bcc.n	23fce0a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fce1e:	9a03      	ldr	r2, [sp, #12]
 23fce20:	683b      	ldr	r3, [r7, #0]
 23fce22:	9200      	str	r2, [sp, #0]
 23fce24:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fce28:	464a      	mov	r2, r9
 23fce2a:	4633      	mov	r3, r6
 23fce2c:	4641      	mov	r1, r8
 23fce2e:	4638      	mov	r0, r7
 23fce30:	47d8      	blx	fp
 23fce32:	e7ea      	b.n	23fce0a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fce34:	2300      	movs	r3, #0
 23fce36:	7323      	strb	r3, [r4, #12]
 23fce38:	e7d9      	b.n	23fcdee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fce3a:	bf00      	nop
 23fce3c:	e000ed00 	.word	0xe000ed00

023fce40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fce40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fce44:	469b      	mov	fp, r3
 23fce46:	4b1a      	ldr	r3, [pc, #104]	; (23fceb0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fce48:	4680      	mov	r8, r0
 23fce4a:	685b      	ldr	r3, [r3, #4]
 23fce4c:	4689      	mov	r9, r1
 23fce4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fce52:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fce54:	b96b      	cbnz	r3, 23fce72 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fce56:	f7ff fe7f 	bl	23fcb58 <_ZN5spark10LogManager8instanceEv>
 23fce5a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fce5c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fce60:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fce62:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fce64:	f7ff fd26 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fce68:	7b23      	ldrb	r3, [r4, #12]
 23fce6a:	b12b      	cbz	r3, 23fce78 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fce6c:	a801      	add	r0, sp, #4
 23fce6e:	f7ff ff9e 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fce72:	b003      	add	sp, #12
 23fce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fce78:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fce7a:	b2f6      	uxtb	r6, r6
 23fce7c:	7323      	strb	r3, [r4, #12]
 23fce7e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fce82:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fce86:	4555      	cmp	r5, sl
 23fce88:	d00e      	beq.n	23fcea8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fce8a:	f855 7b04 	ldr.w	r7, [r5], #4
 23fce8e:	4659      	mov	r1, fp
 23fce90:	1d38      	adds	r0, r7, #4
 23fce92:	f7ff fdb9 	bl	23fca08 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fce96:	4286      	cmp	r6, r0
 23fce98:	d3f5      	bcc.n	23fce86 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fce9a:	683b      	ldr	r3, [r7, #0]
 23fce9c:	464a      	mov	r2, r9
 23fce9e:	4641      	mov	r1, r8
 23fcea0:	4638      	mov	r0, r7
 23fcea2:	68db      	ldr	r3, [r3, #12]
 23fcea4:	4798      	blx	r3
 23fcea6:	e7ee      	b.n	23fce86 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fcea8:	2300      	movs	r3, #0
 23fceaa:	7323      	strb	r3, [r4, #12]
 23fceac:	e7de      	b.n	23fce6c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fceae:	bf00      	nop
 23fceb0:	e000ed00 	.word	0xe000ed00

023fceb4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fceb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fceb8:	4b16      	ldr	r3, [pc, #88]	; (23fcf14 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fceba:	4605      	mov	r5, r0
 23fcebc:	685b      	ldr	r3, [r3, #4]
 23fcebe:	460f      	mov	r7, r1
 23fcec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fcec4:	bb1b      	cbnz	r3, 23fcf0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fcec6:	f7ff fe47 	bl	23fcb58 <_ZN5spark10LogManager8instanceEv>
 23fceca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcecc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fced0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fced2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fced4:	f7ff fcee 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fced8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fcedc:	2446      	movs	r4, #70	; 0x46
 23fcede:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fcee2:	45b0      	cmp	r8, r6
 23fcee4:	d109      	bne.n	23fcefa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fcee6:	a801      	add	r0, sp, #4
 23fcee8:	f7ff ff61 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fceec:	42a5      	cmp	r5, r4
 23fceee:	bfb4      	ite	lt
 23fcef0:	2000      	movlt	r0, #0
 23fcef2:	2001      	movge	r0, #1
}
 23fcef4:	b002      	add	sp, #8
 23fcef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fcefa:	f856 0b04 	ldr.w	r0, [r6], #4
 23fcefe:	4639      	mov	r1, r7
 23fcf00:	3004      	adds	r0, #4
 23fcf02:	f7ff fd81 	bl	23fca08 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fcf06:	4284      	cmp	r4, r0
 23fcf08:	bfa8      	it	ge
 23fcf0a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fcf0c:	e7e9      	b.n	23fcee2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fcf0e:	2000      	movs	r0, #0
 23fcf10:	e7f0      	b.n	23fcef4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fcf12:	bf00      	nop
 23fcf14:	e000ed00 	.word	0xe000ed00

023fcf18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcf1a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fcf1e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fcf20:	4604      	mov	r4, r0
 23fcf22:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcf24:	db0d      	blt.n	23fcf42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fcf26:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fcf28:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fcf2a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fcf2c:	dd04      	ble.n	23fcf38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fcf2e:	00b9      	lsls	r1, r7, #2
 23fcf30:	f7fe ff6a 	bl	23fbe08 <realloc>
            if (!d) {
 23fcf34:	b918      	cbnz	r0, 23fcf3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fcf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fcf38:	f7fe ff58 	bl	23fbdec <free>
        T* d = nullptr;
 23fcf3c:	2000      	movs	r0, #0
        data_ = d;
 23fcf3e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fcf40:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fcf42:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fcf44:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fcf46:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fcf4a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcf4c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fcf50:	1d08      	adds	r0, r1, #4
 23fcf52:	f002 fb6a 	bl	23ff62a <memmove>
    new(p) T(std::move(value));
 23fcf56:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fcf5a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fcf5c:	2001      	movs	r0, #1
    ++size_;
 23fcf5e:	3301      	adds	r3, #1
 23fcf60:	6063      	str	r3, [r4, #4]
    return true;
 23fcf62:	e7e8      	b.n	23fcf36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fcf64 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcf66:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcf68:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcf6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcf6e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fcf70:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fcf72:	f7ff fc9f 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fcf76:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fcf7a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fcf7e:	4293      	cmp	r3, r2
 23fcf80:	4619      	mov	r1, r3
 23fcf82:	d00a      	beq.n	23fcf9a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fcf84:	6809      	ldr	r1, [r1, #0]
 23fcf86:	3304      	adds	r3, #4
 23fcf88:	42a9      	cmp	r1, r5
 23fcf8a:	d1f8      	bne.n	23fcf7e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fcf8c:	a801      	add	r0, sp, #4
 23fcf8e:	f7ff ff0e 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcf92:	2500      	movs	r5, #0
}
 23fcf94:	4628      	mov	r0, r5
 23fcf96:	b003      	add	sp, #12
 23fcf98:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fcf9a:	4629      	mov	r1, r5
 23fcf9c:	4620      	mov	r0, r4
 23fcf9e:	f7ff ffbb 	bl	23fcf18 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fcfa2:	4605      	mov	r5, r0
 23fcfa4:	2800      	cmp	r0, #0
 23fcfa6:	d0f1      	beq.n	23fcf8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fcfa8:	6863      	ldr	r3, [r4, #4]
 23fcfaa:	2b01      	cmp	r3, #1
 23fcfac:	d101      	bne.n	23fcfb2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fcfae:	f7ff fdef 	bl	23fcb90 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fcfb2:	a801      	add	r0, sp, #4
 23fcfb4:	f7ff fefb 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fcfb8:	e7ec      	b.n	23fcf94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fcfba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fcfba:	460b      	mov	r3, r1
 23fcfbc:	b570      	push	{r4, r5, r6, lr}
 23fcfbe:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fcfc0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fcfc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fcfc8:	4282      	cmp	r2, r0
 23fcfca:	d00f      	beq.n	23fcfec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fcfcc:	4601      	mov	r1, r0
            if (*p == value) {
 23fcfce:	681d      	ldr	r5, [r3, #0]
 23fcfd0:	f851 6b04 	ldr.w	r6, [r1], #4
 23fcfd4:	42ae      	cmp	r6, r5
 23fcfd6:	d107      	bne.n	23fcfe8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fcfd8:	1a52      	subs	r2, r2, r1
 23fcfda:	f002 fb26 	bl	23ff62a <memmove>
    return true;
 23fcfde:	2001      	movs	r0, #1
    --size_;
 23fcfe0:	6863      	ldr	r3, [r4, #4]
 23fcfe2:	3b01      	subs	r3, #1
 23fcfe4:	6063      	str	r3, [r4, #4]
}
 23fcfe6:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fcfe8:	4608      	mov	r0, r1
 23fcfea:	e7ed      	b.n	23fcfc8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fcfec:	2000      	movs	r0, #0
 23fcfee:	e7fa      	b.n	23fcfe6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fcff0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fcff2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fcff4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fcff8:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fcffa:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcffc:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fcffe:	f7ff fc59 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd002:	4620      	mov	r0, r4
 23fd004:	a901      	add	r1, sp, #4
 23fd006:	f7ff ffd8 	bl	23fcfba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd00a:	b118      	cbz	r0, 23fd014 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd00c:	6863      	ldr	r3, [r4, #4]
 23fd00e:	b90b      	cbnz	r3, 23fd014 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd010:	f7ff fdca 	bl	23fcba8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd014:	a803      	add	r0, sp, #12
 23fd016:	f7ff feca 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd01a:	b004      	add	sp, #16
 23fd01c:	bd10      	pop	{r4, pc}

023fd01e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd01e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd020:	b570      	push	{r4, r5, r6, lr}
 23fd022:	4604      	mov	r4, r0
 23fd024:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd028:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd02c:	42ae      	cmp	r6, r5
 23fd02e:	d015      	beq.n	23fd05c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd030:	4620      	mov	r0, r4
 23fd032:	f105 0110 	add.w	r1, r5, #16
 23fd036:	f7ff ffc0 	bl	23fcfba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd03a:	6863      	ldr	r3, [r4, #4]
 23fd03c:	b90b      	cbnz	r3, 23fd042 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd03e:	f7ff fdb3 	bl	23fcba8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd042:	69e0      	ldr	r0, [r4, #28]
 23fd044:	6929      	ldr	r1, [r5, #16]
 23fd046:	6803      	ldr	r3, [r0, #0]
 23fd048:	68db      	ldr	r3, [r3, #12]
 23fd04a:	4798      	blx	r3
        if (h.stream) {
 23fd04c:	6969      	ldr	r1, [r5, #20]
 23fd04e:	b119      	cbz	r1, 23fd058 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd050:	6a20      	ldr	r0, [r4, #32]
 23fd052:	6803      	ldr	r3, [r0, #0]
 23fd054:	68db      	ldr	r3, [r3, #12]
 23fd056:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd058:	3518      	adds	r5, #24
 23fd05a:	e7e7      	b.n	23fd02c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd05c:	2618      	movs	r6, #24
 23fd05e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd062:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd066:	42ae      	cmp	r6, r5
 23fd068:	d004      	beq.n	23fd074 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd06a:	4628      	mov	r0, r5
 23fd06c:	f001 fff2 	bl	23ff054 <_ZN6StringD1Ev>
 23fd070:	3518      	adds	r5, #24
 23fd072:	e7f8      	b.n	23fd066 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd074:	2300      	movs	r3, #0
 23fd076:	6163      	str	r3, [r4, #20]
}
 23fd078:	bd70      	pop	{r4, r5, r6, pc}

023fd07a <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd07c:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd07e:	f7ff fd93 	bl	23fcba8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd082:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd086:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd088:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd08a:	f7ff fc13 	bl	23fc8b4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd08e:	4620      	mov	r0, r4
 23fd090:	f7ff ffc5 	bl	23fd01e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd094:	a801      	add	r0, sp, #4
 23fd096:	f7ff fe8a 	bl	23fcdae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd09a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd09c:	b108      	cbz	r0, 23fd0a2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd09e:	f7fe fc83 	bl	23fb9a8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd0a2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd0a6:	2618      	movs	r6, #24
 23fd0a8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd0ac:	42ae      	cmp	r6, r5
 23fd0ae:	d004      	beq.n	23fd0ba <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd0b0:	4628      	mov	r0, r5
 23fd0b2:	f001 ffcf 	bl	23ff054 <_ZN6StringD1Ev>
 23fd0b6:	3518      	adds	r5, #24
 23fd0b8:	e7f8      	b.n	23fd0ac <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd0ba:	6920      	ldr	r0, [r4, #16]
 23fd0bc:	f7fe fe96 	bl	23fbdec <free>
 23fd0c0:	6820      	ldr	r0, [r4, #0]
 23fd0c2:	f7fe fe93 	bl	23fbdec <free>
}
 23fd0c6:	4620      	mov	r0, r4
 23fd0c8:	b002      	add	sp, #8
 23fd0ca:	bd70      	pop	{r4, r5, r6, pc}

023fd0cc <__tcf_2>:
    static LogManager mgr;
 23fd0cc:	4801      	ldr	r0, [pc, #4]	; (23fd0d4 <__tcf_2+0x8>)
 23fd0ce:	f7ff bfd4 	b.w	23fd07a <_ZN5spark10LogManagerD1Ev>
 23fd0d2:	bf00      	nop
 23fd0d4:	1007aebc 	.word	0x1007aebc

023fd0d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd0d8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd0dc:	4604      	mov	r4, r0
 23fd0de:	460d      	mov	r5, r1
 23fd0e0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd0e2:	d915      	bls.n	23fd110 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd0e4:	4290      	cmp	r0, r2
 23fd0e6:	d214      	bcs.n	23fd112 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd0e8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd0ec:	1a75      	subs	r5, r6, r1
 23fd0ee:	f1a1 0714 	sub.w	r7, r1, #20
 23fd0f2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd0f4:	42b7      	cmp	r7, r6
 23fd0f6:	d01a      	beq.n	23fd12e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd0f8:	b11c      	cbz	r4, 23fd102 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd0fa:	4631      	mov	r1, r6
 23fd0fc:	4620      	mov	r0, r4
 23fd0fe:	f7ff fc33 	bl	23fc968 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd102:	f106 0008 	add.w	r0, r6, #8
 23fd106:	f7ff fde9 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd10a:	3e14      	subs	r6, #20
 23fd10c:	3c14      	subs	r4, #20
 23fd10e:	e7f1      	b.n	23fd0f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd110:	d00d      	beq.n	23fd12e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd112:	42b5      	cmp	r5, r6
 23fd114:	d00b      	beq.n	23fd12e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd116:	b11c      	cbz	r4, 23fd120 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd118:	4629      	mov	r1, r5
 23fd11a:	4620      	mov	r0, r4
 23fd11c:	f7ff fc24 	bl	23fc968 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd120:	f105 0008 	add.w	r0, r5, #8
 23fd124:	f7ff fdda 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd128:	3514      	adds	r5, #20
 23fd12a:	3414      	adds	r4, #20
 23fd12c:	e7f1      	b.n	23fd112 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd130:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd134:	4604      	mov	r4, r0
 23fd136:	460d      	mov	r5, r1
 23fd138:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd13a:	d914      	bls.n	23fd166 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd13c:	4290      	cmp	r0, r2
 23fd13e:	d213      	bcs.n	23fd168 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd140:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd144:	1a75      	subs	r5, r6, r1
 23fd146:	f1a1 0710 	sub.w	r7, r1, #16
 23fd14a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd14c:	42b7      	cmp	r7, r6
 23fd14e:	d018      	beq.n	23fd182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd150:	b11c      	cbz	r4, 23fd15a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd152:	4631      	mov	r1, r6
 23fd154:	4620      	mov	r0, r4
 23fd156:	f001 fff9 	bl	23ff14c <_ZN6StringC1EOS_>
                end->~T();
 23fd15a:	4630      	mov	r0, r6
 23fd15c:	f001 ff7a 	bl	23ff054 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd160:	3e10      	subs	r6, #16
 23fd162:	3c10      	subs	r4, #16
 23fd164:	e7f2      	b.n	23fd14c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd166:	d00c      	beq.n	23fd182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd168:	42b5      	cmp	r5, r6
 23fd16a:	d00a      	beq.n	23fd182 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd16c:	b11c      	cbz	r4, 23fd176 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd16e:	4629      	mov	r1, r5
 23fd170:	4620      	mov	r0, r4
 23fd172:	f001 ffeb 	bl	23ff14c <_ZN6StringC1EOS_>
                p->~T();
 23fd176:	4628      	mov	r0, r5
 23fd178:	f001 ff6c 	bl	23ff054 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd17c:	3510      	adds	r5, #16
 23fd17e:	3410      	adds	r4, #16
 23fd180:	e7f2      	b.n	23fd168 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd184:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd186:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd188:	4605      	mov	r5, r0
        if (n > 0) {
 23fd18a:	dd11      	ble.n	23fd1b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd18c:	0130      	lsls	r0, r6, #4
 23fd18e:	f7fe fe1f 	bl	23fbdd0 <malloc>
            if (!d) {
 23fd192:	4604      	mov	r4, r0
 23fd194:	b158      	cbz	r0, 23fd1ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd196:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd19a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd19e:	f7ff ffc7 	bl	23fd130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd1a2:	6828      	ldr	r0, [r5, #0]
 23fd1a4:	f7fe fe22 	bl	23fbdec <free>
        return true;
 23fd1a8:	2001      	movs	r0, #1
        data_ = d;
 23fd1aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd1ac:	60ae      	str	r6, [r5, #8]
    }
 23fd1ae:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd1b0:	2400      	movs	r4, #0
 23fd1b2:	e7f6      	b.n	23fd1a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd1b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd1b8:	4690      	mov	r8, r2
        capacity_(0) {
 23fd1ba:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd1bc:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd1be:	b095      	sub	sp, #84	; 0x54
 23fd1c0:	9103      	str	r1, [sp, #12]
    return size_;
 23fd1c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd1c6:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd1c8:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd1ca:	e9c0 3300 	strd	r3, r3, [r0]
 23fd1ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd1d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd1d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd1da:	7602      	strb	r2, [r0, #24]
 23fd1dc:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd1de:	dc23      	bgt.n	23fd228 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd1e0:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd1e4:	2314      	movs	r3, #20
 23fd1e6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd1ea:	42af      	cmp	r7, r5
 23fd1ec:	d03b      	beq.n	23fd266 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd1ee:	4629      	mov	r1, r5
 23fd1f0:	a80b      	add	r0, sp, #44	; 0x2c
 23fd1f2:	f001 ffab 	bl	23ff14c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd1f6:	a90b      	add	r1, sp, #44	; 0x2c
 23fd1f8:	a80f      	add	r0, sp, #60	; 0x3c
 23fd1fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd1fc:	f001 ffa6 	bl	23ff14c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd200:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd204:	4299      	cmp	r1, r3
 23fd206:	da1b      	bge.n	23fd240 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd208:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd20a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd20c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd210:	4631      	mov	r1, r6
 23fd212:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd216:	f106 0010 	add.w	r0, r6, #16
 23fd21a:	f7ff ff89 	bl	23fd130 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd21e:	b9ee      	cbnz	r6, 23fd25c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd222:	3301      	adds	r3, #1
 23fd224:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd226:	e011      	b.n	23fd24c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd228:	a808      	add	r0, sp, #32
 23fd22a:	f7ff ffab 	bl	23fd184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd22e:	2800      	cmp	r0, #0
 23fd230:	d1d6      	bne.n	23fd1e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd232:	a808      	add	r0, sp, #32
 23fd234:	f7ff fd66 	bl	23fcd04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd238:	4620      	mov	r0, r4
 23fd23a:	b015      	add	sp, #84	; 0x54
 23fd23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd240:	3101      	adds	r1, #1
 23fd242:	a808      	add	r0, sp, #32
 23fd244:	f7ff ff9e 	bl	23fd184 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd248:	2800      	cmp	r0, #0
 23fd24a:	d1dd      	bne.n	23fd208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd24c:	a80f      	add	r0, sp, #60	; 0x3c
 23fd24e:	f001 ff01 	bl	23ff054 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd252:	a80b      	add	r0, sp, #44	; 0x2c
 23fd254:	f001 fefe 	bl	23ff054 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd258:	3514      	adds	r5, #20
 23fd25a:	e7c6      	b.n	23fd1ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd25c:	4630      	mov	r0, r6
 23fd25e:	a90f      	add	r1, sp, #60	; 0x3c
 23fd260:	f001 ff74 	bl	23ff14c <_ZN6StringC1EOS_>
 23fd264:	e7dc      	b.n	23fd220 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd266:	2600      	movs	r6, #0
 23fd268:	f04f 0914 	mov.w	r9, #20
 23fd26c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd270:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd276:	429e      	cmp	r6, r3
 23fd278:	da7c      	bge.n	23fd374 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd27a:	0133      	lsls	r3, r6, #4
 23fd27c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd27e:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd280:	b90b      	cbnz	r3, 23fd286 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd282:	3601      	adds	r6, #1
 23fd284:	e7f5      	b.n	23fd272 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd286:	2300      	movs	r3, #0
 23fd288:	9307      	str	r3, [sp, #28]
 23fd28a:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd28e:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd290:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd292:	a907      	add	r1, sp, #28
 23fd294:	a806      	add	r0, sp, #24
 23fd296:	f7ff fae6 	bl	23fc866 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd29a:	4682      	mov	sl, r0
 23fd29c:	2800      	cmp	r0, #0
 23fd29e:	d0f0      	beq.n	23fd282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd2a0:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd2a4:	4601      	mov	r1, r0
            bool found = false;
 23fd2a6:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd2aa:	4628      	mov	r0, r5
 23fd2ac:	9a07      	ldr	r2, [sp, #28]
 23fd2ae:	f10d 0317 	add.w	r3, sp, #23
 23fd2b2:	f7ff fb6d 	bl	23fc990 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd2b6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd2ba:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd2bc:	2f00      	cmp	r7, #0
 23fd2be:	d14a      	bne.n	23fd356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd2c0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd2c4:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd2c8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd2cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd2d0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd2d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd2d8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd2da:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd2de:	4293      	cmp	r3, r2
 23fd2e0:	db17      	blt.n	23fd312 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd2e2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd2e6:	f1ba 0f00 	cmp.w	sl, #0
 23fd2ea:	dd30      	ble.n	23fd34e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd2ec:	fb09 f00a 	mul.w	r0, r9, sl
 23fd2f0:	f7fe fd6e 	bl	23fbdd0 <malloc>
            if (!d) {
 23fd2f4:	4683      	mov	fp, r0
 23fd2f6:	b360      	cbz	r0, 23fd352 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd2f8:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd2fc:	fb09 1202 	mla	r2, r9, r2, r1
 23fd300:	f7ff feea 	bl	23fd0d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd304:	6828      	ldr	r0, [r5, #0]
 23fd306:	f7fe fd71 	bl	23fbdec <free>
        data_ = d;
 23fd30a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd30e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd312:	682b      	ldr	r3, [r5, #0]
 23fd314:	9a01      	ldr	r2, [sp, #4]
 23fd316:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd31a:	686a      	ldr	r2, [r5, #4]
 23fd31c:	4651      	mov	r1, sl
 23fd31e:	fb09 3202 	mla	r2, r9, r2, r3
 23fd322:	f10a 0014 	add.w	r0, sl, #20
 23fd326:	f7ff fed7 	bl	23fd0d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd32a:	f1ba 0f00 	cmp.w	sl, #0
 23fd32e:	d003      	beq.n	23fd338 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd330:	4650      	mov	r0, sl
 23fd332:	a90f      	add	r1, sp, #60	; 0x3c
 23fd334:	f7ff fb18 	bl	23fc968 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd338:	686b      	ldr	r3, [r5, #4]
 23fd33a:	3301      	adds	r3, #1
 23fd33c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd33e:	a811      	add	r0, sp, #68	; 0x44
 23fd340:	f7ff fccc 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd344:	b13f      	cbz	r7, 23fd356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd346:	a80b      	add	r0, sp, #44	; 0x2c
 23fd348:	f7ff fcc8 	bl	23fccdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd34c:	e771      	b.n	23fd232 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd34e:	46bb      	mov	fp, r7
 23fd350:	e7d8      	b.n	23fd304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd352:	2701      	movs	r7, #1
 23fd354:	e7f3      	b.n	23fd33e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd356:	9b01      	ldr	r3, [sp, #4]
 23fd358:	682d      	ldr	r5, [r5, #0]
 23fd35a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd35e:	9b06      	ldr	r3, [sp, #24]
 23fd360:	781b      	ldrb	r3, [r3, #0]
 23fd362:	b92b      	cbnz	r3, 23fd370 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd364:	f8d8 3000 	ldr.w	r3, [r8]
 23fd368:	9a02      	ldr	r2, [sp, #8]
 23fd36a:	4413      	add	r3, r2
 23fd36c:	7c1b      	ldrb	r3, [r3, #16]
 23fd36e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd370:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd372:	e78e      	b.n	23fd292 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd374:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd376:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd378:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd37a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd37c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd37e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd382:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd384:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd386:	60a2      	str	r2, [r4, #8]
 23fd388:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd38a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd38c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd38e:	60e2      	str	r2, [r4, #12]
 23fd390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd392:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd394:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd396:	6122      	str	r2, [r4, #16]
 23fd398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd39a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd39c:	9b03      	ldr	r3, [sp, #12]
 23fd39e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd3a0:	6162      	str	r2, [r4, #20]
 23fd3a2:	7623      	strb	r3, [r4, #24]
 23fd3a4:	e7cf      	b.n	23fd346 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd3a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd3aa:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd3ac:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd3ae:	4617      	mov	r7, r2
 23fd3b0:	b087      	sub	sp, #28
 23fd3b2:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd3b4:	4668      	mov	r0, sp
 23fd3b6:	4619      	mov	r1, r3
 23fd3b8:	f7fe f941 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd3bc:	4b0b      	ldr	r3, [pc, #44]	; (23fd3ec <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd3be:	4669      	mov	r1, sp
 23fd3c0:	f846 3b04 	str.w	r3, [r6], #4
 23fd3c4:	a803      	add	r0, sp, #12
 23fd3c6:	f7fe f93a 	bl	23fb63e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd3ca:	4639      	mov	r1, r7
 23fd3cc:	aa03      	add	r2, sp, #12
 23fd3ce:	4630      	mov	r0, r6
 23fd3d0:	f7ff fef0 	bl	23fd1b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd3d4:	a803      	add	r0, sp, #12
 23fd3d6:	f7fe f8f1 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd3da:	4668      	mov	r0, sp
 23fd3dc:	f7fe f8ee 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd3e0:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd3e2:	4b03      	ldr	r3, [pc, #12]	; (23fd3f0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd3e4:	6225      	str	r5, [r4, #32]
 23fd3e6:	6023      	str	r3, [r4, #0]
}
 23fd3e8:	b007      	add	sp, #28
 23fd3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd3ec:	023ff9cc 	.word	0x023ff9cc
 23fd3f0:	023ffb88 	.word	0x023ffb88

023fd3f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd3f6:	460f      	mov	r7, r1
 23fd3f8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd3fa:	4638      	mov	r0, r7
 23fd3fc:	491c      	ldr	r1, [pc, #112]	; (23fd470 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd3fe:	4616      	mov	r6, r2
 23fd400:	461d      	mov	r5, r3
 23fd402:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd404:	f7fd ffac 	bl	23fb360 <strcmp>
 23fd408:	b9c0      	cbnz	r0, 23fd43c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd40a:	b1a4      	cbz	r4, 23fd436 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd40c:	4629      	mov	r1, r5
 23fd40e:	a801      	add	r0, sp, #4
 23fd410:	f7ff fcbe 	bl	23fcd90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd414:	2024      	movs	r0, #36	; 0x24
 23fd416:	4917      	ldr	r1, [pc, #92]	; (23fd474 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd418:	f001 ffc2 	bl	23ff3a0 <_ZnwjRKSt9nothrow_t>
 23fd41c:	4605      	mov	r5, r0
 23fd41e:	b130      	cbz	r0, 23fd42e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd420:	ab01      	add	r3, sp, #4
 23fd422:	4632      	mov	r2, r6
 23fd424:	4621      	mov	r1, r4
 23fd426:	f7ff ffbf 	bl	23fd3a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd42a:	4b13      	ldr	r3, [pc, #76]	; (23fd478 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd42c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd42e:	a801      	add	r0, sp, #4
 23fd430:	f7fe f8c4 	bl	23fb5bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd434:	462c      	mov	r4, r5
}
 23fd436:	4620      	mov	r0, r4
 23fd438:	b005      	add	sp, #20
 23fd43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd43c:	4638      	mov	r0, r7
 23fd43e:	490f      	ldr	r1, [pc, #60]	; (23fd47c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd440:	f7fd ff8e 	bl	23fb360 <strcmp>
 23fd444:	b990      	cbnz	r0, 23fd46c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd446:	2c00      	cmp	r4, #0
 23fd448:	d0f5      	beq.n	23fd436 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd44a:	4629      	mov	r1, r5
 23fd44c:	a801      	add	r0, sp, #4
 23fd44e:	f7ff fc9f 	bl	23fcd90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd452:	2024      	movs	r0, #36	; 0x24
 23fd454:	4907      	ldr	r1, [pc, #28]	; (23fd474 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd456:	f001 ffa3 	bl	23ff3a0 <_ZnwjRKSt9nothrow_t>
 23fd45a:	4605      	mov	r5, r0
 23fd45c:	2800      	cmp	r0, #0
 23fd45e:	d0e6      	beq.n	23fd42e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd460:	4632      	mov	r2, r6
 23fd462:	4621      	mov	r1, r4
 23fd464:	ab01      	add	r3, sp, #4
 23fd466:	f7ff ff9f 	bl	23fd3a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd46a:	e7e0      	b.n	23fd42e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd46c:	2400      	movs	r4, #0
 23fd46e:	e7e2      	b.n	23fd436 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd470:	023ffb08 	.word	0x023ffb08
 23fd474:	023ffd48 	.word	0x023ffd48
 23fd478:	023ffba0 	.word	0x023ffba0
 23fd47c:	023ffb0c 	.word	0x023ffb0c

023fd480 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd480:	4b01      	ldr	r3, [pc, #4]	; (23fd488 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd482:	4a02      	ldr	r2, [pc, #8]	; (23fd48c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd484:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd486:	4770      	bx	lr
 23fd488:	1007aeb8 	.word	0x1007aeb8
 23fd48c:	023ffb1d 	.word	0x023ffb1d

023fd490 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd494:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd496:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd49a:	4604      	mov	r4, r0
 23fd49c:	460e      	mov	r6, r1
 23fd49e:	4617      	mov	r7, r2
 23fd4a0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd4a2:	f7ff f873 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fd4a6:	4581      	cmp	r9, r0
 23fd4a8:	d04d      	beq.n	23fd546 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd4aa:	792b      	ldrb	r3, [r5, #4]
 23fd4ac:	0719      	lsls	r1, r3, #28
 23fd4ae:	d504      	bpl.n	23fd4ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd4b0:	4620      	mov	r0, r4
 23fd4b2:	696a      	ldr	r2, [r5, #20]
 23fd4b4:	4954      	ldr	r1, [pc, #336]	; (23fd608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd4b6:	f7ff fad0 	bl	23fca5a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd4ba:	f1b8 0f00 	cmp.w	r8, #0
 23fd4be:	d00d      	beq.n	23fd4dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd4c0:	215b      	movs	r1, #91	; 0x5b
 23fd4c2:	4620      	mov	r0, r4
 23fd4c4:	f7ff fa44 	bl	23fc950 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd4c8:	4641      	mov	r1, r8
 23fd4ca:	4620      	mov	r0, r4
 23fd4cc:	f7ff fa31 	bl	23fc932 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd4d0:	6823      	ldr	r3, [r4, #0]
 23fd4d2:	2202      	movs	r2, #2
 23fd4d4:	4620      	mov	r0, r4
 23fd4d6:	68db      	ldr	r3, [r3, #12]
 23fd4d8:	494c      	ldr	r1, [pc, #304]	; (23fd60c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd4da:	4798      	blx	r3
    if (attr.has_file) {
 23fd4dc:	792b      	ldrb	r3, [r5, #4]
 23fd4de:	07da      	lsls	r2, r3, #31
 23fd4e0:	d524      	bpl.n	23fd52c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd4e2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd4e6:	212f      	movs	r1, #47	; 0x2f
 23fd4e8:	4640      	mov	r0, r8
 23fd4ea:	f002 f922 	bl	23ff732 <strrchr>
    if (s1) {
 23fd4ee:	b108      	cbz	r0, 23fd4f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd4f0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd4f4:	4641      	mov	r1, r8
 23fd4f6:	4620      	mov	r0, r4
 23fd4f8:	f7ff fa1b 	bl	23fc932 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd4fc:	792b      	ldrb	r3, [r5, #4]
 23fd4fe:	079b      	lsls	r3, r3, #30
 23fd500:	d508      	bpl.n	23fd514 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd502:	213a      	movs	r1, #58	; 0x3a
 23fd504:	4620      	mov	r0, r4
 23fd506:	f7ff fa23 	bl	23fc950 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd50a:	4620      	mov	r0, r4
 23fd50c:	68ea      	ldr	r2, [r5, #12]
 23fd50e:	4940      	ldr	r1, [pc, #256]	; (23fd610 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd510:	f7ff faa3 	bl	23fca5a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd514:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd516:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd518:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd51c:	4620      	mov	r0, r4
            write(", ", 2);
 23fd51e:	f04f 0202 	mov.w	r2, #2
 23fd522:	68db      	ldr	r3, [r3, #12]
 23fd524:	bf14      	ite	ne
 23fd526:	493b      	ldrne	r1, [pc, #236]	; (23fd614 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd528:	493b      	ldreq	r1, [pc, #236]	; (23fd618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd52a:	4798      	blx	r3
    if (attr.has_function) {
 23fd52c:	792b      	ldrb	r3, [r5, #4]
 23fd52e:	0758      	lsls	r0, r3, #29
 23fd530:	d51d      	bpl.n	23fd56e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd532:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd534:	460b      	mov	r3, r1
 23fd536:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd538:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd53c:	b160      	cbz	r0, 23fd558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd53e:	2820      	cmp	r0, #32
 23fd540:	d108      	bne.n	23fd554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd542:	4619      	mov	r1, r3
 23fd544:	e7f7      	b.n	23fd536 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd546:	4835      	ldr	r0, [pc, #212]	; (23fd61c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd548:	f7fe fd11 	bl	23fbf6e <_ZN5spark12NetworkClass9listeningEv>
 23fd54c:	2800      	cmp	r0, #0
 23fd54e:	d0ac      	beq.n	23fd4aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd554:	2828      	cmp	r0, #40	; 0x28
 23fd556:	d1ee      	bne.n	23fd536 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd558:	6823      	ldr	r3, [r4, #0]
 23fd55a:	1a52      	subs	r2, r2, r1
 23fd55c:	4620      	mov	r0, r4
 23fd55e:	68db      	ldr	r3, [r3, #12]
 23fd560:	4798      	blx	r3
        write("(): ", 4);
 23fd562:	6823      	ldr	r3, [r4, #0]
 23fd564:	2204      	movs	r2, #4
 23fd566:	4620      	mov	r0, r4
 23fd568:	68db      	ldr	r3, [r3, #12]
 23fd56a:	492d      	ldr	r1, [pc, #180]	; (23fd620 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd56c:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd56e:	2100      	movs	r1, #0
 23fd570:	4638      	mov	r0, r7
 23fd572:	f7fe fb15 	bl	23fbba0 <log_level_name>
 23fd576:	4601      	mov	r1, r0
    write(s);
 23fd578:	4620      	mov	r0, r4
 23fd57a:	f7ff f9da 	bl	23fc932 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd57e:	6823      	ldr	r3, [r4, #0]
 23fd580:	2202      	movs	r2, #2
 23fd582:	4620      	mov	r0, r4
 23fd584:	68db      	ldr	r3, [r3, #12]
 23fd586:	4924      	ldr	r1, [pc, #144]	; (23fd618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd588:	4798      	blx	r3
    if (msg) {
 23fd58a:	b11e      	cbz	r6, 23fd594 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd58c:	4631      	mov	r1, r6
 23fd58e:	4620      	mov	r0, r4
 23fd590:	f7ff f9cf 	bl	23fc932 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd594:	792b      	ldrb	r3, [r5, #4]
 23fd596:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd59a:	d02c      	beq.n	23fd5f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd59c:	6823      	ldr	r3, [r4, #0]
 23fd59e:	4921      	ldr	r1, [pc, #132]	; (23fd624 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd5a0:	68db      	ldr	r3, [r3, #12]
 23fd5a2:	2202      	movs	r2, #2
 23fd5a4:	4620      	mov	r0, r4
 23fd5a6:	4798      	blx	r3
        if (attr.has_code) {
 23fd5a8:	792b      	ldrb	r3, [r5, #4]
 23fd5aa:	06d9      	lsls	r1, r3, #27
 23fd5ac:	d50a      	bpl.n	23fd5c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd5ae:	6823      	ldr	r3, [r4, #0]
 23fd5b0:	2207      	movs	r2, #7
 23fd5b2:	4620      	mov	r0, r4
 23fd5b4:	491c      	ldr	r1, [pc, #112]	; (23fd628 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd5b6:	68db      	ldr	r3, [r3, #12]
 23fd5b8:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd5ba:	4620      	mov	r0, r4
 23fd5bc:	69aa      	ldr	r2, [r5, #24]
 23fd5be:	491b      	ldr	r1, [pc, #108]	; (23fd62c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd5c0:	f7ff fa4b 	bl	23fca5a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd5c4:	792b      	ldrb	r3, [r5, #4]
 23fd5c6:	069a      	lsls	r2, r3, #26
 23fd5c8:	d511      	bpl.n	23fd5ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd5ca:	06db      	lsls	r3, r3, #27
 23fd5cc:	d505      	bpl.n	23fd5da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd5ce:	6823      	ldr	r3, [r4, #0]
 23fd5d0:	2202      	movs	r2, #2
 23fd5d2:	4620      	mov	r0, r4
 23fd5d4:	68db      	ldr	r3, [r3, #12]
 23fd5d6:	490f      	ldr	r1, [pc, #60]	; (23fd614 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd5d8:	4798      	blx	r3
            write("details = ", 10);
 23fd5da:	6823      	ldr	r3, [r4, #0]
 23fd5dc:	4620      	mov	r0, r4
 23fd5de:	4914      	ldr	r1, [pc, #80]	; (23fd630 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd5e0:	220a      	movs	r2, #10
 23fd5e2:	68db      	ldr	r3, [r3, #12]
 23fd5e4:	4798      	blx	r3
            write(attr.details);
 23fd5e6:	4620      	mov	r0, r4
 23fd5e8:	69e9      	ldr	r1, [r5, #28]
 23fd5ea:	f7ff f9a2 	bl	23fc932 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd5ee:	215d      	movs	r1, #93	; 0x5d
 23fd5f0:	4620      	mov	r0, r4
 23fd5f2:	f7ff f9ad 	bl	23fc950 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd5f6:	6823      	ldr	r3, [r4, #0]
 23fd5f8:	4620      	mov	r0, r4
}
 23fd5fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd5fe:	2202      	movs	r2, #2
 23fd600:	68db      	ldr	r3, [r3, #12]
 23fd602:	490c      	ldr	r1, [pc, #48]	; (23fd634 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd604:	4718      	bx	r3
 23fd606:	bf00      	nop
 23fd608:	023ffb21 	.word	0x023ffb21
 23fd60c:	023ffb28 	.word	0x023ffb28
 23fd610:	023ffa88 	.word	0x023ffa88
 23fd614:	023ffb2b 	.word	0x023ffb2b
 23fd618:	023ffb30 	.word	0x023ffb30
 23fd61c:	1007ae68 	.word	0x1007ae68
 23fd620:	023ffb2e 	.word	0x023ffb2e
 23fd624:	023ffb33 	.word	0x023ffb33
 23fd628:	023ffb36 	.word	0x023ffb36
 23fd62c:	023ffb3e 	.word	0x023ffb3e
 23fd630:	023ffb41 	.word	0x023ffb41
 23fd634:	023ffb4c 	.word	0x023ffb4c

023fd638 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd63c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd63e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd640:	460d      	mov	r5, r1
 23fd642:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd644:	f7fe ffa2 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fd648:	4287      	cmp	r7, r0
 23fd64a:	d007      	beq.n	23fd65c <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd64c:	6a20      	ldr	r0, [r4, #32]
 23fd64e:	4632      	mov	r2, r6
 23fd650:	6803      	ldr	r3, [r0, #0]
 23fd652:	4629      	mov	r1, r5
}
 23fd654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd658:	68db      	ldr	r3, [r3, #12]
 23fd65a:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd65c:	4803      	ldr	r0, [pc, #12]	; (23fd66c <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd65e:	f7fe fc86 	bl	23fbf6e <_ZN5spark12NetworkClass9listeningEv>
 23fd662:	2800      	cmp	r0, #0
 23fd664:	d0f2      	beq.n	23fd64c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd66a:	bf00      	nop
 23fd66c:	1007ae68 	.word	0x1007ae68

023fd670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd674:	b085      	sub	sp, #20
    return stream_;
 23fd676:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd67a:	4605      	mov	r5, r0
 23fd67c:	460f      	mov	r7, r1
 23fd67e:	4690      	mov	r8, r2
 23fd680:	461e      	mov	r6, r3
 23fd682:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd684:	f7fe ff82 	bl	23fc58c <_Z16_fetch_usbserialv>
 23fd688:	4581      	cmp	r9, r0
 23fd68a:	d105      	bne.n	23fd698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd68c:	4849      	ldr	r0, [pc, #292]	; (23fd7b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd68e:	f7fe fc6e 	bl	23fbf6e <_ZN5spark12NetworkClass9listeningEv>
 23fd692:	2800      	cmp	r0, #0
 23fd694:	f040 808a 	bne.w	23fd7ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd698:	f04f 0900 	mov.w	r9, #0
 23fd69c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd69e:	4a46      	ldr	r2, [pc, #280]	; (23fd7b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd6a0:	a801      	add	r0, sp, #4
 23fd6a2:	9201      	str	r2, [sp, #4]
 23fd6a4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd6a6:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd6aa:	f7fe fe56 	bl	23fc35a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd6ae:	4649      	mov	r1, r9
 23fd6b0:	4640      	mov	r0, r8
 23fd6b2:	f7fe fa75 	bl	23fbba0 <log_level_name>
 23fd6b6:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd6b8:	4940      	ldr	r1, [pc, #256]	; (23fd7bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd6ba:	2201      	movs	r2, #1
 23fd6bc:	a801      	add	r0, sp, #4
 23fd6be:	f7fe fedb 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6c2:	4641      	mov	r1, r8
 23fd6c4:	f7ff f927 	bl	23fc916 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd6c8:	b13f      	cbz	r7, 23fd6da <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd6ca:	493d      	ldr	r1, [pc, #244]	; (23fd7c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd6cc:	2201      	movs	r2, #1
 23fd6ce:	a801      	add	r0, sp, #4
 23fd6d0:	f7fe fed2 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6d4:	4639      	mov	r1, r7
 23fd6d6:	f7ff f91e 	bl	23fc916 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd6da:	b13e      	cbz	r6, 23fd6ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd6dc:	4939      	ldr	r1, [pc, #228]	; (23fd7c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd6de:	2201      	movs	r2, #1
 23fd6e0:	a801      	add	r0, sp, #4
 23fd6e2:	f7fe fec9 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd6e6:	4631      	mov	r1, r6
 23fd6e8:	f7ff f915 	bl	23fc916 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd6ec:	7923      	ldrb	r3, [r4, #4]
 23fd6ee:	07df      	lsls	r7, r3, #31
 23fd6f0:	d50e      	bpl.n	23fd710 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd6f2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd6f4:	212f      	movs	r1, #47	; 0x2f
 23fd6f6:	4630      	mov	r0, r6
 23fd6f8:	f002 f81b 	bl	23ff732 <strrchr>
    if (s1) {
 23fd6fc:	b100      	cbz	r0, 23fd700 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd6fe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd700:	4931      	ldr	r1, [pc, #196]	; (23fd7c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd702:	2201      	movs	r2, #1
 23fd704:	a801      	add	r0, sp, #4
 23fd706:	f7fe feb7 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd70a:	4631      	mov	r1, r6
 23fd70c:	f7ff f903 	bl	23fc916 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd710:	7923      	ldrb	r3, [r4, #4]
 23fd712:	079e      	lsls	r6, r3, #30
 23fd714:	d507      	bpl.n	23fd726 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd716:	492d      	ldr	r1, [pc, #180]	; (23fd7cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd718:	2202      	movs	r2, #2
 23fd71a:	a801      	add	r0, sp, #4
 23fd71c:	f7fe feac 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd720:	68e1      	ldr	r1, [r4, #12]
 23fd722:	f7fe fe27 	bl	23fc374 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd726:	7923      	ldrb	r3, [r4, #4]
 23fd728:	0758      	lsls	r0, r3, #29
 23fd72a:	d514      	bpl.n	23fd756 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd72c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd72e:	4633      	mov	r3, r6
 23fd730:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd732:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd736:	b12a      	cbz	r2, 23fd744 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd738:	2a20      	cmp	r2, #32
 23fd73a:	d101      	bne.n	23fd740 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd73c:	461e      	mov	r6, r3
 23fd73e:	e7f7      	b.n	23fd730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd740:	2a28      	cmp	r2, #40	; 0x28
 23fd742:	d1f5      	bne.n	23fd730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd744:	2202      	movs	r2, #2
 23fd746:	4922      	ldr	r1, [pc, #136]	; (23fd7d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd748:	a801      	add	r0, sp, #4
 23fd74a:	f7fe fe95 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd74e:	4631      	mov	r1, r6
 23fd750:	1bba      	subs	r2, r7, r6
 23fd752:	f7fe fea1 	bl	23fc498 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd756:	7923      	ldrb	r3, [r4, #4]
 23fd758:	0719      	lsls	r1, r3, #28
 23fd75a:	d507      	bpl.n	23fd76c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd75c:	491d      	ldr	r1, [pc, #116]	; (23fd7d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd75e:	2201      	movs	r2, #1
 23fd760:	a801      	add	r0, sp, #4
 23fd762:	f7fe fe89 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd766:	6961      	ldr	r1, [r4, #20]
 23fd768:	f7fe fe16 	bl	23fc398 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd76c:	7923      	ldrb	r3, [r4, #4]
 23fd76e:	06da      	lsls	r2, r3, #27
 23fd770:	d508      	bpl.n	23fd784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd772:	2204      	movs	r2, #4
 23fd774:	4918      	ldr	r1, [pc, #96]	; (23fd7d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd776:	eb0d 0002 	add.w	r0, sp, r2
 23fd77a:	f7fe fe7d 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd77e:	69a1      	ldr	r1, [r4, #24]
 23fd780:	f7fe fdf8 	bl	23fc374 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd784:	7923      	ldrb	r3, [r4, #4]
 23fd786:	069b      	lsls	r3, r3, #26
 23fd788:	d507      	bpl.n	23fd79a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd78a:	4914      	ldr	r1, [pc, #80]	; (23fd7dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd78c:	2206      	movs	r2, #6
 23fd78e:	a801      	add	r0, sp, #4
 23fd790:	f7fe fe72 	bl	23fc478 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd794:	69e1      	ldr	r1, [r4, #28]
 23fd796:	f7ff f8be 	bl	23fc916 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd79a:	a801      	add	r0, sp, #4
 23fd79c:	f7fe fdc7 	bl	23fc32e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd7a0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd7a2:	2202      	movs	r2, #2
 23fd7a4:	6803      	ldr	r3, [r0, #0]
 23fd7a6:	490e      	ldr	r1, [pc, #56]	; (23fd7e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd7a8:	68db      	ldr	r3, [r3, #12]
 23fd7aa:	4798      	blx	r3
}
 23fd7ac:	b005      	add	sp, #20
 23fd7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd7b2:	bf00      	nop
 23fd7b4:	1007ae68 	.word	0x1007ae68
 23fd7b8:	023ffb70 	.word	0x023ffb70
 23fd7bc:	023ffafe 	.word	0x023ffafe
 23fd7c0:	023ffb4f 	.word	0x023ffb4f
 23fd7c4:	023ffecf 	.word	0x023ffecf
 23fd7c8:	023ffb51 	.word	0x023ffb51
 23fd7cc:	023ffb53 	.word	0x023ffb53
 23fd7d0:	023ffb56 	.word	0x023ffb56
 23fd7d4:	023ffb59 	.word	0x023ffb59
 23fd7d8:	023ffb5b 	.word	0x023ffb5b
 23fd7dc:	023ffb60 	.word	0x023ffb60
 23fd7e0:	023ffb4c 	.word	0x023ffb4c

023fd7e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd7e6:	4606      	mov	r6, r0
 23fd7e8:	460d      	mov	r5, r1
  size_t n = 0;
 23fd7ea:	2400      	movs	r4, #0
 23fd7ec:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd7ee:	42bd      	cmp	r5, r7
 23fd7f0:	d00c      	beq.n	23fd80c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd7f2:	6833      	ldr	r3, [r6, #0]
 23fd7f4:	4630      	mov	r0, r6
 23fd7f6:	689b      	ldr	r3, [r3, #8]
 23fd7f8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd7fc:	4798      	blx	r3
     if (chunk>=0)
 23fd7fe:	1e03      	subs	r3, r0, #0
 23fd800:	db01      	blt.n	23fd806 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd802:	441c      	add	r4, r3
  while (size--) {
 23fd804:	e7f3      	b.n	23fd7ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd806:	2c00      	cmp	r4, #0
 23fd808:	bf08      	it	eq
 23fd80a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd80c:	4620      	mov	r0, r4
 23fd80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd810 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fd810:	b513      	push	{r0, r1, r4, lr}
 23fd812:	4604      	mov	r4, r0
    }
 23fd814:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd816:	b159      	cbz	r1, 23fd830 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd818:	9101      	str	r1, [sp, #4]
 23fd81a:	f7fd fdab 	bl	23fb374 <strlen>
 23fd81e:	4602      	mov	r2, r0
 23fd820:	4620      	mov	r0, r4
 23fd822:	6823      	ldr	r3, [r4, #0]
 23fd824:	9901      	ldr	r1, [sp, #4]
 23fd826:	68db      	ldr	r3, [r3, #12]
    }
 23fd828:	b002      	add	sp, #8
 23fd82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd82e:	4718      	bx	r3
    }
 23fd830:	b002      	add	sp, #8
 23fd832:	bd10      	pop	{r4, pc}

023fd834 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd834:	6803      	ldr	r3, [r0, #0]
 23fd836:	689b      	ldr	r3, [r3, #8]
 23fd838:	4718      	bx	r3

023fd83a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd83a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd83c:	2a01      	cmp	r2, #1
 23fd83e:	bf98      	it	ls
 23fd840:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd842:	b530      	push	{r4, r5, lr}
 23fd844:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd846:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd84a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd84c:	460d      	mov	r5, r1
 23fd84e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd852:	fb01 5312 	mls	r3, r1, r2, r5
 23fd856:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd85a:	2b09      	cmp	r3, #9
 23fd85c:	bf94      	ite	ls
 23fd85e:	3330      	addls	r3, #48	; 0x30
 23fd860:	3337      	addhi	r3, #55	; 0x37
 23fd862:	b2db      	uxtb	r3, r3
  } while(n);
 23fd864:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd866:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd86a:	d9ef      	bls.n	23fd84c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd86c:	4621      	mov	r1, r4
 23fd86e:	f7ff ffcf 	bl	23fd810 <_ZN5Print5writeEPKc>
}
 23fd872:	b00b      	add	sp, #44	; 0x2c
 23fd874:	bd30      	pop	{r4, r5, pc}

023fd876 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fd876:	4770      	bx	lr

023fd878 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fd878:	4b06      	ldr	r3, [pc, #24]	; (23fd894 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fd87a:	b510      	push	{r4, lr}
	    ||
 23fd87c:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fd87e:	f100 040c 	add.w	r4, r0, #12
 23fd882:	d005      	beq.n	23fd890 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fd884:	4608      	mov	r0, r1
 23fd886:	f001 fd93 	bl	23ff3b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fd88a:	2800      	cmp	r0, #0
 23fd88c:	bf08      	it	eq
 23fd88e:	2400      	moveq	r4, #0
      }
 23fd890:	4620      	mov	r0, r4
 23fd892:	bd10      	pop	{r4, pc}
 23fd894:	023ffa80 	.word	0x023ffa80

023fd898 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fd898:	b510      	push	{r4, lr}
 23fd89a:	4604      	mov	r4, r0
 23fd89c:	2130      	movs	r1, #48	; 0x30
 23fd89e:	f7fd fd92 	bl	23fb3c6 <_ZdlPvj>
 23fd8a2:	4620      	mov	r0, r4
 23fd8a4:	bd10      	pop	{r4, pc}

023fd8a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fd8a6:	2130      	movs	r1, #48	; 0x30
 23fd8a8:	f7fd bd8d 	b.w	23fb3c6 <_ZdlPvj>

023fd8ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fd8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fd8ae:	2500      	movs	r5, #0
 23fd8b0:	1cec      	adds	r4, r5, #3
 23fd8b2:	428c      	cmp	r4, r1
 23fd8b4:	d80d      	bhi.n	23fd8d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fd8b6:	1c6e      	adds	r6, r5, #1
 23fd8b8:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fd8ba:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fd8bc:	4297      	cmp	r7, r2
 23fd8be:	d105      	bne.n	23fd8cc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fd8c0:	4426      	add	r6, r4
 23fd8c2:	42b1      	cmp	r1, r6
 23fd8c4:	d305      	bcc.n	23fd8d2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fd8c6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fd8c8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fd8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fd8cc:	3401      	adds	r4, #1
 23fd8ce:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fd8d0:	e7ee      	b.n	23fd8b0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fd8d2:	2000      	movs	r0, #0
 23fd8d4:	e7f9      	b.n	23fd8ca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

023fd8d6 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 23fd8d6:	b510      	push	{r4, lr}
      {
	if (_M_manager)
 23fd8d8:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fd8da:	4604      	mov	r4, r0
	if (_M_manager)
 23fd8dc:	b12b      	cbz	r3, 23fd8ea <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd8de:	2203      	movs	r2, #3
 23fd8e0:	4601      	mov	r1, r0
 23fd8e2:	4798      	blx	r3
	    _M_manager = nullptr;
 23fd8e4:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fd8e6:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
 23fd8ea:	bd10      	pop	{r4, pc}

023fd8ec <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fd8ec:	b510      	push	{r4, lr}
	if (_M_manager)
 23fd8ee:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fd8f0:	4604      	mov	r4, r0
	if (_M_manager)
 23fd8f2:	b12b      	cbz	r3, 23fd900 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd8f4:	2203      	movs	r2, #3
 23fd8f6:	4601      	mov	r1, r0
 23fd8f8:	4798      	blx	r3
	    _M_manager = nullptr;
 23fd8fa:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fd8fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fd900:	bd10      	pop	{r4, pc}

023fd902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fd902:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fd904:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fd906:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fd908:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fd90a:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fd90c:	d008      	beq.n	23fd920 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fd90e:	b111      	cbz	r1, 23fd916 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fd910:	684b      	ldr	r3, [r1, #4]
 23fd912:	3301      	adds	r3, #1
 23fd914:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fd916:	6828      	ldr	r0, [r5, #0]
 23fd918:	b108      	cbz	r0, 23fd91e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fd91a:	f7fe fc30 	bl	23fc17e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fd91e:	602c      	str	r4, [r5, #0]
      }
 23fd920:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd924 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fd924:	2300      	movs	r3, #0
    WiringBleLock() :
 23fd926:	b510      	push	{r4, lr}
            locked_(false) {
 23fd928:	7003      	strb	r3, [r0, #0]
    void lock() { os_mutex_recursive_lock(handle_); }
 23fd92a:	4b04      	ldr	r3, [pc, #16]	; (23fd93c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fd92c:	4604      	mov	r4, r0
 23fd92e:	6818      	ldr	r0, [r3, #0]
 23fd930:	f7fe f848 	bl	23fb9c4 <os_mutex_recursive_lock>
        locked_ = true;
 23fd934:	2301      	movs	r3, #1
    }
 23fd936:	4620      	mov	r0, r4
        locked_ = true;
 23fd938:	7023      	strb	r3, [r4, #0]
    }
 23fd93a:	bd10      	pop	{r4, pc}
 23fd93c:	1007aee8 	.word	0x1007aee8

023fd940 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fd940:	b510      	push	{r4, lr}
        if (locked_) {
 23fd942:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fd944:	4604      	mov	r4, r0
        if (locked_) {
 23fd946:	b11b      	cbz	r3, 23fd950 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd948:	4b02      	ldr	r3, [pc, #8]	; (23fd954 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fd94a:	6818      	ldr	r0, [r3, #0]
 23fd94c:	f7fe f848 	bl	23fb9e0 <os_mutex_recursive_unlock>
    }
 23fd950:	4620      	mov	r0, r4
 23fd952:	bd10      	pop	{r4, pc}
 23fd954:	1007aee8 	.word	0x1007aee8

023fd958 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
 23fd958:	2905      	cmp	r1, #5
    return address_.addr[i];
 23fd95a:	bf94      	ite	ls
 23fd95c:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
 23fd95e:	2000      	movhi	r0, #0
}
 23fd960:	4770      	bx	lr

023fd962 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fd962:	b082      	sub	sp, #8
    address_ = addr;
 23fd964:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fd966:	4603      	mov	r3, r0
    address_ = addr;
 23fd968:	6808      	ldr	r0, [r1, #0]
 23fd96a:	6849      	ldr	r1, [r1, #4]
 23fd96c:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fd96e:	466a      	mov	r2, sp
 23fd970:	ca03      	ldmia	r2!, {r0, r1}
 23fd972:	6018      	str	r0, [r3, #0]
}
 23fd974:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fd976:	6059      	str	r1, [r3, #4]
}
 23fd978:	b002      	add	sp, #8
 23fd97a:	4770      	bx	lr

023fd97c <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fd97c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fd97e:	7982      	ldrb	r2, [r0, #6]
 23fd980:	798b      	ldrb	r3, [r1, #6]
 23fd982:	429a      	cmp	r2, r3
 23fd984:	d106      	bne.n	23fd994 <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fd986:	2206      	movs	r2, #6
 23fd988:	f001 fe32 	bl	23ff5f0 <memcmp>
 23fd98c:	fab0 f080 	clz	r0, r0
 23fd990:	0940      	lsrs	r0, r0, #5
}
 23fd992:	bd08      	pop	{r3, pc}
    return false;
 23fd994:	2000      	movs	r0, #0
 23fd996:	e7fc      	b.n	23fd992 <_ZNK8particle10BleAddresseqERKS0_+0x16>

023fd998 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fd998:	b570      	push	{r4, r5, r6, lr}
 23fd99a:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fd99c:	4b38      	ldr	r3, [pc, #224]	; (23fda80 <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fd99e:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fd9a0:	6818      	ldr	r0, [r3, #0]
 23fd9a2:	889b      	ldrh	r3, [r3, #4]
 23fd9a4:	9000      	str	r0, [sp, #0]
 23fd9a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fd9aa:	4b36      	ldr	r3, [pc, #216]	; (23fda84 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fd9ac:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fd9ae:	6818      	ldr	r0, [r3, #0]
 23fd9b0:	889b      	ldrh	r3, [r3, #4]
 23fd9b2:	9002      	str	r0, [sp, #8]
 23fd9b4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fd9b8:	b97e      	cbnz	r6, 23fd9da <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fd9ba:	2206      	movs	r2, #6
 23fd9bc:	4669      	mov	r1, sp
 23fd9be:	4620      	mov	r0, r4
 23fd9c0:	f001 fe16 	bl	23ff5f0 <memcmp>
 23fd9c4:	b138      	cbz	r0, 23fd9d6 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fd9c6:	2206      	movs	r2, #6
 23fd9c8:	4620      	mov	r0, r4
 23fd9ca:	a902      	add	r1, sp, #8
 23fd9cc:	f001 fe10 	bl	23ff5f0 <memcmp>
 23fd9d0:	3800      	subs	r0, #0
 23fd9d2:	bf18      	it	ne
 23fd9d4:	2001      	movne	r0, #1
}
 23fd9d6:	b006      	add	sp, #24
 23fd9d8:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fd9da:	88a3      	ldrh	r3, [r4, #4]
 23fd9dc:	6820      	ldr	r0, [r4, #0]
 23fd9de:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fd9e2:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fd9e6:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fd9e8:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fd9ea:	d124      	bne.n	23fda36 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fd9ec:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fd9f0:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fd9f2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fd9f6:	4669      	mov	r1, sp
 23fd9f8:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fd9fa:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fd9fe:	f001 fdf7 	bl	23ff5f0 <memcmp>
 23fda02:	2800      	cmp	r0, #0
 23fda04:	d03a      	beq.n	23fda7c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fda06:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fda0a:	2206      	movs	r2, #6
 23fda0c:	a902      	add	r1, sp, #8
 23fda0e:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fda10:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fda14:	f001 fdec 	bl	23ff5f0 <memcmp>
 23fda18:	b380      	cbz	r0, 23fda7c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fda1a:	7960      	ldrb	r0, [r4, #5]
 23fda1c:	2e01      	cmp	r6, #1
 23fda1e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fda22:	d104      	bne.n	23fda2e <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fda24:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fda26:	bf14      	ite	ne
 23fda28:	2000      	movne	r0, #0
 23fda2a:	2001      	moveq	r0, #1
 23fda2c:	e7d3      	b.n	23fd9d6 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fda2e:	fab0 f080 	clz	r0, r0
 23fda32:	0940      	lsrs	r0, r0, #5
 23fda34:	e7cf      	b.n	23fd9d6 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fda36:	2e02      	cmp	r6, #2
 23fda38:	d11e      	bne.n	23fda78 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fda3a:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fda3c:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fda40:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fda44:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fda48:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fda4c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fda50:	f001 fdce 	bl	23ff5f0 <memcmp>
 23fda54:	b190      	cbz	r0, 23fda7c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fda56:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fda5a:	2203      	movs	r2, #3
 23fda5c:	f10d 010b 	add.w	r1, sp, #11
 23fda60:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fda64:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fda68:	f001 fdc2 	bl	23ff5f0 <memcmp>
 23fda6c:	b130      	cbz	r0, 23fda7c <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fda6e:	7960      	ldrb	r0, [r4, #5]
 23fda70:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fda74:	2840      	cmp	r0, #64	; 0x40
 23fda76:	e7d6      	b.n	23fda26 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fda78:	2001      	movs	r0, #1
 23fda7a:	e7ac      	b.n	23fd9d6 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fda7c:	2000      	movs	r0, #0
 23fda7e:	e7aa      	b.n	23fd9d6 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fda80:	023ff944 	.word	0x023ff944
 23fda84:	023ffc1e 	.word	0x023ffc1e

023fda88 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fda88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fda8c:	6003      	str	r3, [r0, #0]
 23fda8e:	8083      	strh	r3, [r0, #4]
}
 23fda90:	2000      	movs	r0, #0
 23fda92:	4770      	bx	lr

023fda94 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fda94:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fda96:	4602      	mov	r2, r0
 23fda98:	b508      	push	{r3, lr}
        : address_{} {
 23fda9a:	6001      	str	r1, [r0, #0]
 23fda9c:	6041      	str	r1, [r0, #4]
    clear();
 23fda9e:	f7ff fff3 	bl	23fda88 <_ZN8particle10BleAddress5clearEv>
}
 23fdaa2:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fdaa4:	7191      	strb	r1, [r2, #6]
}
 23fdaa6:	bd08      	pop	{r3, pc}

023fdaa8 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fdaa8:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdaaa:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fdaac:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fdaae:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fdab0:	4b04      	ldr	r3, [pc, #16]	; (23fdac4 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fdab2:	f103 0110 	add.w	r1, r3, #16
 23fdab6:	f853 4b04 	ldr.w	r4, [r3], #4
 23fdaba:	428b      	cmp	r3, r1
 23fdabc:	f842 4b04 	str.w	r4, [r2], #4
 23fdac0:	d1f9      	bne.n	23fdab6 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fdac2:	bd10      	pop	{r4, pc}
 23fdac4:	023ff94a 	.word	0x023ff94a

023fdac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fdac8:	b510      	push	{r4, lr}
    if (uuid128) {
 23fdaca:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fdacc:	4604      	mov	r4, r0
    if (uuid128) {
 23fdace:	b1b1      	cbz	r1, 23fdafe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fdad0:	2a01      	cmp	r2, #1
 23fdad2:	f101 0210 	add.w	r2, r1, #16
 23fdad6:	d10a      	bne.n	23fdaee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fdad8:	4601      	mov	r1, r0
 23fdada:	f853 0b04 	ldr.w	r0, [r3], #4
 23fdade:	4293      	cmp	r3, r2
 23fdae0:	f841 0b04 	str.w	r0, [r1], #4
 23fdae4:	d1f9      	bne.n	23fdada <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fdae6:	2301      	movs	r3, #1
 23fdae8:	6123      	str	r3, [r4, #16]
}
 23fdaea:	4620      	mov	r0, r4
 23fdaec:	bd10      	pop	{r4, pc}
 23fdaee:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fdaf0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fdaf4:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fdaf6:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fdafa:	d1f9      	bne.n	23fdaf0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fdafc:	e7f3      	b.n	23fdae6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fdafe:	2210      	movs	r2, #16
 23fdb00:	f001 fdad 	bl	23ff65e <memset>
 23fdb04:	e7f1      	b.n	23fdaea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fdb06 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fdb06:	b538      	push	{r3, r4, r5, lr}
 23fdb08:	4604      	mov	r4, r0
 23fdb0a:	460d      	mov	r5, r1
        : BleUuid() {
 23fdb0c:	f7ff ffcc 	bl	23fdaa8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fdb10:	2300      	movs	r3, #0
}
 23fdb12:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fdb14:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fdb16:	81a5      	strh	r5, [r4, #12]
}
 23fdb18:	bd38      	pop	{r3, r4, r5, pc}

023fdb1a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fdb1a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fdb1c:	6902      	ldr	r2, [r0, #16]
 23fdb1e:	690b      	ldr	r3, [r1, #16]
 23fdb20:	429a      	cmp	r2, r3
 23fdb22:	d106      	bne.n	23fdb32 <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fdb24:	2210      	movs	r2, #16
 23fdb26:	f001 fd63 	bl	23ff5f0 <memcmp>
 23fdb2a:	fab0 f080 	clz	r0, r0
 23fdb2e:	0940      	lsrs	r0, r0, #5
}
 23fdb30:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fdb32:	2000      	movs	r0, #0
 23fdb34:	e7fc      	b.n	23fdb30 <_ZNK8particle7BleUuideqERKS0_+0x16>

023fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fdb36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fdb38:	4605      	mov	r5, r0
 23fdb3a:	4616      	mov	r6, r2
 23fdb3c:	461f      	mov	r7, r3
 23fdb3e:	460a      	mov	r2, r1
 23fdb40:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fdb44:	ab01      	add	r3, sp, #4
 23fdb46:	f7ff feb1 	bl	23fd8ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fdb4a:	f030 0402 	bics.w	r4, r0, #2
 23fdb4e:	d00c      	beq.n	23fdb6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fdb50:	1e84      	subs	r4, r0, #2
 23fdb52:	42bc      	cmp	r4, r7
 23fdb54:	bf28      	it	cs
 23fdb56:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fdb58:	b13e      	cbz	r6, 23fdb6a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fdb5a:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fdb5c:	682b      	ldr	r3, [r5, #0]
 23fdb5e:	3102      	adds	r1, #2
 23fdb60:	4622      	mov	r2, r4
 23fdb62:	4630      	mov	r0, r6
 23fdb64:	4419      	add	r1, r3
 23fdb66:	f001 fd53 	bl	23ff610 <memcpy>
}
 23fdb6a:	4620      	mov	r0, r4
 23fdb6c:	b003      	add	sp, #12
 23fdb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fdb70 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fdb70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdb72:	4613      	mov	r3, r2
 23fdb74:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fdb76:	9201      	str	r2, [sp, #4]
 23fdb78:	460a      	mov	r2, r1
 23fdb7a:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fdb7c:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fdb7e:	f7ff ffda 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fdb82:	b940      	cbnz	r0, 23fdb96 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fdb84:	4622      	mov	r2, r4
 23fdb86:	2109      	movs	r1, #9
 23fdb88:	4628      	mov	r0, r5
 23fdb8a:	9b01      	ldr	r3, [sp, #4]
}
 23fdb8c:	b003      	add	sp, #12
 23fdb8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fdb92:	f7ff bfd0 	b.w	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fdb96:	b003      	add	sp, #12
 23fdb98:	bd30      	pop	{r4, r5, pc}
	...

023fdb9c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fdb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdb9e:	460c      	mov	r4, r1
 23fdba0:	b089      	sub	sp, #36	; 0x24
    String name;
 23fdba2:	490c      	ldr	r1, [pc, #48]	; (23fdbd4 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fdba4:	4605      	mov	r5, r0
    String name;
 23fdba6:	f001 faa0 	bl	23ff0ea <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fdbaa:	221f      	movs	r2, #31
 23fdbac:	4669      	mov	r1, sp
 23fdbae:	4620      	mov	r0, r4
 23fdbb0:	f7ff ffde 	bl	23fdb70 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fdbb4:	4606      	mov	r6, r0
 23fdbb6:	b150      	cbz	r0, 23fdbce <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fdbb8:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fdbba:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fdbbc:	4628      	mov	r0, r5
 23fdbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fdbc2:	f001 faff 	bl	23ff1c4 <_ZN6String6concatEc>
 23fdbc6:	b110      	cbz	r0, 23fdbce <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fdbc8:	3701      	adds	r7, #1
 23fdbca:	42be      	cmp	r6, r7
 23fdbcc:	d1f6      	bne.n	23fdbbc <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fdbce:	4628      	mov	r0, r5
 23fdbd0:	b009      	add	sp, #36	; 0x24
 23fdbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fdbd4:	023ffb4e 	.word	0x023ffb4e

023fdbd8 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fdbd8:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fdbda:	2302      	movs	r3, #2
 23fdbdc:	2119      	movs	r1, #25
 23fdbde:	aa01      	add	r2, sp, #4
 23fdbe0:	f7ff ffa9 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fdbe4:	b108      	cbz	r0, 23fdbea <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fdbe6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fdbea:	b003      	add	sp, #12
 23fdbec:	f85d fb04 	ldr.w	pc, [sp], #4

023fdbf0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fdbf0:	b510      	push	{r4, lr}
    return data_ + size_;
 23fdbf2:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fdbf6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fdbfa:	4293      	cmp	r3, r2
 23fdbfc:	4618      	mov	r0, r3
 23fdbfe:	d005      	beq.n	23fdc0c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fdc00:	6804      	ldr	r4, [r0, #0]
 23fdc02:	3308      	adds	r3, #8
 23fdc04:	8824      	ldrh	r4, [r4, #0]
 23fdc06:	428c      	cmp	r4, r1
 23fdc08:	d1f7      	bne.n	23fdbfa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
 23fdc0a:	bd10      	pop	{r4, pc}
        return nullptr;
 23fdc0c:	2000      	movs	r0, #0
 23fdc0e:	e7fc      	b.n	23fdc0a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>

023fdc10 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fdc10:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fdc12:	2500      	movs	r5, #0
 23fdc14:	4606      	mov	r6, r0
 23fdc16:	6005      	str	r5, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fdc18:	2030      	movs	r0, #48	; 0x30
 23fdc1a:	f7fd fbd0 	bl	23fb3be <_Znwj>
	  auto __pi = ::new (__mem)
 23fdc1e:	4604      	mov	r4, r0
 23fdc20:	b198      	cbz	r0, 23fdc4a <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fdc22:	2301      	movs	r3, #1
 23fdc24:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fdc28:	4b0a      	ldr	r3, [pc, #40]	; (23fdc54 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fdc2a:	300e      	adds	r0, #14
 23fdc2c:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fdc30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fdc34:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fdc38:	f7ff ff2c 	bl	23fda94 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fdc3c:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fdc40:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fdc44:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fdc48:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fdc4a:	6074      	str	r4, [r6, #4]
 23fdc4c:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fdc4e:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fdc50:	6034      	str	r4, [r6, #0]
 23fdc52:	bd70      	pop	{r4, r5, r6, pc}
 23fdc54:	023ffcc8 	.word	0x023ffcc8

023fdc58 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
 23fdc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdc5a:	460d      	mov	r5, r1
 23fdc5c:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fdc5e:	a801      	add	r0, sp, #4
 23fdc60:	f7ff fe60 	bl	23fd924 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fdc64:	682a      	ldr	r2, [r5, #0]
 23fdc66:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fdc68:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fdc6c:	6023      	str	r3, [r4, #0]
 23fdc6e:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fdc72:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fdc74:	f7ff fe64 	bl	23fd940 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fdc78:	4620      	mov	r0, r4
 23fdc7a:	b003      	add	sp, #12
 23fdc7c:	bd30      	pop	{r4, r5, pc}

023fdc7e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fdc7e:	b530      	push	{r4, r5, lr}
 23fdc80:	4605      	mov	r5, r0
 23fdc82:	460c      	mov	r4, r1
 23fdc84:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fdc86:	a801      	add	r0, sp, #4
 23fdc88:	f7ff fe4c 	bl	23fd924 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fdc8c:	682a      	ldr	r2, [r5, #0]
 23fdc8e:	6823      	ldr	r3, [r4, #0]
 23fdc90:	8812      	ldrh	r2, [r2, #0]
 23fdc92:	881b      	ldrh	r3, [r3, #0]
 23fdc94:	429a      	cmp	r2, r3
 23fdc96:	d10d      	bne.n	23fdcb4 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fdc98:	4629      	mov	r1, r5
 23fdc9a:	a802      	add	r0, sp, #8
 23fdc9c:	f7ff ffdc 	bl	23fdc58 <_ZNK8particle13BlePeerDevice7addressEv>
 23fdca0:	4621      	mov	r1, r4
 23fdca2:	a804      	add	r0, sp, #16
 23fdca4:	f7ff ffd8 	bl	23fdc58 <_ZNK8particle13BlePeerDevice7addressEv>
 23fdca8:	a904      	add	r1, sp, #16
 23fdcaa:	a802      	add	r0, sp, #8
 23fdcac:	f7ff fe66 	bl	23fd97c <_ZNK8particle10BleAddresseqERKS0_>
 23fdcb0:	4604      	mov	r4, r0
 23fdcb2:	b900      	cbnz	r0, 23fdcb6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fdcb4:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fdcb6:	a801      	add	r0, sp, #4
 23fdcb8:	f7ff fe42 	bl	23fd940 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fdcbc:	4620      	mov	r0, r4
 23fdcbe:	b007      	add	sp, #28
 23fdcc0:	bd30      	pop	{r4, r5, pc}
	...

023fdcc4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fdcc4:	b570      	push	{r4, r5, r6, lr}
 23fdcc6:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fdcc8:	2074      	movs	r0, #116	; 0x74
 23fdcca:	f7fd fb78 	bl	23fb3be <_Znwj>
 23fdcce:	4604      	mov	r4, r0
 23fdcd0:	b1a0      	cbz	r0, 23fdcfc <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fdcd2:	2500      	movs	r5, #0
 23fdcd4:	e9c0 5500 	strd	r5, r5, [r0]
 23fdcd8:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdcdc:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fdce0:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fdce4:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fdce6:	3024      	adds	r0, #36	; 0x24
 23fdce8:	f7ff ff92 	bl	23fdc10 <_ZN8particle13BlePeerDeviceC1Ev>
 23fdcec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fdcf0:	f7ff ff8e 	bl	23fdc10 <_ZN8particle13BlePeerDeviceC1Ev>
    _Function_base() : _M_manager(nullptr) { }
 23fdcf4:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fdcf6:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fdcf8:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fdcfa:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fdcfc:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fdcfe:	b924      	cbnz	r4, 23fdd0a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fdd00:	200a      	movs	r0, #10
 23fdd02:	4a0a      	ldr	r2, [pc, #40]	; (23fdd2c <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fdd04:	490a      	ldr	r1, [pc, #40]	; (23fdd30 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fdd06:	f7fd ff21 	bl	23fbb4c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fdd0a:	2000      	movs	r0, #0
 23fdd0c:	f7fd fe76 	bl	23fb9fc <hal_ble_stack_init>
 23fdd10:	b120      	cbz	r0, 23fdd1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fdd12:	200a      	movs	r0, #10
 23fdd14:	4a05      	ldr	r2, [pc, #20]	; (23fdd2c <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fdd16:	4907      	ldr	r1, [pc, #28]	; (23fdd34 <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fdd18:	f7fd ff18 	bl	23fbb4c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fdd1c:	2200      	movs	r2, #0
 23fdd1e:	6831      	ldr	r1, [r6, #0]
 23fdd20:	4805      	ldr	r0, [pc, #20]	; (23fdd38 <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fdd22:	f7fd febf 	bl	23fbaa4 <hal_ble_set_callback_on_periph_link_events>
}
 23fdd26:	4630      	mov	r0, r6
 23fdd28:	bd70      	pop	{r4, r5, r6, pc}
 23fdd2a:	bf00      	nop
 23fdd2c:	023fbadd 	.word	0x023fbadd
 23fdd30:	023ffbe0 	.word	0x023ffbe0
 23fdd34:	023ffc25 	.word	0x023ffc25
 23fdd38:	023fe611 	.word	0x023fe611

023fdd3c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fdd3c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fdd3e:	4c0a      	ldr	r4, [pc, #40]	; (23fdd68 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fdd40:	e8d4 3f8f 	ldab	r3, [r4]
 23fdd44:	07db      	lsls	r3, r3, #31
 23fdd46:	d40c      	bmi.n	23fdd62 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fdd48:	4620      	mov	r0, r4
 23fdd4a:	f7fd fb4b 	bl	23fb3e4 <__cxa_guard_acquire>
 23fdd4e:	b140      	cbz	r0, 23fdd62 <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fdd50:	4806      	ldr	r0, [pc, #24]	; (23fdd6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fdd52:	f7ff ffb7 	bl	23fdcc4 <_ZN8particle14BleLocalDeviceC1Ev>
 23fdd56:	4620      	mov	r0, r4
 23fdd58:	f7fd fb49 	bl	23fb3ee <__cxa_guard_release>
 23fdd5c:	4804      	ldr	r0, [pc, #16]	; (23fdd70 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fdd5e:	f001 fc39 	bl	23ff5d4 <atexit>
    return instance;
}
 23fdd62:	4802      	ldr	r0, [pc, #8]	; (23fdd6c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fdd64:	bd10      	pop	{r4, pc}
 23fdd66:	bf00      	nop
 23fdd68:	1007aee4 	.word	0x1007aee4
 23fdd6c:	1007aeec 	.word	0x1007aeec
 23fdd70:	023fe8bd 	.word	0x023fe8bd

023fdd74 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fdd74:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fdd76:	2000      	movs	r0, #0
 23fdd78:	f7fd fe40 	bl	23fb9fc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fdd7c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fdd80:	bd08      	pop	{r3, pc}
	...

023fdd84 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
 23fdd84:	b570      	push	{r4, r5, r6, lr}
 23fdd86:	4604      	mov	r4, r0
 23fdd88:	460e      	mov	r6, r1
 23fdd8a:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
 23fdd8c:	3018      	adds	r0, #24
 23fdd8e:	f7ff fda2 	bl	23fd8d6 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fdd92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fdd96:	f7ff fda9 	bl	23fd8ec <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fdd9a:	2200      	movs	r2, #0
 23fdd9c:	4621      	mov	r1, r4
        targetCount_ = resultCount;
 23fdd9e:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fdda2:	4803      	ldr	r0, [pc, #12]	; (23fddb0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
 23fdda4:	f7fd fe54 	bl	23fba50 <hal_ble_gap_start_scan>
 23fdda8:	2800      	cmp	r0, #0
        return foundCount_;
 23fddaa:	bfa8      	it	ge
 23fddac:	6960      	ldrge	r0, [r4, #20]
    }
 23fddae:	bd70      	pop	{r4, r5, r6, pc}
 23fddb0:	023feccb 	.word	0x023feccb

023fddb4 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fddb4:	b510      	push	{r4, lr}
 23fddb6:	4604      	mov	r4, r0
    ::free(ptr);
 23fddb8:	6940      	ldr	r0, [r0, #20]
 23fddba:	f7fe f817 	bl	23fbdec <free>
 23fddbe:	68a0      	ldr	r0, [r4, #8]
 23fddc0:	f7fe f814 	bl	23fbdec <free>
 23fddc4:	4620      	mov	r0, r4
 23fddc6:	bd10      	pop	{r4, pc}

023fddc8 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fddc8:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23fddca:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fddce:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
 23fddd2:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fddd6:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fddda:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fddde:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23fdde2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23fdde6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23fddea:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23fddee:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23fddf2:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
 23fddf6:	6202      	str	r2, [r0, #32]
 23fddf8:	6302      	str	r2, [r0, #48]	; 0x30
 23fddfa:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
 23fddfe:	4770      	bx	lr

023fde00 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
 23fde00:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
 23fde02:	b530      	push	{r4, r5, lr}
    hal_ble_scan_params_t scanParams = {};
 23fde04:	2400      	movs	r4, #0
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
 23fde06:	b085      	sub	sp, #20
    scanParams.size = sizeof(hal_ble_scan_params_t);
 23fde08:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
 23fde0c:	2303      	movs	r3, #3
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
 23fde0e:	460d      	mov	r5, r1
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
 23fde10:	4668      	mov	r0, sp
 23fde12:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
 23fde14:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
 23fde18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23fde1c:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
 23fde1e:	f7fd fe09 	bl	23fba34 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
 23fde22:	4621      	mov	r1, r4
 23fde24:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
 23fde26:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
 23fde2a:	f7fd fdf5 	bl	23fba18 <hal_ble_gap_set_scan_parameters>
}
 23fde2e:	b005      	add	sp, #20
 23fde30:	bd30      	pop	{r4, r5, pc}

023fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fde32:	b510      	push	{r4, lr}
 23fde34:	4604      	mov	r4, r0
    ::free(ptr);
 23fde36:	6800      	ldr	r0, [r0, #0]
 23fde38:	f7fd ffd8 	bl	23fbdec <free>
}
 23fde3c:	4620      	mov	r0, r4
 23fde3e:	bd10      	pop	{r4, pc}

023fde40 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
 23fde40:	b570      	push	{r4, r5, r6, lr}
 23fde42:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fde44:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23fde46:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23fde48:	f7fd ffd0 	bl	23fbdec <free>
 23fde4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23fde4e:	f7fd ffcd 	bl	23fbdec <free>
    }
    ~BleScanFilter() = default;
 23fde52:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23fde56:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fde5a:	f7ff ffea 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23fde5e:	4628      	mov	r0, r5
 23fde60:	f7fe ff50 	bl	23fcd04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23fde64:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fde68:	f7fe fc2c 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
 23fde6c:	f104 0018 	add.w	r0, r4, #24
 23fde70:	f7fe fc28 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fde74:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fde78:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fde7c:	42ae      	cmp	r6, r5
 23fde7e:	d004      	beq.n	23fde8a <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23fde80:	4628      	mov	r0, r5
 23fde82:	f7ff ff97 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23fde86:	3524      	adds	r5, #36	; 0x24
 23fde88:	e7f8      	b.n	23fde7c <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23fde8a:	6820      	ldr	r0, [r4, #0]
 23fde8c:	f7fd ffae 	bl	23fbdec <free>
 23fde90:	4620      	mov	r0, r4
 23fde92:	bd70      	pop	{r4, r5, r6, pc}

023fde94 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fde94:	b530      	push	{r4, r5, lr}
 23fde96:	4615      	mov	r5, r2
    if (results == nullptr || resultCount == 0) {
 23fde98:	460c      	mov	r4, r1
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fde9a:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
 23fde9c:	b179      	cbz	r1, 23fdebe <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
 23fde9e:	b172      	cbz	r2, 23fdebe <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
 23fdea0:	a801      	add	r0, sp, #4
 23fdea2:	f7ff ff91 	bl	23fddc8 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
 23fdea6:	4621      	mov	r1, r4
 23fdea8:	462a      	mov	r2, r5
 23fdeaa:	a801      	add	r0, sp, #4
 23fdeac:	f7ff ff6a 	bl	23fdd84 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
 23fdeb0:	4604      	mov	r4, r0
    BleScanDelegator scanner;
 23fdeb2:	a801      	add	r0, sp, #4
 23fdeb4:	f7ff ffc4 	bl	23fde40 <_ZN8particle16BleScanDelegatorD1Ev>
}
 23fdeb8:	4620      	mov	r0, r4
 23fdeba:	b01f      	add	sp, #124	; 0x7c
 23fdebc:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fdebe:	4c01      	ldr	r4, [pc, #4]	; (23fdec4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
 23fdec0:	e7fa      	b.n	23fdeb8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
 23fdec2:	bf00      	nop
 23fdec4:	fffffef2 	.word	0xfffffef2

023fdec8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fdec8:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fdeca:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fdecc:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fdece:	6843      	ldr	r3, [r0, #4]
 23fded0:	db02      	blt.n	23fded8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fded2:	1862      	adds	r2, r4, r1
 23fded4:	429a      	cmp	r2, r3
 23fded6:	dd00      	ble.n	23fdeda <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fded8:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fdeda:	682a      	ldr	r2, [r5, #0]
 23fdedc:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fdede:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fdee0:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdee2:	1a52      	subs	r2, r2, r1
 23fdee4:	f001 fba1 	bl	23ff62a <memmove>
    size_ -= n;
 23fdee8:	686a      	ldr	r2, [r5, #4]
 23fdeea:	1b12      	subs	r2, r2, r4
 23fdeec:	606a      	str	r2, [r5, #4]
}
 23fdeee:	bd38      	pop	{r3, r4, r5, pc}

023fdef0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fdef0:	680b      	ldr	r3, [r1, #0]
 23fdef2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fdef4:	b113      	cbz	r3, 23fdefc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fdef6:	685a      	ldr	r2, [r3, #4]
 23fdef8:	3201      	adds	r2, #1
 23fdefa:	605a      	str	r2, [r3, #4]
      }
 23fdefc:	4770      	bx	lr

023fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fdefe:	b510      	push	{r4, lr}
 23fdf00:	4604      	mov	r4, r0
 23fdf02:	f851 3b04 	ldr.w	r3, [r1], #4
 23fdf06:	f840 3b04 	str.w	r3, [r0], #4
 23fdf0a:	f7ff fff1 	bl	23fdef0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fdf0e:	4620      	mov	r0, r4
 23fdf10:	bd10      	pop	{r4, pc}

023fdf12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdf12:	b570      	push	{r4, r5, r6, lr}
 23fdf14:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdf16:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fdf1a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fdf1e:	42ae      	cmp	r6, r5
 23fdf20:	d004      	beq.n	23fdf2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
 23fdf22:	1d28      	adds	r0, r5, #4
 23fdf24:	f7fe fac8 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdf28:	3508      	adds	r5, #8
 23fdf2a:	e7f8      	b.n	23fdf1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fdf2c:	6820      	ldr	r0, [r4, #0]
 23fdf2e:	f7fd ff5d 	bl	23fbdec <free>
}
 23fdf32:	4620      	mov	r0, r4
 23fdf34:	bd70      	pop	{r4, r5, r6, pc}

023fdf36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fdf36:	b570      	push	{r4, r5, r6, lr}
 23fdf38:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fdf3a:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fdf3e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fdf42:	42ae      	cmp	r6, r5
 23fdf44:	d004      	beq.n	23fdf50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fdf46:	1d28      	adds	r0, r5, #4
 23fdf48:	f7fe fab6 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdf4c:	3508      	adds	r5, #8
 23fdf4e:	e7f8      	b.n	23fdf42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fdf50:	6820      	ldr	r0, [r4, #0]
 23fdf52:	f7fd ff4b 	bl	23fbdec <free>
}
 23fdf56:	4620      	mov	r0, r4
 23fdf58:	bd70      	pop	{r4, r5, r6, pc}

023fdf5a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fdf5a:	b510      	push	{r4, lr}
 23fdf5c:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fdf5e:	3024      	adds	r0, #36	; 0x24
 23fdf60:	f7ff ffe9 	bl	23fdf36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fdf64:	f104 0018 	add.w	r0, r4, #24
 23fdf68:	f7ff ffd3 	bl	23fdf12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fdf6c:	bd10      	pop	{r4, pc}

023fdf6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fdf6e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fdf70:	b510      	push	{r4, lr}
      if (_M_empty())
 23fdf72:	b90a      	cbnz	r2, 23fdf78 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fdf74:	f001 fa18 	bl	23ff3a8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdf78:	68c3      	ldr	r3, [r0, #12]
    }
 23fdf7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdf7e:	4718      	bx	r3

023fdf80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fdf80:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdf82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fdf86:	e9c0 3300 	strd	r3, r3, [r0]
 23fdf8a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fdf8c:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdf90:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fdf92:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdf94:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fdf96:	dd4a      	ble.n	23fe02e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fdf98:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fdf9c:	f7fd ff18 	bl	23fbdd0 <malloc>
            if (!d) {
 23fdfa0:	4606      	mov	r6, r0
 23fdfa2:	2800      	cmp	r0, #0
 23fdfa4:	d043      	beq.n	23fe02e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fdfa6:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fdfaa:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fdfac:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fdfb0:	d916      	bls.n	23fdfe0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fdfb2:	4550      	cmp	r0, sl
 23fdfb4:	d215      	bcs.n	23fdfe2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fdfb6:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fdfba:	f1a4 0910 	sub.w	r9, r4, #16
 23fdfbe:	ebaa 0404 	sub.w	r4, sl, r4
 23fdfc2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fdfc4:	45d1      	cmp	r9, sl
 23fdfc6:	d01d      	beq.n	23fe004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fdfc8:	b11c      	cbz	r4, 23fdfd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fdfca:	4651      	mov	r1, sl
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	f001 f8bd 	bl	23ff14c <_ZN6StringC1EOS_>
                end->~T();
 23fdfd2:	4650      	mov	r0, sl
 23fdfd4:	f001 f83e 	bl	23ff054 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fdfd8:	f1aa 0a10 	sub.w	sl, sl, #16
 23fdfdc:	3c10      	subs	r4, #16
 23fdfde:	e7f1      	b.n	23fdfc4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fdfe0:	d010      	beq.n	23fe004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fdfe2:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fdfe4:	45a2      	cmp	sl, r4
 23fdfe6:	d00d      	beq.n	23fe004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fdfe8:	f1b9 0f00 	cmp.w	r9, #0
 23fdfec:	d003      	beq.n	23fdff6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fdfee:	4621      	mov	r1, r4
 23fdff0:	4648      	mov	r0, r9
 23fdff2:	f001 f8ab 	bl	23ff14c <_ZN6StringC1EOS_>
                p->~T();
 23fdff6:	4620      	mov	r0, r4
 23fdff8:	f001 f82c 	bl	23ff054 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fdffc:	3410      	adds	r4, #16
 23fdffe:	f109 0910 	add.w	r9, r9, #16
 23fe002:	e7ef      	b.n	23fdfe4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fe004:	6828      	ldr	r0, [r5, #0]
 23fe006:	f7fd fef1 	bl	23fbdec <free>
        capacity_ = n;
 23fe00a:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fe00e:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe010:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fe014:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fe018:	45a0      	cmp	r8, r4
 23fe01a:	d006      	beq.n	23fe02a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fe01c:	4621      	mov	r1, r4
 23fe01e:	4630      	mov	r0, r6
 23fe020:	f001 f8ae 	bl	23ff180 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fe024:	3410      	adds	r4, #16
 23fe026:	3610      	adds	r6, #16
 23fe028:	e7f6      	b.n	23fe018 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fe02a:	687b      	ldr	r3, [r7, #4]
 23fe02c:	606b      	str	r3, [r5, #4]
}
 23fe02e:	4628      	mov	r0, r5
 23fe030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fe034 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
 23fe034:	b530      	push	{r4, r5, lr}
 23fe036:	b08d      	sub	sp, #52	; 0x34
 23fe038:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fe03a:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fe03e:	a801      	add	r0, sp, #4
 23fe040:	f7ff ff9e 	bl	23fdf80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fe044:	9b02      	ldr	r3, [sp, #8]
 23fe046:	2b00      	cmp	r3, #0
 23fe048:	dd2f      	ble.n	23fe0aa <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fe04a:	f104 0114 	add.w	r1, r4, #20
 23fe04e:	a804      	add	r0, sp, #16
 23fe050:	f7ff fda4 	bl	23fdb9c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fe054:	f104 0108 	add.w	r1, r4, #8
 23fe058:	a808      	add	r0, sp, #32
 23fe05a:	f7ff fd9f 	bl	23fdb9c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fe05e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fe060:	9b06      	ldr	r3, [sp, #24]
 23fe062:	4313      	orrs	r3, r2
 23fe064:	d01f      	beq.n	23fe0a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fe066:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fe06a:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
 23fe06e:	42ac      	cmp	r4, r5
 23fe070:	d019      	beq.n	23fe0a6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fe072:	4620      	mov	r0, r4
 23fe074:	a904      	add	r1, sp, #16
 23fe076:	f001 f8c7 	bl	23ff208 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fe07a:	b160      	cbz	r0, 23fe096 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fe07c:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fe07e:	a808      	add	r0, sp, #32
 23fe080:	f000 ffe8 	bl	23ff054 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fe084:	a804      	add	r0, sp, #16
 23fe086:	f000 ffe5 	bl	23ff054 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fe08a:	a801      	add	r0, sp, #4
 23fe08c:	f7fe fe3a 	bl	23fcd04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
 23fe090:	4620      	mov	r0, r4
 23fe092:	b00d      	add	sp, #52	; 0x34
 23fe094:	bd30      	pop	{r4, r5, pc}
 23fe096:	4620      	mov	r0, r4
 23fe098:	a908      	add	r1, sp, #32
 23fe09a:	f001 f8b5 	bl	23ff208 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fe09e:	3410      	adds	r4, #16
 23fe0a0:	2800      	cmp	r0, #0
 23fe0a2:	d0e4      	beq.n	23fe06e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fe0a4:	e7ea      	b.n	23fe07c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fe0a6:	2400      	movs	r4, #0
 23fe0a8:	e7e9      	b.n	23fe07e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fe0aa:	2401      	movs	r4, #1
 23fe0ac:	e7ed      	b.n	23fe08a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fe0ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23fe0b0:	2300      	movs	r3, #0
 23fe0b2:	e9c0 3300 	strd	r3, r3, [r0]
 23fe0b6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe0b8:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe0ba:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe0bc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe0be:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe0c0:	dd40      	ble.n	23fe144 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23fe0c2:	00f8      	lsls	r0, r7, #3
 23fe0c4:	f7fd fe84 	bl	23fbdd0 <malloc>
            if (!d) {
 23fe0c8:	4604      	mov	r4, r0
 23fe0ca:	b3d8      	cbz	r0, 23fe144 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23fe0cc:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23fe0d0:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fe0d2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23fe0d6:	d910      	bls.n	23fe0fa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23fe0d8:	429c      	cmp	r4, r3
 23fe0da:	d20f      	bcs.n	23fe0fc <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23fe0dc:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23fe0de:	1a1a      	subs	r2, r3, r0
 23fe0e0:	f1a0 0c08 	sub.w	ip, r0, #8
 23fe0e4:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23fe0e6:	459c      	cmp	ip, r3
 23fe0e8:	d018      	beq.n	23fe11c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23fe0ea:	b11a      	cbz	r2, 23fe0f4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23fe0ec:	6819      	ldr	r1, [r3, #0]
 23fe0ee:	6011      	str	r1, [r2, #0]
 23fe0f0:	6859      	ldr	r1, [r3, #4]
 23fe0f2:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23fe0f4:	3b08      	subs	r3, #8
 23fe0f6:	3a08      	subs	r2, #8
 23fe0f8:	e7f5      	b.n	23fe0e6 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23fe0fa:	d00f      	beq.n	23fe11c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23fe0fc:	4601      	mov	r1, r0
 23fe0fe:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23fe100:	428b      	cmp	r3, r1
 23fe102:	d00b      	beq.n	23fe11c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23fe104:	b13a      	cbz	r2, 23fe116 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23fe106:	f8d1 c000 	ldr.w	ip, [r1]
 23fe10a:	f8c2 c000 	str.w	ip, [r2]
 23fe10e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23fe112:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23fe116:	3108      	adds	r1, #8
 23fe118:	3208      	adds	r2, #8
 23fe11a:	e7f1      	b.n	23fe100 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23fe11c:	f7fd fe66 	bl	23fbdec <free>
        data_ = d;
 23fe120:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe122:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe124:	e9d6 3100 	ldrd	r3, r1, [r6]
 23fe128:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fe12c:	4298      	cmp	r0, r3
 23fe12e:	d008      	beq.n	23fe142 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23fe130:	681a      	ldr	r2, [r3, #0]
 23fe132:	3408      	adds	r4, #8
 23fe134:	f844 2c08 	str.w	r2, [r4, #-8]
 23fe138:	685a      	ldr	r2, [r3, #4]
 23fe13a:	3308      	adds	r3, #8
 23fe13c:	f844 2c04 	str.w	r2, [r4, #-4]
 23fe140:	e7f4      	b.n	23fe12c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23fe142:	6069      	str	r1, [r5, #4]
}
 23fe144:	4628      	mov	r0, r5
 23fe146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe148 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe148:	b570      	push	{r4, r5, r6, lr}
 23fe14a:	4604      	mov	r4, r0
        capacity_(0) {
 23fe14c:	2000      	movs	r0, #0
 23fe14e:	e9c4 0000 	strd	r0, r0, [r4]
 23fe152:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe154:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe156:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe158:	4286      	cmp	r6, r0
 23fe15a:	dd12      	ble.n	23fe182 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fe15c:	0071      	lsls	r1, r6, #1
 23fe15e:	f7fd fe53 	bl	23fbe08 <realloc>
            if (!d) {
 23fe162:	b170      	cbz	r0, 23fe182 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fe164:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe166:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe168:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fe16c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fe170:	429a      	cmp	r2, r3
 23fe172:	d004      	beq.n	23fe17e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fe174:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fe178:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fe17c:	e7f8      	b.n	23fe170 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fe17e:	686b      	ldr	r3, [r5, #4]
 23fe180:	6063      	str	r3, [r4, #4]
}
 23fe182:	4620      	mov	r0, r4
 23fe184:	bd70      	pop	{r4, r5, r6, pc}

023fe186 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fe186:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fe188:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fe18a:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fe18c:	b923      	cbnz	r3, 23fe198 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
 23fe18e:	6803      	ldr	r3, [r0, #0]
 23fe190:	6818      	ldr	r0, [r3, #0]
 23fe192:	b108      	cbz	r0, 23fe198 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fe194:	f7fd fe2a 	bl	23fbdec <free>
            func_();
        }
    }
 23fe198:	4620      	mov	r0, r4
 23fe19a:	bd10      	pop	{r4, pc}

023fe19c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fe19c:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fe19e:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fe1a0:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fe1a2:	b923      	cbnz	r3, 23fe1ae <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
 23fe1a4:	6803      	ldr	r3, [r0, #0]
 23fe1a6:	6818      	ldr	r0, [r3, #0]
 23fe1a8:	b108      	cbz	r0, 23fe1ae <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fe1aa:	f7fd fe1f 	bl	23fbdec <free>
    }
 23fe1ae:	4620      	mov	r0, r4
 23fe1b0:	bd10      	pop	{r4, pc}
	...

023fe1b4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fe1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fe1b8:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fe1bc:	460f      	mov	r7, r1
 23fe1be:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fe1c0:	f1b8 0f00 	cmp.w	r8, #0
 23fe1c4:	d072      	beq.n	23fe2ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fe1c6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fe1c8:	2d00      	cmp	r5, #0
 23fe1ca:	d06f      	beq.n	23fe2ac <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fe1cc:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fe1d0:	231f      	movs	r3, #31
 23fe1d2:	2200      	movs	r2, #0
 23fe1d4:	21ff      	movs	r1, #255	; 0xff
 23fe1d6:	4648      	mov	r0, r9
 23fe1d8:	f7ff fcad 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fe1dc:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23fe1de:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fe1e0:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fe1e2:	2200      	movs	r2, #0
 23fe1e4:	4619      	mov	r1, r3
 23fe1e6:	4638      	mov	r0, r7
 23fe1e8:	f7ff fca5 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fe1ec:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fe1ee:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fe1f0:	d006      	beq.n	23fe200 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fe1f2:	42ae      	cmp	r6, r5
 23fe1f4:	d030      	beq.n	23fe258 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fe1f6:	2400      	movs	r4, #0
    }
 23fe1f8:	4620      	mov	r0, r4
 23fe1fa:	b00f      	add	sp, #60	; 0x3c
 23fe1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fe200:	4620      	mov	r0, r4
 23fe202:	f7fd fde5 	bl	23fbdd0 <malloc>
            dismissed_(false) {
 23fe206:	ab03      	add	r3, sp, #12
 23fe208:	9304      	str	r3, [sp, #16]
 23fe20a:	2300      	movs	r3, #0
 23fe20c:	4604      	mov	r4, r0
 23fe20e:	9003      	str	r0, [sp, #12]
 23fe210:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fe214:	b970      	cbnz	r0, 23fe234 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fe216:	2320      	movs	r3, #32
 23fe218:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fe21c:	4b24      	ldr	r3, [pc, #144]	; (23fe2b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fe21e:	4925      	ldr	r1, [pc, #148]	; (23fe2b4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fe220:	9300      	str	r3, [sp, #0]
 23fe222:	aa06      	add	r2, sp, #24
 23fe224:	4603      	mov	r3, r0
 23fe226:	2032      	movs	r0, #50	; 0x32
 23fe228:	f7fd fc9e 	bl	23fbb68 <log_message>
                    return false;
 23fe22c:	a804      	add	r0, sp, #16
 23fe22e:	f7ff ffaa 	bl	23fe186 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fe232:	e7e1      	b.n	23fe1f8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fe234:	4602      	mov	r2, r0
 23fe236:	21ff      	movs	r1, #255	; 0xff
 23fe238:	462b      	mov	r3, r5
 23fe23a:	4648      	mov	r0, r9
 23fe23c:	f7ff fc7b 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fe240:	462a      	mov	r2, r5
 23fe242:	4641      	mov	r1, r8
 23fe244:	9803      	ldr	r0, [sp, #12]
 23fe246:	f001 f9d3 	bl	23ff5f0 <memcmp>
 23fe24a:	b118      	cbz	r0, 23fe254 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fe24c:	a804      	add	r0, sp, #16
 23fe24e:	f7ff ff9a 	bl	23fe186 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fe252:	e7ce      	b.n	23fe1f2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fe254:	2401      	movs	r4, #1
 23fe256:	e7e9      	b.n	23fe22c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fe258:	4628      	mov	r0, r5
 23fe25a:	f7fd fdb9 	bl	23fbdd0 <malloc>
 23fe25e:	2400      	movs	r4, #0
 23fe260:	ab03      	add	r3, sp, #12
 23fe262:	4606      	mov	r6, r0
 23fe264:	9003      	str	r0, [sp, #12]
 23fe266:	9304      	str	r3, [sp, #16]
 23fe268:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fe26c:	b978      	cbnz	r0, 23fe28e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fe26e:	2320      	movs	r3, #32
 23fe270:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fe274:	4b0e      	ldr	r3, [pc, #56]	; (23fe2b0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fe276:	490f      	ldr	r1, [pc, #60]	; (23fe2b4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fe278:	9300      	str	r3, [sp, #0]
 23fe27a:	aa06      	add	r2, sp, #24
 23fe27c:	4603      	mov	r3, r0
 23fe27e:	2032      	movs	r0, #50	; 0x32
 23fe280:	f7fd fc72 	bl	23fbb68 <log_message>
                    return false;
 23fe284:	4634      	mov	r4, r6
 23fe286:	a804      	add	r0, sp, #16
 23fe288:	f7ff ff88 	bl	23fe19c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fe28c:	e7b4      	b.n	23fe1f8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fe28e:	4602      	mov	r2, r0
 23fe290:	21ff      	movs	r1, #255	; 0xff
 23fe292:	462b      	mov	r3, r5
 23fe294:	4638      	mov	r0, r7
 23fe296:	f7ff fc4e 	bl	23fdb36 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fe29a:	462a      	mov	r2, r5
 23fe29c:	4641      	mov	r1, r8
 23fe29e:	9803      	ldr	r0, [sp, #12]
 23fe2a0:	f001 f9a6 	bl	23ff5f0 <memcmp>
 23fe2a4:	2800      	cmp	r0, #0
 23fe2a6:	d1ee      	bne.n	23fe286 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fe2a8:	2401      	movs	r4, #1
 23fe2aa:	e7ec      	b.n	23fe286 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fe2ac:	2401      	movs	r4, #1
 23fe2ae:	e7a3      	b.n	23fe1f8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fe2b0:	023ffc67 	.word	0x023ffc67
 23fe2b4:	023ffbf7 	.word	0x023ffbf7

023fe2b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fe2b8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fe2ba:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fe2bc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe2be:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe2c0:	dd03      	ble.n	23fe2ca <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fe2c2:	f7fd fda1 	bl	23fbe08 <realloc>
            if (!d) {
 23fe2c6:	b918      	cbnz	r0, 23fe2d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fe2c8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fe2ca:	f7fd fd8f 	bl	23fbdec <free>
        T* d = nullptr;
 23fe2ce:	2000      	movs	r0, #0
        data_ = d;
 23fe2d0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe2d2:	60a5      	str	r5, [r4, #8]
        return true;
 23fe2d4:	2001      	movs	r0, #1
 23fe2d6:	e7f7      	b.n	23fe2c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fe2d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fe2d8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fe2da:	6883      	ldr	r3, [r0, #8]
 23fe2dc:	428b      	cmp	r3, r1
 23fe2de:	da02      	bge.n	23fe2e6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fe2e0:	f7ff ffea 	bl	23fe2b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fe2e4:	bd08      	pop	{r3, pc}
    return true;
 23fe2e6:	2001      	movs	r0, #1
 23fe2e8:	e7fc      	b.n	23fe2e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2ea:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fe2ec:	2300      	movs	r3, #0
 23fe2ee:	e9c0 3300 	strd	r3, r3, [r0]
 23fe2f2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2f4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe2f6:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe2f8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe2fa:	4299      	cmp	r1, r3
 23fe2fc:	dd10      	ble.n	23fe320 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fe2fe:	f7ff ffdb 	bl	23fe2b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe302:	b168      	cbz	r0, 23fe320 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe304:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fe308:	6822      	ldr	r2, [r4, #0]
 23fe30a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fe30c:	4299      	cmp	r1, r3
 23fe30e:	d005      	beq.n	23fe31c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fe310:	b10a      	cbz	r2, 23fe316 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fe312:	7818      	ldrb	r0, [r3, #0]
 23fe314:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fe316:	3301      	adds	r3, #1
 23fe318:	3201      	adds	r2, #1
 23fe31a:	e7f7      	b.n	23fe30c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fe31c:	686b      	ldr	r3, [r5, #4]
 23fe31e:	6063      	str	r3, [r4, #4]
}
 23fe320:	4620      	mov	r0, r4
 23fe322:	bd38      	pop	{r3, r4, r5, pc}

023fe324 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fe324:	b538      	push	{r3, r4, r5, lr}
 23fe326:	4604      	mov	r4, r0
 23fe328:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fe32a:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fe32c:	3008      	adds	r0, #8
 23fe32e:	f840 3c08 	str.w	r3, [r0, #-8]
 23fe332:	684b      	ldr	r3, [r1, #4]
 23fe334:	3108      	adds	r1, #8
 23fe336:	f840 3c04 	str.w	r3, [r0, #-4]
 23fe33a:	f7ff ffd6 	bl	23fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fe33e:	f105 0114 	add.w	r1, r5, #20
 23fe342:	f104 0014 	add.w	r0, r4, #20
 23fe346:	f7ff ffd0 	bl	23fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fe34a:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fe34e:	4620      	mov	r0, r4
 23fe350:	f884 3020 	strb.w	r3, [r4, #32]
 23fe354:	bd38      	pop	{r3, r4, r5, pc}

023fe356 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fe356:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe358:	4604      	mov	r4, r0
 23fe35a:	a801      	add	r0, sp, #4
 23fe35c:	f7ff ffc5 	bl	23fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fe360:	9b01      	ldr	r3, [sp, #4]
 23fe362:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe364:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe366:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe368:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe36a:	6062      	str	r2, [r4, #4]
 23fe36c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe36e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe370:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe372:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe374:	9001      	str	r0, [sp, #4]
 23fe376:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fe378:	f7fd fd38 	bl	23fbdec <free>
 23fe37c:	b004      	add	sp, #16
 23fe37e:	bd10      	pop	{r4, pc}

023fe380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe384:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe386:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe388:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe38a:	4419      	add	r1, r3
 23fe38c:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe38e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe390:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fe392:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe394:	dc12      	bgt.n	23fe3bc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fe396:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe398:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe39a:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe39c:	4631      	mov	r1, r6
 23fe39e:	1bd2      	subs	r2, r2, r7
 23fe3a0:	1970      	adds	r0, r6, r5
 23fe3a2:	f001 f942 	bl	23ff62a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fe3a6:	462a      	mov	r2, r5
 23fe3a8:	4641      	mov	r1, r8
 23fe3aa:	4630      	mov	r0, r6
 23fe3ac:	f001 f930 	bl	23ff610 <memcpy>
    return true;
 23fe3b0:	2001      	movs	r0, #1
    size_ += n;
 23fe3b2:	6863      	ldr	r3, [r4, #4]
 23fe3b4:	442b      	add	r3, r5
 23fe3b6:	6063      	str	r3, [r4, #4]
}
 23fe3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe3bc:	f7ff ff7c 	bl	23fe2b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe3c0:	2800      	cmp	r0, #0
 23fe3c2:	d1e8      	bne.n	23fe396 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fe3c4:	e7f8      	b.n	23fe3b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fe3c6 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fe3c6:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fe3c8:	460a      	mov	r2, r1
 23fe3ca:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fe3cc:	b510      	push	{r4, lr}
 23fe3ce:	4604      	mov	r4, r0
    size_ = 0;
 23fe3d0:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fe3d2:	b102      	cbz	r2, 23fe3d6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fe3d4:	b90b      	cbnz	r3, 23fe3da <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fe3d6:	2000      	movs	r0, #0
}
 23fe3d8:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fe3da:	2bff      	cmp	r3, #255	; 0xff
 23fe3dc:	bf28      	it	cs
 23fe3de:	23ff      	movcs	r3, #255	; 0xff
 23fe3e0:	f7ff ffce 	bl	23fe380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fe3e4:	2800      	cmp	r0, #0
 23fe3e6:	d0f7      	beq.n	23fe3d8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fe3e8:	6860      	ldr	r0, [r4, #4]
 23fe3ea:	e7f5      	b.n	23fe3d8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe3ee:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3f0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fe3f4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe3f6:	4604      	mov	r4, r0
 23fe3f8:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3fa:	da0b      	bge.n	23fe414 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fe3fc:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe3fe:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe400:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe402:	1b52      	subs	r2, r2, r5
 23fe404:	1c48      	adds	r0, r1, #1
 23fe406:	f001 f910 	bl	23ff62a <memmove>
    new(p) T(std::move(value));
 23fe40a:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fe40c:	6863      	ldr	r3, [r4, #4]
 23fe40e:	3301      	adds	r3, #1
 23fe410:	6063      	str	r3, [r4, #4]
}
 23fe412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe414:	3101      	adds	r1, #1
 23fe416:	f7ff ff4f 	bl	23fe2b8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fe41a:	2800      	cmp	r0, #0
 23fe41c:	d1ee      	bne.n	23fe3fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fe41e:	e7f8      	b.n	23fe412 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fe420 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe420:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fe422:	6841      	ldr	r1, [r0, #4]
 23fe424:	f7ff bfe2 	b.w	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fe428 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fe42c:	4604      	mov	r4, r0
 23fe42e:	461d      	mov	r5, r3
 23fe430:	460f      	mov	r7, r1
 23fe432:	ab01      	add	r3, sp, #4
 23fe434:	4690      	mov	r8, r2
 23fe436:	460a      	mov	r2, r1
 23fe438:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe43c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fe440:	f7ff fa34 	bl	23fd8ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fe444:	1cae      	adds	r6, r5, #2
 23fe446:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fe448:	6863      	ldr	r3, [r4, #4]
 23fe44a:	f1b9 0f00 	cmp.w	r9, #0
 23fe44e:	d126      	bne.n	23fe49e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fe450:	b328      	cbz	r0, 23fe49e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe452:	4433      	add	r3, r6
 23fe454:	1a1b      	subs	r3, r3, r0
 23fe456:	2bff      	cmp	r3, #255	; 0xff
 23fe458:	d809      	bhi.n	23fe46e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fe45a:	4620      	mov	r0, r4
 23fe45c:	9901      	ldr	r1, [sp, #4]
 23fe45e:	f7ff fd33 	bl	23fdec8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe462:	6861      	ldr	r1, [r4, #4]
 23fe464:	4620      	mov	r0, r4
 23fe466:	4431      	add	r1, r6
 23fe468:	f7ff ff36 	bl	23fe2d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe46c:	b918      	cbnz	r0, 23fe476 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fe46e:	6860      	ldr	r0, [r4, #4]
}
 23fe470:	b003      	add	sp, #12
 23fe472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fe476:	1c6a      	adds	r2, r5, #1
 23fe478:	4620      	mov	r0, r4
 23fe47a:	9901      	ldr	r1, [sp, #4]
 23fe47c:	b2d2      	uxtb	r2, r2
 23fe47e:	f7ff ffb5 	bl	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fe482:	9901      	ldr	r1, [sp, #4]
 23fe484:	463a      	mov	r2, r7
 23fe486:	3101      	adds	r1, #1
 23fe488:	4620      	mov	r0, r4
 23fe48a:	f7ff ffaf 	bl	23fe3ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fe48e:	462b      	mov	r3, r5
 23fe490:	4642      	mov	r2, r8
 23fe492:	9901      	ldr	r1, [sp, #4]
 23fe494:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fe496:	4620      	mov	r0, r4
 23fe498:	f7ff ff72 	bl	23fe380 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fe49c:	e7e7      	b.n	23fe46e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fe49e:	18f1      	adds	r1, r6, r3
 23fe4a0:	29ff      	cmp	r1, #255	; 0xff
 23fe4a2:	d8e4      	bhi.n	23fe46e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fe4a4:	4620      	mov	r0, r4
 23fe4a6:	f7ff ff17 	bl	23fe2d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fe4aa:	2800      	cmp	r0, #0
 23fe4ac:	d0df      	beq.n	23fe46e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fe4ae:	1c69      	adds	r1, r5, #1
 23fe4b0:	4620      	mov	r0, r4
 23fe4b2:	b2c9      	uxtb	r1, r1
 23fe4b4:	f7ff ffb4 	bl	23fe420 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fe4b8:	4639      	mov	r1, r7
 23fe4ba:	4620      	mov	r0, r4
 23fe4bc:	f7ff ffb0 	bl	23fe420 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fe4c0:	462b      	mov	r3, r5
 23fe4c2:	4642      	mov	r2, r8
 23fe4c4:	6861      	ldr	r1, [r4, #4]
 23fe4c6:	e7e6      	b.n	23fe496 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fe4c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fe4c8:	b430      	push	{r4, r5}
 23fe4ca:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fe4ce:	b11a      	cbz	r2, 23fe4d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fe4d0:	9502      	str	r5, [sp, #8]
}
 23fe4d2:	bc30      	pop	{r4, r5}
 23fe4d4:	f7ff bfa8 	b.w	23fe428 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fe4d8:	6840      	ldr	r0, [r0, #4]
}
 23fe4da:	bc30      	pop	{r4, r5}
 23fe4dc:	4770      	bx	lr

023fe4de <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fe4de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fe4e0:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe4e2:	2206      	movs	r2, #6
 23fe4e4:	e9c0 3300 	strd	r3, r3, [r0]
 23fe4e8:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe4ea:	9300      	str	r3, [sp, #0]
 23fe4ec:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fe4ee:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fe4f0:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fe4f4:	4619      	mov	r1, r3
 23fe4f6:	f10d 020f 	add.w	r2, sp, #15
 23fe4fa:	f7ff ffe5 	bl	23fe4c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fe4fe:	4620      	mov	r0, r4
 23fe500:	b004      	add	sp, #16
 23fe502:	bd10      	pop	{r4, pc}

023fe504 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe504:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe508:	4604      	mov	r4, r0
 23fe50a:	460d      	mov	r5, r1
 23fe50c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe50e:	d914      	bls.n	23fe53a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe510:	4290      	cmp	r0, r2
 23fe512:	d213      	bcs.n	23fe53c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe514:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe518:	1a75      	subs	r5, r6, r1
 23fe51a:	f1a1 0708 	sub.w	r7, r1, #8
 23fe51e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe520:	42b7      	cmp	r7, r6
 23fe522:	d018      	beq.n	23fe556 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe524:	b11c      	cbz	r4, 23fe52e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe526:	4631      	mov	r1, r6
 23fe528:	4620      	mov	r0, r4
 23fe52a:	f7ff fce8 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fe52e:	1d30      	adds	r0, r6, #4
 23fe530:	f7fd ffc2 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe534:	3e08      	subs	r6, #8
 23fe536:	3c08      	subs	r4, #8
 23fe538:	e7f2      	b.n	23fe520 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe53a:	d00c      	beq.n	23fe556 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe53c:	42b5      	cmp	r5, r6
 23fe53e:	d00a      	beq.n	23fe556 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe540:	b11c      	cbz	r4, 23fe54a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe542:	4629      	mov	r1, r5
 23fe544:	4620      	mov	r0, r4
 23fe546:	f7ff fcda 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe54a:	1d28      	adds	r0, r5, #4
 23fe54c:	f7fd ffb4 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe550:	3508      	adds	r5, #8
 23fe552:	3408      	adds	r4, #8
 23fe554:	e7f2      	b.n	23fe53c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fe55a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe55c:	6846      	ldr	r6, [r0, #4]
 23fe55e:	4668      	mov	r0, sp
 23fe560:	f7ff fccd 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe564:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fe568:	429f      	cmp	r7, r3
 23fe56a:	db12      	blt.n	23fe592 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fe56c:	3701      	adds	r7, #1
        if (n > 0) {
 23fe56e:	2f00      	cmp	r7, #0
 23fe570:	dd29      	ble.n	23fe5c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fe572:	00f8      	lsls	r0, r7, #3
 23fe574:	f7fd fc2c 	bl	23fbdd0 <malloc>
            if (!d) {
 23fe578:	4605      	mov	r5, r0
 23fe57a:	b1f0      	cbz	r0, 23fe5ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fe57c:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fe580:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe584:	f7ff ffbe 	bl	23fe504 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe588:	6820      	ldr	r0, [r4, #0]
 23fe58a:	f7fd fc2f 	bl	23fbdec <free>
        data_ = d;
 23fe58e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fe590:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe592:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe594:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe596:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fe59a:	4631      	mov	r1, r6
 23fe59c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe5a0:	f106 0008 	add.w	r0, r6, #8
 23fe5a4:	f7ff ffae 	bl	23fe504 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe5a8:	b11e      	cbz	r6, 23fe5b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fe5aa:	4669      	mov	r1, sp
 23fe5ac:	4630      	mov	r0, r6
 23fe5ae:	f7ff fca6 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fe5b2:	2501      	movs	r5, #1
    ++size_;
 23fe5b4:	6863      	ldr	r3, [r4, #4]
 23fe5b6:	3301      	adds	r3, #1
 23fe5b8:	6063      	str	r3, [r4, #4]
 23fe5ba:	a801      	add	r0, sp, #4
 23fe5bc:	f7fd ff7c 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe5c0:	4628      	mov	r0, r5
 23fe5c2:	b003      	add	sp, #12
 23fe5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fe5c6:	2500      	movs	r5, #0
 23fe5c8:	e7de      	b.n	23fe588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fe5ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe5cc:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fe5ce:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe5d2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fe5d4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fe5d8:	42a6      	cmp	r6, r4
 23fe5da:	d005      	beq.n	23fe5e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fe5dc:	4639      	mov	r1, r7
 23fe5de:	4620      	mov	r0, r4
 23fe5e0:	f7ff fb4d 	bl	23fdc7e <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fe5e4:	b108      	cbz	r0, 23fe5ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fe5e6:	b914      	cbnz	r4, 23fe5ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fe5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fe5ea:	3408      	adds	r4, #8
 23fe5ec:	e7f4      	b.n	23fe5d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fe5ee:	1d20      	adds	r0, r4, #4
 23fe5f0:	f7fd ff62 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fe5f4:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fe5f8:	4620      	mov	r0, r4
 23fe5fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe5fe:	f104 0108 	add.w	r1, r4, #8
 23fe602:	f7ff ff7f 	bl	23fe504 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fe606:	686b      	ldr	r3, [r5, #4]
 23fe608:	3b01      	subs	r3, #1
 23fe60a:	606b      	str	r3, [r5, #4]
    return true;
 23fe60c:	e7ec      	b.n	23fe5e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fe610 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fe610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe614:	4605      	mov	r5, r0
 23fe616:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23fe618:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fe61a:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fe61c:	f7ff f982 	bl	23fd924 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fe620:	682e      	ldr	r6, [r5, #0]
 23fe622:	1ef3      	subs	r3, r6, #3
 23fe624:	2b0d      	cmp	r3, #13
 23fe626:	d86a      	bhi.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe628:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fe62c:	0078000e 	.word	0x0078000e
 23fe630:	00fc0069 	.word	0x00fc0069
 23fe634:	00690069 	.word	0x00690069
 23fe638:	00690069 	.word	0x00690069
 23fe63c:	00c60069 	.word	0x00c60069
 23fe640:	00c600c6 	.word	0x00c600c6
 23fe644:	00c600c6 	.word	0x00c600c6
        return address_;
 23fe648:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fe64a:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fe64e:	3002      	adds	r0, #2
 23fe650:	f7ff f9a2 	bl	23fd998 <_ZNK8particle10BleAddress7isValidEv>
 23fe654:	b338      	cbz	r0, 23fe6a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fe656:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fe658:	89aa      	ldrh	r2, [r5, #12]
 23fe65a:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fe65e:	a806      	add	r0, sp, #24
 23fe660:	801a      	strh	r2, [r3, #0]
 23fe662:	f7ff fc4c 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fe666:	a906      	add	r1, sp, #24
 23fe668:	4630      	mov	r0, r6
 23fe66a:	f7ff ff75 	bl	23fe558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fe66e:	a807      	add	r0, sp, #28
 23fe670:	f7fd ff22 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fe674:	a806      	add	r0, sp, #24
 23fe676:	f7ff facb 	bl	23fdc10 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe67a:	9b06      	ldr	r3, [sp, #24]
 23fe67c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fe680:	9907      	ldr	r1, [sp, #28]
 23fe682:	6263      	str	r3, [r4, #36]	; 0x24
 23fe684:	f7ff f93d 	bl	23fd902 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fe688:	a807      	add	r0, sp, #28
 23fe68a:	f7fd ff15 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fe68e:	2120      	movs	r1, #32
 23fe690:	2300      	movs	r3, #0
 23fe692:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23fe696:	4a6d      	ldr	r2, [pc, #436]	; (23fe84c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23fe698:	9200      	str	r2, [sp, #0]
 23fe69a:	2001      	movs	r0, #1
 23fe69c:	496c      	ldr	r1, [pc, #432]	; (23fe850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fe69e:	aa06      	add	r2, sp, #24
 23fe6a0:	f7fd fa62 	bl	23fbb68 <log_message>
 23fe6a4:	e02b      	b.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fe6a6:	a804      	add	r0, sp, #16
 23fe6a8:	f7ff fab2 	bl	23fdc10 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fe6ac:	89aa      	ldrh	r2, [r5, #12]
 23fe6ae:	9b04      	ldr	r3, [sp, #16]
 23fe6b0:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fe6b2:	6869      	ldr	r1, [r5, #4]
 23fe6b4:	9804      	ldr	r0, [sp, #16]
 23fe6b6:	3108      	adds	r1, #8
 23fe6b8:	3002      	adds	r0, #2
 23fe6ba:	f7ff f952 	bl	23fd962 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fe6be:	a904      	add	r1, sp, #16
 23fe6c0:	a806      	add	r0, sp, #24
 23fe6c2:	f7ff fc1c 	bl	23fdefe <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fe6c6:	4630      	mov	r0, r6
 23fe6c8:	a906      	add	r1, sp, #24
 23fe6ca:	f7ff ff45 	bl	23fe558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fe6ce:	4605      	mov	r5, r0
 23fe6d0:	a807      	add	r0, sp, #28
 23fe6d2:	f7fd fef1 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe6d6:	b9c5      	cbnz	r5, 23fe70a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fe6d8:	2320      	movs	r3, #32
 23fe6da:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23fe6de:	4b5d      	ldr	r3, [pc, #372]	; (23fe854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fe6e0:	2001      	movs	r0, #1
 23fe6e2:	495b      	ldr	r1, [pc, #364]	; (23fe850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fe6e4:	9300      	str	r3, [sp, #0]
 23fe6e6:	aa06      	add	r2, sp, #24
 23fe6e8:	462b      	mov	r3, r5
 23fe6ea:	f7fd fa3d 	bl	23fbb68 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fe6ee:	9b04      	ldr	r3, [sp, #16]
 23fe6f0:	4629      	mov	r1, r5
 23fe6f2:	8818      	ldrh	r0, [r3, #0]
 23fe6f4:	f7fd f9c8 	bl	23fba88 <hal_ble_gap_disconnect>
 23fe6f8:	a805      	add	r0, sp, #20
 23fe6fa:	f7fd fedd 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fe6fe:	a803      	add	r0, sp, #12
 23fe700:	f7ff f91e 	bl	23fd940 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fe704:	b00f      	add	sp, #60	; 0x3c
 23fe706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23fe70a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fe70c:	b123      	cbz	r3, 23fe718 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fe70e:	a904      	add	r1, sp, #16
 23fe710:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fe714:	f7ff fc2b 	bl	23fdf6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fe718:	a805      	add	r0, sp, #20
 23fe71a:	e7b6      	b.n	23fe68a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe71c:	4620      	mov	r0, r4
 23fe71e:	89a9      	ldrh	r1, [r5, #12]
 23fe720:	f7ff fa66 	bl	23fdbf0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fe724:	4606      	mov	r6, r0
 23fe726:	2800      	cmp	r0, #0
 23fe728:	d0e9      	beq.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fe72a:	4601      	mov	r1, r0
 23fe72c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fe730:	f7ff faa5 	bl	23fdc7e <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fe734:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fe738:	b148      	cbz	r0, 23fe74e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fe73a:	4631      	mov	r1, r6
 23fe73c:	4640      	mov	r0, r8
 23fe73e:	f7ff ff44 	bl	23fe5ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fe742:	2220      	movs	r2, #32
 23fe744:	2300      	movs	r3, #0
 23fe746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fe74a:	4a43      	ldr	r2, [pc, #268]	; (23fe858 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fe74c:	e7a4      	b.n	23fe698 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fe74e:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fe752:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fe754:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fe758:	8029      	strh	r1, [r5, #0]
 23fe75a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fe75e:	429a      	cmp	r2, r3
 23fe760:	d003      	beq.n	23fe76a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fe762:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe766:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fe768:	e7f9      	b.n	23fe75e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fe76a:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fe76e:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe772:	45b9      	cmp	r9, r7
 23fe774:	d004      	beq.n	23fe780 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fe776:	1d38      	adds	r0, r7, #4
 23fe778:	f7fd fe9e 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe77c:	3708      	adds	r7, #8
 23fe77e:	e7f8      	b.n	23fe772 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fe780:	2300      	movs	r3, #0
 23fe782:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fe784:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fe788:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe78c:	45b9      	cmp	r9, r7
 23fe78e:	d004      	beq.n	23fe79a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fe790:	1d38      	adds	r0, r7, #4
 23fe792:	f7fd fe91 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe796:	3708      	adds	r7, #8
 23fe798:	e7f8      	b.n	23fe78c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fe79a:	2300      	movs	r3, #0
 23fe79c:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fe79e:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fe7a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fe7a2:	b123      	cbz	r3, 23fe7ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fe7a4:	4631      	mov	r1, r6
 23fe7a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe7aa:	f7ff fbe0 	bl	23fdf6e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fe7b2:	6833      	ldr	r3, [r6, #0]
 23fe7b4:	801a      	strh	r2, [r3, #0]
 23fe7b6:	e7c0      	b.n	23fe73a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe7b8:	4620      	mov	r0, r4
 23fe7ba:	89a9      	ldrh	r1, [r5, #12]
 23fe7bc:	f7ff fa18 	bl	23fdbf0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fe7c0:	2800      	cmp	r0, #0
 23fe7c2:	d09c      	beq.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fe7c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fe7c6:	2b00      	cmp	r3, #0
 23fe7c8:	d099      	beq.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fe7ca:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe7cc:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fe7ce:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe7d2:	d001      	beq.n	23fe7d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fe7d4:	2e10      	cmp	r6, #16
 23fe7d6:	d117      	bne.n	23fe808 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23fe7d8:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fe7da:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fe7dc:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fe7de:	2506      	movs	r5, #6
                        };
 23fe7e0:	f88d 3015 	strb.w	r3, [sp, #21]
 23fe7e4:	9104      	str	r1, [sp, #16]
 23fe7e6:	ab09      	add	r3, sp, #36	; 0x24
 23fe7e8:	f88d 2014 	strb.w	r2, [sp, #20]
 23fe7ec:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fe7ee:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fe7f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fe7f6:	9508      	str	r5, [sp, #32]
 23fe7f8:	e883 0003 	stmia.w	r3, {r0, r1}
 23fe7fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fe7fe:	a906      	add	r1, sp, #24
 23fe800:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe804:	4798      	blx	r3
 23fe806:	e77a      	b.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fe808:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe80a:	bf01      	itttt	eq
 23fe80c:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fe80e:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe810:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe814:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fe816:	bf1d      	ittte	ne
 23fe818:	461a      	movne	r2, r3
 23fe81a:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fe81c:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fe81e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe822:	e7dd      	b.n	23fe7e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe824:	89a9      	ldrh	r1, [r5, #12]
 23fe826:	4620      	mov	r0, r4
 23fe828:	f7ff f9e2 	bl	23fdbf0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fe82c:	4601      	mov	r1, r0
 23fe82e:	2800      	cmp	r0, #0
 23fe830:	f43f af65 	beq.w	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe834:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fe836:	2b00      	cmp	r3, #0
 23fe838:	f43f af61 	beq.w	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fe83c:	686b      	ldr	r3, [r5, #4]
 23fe83e:	aa06      	add	r2, sp, #24
 23fe840:	9306      	str	r3, [sp, #24]
 23fe842:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fe846:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fe848:	4798      	blx	r3
 23fe84a:	e758      	b.n	23fe6fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe84c:	023ffca8 	.word	0x023ffca8
 23fe850:	023ffbf7 	.word	0x023ffbf7
 23fe854:	023ffc82 	.word	0x023ffc82
 23fe858:	023ffcb2 	.word	0x023ffcb2

023fe85c <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fe85c:	b570      	push	{r4, r5, r6, lr}
 23fe85e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fe860:	3064      	adds	r0, #100	; 0x64
 23fe862:	f7fd ff2f 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
 23fe866:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe86a:	f7fd ff2b 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
 23fe86e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe872:	f7fd ff27 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
 23fe876:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fe87a:	f7fd ff23 	bl	23fc6c4 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fe87e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fe882:	f7fd fe19 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe886:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fe88a:	f7fd fe15 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fe88e:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fe892:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe896:	42ae      	cmp	r6, r5
 23fe898:	d004      	beq.n	23fe8a4 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fe89a:	1d28      	adds	r0, r5, #4
 23fe89c:	f7fd fe0c 	bl	23fc4b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe8a0:	3508      	adds	r5, #8
 23fe8a2:	e7f8      	b.n	23fe896 <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fe8a4:	69a0      	ldr	r0, [r4, #24]
 23fe8a6:	f7fd faa1 	bl	23fbdec <free>
 23fe8aa:	f104 000c 	add.w	r0, r4, #12
 23fe8ae:	f7ff fb42 	bl	23fdf36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe8b2:	4620      	mov	r0, r4
 23fe8b4:	f7ff fb2d 	bl	23fdf12 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fe8b8:	4620      	mov	r0, r4
 23fe8ba:	bd70      	pop	{r4, r5, r6, pc}

023fe8bc <__tcf_0>:
    static BleLocalDevice instance;
 23fe8bc:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fe8be:	4b06      	ldr	r3, [pc, #24]	; (23fe8d8 <__tcf_0+0x1c>)
 23fe8c0:	681c      	ldr	r4, [r3, #0]
 23fe8c2:	b144      	cbz	r4, 23fe8d6 <__tcf_0+0x1a>
	delete __ptr;
 23fe8c4:	4620      	mov	r0, r4
 23fe8c6:	f7ff ffc9 	bl	23fe85c <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fe8ca:	4620      	mov	r0, r4
 23fe8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe8d0:	2174      	movs	r1, #116	; 0x74
 23fe8d2:	f7fc bd78 	b.w	23fb3c6 <_ZdlPvj>
 23fe8d6:	bd10      	pop	{r4, pc}
 23fe8d8:	1007aeec 	.word	0x1007aeec

023fe8dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe8dc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fe8de:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fe8e0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe8e2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe8e4:	dd05      	ble.n	23fe8f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fe8e6:	2114      	movs	r1, #20
 23fe8e8:	4369      	muls	r1, r5
 23fe8ea:	f7fd fa8d 	bl	23fbe08 <realloc>
            if (!d) {
 23fe8ee:	b918      	cbnz	r0, 23fe8f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fe8f0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fe8f2:	f7fd fa7b 	bl	23fbdec <free>
        T* d = nullptr;
 23fe8f6:	2000      	movs	r0, #0
        data_ = d;
 23fe8f8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe8fa:	60a5      	str	r5, [r4, #8]
        return true;
 23fe8fc:	2001      	movs	r0, #1
 23fe8fe:	e7f7      	b.n	23fe8f0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fe900 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fe904:	2400      	movs	r4, #0
 23fe906:	e9c0 4400 	strd	r4, r4, [r0]
 23fe90a:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe90c:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe90e:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe910:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe912:	42a1      	cmp	r1, r4
 23fe914:	dd1c      	ble.n	23fe950 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fe916:	f7ff ffe1 	bl	23fe8dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe91a:	b1c8      	cbz	r0, 23fe950 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe91c:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fe920:	f04f 0c14 	mov.w	ip, #20
 23fe924:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fe928:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fe92c:	eb09 0504 	add.w	r5, r9, r4
 23fe930:	45ac      	cmp	ip, r5
 23fe932:	d00a      	beq.n	23fe94a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fe934:	eb1e 0604 	adds.w	r6, lr, r4
 23fe938:	bf1e      	ittt	ne
 23fe93a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fe93c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fe93e:	682b      	ldrne	r3, [r5, #0]
 23fe940:	f104 0414 	add.w	r4, r4, #20
 23fe944:	bf18      	it	ne
 23fe946:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fe948:	e7f0      	b.n	23fe92c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fe94a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fe94e:	607b      	str	r3, [r7, #4]
}
 23fe950:	4638      	mov	r0, r7
 23fe952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fe956:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fe95a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe95c:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fe95e:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe962:	19e9      	adds	r1, r5, r7
 23fe964:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fe966:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe968:	dc17      	bgt.n	23fe99a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fe96a:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fe96c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe96e:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fe970:	fb03 f907 	mul.w	r9, r3, r7
 23fe974:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fe976:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe978:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fe97a:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe97c:	4631      	mov	r1, r6
 23fe97e:	eb06 0009 	add.w	r0, r6, r9
 23fe982:	f000 fe52 	bl	23ff62a <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fe986:	464a      	mov	r2, r9
 23fe988:	4641      	mov	r1, r8
 23fe98a:	4630      	mov	r0, r6
 23fe98c:	f000 fe40 	bl	23ff610 <memcpy>
    size_ += n;
 23fe990:	6863      	ldr	r3, [r4, #4]
 23fe992:	443b      	add	r3, r7
 23fe994:	6063      	str	r3, [r4, #4]
}
 23fe996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe99a:	f7ff ff9f 	bl	23fe8dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe99e:	2800      	cmp	r0, #0
 23fe9a0:	d1e3      	bne.n	23fe96a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fe9a2:	e7f8      	b.n	23fe996 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fe9a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe9a4:	b082      	sub	sp, #8
 23fe9a6:	b570      	push	{r4, r5, r6, lr}
 23fe9a8:	460c      	mov	r4, r1
 23fe9aa:	a904      	add	r1, sp, #16
 23fe9ac:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe9b0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fe9b4:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe9b6:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe9b8:	da17      	bge.n	23fe9ea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fe9ba:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fe9bc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fe9be:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fe9c2:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fe9c4:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe9c6:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fe9c8:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe9ca:	4621      	mov	r1, r4
 23fe9cc:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fe9ce:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe9d0:	f000 fe2b 	bl	23ff62a <memmove>
    new(p) T(std::move(value));
 23fe9d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fe9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe9d8:	6833      	ldr	r3, [r6, #0]
 23fe9da:	6023      	str	r3, [r4, #0]
    ++size_;
 23fe9dc:	686b      	ldr	r3, [r5, #4]
 23fe9de:	3301      	adds	r3, #1
 23fe9e0:	606b      	str	r3, [r5, #4]
}
 23fe9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe9e6:	b002      	add	sp, #8
 23fe9e8:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe9ea:	3101      	adds	r1, #1
 23fe9ec:	f7ff ff76 	bl	23fe8dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe9f0:	2800      	cmp	r0, #0
 23fe9f2:	d1e2      	bne.n	23fe9ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fe9f4:	e7f5      	b.n	23fe9e2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fe9f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fe9fa:	2400      	movs	r4, #0
 23fe9fc:	4605      	mov	r5, r0
 23fe9fe:	460f      	mov	r7, r1
 23fea00:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fea02:	1e93      	subs	r3, r2, #2
 23fea04:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fea08:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fea0a:	b2db      	uxtb	r3, r3
 23fea0c:	6084      	str	r4, [r0, #8]
 23fea0e:	9305      	str	r3, [sp, #20]
    return size_;
 23fea10:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fea12:	428c      	cmp	r4, r1
 23fea14:	da72      	bge.n	23feafc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fea16:	6838      	ldr	r0, [r7, #0]
 23fea18:	4642      	mov	r2, r8
 23fea1a:	ab07      	add	r3, sp, #28
 23fea1c:	1b09      	subs	r1, r1, r4
 23fea1e:	4420      	add	r0, r4
 23fea20:	f7fe ff44 	bl	23fd8ac <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fea24:	4606      	mov	r6, r0
 23fea26:	2800      	cmp	r0, #0
 23fea28:	d068      	beq.n	23feafc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fea2a:	9b05      	ldr	r3, [sp, #20]
 23fea2c:	2b01      	cmp	r3, #1
 23fea2e:	d82f      	bhi.n	23fea90 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fea30:	f04f 0900 	mov.w	r9, #0
 23fea34:	f1a0 0b02 	sub.w	fp, r0, #2
 23fea38:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fea3c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fea40:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fea42:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fea44:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fea46:	d055      	beq.n	23feaf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fea48:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fea4a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fea4e:	4413      	add	r3, r2
 23fea50:	78d9      	ldrb	r1, [r3, #3]
 23fea52:	789b      	ldrb	r3, [r3, #2]
 23fea54:	a808      	add	r0, sp, #32
 23fea56:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fea5a:	f7ff f854 	bl	23fdb06 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fea5e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fea62:	f10d 0e20 	add.w	lr, sp, #32
 23fea66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fea6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fea6e:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fea72:	f109 0901 	add.w	r9, r9, #1
 23fea76:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fea7a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fea7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fea82:	ab0d      	add	r3, sp, #52	; 0x34
 23fea84:	4628      	mov	r0, r5
 23fea86:	cb0c      	ldmia	r3, {r2, r3}
 23fea88:	6869      	ldr	r1, [r5, #4]
 23fea8a:	f7ff ff8b 	bl	23fe9a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fea8e:	e7d7      	b.n	23fea40 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fea90:	f1a8 0306 	sub.w	r3, r8, #6
 23fea94:	2b01      	cmp	r3, #1
 23fea96:	d82d      	bhi.n	23feaf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fea98:	f04f 0900 	mov.w	r9, #0
 23fea9c:	f1a0 0b02 	sub.w	fp, r0, #2
 23feaa0:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23feaa4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23feaa8:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23feaaa:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23feaac:	d022      	beq.n	23feaf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23feaae:	3302      	adds	r3, #2
    return data_[i];
 23feab0:	6839      	ldr	r1, [r7, #0]
 23feab2:	4423      	add	r3, r4
 23feab4:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23feab8:	2201      	movs	r2, #1
 23feaba:	4419      	add	r1, r3
 23feabc:	a808      	add	r0, sp, #32
 23feabe:	f7ff f803 	bl	23fdac8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23feac2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23feac6:	f10d 0e20 	add.w	lr, sp, #32
 23feaca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23feace:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fead2:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fead6:	f109 0901 	add.w	r9, r9, #1
 23feada:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23feade:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23feae2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23feae6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23feaea:	4628      	mov	r0, r5
 23feaec:	6869      	ldr	r1, [r5, #4]
 23feaee:	f7ff ff59 	bl	23fe9a4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23feaf2:	e7d9      	b.n	23feaa8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23feaf4:	9b07      	ldr	r3, [sp, #28]
 23feaf6:	441c      	add	r4, r3
 23feaf8:	4434      	add	r4, r6
 23feafa:	e789      	b.n	23fea10 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23feafc:	4628      	mov	r0, r5
 23feafe:	b013      	add	sp, #76	; 0x4c
 23feb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023feb04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23feb04:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23feb06:	b530      	push	{r4, r5, lr}
 23feb08:	4604      	mov	r4, r0
 23feb0a:	460d      	mov	r5, r1
 23feb0c:	b085      	sub	sp, #20
 23feb0e:	e9c0 3300 	strd	r3, r3, [r0]
 23feb12:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23feb14:	2202      	movs	r2, #2
 23feb16:	a801      	add	r0, sp, #4
 23feb18:	f7ff ff6d 	bl	23fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23feb1c:	a901      	add	r1, sp, #4
 23feb1e:	4620      	mov	r0, r4
 23feb20:	f7ff ff19 	bl	23fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23feb24:	a801      	add	r0, sp, #4
 23feb26:	f7ff f984 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23feb2a:	2202      	movs	r2, #2
 23feb2c:	4629      	mov	r1, r5
 23feb2e:	a801      	add	r0, sp, #4
 23feb30:	f7ff ff61 	bl	23fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23feb34:	a901      	add	r1, sp, #4
 23feb36:	4620      	mov	r0, r4
 23feb38:	f7ff ff0d 	bl	23fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23feb3c:	a801      	add	r0, sp, #4
 23feb3e:	f7ff f978 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23feb42:	2203      	movs	r2, #3
 23feb44:	4629      	mov	r1, r5
 23feb46:	a801      	add	r0, sp, #4
 23feb48:	f7ff ff55 	bl	23fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23feb4c:	a901      	add	r1, sp, #4
 23feb4e:	4620      	mov	r0, r4
 23feb50:	f7ff ff01 	bl	23fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23feb54:	a801      	add	r0, sp, #4
 23feb56:	f7ff f96c 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23feb5a:	2206      	movs	r2, #6
 23feb5c:	4629      	mov	r1, r5
 23feb5e:	a801      	add	r0, sp, #4
 23feb60:	f7ff ff49 	bl	23fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23feb64:	a901      	add	r1, sp, #4
 23feb66:	4620      	mov	r0, r4
 23feb68:	f7ff fef5 	bl	23fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23feb6c:	a801      	add	r0, sp, #4
 23feb6e:	f7ff f960 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23feb72:	2207      	movs	r2, #7
 23feb74:	4629      	mov	r1, r5
 23feb76:	a801      	add	r0, sp, #4
 23feb78:	f7ff ff3d 	bl	23fe9f6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23feb7c:	4620      	mov	r0, r4
 23feb7e:	a901      	add	r1, sp, #4
 23feb80:	f7ff fee9 	bl	23fe956 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23feb84:	a801      	add	r0, sp, #4
 23feb86:	f7ff f954 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23feb8a:	4620      	mov	r0, r4
 23feb8c:	b005      	add	sp, #20
 23feb8e:	bd30      	pop	{r4, r5, pc}

023feb90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23feb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23feb94:	b08b      	sub	sp, #44	; 0x2c
 23feb96:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23feb98:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23feb9c:	a801      	add	r0, sp, #4
 23feb9e:	f7ff feaf 	bl	23fe900 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23feba2:	9b02      	ldr	r3, [sp, #8]
 23feba4:	2b00      	cmp	r3, #0
 23feba6:	dd4a      	ble.n	23fec3e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23feba8:	f104 0114 	add.w	r1, r4, #20
 23febac:	a804      	add	r0, sp, #16
 23febae:	f7ff ffa9 	bl	23feb04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23febb2:	f104 0108 	add.w	r1, r4, #8
 23febb6:	a807      	add	r0, sp, #28
 23febb8:	f7ff ffa4 	bl	23feb04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23febbc:	9d05      	ldr	r5, [sp, #20]
 23febbe:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23febc0:	2d00      	cmp	r5, #0
 23febc2:	dc01      	bgt.n	23febc8 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23febc4:	2e00      	cmp	r6, #0
 23febc6:	dd38      	ble.n	23fec3a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23febc8:	2314      	movs	r3, #20
    return data_;
 23febca:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23febcc:	9f02      	ldr	r7, [sp, #8]
 23febce:	4692      	mov	sl, r2
    return data_;
 23febd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23febd4:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23febd8:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23febdc:	fb03 8505 	mla	r5, r3, r5, r8
 23febe0:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23febe4:	45ba      	cmp	sl, r7
 23febe6:	d028      	beq.n	23fec3a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23febe8:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23febea:	45ab      	cmp	fp, r5
 23febec:	d015      	beq.n	23fec1a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23febee:	4659      	mov	r1, fp
 23febf0:	4650      	mov	r0, sl
 23febf2:	f7fe ff92 	bl	23fdb1a <_ZNK8particle7BleUuideqERKS0_>
 23febf6:	f10b 0b14 	add.w	fp, fp, #20
 23febfa:	4604      	mov	r4, r0
 23febfc:	2800      	cmp	r0, #0
 23febfe:	d0f4      	beq.n	23febea <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fec00:	a807      	add	r0, sp, #28
 23fec02:	f7ff f916 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fec06:	a804      	add	r0, sp, #16
 23fec08:	f7ff f913 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fec0c:	a801      	add	r0, sp, #4
 23fec0e:	f7ff f910 	bl	23fde32 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fec12:	4620      	mov	r0, r4
 23fec14:	b00b      	add	sp, #44	; 0x2c
 23fec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fec1a:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fec1c:	45b3      	cmp	fp, r6
 23fec1e:	d009      	beq.n	23fec34 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fec20:	4659      	mov	r1, fp
 23fec22:	4650      	mov	r0, sl
 23fec24:	f7fe ff79 	bl	23fdb1a <_ZNK8particle7BleUuideqERKS0_>
 23fec28:	f10b 0b14 	add.w	fp, fp, #20
 23fec2c:	4604      	mov	r4, r0
 23fec2e:	2800      	cmp	r0, #0
 23fec30:	d0f4      	beq.n	23fec1c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fec32:	e7e5      	b.n	23fec00 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fec34:	f10a 0a14 	add.w	sl, sl, #20
 23fec38:	e7d4      	b.n	23febe4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fec3a:	2400      	movs	r4, #0
 23fec3c:	e7e0      	b.n	23fec00 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fec3e:	2401      	movs	r4, #1
 23fec40:	e7e4      	b.n	23fec0c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fec42 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fec42:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fec46:	4604      	mov	r4, r0
 23fec48:	460d      	mov	r5, r1
 23fec4a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fec4c:	d914      	bls.n	23fec78 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fec4e:	4290      	cmp	r0, r2
 23fec50:	d213      	bcs.n	23fec7a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fec52:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23fec56:	1a75      	subs	r5, r6, r1
 23fec58:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23fec5c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fec5e:	42b7      	cmp	r7, r6
 23fec60:	d018      	beq.n	23fec94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fec62:	b11c      	cbz	r4, 23fec6c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fec64:	4631      	mov	r1, r6
 23fec66:	4620      	mov	r0, r4
 23fec68:	f7ff fb5c 	bl	23fe324 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23fec6c:	4630      	mov	r0, r6
 23fec6e:	f7ff f8a1 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23fec72:	3e24      	subs	r6, #36	; 0x24
 23fec74:	3c24      	subs	r4, #36	; 0x24
 23fec76:	e7f2      	b.n	23fec5e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fec78:	d00c      	beq.n	23fec94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fec7a:	42b5      	cmp	r5, r6
 23fec7c:	d00a      	beq.n	23fec94 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fec7e:	b11c      	cbz	r4, 23fec88 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fec80:	4629      	mov	r1, r5
 23fec82:	4620      	mov	r0, r4
 23fec84:	f7ff fb4e 	bl	23fe324 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23fec88:	4628      	mov	r0, r5
 23fec8a:	f7ff f893 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23fec8e:	3524      	adds	r5, #36	; 0x24
 23fec90:	3424      	adds	r4, #36	; 0x24
 23fec92:	e7f2      	b.n	23fec7a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fec94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fec96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fec96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fec98:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fec9a:	4605      	mov	r5, r0
        if (n > 0) {
 23fec9c:	dd13      	ble.n	23fecc6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fec9e:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23feca0:	fb07 f006 	mul.w	r0, r7, r6
 23feca4:	f7fd f894 	bl	23fbdd0 <malloc>
            if (!d) {
 23feca8:	4604      	mov	r4, r0
 23fecaa:	b158      	cbz	r0, 23fecc4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fecac:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fecb0:	fb07 1202 	mla	r2, r7, r2, r1
 23fecb4:	f7ff ffc5 	bl	23fec42 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fecb8:	6828      	ldr	r0, [r5, #0]
 23fecba:	f7fd f897 	bl	23fbdec <free>
        return true;
 23fecbe:	2001      	movs	r0, #1
        data_ = d;
 23fecc0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fecc2:	60ae      	str	r6, [r5, #8]
    }
 23fecc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fecc6:	2400      	movs	r4, #0
 23fecc8:	e7f6      	b.n	23fecb8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023fecca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fecca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fecce:	4606      	mov	r6, r0
 23fecd0:	460c      	mov	r4, r1
 23fecd2:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23fecd4:	ad01      	add	r5, sp, #4
 23fecd6:	4628      	mov	r0, r5
 23fecd8:	f7fe fedc 	bl	23fda94 <_ZN8particle10BleAddressC1Ev>
 23fecdc:	a803      	add	r0, sp, #12
 23fecde:	f7ff fbfe 	bl	23fe4de <_ZN8particle18BleAdvertisingDataC1Ev>
 23fece2:	a806      	add	r0, sp, #24
 23fece4:	f7ff fbfb 	bl	23fe4de <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23fece8:	6930      	ldr	r0, [r6, #16]
 23fecea:	6971      	ldr	r1, [r6, #20]
 23fecec:	ab13      	add	r3, sp, #76	; 0x4c
 23fecee:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23fecf0:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23fecf2:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23fecf6:	89f2      	ldrh	r2, [r6, #14]
 23fecf8:	68b1      	ldr	r1, [r6, #8]
 23fecfa:	a806      	add	r0, sp, #24
        rssi_ = value;
 23fecfc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23fed00:	f7ff fb61 	bl	23fe3c6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23fed04:	89b2      	ldrh	r2, [r6, #12]
 23fed06:	6871      	ldr	r1, [r6, #4]
 23fed08:	a803      	add	r0, sp, #12
 23fed0a:	f7ff fb5c 	bl	23fe3c6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23fed0e:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23fed12:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23fed14:	2b7f      	cmp	r3, #127	; 0x7f
 23fed16:	d003      	beq.n	23fed20 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23fed18:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fed1c:	429a      	cmp	r2, r3
 23fed1e:	db5c      	blt.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23fed20:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23fed24:	2b7f      	cmp	r3, #127	; 0x7f
 23fed26:	d003      	beq.n	23fed30 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23fed28:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fed2c:	429a      	cmp	r2, r3
 23fed2e:	dc54      	bgt.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23fed30:	4638      	mov	r0, r7
 23fed32:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23fed36:	f7ff f9ba 	bl	23fe0ae <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23fed3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23fed3c:	2b00      	cmp	r3, #0
 23fed3e:	dd52      	ble.n	23fede6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23fed40:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23fed42:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23fed46:	45b1      	cmp	r9, r6
 23fed48:	d050      	beq.n	23fedec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23fed4a:	4630      	mov	r0, r6
 23fed4c:	4629      	mov	r1, r5
 23fed4e:	f7fe fe15 	bl	23fd97c <_ZNK8particle10BleAddresseqERKS0_>
 23fed52:	3608      	adds	r6, #8
 23fed54:	4680      	mov	r8, r0
 23fed56:	2800      	cmp	r0, #0
 23fed58:	d0f5      	beq.n	23fed46 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23fed5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fed5c:	f7fd f846 	bl	23fbdec <free>
        if (!delegator->filterByRssi(result) ||
 23fed60:	f1b8 0f00 	cmp.w	r8, #0
 23fed64:	d039      	beq.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23fed66:	4629      	mov	r1, r5
 23fed68:	4620      	mov	r0, r4
 23fed6a:	f7ff f963 	bl	23fe034 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23fed6e:	b3a0      	cbz	r0, 23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23fed70:	4629      	mov	r1, r5
 23fed72:	4620      	mov	r0, r4
 23fed74:	f7ff ff0c 	bl	23feb90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23fed78:	4606      	mov	r6, r0
 23fed7a:	b370      	cbz	r0, 23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23fed7c:	4638      	mov	r0, r7
 23fed7e:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23fed82:	f7ff f9e1 	bl	23fe148 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23fed86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fed88:	2b00      	cmp	r3, #0
 23fed8a:	dd12      	ble.n	23fedb2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23fed8c:	a806      	add	r0, sp, #24
 23fed8e:	f7fe ff23 	bl	23fdbd8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23fed92:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23fed94:	a803      	add	r0, sp, #12
 23fed96:	f7fe ff1f 	bl	23fdbd8 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23fed9a:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23fed9e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23feda2:	429a      	cmp	r2, r3
 23feda4:	d025      	beq.n	23fedf2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23feda6:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fedaa:	4588      	cmp	r8, r1
 23fedac:	d001      	beq.n	23fedb2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23fedae:	4288      	cmp	r0, r1
 23fedb0:	d1f7      	bne.n	23feda2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23fedb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fedb4:	f7fd f81a 	bl	23fbdec <free>
              !delegator->filterByServiceUUID(result) ||
 23fedb8:	b17e      	cbz	r6, 23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23fedba:	4629      	mov	r1, r5
 23fedbc:	4620      	mov	r0, r4
 23fedbe:	f7ff f9f9 	bl	23fe1b4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23fedc2:	b150      	cbz	r0, 23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23fedc4:	6a23      	ldr	r3, [r4, #32]
 23fedc6:	b1b3      	cbz	r3, 23fedf6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fedc8:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23fedca:	6963      	ldr	r3, [r4, #20]
 23fedcc:	9513      	str	r5, [sp, #76]	; 0x4c
 23fedce:	3301      	adds	r3, #1
 23fedd0:	6163      	str	r3, [r4, #20]
 23fedd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fedd4:	f104 0018 	add.w	r0, r4, #24
 23fedd8:	4798      	blx	r3
            return;
 23fedda:	4628      	mov	r0, r5
 23feddc:	f7fe ffea 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
    }
 23fede0:	b01d      	add	sp, #116	; 0x74
 23fede2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23fede6:	f04f 0801 	mov.w	r8, #1
 23fedea:	e7b6      	b.n	23fed5a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fedec:	f04f 0800 	mov.w	r8, #0
 23fedf0:	e7b3      	b.n	23fed5a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23fedf2:	2600      	movs	r6, #0
 23fedf4:	e7dd      	b.n	23fedb2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23fedf6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23fedfa:	f1b8 0f00 	cmp.w	r8, #0
 23fedfe:	d007      	beq.n	23fee10 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23fee00:	6963      	ldr	r3, [r4, #20]
 23fee02:	4629      	mov	r1, r5
 23fee04:	3301      	adds	r3, #1
 23fee06:	6163      	str	r3, [r4, #20]
 23fee08:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fee0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23fee0e:	e7e3      	b.n	23fedd8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23fee10:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23fee14:	f1bc 0f00 	cmp.w	ip, #0
 23fee18:	d025      	beq.n	23fee66 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
 23fee1a:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fee1c:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
 23fee1e:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fee20:	4293      	cmp	r3, r2
            delegator->foundCount_++;
 23fee22:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23fee24:	d8d9      	bhi.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fee26:	2224      	movs	r2, #36	; 0x24
 23fee28:	4353      	muls	r3, r2
    address_ = addr.address_;
 23fee2a:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23fee2c:	3b24      	subs	r3, #36	; 0x24
 23fee2e:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23fee32:	ca03      	ldmia	r2!, {r0, r1}
 23fee34:	f84c 0003 	str.w	r0, [ip, r3]
 23fee38:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23fee3a:	f106 0008 	add.w	r0, r6, #8
 23fee3e:	a903      	add	r1, sp, #12
 23fee40:	f7ff fa89 	bl	23fe356 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fee44:	a906      	add	r1, sp, #24
 23fee46:	f106 0014 	add.w	r0, r6, #20
 23fee4a:	f7ff fa84 	bl	23fe356 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23fee4e:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23fee52:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23fee56:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23fee5a:	429a      	cmp	r2, r3
 23fee5c:	d3bd      	bcc.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23fee5e:	4640      	mov	r0, r8
 23fee60:	f7fc fe04 	bl	23fba6c <hal_ble_gap_stop_scan>
 23fee64:	e7b9      	b.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23fee66:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23fee6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fee6e:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23fee72:	a903      	add	r1, sp, #12
 23fee74:	a80c      	add	r0, sp, #48	; 0x30
 23fee76:	f7ff fa38 	bl	23fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fee7a:	a906      	add	r1, sp, #24
 23fee7c:	a80f      	add	r0, sp, #60	; 0x3c
 23fee7e:	f7ff fa34 	bl	23fe2ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fee82:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23fee86:	4641      	mov	r1, r8
 23fee88:	4638      	mov	r0, r7
 23fee8a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23fee8e:	6866      	ldr	r6, [r4, #4]
 23fee90:	f7ff fa48 	bl	23fe324 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fee94:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fee98:	4299      	cmp	r1, r3
 23fee9a:	da10      	bge.n	23feebe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
 23fee9c:	2224      	movs	r2, #36	; 0x24
 23fee9e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23feea0:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23feea2:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23feea6:	fb02 3201 	mla	r2, r2, r1, r3
 23feeaa:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23feeae:	4631      	mov	r1, r6
 23feeb0:	f7ff fec7 	bl	23fec42 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23feeb4:	b986      	cbnz	r6, 23feed8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
 23feeb6:	6863      	ldr	r3, [r4, #4]
 23feeb8:	3301      	adds	r3, #1
 23feeba:	6063      	str	r3, [r4, #4]
    return true;
 23feebc:	e005      	b.n	23feeca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23feebe:	4620      	mov	r0, r4
 23feec0:	3101      	adds	r1, #1
 23feec2:	f7ff fee8 	bl	23fec96 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23feec6:	2800      	cmp	r0, #0
 23feec8:	d1e8      	bne.n	23fee9c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
 23feeca:	4638      	mov	r0, r7
 23feecc:	f7fe ff72 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23feed0:	4640      	mov	r0, r8
 23feed2:	f7fe ff6f 	bl	23fddb4 <_ZN8particle13BleScanResultD1Ev>
 23feed6:	e780      	b.n	23fedda <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23feed8:	4639      	mov	r1, r7
 23feeda:	4630      	mov	r0, r6
 23feedc:	f7ff fa22 	bl	23fe324 <_ZN8particle13BleScanResultC1EOS0_>
 23feee0:	e7e9      	b.n	23feeb6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

023feee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23feee4:	2300      	movs	r3, #0
 23feee6:	4802      	ldr	r0, [pc, #8]	; (23feef0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23feee8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23feeea:	f7fc bd4f 	b.w	23fb98c <os_mutex_recursive_create>
 23feeee:	bf00      	nop
 23feef0:	1007aee8 	.word	0x1007aee8

023feef4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23feef4:	4770      	bx	lr

023feef6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23feef6:	7441      	strb	r1, [r0, #17]
}
 23feef8:	4770      	bx	lr

023feefa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23feefa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23feefc:	7c00      	ldrb	r0, [r0, #16]
 23feefe:	f7fc fd0d 	bl	23fb91c <hal_usart_available_data_for_write>
}
 23fef02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fef06:	bd08      	pop	{r3, pc}

023fef08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fef08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fef0a:	7c00      	ldrb	r0, [r0, #16]
 23fef0c:	f7fc fcc0 	bl	23fb890 <hal_usart_available>
}
 23fef10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fef14:	bd08      	pop	{r3, pc}

023fef16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fef16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fef18:	7c00      	ldrb	r0, [r0, #16]
 23fef1a:	f7fc fcd5 	bl	23fb8c8 <hal_usart_peek>
}
 23fef1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fef22:	bd08      	pop	{r3, pc}

023fef24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fef24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fef26:	7c00      	ldrb	r0, [r0, #16]
 23fef28:	f7fc fcc0 	bl	23fb8ac <hal_usart_read>
}
 23fef2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fef30:	bd08      	pop	{r3, pc}

023fef32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fef32:	7c00      	ldrb	r0, [r0, #16]
 23fef34:	f7fc bcd6 	b.w	23fb8e4 <hal_usart_flush>

023fef38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fef38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fef3a:	7c45      	ldrb	r5, [r0, #17]
{
 23fef3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fef3e:	b12d      	cbz	r5, 23fef4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fef40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fef42:	b003      	add	sp, #12
 23fef44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fef48:	f7fc bc94 	b.w	23fb874 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fef4c:	7c00      	ldrb	r0, [r0, #16]
 23fef4e:	9101      	str	r1, [sp, #4]
 23fef50:	f7fc fce4 	bl	23fb91c <hal_usart_available_data_for_write>
 23fef54:	2800      	cmp	r0, #0
 23fef56:	9901      	ldr	r1, [sp, #4]
 23fef58:	dcf2      	bgt.n	23fef40 <_ZN11USARTSerial5writeEh+0x8>
}
 23fef5a:	4628      	mov	r0, r5
 23fef5c:	b003      	add	sp, #12
 23fef5e:	bd30      	pop	{r4, r5, pc}

023fef60 <_ZN11USARTSerialD0Ev>:
 23fef60:	b510      	push	{r4, lr}
 23fef62:	4604      	mov	r4, r0
 23fef64:	2114      	movs	r1, #20
 23fef66:	f7fc fa2e 	bl	23fb3c6 <_ZdlPvj>
 23fef6a:	4620      	mov	r0, r4
 23fef6c:	bd10      	pop	{r4, pc}
	...

023fef70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fef70:	b510      	push	{r4, lr}
 23fef72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef76:	4604      	mov	r4, r0
 23fef78:	4608      	mov	r0, r1
 23fef7a:	4611      	mov	r1, r2
 23fef7c:	2200      	movs	r2, #0
 23fef7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef82:	4b04      	ldr	r3, [pc, #16]	; (23fef94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fef84:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fef86:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fef88:	2301      	movs	r3, #1
 23fef8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fef8c:	f7fc fce2 	bl	23fb954 <hal_usart_init_ex>
}
 23fef90:	4620      	mov	r0, r4
 23fef92:	bd10      	pop	{r4, pc}
 23fef94:	023ffce4 	.word	0x023ffce4

023fef98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fef98:	2300      	movs	r3, #0
 23fef9a:	7c00      	ldrb	r0, [r0, #16]
 23fef9c:	f7fc bccc 	b.w	23fb938 <hal_usart_begin_config>

023fefa0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fefa0:	2200      	movs	r2, #0
 23fefa2:	f7ff bff9 	b.w	23fef98 <_ZN11USARTSerial5beginEmm>

023fefa6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fefa6:	7c00      	ldrb	r0, [r0, #16]
 23fefa8:	f7fc bc56 	b.w	23fb858 <hal_usart_end>

023fefac <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fefac:	7c00      	ldrb	r0, [r0, #16]
 23fefae:	f7fc bca7 	b.w	23fb900 <hal_usart_is_enabled>
	...

023fefb4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fefb4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fefb6:	2000      	movs	r0, #0
 23fefb8:	4b04      	ldr	r3, [pc, #16]	; (23fefcc <_GLOBAL__sub_I_System+0x18>)
 23fefba:	601a      	str	r2, [r3, #0]
 23fefbc:	4b04      	ldr	r3, [pc, #16]	; (23fefd0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fefbe:	4a05      	ldr	r2, [pc, #20]	; (23fefd4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fefc0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fefc4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fefc6:	f7fc becb 	b.w	23fbd60 <set_system_mode>
 23fefca:	bf00      	nop
 23fefcc:	1007aefc 	.word	0x1007aefc
 23fefd0:	1007aef0 	.word	0x1007aef0
 23fefd4:	ffff0000 	.word	0xffff0000

023fefd8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fefd8:	2200      	movs	r2, #0
 23fefda:	6840      	ldr	r0, [r0, #4]
 23fefdc:	4611      	mov	r1, r2
 23fefde:	f7fc be79 	b.w	23fbcd4 <network_listening>

023fefe2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fefe2:	2200      	movs	r2, #0
 23fefe4:	6840      	ldr	r0, [r0, #4]
 23fefe6:	4611      	mov	r1, r2
 23fefe8:	f7fc be90 	b.w	23fbd0c <network_get_listen_timeout>

023fefec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fefec:	2200      	movs	r2, #0
 23fefee:	6840      	ldr	r0, [r0, #4]
 23feff0:	f7fc be7e 	b.w	23fbcf0 <network_set_listen_timeout>

023feff4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feff4:	2200      	movs	r2, #0
 23feff6:	6840      	ldr	r0, [r0, #4]
 23feff8:	f081 0101 	eor.w	r1, r1, #1
 23feffc:	f7fc be5c 	b.w	23fbcb8 <network_listen>

023ff000 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff000:	2300      	movs	r3, #0
 23ff002:	6840      	ldr	r0, [r0, #4]
 23ff004:	461a      	mov	r2, r3
 23ff006:	4619      	mov	r1, r3
 23ff008:	f7fc be48 	b.w	23fbc9c <network_off>

023ff00c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff00c:	2300      	movs	r3, #0
 23ff00e:	6840      	ldr	r0, [r0, #4]
 23ff010:	461a      	mov	r2, r3
 23ff012:	4619      	mov	r1, r3
 23ff014:	f7fc be34 	b.w	23fbc80 <network_on>

023ff018 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23ff018:	2200      	movs	r2, #0
 23ff01a:	6840      	ldr	r0, [r0, #4]
 23ff01c:	4611      	mov	r1, r2
 23ff01e:	f7fc be21 	b.w	23fbc64 <network_ready>

023ff022 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff022:	2200      	movs	r2, #0
 23ff024:	6840      	ldr	r0, [r0, #4]
 23ff026:	4611      	mov	r1, r2
 23ff028:	f7fc be00 	b.w	23fbc2c <network_connecting>

023ff02c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff02c:	2200      	movs	r2, #0
 23ff02e:	2102      	movs	r1, #2
 23ff030:	6840      	ldr	r0, [r0, #4]
 23ff032:	f7fc be09 	b.w	23fbc48 <network_disconnect>

023ff036 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff036:	2300      	movs	r3, #0
 23ff038:	6840      	ldr	r0, [r0, #4]
 23ff03a:	461a      	mov	r2, r3
 23ff03c:	f7fc bde8 	b.w	23fbc10 <network_connect>

023ff040 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23ff040:	2203      	movs	r2, #3
 23ff042:	4b02      	ldr	r3, [pc, #8]	; (23ff04c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff044:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff046:	4a02      	ldr	r2, [pc, #8]	; (23ff050 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff048:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff04a:	4770      	bx	lr
 23ff04c:	1007af00 	.word	0x1007af00
 23ff050:	023ffd14 	.word	0x023ffd14

023ff054 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff054:	b510      	push	{r4, lr}
 23ff056:	4604      	mov	r4, r0
{
	free(buffer);
 23ff058:	6800      	ldr	r0, [r0, #0]
 23ff05a:	f7fc fec7 	bl	23fbdec <free>
}
 23ff05e:	4620      	mov	r0, r4
 23ff060:	bd10      	pop	{r4, pc}

023ff062 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff062:	b510      	push	{r4, lr}
 23ff064:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff066:	6800      	ldr	r0, [r0, #0]
 23ff068:	b108      	cbz	r0, 23ff06e <_ZN6String10invalidateEv+0xc>
 23ff06a:	f7fc febf 	bl	23fbdec <free>
	buffer = NULL;
 23ff06e:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff070:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff074:	6023      	str	r3, [r4, #0]
}
 23ff076:	bd10      	pop	{r4, pc}

023ff078 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff078:	b538      	push	{r3, r4, r5, lr}
 23ff07a:	4604      	mov	r4, r0
 23ff07c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff07e:	6800      	ldr	r0, [r0, #0]
 23ff080:	3101      	adds	r1, #1
 23ff082:	f7fc fec1 	bl	23fbe08 <realloc>
	if (newbuffer) {
 23ff086:	b110      	cbz	r0, 23ff08e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff088:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff08c:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff08e:	bd38      	pop	{r3, r4, r5, pc}

023ff090 <_ZN6String7reserveEj>:
{
 23ff090:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff092:	6803      	ldr	r3, [r0, #0]
{
 23ff094:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff096:	b123      	cbz	r3, 23ff0a2 <_ZN6String7reserveEj+0x12>
 23ff098:	6843      	ldr	r3, [r0, #4]
 23ff09a:	428b      	cmp	r3, r1
 23ff09c:	d301      	bcc.n	23ff0a2 <_ZN6String7reserveEj+0x12>
 23ff09e:	2001      	movs	r0, #1
}
 23ff0a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff0a2:	4620      	mov	r0, r4
 23ff0a4:	f7ff ffe8 	bl	23ff078 <_ZN6String12changeBufferEj>
 23ff0a8:	2800      	cmp	r0, #0
 23ff0aa:	d0f9      	beq.n	23ff0a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff0ac:	68a3      	ldr	r3, [r4, #8]
 23ff0ae:	2b00      	cmp	r3, #0
 23ff0b0:	d1f5      	bne.n	23ff09e <_ZN6String7reserveEj+0xe>
 23ff0b2:	6822      	ldr	r2, [r4, #0]
 23ff0b4:	7013      	strb	r3, [r2, #0]
 23ff0b6:	e7f2      	b.n	23ff09e <_ZN6String7reserveEj+0xe>

023ff0b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff0ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff0bc:	4611      	mov	r1, r2
 23ff0be:	9201      	str	r2, [sp, #4]
{
 23ff0c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff0c2:	f7ff ffe5 	bl	23ff090 <_ZN6String7reserveEj>
 23ff0c6:	9a01      	ldr	r2, [sp, #4]
 23ff0c8:	b928      	cbnz	r0, 23ff0d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff0ca:	4620      	mov	r0, r4
 23ff0cc:	f7ff ffc9 	bl	23ff062 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff0d0:	4620      	mov	r0, r4
 23ff0d2:	b003      	add	sp, #12
 23ff0d4:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff0d6:	4629      	mov	r1, r5
	len = length;
 23ff0d8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff0da:	6820      	ldr	r0, [r4, #0]
 23ff0dc:	f000 fa98 	bl	23ff610 <memcpy>
	buffer[len] = 0;
 23ff0e0:	2100      	movs	r1, #0
 23ff0e2:	6822      	ldr	r2, [r4, #0]
 23ff0e4:	68a3      	ldr	r3, [r4, #8]
 23ff0e6:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff0e8:	e7f2      	b.n	23ff0d0 <_ZN6String4copyEPKcj+0x18>

023ff0ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff0ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff0ec:	b513      	push	{r0, r1, r4, lr}
 23ff0ee:	4604      	mov	r4, r0
	capacity = 0;
 23ff0f0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff0f4:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff0f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff0f8:	b141      	cbz	r1, 23ff10c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff0fa:	4608      	mov	r0, r1
 23ff0fc:	9101      	str	r1, [sp, #4]
 23ff0fe:	f7fc f939 	bl	23fb374 <strlen>
 23ff102:	9901      	ldr	r1, [sp, #4]
 23ff104:	4602      	mov	r2, r0
 23ff106:	4620      	mov	r0, r4
 23ff108:	f7ff ffd6 	bl	23ff0b8 <_ZN6String4copyEPKcj>
}
 23ff10c:	4620      	mov	r0, r4
 23ff10e:	b002      	add	sp, #8
 23ff110:	bd10      	pop	{r4, pc}

023ff112 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23ff112:	b538      	push	{r3, r4, r5, lr}
 23ff114:	4605      	mov	r5, r0
	if (buffer) {
 23ff116:	6800      	ldr	r0, [r0, #0]
{
 23ff118:	460c      	mov	r4, r1
	if (buffer) {
 23ff11a:	b168      	cbz	r0, 23ff138 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23ff11c:	686a      	ldr	r2, [r5, #4]
 23ff11e:	688b      	ldr	r3, [r1, #8]
 23ff120:	429a      	cmp	r2, r3
 23ff122:	d307      	bcc.n	23ff134 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23ff124:	6809      	ldr	r1, [r1, #0]
 23ff126:	f000 fae8 	bl	23ff6fa <strcpy>
			len = rhs.len;
 23ff12a:	68a3      	ldr	r3, [r4, #8]
 23ff12c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff12e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff130:	60a3      	str	r3, [r4, #8]
}
 23ff132:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff134:	f7fc fe5a 	bl	23fbdec <free>
	buffer = rhs.buffer;
 23ff138:	6823      	ldr	r3, [r4, #0]
 23ff13a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff13c:	6863      	ldr	r3, [r4, #4]
 23ff13e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff140:	68a3      	ldr	r3, [r4, #8]
 23ff142:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff144:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff146:	e9c4 3300 	strd	r3, r3, [r4]
 23ff14a:	e7f1      	b.n	23ff130 <_ZN6String4moveERS_+0x1e>

023ff14c <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff14c:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff14e:	b510      	push	{r4, lr}
 23ff150:	4604      	mov	r4, r0
	capacity = 0;
 23ff152:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff156:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff158:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff15a:	f7ff ffda 	bl	23ff112 <_ZN6String4moveERS_>
}
 23ff15e:	4620      	mov	r0, r4
 23ff160:	bd10      	pop	{r4, pc}

023ff162 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff162:	4288      	cmp	r0, r1
{
 23ff164:	b510      	push	{r4, lr}
 23ff166:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff168:	d005      	beq.n	23ff176 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff16a:	680b      	ldr	r3, [r1, #0]
 23ff16c:	b12b      	cbz	r3, 23ff17a <_ZN6StringaSERKS_+0x18>
 23ff16e:	688a      	ldr	r2, [r1, #8]
 23ff170:	4619      	mov	r1, r3
 23ff172:	f7ff ffa1 	bl	23ff0b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff176:	4620      	mov	r0, r4
 23ff178:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff17a:	f7ff ff72 	bl	23ff062 <_ZN6String10invalidateEv>
 23ff17e:	e7fa      	b.n	23ff176 <_ZN6StringaSERKS_+0x14>

023ff180 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff180:	2300      	movs	r3, #0
String::String(const String &value)
 23ff182:	b510      	push	{r4, lr}
 23ff184:	4604      	mov	r4, r0
	capacity = 0;
 23ff186:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff18a:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff18c:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff18e:	f7ff ffe8 	bl	23ff162 <_ZN6StringaSERKS_>
}
 23ff192:	4620      	mov	r0, r4
 23ff194:	bd10      	pop	{r4, pc}

023ff196 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff196:	b570      	push	{r4, r5, r6, lr}
 23ff198:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff19a:	460e      	mov	r6, r1
 23ff19c:	b909      	cbnz	r1, 23ff1a2 <_ZN6String6concatEPKcj+0xc>
 23ff19e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff1a0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff1a2:	b16a      	cbz	r2, 23ff1c0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff1a4:	6884      	ldr	r4, [r0, #8]
 23ff1a6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff1a8:	4621      	mov	r1, r4
 23ff1aa:	f7ff ff71 	bl	23ff090 <_ZN6String7reserveEj>
 23ff1ae:	2800      	cmp	r0, #0
 23ff1b0:	d0f5      	beq.n	23ff19e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff1b2:	6828      	ldr	r0, [r5, #0]
 23ff1b4:	68ab      	ldr	r3, [r5, #8]
 23ff1b6:	4631      	mov	r1, r6
 23ff1b8:	4418      	add	r0, r3
 23ff1ba:	f000 fa9e 	bl	23ff6fa <strcpy>
	len = newlen;
 23ff1be:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff1c0:	2001      	movs	r0, #1
 23ff1c2:	e7ed      	b.n	23ff1a0 <_ZN6String6concatEPKcj+0xa>

023ff1c4 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23ff1c4:	2300      	movs	r3, #0
{
 23ff1c6:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23ff1c8:	2201      	movs	r2, #1
	buf[0] = c;
 23ff1ca:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23ff1ce:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23ff1d0:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23ff1d4:	f7ff ffdf 	bl	23ff196 <_ZN6String6concatEPKcj>
}
 23ff1d8:	b003      	add	sp, #12
 23ff1da:	f85d fb04 	ldr.w	pc, [sp], #4

023ff1de <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23ff1de:	6802      	ldr	r2, [r0, #0]
{
 23ff1e0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23ff1e2:	6809      	ldr	r1, [r1, #0]
 23ff1e4:	b162      	cbz	r2, 23ff200 <_ZNK6String9compareToERKS_+0x22>
 23ff1e6:	b941      	cbnz	r1, 23ff1fa <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23ff1e8:	6880      	ldr	r0, [r0, #8]
 23ff1ea:	b160      	cbz	r0, 23ff206 <_ZNK6String9compareToERKS_+0x28>
 23ff1ec:	7810      	ldrb	r0, [r2, #0]
 23ff1ee:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff1f0:	6898      	ldr	r0, [r3, #8]
 23ff1f2:	b140      	cbz	r0, 23ff206 <_ZNK6String9compareToERKS_+0x28>
 23ff1f4:	7809      	ldrb	r1, [r1, #0]
 23ff1f6:	4248      	negs	r0, r1
 23ff1f8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23ff1fa:	4610      	mov	r0, r2
 23ff1fc:	f7fc b8b0 	b.w	23fb360 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff200:	2900      	cmp	r1, #0
 23ff202:	d1f5      	bne.n	23ff1f0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23ff204:	4608      	mov	r0, r1
}
 23ff206:	4770      	bx	lr

023ff208 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23ff208:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23ff20a:	6882      	ldr	r2, [r0, #8]
 23ff20c:	688b      	ldr	r3, [r1, #8]
 23ff20e:	429a      	cmp	r2, r3
 23ff210:	d105      	bne.n	23ff21e <_ZNK6String6equalsERKS_+0x16>
 23ff212:	f7ff ffe4 	bl	23ff1de <_ZNK6String9compareToERKS_>
 23ff216:	fab0 f080 	clz	r0, r0
 23ff21a:	0940      	lsrs	r0, r0, #5
}
 23ff21c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23ff21e:	2000      	movs	r0, #0
 23ff220:	e7fc      	b.n	23ff21c <_ZNK6String6equalsERKS_+0x14>

023ff222 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff222:	4770      	bx	lr

023ff224 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff224:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff226:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff228:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff22a:	462a      	mov	r2, r5
 23ff22c:	2100      	movs	r1, #0
 23ff22e:	f000 fa16 	bl	23ff65e <memset>
 23ff232:	8025      	strh	r5, [r4, #0]
 23ff234:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff236:	4907      	ldr	r1, [pc, #28]	; (23ff254 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff238:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff23a:	8125      	strh	r5, [r4, #8]
 23ff23c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff23e:	f000 f8b1 	bl	23ff3a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff242:	4904      	ldr	r1, [pc, #16]	; (23ff254 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff244:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff246:	4628      	mov	r0, r5
 23ff248:	f000 f8ac 	bl	23ff3a4 <_ZnajRKSt9nothrow_t>
    };
 23ff24c:	60e0      	str	r0, [r4, #12]
}
 23ff24e:	4620      	mov	r0, r4
 23ff250:	bd38      	pop	{r3, r4, r5, pc}
 23ff252:	bf00      	nop
 23ff254:	023ffd48 	.word	0x023ffd48

023ff258 <__tcf_2>:
 23ff258:	4770      	bx	lr

023ff25a <__tcf_1>:
 23ff25a:	4770      	bx	lr

023ff25c <_Z20acquireSerial1Bufferv>:
{
 23ff25c:	b510      	push	{r4, lr}
 23ff25e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff260:	f7ff ffe0 	bl	23ff224 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff264:	4620      	mov	r0, r4
 23ff266:	bd10      	pop	{r4, pc}

023ff268 <_Z20acquireSerial2Bufferv>:
 23ff268:	b510      	push	{r4, lr}
 23ff26a:	4604      	mov	r4, r0
 23ff26c:	f7ff ffda 	bl	23ff224 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff270:	4620      	mov	r0, r4
 23ff272:	bd10      	pop	{r4, pc}

023ff274 <_Z20acquireSerial3Bufferv>:
 23ff274:	b510      	push	{r4, lr}
 23ff276:	4604      	mov	r4, r0
 23ff278:	f7ff ffd4 	bl	23ff224 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff27c:	4620      	mov	r0, r4
 23ff27e:	bd10      	pop	{r4, pc}

023ff280 <_Z22__fetch_global_Serial1v>:
{
 23ff280:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff282:	4d0e      	ldr	r5, [pc, #56]	; (23ff2bc <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff284:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff286:	e8d5 1f8f 	ldab	r1, [r5]
 23ff28a:	f011 0401 	ands.w	r4, r1, #1
 23ff28e:	d111      	bne.n	23ff2b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff290:	4628      	mov	r0, r5
 23ff292:	f7fc f8a7 	bl	23fb3e4 <__cxa_guard_acquire>
 23ff296:	b168      	cbz	r0, 23ff2b4 <_Z22__fetch_global_Serial1v+0x34>
 23ff298:	a801      	add	r0, sp, #4
 23ff29a:	f7ff ffdf 	bl	23ff25c <_Z20acquireSerial1Bufferv>
 23ff29e:	4621      	mov	r1, r4
 23ff2a0:	aa01      	add	r2, sp, #4
 23ff2a2:	4807      	ldr	r0, [pc, #28]	; (23ff2c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff2a4:	f7ff fe64 	bl	23fef70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff2a8:	4628      	mov	r0, r5
 23ff2aa:	f7fc f8a0 	bl	23fb3ee <__cxa_guard_release>
 23ff2ae:	4805      	ldr	r0, [pc, #20]	; (23ff2c4 <_Z22__fetch_global_Serial1v+0x44>)
 23ff2b0:	f000 f990 	bl	23ff5d4 <atexit>
    return serial1;
}
 23ff2b4:	4802      	ldr	r0, [pc, #8]	; (23ff2c0 <_Z22__fetch_global_Serial1v+0x40>)
 23ff2b6:	b007      	add	sp, #28
 23ff2b8:	bd30      	pop	{r4, r5, pc}
 23ff2ba:	bf00      	nop
 23ff2bc:	1007af0c 	.word	0x1007af0c
 23ff2c0:	1007af18 	.word	0x1007af18
 23ff2c4:	023ff223 	.word	0x023ff223

023ff2c8 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff2c8:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff2ca:	4c0d      	ldr	r4, [pc, #52]	; (23ff300 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff2cc:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff2ce:	e8d4 3f8f 	ldab	r3, [r4]
 23ff2d2:	07db      	lsls	r3, r3, #31
 23ff2d4:	d411      	bmi.n	23ff2fa <_Z22__fetch_global_Serial2v+0x32>
 23ff2d6:	4620      	mov	r0, r4
 23ff2d8:	f7fc f884 	bl	23fb3e4 <__cxa_guard_acquire>
 23ff2dc:	b168      	cbz	r0, 23ff2fa <_Z22__fetch_global_Serial2v+0x32>
 23ff2de:	a801      	add	r0, sp, #4
 23ff2e0:	f7ff ffc2 	bl	23ff268 <_Z20acquireSerial2Bufferv>
 23ff2e4:	2101      	movs	r1, #1
 23ff2e6:	aa01      	add	r2, sp, #4
 23ff2e8:	4806      	ldr	r0, [pc, #24]	; (23ff304 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff2ea:	f7ff fe41 	bl	23fef70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff2ee:	4620      	mov	r0, r4
 23ff2f0:	f7fc f87d 	bl	23fb3ee <__cxa_guard_release>
 23ff2f4:	4804      	ldr	r0, [pc, #16]	; (23ff308 <_Z22__fetch_global_Serial2v+0x40>)
 23ff2f6:	f000 f96d 	bl	23ff5d4 <atexit>
	return serial2;
}
 23ff2fa:	4802      	ldr	r0, [pc, #8]	; (23ff304 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff2fc:	b006      	add	sp, #24
 23ff2fe:	bd10      	pop	{r4, pc}
 23ff300:	1007af10 	.word	0x1007af10
 23ff304:	1007af2c 	.word	0x1007af2c
 23ff308:	023ff25b 	.word	0x023ff25b

023ff30c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff30c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff30e:	f7ff ffdb 	bl	23ff2c8 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff312:	4b07      	ldr	r3, [pc, #28]	; (23ff330 <_Z15serialEventRun2v+0x24>)
 23ff314:	4604      	mov	r4, r0
 23ff316:	b153      	cbz	r3, 23ff32e <_Z15serialEventRun2v+0x22>
 23ff318:	f7ff fe48 	bl	23fefac <_ZN11USARTSerial9isEnabledEv>
 23ff31c:	b138      	cbz	r0, 23ff32e <_Z15serialEventRun2v+0x22>
 23ff31e:	6823      	ldr	r3, [r4, #0]
 23ff320:	4620      	mov	r0, r4
 23ff322:	691b      	ldr	r3, [r3, #16]
 23ff324:	4798      	blx	r3
 23ff326:	2800      	cmp	r0, #0
 23ff328:	dd01      	ble.n	23ff32e <_Z15serialEventRun2v+0x22>
        handler();
 23ff32a:	e000      	b.n	23ff32e <_Z15serialEventRun2v+0x22>
 23ff32c:	bf00      	nop
}
 23ff32e:	bd10      	pop	{r4, pc}
 23ff330:	00000000 	.word	0x00000000

023ff334 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff334:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff336:	4c0d      	ldr	r4, [pc, #52]	; (23ff36c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff338:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff33a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff33e:	07db      	lsls	r3, r3, #31
 23ff340:	d411      	bmi.n	23ff366 <_Z22__fetch_global_Serial3v+0x32>
 23ff342:	4620      	mov	r0, r4
 23ff344:	f7fc f84e 	bl	23fb3e4 <__cxa_guard_acquire>
 23ff348:	b168      	cbz	r0, 23ff366 <_Z22__fetch_global_Serial3v+0x32>
 23ff34a:	a801      	add	r0, sp, #4
 23ff34c:	f7ff ff92 	bl	23ff274 <_Z20acquireSerial3Bufferv>
 23ff350:	2102      	movs	r1, #2
 23ff352:	aa01      	add	r2, sp, #4
 23ff354:	4806      	ldr	r0, [pc, #24]	; (23ff370 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff356:	f7ff fe0b 	bl	23fef70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff35a:	4620      	mov	r0, r4
 23ff35c:	f7fc f847 	bl	23fb3ee <__cxa_guard_release>
 23ff360:	4804      	ldr	r0, [pc, #16]	; (23ff374 <_Z22__fetch_global_Serial3v+0x40>)
 23ff362:	f000 f937 	bl	23ff5d4 <atexit>
	return serial3;
}
 23ff366:	4802      	ldr	r0, [pc, #8]	; (23ff370 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff368:	b006      	add	sp, #24
 23ff36a:	bd10      	pop	{r4, pc}
 23ff36c:	1007af14 	.word	0x1007af14
 23ff370:	1007af40 	.word	0x1007af40
 23ff374:	023ff259 	.word	0x023ff259

023ff378 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff378:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff37a:	f7ff ffdb 	bl	23ff334 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff37e:	4b07      	ldr	r3, [pc, #28]	; (23ff39c <_Z15serialEventRun3v+0x24>)
 23ff380:	4604      	mov	r4, r0
 23ff382:	b153      	cbz	r3, 23ff39a <_Z15serialEventRun3v+0x22>
 23ff384:	f7ff fe12 	bl	23fefac <_ZN11USARTSerial9isEnabledEv>
 23ff388:	b138      	cbz	r0, 23ff39a <_Z15serialEventRun3v+0x22>
 23ff38a:	6823      	ldr	r3, [r4, #0]
 23ff38c:	4620      	mov	r0, r4
 23ff38e:	691b      	ldr	r3, [r3, #16]
 23ff390:	4798      	blx	r3
 23ff392:	2800      	cmp	r0, #0
 23ff394:	dd01      	ble.n	23ff39a <_Z15serialEventRun3v+0x22>
        handler();
 23ff396:	e000      	b.n	23ff39a <_Z15serialEventRun3v+0x22>
 23ff398:	bf00      	nop
}
 23ff39a:	bd10      	pop	{r4, pc}
 23ff39c:	00000000 	.word	0x00000000

023ff3a0 <_ZnwjRKSt9nothrow_t>:
 23ff3a0:	f7fc b80d 	b.w	23fb3be <_Znwj>

023ff3a4 <_ZnajRKSt9nothrow_t>:
 23ff3a4:	f7fc b80d 	b.w	23fb3c2 <_Znaj>

023ff3a8 <_ZSt25__throw_bad_function_callv>:
 23ff3a8:	b508      	push	{r3, lr}
 23ff3aa:	f7fc fd49 	bl	23fbe40 <abort>
	...

023ff3b0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff3b0:	4901      	ldr	r1, [pc, #4]	; (23ff3b8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff3b2:	f000 b8f9 	b.w	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff3b6:	bf00      	nop
 23ff3b8:	023ffd64 	.word	0x023ffd64

023ff3bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff3bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff3be:	2400      	movs	r4, #0
 23ff3c0:	2310      	movs	r3, #16
 23ff3c2:	4615      	mov	r5, r2
 23ff3c4:	6812      	ldr	r2, [r2, #0]
 23ff3c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff3ca:	6803      	ldr	r3, [r0, #0]
 23ff3cc:	e9cd 4400 	strd	r4, r4, [sp]
 23ff3d0:	699e      	ldr	r6, [r3, #24]
 23ff3d2:	466b      	mov	r3, sp
 23ff3d4:	47b0      	blx	r6
 23ff3d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff3da:	f003 0306 	and.w	r3, r3, #6
 23ff3de:	2b06      	cmp	r3, #6
 23ff3e0:	bf05      	ittet	eq
 23ff3e2:	9b00      	ldreq	r3, [sp, #0]
 23ff3e4:	2001      	moveq	r0, #1
 23ff3e6:	4620      	movne	r0, r4
 23ff3e8:	602b      	streq	r3, [r5, #0]
 23ff3ea:	b004      	add	sp, #16
 23ff3ec:	bd70      	pop	{r4, r5, r6, pc}

023ff3ee <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff3ee:	9800      	ldr	r0, [sp, #0]
 23ff3f0:	4290      	cmp	r0, r2
 23ff3f2:	bf14      	ite	ne
 23ff3f4:	2001      	movne	r0, #1
 23ff3f6:	2006      	moveq	r0, #6
 23ff3f8:	4770      	bx	lr
	...

023ff3fc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff3fc:	4b03      	ldr	r3, [pc, #12]	; (23ff40c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff3fe:	b510      	push	{r4, lr}
 23ff400:	4604      	mov	r4, r0
 23ff402:	6003      	str	r3, [r0, #0]
 23ff404:	f000 f8cd 	bl	23ff5a2 <_ZNSt9type_infoD1Ev>
 23ff408:	4620      	mov	r0, r4
 23ff40a:	bd10      	pop	{r4, pc}
 23ff40c:	023ffda4 	.word	0x023ffda4

023ff410 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff410:	b510      	push	{r4, lr}
 23ff412:	4604      	mov	r4, r0
 23ff414:	f7ff fff2 	bl	23ff3fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff418:	2108      	movs	r1, #8
 23ff41a:	4620      	mov	r0, r4
 23ff41c:	f7fb ffd3 	bl	23fb3c6 <_ZdlPvj>
 23ff420:	4620      	mov	r0, r4
 23ff422:	bd10      	pop	{r4, pc}

023ff424 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff428:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff42c:	461f      	mov	r7, r3
 23ff42e:	4606      	mov	r6, r0
 23ff430:	4615      	mov	r5, r2
 23ff432:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff436:	4598      	cmp	r8, r3
 23ff438:	d107      	bne.n	23ff44a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff43a:	9907      	ldr	r1, [sp, #28]
 23ff43c:	f000 f8b4 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff440:	b118      	cbz	r0, 23ff44a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff442:	7165      	strb	r5, [r4, #5]
 23ff444:	2000      	movs	r0, #0
 23ff446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff44a:	4639      	mov	r1, r7
 23ff44c:	4630      	mov	r0, r6
 23ff44e:	f000 f8ab 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff452:	2800      	cmp	r0, #0
 23ff454:	d0f6      	beq.n	23ff444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff456:	2301      	movs	r3, #1
 23ff458:	f8c4 8000 	str.w	r8, [r4]
 23ff45c:	7125      	strb	r5, [r4, #4]
 23ff45e:	71a3      	strb	r3, [r4, #6]
 23ff460:	e7f0      	b.n	23ff444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff462 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff462:	b538      	push	{r3, r4, r5, lr}
 23ff464:	4615      	mov	r5, r2
 23ff466:	461c      	mov	r4, r3
 23ff468:	f000 f89e 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff46c:	b120      	cbz	r0, 23ff478 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff46e:	2308      	movs	r3, #8
 23ff470:	6025      	str	r5, [r4, #0]
 23ff472:	60e3      	str	r3, [r4, #12]
 23ff474:	2306      	movs	r3, #6
 23ff476:	7123      	strb	r3, [r4, #4]
 23ff478:	bd38      	pop	{r3, r4, r5, pc}

023ff47a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff47c:	4605      	mov	r5, r0
 23ff47e:	460c      	mov	r4, r1
 23ff480:	461e      	mov	r6, r3
 23ff482:	9201      	str	r2, [sp, #4]
 23ff484:	f000 f890 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff488:	b950      	cbnz	r0, 23ff4a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff48a:	2e03      	cmp	r6, #3
 23ff48c:	d808      	bhi.n	23ff4a0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff48e:	6823      	ldr	r3, [r4, #0]
 23ff490:	4629      	mov	r1, r5
 23ff492:	9a01      	ldr	r2, [sp, #4]
 23ff494:	4620      	mov	r0, r4
 23ff496:	695b      	ldr	r3, [r3, #20]
 23ff498:	b002      	add	sp, #8
 23ff49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff49e:	4718      	bx	r3
 23ff4a0:	b002      	add	sp, #8
 23ff4a2:	bd70      	pop	{r4, r5, r6, pc}

023ff4a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff4a4:	4b03      	ldr	r3, [pc, #12]	; (23ff4b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff4a6:	b510      	push	{r4, lr}
 23ff4a8:	4604      	mov	r4, r0
 23ff4aa:	6003      	str	r3, [r0, #0]
 23ff4ac:	f7ff ffa6 	bl	23ff3fc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff4b0:	4620      	mov	r0, r4
 23ff4b2:	bd10      	pop	{r4, pc}
 23ff4b4:	023ffe04 	.word	0x023ffe04

023ff4b8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff4b8:	b510      	push	{r4, lr}
 23ff4ba:	4604      	mov	r4, r0
 23ff4bc:	f7ff fff2 	bl	23ff4a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff4c0:	210c      	movs	r1, #12
 23ff4c2:	4620      	mov	r0, r4
 23ff4c4:	f7fb ff7f 	bl	23fb3c6 <_ZdlPvj>
 23ff4c8:	4620      	mov	r0, r4
 23ff4ca:	bd10      	pop	{r4, pc}

023ff4cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff4cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff4ce:	9f08      	ldr	r7, [sp, #32]
 23ff4d0:	4605      	mov	r5, r0
 23ff4d2:	460e      	mov	r6, r1
 23ff4d4:	4614      	mov	r4, r2
 23ff4d6:	4297      	cmp	r7, r2
 23ff4d8:	d00a      	beq.n	23ff4f0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff4da:	68a8      	ldr	r0, [r5, #8]
 23ff4dc:	4631      	mov	r1, r6
 23ff4de:	6802      	ldr	r2, [r0, #0]
 23ff4e0:	9708      	str	r7, [sp, #32]
 23ff4e2:	6a15      	ldr	r5, [r2, #32]
 23ff4e4:	4622      	mov	r2, r4
 23ff4e6:	46ac      	mov	ip, r5
 23ff4e8:	b003      	add	sp, #12
 23ff4ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff4ee:	4760      	bx	ip
 23ff4f0:	4619      	mov	r1, r3
 23ff4f2:	9301      	str	r3, [sp, #4]
 23ff4f4:	f000 f858 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff4f8:	9b01      	ldr	r3, [sp, #4]
 23ff4fa:	2800      	cmp	r0, #0
 23ff4fc:	d0ed      	beq.n	23ff4da <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff4fe:	2006      	movs	r0, #6
 23ff500:	b003      	add	sp, #12
 23ff502:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff504 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff504:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff508:	460d      	mov	r5, r1
 23ff50a:	4619      	mov	r1, r3
 23ff50c:	4681      	mov	r9, r0
 23ff50e:	4617      	mov	r7, r2
 23ff510:	4698      	mov	r8, r3
 23ff512:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff516:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff51a:	f000 f845 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff51e:	b190      	cbz	r0, 23ff546 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff520:	2d00      	cmp	r5, #0
 23ff522:	6034      	str	r4, [r6, #0]
 23ff524:	7137      	strb	r7, [r6, #4]
 23ff526:	db09      	blt.n	23ff53c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff528:	1961      	adds	r1, r4, r5
 23ff52a:	458a      	cmp	sl, r1
 23ff52c:	bf0c      	ite	eq
 23ff52e:	2106      	moveq	r1, #6
 23ff530:	2101      	movne	r1, #1
 23ff532:	71b1      	strb	r1, [r6, #6]
 23ff534:	2000      	movs	r0, #0
 23ff536:	b001      	add	sp, #4
 23ff538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff53c:	3502      	adds	r5, #2
 23ff53e:	d1f9      	bne.n	23ff534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff540:	2301      	movs	r3, #1
 23ff542:	71b3      	strb	r3, [r6, #6]
 23ff544:	e7f6      	b.n	23ff534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff546:	4554      	cmp	r4, sl
 23ff548:	d106      	bne.n	23ff558 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff54a:	4659      	mov	r1, fp
 23ff54c:	4648      	mov	r0, r9
 23ff54e:	f000 f82b 	bl	23ff5a8 <_ZNKSt9type_infoeqERKS_>
 23ff552:	b108      	cbz	r0, 23ff558 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff554:	7177      	strb	r7, [r6, #5]
 23ff556:	e7ed      	b.n	23ff534 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff558:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff55c:	463a      	mov	r2, r7
 23ff55e:	4629      	mov	r1, r5
 23ff560:	6803      	ldr	r3, [r0, #0]
 23ff562:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff566:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff56a:	69dc      	ldr	r4, [r3, #28]
 23ff56c:	4643      	mov	r3, r8
 23ff56e:	46a4      	mov	ip, r4
 23ff570:	b001      	add	sp, #4
 23ff572:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff576:	4760      	bx	ip

023ff578 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff57c:	4607      	mov	r7, r0
 23ff57e:	460c      	mov	r4, r1
 23ff580:	4615      	mov	r5, r2
 23ff582:	461e      	mov	r6, r3
 23ff584:	f7ff ff6d 	bl	23ff462 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff588:	b948      	cbnz	r0, 23ff59e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff58a:	68b8      	ldr	r0, [r7, #8]
 23ff58c:	462a      	mov	r2, r5
 23ff58e:	4621      	mov	r1, r4
 23ff590:	6803      	ldr	r3, [r0, #0]
 23ff592:	699f      	ldr	r7, [r3, #24]
 23ff594:	4633      	mov	r3, r6
 23ff596:	46bc      	mov	ip, r7
 23ff598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff59c:	4760      	bx	ip
 23ff59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff5a2 <_ZNSt9type_infoD1Ev>:
 23ff5a2:	4770      	bx	lr

023ff5a4 <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff5a4:	2000      	movs	r0, #0
 23ff5a6:	4770      	bx	lr

023ff5a8 <_ZNKSt9type_infoeqERKS_>:
 23ff5a8:	4281      	cmp	r1, r0
 23ff5aa:	b508      	push	{r3, lr}
 23ff5ac:	d00e      	beq.n	23ff5cc <_ZNKSt9type_infoeqERKS_+0x24>
 23ff5ae:	6840      	ldr	r0, [r0, #4]
 23ff5b0:	7803      	ldrb	r3, [r0, #0]
 23ff5b2:	2b2a      	cmp	r3, #42	; 0x2a
 23ff5b4:	d00c      	beq.n	23ff5d0 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff5b6:	6849      	ldr	r1, [r1, #4]
 23ff5b8:	780b      	ldrb	r3, [r1, #0]
 23ff5ba:	2b2a      	cmp	r3, #42	; 0x2a
 23ff5bc:	bf08      	it	eq
 23ff5be:	3101      	addeq	r1, #1
 23ff5c0:	f7fb fece 	bl	23fb360 <strcmp>
 23ff5c4:	fab0 f080 	clz	r0, r0
 23ff5c8:	0940      	lsrs	r0, r0, #5
 23ff5ca:	bd08      	pop	{r3, pc}
 23ff5cc:	2001      	movs	r0, #1
 23ff5ce:	e7fc      	b.n	23ff5ca <_ZNKSt9type_infoeqERKS_+0x22>
 23ff5d0:	2000      	movs	r0, #0
 23ff5d2:	e7fa      	b.n	23ff5ca <_ZNKSt9type_infoeqERKS_+0x22>

023ff5d4 <atexit>:
 23ff5d4:	2300      	movs	r3, #0
 23ff5d6:	4601      	mov	r1, r0
 23ff5d8:	461a      	mov	r2, r3
 23ff5da:	4618      	mov	r0, r3
 23ff5dc:	f000 b94a 	b.w	23ff874 <__register_exitproc>

023ff5e0 <isprint>:
 23ff5e0:	4b02      	ldr	r3, [pc, #8]	; (23ff5ec <isprint+0xc>)
 23ff5e2:	4418      	add	r0, r3
 23ff5e4:	7840      	ldrb	r0, [r0, #1]
 23ff5e6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff5ea:	4770      	bx	lr
 23ff5ec:	023ffed1 	.word	0x023ffed1

023ff5f0 <memcmp>:
 23ff5f0:	3901      	subs	r1, #1
 23ff5f2:	4402      	add	r2, r0
 23ff5f4:	b510      	push	{r4, lr}
 23ff5f6:	4290      	cmp	r0, r2
 23ff5f8:	d101      	bne.n	23ff5fe <memcmp+0xe>
 23ff5fa:	2000      	movs	r0, #0
 23ff5fc:	e005      	b.n	23ff60a <memcmp+0x1a>
 23ff5fe:	7803      	ldrb	r3, [r0, #0]
 23ff600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff604:	42a3      	cmp	r3, r4
 23ff606:	d001      	beq.n	23ff60c <memcmp+0x1c>
 23ff608:	1b18      	subs	r0, r3, r4
 23ff60a:	bd10      	pop	{r4, pc}
 23ff60c:	3001      	adds	r0, #1
 23ff60e:	e7f2      	b.n	23ff5f6 <memcmp+0x6>

023ff610 <memcpy>:
 23ff610:	440a      	add	r2, r1
 23ff612:	1e43      	subs	r3, r0, #1
 23ff614:	4291      	cmp	r1, r2
 23ff616:	d100      	bne.n	23ff61a <memcpy+0xa>
 23ff618:	4770      	bx	lr
 23ff61a:	b510      	push	{r4, lr}
 23ff61c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff620:	4291      	cmp	r1, r2
 23ff622:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff626:	d1f9      	bne.n	23ff61c <memcpy+0xc>
 23ff628:	bd10      	pop	{r4, pc}

023ff62a <memmove>:
 23ff62a:	4288      	cmp	r0, r1
 23ff62c:	b510      	push	{r4, lr}
 23ff62e:	eb01 0402 	add.w	r4, r1, r2
 23ff632:	d902      	bls.n	23ff63a <memmove+0x10>
 23ff634:	4284      	cmp	r4, r0
 23ff636:	4623      	mov	r3, r4
 23ff638:	d807      	bhi.n	23ff64a <memmove+0x20>
 23ff63a:	1e43      	subs	r3, r0, #1
 23ff63c:	42a1      	cmp	r1, r4
 23ff63e:	d008      	beq.n	23ff652 <memmove+0x28>
 23ff640:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff644:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff648:	e7f8      	b.n	23ff63c <memmove+0x12>
 23ff64a:	4402      	add	r2, r0
 23ff64c:	4601      	mov	r1, r0
 23ff64e:	428a      	cmp	r2, r1
 23ff650:	d100      	bne.n	23ff654 <memmove+0x2a>
 23ff652:	bd10      	pop	{r4, pc}
 23ff654:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff658:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff65c:	e7f7      	b.n	23ff64e <memmove+0x24>

023ff65e <memset>:
 23ff65e:	4402      	add	r2, r0
 23ff660:	4603      	mov	r3, r0
 23ff662:	4293      	cmp	r3, r2
 23ff664:	d100      	bne.n	23ff668 <memset+0xa>
 23ff666:	4770      	bx	lr
 23ff668:	f803 1b01 	strb.w	r1, [r3], #1
 23ff66c:	e7f9      	b.n	23ff662 <memset+0x4>
	...

023ff670 <srand>:
 23ff670:	b538      	push	{r3, r4, r5, lr}
 23ff672:	4b10      	ldr	r3, [pc, #64]	; (23ff6b4 <srand+0x44>)
 23ff674:	4604      	mov	r4, r0
 23ff676:	681d      	ldr	r5, [r3, #0]
 23ff678:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff67a:	b9b3      	cbnz	r3, 23ff6aa <srand+0x3a>
 23ff67c:	2018      	movs	r0, #24
 23ff67e:	f7fc fba7 	bl	23fbdd0 <malloc>
 23ff682:	4602      	mov	r2, r0
 23ff684:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff686:	b920      	cbnz	r0, 23ff692 <srand+0x22>
 23ff688:	4b0b      	ldr	r3, [pc, #44]	; (23ff6b8 <srand+0x48>)
 23ff68a:	2142      	movs	r1, #66	; 0x42
 23ff68c:	480b      	ldr	r0, [pc, #44]	; (23ff6bc <srand+0x4c>)
 23ff68e:	f7fc fbf3 	bl	23fbe78 <__assert_func>
 23ff692:	490b      	ldr	r1, [pc, #44]	; (23ff6c0 <srand+0x50>)
 23ff694:	4b0b      	ldr	r3, [pc, #44]	; (23ff6c4 <srand+0x54>)
 23ff696:	e9c0 1300 	strd	r1, r3, [r0]
 23ff69a:	4b0b      	ldr	r3, [pc, #44]	; (23ff6c8 <srand+0x58>)
 23ff69c:	2100      	movs	r1, #0
 23ff69e:	6083      	str	r3, [r0, #8]
 23ff6a0:	230b      	movs	r3, #11
 23ff6a2:	8183      	strh	r3, [r0, #12]
 23ff6a4:	2001      	movs	r0, #1
 23ff6a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff6aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff6ac:	2200      	movs	r2, #0
 23ff6ae:	611c      	str	r4, [r3, #16]
 23ff6b0:	615a      	str	r2, [r3, #20]
 23ff6b2:	bd38      	pop	{r3, r4, r5, pc}
 23ff6b4:	1007a984 	.word	0x1007a984
 23ff6b8:	023ffe3d 	.word	0x023ffe3d
 23ff6bc:	023ffe54 	.word	0x023ffe54
 23ff6c0:	abcd330e 	.word	0xabcd330e
 23ff6c4:	e66d1234 	.word	0xe66d1234
 23ff6c8:	0005deec 	.word	0x0005deec

023ff6cc <strchr>:
 23ff6cc:	b2c9      	uxtb	r1, r1
 23ff6ce:	4603      	mov	r3, r0
 23ff6d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff6d4:	b11a      	cbz	r2, 23ff6de <strchr+0x12>
 23ff6d6:	428a      	cmp	r2, r1
 23ff6d8:	d1f9      	bne.n	23ff6ce <strchr+0x2>
 23ff6da:	4618      	mov	r0, r3
 23ff6dc:	4770      	bx	lr
 23ff6de:	2900      	cmp	r1, #0
 23ff6e0:	bf18      	it	ne
 23ff6e2:	2300      	movne	r3, #0
 23ff6e4:	e7f9      	b.n	23ff6da <strchr+0xe>

023ff6e6 <strchrnul>:
 23ff6e6:	b510      	push	{r4, lr}
 23ff6e8:	4604      	mov	r4, r0
 23ff6ea:	f7ff ffef 	bl	23ff6cc <strchr>
 23ff6ee:	b918      	cbnz	r0, 23ff6f8 <strchrnul+0x12>
 23ff6f0:	4620      	mov	r0, r4
 23ff6f2:	f7fb fe3f 	bl	23fb374 <strlen>
 23ff6f6:	4420      	add	r0, r4
 23ff6f8:	bd10      	pop	{r4, pc}

023ff6fa <strcpy>:
 23ff6fa:	4603      	mov	r3, r0
 23ff6fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff700:	f803 2b01 	strb.w	r2, [r3], #1
 23ff704:	2a00      	cmp	r2, #0
 23ff706:	d1f9      	bne.n	23ff6fc <strcpy+0x2>
 23ff708:	4770      	bx	lr

023ff70a <strncmp>:
 23ff70a:	b510      	push	{r4, lr}
 23ff70c:	b17a      	cbz	r2, 23ff72e <strncmp+0x24>
 23ff70e:	4603      	mov	r3, r0
 23ff710:	3901      	subs	r1, #1
 23ff712:	1884      	adds	r4, r0, r2
 23ff714:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff718:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff71c:	4290      	cmp	r0, r2
 23ff71e:	d101      	bne.n	23ff724 <strncmp+0x1a>
 23ff720:	42a3      	cmp	r3, r4
 23ff722:	d101      	bne.n	23ff728 <strncmp+0x1e>
 23ff724:	1a80      	subs	r0, r0, r2
 23ff726:	bd10      	pop	{r4, pc}
 23ff728:	2800      	cmp	r0, #0
 23ff72a:	d1f3      	bne.n	23ff714 <strncmp+0xa>
 23ff72c:	e7fa      	b.n	23ff724 <strncmp+0x1a>
 23ff72e:	4610      	mov	r0, r2
 23ff730:	e7f9      	b.n	23ff726 <strncmp+0x1c>

023ff732 <strrchr>:
 23ff732:	b538      	push	{r3, r4, r5, lr}
 23ff734:	4603      	mov	r3, r0
 23ff736:	460c      	mov	r4, r1
 23ff738:	b969      	cbnz	r1, 23ff756 <strrchr+0x24>
 23ff73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff73e:	f7ff bfc5 	b.w	23ff6cc <strchr>
 23ff742:	1c43      	adds	r3, r0, #1
 23ff744:	4605      	mov	r5, r0
 23ff746:	4621      	mov	r1, r4
 23ff748:	4618      	mov	r0, r3
 23ff74a:	f7ff ffbf 	bl	23ff6cc <strchr>
 23ff74e:	2800      	cmp	r0, #0
 23ff750:	d1f7      	bne.n	23ff742 <strrchr+0x10>
 23ff752:	4628      	mov	r0, r5
 23ff754:	bd38      	pop	{r3, r4, r5, pc}
 23ff756:	2500      	movs	r5, #0
 23ff758:	e7f5      	b.n	23ff746 <strrchr+0x14>
	...

023ff75c <_strtol_l.constprop.0>:
 23ff75c:	2b01      	cmp	r3, #1
 23ff75e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff762:	d001      	beq.n	23ff768 <_strtol_l.constprop.0+0xc>
 23ff764:	2b24      	cmp	r3, #36	; 0x24
 23ff766:	d906      	bls.n	23ff776 <_strtol_l.constprop.0+0x1a>
 23ff768:	f7fc fb78 	bl	23fbe5c <__errno>
 23ff76c:	2316      	movs	r3, #22
 23ff76e:	6003      	str	r3, [r0, #0]
 23ff770:	2000      	movs	r0, #0
 23ff772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff776:	460d      	mov	r5, r1
 23ff778:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff85c <_strtol_l.constprop.0+0x100>
 23ff77c:	462e      	mov	r6, r5
 23ff77e:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff782:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff786:	f017 0708 	ands.w	r7, r7, #8
 23ff78a:	d1f7      	bne.n	23ff77c <_strtol_l.constprop.0+0x20>
 23ff78c:	2c2d      	cmp	r4, #45	; 0x2d
 23ff78e:	d132      	bne.n	23ff7f6 <_strtol_l.constprop.0+0x9a>
 23ff790:	782c      	ldrb	r4, [r5, #0]
 23ff792:	2701      	movs	r7, #1
 23ff794:	1cb5      	adds	r5, r6, #2
 23ff796:	2b00      	cmp	r3, #0
 23ff798:	d05b      	beq.n	23ff852 <_strtol_l.constprop.0+0xf6>
 23ff79a:	2b10      	cmp	r3, #16
 23ff79c:	d109      	bne.n	23ff7b2 <_strtol_l.constprop.0+0x56>
 23ff79e:	2c30      	cmp	r4, #48	; 0x30
 23ff7a0:	d107      	bne.n	23ff7b2 <_strtol_l.constprop.0+0x56>
 23ff7a2:	782c      	ldrb	r4, [r5, #0]
 23ff7a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff7a8:	2c58      	cmp	r4, #88	; 0x58
 23ff7aa:	d14d      	bne.n	23ff848 <_strtol_l.constprop.0+0xec>
 23ff7ac:	786c      	ldrb	r4, [r5, #1]
 23ff7ae:	2310      	movs	r3, #16
 23ff7b0:	3502      	adds	r5, #2
 23ff7b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff7b6:	f04f 0c00 	mov.w	ip, #0
 23ff7ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff7be:	4666      	mov	r6, ip
 23ff7c0:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff7c4:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff7c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff7cc:	f1be 0f09 	cmp.w	lr, #9
 23ff7d0:	d816      	bhi.n	23ff800 <_strtol_l.constprop.0+0xa4>
 23ff7d2:	4674      	mov	r4, lr
 23ff7d4:	42a3      	cmp	r3, r4
 23ff7d6:	dd24      	ble.n	23ff822 <_strtol_l.constprop.0+0xc6>
 23ff7d8:	f1bc 0f00 	cmp.w	ip, #0
 23ff7dc:	db1e      	blt.n	23ff81c <_strtol_l.constprop.0+0xc0>
 23ff7de:	45b1      	cmp	r9, r6
 23ff7e0:	d31c      	bcc.n	23ff81c <_strtol_l.constprop.0+0xc0>
 23ff7e2:	d101      	bne.n	23ff7e8 <_strtol_l.constprop.0+0x8c>
 23ff7e4:	45a2      	cmp	sl, r4
 23ff7e6:	db19      	blt.n	23ff81c <_strtol_l.constprop.0+0xc0>
 23ff7e8:	fb06 4603 	mla	r6, r6, r3, r4
 23ff7ec:	f04f 0c01 	mov.w	ip, #1
 23ff7f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff7f4:	e7e8      	b.n	23ff7c8 <_strtol_l.constprop.0+0x6c>
 23ff7f6:	2c2b      	cmp	r4, #43	; 0x2b
 23ff7f8:	bf04      	itt	eq
 23ff7fa:	782c      	ldrbeq	r4, [r5, #0]
 23ff7fc:	1cb5      	addeq	r5, r6, #2
 23ff7fe:	e7ca      	b.n	23ff796 <_strtol_l.constprop.0+0x3a>
 23ff800:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff804:	f1be 0f19 	cmp.w	lr, #25
 23ff808:	d801      	bhi.n	23ff80e <_strtol_l.constprop.0+0xb2>
 23ff80a:	3c37      	subs	r4, #55	; 0x37
 23ff80c:	e7e2      	b.n	23ff7d4 <_strtol_l.constprop.0+0x78>
 23ff80e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff812:	f1be 0f19 	cmp.w	lr, #25
 23ff816:	d804      	bhi.n	23ff822 <_strtol_l.constprop.0+0xc6>
 23ff818:	3c57      	subs	r4, #87	; 0x57
 23ff81a:	e7db      	b.n	23ff7d4 <_strtol_l.constprop.0+0x78>
 23ff81c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff820:	e7e6      	b.n	23ff7f0 <_strtol_l.constprop.0+0x94>
 23ff822:	f1bc 0f00 	cmp.w	ip, #0
 23ff826:	da05      	bge.n	23ff834 <_strtol_l.constprop.0+0xd8>
 23ff828:	2322      	movs	r3, #34	; 0x22
 23ff82a:	4646      	mov	r6, r8
 23ff82c:	6003      	str	r3, [r0, #0]
 23ff82e:	b942      	cbnz	r2, 23ff842 <_strtol_l.constprop.0+0xe6>
 23ff830:	4630      	mov	r0, r6
 23ff832:	e79e      	b.n	23ff772 <_strtol_l.constprop.0+0x16>
 23ff834:	b107      	cbz	r7, 23ff838 <_strtol_l.constprop.0+0xdc>
 23ff836:	4276      	negs	r6, r6
 23ff838:	2a00      	cmp	r2, #0
 23ff83a:	d0f9      	beq.n	23ff830 <_strtol_l.constprop.0+0xd4>
 23ff83c:	f1bc 0f00 	cmp.w	ip, #0
 23ff840:	d000      	beq.n	23ff844 <_strtol_l.constprop.0+0xe8>
 23ff842:	1e69      	subs	r1, r5, #1
 23ff844:	6011      	str	r1, [r2, #0]
 23ff846:	e7f3      	b.n	23ff830 <_strtol_l.constprop.0+0xd4>
 23ff848:	2430      	movs	r4, #48	; 0x30
 23ff84a:	2b00      	cmp	r3, #0
 23ff84c:	d1b1      	bne.n	23ff7b2 <_strtol_l.constprop.0+0x56>
 23ff84e:	2308      	movs	r3, #8
 23ff850:	e7af      	b.n	23ff7b2 <_strtol_l.constprop.0+0x56>
 23ff852:	2c30      	cmp	r4, #48	; 0x30
 23ff854:	d0a5      	beq.n	23ff7a2 <_strtol_l.constprop.0+0x46>
 23ff856:	230a      	movs	r3, #10
 23ff858:	e7ab      	b.n	23ff7b2 <_strtol_l.constprop.0+0x56>
 23ff85a:	bf00      	nop
 23ff85c:	023ffed2 	.word	0x023ffed2

023ff860 <strtol>:
 23ff860:	4613      	mov	r3, r2
 23ff862:	460a      	mov	r2, r1
 23ff864:	4601      	mov	r1, r0
 23ff866:	4802      	ldr	r0, [pc, #8]	; (23ff870 <strtol+0x10>)
 23ff868:	6800      	ldr	r0, [r0, #0]
 23ff86a:	f7ff bf77 	b.w	23ff75c <_strtol_l.constprop.0>
 23ff86e:	bf00      	nop
 23ff870:	1007a984 	.word	0x1007a984

023ff874 <__register_exitproc>:
 23ff874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff878:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff938 <__register_exitproc+0xc4>
 23ff87c:	4606      	mov	r6, r0
 23ff87e:	461f      	mov	r7, r3
 23ff880:	460d      	mov	r5, r1
 23ff882:	f8d8 0000 	ldr.w	r0, [r8]
 23ff886:	4691      	mov	r9, r2
 23ff888:	f000 f858 	bl	23ff93c <__retarget_lock_acquire_recursive>
 23ff88c:	4b26      	ldr	r3, [pc, #152]	; (23ff928 <__register_exitproc+0xb4>)
 23ff88e:	681c      	ldr	r4, [r3, #0]
 23ff890:	b934      	cbnz	r4, 23ff8a0 <__register_exitproc+0x2c>
 23ff892:	4c26      	ldr	r4, [pc, #152]	; (23ff92c <__register_exitproc+0xb8>)
 23ff894:	601c      	str	r4, [r3, #0]
 23ff896:	4b26      	ldr	r3, [pc, #152]	; (23ff930 <__register_exitproc+0xbc>)
 23ff898:	b113      	cbz	r3, 23ff8a0 <__register_exitproc+0x2c>
 23ff89a:	681b      	ldr	r3, [r3, #0]
 23ff89c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff8a0:	6863      	ldr	r3, [r4, #4]
 23ff8a2:	2b1f      	cmp	r3, #31
 23ff8a4:	dd07      	ble.n	23ff8b6 <__register_exitproc+0x42>
 23ff8a6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8aa:	f000 f849 	bl	23ff940 <__retarget_lock_release_recursive>
 23ff8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff8b6:	b35e      	cbz	r6, 23ff910 <__register_exitproc+0x9c>
 23ff8b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff8bc:	b988      	cbnz	r0, 23ff8e2 <__register_exitproc+0x6e>
 23ff8be:	4b1d      	ldr	r3, [pc, #116]	; (23ff934 <__register_exitproc+0xc0>)
 23ff8c0:	b923      	cbnz	r3, 23ff8cc <__register_exitproc+0x58>
 23ff8c2:	f8d8 0000 	ldr.w	r0, [r8]
 23ff8c6:	f000 f83a 	bl	23ff93e <__retarget_lock_release>
 23ff8ca:	e7f0      	b.n	23ff8ae <__register_exitproc+0x3a>
 23ff8cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff8d0:	f7fc fa7e 	bl	23fbdd0 <malloc>
 23ff8d4:	2800      	cmp	r0, #0
 23ff8d6:	d0f4      	beq.n	23ff8c2 <__register_exitproc+0x4e>
 23ff8d8:	2300      	movs	r3, #0
 23ff8da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff8de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff8e2:	6863      	ldr	r3, [r4, #4]
 23ff8e4:	2201      	movs	r2, #1
 23ff8e6:	2e02      	cmp	r6, #2
 23ff8e8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff8ec:	fa02 f203 	lsl.w	r2, r2, r3
 23ff8f0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff8f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff8f8:	ea43 0302 	orr.w	r3, r3, r2
 23ff8fc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff900:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff904:	bf02      	ittt	eq
 23ff906:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff90a:	4313      	orreq	r3, r2
 23ff90c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff910:	6863      	ldr	r3, [r4, #4]
 23ff912:	f8d8 0000 	ldr.w	r0, [r8]
 23ff916:	1c5a      	adds	r2, r3, #1
 23ff918:	3302      	adds	r3, #2
 23ff91a:	6062      	str	r2, [r4, #4]
 23ff91c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff920:	f000 f80e 	bl	23ff940 <__retarget_lock_release_recursive>
 23ff924:	2000      	movs	r0, #0
 23ff926:	e7c4      	b.n	23ff8b2 <__register_exitproc+0x3e>
 23ff928:	1007afe0 	.word	0x1007afe0
 23ff92c:	1007af54 	.word	0x1007af54
 23ff930:	00000000 	.word	0x00000000
 23ff934:	023fbdd1 	.word	0x023fbdd1
 23ff938:	1007a9e8 	.word	0x1007a9e8

023ff93c <__retarget_lock_acquire_recursive>:
 23ff93c:	4770      	bx	lr

023ff93e <__retarget_lock_release>:
 23ff93e:	4770      	bx	lr

023ff940 <__retarget_lock_release_recursive>:
 23ff940:	4770      	bx	lr
	...

023ff944 <link_const_data_start>:
 23ff944:	00000000 	.word	0x00000000
 23ff948:	34fb0000 	.word	0x34fb0000
 23ff94c:	00805f9b 	.word	0x00805f9b
 23ff950:	10008000 	.word	0x10008000
	...

023ff95c <dynalib_user>:
 23ff95c:	023fb385 023fb3ad 023fb3b1 00000000     ..?...?...?.....
 23ff96c:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff97c:	6c617574 6c6f6300 6f43726f 203a6564     tual.colorCode: 
 23ff98c:	6c257830 73722078 253d6973 64612064     0x%lx rssi=%d ad
 23ff99c:	73657264 30253d73 253a5832 3a583230     dress=%02X:%02X:
 23ff9ac:	58323025 3230253a 30253a58 253a5832     %02X:%02X:%02X:%
 23ff9bc:	20583230 00000000                       02X ....

023ff9c4 <_ZTVN5spark10LogHandlerE>:
	...
 23ff9d4:	023fb3cd 023fb3f5                       ..?...?.

023ff9dc <_ZTVN8particle9LEDStatusE>:
	...
 23ff9e4:	023fb3f9 023fb415 023fb3f7              ..?...?...?.

023ff9f0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ff9f8:	023fb429 023fb45d 023fd491 023fd639     ).?.].?...?.9.?.

023ffa08 <_ZTVN5spark12NetworkClassE>:
	...
 23ffa10:	023fbf01 023fbf0b 023fbf15 023fbf1f     ..?...?...?...?.
 23ffa20:	023fbf29 023fbf35 023fbf41 023fbf49     ).?.5.?.A.?.I.?.
 23ffa30:	023fbf51 023fbf5d 023fbf65 023fbf6f     Q.?.].?.e.?.o.?.
 23ffa40:	023fbf79                                y.?.

023ffa44 <_ZTVN5spark9WiFiClassE>:
	...
 23ffa4c:	023fc0c3 023fc0b9 023fc0af 023fc065     ..?...?...?.e.?.
 23ffa5c:	023fc0a3 023fc097 023fbf41 023fbf49     ..?...?.A.?.I.?.
 23ffa6c:	023fc08b 023fc083 023fc079 023fc06f     ..?...?.y.?.o.?.
 23ffa7c:	023fbf79                                y.?.

023ffa80 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ffa88:	25006425 25750075 00783430              %d.%u.u%04x.

023ffa94 <_ZTV9USBSerial>:
	...
 23ffa9c:	023fc4cf 023fc537 023fc50d 023fd7e5     ..?.7.?...?...?.
 23ffaac:	023fc4ff 023fc4d1 023fc4e1 023fc531     ..?...?...?.1.?.
 23ffabc:	023fc4f1 023fc4c9                       ..?...?.

023ffac4 <_ZTV9IPAddress>:
	...
 23ffacc:	023fc5e5 023fc5d5 023fc5d7 252d5925     ..?...?...?.%Y-%
 23ffadc:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffaec:	74637361 00656d69 64756162 72655300     asctime.baud.Ser
 23ffafc:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ffb0c:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ffb1c:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ffb2c:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ffb3c:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ffb4c:	6d000a0d 6c006600 6e66006e 63007400     ...m.f.ln.fn.t.c
 23ffb5c:	0065646f 61746564 00006c69              ode.detail..

023ffb68 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb70:	023fc865 023fc88b 023fc849 023fc10f     e.?...?.I.?...?.

023ffb80 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb88:	023fcd3d 023fcd55 023fd491 023fd639     =.?.U.?...?.9.?.

023ffb98 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffba0:	023fcd69 023fcd7d 023fd671 023fc851     i.?.}.?.q.?.Q.?.

023ffbb0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbb8:	023fc863 023fc899 023fd3f5 023fc853     c.?...?...?.S.?.

023ffbc8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbd0:	023fc861 023fc8a7 023fcc81 023fc8c9     a.?...?...?...?.
 23ffbe0:	65737341 6f697472 6961466e 6572756c     AssertionFailure
 23ffbf0:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
 23ffc00:	74530065 20747261 63736964 7265766f     e.Start discover
 23ffc10:	20676e69 76726573 73656369 ffff002e     ing services....
 23ffc20:	ffffffff 73734100 69747265 61466e6f     .....AssertionFa
 23ffc30:	72756c69 61682065 6c625f6c 74735f65     ilure hal_ble_st
 23ffc40:	5f6b6361 74696e69 6c756e28 7274706c     ack_init(nullptr
 23ffc50:	3d3d2029 53595320 5f4d4554 4f525245     ) == SYSTEM_ERRO
 23ffc60:	4f4e5f52 4600454e 656c6961 6f742064     R_NONE.Failed to
 23ffc70:	6c6c6120 7461636f 656d2065 79726f6d      allocate memory
 23ffc80:	61460021 64656c69 206f7420 65707061     !.Failed to appe
 23ffc90:	7020646e 20726565 746e6543 206c6172     nd peer Central 
 23ffca0:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
 23ffcb0:	69440064 6e6f6373 7463656e 00006465     d.Disconnected..

023ffcc0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffcc8:	023fd877 023fd899 023fdf5b 023fd8a7     w.?...?.[.?...?.
 23ffcd8:	023fd879                                y.?.

023ffcdc <_ZTV11USARTSerial>:
	...
 23ffce4:	023feef5 023fef61 023fef39 023fd7e5     ..?.a.?.9.?...?.
 23ffcf4:	023fef09 023fef25 023fef17 023fef33     ..?.%.?...?.3.?.
 23ffd04:	023feef7 023feefb                       ..?...?.

023ffd0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffd14:	023ff037 023ff02d 023ff023 023ff019     7.?.-.?.#.?...?.
 23ffd24:	023ff00d 023ff001 023fbf41 023fbf49     ..?...?.A.?.I.?.
 23ffd34:	023feff5 023fefed 023fefe3 023fefd9     ..?...?...?...?.
 23ffd44:	023fbf79                                y.?.

023ffd48 <_ZSt7nothrow>:
	...

023ffd49 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd49:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd59:	5f646572 00676174                        red_tag....

023ffd64 <_ZTISt19_Sp_make_shared_tag>:
 23ffd64:	023ffda4 023ffd49                       ..?.I.?.

023ffd6c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd6c:	023ffe04 023ffd78 023ffe28              ..?.x.?.(.?.

023ffd78 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd78:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd88:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd98:	00000045                                E...

023ffd9c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd9c:	00000000 023ffd6c 023ff3fd 023ff411     ....l.?...?...?.
 23ffdac:	023ff5a5 023ff5a5 023ff47b 023ff3bd     ..?...?.{.?...?.
 23ffdbc:	023ff463 023ff425 023ff3ef              c.?.%.?...?.

023ffdc8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc8:	023ffe04 023ffdd4 023ffd6c              ..?...?.l.?.

023ffdd4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf4:	456f666e 00000000                       nfoE....

023ffdfc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdfc:	00000000 023ffdc8 023ff4a5 023ff4b9     ......?...?...?.
 23ffe0c:	023ff5a5 023ff5a5 023ff47b 023ff3bd     ..?...?.{.?...?.
 23ffe1c:	023ff579 023ff505 023ff4cd              y.?...?...?.

023ffe28 <_ZTISt9type_info>:
 23ffe28:	023ffda4 023ffe30                       ..?.0.?.

023ffe30 <_ZTSSt9type_info>:
 23ffe30:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe40:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe50:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe60:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe70:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe80:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe90:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffea0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeb0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffec0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffed1 <_ctype_>:
 23ffed1:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffee1:	20202020 20202020 20202020 20202020                     
 23ffef1:	10108820 10101010 10101010 10101010      ...............
 23fff01:	04040410 04040404 10040404 10101010     ................
 23fff11:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff21:	01010101 01010101 01010101 10101010     ................
 23fff31:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff41:	02020202 02020202 02020202 10101010     ................
 23fff51:	00000020 00000000 00000000 00000000      ...............
	...

023fffd2 <link_const_data_end>:
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fb6a5 	.word	0x023fb6a5
 23fffd8:	023fc051 	.word	0x023fc051
 23fffdc:	023fc0cd 	.word	0x023fc0cd
 23fffe0:	023fc829 	.word	0x023fc829
 23fffe4:	023fc835 	.word	0x023fc835
 23fffe8:	023fd481 	.word	0x023fd481
 23fffec:	023feee5 	.word	0x023feee5
 23ffff0:	023fefb5 	.word	0x023fefb5
 23ffff4:	023ff041 	.word	0x023ff041
