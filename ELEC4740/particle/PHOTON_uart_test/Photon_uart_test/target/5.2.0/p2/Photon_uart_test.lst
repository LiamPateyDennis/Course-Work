
/home/elec4740/Documents/particle/PHOTON_uart_test/Photon_uart_test/target/5.2.0/p2/Photon_uart_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fb000  085fb000  0000b000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fb018  085fb018  0000b018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fba50  085fb088  0000ba50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000045a0  023fba58  085fb090  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007aaec  085ff630  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000048c  1007ab5c  1007ab5c  0002ab5c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff6a0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000914  085ff6a4  085ff6a4  0001f6a4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f6a4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00107b33  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010145  00000000  00000000  00127b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ad0  00000000  00000000  00137c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e395  00000000  00000000  0013a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035098  00000000  00000000  00158add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a90  00000000  00000000  0018db75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0003abf9  00000000  00000000  00253605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 0000af08  00000000  00000000  0028e1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007ba4  00000000  00000000  00299108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fb018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb018:	480e      	ldr	r0, [pc, #56]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb01a:	490f      	ldr	r1, [pc, #60]	; (85fb058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fb01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fb01e:	4288      	cmp	r0, r1
 85fb020:	d005      	beq.n	85fb02e <module_user_pre_init+0x16>
 85fb022:	4a0e      	ldr	r2, [pc, #56]	; (85fb05c <module_user_pre_init+0x44>)
 85fb024:	4282      	cmp	r2, r0
 85fb026:	d002      	beq.n	85fb02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fb028:	4b0d      	ldr	r3, [pc, #52]	; (85fb060 <module_user_pre_init+0x48>)
 85fb02a:	1a12      	subs	r2, r2, r0
 85fb02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fb02e:	480d      	ldr	r0, [pc, #52]	; (85fb064 <module_user_pre_init+0x4c>)
 85fb030:	4a0d      	ldr	r2, [pc, #52]	; (85fb068 <module_user_pre_init+0x50>)
 85fb032:	2100      	movs	r1, #0
 85fb034:	4b0d      	ldr	r3, [pc, #52]	; (85fb06c <module_user_pre_init+0x54>)
 85fb036:	1a12      	subs	r2, r2, r0
 85fb038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fb03a:	480d      	ldr	r0, [pc, #52]	; (85fb070 <module_user_pre_init+0x58>)
 85fb03c:	490d      	ldr	r1, [pc, #52]	; (85fb074 <module_user_pre_init+0x5c>)
 85fb03e:	4288      	cmp	r0, r1
 85fb040:	d005      	beq.n	85fb04e <module_user_pre_init+0x36>
 85fb042:	4a0d      	ldr	r2, [pc, #52]	; (85fb078 <module_user_pre_init+0x60>)
 85fb044:	4282      	cmp	r2, r0
 85fb046:	d002      	beq.n	85fb04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fb048:	4b05      	ldr	r3, [pc, #20]	; (85fb060 <module_user_pre_init+0x48>)
 85fb04a:	1a12      	subs	r2, r2, r0
 85fb04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fb04e:	4801      	ldr	r0, [pc, #4]	; (85fb054 <module_user_pre_init+0x3c>)
 85fb050:	bd08      	pop	{r3, pc}
 85fb052:	bf00      	nop
 85fb054:	1007aaec 	.word	0x1007aaec
 85fb058:	085ff630 	.word	0x085ff630
 85fb05c:	1007ab5c 	.word	0x1007ab5c
 85fb060:	10110d2d 	.word	0x10110d2d
 85fb064:	1007ab5c 	.word	0x1007ab5c
 85fb068:	1007afe8 	.word	0x1007afe8
 85fb06c:	10110ea1 	.word	0x10110ea1
 85fb070:	023fba50 	.word	0x023fba50
 85fb074:	085fb088 	.word	0x085fb088
 85fb078:	023ffff8 	.word	0x023ffff8

085fb07c <dynalib_preinit>:
 85fb07c:	085fb019 00000000                       .._.....

Disassembly of section .psram_text:

023fba58 <strcmp>:
 23fba58:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fba5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fba60:	2a01      	cmp	r2, #1
 23fba62:	bf28      	it	cs
 23fba64:	429a      	cmpcs	r2, r3
 23fba66:	d0f7      	beq.n	23fba58 <strcmp>
 23fba68:	1ad0      	subs	r0, r2, r3
 23fba6a:	4770      	bx	lr

023fba6c <strlen>:
 23fba6c:	4603      	mov	r3, r0
 23fba6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fba72:	2a00      	cmp	r2, #0
 23fba74:	d1fb      	bne.n	23fba6e <strlen+0x2>
 23fba76:	1a18      	subs	r0, r3, r0
 23fba78:	3801      	subs	r0, #1
 23fba7a:	4770      	bx	lr

023fba7c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fba7c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fba7e:	f000 ff45 	bl	23fc90c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fba82:	2500      	movs	r5, #0
 23fba84:	4e05      	ldr	r6, [pc, #20]	; (23fba9c <module_user_init+0x20>)
 23fba86:	4c06      	ldr	r4, [pc, #24]	; (23fbaa0 <module_user_init+0x24>)
 23fba88:	1ba4      	subs	r4, r4, r6
 23fba8a:	08a4      	lsrs	r4, r4, #2
 23fba8c:	42ac      	cmp	r4, r5
 23fba8e:	d100      	bne.n	23fba92 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fba90:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fba92:	f856 3b04 	ldr.w	r3, [r6], #4
 23fba96:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fba98:	3501      	adds	r5, #1
 23fba9a:	e7f7      	b.n	23fba8c <module_user_init+0x10>
 23fba9c:	023fffd4 	.word	0x023fffd4
 23fbaa0:	023ffff8 	.word	0x023ffff8

023fbaa4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fbaa4:	f000 b824 	b.w	23fbaf0 <setup>

023fbaa8 <module_user_loop>:
}

void module_user_loop() {
 23fbaa8:	b508      	push	{r3, lr}
    loop();
 23fbaaa:	f000 f837 	bl	23fbb1c <loop>
    _post_loop();
}
 23fbaae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fbab2:	f000 bee3 	b.w	23fc87c <_post_loop>

023fbab6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fbab6:	f000 bc3d 	b.w	23fc334 <malloc>

023fbaba <_Znaj>:
 23fbaba:	f000 bc3b 	b.w	23fc334 <malloc>

023fbabe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fbabe:	f000 bc47 	b.w	23fc350 <free>

023fbac2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fbac2:	7800      	ldrb	r0, [r0, #0]
 23fbac4:	fab0 f080 	clz	r0, r0
 23fbac8:	0940      	lsrs	r0, r0, #5
 23fbaca:	4770      	bx	lr

023fbacc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fbacc:	2301      	movs	r3, #1
 23fbace:	7003      	strb	r3, [r0, #0]
 23fbad0:	4770      	bx	lr

023fbad2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
size_t txLen = 0;

const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
 23fbad2:	b538      	push	{r3, r4, r5, lr}
 23fbad4:	4604      	mov	r4, r0
 23fbad6:	1845      	adds	r5, r0, r1
    for (size_t ii = 0; ii < len; ii++) {
 23fbad8:	42ac      	cmp	r4, r5
 23fbada:	d007      	beq.n	23fbaec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a>
        Serial.write(data[ii]);
 23fbadc:	f000 fde8 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fbae0:	6803      	ldr	r3, [r0, #0]
 23fbae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fbae6:	689b      	ldr	r3, [r3, #8]
 23fbae8:	4798      	blx	r3
    for (size_t ii = 0; ii < len; ii++) {
 23fbaea:	e7f5      	b.n	23fbad8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6>
    }
}
 23fbaec:	bd38      	pop	{r3, r4, r5, pc}
	...

023fbaf0 <setup>:

void setup() {
 23fbaf0:	b508      	push	{r3, lr}
    Serial.begin();
 23fbaf2:	f000 fddd 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fbaf6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fbafa:	f000 fdcd 	bl	23fc698 <_ZN9USBSerial5beginEl>
	BLE.on();
 23fbafe:	f001 fd29 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbb02:	f001 fd71 	bl	23fd5e8 <_ZNK8particle14BleLocalDevice2onEv>
	// This is required with 3.1.0 only
	BLE.setScanPhy(BlePhy::BLE_PHYS_AUTO);
#endif

    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
}
 23fbb06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
 23fbb0a:	4a02      	ldr	r2, [pc, #8]	; (23fbb14 <setup+0x24>)
 23fbb0c:	4902      	ldr	r1, [pc, #8]	; (23fbb18 <setup+0x28>)
 23fbb0e:	4610      	mov	r0, r2
 23fbb10:	f002 bd80 	b.w	23fe614 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
 23fbb14:	1007abac 	.word	0x1007abac
 23fbb18:	023fbad3 	.word	0x023fbad3

023fbb1c <loop>:

void loop() {
 23fbb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fbb20:	b088      	sub	sp, #32
    if (BLE.connected()) {
 23fbb22:	f001 fd17 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbb26:	f001 fda5 	bl	23fd674 <_ZNK8particle14BleLocalDevice9connectedEv>
 23fbb2a:	4604      	mov	r4, r0
 23fbb2c:	b348      	cbz	r0, 23fbb82 <loop+0x66>
 23fbb2e:	4c48      	ldr	r4, [pc, #288]	; (23fbc50 <loop+0x134>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
            txBuf[txLen++] = Serial.read();
 23fbb30:	4d48      	ldr	r5, [pc, #288]	; (23fbc54 <loop+0x138>)
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
 23fbb32:	f000 fdbd 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fbb36:	6803      	ldr	r3, [r0, #0]
 23fbb38:	691b      	ldr	r3, [r3, #16]
 23fbb3a:	4798      	blx	r3
 23fbb3c:	b1a8      	cbz	r0, 23fbb6a <loop+0x4e>
 23fbb3e:	6823      	ldr	r3, [r4, #0]
 23fbb40:	2b13      	cmp	r3, #19
 23fbb42:	d812      	bhi.n	23fbb6a <loop+0x4e>
            txBuf[txLen++] = Serial.read();
 23fbb44:	f000 fdb4 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fbb48:	6803      	ldr	r3, [r0, #0]
 23fbb4a:	695b      	ldr	r3, [r3, #20]
 23fbb4c:	4798      	blx	r3
 23fbb4e:	6823      	ldr	r3, [r4, #0]
 23fbb50:	1c5a      	adds	r2, r3, #1
 23fbb52:	54e8      	strb	r0, [r5, r3]
 23fbb54:	6022      	str	r2, [r4, #0]
            Serial.write(txBuf[txLen - 1]);
 23fbb56:	f000 fdab 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fbb5a:	6823      	ldr	r3, [r4, #0]
 23fbb5c:	6802      	ldr	r2, [r0, #0]
 23fbb5e:	442b      	add	r3, r5
 23fbb60:	6892      	ldr	r2, [r2, #8]
 23fbb62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 23fbb66:	4790      	blx	r2
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) {
 23fbb68:	e7e3      	b.n	23fbb32 <loop+0x16>
        }
        if (txLen > 0) {
 23fbb6a:	6822      	ldr	r2, [r4, #0]
 23fbb6c:	b132      	cbz	r2, 23fbb7c <loop+0x60>
        	// Transmit the data to the BLE peripheral
            peerRxCharacteristic.setValue(txBuf, txLen);
 23fbb6e:	2300      	movs	r3, #0
 23fbb70:	4938      	ldr	r1, [pc, #224]	; (23fbc54 <loop+0x138>)
 23fbb72:	4839      	ldr	r0, [pc, #228]	; (23fbc58 <loop+0x13c>)
 23fbb74:	f001 fb7e 	bl	23fd274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            txLen = 0;
 23fbb78:	2300      	movs	r3, #0
 23fbb7a:	6023      	str	r3, [r4, #0]
				}
			}
    	}

    }
}
 23fbb7c:	b008      	add	sp, #32
 23fbb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fbb82:	f000 fab1 	bl	23fc0e8 <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
 23fbb86:	4d35      	ldr	r5, [pc, #212]	; (23fbc5c <loop+0x140>)
 23fbb88:	682b      	ldr	r3, [r5, #0]
 23fbb8a:	1ac0      	subs	r0, r0, r3
 23fbb8c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 23fbb90:	d3f4      	bcc.n	23fbb7c <loop+0x60>
 23fbb92:	f000 faa9 	bl	23fc0e8 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
 23fbb96:	6028      	str	r0, [r5, #0]
    		int count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
 23fbb98:	f001 fcdc 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbb9c:	2214      	movs	r2, #20
 23fbb9e:	4930      	ldr	r1, [pc, #192]	; (23fbc60 <loop+0x144>)
 23fbba0:	f001 fda0 	bl	23fd6e4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
			if (count > 0) {
 23fbba4:	1e07      	subs	r7, r0, #0
 23fbba6:	dde9      	ble.n	23fbb7c <loop+0x60>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
 23fbba8:	4e2d      	ldr	r6, [pc, #180]	; (23fbc60 <loop+0x144>)
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23fbbaa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 23fbc74 <loop+0x158>
				for (uint8_t ii = 0; ii < count; ii++) {
 23fbbae:	b2e5      	uxtb	r5, r4
 23fbbb0:	42bd      	cmp	r5, r7
 23fbbb2:	dae3      	bge.n	23fbb7c <loop+0x60>
					BleUuid foundServiceUuid;
 23fbbb4:	a803      	add	r0, sp, #12
 23fbbb6:	f001 f92d 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
 23fbbba:	2324      	movs	r3, #36	; 0x24
 23fbbbc:	435d      	muls	r5, r3
 23fbbbe:	f105 0008 	add.w	r0, r5, #8
					size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
 23fbbc2:	2201      	movs	r2, #1
 23fbbc4:	a903      	add	r1, sp, #12
 23fbbc6:	4430      	add	r0, r6
 23fbbc8:	f002 fc40 	bl	23fe44c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23fbbcc:	b908      	cbnz	r0, 23fbbd2 <loop+0xb6>
				for (uint8_t ii = 0; ii < count; ii++) {
 23fbbce:	3401      	adds	r4, #1
 23fbbd0:	e7ed      	b.n	23fbbae <loop+0x92>
					if (svcCount > 0 && foundServiceUuid == serviceUuid) {
 23fbbd2:	4641      	mov	r1, r8
 23fbbd4:	a803      	add	r0, sp, #12
 23fbbd6:	f001 f978 	bl	23fceca <_ZNK8particle7BleUuideqERKS0_>
 23fbbda:	2800      	cmp	r0, #0
 23fbbdc:	d0f7      	beq.n	23fbbce <loop+0xb2>
						peer = BLE.connect(scanResults[ii].address());
 23fbbde:	f001 fcb9 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fbbe2:	1972      	adds	r2, r6, r5
 23fbbe4:	4601      	mov	r1, r0
 23fbbe6:	2301      	movs	r3, #1
 23fbbe8:	a801      	add	r0, sp, #4
 23fbbea:	f003 f865 	bl	23fecb8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fbbee:	4e1d      	ldr	r6, [pc, #116]	; (23fbc64 <loop+0x148>)
 23fbbf0:	9b01      	ldr	r3, [sp, #4]
 23fbbf2:	9d02      	ldr	r5, [sp, #8]
 23fbbf4:	6033      	str	r3, [r6, #0]
	if (__tmp != _M_pi)
 23fbbf6:	6873      	ldr	r3, [r6, #4]
 23fbbf8:	429d      	cmp	r5, r3
 23fbbfa:	d016      	beq.n	23fbc2a <loop+0x10e>
	    if (__tmp != 0)
 23fbbfc:	b115      	cbz	r5, 23fbc04 <loop+0xe8>
    { ++_M_use_count; }
 23fbbfe:	686b      	ldr	r3, [r5, #4]
 23fbc00:	3301      	adds	r3, #1
 23fbc02:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fbc04:	6874      	ldr	r4, [r6, #4]
 23fbc06:	b17c      	cbz	r4, 23fbc28 <loop+0x10c>
      if (--_M_use_count == 0)
 23fbc08:	6863      	ldr	r3, [r4, #4]
 23fbc0a:	3b01      	subs	r3, #1
 23fbc0c:	6063      	str	r3, [r4, #4]
 23fbc0e:	b95b      	cbnz	r3, 23fbc28 <loop+0x10c>
          _M_dispose();
 23fbc10:	6823      	ldr	r3, [r4, #0]
 23fbc12:	4620      	mov	r0, r4
 23fbc14:	689b      	ldr	r3, [r3, #8]
 23fbc16:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fbc18:	68a3      	ldr	r3, [r4, #8]
 23fbc1a:	3b01      	subs	r3, #1
 23fbc1c:	60a3      	str	r3, [r4, #8]
 23fbc1e:	b91b      	cbnz	r3, 23fbc28 <loop+0x10c>
            _M_destroy();
 23fbc20:	6823      	ldr	r3, [r4, #0]
 23fbc22:	4620      	mov	r0, r4
 23fbc24:	68db      	ldr	r3, [r3, #12]
 23fbc26:	4798      	blx	r3
	    _M_pi = __tmp;
 23fbc28:	6075      	str	r5, [r6, #4]
 23fbc2a:	a801      	add	r0, sp, #4
 23fbc2c:	f001 fdc9 	bl	23fd7c2 <_ZN8particle13BlePeerDeviceD1Ev>
						if (peer.connected()) {
 23fbc30:	480c      	ldr	r0, [pc, #48]	; (23fbc64 <loop+0x148>)
 23fbc32:	f001 fbf9 	bl	23fd428 <_ZNK8particle13BlePeerDevice9connectedEv>
 23fbc36:	2800      	cmp	r0, #0
 23fbc38:	d0a0      	beq.n	23fbb7c <loop+0x60>
							peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
 23fbc3a:	4a0b      	ldr	r2, [pc, #44]	; (23fbc68 <loop+0x14c>)
 23fbc3c:	490b      	ldr	r1, [pc, #44]	; (23fbc6c <loop+0x150>)
 23fbc3e:	4809      	ldr	r0, [pc, #36]	; (23fbc64 <loop+0x148>)
 23fbc40:	f002 fcbe 	bl	23fe5c0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
							peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
 23fbc44:	4a0a      	ldr	r2, [pc, #40]	; (23fbc70 <loop+0x154>)
 23fbc46:	4904      	ldr	r1, [pc, #16]	; (23fbc58 <loop+0x13c>)
 23fbc48:	4806      	ldr	r0, [pc, #24]	; (23fbc64 <loop+0x148>)
 23fbc4a:	f002 fcb9 	bl	23fe5c0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
}
 23fbc4e:	e795      	b.n	23fbb7c <loop+0x60>
 23fbc50:	1007ae98 	.word	0x1007ae98
 23fbc54:	1007ae84 	.word	0x1007ae84
 23fbc58:	1007aba4 	.word	0x1007aba4
 23fbc5c:	1007ab98 	.word	0x1007ab98
 23fbc60:	1007abb4 	.word	0x1007abb4
 23fbc64:	1007ab9c 	.word	0x1007ab9c
 23fbc68:	1007ab84 	.word	0x1007ab84
 23fbc6c:	1007abac 	.word	0x1007abac
 23fbc70:	1007ab70 	.word	0x1007ab70
 23fbc74:	1007ab5c 	.word	0x1007ab5c

023fbc78 <_GLOBAL__sub_I_scanResults>:
 23fbc78:	b570      	push	{r4, r5, r6, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
 23fbc7a:	4915      	ldr	r1, [pc, #84]	; (23fbcd0 <_GLOBAL__sub_I_scanResults+0x58>)
 23fbc7c:	4815      	ldr	r0, [pc, #84]	; (23fbcd4 <_GLOBAL__sub_I_scanResults+0x5c>)
 23fbc7e:	f001 f9a3 	bl	23fcfc8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
 23fbc82:	4915      	ldr	r1, [pc, #84]	; (23fbcd8 <_GLOBAL__sub_I_scanResults+0x60>)
 23fbc84:	4815      	ldr	r0, [pc, #84]	; (23fbcdc <_GLOBAL__sub_I_scanResults+0x64>)
 23fbc86:	f001 f99f 	bl	23fcfc8 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
 23fbc8a:	4915      	ldr	r1, [pc, #84]	; (23fbce0 <_GLOBAL__sub_I_scanResults+0x68>)
 23fbc8c:	4815      	ldr	r0, [pc, #84]	; (23fbce4 <_GLOBAL__sub_I_scanResults+0x6c>)
 23fbc8e:	f001 f99b 	bl	23fcfc8 <_ZN8particle7BleUuidC1EPKc>
 23fbc92:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
 23fbc94:	267f      	movs	r6, #127	; 0x7f
 23fbc96:	4c14      	ldr	r4, [pc, #80]	; (23fbce8 <_GLOBAL__sub_I_scanResults+0x70>)
 23fbc98:	4620      	mov	r0, r4
 23fbc9a:	f001 f8b1 	bl	23fce00 <_ZN8particle10BleAddressC1Ev>
 23fbc9e:	f104 0008 	add.w	r0, r4, #8
 23fbca2:	f002 f87a 	bl	23fdd9a <_ZN8particle18BleAdvertisingDataC1Ev>
 23fbca6:	f104 0014 	add.w	r0, r4, #20
 23fbcaa:	f002 f876 	bl	23fdd9a <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
 23fbcae:	3d01      	subs	r5, #1
 23fbcb0:	f884 6020 	strb.w	r6, [r4, #32]
 23fbcb4:	f104 0424 	add.w	r4, r4, #36	; 0x24
 23fbcb8:	d1ee      	bne.n	23fbc98 <_GLOBAL__sub_I_scanResults+0x20>
BleCharacteristic peerTxCharacteristic;
 23fbcba:	480c      	ldr	r0, [pc, #48]	; (23fbcec <_GLOBAL__sub_I_scanResults+0x74>)
 23fbcbc:	f001 fab4 	bl	23fd228 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
 23fbcc0:	480b      	ldr	r0, [pc, #44]	; (23fbcf0 <_GLOBAL__sub_I_scanResults+0x78>)
 23fbcc2:	f001 fab1 	bl	23fd228 <_ZN8particle17BleCharacteristicC1Ev>
}
 23fbcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
BlePeerDevice peer;
 23fbcca:	480a      	ldr	r0, [pc, #40]	; (23fbcf4 <_GLOBAL__sub_I_scanResults+0x7c>)
 23fbccc:	f001 bb88 	b.w	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
 23fbcd0:	023ffa34 	.word	0x023ffa34
 23fbcd4:	1007ab5c 	.word	0x1007ab5c
 23fbcd8:	023ffa59 	.word	0x023ffa59
 23fbcdc:	1007ab70 	.word	0x1007ab70
 23fbce0:	023ffa7e 	.word	0x023ffa7e
 23fbce4:	1007ab84 	.word	0x1007ab84
 23fbce8:	1007abb4 	.word	0x1007abb4
 23fbcec:	1007abac 	.word	0x1007abac
 23fbcf0:	1007aba4 	.word	0x1007aba4
 23fbcf4:	1007ab9c 	.word	0x1007ab9c

023fbcf8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbcf8:	b509      	push	{r0, r3, lr}
 23fbcfa:	4804      	ldr	r0, [pc, #16]	; (23fbd0c <HAL_USB_USART_Init+0x14>)
 23fbcfc:	6800      	ldr	r0, [r0, #0]
 23fbcfe:	4b04      	ldr	r3, [pc, #16]	; (23fbd10 <HAL_USB_USART_Init+0x18>)
 23fbd00:	4403      	add	r3, r0
 23fbd02:	681b      	ldr	r3, [r3, #0]
 23fbd04:	681b      	ldr	r3, [r3, #0]
 23fbd06:	9302      	str	r3, [sp, #8]
 23fbd08:	bd09      	pop	{r0, r3, pc}
 23fbd0a:	0000      	.short	0x0000
 23fbd0c:	1007aaec 	.word	0x1007aaec
 23fbd10:	00000034 	.word	0x00000034

023fbd14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbd14:	b509      	push	{r0, r3, lr}
 23fbd16:	4804      	ldr	r0, [pc, #16]	; (23fbd28 <HAL_USB_USART_Begin+0x14>)
 23fbd18:	6800      	ldr	r0, [r0, #0]
 23fbd1a:	4b04      	ldr	r3, [pc, #16]	; (23fbd2c <HAL_USB_USART_Begin+0x18>)
 23fbd1c:	4403      	add	r3, r0
 23fbd1e:	681b      	ldr	r3, [r3, #0]
 23fbd20:	685b      	ldr	r3, [r3, #4]
 23fbd22:	9302      	str	r3, [sp, #8]
 23fbd24:	bd09      	pop	{r0, r3, pc}
 23fbd26:	0000      	.short	0x0000
 23fbd28:	1007aaec 	.word	0x1007aaec
 23fbd2c:	00000034 	.word	0x00000034

023fbd30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbd30:	b509      	push	{r0, r3, lr}
 23fbd32:	4804      	ldr	r0, [pc, #16]	; (23fbd44 <HAL_USB_USART_Available_Data+0x14>)
 23fbd34:	6800      	ldr	r0, [r0, #0]
 23fbd36:	4b04      	ldr	r3, [pc, #16]	; (23fbd48 <HAL_USB_USART_Available_Data+0x18>)
 23fbd38:	4403      	add	r3, r0
 23fbd3a:	681b      	ldr	r3, [r3, #0]
 23fbd3c:	691b      	ldr	r3, [r3, #16]
 23fbd3e:	9302      	str	r3, [sp, #8]
 23fbd40:	bd09      	pop	{r0, r3, pc}
 23fbd42:	0000      	.short	0x0000
 23fbd44:	1007aaec 	.word	0x1007aaec
 23fbd48:	00000034 	.word	0x00000034

023fbd4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbd4c:	b509      	push	{r0, r3, lr}
 23fbd4e:	4804      	ldr	r0, [pc, #16]	; (23fbd60 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbd50:	6800      	ldr	r0, [r0, #0]
 23fbd52:	4b04      	ldr	r3, [pc, #16]	; (23fbd64 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbd54:	4403      	add	r3, r0
 23fbd56:	681b      	ldr	r3, [r3, #0]
 23fbd58:	695b      	ldr	r3, [r3, #20]
 23fbd5a:	9302      	str	r3, [sp, #8]
 23fbd5c:	bd09      	pop	{r0, r3, pc}
 23fbd5e:	0000      	.short	0x0000
 23fbd60:	1007aaec 	.word	0x1007aaec
 23fbd64:	00000034 	.word	0x00000034

023fbd68 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd68:	b509      	push	{r0, r3, lr}
 23fbd6a:	4804      	ldr	r0, [pc, #16]	; (23fbd7c <HAL_USB_USART_Receive_Data+0x14>)
 23fbd6c:	6800      	ldr	r0, [r0, #0]
 23fbd6e:	4b04      	ldr	r3, [pc, #16]	; (23fbd80 <HAL_USB_USART_Receive_Data+0x18>)
 23fbd70:	4403      	add	r3, r0
 23fbd72:	681b      	ldr	r3, [r3, #0]
 23fbd74:	699b      	ldr	r3, [r3, #24]
 23fbd76:	9302      	str	r3, [sp, #8]
 23fbd78:	bd09      	pop	{r0, r3, pc}
 23fbd7a:	0000      	.short	0x0000
 23fbd7c:	1007aaec 	.word	0x1007aaec
 23fbd80:	00000034 	.word	0x00000034

023fbd84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbd84:	b509      	push	{r0, r3, lr}
 23fbd86:	4804      	ldr	r0, [pc, #16]	; (23fbd98 <HAL_USB_USART_Send_Data+0x14>)
 23fbd88:	6800      	ldr	r0, [r0, #0]
 23fbd8a:	4b04      	ldr	r3, [pc, #16]	; (23fbd9c <HAL_USB_USART_Send_Data+0x18>)
 23fbd8c:	4403      	add	r3, r0
 23fbd8e:	681b      	ldr	r3, [r3, #0]
 23fbd90:	69db      	ldr	r3, [r3, #28]
 23fbd92:	9302      	str	r3, [sp, #8]
 23fbd94:	bd09      	pop	{r0, r3, pc}
 23fbd96:	0000      	.short	0x0000
 23fbd98:	1007aaec 	.word	0x1007aaec
 23fbd9c:	00000034 	.word	0x00000034

023fbda0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbda0:	b509      	push	{r0, r3, lr}
 23fbda2:	4804      	ldr	r0, [pc, #16]	; (23fbdb4 <HAL_USB_USART_Flush_Data+0x14>)
 23fbda4:	6800      	ldr	r0, [r0, #0]
 23fbda6:	4b04      	ldr	r3, [pc, #16]	; (23fbdb8 <HAL_USB_USART_Flush_Data+0x18>)
 23fbda8:	4403      	add	r3, r0
 23fbdaa:	681b      	ldr	r3, [r3, #0]
 23fbdac:	6a1b      	ldr	r3, [r3, #32]
 23fbdae:	9302      	str	r3, [sp, #8]
 23fbdb0:	bd09      	pop	{r0, r3, pc}
 23fbdb2:	0000      	.short	0x0000
 23fbdb4:	1007aaec 	.word	0x1007aaec
 23fbdb8:	00000034 	.word	0x00000034

023fbdbc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fbdbc:	b509      	push	{r0, r3, lr}
 23fbdbe:	4804      	ldr	r0, [pc, #16]	; (23fbdd0 <hal_usart_write+0x14>)
 23fbdc0:	6800      	ldr	r0, [r0, #0]
 23fbdc2:	4b04      	ldr	r3, [pc, #16]	; (23fbdd4 <hal_usart_write+0x18>)
 23fbdc4:	4403      	add	r3, r0
 23fbdc6:	681b      	ldr	r3, [r3, #0]
 23fbdc8:	68db      	ldr	r3, [r3, #12]
 23fbdca:	9302      	str	r3, [sp, #8]
 23fbdcc:	bd09      	pop	{r0, r3, pc}
 23fbdce:	0000      	.short	0x0000
 23fbdd0:	1007aaec 	.word	0x1007aaec
 23fbdd4:	00000024 	.word	0x00000024

023fbdd8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fbdd8:	b509      	push	{r0, r3, lr}
 23fbdda:	4804      	ldr	r0, [pc, #16]	; (23fbdec <hal_usart_available+0x14>)
 23fbddc:	6800      	ldr	r0, [r0, #0]
 23fbdde:	4b04      	ldr	r3, [pc, #16]	; (23fbdf0 <hal_usart_available+0x18>)
 23fbde0:	4403      	add	r3, r0
 23fbde2:	681b      	ldr	r3, [r3, #0]
 23fbde4:	691b      	ldr	r3, [r3, #16]
 23fbde6:	9302      	str	r3, [sp, #8]
 23fbde8:	bd09      	pop	{r0, r3, pc}
 23fbdea:	0000      	.short	0x0000
 23fbdec:	1007aaec 	.word	0x1007aaec
 23fbdf0:	00000024 	.word	0x00000024

023fbdf4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fbdf4:	b509      	push	{r0, r3, lr}
 23fbdf6:	4804      	ldr	r0, [pc, #16]	; (23fbe08 <hal_usart_read+0x14>)
 23fbdf8:	6800      	ldr	r0, [r0, #0]
 23fbdfa:	4b04      	ldr	r3, [pc, #16]	; (23fbe0c <hal_usart_read+0x18>)
 23fbdfc:	4403      	add	r3, r0
 23fbdfe:	681b      	ldr	r3, [r3, #0]
 23fbe00:	695b      	ldr	r3, [r3, #20]
 23fbe02:	9302      	str	r3, [sp, #8]
 23fbe04:	bd09      	pop	{r0, r3, pc}
 23fbe06:	0000      	.short	0x0000
 23fbe08:	1007aaec 	.word	0x1007aaec
 23fbe0c:	00000024 	.word	0x00000024

023fbe10 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fbe10:	b509      	push	{r0, r3, lr}
 23fbe12:	4804      	ldr	r0, [pc, #16]	; (23fbe24 <hal_usart_peek+0x14>)
 23fbe14:	6800      	ldr	r0, [r0, #0]
 23fbe16:	4b04      	ldr	r3, [pc, #16]	; (23fbe28 <hal_usart_peek+0x18>)
 23fbe18:	4403      	add	r3, r0
 23fbe1a:	681b      	ldr	r3, [r3, #0]
 23fbe1c:	699b      	ldr	r3, [r3, #24]
 23fbe1e:	9302      	str	r3, [sp, #8]
 23fbe20:	bd09      	pop	{r0, r3, pc}
 23fbe22:	0000      	.short	0x0000
 23fbe24:	1007aaec 	.word	0x1007aaec
 23fbe28:	00000024 	.word	0x00000024

023fbe2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fbe2c:	b509      	push	{r0, r3, lr}
 23fbe2e:	4804      	ldr	r0, [pc, #16]	; (23fbe40 <hal_usart_flush+0x14>)
 23fbe30:	6800      	ldr	r0, [r0, #0]
 23fbe32:	4b04      	ldr	r3, [pc, #16]	; (23fbe44 <hal_usart_flush+0x18>)
 23fbe34:	4403      	add	r3, r0
 23fbe36:	681b      	ldr	r3, [r3, #0]
 23fbe38:	69db      	ldr	r3, [r3, #28]
 23fbe3a:	9302      	str	r3, [sp, #8]
 23fbe3c:	bd09      	pop	{r0, r3, pc}
 23fbe3e:	0000      	.short	0x0000
 23fbe40:	1007aaec 	.word	0x1007aaec
 23fbe44:	00000024 	.word	0x00000024

023fbe48 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fbe48:	b509      	push	{r0, r3, lr}
 23fbe4a:	4804      	ldr	r0, [pc, #16]	; (23fbe5c <hal_usart_is_enabled+0x14>)
 23fbe4c:	6800      	ldr	r0, [r0, #0]
 23fbe4e:	4b04      	ldr	r3, [pc, #16]	; (23fbe60 <hal_usart_is_enabled+0x18>)
 23fbe50:	4403      	add	r3, r0
 23fbe52:	681b      	ldr	r3, [r3, #0]
 23fbe54:	6a1b      	ldr	r3, [r3, #32]
 23fbe56:	9302      	str	r3, [sp, #8]
 23fbe58:	bd09      	pop	{r0, r3, pc}
 23fbe5a:	0000      	.short	0x0000
 23fbe5c:	1007aaec 	.word	0x1007aaec
 23fbe60:	00000024 	.word	0x00000024

023fbe64 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fbe64:	b509      	push	{r0, r3, lr}
 23fbe66:	4804      	ldr	r0, [pc, #16]	; (23fbe78 <hal_usart_available_data_for_write+0x14>)
 23fbe68:	6800      	ldr	r0, [r0, #0]
 23fbe6a:	4b04      	ldr	r3, [pc, #16]	; (23fbe7c <hal_usart_available_data_for_write+0x18>)
 23fbe6c:	4403      	add	r3, r0
 23fbe6e:	681b      	ldr	r3, [r3, #0]
 23fbe70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbe72:	9302      	str	r3, [sp, #8]
 23fbe74:	bd09      	pop	{r0, r3, pc}
 23fbe76:	0000      	.short	0x0000
 23fbe78:	1007aaec 	.word	0x1007aaec
 23fbe7c:	00000024 	.word	0x00000024

023fbe80 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fbe80:	b509      	push	{r0, r3, lr}
 23fbe82:	4804      	ldr	r0, [pc, #16]	; (23fbe94 <hal_usart_init_ex+0x14>)
 23fbe84:	6800      	ldr	r0, [r0, #0]
 23fbe86:	4b04      	ldr	r3, [pc, #16]	; (23fbe98 <hal_usart_init_ex+0x18>)
 23fbe88:	4403      	add	r3, r0
 23fbe8a:	681b      	ldr	r3, [r3, #0]
 23fbe8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbe8e:	9302      	str	r3, [sp, #8]
 23fbe90:	bd09      	pop	{r0, r3, pc}
 23fbe92:	0000      	.short	0x0000
 23fbe94:	1007aaec 	.word	0x1007aaec
 23fbe98:	00000024 	.word	0x00000024

023fbe9c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fbe9c:	b509      	push	{r0, r3, lr}
 23fbe9e:	4804      	ldr	r0, [pc, #16]	; (23fbeb0 <inet_inet_ntop+0x14>)
 23fbea0:	6800      	ldr	r0, [r0, #0]
 23fbea2:	4b04      	ldr	r3, [pc, #16]	; (23fbeb4 <inet_inet_ntop+0x18>)
 23fbea4:	4403      	add	r3, r0
 23fbea6:	681b      	ldr	r3, [r3, #0]
 23fbea8:	695b      	ldr	r3, [r3, #20]
 23fbeaa:	9302      	str	r3, [sp, #8]
 23fbeac:	bd09      	pop	{r0, r3, pc}
 23fbeae:	0000      	.short	0x0000
 23fbeb0:	1007aaec 	.word	0x1007aaec
 23fbeb4:	0000004c 	.word	0x0000004c

023fbeb8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fbeb8:	b509      	push	{r0, r3, lr}
 23fbeba:	4804      	ldr	r0, [pc, #16]	; (23fbecc <os_mutex_recursive_create+0x14>)
 23fbebc:	6800      	ldr	r0, [r0, #0]
 23fbebe:	4b04      	ldr	r3, [pc, #16]	; (23fbed0 <os_mutex_recursive_create+0x18>)
 23fbec0:	4403      	add	r3, r0
 23fbec2:	681b      	ldr	r3, [r3, #0]
 23fbec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbec6:	9302      	str	r3, [sp, #8]
 23fbec8:	bd09      	pop	{r0, r3, pc}
 23fbeca:	0000      	.short	0x0000
 23fbecc:	1007aaec 	.word	0x1007aaec
 23fbed0:	00000030 	.word	0x00000030

023fbed4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fbed4:	b509      	push	{r0, r3, lr}
 23fbed6:	4804      	ldr	r0, [pc, #16]	; (23fbee8 <os_mutex_recursive_lock+0x14>)
 23fbed8:	6800      	ldr	r0, [r0, #0]
 23fbeda:	4b04      	ldr	r3, [pc, #16]	; (23fbeec <os_mutex_recursive_lock+0x18>)
 23fbedc:	4403      	add	r3, r0
 23fbede:	681b      	ldr	r3, [r3, #0]
 23fbee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fbee2:	9302      	str	r3, [sp, #8]
 23fbee4:	bd09      	pop	{r0, r3, pc}
 23fbee6:	0000      	.short	0x0000
 23fbee8:	1007aaec 	.word	0x1007aaec
 23fbeec:	00000030 	.word	0x00000030

023fbef0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fbef0:	b509      	push	{r0, r3, lr}
 23fbef2:	4804      	ldr	r0, [pc, #16]	; (23fbf04 <os_mutex_recursive_unlock+0x14>)
 23fbef4:	6800      	ldr	r0, [r0, #0]
 23fbef6:	4b04      	ldr	r3, [pc, #16]	; (23fbf08 <os_mutex_recursive_unlock+0x18>)
 23fbef8:	4403      	add	r3, r0
 23fbefa:	681b      	ldr	r3, [r3, #0]
 23fbefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fbefe:	9302      	str	r3, [sp, #8]
 23fbf00:	bd09      	pop	{r0, r3, pc}
 23fbf02:	0000      	.short	0x0000
 23fbf04:	1007aaec 	.word	0x1007aaec
 23fbf08:	00000030 	.word	0x00000030

023fbf0c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
 23fbf0c:	b509      	push	{r0, r3, lr}
 23fbf0e:	4804      	ldr	r0, [pc, #16]	; (23fbf20 <hal_ble_stack_init+0x14>)
 23fbf10:	6800      	ldr	r0, [r0, #0]
 23fbf12:	4b04      	ldr	r3, [pc, #16]	; (23fbf24 <hal_ble_stack_init+0x18>)
 23fbf14:	4403      	add	r3, r0
 23fbf16:	681b      	ldr	r3, [r3, #0]
 23fbf18:	689b      	ldr	r3, [r3, #8]
 23fbf1a:	9302      	str	r3, [sp, #8]
 23fbf1c:	bd09      	pop	{r0, r3, pc}
 23fbf1e:	0000      	.short	0x0000
 23fbf20:	1007aaec 	.word	0x1007aaec
 23fbf24:	00000060 	.word	0x00000060

023fbf28 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
 23fbf28:	b509      	push	{r0, r3, lr}
 23fbf2a:	4804      	ldr	r0, [pc, #16]	; (23fbf3c <hal_ble_gap_start_scan+0x14>)
 23fbf2c:	6800      	ldr	r0, [r0, #0]
 23fbf2e:	4b04      	ldr	r3, [pc, #16]	; (23fbf40 <hal_ble_gap_start_scan+0x18>)
 23fbf30:	4403      	add	r3, r0
 23fbf32:	681b      	ldr	r3, [r3, #0]
 23fbf34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fbf36:	9302      	str	r3, [sp, #8]
 23fbf38:	bd09      	pop	{r0, r3, pc}
 23fbf3a:	0000      	.short	0x0000
 23fbf3c:	1007aaec 	.word	0x1007aaec
 23fbf40:	00000060 	.word	0x00000060

023fbf44 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
 23fbf44:	b509      	push	{r0, r3, lr}
 23fbf46:	4804      	ldr	r0, [pc, #16]	; (23fbf58 <hal_ble_gap_stop_scan+0x14>)
 23fbf48:	6800      	ldr	r0, [r0, #0]
 23fbf4a:	4b04      	ldr	r3, [pc, #16]	; (23fbf5c <hal_ble_gap_stop_scan+0x18>)
 23fbf4c:	4403      	add	r3, r0
 23fbf4e:	681b      	ldr	r3, [r3, #0]
 23fbf50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23fbf54:	9302      	str	r3, [sp, #8]
 23fbf56:	bd09      	pop	{r0, r3, pc}
 23fbf58:	1007aaec 	.word	0x1007aaec
 23fbf5c:	00000060 	.word	0x00000060

023fbf60 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
 23fbf60:	b509      	push	{r0, r3, lr}
 23fbf62:	4804      	ldr	r0, [pc, #16]	; (23fbf74 <hal_ble_gap_disconnect+0x14>)
 23fbf64:	6800      	ldr	r0, [r0, #0]
 23fbf66:	4b04      	ldr	r3, [pc, #16]	; (23fbf78 <hal_ble_gap_disconnect+0x18>)
 23fbf68:	4403      	add	r3, r0
 23fbf6a:	681b      	ldr	r3, [r3, #0]
 23fbf6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fbf70:	9302      	str	r3, [sp, #8]
 23fbf72:	bd09      	pop	{r0, r3, pc}
 23fbf74:	1007aaec 	.word	0x1007aaec
 23fbf78:	00000060 	.word	0x00000060

023fbf7c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbf7c:	b509      	push	{r0, r3, lr}
 23fbf7e:	4804      	ldr	r0, [pc, #16]	; (23fbf90 <hal_ble_gatt_server_set_characteristic_value+0x14>)
 23fbf80:	6800      	ldr	r0, [r0, #0]
 23fbf82:	4b04      	ldr	r3, [pc, #16]	; (23fbf94 <hal_ble_gatt_server_set_characteristic_value+0x18>)
 23fbf84:	4403      	add	r3, r0
 23fbf86:	681b      	ldr	r3, [r3, #0]
 23fbf88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23fbf8c:	9302      	str	r3, [sp, #8]
 23fbf8e:	bd09      	pop	{r0, r3, pc}
 23fbf90:	1007aaec 	.word	0x1007aaec
 23fbf94:	00000060 	.word	0x00000060

023fbf98 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
 23fbf98:	b509      	push	{r0, r3, lr}
 23fbf9a:	4804      	ldr	r0, [pc, #16]	; (23fbfac <hal_ble_gatt_client_discover_all_services+0x14>)
 23fbf9c:	6800      	ldr	r0, [r0, #0]
 23fbf9e:	4b04      	ldr	r3, [pc, #16]	; (23fbfb0 <hal_ble_gatt_client_discover_all_services+0x18>)
 23fbfa0:	4403      	add	r3, r0
 23fbfa2:	681b      	ldr	r3, [r3, #0]
 23fbfa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23fbfa8:	9302      	str	r3, [sp, #8]
 23fbfaa:	bd09      	pop	{r0, r3, pc}
 23fbfac:	1007aaec 	.word	0x1007aaec
 23fbfb0:	00000060 	.word	0x00000060

023fbfb4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
 23fbfb4:	b509      	push	{r0, r3, lr}
 23fbfb6:	4804      	ldr	r0, [pc, #16]	; (23fbfc8 <hal_ble_gatt_client_discover_characteristics+0x14>)
 23fbfb8:	6800      	ldr	r0, [r0, #0]
 23fbfba:	4b04      	ldr	r3, [pc, #16]	; (23fbfcc <hal_ble_gatt_client_discover_characteristics+0x18>)
 23fbfbc:	4403      	add	r3, r0
 23fbfbe:	681b      	ldr	r3, [r3, #0]
 23fbfc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 23fbfc4:	9302      	str	r3, [sp, #8]
 23fbfc6:	bd09      	pop	{r0, r3, pc}
 23fbfc8:	1007aaec 	.word	0x1007aaec
 23fbfcc:	00000060 	.word	0x00000060

023fbfd0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbfd0:	b509      	push	{r0, r3, lr}
 23fbfd2:	4804      	ldr	r0, [pc, #16]	; (23fbfe4 <hal_ble_gatt_client_write_with_response+0x14>)
 23fbfd4:	6800      	ldr	r0, [r0, #0]
 23fbfd6:	4b04      	ldr	r3, [pc, #16]	; (23fbfe8 <hal_ble_gatt_client_write_with_response+0x18>)
 23fbfd8:	4403      	add	r3, r0
 23fbfda:	681b      	ldr	r3, [r3, #0]
 23fbfdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 23fbfe0:	9302      	str	r3, [sp, #8]
 23fbfe2:	bd09      	pop	{r0, r3, pc}
 23fbfe4:	1007aaec 	.word	0x1007aaec
 23fbfe8:	00000060 	.word	0x00000060

023fbfec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fbfec:	b509      	push	{r0, r3, lr}
 23fbfee:	4804      	ldr	r0, [pc, #16]	; (23fc000 <hal_ble_gatt_client_write_without_response+0x14>)
 23fbff0:	6800      	ldr	r0, [r0, #0]
 23fbff2:	4b04      	ldr	r3, [pc, #16]	; (23fc004 <hal_ble_gatt_client_write_without_response+0x18>)
 23fbff4:	4403      	add	r3, r0
 23fbff6:	681b      	ldr	r3, [r3, #0]
 23fbff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23fbffc:	9302      	str	r3, [sp, #8]
 23fbffe:	bd09      	pop	{r0, r3, pc}
 23fc000:	1007aaec 	.word	0x1007aaec
 23fc004:	00000060 	.word	0x00000060

023fc008 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
 23fc008:	b509      	push	{r0, r3, lr}
 23fc00a:	4804      	ldr	r0, [pc, #16]	; (23fc01c <hal_ble_gatt_client_read+0x14>)
 23fc00c:	6800      	ldr	r0, [r0, #0]
 23fc00e:	4b04      	ldr	r3, [pc, #16]	; (23fc020 <hal_ble_gatt_client_read+0x18>)
 23fc010:	4403      	add	r3, r0
 23fc012:	681b      	ldr	r3, [r3, #0]
 23fc014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 23fc018:	9302      	str	r3, [sp, #8]
 23fc01a:	bd09      	pop	{r0, r3, pc}
 23fc01c:	1007aaec 	.word	0x1007aaec
 23fc020:	00000060 	.word	0x00000060

023fc024 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
 23fc024:	b509      	push	{r0, r3, lr}
 23fc026:	4804      	ldr	r0, [pc, #16]	; (23fc038 <hal_ble_gap_connect+0x14>)
 23fc028:	6800      	ldr	r0, [r0, #0]
 23fc02a:	4b04      	ldr	r3, [pc, #16]	; (23fc03c <hal_ble_gap_connect+0x18>)
 23fc02c:	4403      	add	r3, r0
 23fc02e:	681b      	ldr	r3, [r3, #0]
 23fc030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 23fc034:	9302      	str	r3, [sp, #8]
 23fc036:	bd09      	pop	{r0, r3, pc}
 23fc038:	1007aaec 	.word	0x1007aaec
 23fc03c:	00000060 	.word	0x00000060

023fc040 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
 23fc040:	b509      	push	{r0, r3, lr}
 23fc042:	4804      	ldr	r0, [pc, #16]	; (23fc054 <hal_ble_set_callback_on_periph_link_events+0x14>)
 23fc044:	6800      	ldr	r0, [r0, #0]
 23fc046:	4b04      	ldr	r3, [pc, #16]	; (23fc058 <hal_ble_set_callback_on_periph_link_events+0x18>)
 23fc048:	4403      	add	r3, r0
 23fc04a:	681b      	ldr	r3, [r3, #0]
 23fc04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 23fc050:	9302      	str	r3, [sp, #8]
 23fc052:	bd09      	pop	{r0, r3, pc}
 23fc054:	1007aaec 	.word	0x1007aaec
 23fc058:	00000060 	.word	0x00000060

023fc05c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
 23fc05c:	b509      	push	{r0, r3, lr}
 23fc05e:	4804      	ldr	r0, [pc, #16]	; (23fc070 <hal_ble_gatt_client_configure_cccd+0x14>)
 23fc060:	6800      	ldr	r0, [r0, #0]
 23fc062:	4b04      	ldr	r3, [pc, #16]	; (23fc074 <hal_ble_gatt_client_configure_cccd+0x18>)
 23fc064:	4403      	add	r3, r0
 23fc066:	681b      	ldr	r3, [r3, #0]
 23fc068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 23fc06c:	9302      	str	r3, [sp, #8]
 23fc06e:	bd09      	pop	{r0, r3, pc}
 23fc070:	1007aaec 	.word	0x1007aaec
 23fc074:	00000060 	.word	0x00000060

023fc078 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fc078:	b509      	push	{r0, r3, lr}
 23fc07a:	4804      	ldr	r0, [pc, #16]	; (23fc08c <hal_ble_gatt_server_notify_characteristic_value+0x14>)
 23fc07c:	6800      	ldr	r0, [r0, #0]
 23fc07e:	4b04      	ldr	r3, [pc, #16]	; (23fc090 <hal_ble_gatt_server_notify_characteristic_value+0x18>)
 23fc080:	4403      	add	r3, r0
 23fc082:	681b      	ldr	r3, [r3, #0]
 23fc084:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 23fc088:	9302      	str	r3, [sp, #8]
 23fc08a:	bd09      	pop	{r0, r3, pc}
 23fc08c:	1007aaec 	.word	0x1007aaec
 23fc090:	00000060 	.word	0x00000060

023fc094 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
 23fc094:	b509      	push	{r0, r3, lr}
 23fc096:	4804      	ldr	r0, [pc, #16]	; (23fc0a8 <hal_ble_gatt_server_indicate_characteristic_value+0x14>)
 23fc098:	6800      	ldr	r0, [r0, #0]
 23fc09a:	4b04      	ldr	r3, [pc, #16]	; (23fc0ac <hal_ble_gatt_server_indicate_characteristic_value+0x18>)
 23fc09c:	4403      	add	r3, r0
 23fc09e:	681b      	ldr	r3, [r3, #0]
 23fc0a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 23fc0a4:	9302      	str	r3, [sp, #8]
 23fc0a6:	bd09      	pop	{r0, r3, pc}
 23fc0a8:	1007aaec 	.word	0x1007aaec
 23fc0ac:	00000060 	.word	0x00000060

023fc0b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fc0b0:	b509      	push	{r0, r3, lr}
 23fc0b2:	4804      	ldr	r0, [pc, #16]	; (23fc0c4 <HAL_RNG_GetRandomNumber+0x14>)
 23fc0b4:	6800      	ldr	r0, [r0, #0]
 23fc0b6:	4b04      	ldr	r3, [pc, #16]	; (23fc0c8 <HAL_RNG_GetRandomNumber+0x18>)
 23fc0b8:	4403      	add	r3, r0
 23fc0ba:	681b      	ldr	r3, [r3, #0]
 23fc0bc:	685b      	ldr	r3, [r3, #4]
 23fc0be:	9302      	str	r3, [sp, #8]
 23fc0c0:	bd09      	pop	{r0, r3, pc}
 23fc0c2:	0000      	.short	0x0000
 23fc0c4:	1007aaec 	.word	0x1007aaec
 23fc0c8:	00000000 	.word	0x00000000

023fc0cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fc0cc:	b509      	push	{r0, r3, lr}
 23fc0ce:	4804      	ldr	r0, [pc, #16]	; (23fc0e0 <HAL_Delay_Microseconds+0x14>)
 23fc0d0:	6800      	ldr	r0, [r0, #0]
 23fc0d2:	4b04      	ldr	r3, [pc, #16]	; (23fc0e4 <HAL_Delay_Microseconds+0x18>)
 23fc0d4:	4403      	add	r3, r0
 23fc0d6:	681b      	ldr	r3, [r3, #0]
 23fc0d8:	68db      	ldr	r3, [r3, #12]
 23fc0da:	9302      	str	r3, [sp, #8]
 23fc0dc:	bd09      	pop	{r0, r3, pc}
 23fc0de:	0000      	.short	0x0000
 23fc0e0:	1007aaec 	.word	0x1007aaec
 23fc0e4:	00000000 	.word	0x00000000

023fc0e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fc0e8:	b509      	push	{r0, r3, lr}
 23fc0ea:	4804      	ldr	r0, [pc, #16]	; (23fc0fc <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fc0ec:	6800      	ldr	r0, [r0, #0]
 23fc0ee:	4b04      	ldr	r3, [pc, #16]	; (23fc100 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fc0f0:	4403      	add	r3, r0
 23fc0f2:	681b      	ldr	r3, [r3, #0]
 23fc0f4:	695b      	ldr	r3, [r3, #20]
 23fc0f6:	9302      	str	r3, [sp, #8]
 23fc0f8:	bd09      	pop	{r0, r3, pc}
 23fc0fa:	0000      	.short	0x0000
 23fc0fc:	1007aaec 	.word	0x1007aaec
 23fc100:	00000000 	.word	0x00000000

023fc104 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc104:	b509      	push	{r0, r3, lr}
 23fc106:	4804      	ldr	r0, [pc, #16]	; (23fc118 <netdb_freeaddrinfo+0x14>)
 23fc108:	6800      	ldr	r0, [r0, #0]
 23fc10a:	4b04      	ldr	r3, [pc, #16]	; (23fc11c <netdb_freeaddrinfo+0x18>)
 23fc10c:	4403      	add	r3, r0
 23fc10e:	681b      	ldr	r3, [r3, #0]
 23fc110:	689b      	ldr	r3, [r3, #8]
 23fc112:	9302      	str	r3, [sp, #8]
 23fc114:	bd09      	pop	{r0, r3, pc}
 23fc116:	0000      	.short	0x0000
 23fc118:	1007aaec 	.word	0x1007aaec
 23fc11c:	00000050 	.word	0x00000050

023fc120 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc120:	b509      	push	{r0, r3, lr}
 23fc122:	4804      	ldr	r0, [pc, #16]	; (23fc134 <netdb_getaddrinfo+0x14>)
 23fc124:	6800      	ldr	r0, [r0, #0]
 23fc126:	4b04      	ldr	r3, [pc, #16]	; (23fc138 <netdb_getaddrinfo+0x18>)
 23fc128:	4403      	add	r3, r0
 23fc12a:	681b      	ldr	r3, [r3, #0]
 23fc12c:	68db      	ldr	r3, [r3, #12]
 23fc12e:	9302      	str	r3, [sp, #8]
 23fc130:	bd09      	pop	{r0, r3, pc}
 23fc132:	0000      	.short	0x0000
 23fc134:	1007aaec 	.word	0x1007aaec
 23fc138:	00000050 	.word	0x00000050

023fc13c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fc13c:	b509      	push	{r0, r3, lr}
 23fc13e:	4804      	ldr	r0, [pc, #16]	; (23fc150 <panic_+0x14>)
 23fc140:	6800      	ldr	r0, [r0, #0]
 23fc142:	4b04      	ldr	r3, [pc, #16]	; (23fc154 <panic_+0x18>)
 23fc144:	4403      	add	r3, r0
 23fc146:	681b      	ldr	r3, [r3, #0]
 23fc148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc14a:	9302      	str	r3, [sp, #8]
 23fc14c:	bd09      	pop	{r0, r3, pc}
 23fc14e:	0000      	.short	0x0000
 23fc150:	1007aaec 	.word	0x1007aaec
 23fc154:	00000048 	.word	0x00000048

023fc158 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fc158:	b509      	push	{r0, r3, lr}
 23fc15a:	4804      	ldr	r0, [pc, #16]	; (23fc16c <log_message+0x14>)
 23fc15c:	6800      	ldr	r0, [r0, #0]
 23fc15e:	4b04      	ldr	r3, [pc, #16]	; (23fc170 <log_message+0x18>)
 23fc160:	4403      	add	r3, r0
 23fc162:	681b      	ldr	r3, [r3, #0]
 23fc164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fc166:	9302      	str	r3, [sp, #8]
 23fc168:	bd09      	pop	{r0, r3, pc}
 23fc16a:	0000      	.short	0x0000
 23fc16c:	1007aaec 	.word	0x1007aaec
 23fc170:	00000048 	.word	0x00000048

023fc174 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fc174:	b509      	push	{r0, r3, lr}
 23fc176:	4804      	ldr	r0, [pc, #16]	; (23fc188 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fc178:	6800      	ldr	r0, [r0, #0]
 23fc17a:	4b04      	ldr	r3, [pc, #16]	; (23fc18c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fc17c:	4403      	add	r3, r0
 23fc17e:	681b      	ldr	r3, [r3, #0]
 23fc180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fc182:	9302      	str	r3, [sp, #8]
 23fc184:	bd09      	pop	{r0, r3, pc}
 23fc186:	0000      	.short	0x0000
 23fc188:	1007aaec 	.word	0x1007aaec
 23fc18c:	0000002c 	.word	0x0000002c

023fc190 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc190:	b509      	push	{r0, r3, lr}
 23fc192:	4804      	ldr	r0, [pc, #16]	; (23fc1a4 <network_connect+0x14>)
 23fc194:	6800      	ldr	r0, [r0, #0]
 23fc196:	4b04      	ldr	r3, [pc, #16]	; (23fc1a8 <network_connect+0x18>)
 23fc198:	4403      	add	r3, r0
 23fc19a:	681b      	ldr	r3, [r3, #0]
 23fc19c:	685b      	ldr	r3, [r3, #4]
 23fc19e:	9302      	str	r3, [sp, #8]
 23fc1a0:	bd09      	pop	{r0, r3, pc}
 23fc1a2:	0000      	.short	0x0000
 23fc1a4:	1007aaec 	.word	0x1007aaec
 23fc1a8:	00000028 	.word	0x00000028

023fc1ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fc1ac:	b509      	push	{r0, r3, lr}
 23fc1ae:	4804      	ldr	r0, [pc, #16]	; (23fc1c0 <network_connecting+0x14>)
 23fc1b0:	6800      	ldr	r0, [r0, #0]
 23fc1b2:	4b04      	ldr	r3, [pc, #16]	; (23fc1c4 <network_connecting+0x18>)
 23fc1b4:	4403      	add	r3, r0
 23fc1b6:	681b      	ldr	r3, [r3, #0]
 23fc1b8:	689b      	ldr	r3, [r3, #8]
 23fc1ba:	9302      	str	r3, [sp, #8]
 23fc1bc:	bd09      	pop	{r0, r3, pc}
 23fc1be:	0000      	.short	0x0000
 23fc1c0:	1007aaec 	.word	0x1007aaec
 23fc1c4:	00000028 	.word	0x00000028

023fc1c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fc1c8:	b509      	push	{r0, r3, lr}
 23fc1ca:	4804      	ldr	r0, [pc, #16]	; (23fc1dc <network_disconnect+0x14>)
 23fc1cc:	6800      	ldr	r0, [r0, #0]
 23fc1ce:	4b04      	ldr	r3, [pc, #16]	; (23fc1e0 <network_disconnect+0x18>)
 23fc1d0:	4403      	add	r3, r0
 23fc1d2:	681b      	ldr	r3, [r3, #0]
 23fc1d4:	68db      	ldr	r3, [r3, #12]
 23fc1d6:	9302      	str	r3, [sp, #8]
 23fc1d8:	bd09      	pop	{r0, r3, pc}
 23fc1da:	0000      	.short	0x0000
 23fc1dc:	1007aaec 	.word	0x1007aaec
 23fc1e0:	00000028 	.word	0x00000028

023fc1e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc1e4:	b509      	push	{r0, r3, lr}
 23fc1e6:	4804      	ldr	r0, [pc, #16]	; (23fc1f8 <network_ready+0x14>)
 23fc1e8:	6800      	ldr	r0, [r0, #0]
 23fc1ea:	4b04      	ldr	r3, [pc, #16]	; (23fc1fc <network_ready+0x18>)
 23fc1ec:	4403      	add	r3, r0
 23fc1ee:	681b      	ldr	r3, [r3, #0]
 23fc1f0:	691b      	ldr	r3, [r3, #16]
 23fc1f2:	9302      	str	r3, [sp, #8]
 23fc1f4:	bd09      	pop	{r0, r3, pc}
 23fc1f6:	0000      	.short	0x0000
 23fc1f8:	1007aaec 	.word	0x1007aaec
 23fc1fc:	00000028 	.word	0x00000028

023fc200 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc200:	b509      	push	{r0, r3, lr}
 23fc202:	4804      	ldr	r0, [pc, #16]	; (23fc214 <network_on+0x14>)
 23fc204:	6800      	ldr	r0, [r0, #0]
 23fc206:	4b04      	ldr	r3, [pc, #16]	; (23fc218 <network_on+0x18>)
 23fc208:	4403      	add	r3, r0
 23fc20a:	681b      	ldr	r3, [r3, #0]
 23fc20c:	695b      	ldr	r3, [r3, #20]
 23fc20e:	9302      	str	r3, [sp, #8]
 23fc210:	bd09      	pop	{r0, r3, pc}
 23fc212:	0000      	.short	0x0000
 23fc214:	1007aaec 	.word	0x1007aaec
 23fc218:	00000028 	.word	0x00000028

023fc21c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc21c:	b509      	push	{r0, r3, lr}
 23fc21e:	4804      	ldr	r0, [pc, #16]	; (23fc230 <network_off+0x14>)
 23fc220:	6800      	ldr	r0, [r0, #0]
 23fc222:	4b04      	ldr	r3, [pc, #16]	; (23fc234 <network_off+0x18>)
 23fc224:	4403      	add	r3, r0
 23fc226:	681b      	ldr	r3, [r3, #0]
 23fc228:	699b      	ldr	r3, [r3, #24]
 23fc22a:	9302      	str	r3, [sp, #8]
 23fc22c:	bd09      	pop	{r0, r3, pc}
 23fc22e:	0000      	.short	0x0000
 23fc230:	1007aaec 	.word	0x1007aaec
 23fc234:	00000028 	.word	0x00000028

023fc238 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc238:	b509      	push	{r0, r3, lr}
 23fc23a:	4804      	ldr	r0, [pc, #16]	; (23fc24c <network_listen+0x14>)
 23fc23c:	6800      	ldr	r0, [r0, #0]
 23fc23e:	4b04      	ldr	r3, [pc, #16]	; (23fc250 <network_listen+0x18>)
 23fc240:	4403      	add	r3, r0
 23fc242:	681b      	ldr	r3, [r3, #0]
 23fc244:	69db      	ldr	r3, [r3, #28]
 23fc246:	9302      	str	r3, [sp, #8]
 23fc248:	bd09      	pop	{r0, r3, pc}
 23fc24a:	0000      	.short	0x0000
 23fc24c:	1007aaec 	.word	0x1007aaec
 23fc250:	00000028 	.word	0x00000028

023fc254 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc254:	b509      	push	{r0, r3, lr}
 23fc256:	4804      	ldr	r0, [pc, #16]	; (23fc268 <network_listening+0x14>)
 23fc258:	6800      	ldr	r0, [r0, #0]
 23fc25a:	4b04      	ldr	r3, [pc, #16]	; (23fc26c <network_listening+0x18>)
 23fc25c:	4403      	add	r3, r0
 23fc25e:	681b      	ldr	r3, [r3, #0]
 23fc260:	6a1b      	ldr	r3, [r3, #32]
 23fc262:	9302      	str	r3, [sp, #8]
 23fc264:	bd09      	pop	{r0, r3, pc}
 23fc266:	0000      	.short	0x0000
 23fc268:	1007aaec 	.word	0x1007aaec
 23fc26c:	00000028 	.word	0x00000028

023fc270 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc270:	b509      	push	{r0, r3, lr}
 23fc272:	4804      	ldr	r0, [pc, #16]	; (23fc284 <network_set_listen_timeout+0x14>)
 23fc274:	6800      	ldr	r0, [r0, #0]
 23fc276:	4b04      	ldr	r3, [pc, #16]	; (23fc288 <network_set_listen_timeout+0x18>)
 23fc278:	4403      	add	r3, r0
 23fc27a:	681b      	ldr	r3, [r3, #0]
 23fc27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc27e:	9302      	str	r3, [sp, #8]
 23fc280:	bd09      	pop	{r0, r3, pc}
 23fc282:	0000      	.short	0x0000
 23fc284:	1007aaec 	.word	0x1007aaec
 23fc288:	00000028 	.word	0x00000028

023fc28c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc28c:	b509      	push	{r0, r3, lr}
 23fc28e:	4804      	ldr	r0, [pc, #16]	; (23fc2a0 <network_get_listen_timeout+0x14>)
 23fc290:	6800      	ldr	r0, [r0, #0]
 23fc292:	4b04      	ldr	r3, [pc, #16]	; (23fc2a4 <network_get_listen_timeout+0x18>)
 23fc294:	4403      	add	r3, r0
 23fc296:	681b      	ldr	r3, [r3, #0]
 23fc298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc29a:	9302      	str	r3, [sp, #8]
 23fc29c:	bd09      	pop	{r0, r3, pc}
 23fc29e:	0000      	.short	0x0000
 23fc2a0:	1007aaec 	.word	0x1007aaec
 23fc2a4:	00000028 	.word	0x00000028

023fc2a8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc2a8:	b509      	push	{r0, r3, lr}
 23fc2aa:	4804      	ldr	r0, [pc, #16]	; (23fc2bc <network_is_on+0x14>)
 23fc2ac:	6800      	ldr	r0, [r0, #0]
 23fc2ae:	4b04      	ldr	r3, [pc, #16]	; (23fc2c0 <network_is_on+0x18>)
 23fc2b0:	4403      	add	r3, r0
 23fc2b2:	681b      	ldr	r3, [r3, #0]
 23fc2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc2b6:	9302      	str	r3, [sp, #8]
 23fc2b8:	bd09      	pop	{r0, r3, pc}
 23fc2ba:	0000      	.short	0x0000
 23fc2bc:	1007aaec 	.word	0x1007aaec
 23fc2c0:	00000028 	.word	0x00000028

023fc2c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc2c4:	b509      	push	{r0, r3, lr}
 23fc2c6:	4804      	ldr	r0, [pc, #16]	; (23fc2d8 <network_is_off+0x14>)
 23fc2c8:	6800      	ldr	r0, [r0, #0]
 23fc2ca:	4b04      	ldr	r3, [pc, #16]	; (23fc2dc <network_is_off+0x18>)
 23fc2cc:	4403      	add	r3, r0
 23fc2ce:	681b      	ldr	r3, [r3, #0]
 23fc2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc2d2:	9302      	str	r3, [sp, #8]
 23fc2d4:	bd09      	pop	{r0, r3, pc}
 23fc2d6:	0000      	.short	0x0000
 23fc2d8:	1007aaec 	.word	0x1007aaec
 23fc2dc:	00000028 	.word	0x00000028

023fc2e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fc2e0:	b509      	push	{r0, r3, lr}
 23fc2e2:	4804      	ldr	r0, [pc, #16]	; (23fc2f4 <set_system_mode+0x14>)
 23fc2e4:	6800      	ldr	r0, [r0, #0]
 23fc2e6:	4b04      	ldr	r3, [pc, #16]	; (23fc2f8 <set_system_mode+0x18>)
 23fc2e8:	4403      	add	r3, r0
 23fc2ea:	681b      	ldr	r3, [r3, #0]
 23fc2ec:	685b      	ldr	r3, [r3, #4]
 23fc2ee:	9302      	str	r3, [sp, #8]
 23fc2f0:	bd09      	pop	{r0, r3, pc}
 23fc2f2:	0000      	.short	0x0000
 23fc2f4:	1007aaec 	.word	0x1007aaec
 23fc2f8:	00000008 	.word	0x00000008

023fc2fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fc2fc:	b509      	push	{r0, r3, lr}
 23fc2fe:	4804      	ldr	r0, [pc, #16]	; (23fc310 <system_ctrl_set_app_request_handler+0x14>)
 23fc300:	6800      	ldr	r0, [r0, #0]
 23fc302:	4b04      	ldr	r3, [pc, #16]	; (23fc314 <system_ctrl_set_app_request_handler+0x18>)
 23fc304:	4403      	add	r3, r0
 23fc306:	681b      	ldr	r3, [r3, #0]
 23fc308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fc30c:	9302      	str	r3, [sp, #8]
 23fc30e:	bd09      	pop	{r0, r3, pc}
 23fc310:	1007aaec 	.word	0x1007aaec
 23fc314:	00000008 	.word	0x00000008

023fc318 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fc318:	b509      	push	{r0, r3, lr}
 23fc31a:	4804      	ldr	r0, [pc, #16]	; (23fc32c <system_ctrl_set_result+0x14>)
 23fc31c:	6800      	ldr	r0, [r0, #0]
 23fc31e:	4b04      	ldr	r3, [pc, #16]	; (23fc330 <system_ctrl_set_result+0x18>)
 23fc320:	4403      	add	r3, r0
 23fc322:	681b      	ldr	r3, [r3, #0]
 23fc324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fc328:	9302      	str	r3, [sp, #8]
 23fc32a:	bd09      	pop	{r0, r3, pc}
 23fc32c:	1007aaec 	.word	0x1007aaec
 23fc330:	00000008 	.word	0x00000008

023fc334 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc334:	b509      	push	{r0, r3, lr}
 23fc336:	4804      	ldr	r0, [pc, #16]	; (23fc348 <malloc+0x14>)
 23fc338:	6800      	ldr	r0, [r0, #0]
 23fc33a:	4b04      	ldr	r3, [pc, #16]	; (23fc34c <malloc+0x18>)
 23fc33c:	4403      	add	r3, r0
 23fc33e:	681b      	ldr	r3, [r3, #0]
 23fc340:	681b      	ldr	r3, [r3, #0]
 23fc342:	9302      	str	r3, [sp, #8]
 23fc344:	bd09      	pop	{r0, r3, pc}
 23fc346:	0000      	.short	0x0000
 23fc348:	1007aaec 	.word	0x1007aaec
 23fc34c:	00000004 	.word	0x00000004

023fc350 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc350:	b509      	push	{r0, r3, lr}
 23fc352:	4804      	ldr	r0, [pc, #16]	; (23fc364 <free+0x14>)
 23fc354:	6800      	ldr	r0, [r0, #0]
 23fc356:	4b04      	ldr	r3, [pc, #16]	; (23fc368 <free+0x18>)
 23fc358:	4403      	add	r3, r0
 23fc35a:	681b      	ldr	r3, [r3, #0]
 23fc35c:	685b      	ldr	r3, [r3, #4]
 23fc35e:	9302      	str	r3, [sp, #8]
 23fc360:	bd09      	pop	{r0, r3, pc}
 23fc362:	0000      	.short	0x0000
 23fc364:	1007aaec 	.word	0x1007aaec
 23fc368:	00000004 	.word	0x00000004

023fc36c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc36c:	b509      	push	{r0, r3, lr}
 23fc36e:	4804      	ldr	r0, [pc, #16]	; (23fc380 <realloc+0x14>)
 23fc370:	6800      	ldr	r0, [r0, #0]
 23fc372:	4b04      	ldr	r3, [pc, #16]	; (23fc384 <realloc+0x18>)
 23fc374:	4403      	add	r3, r0
 23fc376:	681b      	ldr	r3, [r3, #0]
 23fc378:	689b      	ldr	r3, [r3, #8]
 23fc37a:	9302      	str	r3, [sp, #8]
 23fc37c:	bd09      	pop	{r0, r3, pc}
 23fc37e:	0000      	.short	0x0000
 23fc380:	1007aaec 	.word	0x1007aaec
 23fc384:	00000004 	.word	0x00000004

023fc388 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fc388:	b509      	push	{r0, r3, lr}
 23fc38a:	4804      	ldr	r0, [pc, #16]	; (23fc39c <abort+0x14>)
 23fc38c:	6800      	ldr	r0, [r0, #0]
 23fc38e:	4b04      	ldr	r3, [pc, #16]	; (23fc3a0 <abort+0x18>)
 23fc390:	4403      	add	r3, r0
 23fc392:	681b      	ldr	r3, [r3, #0]
 23fc394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc396:	9302      	str	r3, [sp, #8]
 23fc398:	bd09      	pop	{r0, r3, pc}
 23fc39a:	0000      	.short	0x0000
 23fc39c:	1007aaec 	.word	0x1007aaec
 23fc3a0:	00000004 	.word	0x00000004

023fc3a4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc3a4:	b509      	push	{r0, r3, lr}
 23fc3a6:	4804      	ldr	r0, [pc, #16]	; (23fc3b8 <__assert_func+0x14>)
 23fc3a8:	6800      	ldr	r0, [r0, #0]
 23fc3aa:	4b04      	ldr	r3, [pc, #16]	; (23fc3bc <__assert_func+0x18>)
 23fc3ac:	4403      	add	r3, r0
 23fc3ae:	681b      	ldr	r3, [r3, #0]
 23fc3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc3b2:	9302      	str	r3, [sp, #8]
 23fc3b4:	bd09      	pop	{r0, r3, pc}
 23fc3b6:	0000      	.short	0x0000
 23fc3b8:	1007aaec 	.word	0x1007aaec
 23fc3bc:	00000004 	.word	0x00000004

023fc3c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc3c0:	b509      	push	{r0, r3, lr}
 23fc3c2:	4804      	ldr	r0, [pc, #16]	; (23fc3d4 <newlib_impure_ptr_callback+0x14>)
 23fc3c4:	6800      	ldr	r0, [r0, #0]
 23fc3c6:	4b04      	ldr	r3, [pc, #16]	; (23fc3d8 <newlib_impure_ptr_callback+0x18>)
 23fc3c8:	4403      	add	r3, r0
 23fc3ca:	681b      	ldr	r3, [r3, #0]
 23fc3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc3ce:	9302      	str	r3, [sp, #8]
 23fc3d0:	bd09      	pop	{r0, r3, pc}
 23fc3d2:	0000      	.short	0x0000
 23fc3d4:	1007aaec 	.word	0x1007aaec
 23fc3d8:	00000004 	.word	0x00000004

023fc3dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fc3dc:	2300      	movs	r3, #0
 23fc3de:	6840      	ldr	r0, [r0, #4]
 23fc3e0:	461a      	mov	r2, r3
 23fc3e2:	f7ff bed5 	b.w	23fc190 <network_connect>

023fc3e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fc3e6:	2200      	movs	r2, #0
 23fc3e8:	2102      	movs	r1, #2
 23fc3ea:	6840      	ldr	r0, [r0, #4]
 23fc3ec:	f7ff beec 	b.w	23fc1c8 <network_disconnect>

023fc3f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fc3f0:	2200      	movs	r2, #0
 23fc3f2:	6840      	ldr	r0, [r0, #4]
 23fc3f4:	4611      	mov	r1, r2
 23fc3f6:	f7ff bed9 	b.w	23fc1ac <network_connecting>

023fc3fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fc3fa:	2200      	movs	r2, #0
 23fc3fc:	6840      	ldr	r0, [r0, #4]
 23fc3fe:	4611      	mov	r1, r2
 23fc400:	f7ff bef0 	b.w	23fc1e4 <network_ready>

023fc404 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fc404:	2300      	movs	r3, #0
 23fc406:	6840      	ldr	r0, [r0, #4]
 23fc408:	461a      	mov	r2, r3
 23fc40a:	4619      	mov	r1, r3
 23fc40c:	f7ff bef8 	b.w	23fc200 <network_on>

023fc410 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fc410:	2300      	movs	r3, #0
 23fc412:	6840      	ldr	r0, [r0, #4]
 23fc414:	461a      	mov	r2, r3
 23fc416:	4619      	mov	r1, r3
 23fc418:	f7ff bf00 	b.w	23fc21c <network_off>

023fc41c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fc41c:	2100      	movs	r1, #0
 23fc41e:	6840      	ldr	r0, [r0, #4]
 23fc420:	f7ff bf42 	b.w	23fc2a8 <network_is_on>

023fc424 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fc424:	2100      	movs	r1, #0
 23fc426:	6840      	ldr	r0, [r0, #4]
 23fc428:	f7ff bf4c 	b.w	23fc2c4 <network_is_off>

023fc42c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fc42c:	2200      	movs	r2, #0
 23fc42e:	6840      	ldr	r0, [r0, #4]
 23fc430:	f081 0101 	eor.w	r1, r1, #1
 23fc434:	f7ff bf00 	b.w	23fc238 <network_listen>

023fc438 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fc438:	2200      	movs	r2, #0
 23fc43a:	6840      	ldr	r0, [r0, #4]
 23fc43c:	f7ff bf18 	b.w	23fc270 <network_set_listen_timeout>

023fc440 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fc440:	2200      	movs	r2, #0
 23fc442:	6840      	ldr	r0, [r0, #4]
 23fc444:	4611      	mov	r1, r2
 23fc446:	f7ff bf21 	b.w	23fc28c <network_get_listen_timeout>

023fc44a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fc44a:	2200      	movs	r2, #0
 23fc44c:	6840      	ldr	r0, [r0, #4]
 23fc44e:	4611      	mov	r1, r2
 23fc450:	f7ff bf00 	b.w	23fc254 <network_listening>

023fc454 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fc454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc458:	b095      	sub	sp, #84	; 0x54
 23fc45a:	4614      	mov	r4, r2
 23fc45c:	460d      	mov	r5, r1
 23fc45e:	4607      	mov	r7, r0
    IPAddress addr;
 23fc460:	f000 f984 	bl	23fc76c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fc464:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fc466:	221c      	movs	r2, #28
 23fc468:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fc46a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fc46c:	f003 fa1b 	bl	23ff8a6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fc470:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc472:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fc474:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc476:	2100      	movs	r1, #0
 23fc478:	466b      	mov	r3, sp
 23fc47a:	aa0c      	add	r2, sp, #48	; 0x30
 23fc47c:	f7ff fe50 	bl	23fc120 <netdb_getaddrinfo>
    if (!r) {
 23fc480:	4604      	mov	r4, r0
 23fc482:	2800      	cmp	r0, #0
 23fc484:	d14b      	bne.n	23fc51e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc486:	4602      	mov	r2, r0
 23fc488:	2101      	movs	r1, #1
 23fc48a:	6868      	ldr	r0, [r5, #4]
 23fc48c:	f7ff feaa 	bl	23fc1e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc490:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc492:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc494:	4622      	mov	r2, r4
 23fc496:	6868      	ldr	r0, [r5, #4]
 23fc498:	f7ff fea4 	bl	23fc1e4 <network_ready>
        bool ok = false;
 23fc49c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc49e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc4a0:	9e00      	ldr	r6, [sp, #0]
 23fc4a2:	2e00      	cmp	r6, #0
 23fc4a4:	d03b      	beq.n	23fc51e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fc4a6:	2900      	cmp	r1, #0
 23fc4a8:	d139      	bne.n	23fc51e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fc4aa:	6873      	ldr	r3, [r6, #4]
 23fc4ac:	2b02      	cmp	r3, #2
 23fc4ae:	d003      	beq.n	23fc4b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fc4b0:	2b0a      	cmp	r3, #10
 23fc4b2:	d011      	beq.n	23fc4d8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc4b4:	69f6      	ldr	r6, [r6, #28]
 23fc4b6:	e7f4      	b.n	23fc4a2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fc4b8:	f1b8 0f00 	cmp.w	r8, #0
 23fc4bc:	d0fa      	beq.n	23fc4b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fc4be:	6971      	ldr	r1, [r6, #20]


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
        return *this = IPAddress(address);
 23fc4c0:	a806      	add	r0, sp, #24
 23fc4c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fc4c4:	1d3c      	adds	r4, r7, #4
 23fc4c6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fc4c8:	f000 f97e 	bl	23fc7c8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fc4cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc4ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc4d0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc4d2:	4641      	mov	r1, r8
 23fc4d4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fc4d6:	e7ed      	b.n	23fc4b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fc4d8:	f1b9 0f00 	cmp.w	r9, #0
 23fc4dc:	d0ea      	beq.n	23fc4b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fc4de:	2210      	movs	r2, #16
 23fc4e0:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fc4e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fc4e4:	f003 f9df 	bl	23ff8a6 <memset>
                    a.v = 6;
 23fc4e8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc4ea:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fc4ec:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc4f0:	f104 0308 	add.w	r3, r4, #8
 23fc4f4:	3418      	adds	r4, #24
 23fc4f6:	462a      	mov	r2, r5
 23fc4f8:	6818      	ldr	r0, [r3, #0]
 23fc4fa:	6859      	ldr	r1, [r3, #4]
 23fc4fc:	3308      	adds	r3, #8
 23fc4fe:	c203      	stmia	r2!, {r0, r1}
 23fc500:	42a3      	cmp	r3, r4
 23fc502:	4615      	mov	r5, r2
 23fc504:	d1f7      	bne.n	23fc4f6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fc506:	a901      	add	r1, sp, #4
 23fc508:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fc50a:	1d3c      	adds	r4, r7, #4
 23fc50c:	ad07      	add	r5, sp, #28
 23fc50e:	f000 f93b 	bl	23fc788 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc516:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc518:	4649      	mov	r1, r9
 23fc51a:	7023      	strb	r3, [r4, #0]
                    break;
 23fc51c:	e7ca      	b.n	23fc4b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fc51e:	9800      	ldr	r0, [sp, #0]
 23fc520:	f7ff fdf0 	bl	23fc104 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fc524:	4638      	mov	r0, r7
 23fc526:	b015      	add	sp, #84	; 0x54
 23fc528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc52c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc52c:	4b02      	ldr	r3, [pc, #8]	; (23fc538 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fc52e:	4a03      	ldr	r2, [pc, #12]	; (23fc53c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fc530:	601a      	str	r2, [r3, #0]
 23fc532:	2200      	movs	r2, #0
 23fc534:	605a      	str	r2, [r3, #4]

} // spark
 23fc536:	4770      	bx	lr
 23fc538:	1007ae9c 	.word	0x1007ae9c
 23fc53c:	023ffaac 	.word	0x023ffaac

023fc540 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fc540:	2200      	movs	r2, #0
 23fc542:	6840      	ldr	r0, [r0, #4]
 23fc544:	4611      	mov	r1, r2
 23fc546:	f7ff be4d 	b.w	23fc1e4 <network_ready>

023fc54a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc54a:	2200      	movs	r2, #0
 23fc54c:	6840      	ldr	r0, [r0, #4]
 23fc54e:	4611      	mov	r1, r2
 23fc550:	f7ff be80 	b.w	23fc254 <network_listening>

023fc554 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc554:	2200      	movs	r2, #0
 23fc556:	6840      	ldr	r0, [r0, #4]
 23fc558:	4611      	mov	r1, r2
 23fc55a:	f7ff be97 	b.w	23fc28c <network_get_listen_timeout>

023fc55e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc55e:	2200      	movs	r2, #0
 23fc560:	6840      	ldr	r0, [r0, #4]
 23fc562:	f7ff be85 	b.w	23fc270 <network_set_listen_timeout>

023fc566 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc566:	2200      	movs	r2, #0
 23fc568:	6840      	ldr	r0, [r0, #4]
 23fc56a:	f081 0101 	eor.w	r1, r1, #1
 23fc56e:	f7ff be63 	b.w	23fc238 <network_listen>

023fc572 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc572:	2300      	movs	r3, #0
 23fc574:	6840      	ldr	r0, [r0, #4]
 23fc576:	461a      	mov	r2, r3
 23fc578:	4619      	mov	r1, r3
 23fc57a:	f7ff be4f 	b.w	23fc21c <network_off>

023fc57e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc57e:	2300      	movs	r3, #0
 23fc580:	6840      	ldr	r0, [r0, #4]
 23fc582:	461a      	mov	r2, r3
 23fc584:	4619      	mov	r1, r3
 23fc586:	f7ff be3b 	b.w	23fc200 <network_on>

023fc58a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc58a:	2200      	movs	r2, #0
 23fc58c:	6840      	ldr	r0, [r0, #4]
 23fc58e:	4611      	mov	r1, r2
 23fc590:	f7ff be0c 	b.w	23fc1ac <network_connecting>

023fc594 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc594:	2200      	movs	r2, #0
 23fc596:	2102      	movs	r1, #2
 23fc598:	6840      	ldr	r0, [r0, #4]
 23fc59a:	f7ff be15 	b.w	23fc1c8 <network_disconnect>

023fc59e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc59e:	2300      	movs	r3, #0
 23fc5a0:	6840      	ldr	r0, [r0, #4]
 23fc5a2:	461a      	mov	r2, r3
 23fc5a4:	f7ff bdf4 	b.w	23fc190 <network_connect>

023fc5a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fc5a8:	2204      	movs	r2, #4
 23fc5aa:	4b02      	ldr	r3, [pc, #8]	; (23fc5b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fc5ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fc5ae:	4a02      	ldr	r2, [pc, #8]	; (23fc5b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fc5b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fc5b2:	4770      	bx	lr
 23fc5b4:	1007aea4 	.word	0x1007aea4
 23fc5b8:	023ffae8 	.word	0x023ffae8

023fc5bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc5bc:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc5be:	6843      	ldr	r3, [r0, #4]
    {
 23fc5c0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc5c2:	3b01      	subs	r3, #1
 23fc5c4:	6043      	str	r3, [r0, #4]
 23fc5c6:	b963      	cbnz	r3, 23fc5e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc5c8:	6803      	ldr	r3, [r0, #0]
 23fc5ca:	689b      	ldr	r3, [r3, #8]
 23fc5cc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc5ce:	68a3      	ldr	r3, [r4, #8]
 23fc5d0:	3b01      	subs	r3, #1
 23fc5d2:	60a3      	str	r3, [r4, #8]
 23fc5d4:	b92b      	cbnz	r3, 23fc5e2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc5d6:	6823      	ldr	r3, [r4, #0]
 23fc5d8:	4620      	mov	r0, r4
    }
 23fc5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc5de:	68db      	ldr	r3, [r3, #12]
 23fc5e0:	4718      	bx	r3
    }
 23fc5e2:	bd10      	pop	{r4, pc}

023fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fc5e4:	b510      	push	{r4, lr}
 23fc5e6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fc5e8:	6800      	ldr	r0, [r0, #0]
 23fc5ea:	b108      	cbz	r0, 23fc5f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fc5ec:	f7ff ffe6 	bl	23fc5bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fc5f0:	4620      	mov	r0, r4
 23fc5f2:	bd10      	pop	{r4, pc}

023fc5f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc5f4:	7441      	strb	r1, [r0, #17]
}
 23fc5f6:	4770      	bx	lr

023fc5f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc5f8:	4770      	bx	lr

023fc5fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc5fa:	4770      	bx	lr

023fc5fc <_ZN9USBSerial4readEv>:
{
 23fc5fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc5fe:	2100      	movs	r1, #0
 23fc600:	7c00      	ldrb	r0, [r0, #16]
 23fc602:	f7ff fbb1 	bl	23fbd68 <HAL_USB_USART_Receive_Data>
}
 23fc606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc60a:	bd08      	pop	{r3, pc}

023fc60c <_ZN9USBSerial4peekEv>:
{
 23fc60c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc60e:	2101      	movs	r1, #1
 23fc610:	7c00      	ldrb	r0, [r0, #16]
 23fc612:	f7ff fba9 	bl	23fbd68 <HAL_USB_USART_Receive_Data>
}
 23fc616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc61a:	bd08      	pop	{r3, pc}

023fc61c <_ZN9USBSerial17availableForWriteEv>:
{
 23fc61c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc61e:	7c00      	ldrb	r0, [r0, #16]
 23fc620:	f7ff fb94 	bl	23fbd4c <HAL_USB_USART_Available_Data_For_Write>
}
 23fc624:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc628:	bd08      	pop	{r3, pc}

023fc62a <_ZN9USBSerial9availableEv>:
{
 23fc62a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc62c:	7c00      	ldrb	r0, [r0, #16]
 23fc62e:	f7ff fb7f 	bl	23fbd30 <HAL_USB_USART_Available_Data>
}
 23fc632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc636:	bd08      	pop	{r3, pc}

023fc638 <_ZN9USBSerial5writeEh>:
{
 23fc638:	b513      	push	{r0, r1, r4, lr}
 23fc63a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc63c:	7c00      	ldrb	r0, [r0, #16]
{
 23fc63e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc640:	f7ff fb84 	bl	23fbd4c <HAL_USB_USART_Available_Data_For_Write>
 23fc644:	2800      	cmp	r0, #0
 23fc646:	9901      	ldr	r1, [sp, #4]
 23fc648:	dc01      	bgt.n	23fc64e <_ZN9USBSerial5writeEh+0x16>
 23fc64a:	7c60      	ldrb	r0, [r4, #17]
 23fc64c:	b120      	cbz	r0, 23fc658 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc64e:	7c20      	ldrb	r0, [r4, #16]
 23fc650:	f7ff fb98 	bl	23fbd84 <HAL_USB_USART_Send_Data>
 23fc654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc658:	b002      	add	sp, #8
 23fc65a:	bd10      	pop	{r4, pc}

023fc65c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc65c:	7c00      	ldrb	r0, [r0, #16]
 23fc65e:	f7ff bb9f 	b.w	23fbda0 <HAL_USB_USART_Flush_Data>

023fc662 <_ZN9USBSerialD0Ev>:
 23fc662:	b510      	push	{r4, lr}
 23fc664:	4604      	mov	r4, r0
 23fc666:	2114      	movs	r1, #20
 23fc668:	f7ff fa29 	bl	23fbabe <_ZdlPvj>
 23fc66c:	4620      	mov	r0, r4
 23fc66e:	bd10      	pop	{r4, pc}

023fc670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc670:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc676:	4604      	mov	r4, r0
 23fc678:	4608      	mov	r0, r1
 23fc67a:	2100      	movs	r1, #0
 23fc67c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc680:	4b04      	ldr	r3, [pc, #16]	; (23fc694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc682:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc684:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc686:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc688:	4611      	mov	r1, r2
  _blocking = true;
 23fc68a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc68c:	f7ff fb34 	bl	23fbcf8 <HAL_USB_USART_Init>
}
 23fc690:	4620      	mov	r0, r4
 23fc692:	bd10      	pop	{r4, pc}
 23fc694:	023ffb2c 	.word	0x023ffb2c

023fc698 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc698:	2200      	movs	r2, #0
 23fc69a:	7c00      	ldrb	r0, [r0, #16]
 23fc69c:	f7ff bb3a 	b.w	23fbd14 <HAL_USB_USART_Begin>

023fc6a0 <_Z19acquireSerialBufferv>:
{
 23fc6a0:	b510      	push	{r4, lr}
 23fc6a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc6a4:	2214      	movs	r2, #20
 23fc6a6:	2100      	movs	r1, #0
 23fc6a8:	f003 f8fd 	bl	23ff8a6 <memset>
}
 23fc6ac:	4620      	mov	r0, r4
 23fc6ae:	bd10      	pop	{r4, pc}

023fc6b0 <_Z16_fetch_usbserialv>:
{
 23fc6b0:	b510      	push	{r4, lr}
 23fc6b2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc6b4:	a803      	add	r0, sp, #12
 23fc6b6:	f7ff fff3 	bl	23fc6a0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc6ba:	4c0c      	ldr	r4, [pc, #48]	; (23fc6ec <_Z16_fetch_usbserialv+0x3c>)
 23fc6bc:	e8d4 1f8f 	ldab	r1, [r4]
 23fc6c0:	f011 0101 	ands.w	r1, r1, #1
 23fc6c4:	d10f      	bne.n	23fc6e6 <_Z16_fetch_usbserialv+0x36>
 23fc6c6:	4620      	mov	r0, r4
 23fc6c8:	9101      	str	r1, [sp, #4]
 23fc6ca:	f7ff f9fa 	bl	23fbac2 <__cxa_guard_acquire>
 23fc6ce:	9901      	ldr	r1, [sp, #4]
 23fc6d0:	b148      	cbz	r0, 23fc6e6 <_Z16_fetch_usbserialv+0x36>
 23fc6d2:	aa03      	add	r2, sp, #12
 23fc6d4:	4806      	ldr	r0, [pc, #24]	; (23fc6f0 <_Z16_fetch_usbserialv+0x40>)
 23fc6d6:	f7ff ffcb 	bl	23fc670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc6da:	4620      	mov	r0, r4
 23fc6dc:	f7ff f9f6 	bl	23fbacc <__cxa_guard_release>
 23fc6e0:	4804      	ldr	r0, [pc, #16]	; (23fc6f4 <_Z16_fetch_usbserialv+0x44>)
 23fc6e2:	f003 f8a3 	bl	23ff82c <atexit>
	return _usbserial;
}
 23fc6e6:	4802      	ldr	r0, [pc, #8]	; (23fc6f0 <_Z16_fetch_usbserialv+0x40>)
 23fc6e8:	b008      	add	sp, #32
 23fc6ea:	bd10      	pop	{r4, pc}
 23fc6ec:	1007aeac 	.word	0x1007aeac
 23fc6f0:	1007aeb0 	.word	0x1007aeb0
 23fc6f4:	023fc5f9 	.word	0x023fc5f9

023fc6f8 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 23fc6f8:	4770      	bx	lr

023fc6fa <_ZN9IPAddressD0Ev>:
 23fc6fa:	b510      	push	{r4, lr}
 23fc6fc:	4604      	mov	r4, r0
 23fc6fe:	2118      	movs	r1, #24
 23fc700:	f7ff f9dd 	bl	23fbabe <_ZdlPvj>
 23fc704:	4620      	mov	r0, r4
 23fc706:	bd10      	pop	{r4, pc}

023fc708 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc708:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc70a:	7d03      	ldrb	r3, [r0, #20]
{
 23fc70c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc70e:	2b06      	cmp	r3, #6
 23fc710:	f04f 0400 	mov.w	r4, #0
{
 23fc714:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc716:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc71a:	d012      	beq.n	23fc742 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc71c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc720:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc724:	220a      	movs	r2, #10
 23fc726:	4630      	mov	r0, r6
 23fc728:	f000 f977 	bl	23fca1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc72c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc72e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc730:	d019      	beq.n	23fc766 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc732:	2c00      	cmp	r4, #0
 23fc734:	d0f4      	beq.n	23fc720 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc736:	212e      	movs	r1, #46	; 0x2e
 23fc738:	4630      	mov	r0, r6
 23fc73a:	f000 f96b 	bl	23fca14 <_ZN5Print5printEc>
 23fc73e:	4404      	add	r4, r0
 23fc740:	e7ee      	b.n	23fc720 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc742:	232f      	movs	r3, #47	; 0x2f
 23fc744:	466a      	mov	r2, sp
 23fc746:	4639      	mov	r1, r7
 23fc748:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc74a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc74e:	f7ff fba5 	bl	23fbe9c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc752:	4668      	mov	r0, sp
 23fc754:	f7ff f98a 	bl	23fba6c <strlen>
 23fc758:	6833      	ldr	r3, [r6, #0]
 23fc75a:	4602      	mov	r2, r0
 23fc75c:	4669      	mov	r1, sp
 23fc75e:	4630      	mov	r0, r6
 23fc760:	68db      	ldr	r3, [r3, #12]
 23fc762:	4798      	blx	r3
 23fc764:	4604      	mov	r4, r0
    }
    return n;
}
 23fc766:	4620      	mov	r0, r4
 23fc768:	b00d      	add	sp, #52	; 0x34
 23fc76a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc76c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc76c:	b510      	push	{r4, lr}
 23fc76e:	4604      	mov	r4, r0
 23fc770:	4b04      	ldr	r3, [pc, #16]	; (23fc784 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc772:	2211      	movs	r2, #17
 23fc774:	2100      	movs	r1, #0
 23fc776:	f840 3b04 	str.w	r3, [r0], #4
 23fc77a:	f003 f894 	bl	23ff8a6 <memset>
}
 23fc77e:	4620      	mov	r0, r4
 23fc780:	bd10      	pop	{r4, pc}
 23fc782:	bf00      	nop
 23fc784:	023ffb5c 	.word	0x023ffb5c

023fc788 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc788:	4603      	mov	r3, r0
 23fc78a:	4a07      	ldr	r2, [pc, #28]	; (23fc7a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc78c:	b510      	push	{r4, lr}
 23fc78e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc792:	f101 0210 	add.w	r2, r1, #16
 23fc796:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc79a:	4291      	cmp	r1, r2
 23fc79c:	f843 4b04 	str.w	r4, [r3], #4
 23fc7a0:	d1f9      	bne.n	23fc796 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc7a2:	780a      	ldrb	r2, [r1, #0]
 23fc7a4:	701a      	strb	r2, [r3, #0]
}
 23fc7a6:	bd10      	pop	{r4, pc}
 23fc7a8:	023ffb5c 	.word	0x023ffb5c

023fc7ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc7ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc7ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc7b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc7b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc7ba:	2304      	movs	r3, #4
 23fc7bc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc7c0:	6041      	str	r1, [r0, #4]
 23fc7c2:	7503      	strb	r3, [r0, #20]
}
 23fc7c4:	bd10      	pop	{r4, pc}
	...

023fc7c8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc7c8:	b507      	push	{r0, r1, r2, lr}
 23fc7ca:	4b06      	ldr	r3, [pc, #24]	; (23fc7e4 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc7cc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc7ce:	78cb      	ldrb	r3, [r1, #3]
 23fc7d0:	9300      	str	r3, [sp, #0]
 23fc7d2:	788b      	ldrb	r3, [r1, #2]
 23fc7d4:	784a      	ldrb	r2, [r1, #1]
 23fc7d6:	7809      	ldrb	r1, [r1, #0]
 23fc7d8:	f7ff ffe8 	bl	23fc7ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc7dc:	b003      	add	sp, #12
 23fc7de:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc7e2:	bf00      	nop
 23fc7e4:	023ffb5c 	.word	0x023ffb5c

023fc7e8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fc7e8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fc7ea:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fc7ec:	4604      	mov	r4, r0
      if (_M_manager)
 23fc7ee:	b113      	cbz	r3, 23fc7f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc7f0:	2203      	movs	r2, #3
 23fc7f2:	4601      	mov	r1, r0
 23fc7f4:	4798      	blx	r3
    }
 23fc7f6:	4620      	mov	r0, r4
 23fc7f8:	bd10      	pop	{r4, pc}

023fc7fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fc7fa:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc7fc:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fc7fe:	460b      	mov	r3, r1
 23fc800:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc802:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fc806:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fc80a:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fc80e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fc812:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fc816:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fc81a:	b002      	add	sp, #8
 23fc81c:	bd10      	pop	{r4, pc}
	...

023fc820 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fc820:	4b01      	ldr	r3, [pc, #4]	; (23fc828 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fc822:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fc824:	4770      	bx	lr
 23fc826:	bf00      	nop
 23fc828:	1007aaf4 	.word	0x1007aaf4

023fc82c <serialEventRun>:
{
 23fc82c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fc82e:	4b0f      	ldr	r3, [pc, #60]	; (23fc86c <serialEventRun+0x40>)
 23fc830:	b143      	cbz	r3, 23fc844 <serialEventRun+0x18>
 23fc832:	f7ff ff3d 	bl	23fc6b0 <_Z16_fetch_usbserialv>
 23fc836:	6803      	ldr	r3, [r0, #0]
 23fc838:	691b      	ldr	r3, [r3, #16]
 23fc83a:	4798      	blx	r3
 23fc83c:	2800      	cmp	r0, #0
 23fc83e:	dd01      	ble.n	23fc844 <serialEventRun+0x18>
        serialEvent();
 23fc840:	e000      	b.n	23fc844 <serialEventRun+0x18>
 23fc842:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fc844:	4b0a      	ldr	r3, [pc, #40]	; (23fc870 <serialEventRun+0x44>)
 23fc846:	b143      	cbz	r3, 23fc85a <serialEventRun+0x2e>
 23fc848:	f002 fe48 	bl	23ff4dc <_Z22__fetch_global_Serial1v>
 23fc84c:	6803      	ldr	r3, [r0, #0]
 23fc84e:	691b      	ldr	r3, [r3, #16]
 23fc850:	4798      	blx	r3
 23fc852:	2800      	cmp	r0, #0
 23fc854:	dd01      	ble.n	23fc85a <serialEventRun+0x2e>
        serialEvent1();
 23fc856:	e000      	b.n	23fc85a <serialEventRun+0x2e>
 23fc858:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fc85a:	4b06      	ldr	r3, [pc, #24]	; (23fc874 <serialEventRun+0x48>)
 23fc85c:	b10b      	cbz	r3, 23fc862 <serialEventRun+0x36>
 23fc85e:	f002 fe83 	bl	23ff568 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fc862:	4b05      	ldr	r3, [pc, #20]	; (23fc878 <serialEventRun+0x4c>)
 23fc864:	b10b      	cbz	r3, 23fc86a <serialEventRun+0x3e>
 23fc866:	f002 feb5 	bl	23ff5d4 <_Z15serialEventRun3v>
}
 23fc86a:	bd08      	pop	{r3, pc}
	...

023fc87c <_post_loop>:
{
 23fc87c:	b508      	push	{r3, lr}
	serialEventRun();
 23fc87e:	f7ff ffd5 	bl	23fc82c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fc882:	f7ff fc31 	bl	23fc0e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fc886:	4b01      	ldr	r3, [pc, #4]	; (23fc88c <_post_loop+0x10>)
 23fc888:	6018      	str	r0, [r3, #0]
}
 23fc88a:	bd08      	pop	{r3, pc}
 23fc88c:	1007af08 	.word	0x1007af08

023fc890 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc890:	4805      	ldr	r0, [pc, #20]	; (23fc8a8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fc892:	4a06      	ldr	r2, [pc, #24]	; (23fc8ac <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fc894:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc896:	1a12      	subs	r2, r2, r0
 23fc898:	4905      	ldr	r1, [pc, #20]	; (23fc8b0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fc89a:	f002 ffdd 	bl	23ff858 <memcpy>
    __backup_sram_signature = signature;
 23fc89e:	4b05      	ldr	r3, [pc, #20]	; (23fc8b4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fc8a0:	4a05      	ldr	r2, [pc, #20]	; (23fc8b8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fc8a2:	601a      	str	r2, [r3, #0]
}
 23fc8a4:	bd08      	pop	{r3, pc}
 23fc8a6:	bf00      	nop
 23fc8a8:	1007b400 	.word	0x1007b400
 23fc8ac:	1007b404 	.word	0x1007b404
 23fc8b0:	085ff6a0 	.word	0x085ff6a0
 23fc8b4:	1007b400 	.word	0x1007b400
 23fc8b8:	9a271c1e 	.word	0x9a271c1e

023fc8bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc8bc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fc8be:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc8c0:	461a      	mov	r2, r3
 23fc8c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc8c6:	9300      	str	r3, [sp, #0]
 23fc8c8:	f7ff fd26 	bl	23fc318 <system_ctrl_set_result>
}
 23fc8cc:	b003      	add	sp, #12
 23fc8ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc8d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fc8d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fc8d6:	8843      	ldrh	r3, [r0, #2]
 23fc8d8:	2b0a      	cmp	r3, #10
 23fc8da:	d008      	beq.n	23fc8ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fc8dc:	2b50      	cmp	r3, #80	; 0x50
 23fc8de:	d10b      	bne.n	23fc8f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fc8e0:	4b09      	ldr	r3, [pc, #36]	; (23fc908 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fc8e2:	681b      	ldr	r3, [r3, #0]
 23fc8e4:	b14b      	cbz	r3, 23fc8fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fc8e6:	b003      	add	sp, #12
 23fc8e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fc8ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fc8ee:	f7ff ffe5 	bl	23fc8bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fc8f2:	b003      	add	sp, #12
 23fc8f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc8f8:	2300      	movs	r3, #0
 23fc8fa:	461a      	mov	r2, r3
 23fc8fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc900:	9300      	str	r3, [sp, #0]
 23fc902:	f7ff fd09 	bl	23fc318 <system_ctrl_set_result>
}
 23fc906:	e7f4      	b.n	23fc8f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fc908:	1007aec8 	.word	0x1007aec8

023fc90c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc90c:	2100      	movs	r1, #0
{
 23fc90e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc910:	4811      	ldr	r0, [pc, #68]	; (23fc958 <module_user_init_hook+0x4c>)
 23fc912:	f7ff fd55 	bl	23fc3c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fc916:	4b11      	ldr	r3, [pc, #68]	; (23fc95c <module_user_init_hook+0x50>)
 23fc918:	681a      	ldr	r2, [r3, #0]
 23fc91a:	4b11      	ldr	r3, [pc, #68]	; (23fc960 <module_user_init_hook+0x54>)
 23fc91c:	429a      	cmp	r2, r3
 23fc91e:	bf0c      	ite	eq
 23fc920:	2201      	moveq	r2, #1
 23fc922:	2200      	movne	r2, #0
 23fc924:	4b0f      	ldr	r3, [pc, #60]	; (23fc964 <module_user_init_hook+0x58>)
 23fc926:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fc928:	d001      	beq.n	23fc92e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fc92a:	f7ff ffb1 	bl	23fc890 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fc92e:	f7ff fbbf 	bl	23fc0b0 <HAL_RNG_GetRandomNumber>
 23fc932:	4604      	mov	r4, r0
    srand(seed);
 23fc934:	f002 ffc0 	bl	23ff8b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fc938:	4b0b      	ldr	r3, [pc, #44]	; (23fc968 <module_user_init_hook+0x5c>)
 23fc93a:	b113      	cbz	r3, 23fc942 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fc93c:	4620      	mov	r0, r4
 23fc93e:	e000      	b.n	23fc942 <module_user_init_hook+0x36>
 23fc940:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fc942:	2100      	movs	r1, #0
 23fc944:	4808      	ldr	r0, [pc, #32]	; (23fc968 <module_user_init_hook+0x5c>)
 23fc946:	f7ff fc15 	bl	23fc174 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fc94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fc94e:	2100      	movs	r1, #0
 23fc950:	4806      	ldr	r0, [pc, #24]	; (23fc96c <module_user_init_hook+0x60>)
 23fc952:	f7ff bcd3 	b.w	23fc2fc <system_ctrl_set_app_request_handler>
 23fc956:	bf00      	nop
 23fc958:	023fc821 	.word	0x023fc821
 23fc95c:	1007b400 	.word	0x1007b400
 23fc960:	9a271c1e 	.word	0x9a271c1e
 23fc964:	1007aec4 	.word	0x1007aec4
 23fc968:	00000000 	.word	0x00000000
 23fc96c:	023fc8d5 	.word	0x023fc8d5

023fc970 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fc970:	2200      	movs	r2, #0
 23fc972:	4b01      	ldr	r3, [pc, #4]	; (23fc978 <_GLOBAL__sub_I_RGB+0x8>)
 23fc974:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fc976:	4770      	bx	lr
 23fc978:	1007aecc 	.word	0x1007aecc

023fc97c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc97c:	4b02      	ldr	r3, [pc, #8]	; (23fc988 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc97e:	681a      	ldr	r2, [r3, #0]
 23fc980:	4b02      	ldr	r3, [pc, #8]	; (23fc98c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc982:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc984:	4770      	bx	lr
 23fc986:	bf00      	nop
 23fc988:	1007aaf0 	.word	0x1007aaf0
 23fc98c:	1007aedc 	.word	0x1007aedc

023fc990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc990:	b570      	push	{r4, r5, r6, lr}
 23fc992:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc994:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc998:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc99c:	42ae      	cmp	r6, r5
 23fc99e:	d004      	beq.n	23fc9aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc9a0:	4628      	mov	r0, r5
 23fc9a2:	f002 fc73 	bl	23ff28c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc9a6:	3510      	adds	r5, #16
 23fc9a8:	e7f8      	b.n	23fc99c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc9aa:	6820      	ldr	r0, [r4, #0]
 23fc9ac:	f7ff fcd0 	bl	23fc350 <free>
    AllocatorT::free(data_);
}
 23fc9b0:	4620      	mov	r0, r4
 23fc9b2:	bd70      	pop	{r4, r5, r6, pc}

023fc9b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fc9b4:	4b01      	ldr	r3, [pc, #4]	; (23fc9bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fc9b6:	4a02      	ldr	r2, [pc, #8]	; (23fc9c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fc9b8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fc9ba:	4770      	bx	lr
 23fc9bc:	1007aee0 	.word	0x1007aee0
 23fc9c0:	023ffb84 	.word	0x023ffb84

023fc9c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fc9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc9c6:	4606      	mov	r6, r0
 23fc9c8:	460d      	mov	r5, r1
  size_t n = 0;
 23fc9ca:	2400      	movs	r4, #0
 23fc9cc:	188f      	adds	r7, r1, r2
  while (size--) {
 23fc9ce:	42bd      	cmp	r5, r7
 23fc9d0:	d00c      	beq.n	23fc9ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fc9d2:	6833      	ldr	r3, [r6, #0]
 23fc9d4:	4630      	mov	r0, r6
 23fc9d6:	689b      	ldr	r3, [r3, #8]
 23fc9d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fc9dc:	4798      	blx	r3
     if (chunk>=0)
 23fc9de:	1e03      	subs	r3, r0, #0
 23fc9e0:	db01      	blt.n	23fc9e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fc9e2:	441c      	add	r4, r3
  while (size--) {
 23fc9e4:	e7f3      	b.n	23fc9ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fc9e6:	2c00      	cmp	r4, #0
 23fc9e8:	bf08      	it	eq
 23fc9ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fc9ec:	4620      	mov	r0, r4
 23fc9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc9f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fc9f0:	b513      	push	{r0, r1, r4, lr}
 23fc9f2:	4604      	mov	r4, r0
    }
 23fc9f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fc9f6:	b159      	cbz	r1, 23fca10 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fc9f8:	9101      	str	r1, [sp, #4]
 23fc9fa:	f7ff f837 	bl	23fba6c <strlen>
 23fc9fe:	4602      	mov	r2, r0
 23fca00:	4620      	mov	r0, r4
 23fca02:	6823      	ldr	r3, [r4, #0]
 23fca04:	9901      	ldr	r1, [sp, #4]
 23fca06:	68db      	ldr	r3, [r3, #12]
    }
 23fca08:	b002      	add	sp, #8
 23fca0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fca0e:	4718      	bx	r3
    }
 23fca10:	b002      	add	sp, #8
 23fca12:	bd10      	pop	{r4, pc}

023fca14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fca14:	6803      	ldr	r3, [r0, #0]
 23fca16:	689b      	ldr	r3, [r3, #8]
 23fca18:	4718      	bx	r3

023fca1a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fca1a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fca1c:	2a01      	cmp	r2, #1
 23fca1e:	bf98      	it	ls
 23fca20:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fca22:	b530      	push	{r4, r5, lr}
 23fca24:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fca26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fca2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fca2c:	460d      	mov	r5, r1
 23fca2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fca32:	fb01 5312 	mls	r3, r1, r2, r5
 23fca36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fca3a:	2b09      	cmp	r3, #9
 23fca3c:	bf94      	ite	ls
 23fca3e:	3330      	addls	r3, #48	; 0x30
 23fca40:	3337      	addhi	r3, #55	; 0x37
 23fca42:	b2db      	uxtb	r3, r3
  } while(n);
 23fca44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fca46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fca4a:	d9ef      	bls.n	23fca2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fca4c:	4621      	mov	r1, r4
 23fca4e:	f7ff ffcf 	bl	23fc9f0 <_ZN5Print5writeEPKc>
}
 23fca52:	b00b      	add	sp, #44	; 0x2c
 23fca54:	bd30      	pop	{r4, r5, pc}

023fca56 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fca56:	4770      	bx	lr

023fca58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 23fca58:	4770      	bx	lr

023fca5a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
 23fca5a:	4770      	bx	lr

023fca5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fca5c:	4770      	bx	lr
	...

023fca60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fca60:	4b06      	ldr	r3, [pc, #24]	; (23fca7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fca62:	b510      	push	{r4, lr}
	    ||
 23fca64:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fca66:	f100 040c 	add.w	r4, r0, #12
 23fca6a:	d005      	beq.n	23fca78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fca6c:	4608      	mov	r0, r1
 23fca6e:	f002 fdcb 	bl	23ff608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fca72:	2800      	cmp	r0, #0
 23fca74:	bf08      	it	eq
 23fca76:	2400      	moveq	r4, #0
      }
 23fca78:	4620      	mov	r0, r4
 23fca7a:	bd10      	pop	{r4, pc}
 23fca7c:	023ffb1c 	.word	0x023ffb1c

023fca80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fca80:	4b06      	ldr	r3, [pc, #24]	; (23fca9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fca82:	b510      	push	{r4, lr}
	    ||
 23fca84:	4299      	cmp	r1, r3
 23fca86:	f100 040c 	add.w	r4, r0, #12
 23fca8a:	d005      	beq.n	23fca98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fca8c:	4608      	mov	r0, r1
 23fca8e:	f002 fdbb 	bl	23ff608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fca92:	2800      	cmp	r0, #0
 23fca94:	bf08      	it	eq
 23fca96:	2400      	moveq	r4, #0
      }
 23fca98:	4620      	mov	r0, r4
 23fca9a:	bd10      	pop	{r4, pc}
 23fca9c:	023ffb1c 	.word	0x023ffb1c

023fcaa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fcaa0:	4b06      	ldr	r3, [pc, #24]	; (23fcabc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fcaa2:	b510      	push	{r4, lr}
	    ||
 23fcaa4:	4299      	cmp	r1, r3
 23fcaa6:	f100 040c 	add.w	r4, r0, #12
 23fcaaa:	d005      	beq.n	23fcab8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fcaac:	4608      	mov	r0, r1
 23fcaae:	f002 fdab 	bl	23ff608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fcab2:	2800      	cmp	r0, #0
 23fcab4:	bf08      	it	eq
 23fcab6:	2400      	moveq	r4, #0
      }
 23fcab8:	4620      	mov	r0, r4
 23fcaba:	bd10      	pop	{r4, pc}
 23fcabc:	023ffb1c 	.word	0x023ffb1c

023fcac0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fcac0:	b510      	push	{r4, lr}
 23fcac2:	4604      	mov	r4, r0
 23fcac4:	2168      	movs	r1, #104	; 0x68
 23fcac6:	f7fe fffa 	bl	23fbabe <_ZdlPvj>
 23fcaca:	4620      	mov	r0, r4
 23fcacc:	bd10      	pop	{r4, pc}

023fcace <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fcace:	b510      	push	{r4, lr}
 23fcad0:	4604      	mov	r4, r0
 23fcad2:	2128      	movs	r1, #40	; 0x28
 23fcad4:	f7fe fff3 	bl	23fbabe <_ZdlPvj>
 23fcad8:	4620      	mov	r0, r4
 23fcada:	bd10      	pop	{r4, pc}

023fcadc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 23fcadc:	b510      	push	{r4, lr}
 23fcade:	4604      	mov	r4, r0
 23fcae0:	2130      	movs	r1, #48	; 0x30
 23fcae2:	f7fe ffec 	bl	23fbabe <_ZdlPvj>
 23fcae6:	4620      	mov	r0, r4
 23fcae8:	bd10      	pop	{r4, pc}

023fcaea <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fcaea:	2168      	movs	r1, #104	; 0x68
 23fcaec:	f7fe bfe7 	b.w	23fbabe <_ZdlPvj>

023fcaf0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fcaf0:	2128      	movs	r1, #40	; 0x28
 23fcaf2:	f7fe bfe4 	b.w	23fbabe <_ZdlPvj>

023fcaf6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
 23fcaf6:	2130      	movs	r1, #48	; 0x30
 23fcaf8:	f7fe bfe1 	b.w	23fbabe <_ZdlPvj>

023fcafc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
 23fcafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fcafe:	2500      	movs	r5, #0
 23fcb00:	1cec      	adds	r4, r5, #3
 23fcb02:	428c      	cmp	r4, r1
 23fcb04:	d80d      	bhi.n	23fcb22 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
 23fcb06:	1c6e      	adds	r6, r5, #1
 23fcb08:	5d87      	ldrb	r7, [r0, r6]
        adsLen = buf[i];
 23fcb0a:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
 23fcb0c:	4297      	cmp	r7, r2
 23fcb0e:	d105      	bne.n	23fcb1c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
 23fcb10:	4426      	add	r6, r4
 23fcb12:	42b1      	cmp	r1, r6
 23fcb14:	d305      	bcc.n	23fcb22 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
 23fcb16:	601d      	str	r5, [r3, #0]
                adsLen += 1;
 23fcb18:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
 23fcb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
 23fcb1c:	3401      	adds	r4, #1
 23fcb1e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
 23fcb20:	e7ee      	b.n	23fcb00 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
 23fcb22:	2000      	movs	r0, #0
 23fcb24:	e7f9      	b.n	23fcb1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

023fcb28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
 23fcb28:	200a      	movs	r0, #10
 23fcb2a:	4a02      	ldr	r2, [pc, #8]	; (23fcb34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
 23fcb2c:	4902      	ldr	r1, [pc, #8]	; (23fcb38 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
 23fcb2e:	f7ff bb05 	b.w	23fc13c <panic_>
 23fcb32:	bf00      	nop
 23fcb34:	023fc0cd 	.word	0x023fc0cd
 23fcb38:	023ffb88 	.word	0x023ffb88

023fcb3c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fcb3c:	b430      	push	{r4, r5}
 23fcb3e:	460d      	mov	r5, r1
 23fcb40:	4611      	mov	r1, r2
 23fcb42:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
 23fcb44:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fcb46:	6809      	ldr	r1, [r1, #0]
 23fcb48:	e9d3 4300 	ldrd	r4, r3, [r3]
 23fcb4c:	6828      	ldr	r0, [r5, #0]
 23fcb4e:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fcb50:	bc30      	pop	{r4, r5}
 23fcb52:	4760      	bx	ip

023fcb54 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
 23fcb54:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fcb56:	b538      	push	{r3, r4, r5, lr}
 23fcb58:	4604      	mov	r4, r0
	switch (__op)
 23fcb5a:	d102      	bne.n	23fcb62 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fcb5c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fcb5e:	6023      	str	r3, [r4, #0]
	}
 23fcb60:	e003      	b.n	23fcb6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
 23fcb62:	2a02      	cmp	r2, #2
 23fcb64:	d003      	beq.n	23fcb6e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
 23fcb66:	2a03      	cmp	r2, #3
 23fcb68:	d00d      	beq.n	23fcb86 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
 23fcb6a:	2000      	movs	r0, #0
 23fcb6c:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcb6e:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
 23fcb70:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fcb72:	f7fe ffa0 	bl	23fbab6 <_Znwj>
 23fcb76:	4603      	mov	r3, r0
 23fcb78:	2800      	cmp	r0, #0
 23fcb7a:	d0f0      	beq.n	23fcb5e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
 23fcb7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fcb80:	e883 0003 	stmia.w	r3, {r0, r1}
 23fcb84:	e7eb      	b.n	23fcb5e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fcb86:	6800      	ldr	r0, [r0, #0]
 23fcb88:	2800      	cmp	r0, #0
 23fcb8a:	d0ee      	beq.n	23fcb6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
 23fcb8c:	2108      	movs	r1, #8
 23fcb8e:	f7fe ff96 	bl	23fbabe <_ZdlPvj>
 23fcb92:	e7ea      	b.n	23fcb6a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

023fcb94 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 23fcb94:	b510      	push	{r4, lr}
      {
	if (_M_manager)
 23fcb96:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fcb98:	4604      	mov	r4, r0
	if (_M_manager)
 23fcb9a:	b12b      	cbz	r3, 23fcba8 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fcb9c:	2203      	movs	r2, #3
 23fcb9e:	4601      	mov	r1, r0
 23fcba0:	4798      	blx	r3
	    _M_manager = nullptr;
 23fcba2:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fcba4:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
 23fcba8:	bd10      	pop	{r4, pc}

023fcbaa <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
 23fcbaa:	b510      	push	{r4, lr}
	if (_M_manager)
 23fcbac:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
 23fcbae:	4604      	mov	r4, r0
	if (_M_manager)
 23fcbb0:	b12b      	cbz	r3, 23fcbbe <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fcbb2:	2203      	movs	r2, #3
 23fcbb4:	4601      	mov	r1, r0
 23fcbb6:	4798      	blx	r3
	    _M_manager = nullptr;
 23fcbb8:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
 23fcbba:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
 23fcbbe:	bd10      	pop	{r4, pc}

023fcbc0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
 23fcbc0:	2300      	movs	r3, #0
 23fcbc2:	2220      	movs	r2, #32
    int discoverAllServices(BlePeerDevice& peer) {
 23fcbc4:	b510      	push	{r4, lr}
 23fcbc6:	4604      	mov	r4, r0
 23fcbc8:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
 23fcbca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fcbce:	4a08      	ldr	r2, [pc, #32]	; (23fcbf0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
 23fcbd0:	2001      	movs	r0, #1
 23fcbd2:	9200      	str	r2, [sp, #0]
 23fcbd4:	4907      	ldr	r1, [pc, #28]	; (23fcbf4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
 23fcbd6:	aa02      	add	r2, sp, #8
 23fcbd8:	f7ff fabe 	bl	23fc158 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fcbdc:	2300      	movs	r3, #0
 23fcbde:	4622      	mov	r2, r4
 23fcbe0:	6820      	ldr	r0, [r4, #0]
 23fcbe2:	4905      	ldr	r1, [pc, #20]	; (23fcbf8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
 23fcbe4:	8800      	ldrh	r0, [r0, #0]
    }
 23fcbe6:	b00a      	add	sp, #40	; 0x28
 23fcbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
 23fcbec:	f7ff b9d4 	b.w	23fbf98 <hal_ble_gatt_client_discover_all_services>
 23fcbf0:	023ffbaa 	.word	0x023ffbaa
 23fcbf4:	023ffb9f 	.word	0x023ffb9f
 23fcbf8:	023fe7bd 	.word	0x023fe7bd

023fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
 23fcbfc:	b510      	push	{r4, lr}
 23fcbfe:	3801      	subs	r0, #1
 23fcc00:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
 23fcc04:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 23fcc08:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
 23fcc0a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fcc0e:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fcc10:	bf88      	it	hi
 23fcc12:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
 23fcc16:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
 23fcc1a:	7803      	ldrb	r3, [r0, #0]
 23fcc1c:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
 23fcc20:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
 23fcc24:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
 23fcc26:	bf88      	it	hi
 23fcc28:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
 23fcc2c:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
 23fcc2e:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
 23fcc32:	d1e7      	bne.n	23fcc04 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
 23fcc34:	bd10      	pop	{r4, pc}

023fcc36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fcc36:	b510      	push	{r4, lr}
 23fcc38:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fcc3a:	3058      	adds	r0, #88	; 0x58
 23fcc3c:	f7ff fdd4 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
 23fcc40:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
 23fcc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fcc48:	f002 bb20 	b.w	23ff28c <_ZN6StringD1Ev>

023fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
 23fcc4c:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
 23fcc4e:	6803      	ldr	r3, [r0, #0]
      operator=(const __shared_count& __r) noexcept
 23fcc50:	4605      	mov	r5, r0
	if (__tmp != _M_pi)
 23fcc52:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
 23fcc54:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
 23fcc56:	d008      	beq.n	23fcc6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
 23fcc58:	b111      	cbz	r1, 23fcc60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
 23fcc5a:	684b      	ldr	r3, [r1, #4]
 23fcc5c:	3301      	adds	r3, #1
 23fcc5e:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
 23fcc60:	6828      	ldr	r0, [r5, #0]
 23fcc62:	b108      	cbz	r0, 23fcc68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
 23fcc64:	f7ff fcaa 	bl	23fc5bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fcc68:	602c      	str	r4, [r5, #0]
      }
 23fcc6a:	bd38      	pop	{r3, r4, r5, pc}

023fcc6c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
 23fcc6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fcc70:	b2da      	uxtb	r2, r3
 23fcc72:	2a09      	cmp	r2, #9
 23fcc74:	d801      	bhi.n	23fcc7a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
 23fcc76:	4618      	mov	r0, r3
 23fcc78:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
 23fcc7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23fcc7e:	2b05      	cmp	r3, #5
 23fcc80:	d801      	bhi.n	23fcc86 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
 23fcc82:	3857      	subs	r0, #87	; 0x57
 23fcc84:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
 23fcc86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23fcc8a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
 23fcc8c:	bf94      	ite	ls
 23fcc8e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
 23fcc90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
 23fcc94:	4770      	bx	lr
	...

023fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>:
            locked_(false) {
 23fcc98:	2300      	movs	r3, #0
    WiringBleLock() :
 23fcc9a:	b510      	push	{r4, lr}
            locked_(false) {
 23fcc9c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fcc9e:	4b04      	ldr	r3, [pc, #16]	; (23fccb0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
 23fcca0:	4604      	mov	r4, r0
 23fcca2:	6818      	ldr	r0, [r3, #0]
 23fcca4:	f7ff f916 	bl	23fbed4 <os_mutex_recursive_lock>
        locked_ = true;
 23fcca8:	2301      	movs	r3, #1
    }
 23fccaa:	4620      	mov	r0, r4
        locked_ = true;
 23fccac:	7023      	strb	r3, [r4, #0]
    }
 23fccae:	bd10      	pop	{r4, pc}
 23fccb0:	1007aee8 	.word	0x1007aee8

023fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
 23fccb4:	b510      	push	{r4, lr}
        if (locked_) {
 23fccb6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
 23fccb8:	4604      	mov	r4, r0
        if (locked_) {
 23fccba:	b11b      	cbz	r3, 23fccc4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fccbc:	4b02      	ldr	r3, [pc, #8]	; (23fccc8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
 23fccbe:	6818      	ldr	r0, [r3, #0]
 23fccc0:	f7ff f916 	bl	23fbef0 <os_mutex_recursive_unlock>
    }
 23fccc4:	4620      	mov	r0, r4
 23fccc6:	bd10      	pop	{r4, pc}
 23fccc8:	1007aee8 	.word	0x1007aee8

023fcccc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fcccc:	b082      	sub	sp, #8
    address_ = addr;
 23fccce:	466a      	mov	r2, sp
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
 23fccd0:	4603      	mov	r3, r0
    address_ = addr;
 23fccd2:	6808      	ldr	r0, [r1, #0]
 23fccd4:	6849      	ldr	r1, [r1, #4]
 23fccd6:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
 23fccd8:	466a      	mov	r2, sp
 23fccda:	ca03      	ldmia	r2!, {r0, r1}
 23fccdc:	6018      	str	r0, [r3, #0]
}
 23fccde:	4618      	mov	r0, r3
    address_ = addr.address_;
 23fcce0:	6059      	str	r1, [r3, #4]
}
 23fcce2:	b002      	add	sp, #8
 23fcce4:	4770      	bx	lr

023fcce6 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
 23fcce6:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
 23fcce8:	7982      	ldrb	r2, [r0, #6]
 23fccea:	798b      	ldrb	r3, [r1, #6]
 23fccec:	429a      	cmp	r2, r3
 23fccee:	d106      	bne.n	23fccfe <_ZNK8particle10BleAddresseqERKS0_+0x18>
 23fccf0:	2206      	movs	r2, #6
 23fccf2:	f002 fda1 	bl	23ff838 <memcmp>
 23fccf6:	fab0 f080 	clz	r0, r0
 23fccfa:	0940      	lsrs	r0, r0, #5
}
 23fccfc:	bd08      	pop	{r3, pc}
    return false;
 23fccfe:	2000      	movs	r0, #0
 23fcd00:	e7fc      	b.n	23fccfc <_ZNK8particle10BleAddresseqERKS0_+0x16>
	...

023fcd04 <_ZNK8particle10BleAddress7isValidEv>:
bool BleAddress::isValid() const {
 23fcd04:	b570      	push	{r4, r5, r6, lr}
 23fcd06:	4604      	mov	r4, r0
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fcd08:	4b38      	ldr	r3, [pc, #224]	; (23fcdec <_ZNK8particle10BleAddress7isValidEv+0xe8>)
bool BleAddress::isValid() const {
 23fcd0a:	b086      	sub	sp, #24
    constexpr uint8_t bitsClear[BLE_SIG_ADDR_LEN] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 23fcd0c:	6818      	ldr	r0, [r3, #0]
 23fcd0e:	889b      	ldrh	r3, [r3, #4]
 23fcd10:	9000      	str	r0, [sp, #0]
 23fcd12:	f8ad 3004 	strh.w	r3, [sp, #4]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fcd16:	4b36      	ldr	r3, [pc, #216]	; (23fcdf0 <_ZNK8particle10BleAddress7isValidEv+0xec>)
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fcd18:	79a6      	ldrb	r6, [r4, #6]
    constexpr uint8_t bitsSet[BLE_SIG_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 23fcd1a:	6818      	ldr	r0, [r3, #0]
 23fcd1c:	889b      	ldrh	r3, [r3, #4]
 23fcd1e:	9002      	str	r0, [sp, #8]
 23fcd20:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (address_.addr_type == BLE_SIG_ADDR_TYPE_PUBLIC) {
 23fcd24:	b97e      	cbnz	r6, 23fcd46 <_ZNK8particle10BleAddress7isValidEv+0x42>
        return memcmp(address_.addr, bitsClear, BLE_SIG_ADDR_LEN) && memcmp(address_.addr, bitsSet, BLE_SIG_ADDR_LEN);
 23fcd26:	2206      	movs	r2, #6
 23fcd28:	4669      	mov	r1, sp
 23fcd2a:	4620      	mov	r0, r4
 23fcd2c:	f002 fd84 	bl	23ff838 <memcmp>
 23fcd30:	b138      	cbz	r0, 23fcd42 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fcd32:	2206      	movs	r2, #6
 23fcd34:	4620      	mov	r0, r4
 23fcd36:	a902      	add	r1, sp, #8
 23fcd38:	f002 fd7e 	bl	23ff838 <memcmp>
 23fcd3c:	3800      	subs	r0, #0
 23fcd3e:	bf18      	it	ne
 23fcd40:	2001      	movne	r0, #1
}
 23fcd42:	b006      	add	sp, #24
 23fcd44:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fcd46:	88a3      	ldrh	r3, [r4, #4]
 23fcd48:	6820      	ldr	r0, [r4, #0]
 23fcd4a:	f8ad 3014 	strh.w	r3, [sp, #20]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fcd4e:	f006 03fd 	and.w	r3, r6, #253	; 0xfd
 23fcd52:	2b01      	cmp	r3, #1
        memcpy(temp, address_.addr, BLE_SIG_ADDR_LEN);
 23fcd54:	9004      	str	r0, [sp, #16]
        if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC || address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE) {
 23fcd56:	d124      	bne.n	23fcda2 <_ZNK8particle10BleAddress7isValidEv+0x9e>
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fcd58:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fcd5c:	2206      	movs	r2, #6
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fcd5e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fcd62:	4669      	mov	r1, sp
 23fcd64:	a804      	add	r0, sp, #16
            temp[5] &= 0x3F; // Clear the two most significant bits
 23fcd66:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fcd6a:	f002 fd65 	bl	23ff838 <memcmp>
 23fcd6e:	2800      	cmp	r0, #0
 23fcd70:	d03a      	beq.n	23fcde8 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0; // Set the two most significant bits
 23fcd72:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fcd76:	2206      	movs	r2, #6
 23fcd78:	a902      	add	r1, sp, #8
 23fcd7a:	a804      	add	r0, sp, #16
            temp[5] |= 0xC0; // Set the two most significant bits
 23fcd7c:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(temp, bitsSet, BLE_SIG_ADDR_LEN), false);
 23fcd80:	f002 fd5a 	bl	23ff838 <memcmp>
 23fcd84:	b380      	cbz	r0, 23fcde8 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_STATIC) {
 23fcd86:	7960      	ldrb	r0, [r4, #5]
 23fcd88:	2e01      	cmp	r6, #1
 23fcd8a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fcd8e:	d104      	bne.n	23fcd9a <_ZNK8particle10BleAddress7isValidEv+0x96>
                return (address_.addr[5] & 0xC0) == 0xC0;
 23fcd90:	28c0      	cmp	r0, #192	; 0xc0
            return (address_.addr[5] & 0xC0) == 0x40;
 23fcd92:	bf14      	ite	ne
 23fcd94:	2000      	movne	r0, #0
 23fcd96:	2001      	moveq	r0, #1
 23fcd98:	e7d3      	b.n	23fcd42 <_ZNK8particle10BleAddress7isValidEv+0x3e>
                return (address_.addr[5] & 0xC0) == 0x00;
 23fcd9a:	fab0 f080 	clz	r0, r0
 23fcd9e:	0940      	lsrs	r0, r0, #5
 23fcda0:	e7cf      	b.n	23fcd42 <_ZNK8particle10BleAddress7isValidEv+0x3e>
        } else if (address_.addr_type == BLE_SIG_ADDR_TYPE_RANDOM_PRIVATE_RESOLVABLE) {
 23fcda2:	2e02      	cmp	r6, #2
 23fcda4:	d11e      	bne.n	23fcde4 <_ZNK8particle10BleAddress7isValidEv+0xe0>
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fcda6:	2203      	movs	r2, #3
            temp[5] &= 0x3F;
 23fcda8:	f89d 5015 	ldrb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fcdac:	eb0d 0102 	add.w	r1, sp, r2
            temp[5] &= 0x3F;
 23fcdb0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fcdb4:	f10d 0013 	add.w	r0, sp, #19
            temp[5] &= 0x3F;
 23fcdb8:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsClear[3], 3), false);
 23fcdbc:	f002 fd3c 	bl	23ff838 <memcmp>
 23fcdc0:	b190      	cbz	r0, 23fcde8 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            temp[5] |= 0xC0;
 23fcdc2:	f065 053f 	orn	r5, r5, #63	; 0x3f
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fcdc6:	2203      	movs	r2, #3
 23fcdc8:	f10d 010b 	add.w	r1, sp, #11
 23fcdcc:	f10d 0013 	add.w	r0, sp, #19
            temp[5] |= 0xC0;
 23fcdd0:	f88d 5015 	strb.w	r5, [sp, #21]
            CHECK_TRUE(memcmp(&temp[3], &bitsSet[3], 3), false);
 23fcdd4:	f002 fd30 	bl	23ff838 <memcmp>
 23fcdd8:	b130      	cbz	r0, 23fcde8 <_ZNK8particle10BleAddress7isValidEv+0xe4>
            return (address_.addr[5] & 0xC0) == 0x40;
 23fcdda:	7960      	ldrb	r0, [r4, #5]
 23fcddc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 23fcde0:	2840      	cmp	r0, #64	; 0x40
 23fcde2:	e7d6      	b.n	23fcd92 <_ZNK8particle10BleAddress7isValidEv+0x8e>
    return true;
 23fcde4:	2001      	movs	r0, #1
 23fcde6:	e7ac      	b.n	23fcd42 <_ZNK8particle10BleAddress7isValidEv+0x3e>
            CHECK_TRUE(memcmp(temp, bitsClear, BLE_SIG_ADDR_LEN), false);
 23fcde8:	2000      	movs	r0, #0
 23fcdea:	e7aa      	b.n	23fcd42 <_ZNK8particle10BleAddress7isValidEv+0x3e>
 23fcdec:	023ffa0c 	.word	0x023ffa0c
 23fcdf0:	023ffbc6 	.word	0x023ffbc6

023fcdf4 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
 23fcdf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fcdf8:	6003      	str	r3, [r0, #0]
 23fcdfa:	8083      	strh	r3, [r0, #4]
}
 23fcdfc:	2000      	movs	r0, #0
 23fcdfe:	4770      	bx	lr

023fce00 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
 23fce00:	2100      	movs	r1, #0
BleAddress::BleAddress()
 23fce02:	4602      	mov	r2, r0
 23fce04:	b508      	push	{r3, lr}
        : address_{} {
 23fce06:	6001      	str	r1, [r0, #0]
 23fce08:	6041      	str	r1, [r0, #4]
    clear();
 23fce0a:	f7ff fff3 	bl	23fcdf4 <_ZN8particle10BleAddress5clearEv>
}
 23fce0e:	4610      	mov	r0, r2
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
 23fce10:	7191      	strb	r1, [r2, #6]
}
 23fce12:	bd08      	pop	{r3, pc}

023fce14 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
 23fce14:	2301      	movs	r3, #1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fce16:	4602      	mov	r2, r0
BleUuid::BleUuid()
 23fce18:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
 23fce1a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fce1c:	4b04      	ldr	r3, [pc, #16]	; (23fce30 <_ZN8particle7BleUuidC1Ev+0x1c>)
 23fce1e:	f103 0110 	add.w	r1, r3, #16
 23fce22:	f853 4b04 	ldr.w	r4, [r3], #4
 23fce26:	428b      	cmp	r3, r1
 23fce28:	f842 4b04 	str.w	r4, [r2], #4
 23fce2c:	d1f9      	bne.n	23fce22 <_ZN8particle7BleUuidC1Ev+0xe>
}
 23fce2e:	bd10      	pop	{r4, pc}
 23fce30:	023ffa12 	.word	0x023ffa12

023fce34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fce34:	7c0b      	ldrb	r3, [r1, #16]
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
 23fce36:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
 23fce38:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 23fce3c:	d10d      	bne.n	23fce5a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fce3e:	4602      	mov	r2, r0
        type_ = BleUuidType::SHORT;
 23fce40:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fce42:	4b0c      	ldr	r3, [pc, #48]	; (23fce74 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
 23fce44:	f103 0410 	add.w	r4, r3, #16
 23fce48:	f853 5b04 	ldr.w	r5, [r3], #4
 23fce4c:	42a3      	cmp	r3, r4
 23fce4e:	f842 5b04 	str.w	r5, [r2], #4
 23fce52:	d1f9      	bne.n	23fce48 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
 23fce54:	880b      	ldrh	r3, [r1, #0]
 23fce56:	8183      	strh	r3, [r0, #12]
}
 23fce58:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
 23fce5a:	2301      	movs	r3, #1
 23fce5c:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fce5e:	4603      	mov	r3, r0
 23fce60:	f101 0210 	add.w	r2, r1, #16
 23fce64:	f851 4b04 	ldr.w	r4, [r1], #4
 23fce68:	4291      	cmp	r1, r2
 23fce6a:	f843 4b04 	str.w	r4, [r3], #4
 23fce6e:	d1f9      	bne.n	23fce64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
 23fce70:	e7f2      	b.n	23fce58 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
 23fce72:	bf00      	nop
 23fce74:	023ffa12 	.word	0x023ffa12

023fce78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fce78:	b510      	push	{r4, lr}
    if (uuid128) {
 23fce7a:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
 23fce7c:	4604      	mov	r4, r0
    if (uuid128) {
 23fce7e:	b1b1      	cbz	r1, 23fceae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
 23fce80:	2a01      	cmp	r2, #1
 23fce82:	f101 0210 	add.w	r2, r1, #16
 23fce86:	d10a      	bne.n	23fce9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
 23fce88:	4601      	mov	r1, r0
 23fce8a:	f853 0b04 	ldr.w	r0, [r3], #4
 23fce8e:	4293      	cmp	r3, r2
 23fce90:	f841 0b04 	str.w	r0, [r1], #4
 23fce94:	d1f9      	bne.n	23fce8a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
 23fce96:	2301      	movs	r3, #1
 23fce98:	6123      	str	r3, [r4, #16]
}
 23fce9a:	4620      	mov	r0, r4
 23fce9c:	bd10      	pop	{r4, pc}
 23fce9e:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
 23fcea0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcea4:	429a      	cmp	r2, r3
                uuid128_[i] = uuid128[j];
 23fcea6:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fceaa:	d1f9      	bne.n	23fcea0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
 23fceac:	e7f3      	b.n	23fce96 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
 23fceae:	2210      	movs	r2, #16
 23fceb0:	f002 fcf9 	bl	23ff8a6 <memset>
 23fceb4:	e7f1      	b.n	23fce9a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

023fceb6 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
 23fceb6:	b538      	push	{r3, r4, r5, lr}
 23fceb8:	4604      	mov	r4, r0
 23fceba:	460d      	mov	r5, r1
        : BleUuid() {
 23fcebc:	f7ff ffaa 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
 23fcec0:	2300      	movs	r3, #0
}
 23fcec2:	4620      	mov	r0, r4
    type_ = BleUuidType::SHORT;
 23fcec4:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
 23fcec6:	81a5      	strh	r5, [r4, #12]
}
 23fcec8:	bd38      	pop	{r3, r4, r5, pc}

023fceca <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
 23fceca:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fcecc:	6902      	ldr	r2, [r0, #16]
 23fcece:	690b      	ldr	r3, [r1, #16]
 23fced0:	429a      	cmp	r2, r3
 23fced2:	d106      	bne.n	23fcee2 <_ZNK8particle7BleUuideqERKS0_+0x18>
 23fced4:	2210      	movs	r2, #16
 23fced6:	f002 fcaf 	bl	23ff838 <memcmp>
 23fceda:	fab0 f080 	clz	r0, r0
 23fcede:	0940      	lsrs	r0, r0, #5
}
 23fcee0:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
 23fcee2:	2000      	movs	r0, #0
 23fcee4:	e7fc      	b.n	23fcee0 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

023fcee8 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
 23fcee8:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
 23fceea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fceee:	4602      	mov	r2, r0
void BleUuid::construct(const char* uuid) {
 23fcef0:	4606      	mov	r6, r0
    type_ = BleUuidType::LONG;
 23fcef2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fcef4:	4b33      	ldr	r3, [pc, #204]	; (23fcfc4 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
 23fcef6:	460c      	mov	r4, r1
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
 23fcef8:	f103 0110 	add.w	r1, r3, #16
 23fcefc:	f853 0b04 	ldr.w	r0, [r3], #4
 23fcf00:	428b      	cmp	r3, r1
 23fcf02:	f842 0b04 	str.w	r0, [r2], #4
 23fcf06:	d1f9      	bne.n	23fcefc <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
 23fcf08:	b344      	cbz	r4, 23fcf5c <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
 23fcf0a:	2124      	movs	r1, #36	; 0x24
 23fcf0c:	4620      	mov	r0, r4
 23fcf0e:	f002 fd09 	bl	23ff924 <strnlen>
 23fcf12:	2804      	cmp	r0, #4
 23fcf14:	f04f 0500 	mov.w	r5, #0
 23fcf18:	d123      	bne.n	23fcf62 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
 23fcf1a:	f8ad 5004 	strh.w	r5, [sp, #4]
 23fcf1e:	af01      	add	r7, sp, #4
 23fcf20:	1ca5      	adds	r5, r4, #2
 23fcf22:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
 23fcf24:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 23fcf28:	f7ff fea0 	bl	23fcc6c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
 23fcf2c:	f1b0 0800 	subs.w	r8, r0, #0
 23fcf30:	db12      	blt.n	23fcf58 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
 23fcf32:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 23fcf36:	f7ff fe99 	bl	23fcc6c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
 23fcf3a:	2800      	cmp	r0, #0
 23fcf3c:	db0c      	blt.n	23fcf58 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
 23fcf3e:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fcf40:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
 23fcf44:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
 23fcf46:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
 23fcf4a:	d1eb      	bne.n	23fcf24 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
 23fcf4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 23fcf50:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
 23fcf52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fcf56:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
 23fcf58:	2300      	movs	r3, #0
 23fcf5a:	6133      	str	r3, [r6, #16]
}
 23fcf5c:	b002      	add	sp, #8
 23fcf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
 23fcf62:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcf66:	2124      	movs	r1, #36	; 0x24
 23fcf68:	4620      	mov	r0, r4
 23fcf6a:	f002 fcdb 	bl	23ff924 <strnlen>
 23fcf6e:	42a8      	cmp	r0, r5
 23fcf70:	d807      	bhi.n	23fcf82 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
 23fcf72:	4642      	mov	r2, r8
 23fcf74:	2100      	movs	r1, #0
 23fcf76:	4630      	mov	r0, r6
}
 23fcf78:	b002      	add	sp, #8
 23fcf7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
 23fcf7e:	f002 bc92 	b.w	23ff8a6 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcf82:	f1b8 0f00 	cmp.w	r8, #0
 23fcf86:	d0e9      	beq.n	23fcf5c <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
 23fcf88:	5d60      	ldrb	r0, [r4, r5]
 23fcf8a:	f7ff fe6f 	bl	23fcc6c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
 23fcf8e:	0603      	lsls	r3, r0, #24
 23fcf90:	d415      	bmi.n	23fcfbe <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
 23fcf92:	0100      	lsls	r0, r0, #4
 23fcf94:	b2c7      	uxtb	r7, r0
 23fcf96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fcf9a:	2124      	movs	r1, #36	; 0x24
 23fcf9c:	4620      	mov	r0, r4
            uuid128_[len - 1] = hi << 4;
 23fcf9e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
 23fcfa2:	f002 fcbf 	bl	23ff924 <strnlen>
 23fcfa6:	3501      	adds	r5, #1
 23fcfa8:	42a8      	cmp	r0, r5
 23fcfaa:	d908      	bls.n	23fcfbe <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
 23fcfac:	5d60      	ldrb	r0, [r4, r5]
 23fcfae:	f7ff fe5d 	bl	23fcc6c <_ZN8particle11hexToNibbleEc>
 23fcfb2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
 23fcfb4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
 23fcfb6:	bfa4      	itt	ge
 23fcfb8:	4338      	orrge	r0, r7
 23fcfba:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
 23fcfbe:	3501      	adds	r5, #1
 23fcfc0:	e7d1      	b.n	23fcf66 <_ZN8particle7BleUuid9constructEPKc+0x7e>
 23fcfc2:	bf00      	nop
 23fcfc4:	023ffa12 	.word	0x023ffa12

023fcfc8 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
 23fcfc8:	b513      	push	{r0, r1, r4, lr}
 23fcfca:	4604      	mov	r4, r0
 23fcfcc:	9101      	str	r1, [sp, #4]
        : BleUuid() {
 23fcfce:	f7ff ff21 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
 23fcfd2:	4620      	mov	r0, r4
 23fcfd4:	9901      	ldr	r1, [sp, #4]
 23fcfd6:	f7ff ff87 	bl	23fcee8 <_ZN8particle7BleUuid9constructEPKc>
}
 23fcfda:	4620      	mov	r0, r4
 23fcfdc:	b002      	add	sp, #8
 23fcfde:	bd10      	pop	{r4, pc}

023fcfe0 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
 23fcfe0:	b510      	push	{r4, lr}
 23fcfe2:	f100 030f 	add.w	r3, r0, #15
 23fcfe6:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
 23fcfe8:	781c      	ldrb	r4, [r3, #0]
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcfea:	4283      	cmp	r3, r0
        buf[i] = uuid128_[j];
 23fcfec:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
 23fcff0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 23fcff4:	d1f8      	bne.n	23fcfe8 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
 23fcff6:	bd10      	pop	{r4, pc}

023fcff8 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fcff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcffc:	461f      	mov	r7, r3
    if (!buf || len == 0) {
 23fcffe:	460d      	mov	r5, r1
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
 23fd000:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
 23fd002:	2900      	cmp	r1, #0
 23fd004:	d05b      	beq.n	23fd0be <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
 23fd006:	b1da      	cbz	r2, 23fd040 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
 23fd008:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
 23fd00c:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
 23fd00e:	f1b8 0f00 	cmp.w	r8, #0
 23fd012:	d119      	bne.n	23fd048 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fd014:	8983      	ldrh	r3, [r0, #12]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fd016:	2102      	movs	r1, #2
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fd018:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fd01a:	aa05      	add	r2, sp, #20
 23fd01c:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
 23fd01e:	f8ad 3004 	strh.w	r3, [sp, #4]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
 23fd022:	f8cd 8014 	str.w	r8, [sp, #20]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
 23fd026:	f7ff fde9 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
 23fd02a:	2c04      	cmp	r4, #4
 23fd02c:	bf28      	it	cs
 23fd02e:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
 23fd030:	4628      	mov	r0, r5
 23fd032:	4622      	mov	r2, r4
 23fd034:	a905      	add	r1, sp, #20
 23fd036:	f002 fc0f 	bl	23ff858 <memcpy>
        buf[len++] = '\0';
 23fd03a:	1c62      	adds	r2, r4, #1
 23fd03c:	f805 8004 	strb.w	r8, [r5, r4]
}
 23fd040:	4610      	mov	r0, r2
 23fd042:	b00e      	add	sp, #56	; 0x38
 23fd044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
 23fd048:	a901      	add	r1, sp, #4
 23fd04a:	f7ff ffc9 	bl	23fcfe0 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fd04e:	aa05      	add	r2, sp, #20
    if (stripped) {
 23fd050:	b17f      	cbz	r7, 23fd072 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
 23fd052:	2110      	movs	r1, #16
 23fd054:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fd056:	f7ff fdd1 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
 23fd05a:	2c24      	cmp	r4, #36	; 0x24
 23fd05c:	bf28      	it	cs
 23fd05e:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
 23fd060:	4628      	mov	r0, r5
 23fd062:	4622      	mov	r2, r4
 23fd064:	a905      	add	r1, sp, #20
 23fd066:	f002 fbf7 	bl	23ff858 <memcpy>
    buf[len++] = '\0';
 23fd06a:	2300      	movs	r3, #0
 23fd06c:	1c62      	adds	r2, r4, #1
 23fd06e:	552b      	strb	r3, [r5, r4]
    return len;
 23fd070:	e7e6      	b.n	23fd040 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fd072:	2104      	movs	r1, #4
        cStr[idx * 2] = '-';
 23fd074:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
 23fd076:	eb0d 0001 	add.w	r0, sp, r1
 23fd07a:	f7ff fdbf 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fd07e:	2102      	movs	r1, #2
 23fd080:	f10d 021d 	add.w	r2, sp, #29
 23fd084:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
 23fd086:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
 23fd08a:	f7ff fdb7 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fd08e:	2102      	movs	r1, #2
 23fd090:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 23fd094:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
 23fd098:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
 23fd09c:	f7ff fdae 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fd0a0:	2102      	movs	r1, #2
 23fd0a2:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 23fd0a6:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
 23fd0a8:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
 23fd0ac:	f7ff fda6 	bl	23fcbfc <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fd0b0:	2106      	movs	r1, #6
        cStr[idx * 2 + 3] = '-';
 23fd0b2:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
 23fd0b6:	aa0b      	add	r2, sp, #44	; 0x2c
 23fd0b8:	f10d 000e 	add.w	r0, sp, #14
 23fd0bc:	e7cb      	b.n	23fd056 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
 23fd0be:	460a      	mov	r2, r1
 23fd0c0:	e7be      	b.n	23fd040 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

023fd0c2 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
 23fd0c2:	b510      	push	{r4, lr}
 23fd0c4:	4604      	mov	r4, r0
 23fd0c6:	b08a      	sub	sp, #40	; 0x28
    toString(cStr, sizeof(cStr));
 23fd0c8:	2300      	movs	r3, #0
 23fd0ca:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
 23fd0cc:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
 23fd0ce:	4669      	mov	r1, sp
 23fd0d0:	f7ff ff92 	bl	23fcff8 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
 23fd0d4:	4669      	mov	r1, sp
 23fd0d6:	4620      	mov	r0, r4
 23fd0d8:	f002 f923 	bl	23ff322 <_ZN6StringC1EPK19__FlashStringHelper>
}
 23fd0dc:	4620      	mov	r0, r4
 23fd0de:	b00a      	add	sp, #40	; 0x28
 23fd0e0:	bd10      	pop	{r4, pc}

023fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
 23fd0e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fd0e4:	4605      	mov	r5, r0
 23fd0e6:	4616      	mov	r6, r2
 23fd0e8:	461f      	mov	r7, r3
 23fd0ea:	460a      	mov	r2, r1
 23fd0ec:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fd0f0:	ab01      	add	r3, sp, #4
 23fd0f2:	f7ff fd03 	bl	23fcafc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
 23fd0f6:	f030 0402 	bics.w	r4, r0, #2
 23fd0fa:	d00c      	beq.n	23fd116 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
 23fd0fc:	1e84      	subs	r4, r0, #2
 23fd0fe:	42bc      	cmp	r4, r7
 23fd100:	bf28      	it	cs
 23fd102:	463c      	movcs	r4, r7
            if (buf != nullptr) {
 23fd104:	b13e      	cbz	r6, 23fd116 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
 23fd106:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
 23fd108:	682b      	ldr	r3, [r5, #0]
 23fd10a:	3102      	adds	r1, #2
 23fd10c:	4622      	mov	r2, r4
 23fd10e:	4630      	mov	r0, r6
 23fd110:	4419      	add	r1, r3
 23fd112:	f002 fba1 	bl	23ff858 <memcpy>
}
 23fd116:	4620      	mov	r0, r4
 23fd118:	b003      	add	sp, #12
 23fd11a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd11c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fd11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd11e:	4613      	mov	r3, r2
 23fd120:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fd122:	9201      	str	r2, [sp, #4]
 23fd124:	460a      	mov	r2, r1
 23fd126:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
 23fd128:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fd12a:	f7ff ffda 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
 23fd12e:	b940      	cbnz	r0, 23fd142 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fd130:	4622      	mov	r2, r4
 23fd132:	2109      	movs	r1, #9
 23fd134:	4628      	mov	r0, r5
 23fd136:	9b01      	ldr	r3, [sp, #4]
}
 23fd138:	b003      	add	sp, #12
 23fd13a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
 23fd13e:	f7ff bfd0 	b.w	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
 23fd142:	b003      	add	sp, #12
 23fd144:	bd30      	pop	{r4, r5, pc}
	...

023fd148 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
 23fd148:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd14a:	460c      	mov	r4, r1
 23fd14c:	b089      	sub	sp, #36	; 0x24
    String name;
 23fd14e:	490c      	ldr	r1, [pc, #48]	; (23fd180 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
 23fd150:	4605      	mov	r5, r0
    String name;
 23fd152:	f002 f8e6 	bl	23ff322 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
 23fd156:	221f      	movs	r2, #31
 23fd158:	4669      	mov	r1, sp
 23fd15a:	4620      	mov	r0, r4
 23fd15c:	f7ff ffde 	bl	23fd11c <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
 23fd160:	4606      	mov	r6, r0
 23fd162:	b150      	cbz	r0, 23fd17a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
 23fd164:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
 23fd166:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
 23fd168:	4628      	mov	r0, r5
 23fd16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fd16e:	f002 f957 	bl	23ff420 <_ZN6String6concatEc>
 23fd172:	b110      	cbz	r0, 23fd17a <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
 23fd174:	3701      	adds	r7, #1
 23fd176:	42be      	cmp	r6, r7
 23fd178:	d1f6      	bne.n	23fd168 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
 23fd17a:	4628      	mov	r0, r5
 23fd17c:	b009      	add	sp, #36	; 0x24
 23fd17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd180:	023ffc26 	.word	0x023ffc26

023fd184 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
 23fd184:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
 23fd186:	2302      	movs	r3, #2
 23fd188:	2119      	movs	r1, #25
 23fd18a:	aa01      	add	r2, sp, #4
 23fd18c:	f7ff ffa9 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
 23fd190:	b108      	cbz	r0, 23fd196 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
 23fd192:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
 23fd196:	b003      	add	sp, #12
 23fd198:	f85d fb04 	ldr.w	pc, [sp], #4

023fd19c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
 23fd19c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
 23fd19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd1a2:	2500      	movs	r5, #0
    BleCharacteristicImpl()
 23fd1a4:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
 23fd1a6:	8043      	strh	r3, [r0, #2]
 23fd1a8:	220e      	movs	r2, #14
 23fd1aa:	4629      	mov	r1, r5
 23fd1ac:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
 23fd1ae:	7105      	strb	r5, [r0, #4]
 23fd1b0:	3006      	adds	r0, #6
 23fd1b2:	f002 fb78 	bl	23ff8a6 <memset>
 23fd1b6:	f104 0014 	add.w	r0, r4, #20
 23fd1ba:	f7ff fe2b 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
 23fd1be:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd1c2:	f7ff fe27 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
 23fd1c6:	4904      	ldr	r1, [pc, #16]	; (23fd1d8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
 23fd1c8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 23fd1cc:	f002 f8a9 	bl	23ff322 <_ZN6StringC1EPK19__FlashStringHelper>
    }
 23fd1d0:	4620      	mov	r0, r4
    _Function_base() : _M_manager(nullptr) { }
 23fd1d2:	6565      	str	r5, [r4, #84]	; 0x54
 23fd1d4:	bd38      	pop	{r3, r4, r5, pc}
 23fd1d6:	bf00      	nop
 23fd1d8:	023ffc26 	.word	0x023ffc26

023fd1dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
 23fd1dc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fd1de:	680d      	ldr	r5, [r1, #0]
 23fd1e0:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fd1e2:	4601      	mov	r1, r0
 23fd1e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fd1e8:	f7ff fe6f 	bl	23fceca <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fd1ec:	b140      	cbz	r0, 23fd200 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
 23fd1ee:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
 23fd1f0:	8aa2      	ldrh	r2, [r4, #20]
 23fd1f2:	429a      	cmp	r2, r3
 23fd1f4:	d805      	bhi.n	23fd202 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
 23fd1f6:	8ae0      	ldrh	r0, [r4, #22]
 23fd1f8:	4298      	cmp	r0, r3
 23fd1fa:	bf34      	ite	cc
 23fd1fc:	2000      	movcc	r0, #0
 23fd1fe:	2001      	movcs	r0, #1
    }
 23fd200:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23fd202:	2000      	movs	r0, #0
 23fd204:	e7fc      	b.n	23fd200 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

023fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
 23fd206:	b510      	push	{r4, lr}
    return data_ + size_;
 23fd208:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 23fd20c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
 23fd210:	4293      	cmp	r3, r2
 23fd212:	4618      	mov	r0, r3
 23fd214:	d005      	beq.n	23fd222 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
            if (peer.impl()->connHandle() == connHandle) {
 23fd216:	6804      	ldr	r4, [r0, #0]
 23fd218:	3308      	adds	r3, #8
 23fd21a:	8824      	ldrh	r4, [r4, #0]
 23fd21c:	428c      	cmp	r4, r1
 23fd21e:	d1f7      	bne.n	23fd210 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
 23fd220:	bd10      	pop	{r4, pc}
        return nullptr;
 23fd222:	2000      	movs	r0, #0
 23fd224:	e7fc      	b.n	23fd220 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1a>
	...

023fd228 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fd228:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
 23fd22a:	b570      	push	{r4, r5, r6, lr}
 23fd22c:	6003      	str	r3, [r0, #0]
 23fd22e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fd230:	2068      	movs	r0, #104	; 0x68
 23fd232:	f7fe fc40 	bl	23fbab6 <_Znwj>
	  auto __pi = ::new (__mem)
 23fd236:	1e04      	subs	r4, r0, #0
 23fd238:	f104 060c 	add.w	r6, r4, #12
 23fd23c:	d007      	beq.n	23fd24e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd23e:	2301      	movs	r3, #1
 23fd240:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fd244:	4b04      	ldr	r3, [pc, #16]	; (23fd258 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fd246:	4630      	mov	r0, r6
 23fd248:	6023      	str	r3, [r4, #0]
 23fd24a:	f7ff ffa7 	bl	23fd19c <_ZN8particle21BleCharacteristicImplC1Ev>
}
 23fd24e:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fd250:	e9c5 6400 	strd	r6, r4, [r5]
 23fd254:	bd70      	pop	{r4, r5, r6, pc}
 23fd256:	bf00      	nop
 23fd258:	023ffd90 	.word	0x023ffd90

023fd25c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
 23fd25c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
 23fd25e:	4605      	mov	r5, r0
BleUuid BleCharacteristic::UUID() const {
 23fd260:	4606      	mov	r6, r0
    return impl()->charUUID();
 23fd262:	680c      	ldr	r4, [r1, #0]
 23fd264:	3414      	adds	r4, #20
 23fd266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fd268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fd26a:	6823      	ldr	r3, [r4, #0]
}
 23fd26c:	4630      	mov	r0, r6
    return impl()->charUUID();
 23fd26e:	602b      	str	r3, [r5, #0]
}
 23fd270:	bd70      	pop	{r4, r5, r6, pc}
	...

023fd274 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fd274:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd276:	4606      	mov	r6, r0
 23fd278:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
 23fd27a:	460d      	mov	r5, r1
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
 23fd27c:	b085      	sub	sp, #20
    if (buf == nullptr || len == 0) {
 23fd27e:	2900      	cmp	r1, #0
 23fd280:	d050      	beq.n	23fd324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
 23fd282:	2a00      	cmp	r2, #0
 23fd284:	d04e      	beq.n	23fd324 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
 23fd286:	6804      	ldr	r4, [r0, #0]
 23fd288:	2af4      	cmp	r2, #244	; 0xf4
    if (impl()->isLocal()) {
 23fd28a:	7823      	ldrb	r3, [r4, #0]
 23fd28c:	bf28      	it	cs
 23fd28e:	22f4      	movcs	r2, #244	; 0xf4
 23fd290:	b343      	cbz	r3, 23fd2e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
 23fd292:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
 23fd294:	0798      	lsls	r0, r3, #30
 23fd296:	d509      	bpl.n	23fd2ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
 23fd298:	2300      	movs	r3, #0
 23fd29a:	89a0      	ldrh	r0, [r4, #12]
 23fd29c:	9203      	str	r2, [sp, #12]
 23fd29e:	f7fe fe6d 	bl	23fbf7c <hal_ble_gatt_server_set_characteristic_value>
 23fd2a2:	2800      	cmp	r0, #0
 23fd2a4:	9a03      	ldr	r2, [sp, #12]
 23fd2a6:	da03      	bge.n	23fd2b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
 23fd2a8:	b005      	add	sp, #20
 23fd2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
 23fd2ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fd2b0:	6834      	ldr	r4, [r6, #0]
 23fd2b2:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
 23fd2b4:	06d9      	lsls	r1, r3, #27
 23fd2b6:	d509      	bpl.n	23fd2cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
 23fd2b8:	2f01      	cmp	r7, #1
 23fd2ba:	d007      	beq.n	23fd2cc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd2bc:	2300      	movs	r3, #0
 23fd2be:	4629      	mov	r1, r5
 23fd2c0:	89a0      	ldrh	r0, [r4, #12]
}
 23fd2c2:	b005      	add	sp, #20
 23fd2c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd2c8:	f7fe bed6 	b.w	23fc078 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
 23fd2cc:	069b      	lsls	r3, r3, #26
 23fd2ce:	d5eb      	bpl.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fd2d0:	2f02      	cmp	r7, #2
 23fd2d2:	d0e9      	beq.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd2d4:	2300      	movs	r3, #0
 23fd2d6:	4629      	mov	r1, r5
 23fd2d8:	89a0      	ldrh	r0, [r4, #12]
}
 23fd2da:	b005      	add	sp, #20
 23fd2dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd2e0:	f7fe bed8 	b.w	23fc094 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
 23fd2e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd2e8:	8860      	ldrh	r0, [r4, #2]
 23fd2ea:	4288      	cmp	r0, r1
 23fd2ec:	d01c      	beq.n	23fd328 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
 23fd2ee:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
 23fd2f0:	074e      	lsls	r6, r1, #29
 23fd2f2:	d501      	bpl.n	23fd2f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
 23fd2f4:	2f01      	cmp	r7, #1
 23fd2f6:	d104      	bne.n	23fd302 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fd2f8:	070b      	lsls	r3, r1, #28
 23fd2fa:	d409      	bmi.n	23fd310 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
 23fd2fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fd300:	e7d2      	b.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd302:	89a1      	ldrh	r1, [r4, #12]
 23fd304:	9300      	str	r3, [sp, #0]
 23fd306:	4613      	mov	r3, r2
 23fd308:	462a      	mov	r2, r5
 23fd30a:	f7fe fe6f 	bl	23fbfec <hal_ble_gatt_client_write_without_response>
 23fd30e:	e7cb      	b.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
 23fd310:	2f02      	cmp	r7, #2
 23fd312:	d0f3      	beq.n	23fd2fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
 23fd314:	2300      	movs	r3, #0
 23fd316:	89a1      	ldrh	r1, [r4, #12]
 23fd318:	9300      	str	r3, [sp, #0]
 23fd31a:	4613      	mov	r3, r2
 23fd31c:	462a      	mov	r2, r5
 23fd31e:	f7fe fe57 	bl	23fbfd0 <hal_ble_gatt_client_write_with_response>
 23fd322:	e7c1      	b.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fd324:	4802      	ldr	r0, [pc, #8]	; (23fd330 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
 23fd326:	e7bf      	b.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
 23fd328:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fd32c:	e7bc      	b.n	23fd2a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
 23fd32e:	bf00      	nop
 23fd330:	fffffef2 	.word	0xfffffef2

023fd334 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
 23fd334:	b510      	push	{r4, lr}
 23fd336:	6803      	ldr	r3, [r0, #0]
 23fd338:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fd33a:	781a      	ldrb	r2, [r3, #0]
 23fd33c:	bb52      	cbnz	r2, 23fd394 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
 23fd33e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fd342:	885c      	ldrh	r4, [r3, #2]
 23fd344:	4284      	cmp	r4, r0
 23fd346:	d025      	beq.n	23fd394 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fd348:	8a18      	ldrh	r0, [r3, #16]
 23fd34a:	b330      	cbz	r0, 23fd39a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
 23fd34c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 23fd350:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
 23fd352:	4a13      	ldr	r2, [pc, #76]	; (23fd3a0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
 23fd354:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
 23fd356:	4a13      	ldr	r2, [pc, #76]	; (23fd3a4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
 23fd358:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
 23fd35c:	885a      	ldrh	r2, [r3, #2]
 23fd35e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
 23fd362:	8a1a      	ldrh	r2, [r3, #16]
 23fd364:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
 23fd368:	899a      	ldrh	r2, [r3, #12]
 23fd36a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
 23fd36e:	b159      	cbz	r1, 23fd388 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
 23fd370:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
 23fd372:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
 23fd374:	bf44      	itt	mi
 23fd376:	2202      	movmi	r2, #2
 23fd378:	9205      	strmi	r2, [sp, #20]
 23fd37a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
 23fd37c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
 23fd37e:	bf42      	ittt	mi
 23fd380:	9b05      	ldrmi	r3, [sp, #20]
 23fd382:	f043 0301 	orrmi.w	r3, r3, #1
 23fd386:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
 23fd388:	2100      	movs	r1, #0
 23fd38a:	4668      	mov	r0, sp
 23fd38c:	f7fe fe66 	bl	23fc05c <hal_ble_gatt_client_configure_cccd>
}
 23fd390:	b006      	add	sp, #24
 23fd392:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
 23fd394:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fd398:	e7fa      	b.n	23fd390 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
 23fd39a:	f06f 0077 	mvn.w	r0, #119	; 0x77
 23fd39e:	e7f7      	b.n	23fd390 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
 23fd3a0:	00180003 	.word	0x00180003
 23fd3a4:	023fd58d 	.word	0x023fd58d

023fd3a8 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
 23fd3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fd3aa:	2600      	movs	r6, #0
 23fd3ac:	4605      	mov	r5, r0
 23fd3ae:	6006      	str	r6, [r0, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fd3b0:	2028      	movs	r0, #40	; 0x28
 23fd3b2:	f7fe fb80 	bl	23fbab6 <_Znwj>
	  auto __pi = ::new (__mem)
 23fd3b6:	1e04      	subs	r4, r0, #0
 23fd3b8:	f104 070c 	add.w	r7, r4, #12
 23fd3bc:	d00a      	beq.n	23fd3d4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd3be:	2301      	movs	r3, #1
 23fd3c0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
 23fd3c4:	4b05      	ldr	r3, [pc, #20]	; (23fd3dc <_ZN8particle10BleServiceC1Ev+0x34>)
              characteristicsDiscovered_(false) {
 23fd3c6:	4638      	mov	r0, r7
 23fd3c8:	6023      	str	r3, [r4, #0]
 23fd3ca:	f7ff fd23 	bl	23fce14 <_ZN8particle7BleUuidC1Ev>
 23fd3ce:	6226      	str	r6, [r4, #32]
 23fd3d0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
}
 23fd3d4:	4628      	mov	r0, r5
	  __p = __pi->_M_ptr();
 23fd3d6:	e9c5 7400 	strd	r7, r4, [r5]
 23fd3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fd3dc:	023ffdac 	.word	0x023ffdac

023fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
 23fd3e0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fd3e2:	2500      	movs	r5, #0
 23fd3e4:	4606      	mov	r6, r0
 23fd3e6:	6005      	str	r5, [r0, #0]
 23fd3e8:	2030      	movs	r0, #48	; 0x30
 23fd3ea:	f7fe fb64 	bl	23fbab6 <_Znwj>
	  auto __pi = ::new (__mem)
 23fd3ee:	4604      	mov	r4, r0
 23fd3f0:	b198      	cbz	r0, 23fd41a <_ZN8particle13BlePeerDeviceC1Ev+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd3f2:	2301      	movs	r3, #1
 23fd3f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fd3f8:	4b0a      	ldr	r3, [pc, #40]	; (23fd424 <_ZN8particle13BlePeerDeviceC1Ev+0x44>)
              servicesDiscovered_(false) {
 23fd3fa:	300e      	adds	r0, #14
 23fd3fc:	f840 3c0e 	str.w	r3, [r0, #-14]
 23fd400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd404:	f820 3c02 	strh.w	r3, [r0, #-2]
 23fd408:	f7ff fcfa 	bl	23fce00 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
 23fd40c:	e9c4 5506 	strd	r5, r5, [r4, #24]
 23fd410:	e9c4 5508 	strd	r5, r5, [r4, #32]
 23fd414:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 23fd418:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
 23fd41a:	6074      	str	r4, [r6, #4]
 23fd41c:	340c      	adds	r4, #12
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
 23fd41e:	4630      	mov	r0, r6
	  __p = __pi->_M_ptr();
 23fd420:	6034      	str	r4, [r6, #0]
 23fd422:	bd70      	pop	{r4, r5, r6, pc}
 23fd424:	023ffdc8 	.word	0x023ffdc8

023fd428 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
 23fd428:	b513      	push	{r0, r1, r4, lr}
 23fd42a:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fd42c:	a801      	add	r0, sp, #4
 23fd42e:	f7ff fc33 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fd432:	6823      	ldr	r3, [r4, #0]
    WiringBleLock lk;
 23fd434:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
 23fd436:	881c      	ldrh	r4, [r3, #0]
 23fd438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd43c:	1ae4      	subs	r4, r4, r3
 23fd43e:	bf18      	it	ne
 23fd440:	2401      	movne	r4, #1
    WiringBleLock lk;
 23fd442:	f7ff fc37 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fd446:	4620      	mov	r0, r4
 23fd448:	b002      	add	sp, #8
 23fd44a:	bd10      	pop	{r4, pc}

023fd44c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
 23fd44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd44e:	460c      	mov	r4, r1
 23fd450:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fd452:	a801      	add	r0, sp, #4
 23fd454:	f7ff fc20 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
 23fd458:	6823      	ldr	r3, [r4, #0]
      { return _M_ptr; }
 23fd45a:	682a      	ldr	r2, [r5, #0]
    WiringBleLock lk;
 23fd45c:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fd45e:	f8c2 3002 	str.w	r3, [r2, #2]
 23fd462:	6863      	ldr	r3, [r4, #4]
 23fd464:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
 23fd468:	f7ff fc24 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
 23fd46c:	b003      	add	sp, #12
 23fd46e:	bd30      	pop	{r4, r5, pc}

023fd470 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
 23fd470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd472:	460d      	mov	r5, r1
 23fd474:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fd476:	a801      	add	r0, sp, #4
 23fd478:	f7ff fc0e 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
 23fd47c:	682a      	ldr	r2, [r5, #0]
 23fd47e:	a801      	add	r0, sp, #4
    address_ = addr.address_;
 23fd480:	f8d2 3002 	ldr.w	r3, [r2, #2]
 23fd484:	6023      	str	r3, [r4, #0]
 23fd486:	f8d2 3006 	ldr.w	r3, [r2, #6]
 23fd48a:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
 23fd48c:	f7ff fc12 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
 23fd490:	4620      	mov	r0, r4
 23fd492:	b003      	add	sp, #12
 23fd494:	bd30      	pop	{r4, r5, pc}

023fd496 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
 23fd496:	b530      	push	{r4, r5, lr}
 23fd498:	4605      	mov	r5, r0
 23fd49a:	460c      	mov	r4, r1
 23fd49c:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fd49e:	a801      	add	r0, sp, #4
 23fd4a0:	f7ff fbfa 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
 23fd4a4:	682a      	ldr	r2, [r5, #0]
 23fd4a6:	6823      	ldr	r3, [r4, #0]
 23fd4a8:	8812      	ldrh	r2, [r2, #0]
 23fd4aa:	881b      	ldrh	r3, [r3, #0]
 23fd4ac:	429a      	cmp	r2, r3
 23fd4ae:	d10d      	bne.n	23fd4cc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
 23fd4b0:	4629      	mov	r1, r5
 23fd4b2:	a802      	add	r0, sp, #8
 23fd4b4:	f7ff ffdc 	bl	23fd470 <_ZNK8particle13BlePeerDevice7addressEv>
 23fd4b8:	4621      	mov	r1, r4
 23fd4ba:	a804      	add	r0, sp, #16
 23fd4bc:	f7ff ffd8 	bl	23fd470 <_ZNK8particle13BlePeerDevice7addressEv>
 23fd4c0:	a904      	add	r1, sp, #16
 23fd4c2:	a802      	add	r0, sp, #8
 23fd4c4:	f7ff fc0f 	bl	23fcce6 <_ZNK8particle10BleAddresseqERKS0_>
 23fd4c8:	4604      	mov	r4, r0
 23fd4ca:	b900      	cbnz	r0, 23fd4ce <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
 23fd4cc:	2400      	movs	r4, #0
    WiringBleLock lk;
 23fd4ce:	a801      	add	r0, sp, #4
 23fd4d0:	f7ff fbf0 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fd4d4:	4620      	mov	r0, r4
 23fd4d6:	b007      	add	sp, #28
 23fd4d8:	bd30      	pop	{r4, r5, pc}
	...

023fd4dc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
 23fd4dc:	b570      	push	{r4, r5, r6, lr}
 23fd4de:	4606      	mov	r6, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 23fd4e0:	2074      	movs	r0, #116	; 0x74
 23fd4e2:	f7fe fae8 	bl	23fbab6 <_Znwj>
 23fd4e6:	4604      	mov	r4, r0
 23fd4e8:	b1a0      	cbz	r0, 23fd514 <_ZN8particle14BleLocalDeviceC1Ev+0x38>
 23fd4ea:	2500      	movs	r5, #0
 23fd4ec:	e9c0 5500 	strd	r5, r5, [r0]
 23fd4f0:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fd4f4:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd4f8:	e9c0 5506 	strd	r5, r5, [r0, #24]
 23fd4fc:	6205      	str	r5, [r0, #32]
              pairingEventCallback_(nullptr) {
 23fd4fe:	3024      	adds	r0, #36	; 0x24
 23fd500:	f7ff ff6e 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
 23fd504:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fd508:	f7ff ff6a 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
 23fd50c:	63e5      	str	r5, [r4, #60]	; 0x3c
 23fd50e:	64e5      	str	r5, [r4, #76]	; 0x4c
 23fd510:	65e5      	str	r5, [r4, #92]	; 0x5c
 23fd512:	66e5      	str	r5, [r4, #108]	; 0x6c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 23fd514:	6034      	str	r4, [r6, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
 23fd516:	b924      	cbnz	r4, 23fd522 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
        SPARK_ASSERT(false);
 23fd518:	200a      	movs	r0, #10
 23fd51a:	4a0a      	ldr	r2, [pc, #40]	; (23fd544 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fd51c:	490a      	ldr	r1, [pc, #40]	; (23fd548 <_ZN8particle14BleLocalDeviceC1Ev+0x6c>)
 23fd51e:	f7fe fe0d 	bl	23fc13c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
 23fd522:	2000      	movs	r0, #0
 23fd524:	f7fe fcf2 	bl	23fbf0c <hal_ble_stack_init>
 23fd528:	b120      	cbz	r0, 23fd534 <_ZN8particle14BleLocalDeviceC1Ev+0x58>
 23fd52a:	200a      	movs	r0, #10
 23fd52c:	4a05      	ldr	r2, [pc, #20]	; (23fd544 <_ZN8particle14BleLocalDeviceC1Ev+0x68>)
 23fd52e:	4907      	ldr	r1, [pc, #28]	; (23fd54c <_ZN8particle14BleLocalDeviceC1Ev+0x70>)
 23fd530:	f7fe fe04 	bl	23fc13c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
 23fd534:	2200      	movs	r2, #0
 23fd536:	6831      	ldr	r1, [r6, #0]
 23fd538:	4805      	ldr	r0, [pc, #20]	; (23fd550 <_ZN8particle14BleLocalDeviceC1Ev+0x74>)
 23fd53a:	f7fe fd81 	bl	23fc040 <hal_ble_set_callback_on_periph_link_events>
}
 23fd53e:	4630      	mov	r0, r6
 23fd540:	bd70      	pop	{r4, r5, r6, pc}
 23fd542:	bf00      	nop
 23fd544:	023fc0cd 	.word	0x023fc0cd
 23fd548:	023ffb88 	.word	0x023ffb88
 23fd54c:	023ffbcd 	.word	0x023ffbcd
 23fd550:	023fdecd 	.word	0x023fdecd

023fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
 23fd554:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
 23fd556:	4c0a      	ldr	r4, [pc, #40]	; (23fd580 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
 23fd558:	e8d4 3f8f 	ldab	r3, [r4]
 23fd55c:	07db      	lsls	r3, r3, #31
 23fd55e:	d40c      	bmi.n	23fd57a <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fd560:	4620      	mov	r0, r4
 23fd562:	f7fe faae 	bl	23fbac2 <__cxa_guard_acquire>
 23fd566:	b140      	cbz	r0, 23fd57a <_ZN8particle14BleLocalDevice11getInstanceEv+0x26>
 23fd568:	4806      	ldr	r0, [pc, #24]	; (23fd584 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fd56a:	f7ff ffb7 	bl	23fd4dc <_ZN8particle14BleLocalDeviceC1Ev>
 23fd56e:	4620      	mov	r0, r4
 23fd570:	f7fe faac 	bl	23fbacc <__cxa_guard_release>
 23fd574:	4804      	ldr	r0, [pc, #16]	; (23fd588 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
 23fd576:	f002 f959 	bl	23ff82c <atexit>
    return instance;
}
 23fd57a:	4802      	ldr	r0, [pc, #8]	; (23fd584 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
 23fd57c:	bd10      	pop	{r4, pc}
 23fd57e:	bf00      	nop
 23fd580:	1007aee4 	.word	0x1007aee4
 23fd584:	1007aeec 	.word	0x1007aeec
 23fd588:	023fe179 	.word	0x023fe179

023fd58c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd58c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
 23fd58e:	6803      	ldr	r3, [r0, #0]
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd590:	4604      	mov	r4, r0
    switch (event->type) {
 23fd592:	3b09      	subs	r3, #9
 23fd594:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
 23fd596:	460d      	mov	r5, r1
 23fd598:	b08d      	sub	sp, #52	; 0x34
    switch (event->type) {
 23fd59a:	d811      	bhi.n	23fd5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
 23fd59c:	f7ff ffda 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23fd5a0:	88a1      	ldrh	r1, [r4, #4]
 23fd5a2:	6800      	ldr	r0, [r0, #0]
 23fd5a4:	f7ff fe2f 	bl	23fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
 23fd5a8:	4603      	mov	r3, r0
 23fd5aa:	b958      	cbnz	r0, 23fd5c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
 23fd5ac:	2220      	movs	r2, #32
 23fd5ae:	e9cd 2004 	strd	r2, r0, [sp, #16]
 23fd5b2:	4a0b      	ldr	r2, [pc, #44]	; (23fd5e0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
 23fd5b4:	2032      	movs	r0, #50	; 0x32
 23fd5b6:	9200      	str	r2, [sp, #0]
 23fd5b8:	490a      	ldr	r1, [pc, #40]	; (23fd5e4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
 23fd5ba:	aa04      	add	r2, sp, #16
 23fd5bc:	f7fe fdcc 	bl	23fc158 <log_message>
}
 23fd5c0:	b00d      	add	sp, #52	; 0x34
 23fd5c2:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
 23fd5c4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 23fd5c6:	2a00      	cmp	r2, #0
 23fd5c8:	d0fa      	beq.n	23fd5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
 23fd5ca:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd5ce:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 23fd5d2:	e9cd 1203 	strd	r1, r2, [sp, #12]
 23fd5d6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 23fd5d8:	aa04      	add	r2, sp, #16
 23fd5da:	a903      	add	r1, sp, #12
 23fd5dc:	47a0      	blx	r4
}
 23fd5de:	e7ef      	b.n	23fd5c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
 23fd5e0:	023ffc0f 	.word	0x023ffc0f
 23fd5e4:	023ffb9f 	.word	0x023ffb9f

023fd5e8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
 23fd5e8:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
 23fd5ea:	2000      	movs	r0, #0
 23fd5ec:	f7fe fc8e 	bl	23fbf0c <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
 23fd5f0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fd5f4:	bd08      	pop	{r3, pc}
	...

023fd5f8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
 23fd5f8:	b570      	push	{r4, r5, r6, lr}
 23fd5fa:	4604      	mov	r4, r0
 23fd5fc:	460e      	mov	r6, r1
 23fd5fe:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
 23fd600:	3018      	adds	r0, #24
 23fd602:	f7ff fac7 	bl	23fcb94 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
 23fd606:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd60a:	f7ff face 	bl	23fcbaa <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fd60e:	2200      	movs	r2, #0
 23fd610:	4621      	mov	r1, r4
        targetCount_ = resultCount;
 23fd612:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
 23fd616:	4803      	ldr	r0, [pc, #12]	; (23fd624 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
 23fd618:	f7fe fc86 	bl	23fbf28 <hal_ble_gap_start_scan>
 23fd61c:	2800      	cmp	r0, #0
        return foundCount_;
 23fd61e:	bfa8      	it	ge
 23fd620:	6960      	ldrge	r0, [r4, #20]
    }
 23fd622:	bd70      	pop	{r4, r5, r6, pc}
 23fd624:	023fef19 	.word	0x023fef19

023fd628 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
 23fd628:	b510      	push	{r4, lr}
 23fd62a:	4604      	mov	r4, r0
    ::free(ptr);
 23fd62c:	6940      	ldr	r0, [r0, #20]
 23fd62e:	f7fe fe8f 	bl	23fc350 <free>
 23fd632:	68a0      	ldr	r0, [r4, #8]
 23fd634:	f7fe fe8c 	bl	23fc350 <free>
 23fd638:	4620      	mov	r0, r4
 23fd63a:	bd10      	pop	{r4, pc}

023fd63c <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
 23fd63c:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
 23fd63e:	f647 717f 	movw	r1, #32639	; 0x7f7f
 23fd642:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
 23fd646:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd64a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 23fd64e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 23fd652:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 23fd656:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 23fd65a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 23fd65e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 23fd662:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 23fd666:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
 23fd66a:	6202      	str	r2, [r0, #32]
 23fd66c:	6302      	str	r2, [r0, #48]	; 0x30
 23fd66e:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
 23fd672:	4770      	bx	lr

023fd674 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
 23fd674:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
 23fd676:	69d8      	ldr	r0, [r3, #28]
}
 23fd678:	2800      	cmp	r0, #0
 23fd67a:	bfd4      	ite	le
 23fd67c:	2000      	movle	r0, #0
 23fd67e:	2001      	movgt	r0, #1
 23fd680:	4770      	bx	lr

023fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd682:	b510      	push	{r4, lr}
 23fd684:	4604      	mov	r4, r0
    ::free(ptr);
 23fd686:	6800      	ldr	r0, [r0, #0]
 23fd688:	f7fe fe62 	bl	23fc350 <free>
}
 23fd68c:	4620      	mov	r0, r4
 23fd68e:	bd10      	pop	{r4, pc}

023fd690 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
 23fd690:	b570      	push	{r4, r5, r6, lr}
 23fd692:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd694:	2624      	movs	r6, #36	; 0x24
    ::free(ptr);
 23fd696:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 23fd698:	f7fe fe5a 	bl	23fc350 <free>
 23fd69c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 23fd69e:	f7fe fe57 	bl	23fc350 <free>
    }
    ~BleScanFilter() = default;
 23fd6a2:	f104 0538 	add.w	r5, r4, #56	; 0x38
 23fd6a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fd6aa:	f7ff ffea 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
 23fd6ae:	4628      	mov	r0, r5
 23fd6b0:	f7ff f96e 	bl	23fc990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
 23fd6b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fd6b8:	f7ff f896 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
 23fd6bc:	f104 0018 	add.w	r0, r4, #24
 23fd6c0:	f7ff f892 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
 23fd6c4:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd6c8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd6cc:	42ae      	cmp	r6, r5
 23fd6ce:	d004      	beq.n	23fd6da <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
 23fd6d0:	4628      	mov	r0, r5
 23fd6d2:	f7ff ffa9 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
 23fd6d6:	3524      	adds	r5, #36	; 0x24
 23fd6d8:	e7f8      	b.n	23fd6cc <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
 23fd6da:	6820      	ldr	r0, [r4, #0]
 23fd6dc:	f7fe fe38 	bl	23fc350 <free>
 23fd6e0:	4620      	mov	r0, r4
 23fd6e2:	bd70      	pop	{r4, r5, r6, pc}

023fd6e4 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fd6e4:	b530      	push	{r4, r5, lr}
 23fd6e6:	4615      	mov	r5, r2
    if (results == nullptr || resultCount == 0) {
 23fd6e8:	460c      	mov	r4, r1
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
 23fd6ea:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
 23fd6ec:	b179      	cbz	r1, 23fd70e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
 23fd6ee:	b172      	cbz	r2, 23fd70e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
 23fd6f0:	a801      	add	r0, sp, #4
 23fd6f2:	f7ff ffa3 	bl	23fd63c <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
 23fd6f6:	4621      	mov	r1, r4
 23fd6f8:	462a      	mov	r2, r5
 23fd6fa:	a801      	add	r0, sp, #4
 23fd6fc:	f7ff ff7c 	bl	23fd5f8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
 23fd700:	4604      	mov	r4, r0
    BleScanDelegator scanner;
 23fd702:	a801      	add	r0, sp, #4
 23fd704:	f7ff ffc4 	bl	23fd690 <_ZN8particle16BleScanDelegatorD1Ev>
}
 23fd708:	4620      	mov	r0, r4
 23fd70a:	b01f      	add	sp, #124	; 0x7c
 23fd70c:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
 23fd70e:	4c01      	ldr	r4, [pc, #4]	; (23fd714 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
 23fd710:	e7fa      	b.n	23fd708 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
 23fd712:	bf00      	nop
 23fd714:	fffffef2 	.word	0xfffffef2

023fd718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fd718:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
 23fd71a:	1e14      	subs	r4, r2, #0
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
 23fd71c:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
 23fd71e:	6843      	ldr	r3, [r0, #4]
 23fd720:	db02      	blt.n	23fd728 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
 23fd722:	1862      	adds	r2, r4, r1
 23fd724:	429a      	cmp	r2, r3
 23fd726:	dd00      	ble.n	23fd72a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
 23fd728:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
 23fd72a:	682a      	ldr	r2, [r5, #0]
 23fd72c:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
 23fd72e:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
 23fd730:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd732:	1a52      	subs	r2, r2, r1
 23fd734:	f002 f89d 	bl	23ff872 <memmove>
    size_ -= n;
 23fd738:	686a      	ldr	r2, [r5, #4]
 23fd73a:	1b12      	subs	r2, r2, r4
 23fd73c:	606a      	str	r2, [r5, #4]
}
 23fd73e:	bd38      	pop	{r3, r4, r5, pc}

023fd740 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
 23fd740:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd742:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
 23fd744:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd746:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd748:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
 23fd74a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd74c:	f7fe f9b3 	bl	23fbab6 <_Znwj>
 23fd750:	b118      	cbz	r0, 23fd75a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fd752:	682b      	ldr	r3, [r5, #0]
 23fd754:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd756:	686b      	ldr	r3, [r5, #4]
 23fd758:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd75a:	4b03      	ldr	r3, [pc, #12]	; (23fd768 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd75c:	6020      	str	r0, [r4, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd75e:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd760:	4b02      	ldr	r3, [pc, #8]	; (23fd76c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
      }
 23fd762:	4620      	mov	r0, r4
	    _M_manager = &_My_handler::_M_manager;
 23fd764:	60a3      	str	r3, [r4, #8]
      }
 23fd766:	bd38      	pop	{r3, r4, r5, pc}
 23fd768:	023fcb3d 	.word	0x023fcb3d
 23fd76c:	023fcb55 	.word	0x023fcb55

023fd770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 23fd770:	680b      	ldr	r3, [r1, #0]
 23fd772:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 23fd774:	b113      	cbz	r3, 23fd77c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 23fd776:	685a      	ldr	r2, [r3, #4]
 23fd778:	3201      	adds	r2, #1
 23fd77a:	605a      	str	r2, [r3, #4]
      }
 23fd77c:	4770      	bx	lr

023fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
 23fd77e:	b510      	push	{r4, lr}
 23fd780:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd782:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd786:	f840 3b04 	str.w	r3, [r0], #4
 23fd78a:	f7ff fff1 	bl	23fd770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
 23fd78e:	6823      	ldr	r3, [r4, #0]
 23fd790:	b90b      	cbnz	r3, 23fd796 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
 23fd792:	f7ff f9c9 	bl	23fcb28 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
 23fd796:	4620      	mov	r0, r4
 23fd798:	bd10      	pop	{r4, pc}

023fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fd79a:	b510      	push	{r4, lr}
 23fd79c:	4604      	mov	r4, r0
 23fd79e:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd7a2:	f840 3b04 	str.w	r3, [r0], #4
 23fd7a6:	f7ff ffe3 	bl	23fd770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fd7aa:	4620      	mov	r0, r4
 23fd7ac:	bd10      	pop	{r4, pc}

023fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
 23fd7ae:	b510      	push	{r4, lr}
 23fd7b0:	4604      	mov	r4, r0
 23fd7b2:	f851 3b04 	ldr.w	r3, [r1], #4
 23fd7b6:	f840 3b04 	str.w	r3, [r0], #4
 23fd7ba:	f7ff ffd9 	bl	23fd770 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 23fd7be:	4620      	mov	r0, r4
 23fd7c0:	bd10      	pop	{r4, pc}

023fd7c2 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
 23fd7c2:	b510      	push	{r4, lr}
 23fd7c4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fd7c6:	3004      	adds	r0, #4
 23fd7c8:	f7fe ff0c 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd7cc:	4620      	mov	r0, r4
 23fd7ce:	bd10      	pop	{r4, pc}

023fd7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd7d0:	b570      	push	{r4, r5, r6, lr}
 23fd7d2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd7d4:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd7d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fd7dc:	42ae      	cmp	r6, r5
 23fd7de:	d004      	beq.n	23fd7ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
 23fd7e0:	1d28      	adds	r0, r5, #4
 23fd7e2:	f7fe feff 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd7e6:	3508      	adds	r5, #8
 23fd7e8:	e7f8      	b.n	23fd7dc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd7ea:	6820      	ldr	r0, [r4, #0]
 23fd7ec:	f7fe fdb0 	bl	23fc350 <free>
}
 23fd7f0:	4620      	mov	r0, r4
 23fd7f2:	bd70      	pop	{r4, r5, r6, pc}

023fd7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd7f4:	b570      	push	{r4, r5, r6, lr}
 23fd7f6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd7f8:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd7fc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fd800:	42ae      	cmp	r6, r5
 23fd802:	d004      	beq.n	23fd80e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
 23fd804:	1d28      	adds	r0, r5, #4
 23fd806:	f7fe feed 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd80a:	3508      	adds	r5, #8
 23fd80c:	e7f8      	b.n	23fd800 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd80e:	6820      	ldr	r0, [r4, #0]
 23fd810:	f7fe fd9e 	bl	23fc350 <free>
}
 23fd814:	4620      	mov	r0, r4
 23fd816:	bd70      	pop	{r4, r5, r6, pc}

023fd818 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fd818:	b510      	push	{r4, lr}
 23fd81a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
 23fd81c:	3024      	adds	r0, #36	; 0x24
 23fd81e:	f7ff ffe9 	bl	23fd7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fd822:	f104 0018 	add.w	r0, r4, #24
 23fd826:	f7ff ffd3 	bl	23fd7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
 23fd82a:	bd10      	pop	{r4, pc}

023fd82c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
 23fd82c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd82e:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd830:	b90a      	cbnz	r2, 23fd836 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
 23fd832:	f001 fee5 	bl	23ff600 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd836:	68c3      	ldr	r3, [r0, #12]
    }
 23fd838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd83c:	4718      	bx	r3

023fd83e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fd83e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fd844:	e9c0 3300 	strd	r3, r3, [r0]
 23fd848:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd84a:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd84e:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd850:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd852:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd854:	dd4a      	ble.n	23fd8ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
 23fd856:	ea4f 1008 	mov.w	r0, r8, lsl #4
 23fd85a:	f7fe fd6b 	bl	23fc334 <malloc>
            if (!d) {
 23fd85e:	4606      	mov	r6, r0
 23fd860:	2800      	cmp	r0, #0
 23fd862:	d043      	beq.n	23fd8ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
 23fd864:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fd868:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fd86a:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
 23fd86e:	d916      	bls.n	23fd89e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
 23fd870:	4550      	cmp	r0, sl
 23fd872:	d215      	bcs.n	23fd8a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
 23fd874:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
 23fd878:	f1a4 0910 	sub.w	r9, r4, #16
 23fd87c:	ebaa 0404 	sub.w	r4, sl, r4
 23fd880:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fd882:	45d1      	cmp	r9, sl
 23fd884:	d01d      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
 23fd886:	b11c      	cbz	r4, 23fd890 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
 23fd888:	4651      	mov	r1, sl
 23fd88a:	4620      	mov	r0, r4
 23fd88c:	f001 fd7a 	bl	23ff384 <_ZN6StringC1EOS_>
                end->~T();
 23fd890:	4650      	mov	r0, sl
 23fd892:	f001 fcfb 	bl	23ff28c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd896:	f1aa 0a10 	sub.w	sl, sl, #16
 23fd89a:	3c10      	subs	r4, #16
 23fd89c:	e7f1      	b.n	23fd882 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
 23fd89e:	d010      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
 23fd8a0:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fd8a2:	45a2      	cmp	sl, r4
 23fd8a4:	d00d      	beq.n	23fd8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
 23fd8a6:	f1b9 0f00 	cmp.w	r9, #0
 23fd8aa:	d003      	beq.n	23fd8b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
 23fd8ac:	4621      	mov	r1, r4
 23fd8ae:	4648      	mov	r0, r9
 23fd8b0:	f001 fd68 	bl	23ff384 <_ZN6StringC1EOS_>
                p->~T();
 23fd8b4:	4620      	mov	r0, r4
 23fd8b6:	f001 fce9 	bl	23ff28c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd8ba:	3410      	adds	r4, #16
 23fd8bc:	f109 0910 	add.w	r9, r9, #16
 23fd8c0:	e7ef      	b.n	23fd8a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
 23fd8c2:	6828      	ldr	r0, [r5, #0]
 23fd8c4:	f7fe fd44 	bl	23fc350 <free>
        capacity_ = n;
 23fd8c8:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
 23fd8cc:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd8ce:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fd8d2:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
 23fd8d6:	45a0      	cmp	r8, r4
 23fd8d8:	d006      	beq.n	23fd8e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
 23fd8da:	4621      	mov	r1, r4
 23fd8dc:	4630      	mov	r0, r6
 23fd8de:	f001 fd6b 	bl	23ff3b8 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
 23fd8e2:	3410      	adds	r4, #16
 23fd8e4:	3610      	adds	r6, #16
 23fd8e6:	e7f6      	b.n	23fd8d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
 23fd8e8:	687b      	ldr	r3, [r7, #4]
 23fd8ea:	606b      	str	r3, [r5, #4]
}
 23fd8ec:	4628      	mov	r0, r5
 23fd8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fd8f2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
 23fd8f2:	b530      	push	{r4, r5, lr}
 23fd8f4:	b08d      	sub	sp, #52	; 0x34
 23fd8f6:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
 23fd8f8:	f100 0138 	add.w	r1, r0, #56	; 0x38
 23fd8fc:	a801      	add	r0, sp, #4
 23fd8fe:	f7ff ff9e 	bl	23fd83e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
 23fd902:	9b02      	ldr	r3, [sp, #8]
 23fd904:	2b00      	cmp	r3, #0
 23fd906:	dd2f      	ble.n	23fd968 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
 23fd908:	f104 0114 	add.w	r1, r4, #20
 23fd90c:	a804      	add	r0, sp, #16
 23fd90e:	f7ff fc1b 	bl	23fd148 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
 23fd912:	f104 0108 	add.w	r1, r4, #8
 23fd916:	a808      	add	r0, sp, #32
 23fd918:	f7ff fc16 	bl	23fd148 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
 23fd91c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fd91e:	9b06      	ldr	r3, [sp, #24]
 23fd920:	4313      	orrs	r3, r2
 23fd922:	d01f      	beq.n	23fd964 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
 23fd924:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 23fd928:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
 23fd92c:	42ac      	cmp	r4, r5
 23fd92e:	d019      	beq.n	23fd964 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
 23fd930:	4620      	mov	r0, r4
 23fd932:	a904      	add	r1, sp, #16
 23fd934:	f001 fd96 	bl	23ff464 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fd938:	b160      	cbz	r0, 23fd954 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
 23fd93a:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
 23fd93c:	a808      	add	r0, sp, #32
 23fd93e:	f001 fca5 	bl	23ff28c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
 23fd942:	a804      	add	r0, sp, #16
 23fd944:	f001 fca2 	bl	23ff28c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
 23fd948:	a801      	add	r0, sp, #4
 23fd94a:	f7ff f821 	bl	23fc990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
 23fd94e:	4620      	mov	r0, r4
 23fd950:	b00d      	add	sp, #52	; 0x34
 23fd952:	bd30      	pop	{r4, r5, pc}
 23fd954:	4620      	mov	r0, r4
 23fd956:	a908      	add	r1, sp, #32
 23fd958:	f001 fd84 	bl	23ff464 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
 23fd95c:	3410      	adds	r4, #16
 23fd95e:	2800      	cmp	r0, #0
 23fd960:	d0e4      	beq.n	23fd92c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
 23fd962:	e7ea      	b.n	23fd93a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
 23fd964:	2400      	movs	r4, #0
 23fd966:	e7e9      	b.n	23fd93c <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
 23fd968:	2401      	movs	r4, #1
 23fd96a:	e7ed      	b.n	23fd948 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

023fd96c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
 23fd96e:	2300      	movs	r3, #0
 23fd970:	e9c0 3300 	strd	r3, r3, [r0]
 23fd974:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd976:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd978:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd97a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fd97c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fd97e:	dd40      	ble.n	23fda02 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
    return ::malloc(size);
 23fd980:	00f8      	lsls	r0, r7, #3
 23fd982:	f7fe fcd7 	bl	23fc334 <malloc>
            if (!d) {
 23fd986:	4604      	mov	r4, r0
 23fd988:	b3d8      	cbz	r0, 23fda02 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x96>
            move(d, data_, data_ + size_);
 23fd98a:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
 23fd98e:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
 23fd990:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
 23fd994:	d910      	bls.n	23fd9b8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
 23fd996:	429c      	cmp	r4, r3
 23fd998:	d20f      	bcs.n	23fd9ba <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
 23fd99a:	3b08      	subs	r3, #8
            dest += end - p - 1;
 23fd99c:	1a1a      	subs	r2, r3, r0
 23fd99e:	f1a0 0c08 	sub.w	ip, r0, #8
 23fd9a2:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
 23fd9a4:	459c      	cmp	ip, r3
 23fd9a6:	d018      	beq.n	23fd9da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
 23fd9a8:	b11a      	cbz	r2, 23fd9b2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
 23fd9aa:	6819      	ldr	r1, [r3, #0]
 23fd9ac:	6011      	str	r1, [r2, #0]
 23fd9ae:	6859      	ldr	r1, [r3, #4]
 23fd9b0:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
 23fd9b2:	3b08      	subs	r3, #8
 23fd9b4:	3a08      	subs	r2, #8
 23fd9b6:	e7f5      	b.n	23fd9a4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
 23fd9b8:	d00f      	beq.n	23fd9da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
 23fd9ba:	4601      	mov	r1, r0
 23fd9bc:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
 23fd9be:	428b      	cmp	r3, r1
 23fd9c0:	d00b      	beq.n	23fd9da <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
 23fd9c2:	b13a      	cbz	r2, 23fd9d4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
 23fd9c4:	f8d1 c000 	ldr.w	ip, [r1]
 23fd9c8:	f8c2 c000 	str.w	ip, [r2]
 23fd9cc:	f8d1 c004 	ldr.w	ip, [r1, #4]
 23fd9d0:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
 23fd9d4:	3108      	adds	r1, #8
 23fd9d6:	3208      	adds	r2, #8
 23fd9d8:	e7f1      	b.n	23fd9be <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
 23fd9da:	f7fe fcb9 	bl	23fc350 <free>
        data_ = d;
 23fd9de:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd9e0:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fd9e2:	e9d6 3100 	ldrd	r3, r1, [r6]
 23fd9e6:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
 23fd9ea:	4298      	cmp	r0, r3
 23fd9ec:	d008      	beq.n	23fda00 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x94>
 23fd9ee:	681a      	ldr	r2, [r3, #0]
 23fd9f0:	3408      	adds	r4, #8
 23fd9f2:	f844 2c08 	str.w	r2, [r4, #-8]
 23fd9f6:	685a      	ldr	r2, [r3, #4]
 23fd9f8:	3308      	adds	r3, #8
 23fd9fa:	f844 2c04 	str.w	r2, [r4, #-4]
 23fd9fe:	e7f4      	b.n	23fd9ea <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
 23fda00:	6069      	str	r1, [r5, #4]
}
 23fda02:	4628      	mov	r0, r5
 23fda04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fda06 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fda06:	b570      	push	{r4, r5, r6, lr}
 23fda08:	4604      	mov	r4, r0
        capacity_(0) {
 23fda0a:	2000      	movs	r0, #0
 23fda0c:	e9c4 0000 	strd	r0, r0, [r4]
 23fda10:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fda12:	684e      	ldr	r6, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fda14:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fda16:	4286      	cmp	r6, r0
 23fda18:	dd12      	ble.n	23fda40 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
 23fda1a:	0071      	lsls	r1, r6, #1
 23fda1c:	f7fe fca6 	bl	23fc36c <realloc>
            if (!d) {
 23fda20:	b170      	cbz	r0, 23fda40 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
 23fda22:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fda24:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fda26:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fda2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
 23fda2e:	429a      	cmp	r2, r3
 23fda30:	d004      	beq.n	23fda3c <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
 23fda32:	f833 1b02 	ldrh.w	r1, [r3], #2
 23fda36:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
 23fda3a:	e7f8      	b.n	23fda2e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
 23fda3c:	686b      	ldr	r3, [r5, #4]
 23fda3e:	6063      	str	r3, [r4, #4]
}
 23fda40:	4620      	mov	r0, r4
 23fda42:	bd70      	pop	{r4, r5, r6, pc}

023fda44 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
 23fda44:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fda46:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fda48:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fda4a:	b923      	cbnz	r3, 23fda56 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
 23fda4c:	6803      	ldr	r3, [r0, #0]
 23fda4e:	6818      	ldr	r0, [r3, #0]
 23fda50:	b108      	cbz	r0, 23fda56 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
 23fda52:	f7fe fc7d 	bl	23fc350 <free>
            func_();
        }
    }
 23fda56:	4620      	mov	r0, r4
 23fda58:	bd10      	pop	{r4, pc}

023fda5a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
 23fda5a:	b510      	push	{r4, lr}
        if (!dismissed_) {
 23fda5c:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
 23fda5e:	4604      	mov	r4, r0
        if (!dismissed_) {
 23fda60:	b923      	cbnz	r3, 23fda6c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
 23fda62:	6803      	ldr	r3, [r0, #0]
 23fda64:	6818      	ldr	r0, [r3, #0]
 23fda66:	b108      	cbz	r0, 23fda6c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
 23fda68:	f7fe fc72 	bl	23fc350 <free>
    }
 23fda6c:	4620      	mov	r0, r4
 23fda6e:	bd10      	pop	{r4, pc}

023fda70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
 23fda70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
 23fda74:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
 23fda78:	460f      	mov	r7, r1
 23fda7a:	b08f      	sub	sp, #60	; 0x3c
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
 23fda7c:	f1b8 0f00 	cmp.w	r8, #0
 23fda80:	d072      	beq.n	23fdb68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
 23fda82:	6f05      	ldr	r5, [r0, #112]	; 0x70
 23fda84:	2d00      	cmp	r5, #0
 23fda86:	d06f      	beq.n	23fdb68 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
 23fda88:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fda8c:	231f      	movs	r3, #31
 23fda8e:	2200      	movs	r2, #0
 23fda90:	21ff      	movs	r1, #255	; 0xff
 23fda92:	4648      	mov	r0, r9
 23fda94:	f7ff fb25 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fda98:	23ff      	movs	r3, #255	; 0xff
        return advertisingData_;
 23fda9a:	3708      	adds	r7, #8
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
 23fda9c:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fda9e:	2200      	movs	r2, #0
 23fdaa0:	4619      	mov	r1, r3
 23fdaa2:	4638      	mov	r0, r7
 23fdaa4:	f7ff fb1d 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fdaa8:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
 23fdaaa:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
 23fdaac:	d006      	beq.n	23fdabc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
 23fdaae:	42ae      	cmp	r6, r5
 23fdab0:	d030      	beq.n	23fdb14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
 23fdab2:	2400      	movs	r4, #0
    }
 23fdab4:	4620      	mov	r0, r4
 23fdab6:	b00f      	add	sp, #60	; 0x3c
 23fdab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
 23fdabc:	4620      	mov	r0, r4
 23fdabe:	f7fe fc39 	bl	23fc334 <malloc>
            dismissed_(false) {
 23fdac2:	ab03      	add	r3, sp, #12
 23fdac4:	9304      	str	r3, [sp, #16]
 23fdac6:	2300      	movs	r3, #0
 23fdac8:	4604      	mov	r4, r0
 23fdaca:	9003      	str	r0, [sp, #12]
 23fdacc:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
 23fdad0:	b970      	cbnz	r0, 23fdaf0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
 23fdad2:	2320      	movs	r3, #32
 23fdad4:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fdad8:	4b24      	ldr	r3, [pc, #144]	; (23fdb6c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fdada:	4925      	ldr	r1, [pc, #148]	; (23fdb70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fdadc:	9300      	str	r3, [sp, #0]
 23fdade:	aa06      	add	r2, sp, #24
 23fdae0:	4603      	mov	r3, r0
 23fdae2:	2032      	movs	r0, #50	; 0x32
 23fdae4:	f7fe fb38 	bl	23fc158 <log_message>
                    return false;
 23fdae8:	a804      	add	r0, sp, #16
 23fdaea:	f7ff ffab 	bl	23fda44 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
 23fdaee:	e7e1      	b.n	23fdab4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
 23fdaf0:	4602      	mov	r2, r0
 23fdaf2:	21ff      	movs	r1, #255	; 0xff
 23fdaf4:	462b      	mov	r3, r5
 23fdaf6:	4648      	mov	r0, r9
 23fdaf8:	f7ff faf3 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
 23fdafc:	462a      	mov	r2, r5
 23fdafe:	4641      	mov	r1, r8
 23fdb00:	9803      	ldr	r0, [sp, #12]
 23fdb02:	f001 fe99 	bl	23ff838 <memcmp>
 23fdb06:	b118      	cbz	r0, 23fdb10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
 23fdb08:	a804      	add	r0, sp, #16
 23fdb0a:	f7ff ff9b 	bl	23fda44 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
 23fdb0e:	e7ce      	b.n	23fdaae <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
 23fdb10:	2401      	movs	r4, #1
 23fdb12:	e7e9      	b.n	23fdae8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
 23fdb14:	4628      	mov	r0, r5
 23fdb16:	f7fe fc0d 	bl	23fc334 <malloc>
 23fdb1a:	2400      	movs	r4, #0
 23fdb1c:	ab03      	add	r3, sp, #12
 23fdb1e:	4606      	mov	r6, r0
 23fdb20:	9003      	str	r0, [sp, #12]
 23fdb22:	9304      	str	r3, [sp, #16]
 23fdb24:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
 23fdb28:	b978      	cbnz	r0, 23fdb4a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
 23fdb2a:	2320      	movs	r3, #32
 23fdb2c:	e9cd 3006 	strd	r3, r0, [sp, #24]
 23fdb30:	4b0e      	ldr	r3, [pc, #56]	; (23fdb6c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
 23fdb32:	490f      	ldr	r1, [pc, #60]	; (23fdb70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
 23fdb34:	9300      	str	r3, [sp, #0]
 23fdb36:	aa06      	add	r2, sp, #24
 23fdb38:	4603      	mov	r3, r0
 23fdb3a:	2032      	movs	r0, #50	; 0x32
 23fdb3c:	f7fe fb0c 	bl	23fc158 <log_message>
                    return false;
 23fdb40:	4634      	mov	r4, r6
 23fdb42:	a804      	add	r0, sp, #16
 23fdb44:	f7ff ff89 	bl	23fda5a <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
 23fdb48:	e7b4      	b.n	23fdab4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
 23fdb4a:	4602      	mov	r2, r0
 23fdb4c:	21ff      	movs	r1, #255	; 0xff
 23fdb4e:	462b      	mov	r3, r5
 23fdb50:	4638      	mov	r0, r7
 23fdb52:	f7ff fac6 	bl	23fd0e2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
 23fdb56:	462a      	mov	r2, r5
 23fdb58:	4641      	mov	r1, r8
 23fdb5a:	9803      	ldr	r0, [sp, #12]
 23fdb5c:	f001 fe6c 	bl	23ff838 <memcmp>
 23fdb60:	2800      	cmp	r0, #0
 23fdb62:	d1ee      	bne.n	23fdb42 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
 23fdb64:	2401      	movs	r4, #1
 23fdb66:	e7ec      	b.n	23fdb42 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
 23fdb68:	2401      	movs	r4, #1
 23fdb6a:	e7a3      	b.n	23fdab4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
 23fdb6c:	023ffc27 	.word	0x023ffc27
 23fdb70:	023ffb9f 	.word	0x023ffb9f

023fdb74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
 23fdb74:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fdb76:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fdb78:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fdb7a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fdb7c:	dd03      	ble.n	23fdb86 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
 23fdb7e:	f7fe fbf5 	bl	23fc36c <realloc>
            if (!d) {
 23fdb82:	b918      	cbnz	r0, 23fdb8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
 23fdb84:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fdb86:	f7fe fbe3 	bl	23fc350 <free>
        T* d = nullptr;
 23fdb8a:	2000      	movs	r0, #0
        data_ = d;
 23fdb8c:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fdb8e:	60a5      	str	r5, [r4, #8]
        return true;
 23fdb90:	2001      	movs	r0, #1
 23fdb92:	e7f7      	b.n	23fdb84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

023fdb94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23fdb94:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23fdb96:	6883      	ldr	r3, [r0, #8]
 23fdb98:	428b      	cmp	r3, r1
 23fdb9a:	da02      	bge.n	23fdba2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
 23fdb9c:	f7ff ffea 	bl	23fdb74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
 23fdba0:	bd08      	pop	{r3, pc}
    return true;
 23fdba2:	2001      	movs	r0, #1
 23fdba4:	e7fc      	b.n	23fdba0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

023fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdba6:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdba8:	2300      	movs	r3, #0
 23fdbaa:	e9c0 3300 	strd	r3, r3, [r0]
 23fdbae:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdbb0:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fdbb2:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fdbb4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fdbb6:	4299      	cmp	r1, r3
 23fdbb8:	dd10      	ble.n	23fdbdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fdbba:	f7ff ffdb 	bl	23fdb74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fdbbe:	b168      	cbz	r0, 23fdbdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fdbc0:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fdbc4:	6822      	ldr	r2, [r4, #0]
 23fdbc6:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fdbc8:	4299      	cmp	r1, r3
 23fdbca:	d005      	beq.n	23fdbd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fdbcc:	b10a      	cbz	r2, 23fdbd2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fdbce:	7818      	ldrb	r0, [r3, #0]
 23fdbd0:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fdbd2:	3301      	adds	r3, #1
 23fdbd4:	3201      	adds	r2, #1
 23fdbd6:	e7f7      	b.n	23fdbc8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fdbd8:	686b      	ldr	r3, [r5, #4]
 23fdbda:	6063      	str	r3, [r4, #4]
}
 23fdbdc:	4620      	mov	r0, r4
 23fdbde:	bd38      	pop	{r3, r4, r5, pc}

023fdbe0 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
 23fdbe0:	b538      	push	{r3, r4, r5, lr}
 23fdbe2:	4604      	mov	r4, r0
 23fdbe4:	460d      	mov	r5, r1
    address_ = addr.address_;
 23fdbe6:	680b      	ldr	r3, [r1, #0]
class BleAdvertisingData {
 23fdbe8:	3008      	adds	r0, #8
 23fdbea:	f840 3c08 	str.w	r3, [r0, #-8]
 23fdbee:	684b      	ldr	r3, [r1, #4]
 23fdbf0:	3108      	adds	r1, #8
 23fdbf2:	f840 3c04 	str.w	r3, [r0, #-4]
 23fdbf6:	f7ff ffd6 	bl	23fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23fdbfa:	f105 0114 	add.w	r1, r5, #20
 23fdbfe:	f104 0014 	add.w	r0, r4, #20
 23fdc02:	f7ff ffd0 	bl	23fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23fdc06:	f895 3020 	ldrb.w	r3, [r5, #32]
 23fdc0a:	4620      	mov	r0, r4
 23fdc0c:	f884 3020 	strb.w	r3, [r4, #32]
 23fdc10:	bd38      	pop	{r3, r4, r5, pc}

023fdc12 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
 23fdc12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fdc14:	4604      	mov	r4, r0
 23fdc16:	a801      	add	r0, sp, #4
 23fdc18:	f7ff ffc5 	bl	23fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
 23fdc1c:	9b01      	ldr	r3, [sp, #4]
 23fdc1e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdc20:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdc22:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdc24:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdc26:	6062      	str	r2, [r4, #4]
 23fdc28:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdc2a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fdc2c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdc2e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdc30:	9001      	str	r0, [sp, #4]
 23fdc32:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fdc34:	f7fe fb8c 	bl	23fc350 <free>
 23fdc38:	b004      	add	sp, #16
 23fdc3a:	bd10      	pop	{r4, pc}

023fdc3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fdc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdc40:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fdc42:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fdc44:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fdc46:	4419      	add	r1, r3
 23fdc48:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fdc4a:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fdc4c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
 23fdc4e:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fdc50:	dc12      	bgt.n	23fdc78 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
 23fdc52:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc54:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdc56:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdc58:	4631      	mov	r1, r6
 23fdc5a:	1bd2      	subs	r2, r2, r7
 23fdc5c:	1970      	adds	r0, r6, r5
 23fdc5e:	f001 fe08 	bl	23ff872 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fdc62:	462a      	mov	r2, r5
 23fdc64:	4641      	mov	r1, r8
 23fdc66:	4630      	mov	r0, r6
 23fdc68:	f001 fdf6 	bl	23ff858 <memcpy>
    return true;
 23fdc6c:	2001      	movs	r0, #1
    size_ += n;
 23fdc6e:	6863      	ldr	r3, [r4, #4]
 23fdc70:	442b      	add	r3, r5
 23fdc72:	6063      	str	r3, [r4, #4]
}
 23fdc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fdc78:	f7ff ff7c 	bl	23fdb74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fdc7c:	2800      	cmp	r0, #0
 23fdc7e:	d1e8      	bne.n	23fdc52 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
 23fdc80:	e7f8      	b.n	23fdc74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

023fdc82 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fdc82:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
 23fdc84:	460a      	mov	r2, r1
 23fdc86:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
 23fdc88:	b510      	push	{r4, lr}
 23fdc8a:	4604      	mov	r4, r0
    size_ = 0;
 23fdc8c:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
 23fdc8e:	b102      	cbz	r2, 23fdc92 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
 23fdc90:	b90b      	cbnz	r3, 23fdc96 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
 23fdc92:	2000      	movs	r0, #0
}
 23fdc94:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
 23fdc96:	2bff      	cmp	r3, #255	; 0xff
 23fdc98:	bf28      	it	cs
 23fdc9a:	23ff      	movcs	r3, #255	; 0xff
 23fdc9c:	f7ff ffce 	bl	23fdc3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
 23fdca0:	2800      	cmp	r0, #0
 23fdca2:	d0f7      	beq.n	23fdc94 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
 23fdca4:	6860      	ldr	r0, [r4, #4]
 23fdca6:	e7f5      	b.n	23fdc94 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

023fdca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fdca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdcaa:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcac:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fdcb0:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fdcb2:	4604      	mov	r4, r0
 23fdcb4:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcb6:	da0b      	bge.n	23fdcd0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
 23fdcb8:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdcba:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fdcbc:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fdcbe:	1b52      	subs	r2, r2, r5
 23fdcc0:	1c48      	adds	r0, r1, #1
 23fdcc2:	f001 fdd6 	bl	23ff872 <memmove>
    new(p) T(std::move(value));
 23fdcc6:	557e      	strb	r6, [r7, r5]
    ++size_;
 23fdcc8:	6863      	ldr	r3, [r4, #4]
 23fdcca:	3301      	adds	r3, #1
 23fdccc:	6063      	str	r3, [r4, #4]
}
 23fdcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fdcd0:	3101      	adds	r1, #1
 23fdcd2:	f7ff ff4f 	bl	23fdb74 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
 23fdcd6:	2800      	cmp	r0, #0
 23fdcd8:	d1ee      	bne.n	23fdcb8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
 23fdcda:	e7f8      	b.n	23fdcce <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

023fdcdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fdcdc:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
 23fdcde:	6841      	ldr	r1, [r0, #4]
 23fdce0:	f7ff bfe2 	b.w	23fdca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

023fdce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fdce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fdce8:	4604      	mov	r4, r0
 23fdcea:	461d      	mov	r5, r3
 23fdcec:	460f      	mov	r7, r1
 23fdcee:	ab01      	add	r3, sp, #4
 23fdcf0:	4690      	mov	r8, r2
 23fdcf2:	460a      	mov	r2, r1
 23fdcf4:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fdcf8:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 23fdcfc:	f7fe fefe 	bl	23fcafc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
 23fdd00:	1cae      	adds	r6, r5, #2
 23fdd02:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
 23fdd04:	6863      	ldr	r3, [r4, #4]
 23fdd06:	f1b9 0f00 	cmp.w	r9, #0
 23fdd0a:	d126      	bne.n	23fdd5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
 23fdd0c:	b328      	cbz	r0, 23fdd5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fdd0e:	4433      	add	r3, r6
 23fdd10:	1a1b      	subs	r3, r3, r0
 23fdd12:	2bff      	cmp	r3, #255	; 0xff
 23fdd14:	d809      	bhi.n	23fdd2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
 23fdd16:	4620      	mov	r0, r4
 23fdd18:	9901      	ldr	r1, [sp, #4]
 23fdd1a:	f7ff fcfd 	bl	23fd718 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fdd1e:	6861      	ldr	r1, [r4, #4]
 23fdd20:	4620      	mov	r0, r4
 23fdd22:	4431      	add	r1, r6
 23fdd24:	f7ff ff36 	bl	23fdb94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fdd28:	b918      	cbnz	r0, 23fdd32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
 23fdd2a:	6860      	ldr	r0, [r4, #4]
}
 23fdd2c:	b003      	add	sp, #12
 23fdd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
 23fdd32:	1c6a      	adds	r2, r5, #1
 23fdd34:	4620      	mov	r0, r4
 23fdd36:	9901      	ldr	r1, [sp, #4]
 23fdd38:	b2d2      	uxtb	r2, r2
 23fdd3a:	f7ff ffb5 	bl	23fdca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
 23fdd3e:	9901      	ldr	r1, [sp, #4]
 23fdd40:	463a      	mov	r2, r7
 23fdd42:	3101      	adds	r1, #1
 23fdd44:	4620      	mov	r0, r4
 23fdd46:	f7ff ffaf 	bl	23fdca8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
 23fdd4a:	462b      	mov	r3, r5
 23fdd4c:	4642      	mov	r2, r8
 23fdd4e:	9901      	ldr	r1, [sp, #4]
 23fdd50:	3102      	adds	r1, #2
    return insert(size_, values, n);
 23fdd52:	4620      	mov	r0, r4
 23fdd54:	f7ff ff72 	bl	23fdc3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
 23fdd58:	e7e7      	b.n	23fdd2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
 23fdd5a:	18f1      	adds	r1, r6, r3
 23fdd5c:	29ff      	cmp	r1, #255	; 0xff
 23fdd5e:	d8e4      	bhi.n	23fdd2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
 23fdd60:	4620      	mov	r0, r4
 23fdd62:	f7ff ff17 	bl	23fdb94 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
 23fdd66:	2800      	cmp	r0, #0
 23fdd68:	d0df      	beq.n	23fdd2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
 23fdd6a:	1c69      	adds	r1, r5, #1
 23fdd6c:	4620      	mov	r0, r4
 23fdd6e:	b2c9      	uxtb	r1, r1
 23fdd70:	f7ff ffb4 	bl	23fdcdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
 23fdd74:	4639      	mov	r1, r7
 23fdd76:	4620      	mov	r0, r4
 23fdd78:	f7ff ffb0 	bl	23fdcdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
 23fdd7c:	462b      	mov	r3, r5
 23fdd7e:	4642      	mov	r2, r8
 23fdd80:	6861      	ldr	r1, [r4, #4]
 23fdd82:	e7e6      	b.n	23fdd52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

023fdd84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
 23fdd84:	b430      	push	{r4, r5}
 23fdd86:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
 23fdd8a:	b11a      	cbz	r2, 23fdd94 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
 23fdd8c:	9502      	str	r5, [sp, #8]
}
 23fdd8e:	bc30      	pop	{r4, r5}
 23fdd90:	f7ff bfa8 	b.w	23fdce4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
 23fdd94:	6840      	ldr	r0, [r0, #4]
}
 23fdd96:	bc30      	pop	{r4, r5}
 23fdd98:	4770      	bx	lr

023fdd9a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
 23fdd9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
 23fdd9c:	2300      	movs	r3, #0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fdd9e:	2206      	movs	r2, #6
 23fdda0:	e9c0 3300 	strd	r3, r3, [r0]
 23fdda4:	6083      	str	r3, [r0, #8]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fdda6:	9300      	str	r3, [sp, #0]
 23fdda8:	2301      	movs	r3, #1
BleAdvertisingData::BleAdvertisingData()
 23fddaa:	4604      	mov	r4, r0
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
 23fddac:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
 23fddb0:	4619      	mov	r1, r3
 23fddb2:	f10d 020f 	add.w	r2, sp, #15
 23fddb6:	f7ff ffe5 	bl	23fdd84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
 23fddba:	4620      	mov	r0, r4
 23fddbc:	b004      	add	sp, #16
 23fddbe:	bd10      	pop	{r4, pc}

023fddc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fddc0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fddc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fddc4:	4604      	mov	r4, r0
 23fddc6:	460d      	mov	r5, r1
 23fddc8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fddca:	d914      	bls.n	23fddf6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fddcc:	4290      	cmp	r0, r2
 23fddce:	d213      	bcs.n	23fddf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fddd0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fddd4:	1a75      	subs	r5, r6, r1
 23fddd6:	f1a1 0708 	sub.w	r7, r1, #8
 23fddda:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fdddc:	42b7      	cmp	r7, r6
 23fddde:	d018      	beq.n	23fde12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fdde0:	b11c      	cbz	r4, 23fddea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fdde2:	4631      	mov	r1, r6
 23fdde4:	4620      	mov	r0, r4
 23fdde6:	f7ff fce2 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fddea:	1d30      	adds	r0, r6, #4
 23fddec:	f7fe fbfa 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fddf0:	3e08      	subs	r6, #8
 23fddf2:	3c08      	subs	r4, #8
 23fddf4:	e7f2      	b.n	23fdddc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fddf6:	d00c      	beq.n	23fde12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fddf8:	42b5      	cmp	r5, r6
 23fddfa:	d00a      	beq.n	23fde12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fddfc:	b11c      	cbz	r4, 23fde06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fddfe:	4629      	mov	r1, r5
 23fde00:	4620      	mov	r0, r4
 23fde02:	f7ff fcd4 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fde06:	1d28      	adds	r0, r5, #4
 23fde08:	f7fe fbec 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fde0c:	3508      	adds	r5, #8
 23fde0e:	3408      	adds	r4, #8
 23fde10:	e7f2      	b.n	23fddf8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fde12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fde14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fde16:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fde18:	6846      	ldr	r6, [r0, #4]
 23fde1a:	4668      	mov	r0, sp
 23fde1c:	f7ff fcc7 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fde20:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
 23fde24:	429f      	cmp	r7, r3
 23fde26:	db12      	blt.n	23fde4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
 23fde28:	3701      	adds	r7, #1
        if (n > 0) {
 23fde2a:	2f00      	cmp	r7, #0
 23fde2c:	dd29      	ble.n	23fde82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
 23fde2e:	00f8      	lsls	r0, r7, #3
 23fde30:	f7fe fa80 	bl	23fc334 <malloc>
            if (!d) {
 23fde34:	4605      	mov	r5, r0
 23fde36:	b1f0      	cbz	r0, 23fde76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
 23fde38:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fde3c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fde40:	f7ff ffbe 	bl	23fddc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fde44:	6820      	ldr	r0, [r4, #0]
 23fde46:	f7fe fa83 	bl	23fc350 <free>
        data_ = d;
 23fde4a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fde4c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fde4e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fde50:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fde52:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
 23fde56:	4631      	mov	r1, r6
 23fde58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fde5c:	f106 0008 	add.w	r0, r6, #8
 23fde60:	f7ff ffae 	bl	23fddc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fde64:	b11e      	cbz	r6, 23fde6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
 23fde66:	4669      	mov	r1, sp
 23fde68:	4630      	mov	r0, r6
 23fde6a:	f7ff fca0 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return true;
 23fde6e:	2501      	movs	r5, #1
    ++size_;
 23fde70:	6863      	ldr	r3, [r4, #4]
 23fde72:	3301      	adds	r3, #1
 23fde74:	6063      	str	r3, [r4, #4]
 23fde76:	a801      	add	r0, sp, #4
 23fde78:	f7fe fbb4 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fde7c:	4628      	mov	r0, r5
 23fde7e:	b003      	add	sp, #12
 23fde80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fde82:	2500      	movs	r5, #0
 23fde84:	e7de      	b.n	23fde44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

023fde86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fde86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde88:	4605      	mov	r5, r0
    T* const p = find(data_, data_ + size_, value);
 23fde8a:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fde8e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
 23fde90:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
 23fde94:	42a6      	cmp	r6, r4
 23fde96:	d005      	beq.n	23fdea4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
 23fde98:	4639      	mov	r1, r7
 23fde9a:	4620      	mov	r0, r4
 23fde9c:	f7ff fafb 	bl	23fd496 <_ZNK8particle13BlePeerDeviceeqERKS0_>
 23fdea0:	b108      	cbz	r0, 23fdea6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
 23fdea2:	b914      	cbnz	r4, 23fdeaa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
 23fdea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
 23fdea6:	3408      	adds	r4, #8
 23fdea8:	e7f4      	b.n	23fde94 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
 23fdeaa:	1d20      	adds	r0, r4, #4
 23fdeac:	f7fe fb9a 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
 23fdeb0:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fdeb4:	4620      	mov	r0, r4
 23fdeb6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fdeba:	f104 0108 	add.w	r1, r4, #8
 23fdebe:	f7ff ff7f 	bl	23fddc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
 23fdec2:	686b      	ldr	r3, [r5, #4]
 23fdec4:	3b01      	subs	r3, #1
 23fdec6:	606b      	str	r3, [r5, #4]
    return true;
 23fdec8:	e7ec      	b.n	23fdea4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

023fdecc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fdecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fded0:	4605      	mov	r5, r0
 23fded2:	b08f      	sub	sp, #60	; 0x3c
        WiringBleLock lk;
 23fded4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
 23fded6:	460c      	mov	r4, r1
        WiringBleLock lk;
 23fded8:	f7fe fede 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
 23fdedc:	682e      	ldr	r6, [r5, #0]
 23fdede:	1ef3      	subs	r3, r6, #3
 23fdee0:	2b0d      	cmp	r3, #13
 23fdee2:	d86a      	bhi.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fdee4:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fdee8:	0078000e 	.word	0x0078000e
 23fdeec:	00fc0069 	.word	0x00fc0069
 23fdef0:	00690069 	.word	0x00690069
 23fdef4:	00690069 	.word	0x00690069
 23fdef8:	00c60069 	.word	0x00c60069
 23fdefc:	00c600c6 	.word	0x00c600c6
 23fdf00:	00c600c6 	.word	0x00c600c6
        return address_;
 23fdf04:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    impl->peers_.append(impl->connectingPeer_);
 23fdf06:	f104 0618 	add.w	r6, r4, #24
                if (impl->connectingPeer_.impl()->address().isValid()) {
 23fdf0a:	3002      	adds	r0, #2
 23fdf0c:	f7fe fefa 	bl	23fcd04 <_ZNK8particle10BleAddress7isValidEv>
 23fdf10:	b338      	cbz	r0, 23fdf62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x96>
      { return _M_ptr; }
 23fdf12:	4621      	mov	r1, r4
                    impl->connectingPeer_.impl()->connHandle() = event->conn_handle;
 23fdf14:	89aa      	ldrh	r2, [r5, #12]
 23fdf16:	f851 3f24 	ldr.w	r3, [r1, #36]!
 23fdf1a:	a806      	add	r0, sp, #24
 23fdf1c:	801a      	strh	r2, [r3, #0]
 23fdf1e:	f7ff fc46 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    impl->peers_.append(impl->connectingPeer_);
 23fdf22:	a906      	add	r1, sp, #24
 23fdf24:	4630      	mov	r0, r6
 23fdf26:	f7ff ff75 	bl	23fde14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fdf2a:	a807      	add	r0, sp, #28
 23fdf2c:	f7fe fb5a 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                    impl->connectingPeer_ = {};
 23fdf30:	a806      	add	r0, sp, #24
 23fdf32:	f7ff fa55 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fdf36:	9b06      	ldr	r3, [sp, #24]
 23fdf38:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fdf3c:	9907      	ldr	r1, [sp, #28]
 23fdf3e:	6263      	str	r3, [r4, #36]	; 0x24
 23fdf40:	f7fe fe84 	bl	23fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23fdf44:	a807      	add	r0, sp, #28
 23fdf46:	f7fe fb4d 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
 23fdf4a:	2120      	movs	r1, #32
 23fdf4c:	2300      	movs	r3, #0
 23fdf4e:	e9cd 1306 	strd	r1, r3, [sp, #24]
 23fdf52:	4a6d      	ldr	r2, [pc, #436]	; (23fe108 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x23c>)
                    LOG(TRACE, "Disconnected");
 23fdf54:	9200      	str	r2, [sp, #0]
 23fdf56:	2001      	movs	r0, #1
 23fdf58:	496c      	ldr	r1, [pc, #432]	; (23fe10c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fdf5a:	aa06      	add	r2, sp, #24
 23fdf5c:	f7fe f8fc 	bl	23fc158 <log_message>
 23fdf60:	e02b      	b.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    BlePeerDevice peer;
 23fdf62:	a804      	add	r0, sp, #16
 23fdf64:	f7ff fa3c 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
 23fdf68:	89aa      	ldrh	r2, [r5, #12]
 23fdf6a:	9b04      	ldr	r3, [sp, #16]
 23fdf6c:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
 23fdf6e:	6869      	ldr	r1, [r5, #4]
 23fdf70:	9804      	ldr	r0, [sp, #16]
 23fdf72:	3108      	adds	r1, #8
 23fdf74:	3002      	adds	r0, #2
 23fdf76:	f7fe fea9 	bl	23fcccc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
 23fdf7a:	a904      	add	r1, sp, #16
 23fdf7c:	a806      	add	r0, sp, #24
 23fdf7e:	f7ff fc16 	bl	23fd7ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
 23fdf82:	4630      	mov	r0, r6
 23fdf84:	a906      	add	r1, sp, #24
 23fdf86:	f7ff ff45 	bl	23fde14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
 23fdf8a:	4605      	mov	r5, r0
 23fdf8c:	a807      	add	r0, sp, #28
 23fdf8e:	f7fe fb29 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fdf92:	b9c5      	cbnz	r5, 23fdfc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
                        LOG(TRACE, "Failed to append peer Central device.");
 23fdf94:	2320      	movs	r3, #32
 23fdf96:	e9cd 3506 	strd	r3, r5, [sp, #24]
 23fdf9a:	4b5d      	ldr	r3, [pc, #372]	; (23fe110 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x244>)
 23fdf9c:	2001      	movs	r0, #1
 23fdf9e:	495b      	ldr	r1, [pc, #364]	; (23fe10c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x240>)
 23fdfa0:	9300      	str	r3, [sp, #0]
 23fdfa2:	aa06      	add	r2, sp, #24
 23fdfa4:	462b      	mov	r3, r5
 23fdfa6:	f7fe f8d7 	bl	23fc158 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
 23fdfaa:	9b04      	ldr	r3, [sp, #16]
 23fdfac:	4629      	mov	r1, r5
 23fdfae:	8818      	ldrh	r0, [r3, #0]
 23fdfb0:	f7fd ffd6 	bl	23fbf60 <hal_ble_gap_disconnect>
 23fdfb4:	a805      	add	r0, sp, #20
 23fdfb6:	f7fe fb15 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
 23fdfba:	a803      	add	r0, sp, #12
 23fdfbc:	f7fe fe7a 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
 23fdfc0:	b00f      	add	sp, #60	; 0x3c
 23fdfc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    if (impl->connectedCallback_) {
 23fdfc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23fdfc8:	b123      	cbz	r3, 23fdfd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x108>
                        impl->connectedCallback_(peer);
 23fdfca:	a904      	add	r1, sp, #16
 23fdfcc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fdfd0:	f7ff fc2c 	bl	23fd82c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
 23fdfd4:	a805      	add	r0, sp, #20
 23fdfd6:	e7b6      	b.n	23fdf46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fdfd8:	4620      	mov	r0, r4
 23fdfda:	89a9      	ldrh	r1, [r5, #12]
 23fdfdc:	f7ff f913 	bl	23fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fdfe0:	4606      	mov	r6, r0
 23fdfe2:	2800      	cmp	r0, #0
 23fdfe4:	d0e9      	beq.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->disconnectingPeer_ == *peer) {
 23fdfe6:	4601      	mov	r1, r0
 23fdfe8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 23fdfec:	f7ff fa53 	bl	23fd496 <_ZNK8particle13BlePeerDeviceeqERKS0_>
                    impl->peers_.append(impl->connectingPeer_);
 23fdff0:	f104 0818 	add.w	r8, r4, #24
                    if (impl->disconnectingPeer_ == *peer) {
 23fdff4:	b148      	cbz	r0, 23fe00a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
                        impl->peers_.removeOne(*peer);
 23fdff6:	4631      	mov	r1, r6
 23fdff8:	4640      	mov	r0, r8
 23fdffa:	f7ff ff44 	bl	23fde86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
 23fdffe:	2220      	movs	r2, #32
 23fe000:	2300      	movs	r3, #0
 23fe002:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23fe006:	4a43      	ldr	r2, [pc, #268]	; (23fe114 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x248>)
 23fe008:	e7a4      	b.n	23fdf54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x88>
        connHandle_ = BLE_INVALID_CONN_HANDLE;
 23fe00a:	f64f 71ff 	movw	r1, #65535	; 0xffff
      { return _M_ptr; }
 23fe00e:	6835      	ldr	r5, [r6, #0]
    return data_ + size_;
 23fe010:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 23fe014:	8029      	strh	r1, [r5, #0]
 23fe016:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
 23fe01a:	429a      	cmp	r2, r3
 23fe01c:	d003      	beq.n	23fe026 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15a>
 23fe01e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe022:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
 23fe024:	e7f9      	b.n	23fe01a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    destruct(data_, data_ + size_);
 23fe026:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
 23fe02a:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe02e:	45b9      	cmp	r9, r7
 23fe030:	d004      	beq.n	23fe03c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
      ~__shared_ptr() = default;
 23fe032:	1d38      	adds	r0, r7, #4
 23fe034:	f7fe fad6 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe038:	3708      	adds	r7, #8
 23fe03a:	e7f8      	b.n	23fe02e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x162>
    size_ = 0;
 23fe03c:	2300      	movs	r3, #0
 23fe03e:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
 23fe040:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
 23fe044:	eb07 09c3 	add.w	r9, r7, r3, lsl #3
        for (; p != end; ++p) {
 23fe048:	45b9      	cmp	r9, r7
 23fe04a:	d004      	beq.n	23fe056 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x18a>
 23fe04c:	1d38      	adds	r0, r7, #4
 23fe04e:	f7fe fac9 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe052:	3708      	adds	r7, #8
 23fe054:	e7f8      	b.n	23fe048 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17c>
    size_ = 0;
 23fe056:	2300      	movs	r3, #0
 23fe058:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
 23fe05a:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
 23fe05c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 23fe05e:	b123      	cbz	r3, 23fe06a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x19e>
                            impl->disconnectedCallback_(*peer);
 23fe060:	4631      	mov	r1, r6
 23fe062:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe066:	f7ff fbe1 	bl	23fd82c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fe06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23fe06e:	6833      	ldr	r3, [r6, #0]
 23fe070:	801a      	strh	r2, [r3, #0]
 23fe072:	e7c0      	b.n	23fdff6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe074:	4620      	mov	r0, r4
 23fe076:	89a9      	ldrh	r1, [r5, #12]
 23fe078:	f7ff f8c5 	bl	23fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
 23fe07c:	2800      	cmp	r0, #0
 23fe07e:	d09c      	beq.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    if (impl->pairingEventCallback_) {
 23fe080:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 23fe082:	2b00      	cmp	r3, #0
 23fe084:	d099      	beq.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        BlePairingEventPayload payload = {};
 23fe086:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe088:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
 23fe08a:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
 23fe08e:	d001      	beq.n	23fe094 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c8>
 23fe090:	2e10      	cmp	r6, #16
 23fe092:	d117      	bne.n	23fe0c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>
                        BlePairingEventPayload payload = {};
 23fe094:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
 23fe096:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
 23fe098:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
 23fe09a:	2506      	movs	r5, #6
                        };
 23fe09c:	f88d 3015 	strb.w	r3, [sp, #21]
 23fe0a0:	9104      	str	r1, [sp, #16]
 23fe0a2:	ab09      	add	r3, sp, #36	; 0x24
 23fe0a4:	f88d 2014 	strb.w	r2, [sp, #20]
 23fe0a8:	9006      	str	r0, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type),
 23fe0aa:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
 23fe0ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 23fe0b2:	9508      	str	r5, [sp, #32]
 23fe0b4:	e883 0003 	stmia.w	r3, {r0, r1}
 23fe0b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 23fe0ba:	a906      	add	r1, sp, #24
 23fe0bc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe0c0:	4798      	blx	r3
 23fe0c2:	e77a      	b.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
 23fe0c4:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe0c6:	bf01      	itttt	eq
 23fe0c8:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
 23fe0ca:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
 23fe0cc:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe0d0:	2508      	moveq	r5, #8
                        BlePairingEventPayload payload = {};
 23fe0d2:	bf1d      	ittte	ne
 23fe0d4:	461a      	movne	r2, r3
 23fe0d6:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
 23fe0d8:	461d      	movne	r5, r3
                            payload.status.lesc = event->params.pairing_status.lesc;
 23fe0da:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                            payloadLen = sizeof(BlePairingStatus);
 23fe0de:	e7dd      	b.n	23fe09c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1d0>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
 23fe0e0:	89a9      	ldrh	r1, [r5, #12]
 23fe0e2:	4620      	mov	r0, r4
 23fe0e4:	f7ff f88f 	bl	23fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
 23fe0e8:	4601      	mov	r1, r0
 23fe0ea:	2800      	cmp	r0, #0
 23fe0ec:	f43f af65 	beq.w	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe0f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 23fe0f2:	2b00      	cmp	r3, #0
 23fe0f4:	f43f af61 	beq.w	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
 23fe0f8:	686b      	ldr	r3, [r5, #4]
 23fe0fa:	aa06      	add	r2, sp, #24
 23fe0fc:	9306      	str	r3, [sp, #24]
 23fe0fe:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23fe102:	6f23      	ldr	r3, [r4, #112]	; 0x70
 23fe104:	4798      	blx	r3
 23fe106:	e758      	b.n	23fdfba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
 23fe108:	023ffc68 	.word	0x023ffc68
 23fe10c:	023ffb9f 	.word	0x023ffb9f
 23fe110:	023ffc42 	.word	0x023ffc42
 23fe114:	023ffc72 	.word	0x023ffc72

023fe118 <_ZN8particle18BleLocalDeviceImplD1Ev>:
    ~BleLocalDeviceImpl() = default;
 23fe118:	b570      	push	{r4, r5, r6, lr}
 23fe11a:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
 23fe11c:	3064      	adds	r0, #100	; 0x64
 23fe11e:	f7fe fb63 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
 23fe122:	f104 0054 	add.w	r0, r4, #84	; 0x54
 23fe126:	f7fe fb5f 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
 23fe12a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 23fe12e:	f7fe fb5b 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
 23fe132:	f104 0034 	add.w	r0, r4, #52	; 0x34
 23fe136:	f7fe fb57 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
      ~__shared_ptr() = default;
 23fe13a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 23fe13e:	f7fe fa51 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe142:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23fe146:	f7fe fa4d 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    destruct(data_, data_ + size_);
 23fe14a:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
 23fe14e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
 23fe152:	42ae      	cmp	r6, r5
 23fe154:	d004      	beq.n	23fe160 <_ZN8particle18BleLocalDeviceImplD1Ev+0x48>
 23fe156:	1d28      	adds	r0, r5, #4
 23fe158:	f7fe fa44 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe15c:	3508      	adds	r5, #8
 23fe15e:	e7f8      	b.n	23fe152 <_ZN8particle18BleLocalDeviceImplD1Ev+0x3a>
    ::free(ptr);
 23fe160:	69a0      	ldr	r0, [r4, #24]
 23fe162:	f7fe f8f5 	bl	23fc350 <free>
 23fe166:	f104 000c 	add.w	r0, r4, #12
 23fe16a:	f7ff fb43 	bl	23fd7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fe16e:	4620      	mov	r0, r4
 23fe170:	f7ff fb2e 	bl	23fd7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23fe174:	4620      	mov	r0, r4
 23fe176:	bd70      	pop	{r4, r5, r6, pc}

023fe178 <__tcf_0>:
    static BleLocalDevice instance;
 23fe178:	b510      	push	{r4, lr}
	if (__ptr != nullptr)
 23fe17a:	4b06      	ldr	r3, [pc, #24]	; (23fe194 <__tcf_0+0x1c>)
 23fe17c:	681c      	ldr	r4, [r3, #0]
 23fe17e:	b144      	cbz	r4, 23fe192 <__tcf_0+0x1a>
	delete __ptr;
 23fe180:	4620      	mov	r0, r4
 23fe182:	f7ff ffc9 	bl	23fe118 <_ZN8particle18BleLocalDeviceImplD1Ev>
 23fe186:	4620      	mov	r0, r4
 23fe188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe18c:	2174      	movs	r1, #116	; 0x74
 23fe18e:	f7fd bc96 	b.w	23fbabe <_ZdlPvj>
 23fe192:	bd10      	pop	{r4, pc}
 23fe194:	1007aeec 	.word	0x1007aeec

023fe198 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe198:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
 23fe19a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fe19c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe19e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe1a0:	dd05      	ble.n	23fe1ae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
 23fe1a2:	2114      	movs	r1, #20
 23fe1a4:	4369      	muls	r1, r5
 23fe1a6:	f7fe f8e1 	bl	23fc36c <realloc>
            if (!d) {
 23fe1aa:	b918      	cbnz	r0, 23fe1b4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
 23fe1ac:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
 23fe1ae:	f7fe f8cf 	bl	23fc350 <free>
        T* d = nullptr;
 23fe1b2:	2000      	movs	r0, #0
        data_ = d;
 23fe1b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe1b6:	60a5      	str	r5, [r4, #8]
        return true;
 23fe1b8:	2001      	movs	r0, #1
 23fe1ba:	e7f7      	b.n	23fe1ac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

023fe1bc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
 23fe1c0:	2400      	movs	r4, #0
 23fe1c2:	e9c0 4400 	strd	r4, r4, [r0]
 23fe1c6:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe1c8:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe1ca:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe1cc:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe1ce:	42a1      	cmp	r1, r4
 23fe1d0:	dd1c      	ble.n	23fe20c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
 23fe1d2:	f7ff ffe1 	bl	23fe198 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe1d6:	b1c8      	cbz	r0, 23fe20c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x50>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe1d8:	e9d8 9300 	ldrd	r9, r3, [r8]
 23fe1dc:	f04f 0c14 	mov.w	ip, #20
 23fe1e0:	fb0c 9c03 	mla	ip, ip, r3, r9
 23fe1e4:	f8d7 e000 	ldr.w	lr, [r7]
        for (; it != end; ++it, ++dest) {
 23fe1e8:	eb09 0504 	add.w	r5, r9, r4
 23fe1ec:	45ac      	cmp	ip, r5
 23fe1ee:	d00a      	beq.n	23fe206 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4a>
            new(dest) T(*it);
 23fe1f0:	eb1e 0604 	adds.w	r6, lr, r4
 23fe1f4:	bf1e      	ittt	ne
 23fe1f6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
 23fe1f8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
 23fe1fa:	682b      	ldrne	r3, [r5, #0]
 23fe1fc:	f104 0414 	add.w	r4, r4, #20
 23fe200:	bf18      	it	ne
 23fe202:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
 23fe204:	e7f0      	b.n	23fe1e8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
 23fe206:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fe20a:	607b      	str	r3, [r7, #4]
}
 23fe20c:	4638      	mov	r0, r7
 23fe20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fe212:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(size_, vector);
 23fe216:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe218:	6883      	ldr	r3, [r0, #8]
    return insert(i, vector.data_, vector.size_);
 23fe21a:	e9d1 8700 	ldrd	r8, r7, [r1]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe21e:	19e9      	adds	r1, r5, r7
 23fe220:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
 23fe222:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe224:	dc17      	bgt.n	23fe256 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
 23fe226:	2314      	movs	r3, #20
    move(p + n, p, data_ + size_);
 23fe228:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe22a:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
 23fe22c:	fb03 f907 	mul.w	r9, r3, r7
 23fe230:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fe232:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe234:	1b52      	subs	r2, r2, r5
    T* const p = data_ + i;
 23fe236:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe238:	4631      	mov	r1, r6
 23fe23a:	eb06 0009 	add.w	r0, r6, r9
 23fe23e:	f001 fb18 	bl	23ff872 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
 23fe242:	464a      	mov	r2, r9
 23fe244:	4641      	mov	r1, r8
 23fe246:	4630      	mov	r0, r6
 23fe248:	f001 fb06 	bl	23ff858 <memcpy>
    size_ += n;
 23fe24c:	6863      	ldr	r3, [r4, #4]
 23fe24e:	443b      	add	r3, r7
 23fe250:	6063      	str	r3, [r4, #4]
}
 23fe252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
 23fe256:	f7ff ff9f 	bl	23fe198 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe25a:	2800      	cmp	r0, #0
 23fe25c:	d1e3      	bne.n	23fe226 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
 23fe25e:	e7f8      	b.n	23fe252 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

023fe260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe260:	b082      	sub	sp, #8
 23fe262:	b570      	push	{r4, r5, r6, lr}
 23fe264:	460c      	mov	r4, r1
 23fe266:	a904      	add	r1, sp, #16
 23fe268:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe26c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 23fe270:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 23fe272:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe274:	da17      	bge.n	23fe2a6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
 23fe276:	2314      	movs	r3, #20
    move(p + 1, p, data_ + size_);
 23fe278:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
 23fe27a:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
 23fe27e:	435a      	muls	r2, r3
    T* const p = data_ + i;
 23fe280:	682c      	ldr	r4, [r5, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe282:	1a52      	subs	r2, r2, r1
    T* const p = data_ + i;
 23fe284:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe286:	4621      	mov	r1, r4
 23fe288:	18e0      	adds	r0, r4, r3
    new(p) T(std::move(value));
 23fe28a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe28c:	f001 faf1 	bl	23ff872 <memmove>
    new(p) T(std::move(value));
 23fe290:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 23fe292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe294:	6833      	ldr	r3, [r6, #0]
 23fe296:	6023      	str	r3, [r4, #0]
    ++size_;
 23fe298:	686b      	ldr	r3, [r5, #4]
 23fe29a:	3301      	adds	r3, #1
 23fe29c:	606b      	str	r3, [r5, #4]
}
 23fe29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe2a2:	b002      	add	sp, #8
 23fe2a4:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe2a6:	3101      	adds	r1, #1
 23fe2a8:	f7ff ff76 	bl	23fe198 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe2ac:	2800      	cmp	r0, #0
 23fe2ae:	d1e2      	bne.n	23fe276 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
 23fe2b0:	e7f5      	b.n	23fe29e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

023fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fe2b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fe2b6:	2400      	movs	r4, #0
 23fe2b8:	4605      	mov	r5, r0
 23fe2ba:	460f      	mov	r7, r1
 23fe2bc:	4690      	mov	r8, r2
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fe2be:	1e93      	subs	r3, r2, #2
 23fe2c0:	e9c0 4400 	strd	r4, r4, [r0]
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
 23fe2c4:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fe2c6:	b2db      	uxtb	r3, r3
 23fe2c8:	6084      	str	r4, [r0, #8]
 23fe2ca:	9305      	str	r3, [sp, #20]
    return size_;
 23fe2cc:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fe2ce:	428c      	cmp	r4, r1
 23fe2d0:	da72      	bge.n	23fe3b8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
 23fe2d2:	6838      	ldr	r0, [r7, #0]
 23fe2d4:	4642      	mov	r2, r8
 23fe2d6:	ab07      	add	r3, sp, #28
 23fe2d8:	1b09      	subs	r1, r1, r4
 23fe2da:	4420      	add	r0, r4
 23fe2dc:	f7fe fc0e 	bl	23fcafc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
 23fe2e0:	4606      	mov	r6, r0
 23fe2e2:	2800      	cmp	r0, #0
 23fe2e4:	d068      	beq.n	23fe3b8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
 23fe2e6:	9b05      	ldr	r3, [sp, #20]
 23fe2e8:	2b01      	cmp	r3, #1
 23fe2ea:	d82f      	bhi.n	23fe34c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fe2ec:	f04f 0900 	mov.w	r9, #0
 23fe2f0:	f1a0 0b02 	sub.w	fp, r0, #2
 23fe2f4:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
    return insert(size_, std::move(value));
 23fe2f8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fe2fc:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fe2fe:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fe300:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fe302:	d055      	beq.n	23fe3b0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
 23fe304:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
 23fe306:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 23fe30a:	4413      	add	r3, r2
 23fe30c:	78d9      	ldrb	r1, [r3, #3]
 23fe30e:	789b      	ldrb	r3, [r3, #2]
 23fe310:	a808      	add	r0, sp, #32
 23fe312:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 23fe316:	f7fe fdce 	bl	23fceb6 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
 23fe31a:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fe31e:	f10d 0e20 	add.w	lr, sp, #32
 23fe322:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fe326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fe32a:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
 23fe32e:	f109 0901 	add.w	r9, r9, #1
 23fe332:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fe336:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fe33a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fe33e:	ab0d      	add	r3, sp, #52	; 0x34
 23fe340:	4628      	mov	r0, r5
 23fe342:	cb0c      	ldmia	r3, {r2, r3}
 23fe344:	6869      	ldr	r1, [r5, #4]
 23fe346:	f7ff ff8b 	bl	23fe260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fe34a:	e7d7      	b.n	23fe2fc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
 23fe34c:	f1a8 0306 	sub.w	r3, r8, #6
 23fe350:	2b01      	cmp	r3, #1
 23fe352:	d82d      	bhi.n	23fe3b0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fe354:	f04f 0900 	mov.w	r9, #0
 23fe358:	f1a0 0b02 	sub.w	fp, r0, #2
 23fe35c:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 23fe360:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 23fe364:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fe366:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fe368:	d022      	beq.n	23fe3b0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
 23fe36a:	3302      	adds	r3, #2
    return data_[i];
 23fe36c:	6839      	ldr	r1, [r7, #0]
 23fe36e:	4423      	add	r3, r4
 23fe370:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 23fe374:	2201      	movs	r2, #1
 23fe376:	4419      	add	r1, r3
 23fe378:	a808      	add	r0, sp, #32
 23fe37a:	f7fe fd7d 	bl	23fce78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
 23fe37e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fe382:	f10d 0e20 	add.w	lr, sp, #32
 23fe386:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 23fe38a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 23fe38e:	f8de 3000 	ldr.w	r3, [lr]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
 23fe392:	f109 0901 	add.w	r9, r9, #1
 23fe396:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
 23fe39a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 23fe39e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 23fe3a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 23fe3a6:	4628      	mov	r0, r5
 23fe3a8:	6869      	ldr	r1, [r5, #4]
 23fe3aa:	f7ff ff59 	bl	23fe260 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
 23fe3ae:	e7d9      	b.n	23fe364 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
 23fe3b0:	9b07      	ldr	r3, [sp, #28]
 23fe3b2:	441c      	add	r4, r3
 23fe3b4:	4434      	add	r4, r6
 23fe3b6:	e789      	b.n	23fe2cc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
 23fe3b8:	4628      	mov	r0, r5
 23fe3ba:	b013      	add	sp, #76	; 0x4c
 23fe3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe3c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
        capacity_(0) {
 23fe3c0:	2300      	movs	r3, #0
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
 23fe3c2:	b530      	push	{r4, r5, lr}
 23fe3c4:	4604      	mov	r4, r0
 23fe3c6:	460d      	mov	r5, r1
 23fe3c8:	b085      	sub	sp, #20
 23fe3ca:	e9c0 3300 	strd	r3, r3, [r0]
 23fe3ce:	6083      	str	r3, [r0, #8]
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fe3d0:	2202      	movs	r2, #2
 23fe3d2:	a801      	add	r0, sp, #4
 23fe3d4:	f7ff ff6d 	bl	23fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe3d8:	a901      	add	r1, sp, #4
 23fe3da:	4620      	mov	r0, r4
 23fe3dc:	f7ff ff19 	bl	23fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe3e0:	a801      	add	r0, sp, #4
 23fe3e2:	f7ff f94e 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
 23fe3e6:	2202      	movs	r2, #2
 23fe3e8:	4629      	mov	r1, r5
 23fe3ea:	a801      	add	r0, sp, #4
 23fe3ec:	f7ff ff61 	bl	23fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe3f0:	a901      	add	r1, sp, #4
 23fe3f2:	4620      	mov	r0, r4
 23fe3f4:	f7ff ff0d 	bl	23fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe3f8:	a801      	add	r0, sp, #4
 23fe3fa:	f7ff f942 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
 23fe3fe:	2203      	movs	r2, #3
 23fe400:	4629      	mov	r1, r5
 23fe402:	a801      	add	r0, sp, #4
 23fe404:	f7ff ff55 	bl	23fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe408:	a901      	add	r1, sp, #4
 23fe40a:	4620      	mov	r0, r4
 23fe40c:	f7ff ff01 	bl	23fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe410:	a801      	add	r0, sp, #4
 23fe412:	f7ff f936 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
 23fe416:	2206      	movs	r2, #6
 23fe418:	4629      	mov	r1, r5
 23fe41a:	a801      	add	r0, sp, #4
 23fe41c:	f7ff ff49 	bl	23fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe420:	a901      	add	r1, sp, #4
 23fe422:	4620      	mov	r0, r4
 23fe424:	f7ff fef5 	bl	23fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe428:	a801      	add	r0, sp, #4
 23fe42a:	f7ff f92a 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
 23fe42e:	2207      	movs	r2, #7
 23fe430:	4629      	mov	r1, r5
 23fe432:	a801      	add	r0, sp, #4
 23fe434:	f7ff ff3d 	bl	23fe2b2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
 23fe438:	4620      	mov	r0, r4
 23fe43a:	a901      	add	r1, sp, #4
 23fe43c:	f7ff fee9 	bl	23fe212 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
 23fe440:	a801      	add	r0, sp, #4
 23fe442:	f7ff f91e 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fe446:	4620      	mov	r0, r4
 23fe448:	b005      	add	sp, #20
 23fe44a:	bd30      	pop	{r4, r5, pc}

023fe44c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fe44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe450:	b085      	sub	sp, #20
 23fe452:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe454:	4601      	mov	r1, r0
 23fe456:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
 23fe458:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe45a:	f7ff ffb1 	bl	23fe3c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_ + size_;
 23fe45e:	f04f 0e14 	mov.w	lr, #20
 23fe462:	2700      	movs	r7, #0
    return data_;
 23fe464:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
 23fe466:	9b02      	ldr	r3, [sp, #8]
 23fe468:	fb0e 6c03 	mla	ip, lr, r3, r6
    for (const auto& uuid : foundUuids) {
 23fe46c:	45b4      	cmp	ip, r6
 23fe46e:	d00d      	beq.n	23fe48c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
 23fe470:	45b9      	cmp	r9, r7
 23fe472:	f106 0614 	add.w	r6, r6, #20
 23fe476:	d009      	beq.n	23fe48c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
 23fe478:	fb0e 8407 	mla	r4, lr, r7, r8
 23fe47c:	f1a6 0514 	sub.w	r5, r6, #20
 23fe480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe484:	682b      	ldr	r3, [r5, #0]
 23fe486:	3701      	adds	r7, #1
 23fe488:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
 23fe48a:	e7ef      	b.n	23fe46c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
 23fe48c:	a801      	add	r0, sp, #4
 23fe48e:	f7ff f8f8 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
 23fe492:	4638      	mov	r0, r7
 23fe494:	b005      	add	sp, #20
 23fe496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe49a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
 23fe49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe49e:	b08b      	sub	sp, #44	; 0x2c
 23fe4a0:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fe4a2:	f100 0144 	add.w	r1, r0, #68	; 0x44
 23fe4a6:	a801      	add	r0, sp, #4
 23fe4a8:	f7ff fe88 	bl	23fe1bc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
 23fe4ac:	9b02      	ldr	r3, [sp, #8]
 23fe4ae:	2b00      	cmp	r3, #0
 23fe4b0:	dd4a      	ble.n	23fe548 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fe4b2:	f104 0114 	add.w	r1, r4, #20
 23fe4b6:	a804      	add	r0, sp, #16
 23fe4b8:	f7ff ff82 	bl	23fe3c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fe4bc:	f104 0108 	add.w	r1, r4, #8
 23fe4c0:	a807      	add	r0, sp, #28
 23fe4c2:	f7ff ff7d 	bl	23fe3c0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
 23fe4c6:	9d05      	ldr	r5, [sp, #20]
 23fe4c8:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
 23fe4ca:	2d00      	cmp	r5, #0
 23fe4cc:	dc01      	bgt.n	23fe4d2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
 23fe4ce:	2e00      	cmp	r6, #0
 23fe4d0:	dd38      	ble.n	23fe544 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_ + size_;
 23fe4d2:	2314      	movs	r3, #20
    return data_;
 23fe4d4:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
 23fe4d6:	9f02      	ldr	r7, [sp, #8]
 23fe4d8:	4692      	mov	sl, r2
    return data_;
 23fe4da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 23fe4de:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
 23fe4e2:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
 23fe4e6:	fb03 8505 	mla	r5, r3, r5, r8
 23fe4ea:	fb03 9606 	mla	r6, r3, r6, r9
            for (const auto& uuid : filterServiceUuids) {
 23fe4ee:	45ba      	cmp	sl, r7
 23fe4f0:	d028      	beq.n	23fe544 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
 23fe4f2:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
 23fe4f4:	45ab      	cmp	fp, r5
 23fe4f6:	d015      	beq.n	23fe524 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
 23fe4f8:	4659      	mov	r1, fp
 23fe4fa:	4650      	mov	r0, sl
 23fe4fc:	f7fe fce5 	bl	23fceca <_ZNK8particle7BleUuideqERKS0_>
 23fe500:	f10b 0b14 	add.w	fp, fp, #20
 23fe504:	4604      	mov	r4, r0
 23fe506:	2800      	cmp	r0, #0
 23fe508:	d0f4      	beq.n	23fe4f4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
 23fe50a:	a807      	add	r0, sp, #28
 23fe50c:	f7ff f8b9 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
 23fe510:	a804      	add	r0, sp, #16
 23fe512:	f7ff f8b6 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
 23fe516:	a801      	add	r0, sp, #4
 23fe518:	f7ff f8b3 	bl	23fd682 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
 23fe51c:	4620      	mov	r0, r4
 23fe51e:	b00b      	add	sp, #44	; 0x2c
 23fe520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe524:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
 23fe526:	45b3      	cmp	fp, r6
 23fe528:	d009      	beq.n	23fe53e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
 23fe52a:	4659      	mov	r1, fp
 23fe52c:	4650      	mov	r0, sl
 23fe52e:	f7fe fccc 	bl	23fceca <_ZNK8particle7BleUuideqERKS0_>
 23fe532:	f10b 0b14 	add.w	fp, fp, #20
 23fe536:	4604      	mov	r4, r0
 23fe538:	2800      	cmp	r0, #0
 23fe53a:	d0f4      	beq.n	23fe526 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
 23fe53c:	e7e5      	b.n	23fe50a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
 23fe53e:	f10a 0a14 	add.w	sl, sl, #20
 23fe542:	e7d4      	b.n	23fe4ee <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
 23fe544:	2400      	movs	r4, #0
 23fe546:	e7e0      	b.n	23fe50a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
 23fe548:	2401      	movs	r4, #1
 23fe54a:	e7e4      	b.n	23fe516 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

023fe54c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
 23fe54c:	b538      	push	{r3, r4, r5, lr}
 23fe54e:	4605      	mov	r5, r0
 23fe550:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
 23fe552:	f7fe f952 	bl	23fc7fa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe556:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe558:	68a2      	ldr	r2, [r4, #8]
 23fe55a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe55c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe55e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe560:	68e2      	ldr	r2, [r4, #12]
 23fe562:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe564:	60e3      	str	r3, [r4, #12]
      }
 23fe566:	bd38      	pop	{r3, r4, r5, pc}

023fe568 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
    _Function_base() : _M_manager(nullptr) { }
 23fe568:	2300      	movs	r3, #0
      operator=(const function& __x)
 23fe56a:	b530      	push	{r4, r5, lr}
 23fe56c:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
 23fe56e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe570:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
 23fe572:	4605      	mov	r5, r0
 23fe574:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
 23fe576:	b133      	cbz	r3, 23fe586 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe578:	2202      	movs	r2, #2
 23fe57a:	4668      	mov	r0, sp
 23fe57c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe57e:	68e3      	ldr	r3, [r4, #12]
 23fe580:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 23fe582:	68a3      	ldr	r3, [r4, #8]
 23fe584:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
 23fe586:	4629      	mov	r1, r5
 23fe588:	4668      	mov	r0, sp
 23fe58a:	f7ff ffdf 	bl	23fe54c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe58e:	4668      	mov	r0, sp
 23fe590:	f7fe f92a 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
      }
 23fe594:	b005      	add	sp, #20
 23fe596:	bd30      	pop	{r4, r5, pc}

023fe598 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
 23fe598:	b538      	push	{r3, r4, r5, lr}
 23fe59a:	460d      	mov	r5, r1
      { return _M_ptr; }
 23fe59c:	6801      	ldr	r1, [r0, #0]
 23fe59e:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
 23fe5a0:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 23fe5a2:	b123      	cbz	r3, 23fe5ae <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
 23fe5a4:	6828      	ldr	r0, [r5, #0]
 23fe5a6:	314c      	adds	r1, #76	; 0x4c
 23fe5a8:	304c      	adds	r0, #76	; 0x4c
 23fe5aa:	f7ff ffdd 	bl	23fe568 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe5ae:	4620      	mov	r0, r4
 23fe5b0:	682b      	ldr	r3, [r5, #0]
 23fe5b2:	f840 3b04 	str.w	r3, [r0], #4
 23fe5b6:	6869      	ldr	r1, [r5, #4]
 23fe5b8:	f7fe fb48 	bl	23fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
 23fe5bc:	4620      	mov	r0, r4
 23fe5be:	bd38      	pop	{r3, r4, r5, pc}

023fe5c0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fe5c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe5c4:	4604      	mov	r4, r0
 23fe5c6:	b087      	sub	sp, #28
    WiringBleLock lk;
 23fe5c8:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
 23fe5ca:	460e      	mov	r6, r1
 23fe5cc:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fe5ce:	f7fe fb63 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
 23fe5d2:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fe5d4:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fe5d8:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
 23fe5dc:	4544      	cmp	r4, r8
 23fe5de:	46a1      	mov	r9, r4
 23fe5e0:	d016      	beq.n	23fe610 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
 23fe5e2:	4621      	mov	r1, r4
 23fe5e4:	a801      	add	r0, sp, #4
 23fe5e6:	f7fe fe39 	bl	23fd25c <_ZNK8particle17BleCharacteristic4UUIDEv>
 23fe5ea:	4639      	mov	r1, r7
 23fe5ec:	a801      	add	r0, sp, #4
 23fe5ee:	f7fe fc6c 	bl	23fceca <_ZNK8particle7BleUuideqERKS0_>
 23fe5f2:	3408      	adds	r4, #8
 23fe5f4:	4605      	mov	r5, r0
 23fe5f6:	2800      	cmp	r0, #0
 23fe5f8:	d0f0      	beq.n	23fe5dc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
 23fe5fa:	4649      	mov	r1, r9
 23fe5fc:	4630      	mov	r0, r6
 23fe5fe:	f7ff ffcb 	bl	23fe598 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
 23fe602:	4668      	mov	r0, sp
 23fe604:	f7fe fb56 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe608:	4628      	mov	r0, r5
 23fe60a:	b007      	add	sp, #28
 23fe60c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
 23fe610:	2500      	movs	r5, #0
 23fe612:	e7f6      	b.n	23fe602 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

023fe614 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe614:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe616:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
 23fe618:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
 23fe61a:	344c      	adds	r4, #76	; 0x4c
 23fe61c:	b1b9      	cbz	r1, 23fe64e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
 23fe61e:	e9cd 1200 	strd	r1, r2, [sp]
 23fe622:	a802      	add	r0, sp, #8
 23fe624:	4669      	mov	r1, sp
 23fe626:	f7ff f88b 	bl	23fd740 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
 23fe62a:	2300      	movs	r3, #0
	__x.swap(*this);
 23fe62c:	a906      	add	r1, sp, #24
 23fe62e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
 23fe630:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
 23fe632:	f7ff ff8b 	bl	23fe54c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
 23fe636:	4621      	mov	r1, r4
 23fe638:	a806      	add	r0, sp, #24
 23fe63a:	f7ff ff87 	bl	23fe54c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
 23fe63e:	a806      	add	r0, sp, #24
 23fe640:	f7fe f8d2 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
 23fe644:	a802      	add	r0, sp, #8
 23fe646:	f7fe f8cf 	bl	23fc7e8 <_ZNSt14_Function_baseD1Ev>
}
 23fe64a:	b00a      	add	sp, #40	; 0x28
 23fe64c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
 23fe64e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
 23fe650:	e7eb      	b.n	23fe62a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

023fe652 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe652:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe656:	4604      	mov	r4, r0
 23fe658:	460d      	mov	r5, r1
 23fe65a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe65c:	d914      	bls.n	23fe688 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe65e:	4290      	cmp	r0, r2
 23fe660:	d213      	bcs.n	23fe68a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe662:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe666:	1a75      	subs	r5, r6, r1
 23fe668:	f1a1 0708 	sub.w	r7, r1, #8
 23fe66c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe66e:	42b7      	cmp	r7, r6
 23fe670:	d018      	beq.n	23fe6a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe672:	b11c      	cbz	r4, 23fe67c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe674:	4631      	mov	r1, r6
 23fe676:	4620      	mov	r0, r4
 23fe678:	f7ff f88f 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
 23fe67c:	1d30      	adds	r0, r6, #4
 23fe67e:	f7fd ffb1 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe682:	3e08      	subs	r6, #8
 23fe684:	3c08      	subs	r4, #8
 23fe686:	e7f2      	b.n	23fe66e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe688:	d00c      	beq.n	23fe6a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe68a:	42b5      	cmp	r5, r6
 23fe68c:	d00a      	beq.n	23fe6a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe68e:	b11c      	cbz	r4, 23fe698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe690:	4629      	mov	r1, r5
 23fe692:	4620      	mov	r0, r4
 23fe694:	f7ff f881 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe698:	1d28      	adds	r0, r5, #4
 23fe69a:	f7fd ffa3 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe69e:	3508      	adds	r5, #8
 23fe6a0:	3408      	adds	r4, #8
 23fe6a2:	e7f2      	b.n	23fe68a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe6a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe6a6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe6a8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe6aa:	4605      	mov	r5, r0
        if (n > 0) {
 23fe6ac:	dd11      	ble.n	23fe6d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe6ae:	00f0      	lsls	r0, r6, #3
 23fe6b0:	f7fd fe40 	bl	23fc334 <malloc>
            if (!d) {
 23fe6b4:	4604      	mov	r4, r0
 23fe6b6:	b158      	cbz	r0, 23fe6d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe6b8:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe6bc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe6c0:	f7ff ffc7 	bl	23fe652 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe6c4:	6828      	ldr	r0, [r5, #0]
 23fe6c6:	f7fd fe43 	bl	23fc350 <free>
        return true;
 23fe6ca:	2001      	movs	r0, #1
        data_ = d;
 23fe6cc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe6ce:	60ae      	str	r6, [r5, #8]
    }
 23fe6d0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe6d2:	2400      	movs	r4, #0
 23fe6d4:	e7f6      	b.n	23fe6c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fe6d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fe6d6:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fe6dc:	e9c0 3300 	strd	r3, r3, [r0]
 23fe6e0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe6e2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe6e4:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe6e6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe6e8:	4299      	cmp	r1, r3
 23fe6ea:	dd13      	ble.n	23fe714 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fe6ec:	f7ff ffdb 	bl	23fe6a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe6f0:	b180      	cbz	r0, 23fe714 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe6f2:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fe6f6:	6827      	ldr	r7, [r4, #0]
 23fe6f8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fe6fc:	45b0      	cmp	r8, r6
 23fe6fe:	d007      	beq.n	23fe710 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fe700:	b11f      	cbz	r7, 23fe70a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fe702:	4631      	mov	r1, r6
 23fe704:	4638      	mov	r0, r7
 23fe706:	f7ff f848 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
 23fe70a:	3608      	adds	r6, #8
 23fe70c:	3708      	adds	r7, #8
 23fe70e:	e7f5      	b.n	23fe6fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fe710:	686b      	ldr	r3, [r5, #4]
 23fe712:	6063      	str	r3, [r4, #4]
}
 23fe714:	4620      	mov	r0, r4
 23fe716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe71a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
 23fe71a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe71c:	460d      	mov	r5, r1
 23fe71e:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe720:	a801      	add	r0, sp, #4
 23fe722:	f7fe fab9 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
 23fe726:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
 23fe728:	4620      	mov	r0, r4
 23fe72a:	310c      	adds	r1, #12
 23fe72c:	f7ff ffd3 	bl	23fe6d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fe730:	a801      	add	r0, sp, #4
 23fe732:	f7fe fabf 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe736:	4620      	mov	r0, r4
 23fe738:	b003      	add	sp, #12
 23fe73a:	bd30      	pop	{r4, r5, pc}

023fe73c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe73c:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
 23fe73e:	680b      	ldr	r3, [r1, #0]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe740:	4605      	mov	r5, r0
    if (!impl()->servicesDiscovered()) {
 23fe742:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
 23fe744:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
 23fe746:	b933      	cbnz	r3, 23fe756 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
 23fe748:	4608      	mov	r0, r1
 23fe74a:	f7fe fa39 	bl	23fcbc0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
 23fe74e:	b910      	cbnz	r0, 23fe756 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        servicesDiscovered_ = discovered;
 23fe750:	2201      	movs	r2, #1
      { return _M_ptr; }
 23fe752:	6823      	ldr	r3, [r4, #0]
 23fe754:	729a      	strb	r2, [r3, #10]
    return services();
 23fe756:	4628      	mov	r0, r5
 23fe758:	4621      	mov	r1, r4
 23fe75a:	f7ff ffde 	bl	23fe71a <_ZNK8particle13BlePeerDevice8servicesEv>
}
 23fe75e:	4628      	mov	r0, r5
 23fe760:	bd38      	pop	{r3, r4, r5, pc}

023fe762 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe764:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe766:	6845      	ldr	r5, [r0, #4]
 23fe768:	4668      	mov	r0, sp
 23fe76a:	f7ff f816 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe76e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fe772:	4299      	cmp	r1, r3
 23fe774:	da10      	bge.n	23fe798 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fe776:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe778:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe77a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fe77e:	4629      	mov	r1, r5
 23fe780:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe784:	f105 0008 	add.w	r0, r5, #8
 23fe788:	f7ff ff63 	bl	23fe652 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe78c:	b98d      	cbnz	r5, 23fe7b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fe78e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe790:	2601      	movs	r6, #1
    ++size_;
 23fe792:	3301      	adds	r3, #1
 23fe794:	6063      	str	r3, [r4, #4]
    return true;
 23fe796:	e006      	b.n	23fe7a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe798:	4620      	mov	r0, r4
 23fe79a:	3101      	adds	r1, #1
 23fe79c:	f7ff ff83 	bl	23fe6a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe7a0:	4606      	mov	r6, r0
 23fe7a2:	2800      	cmp	r0, #0
 23fe7a4:	d1e7      	bne.n	23fe776 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
 23fe7a6:	a801      	add	r0, sp, #4
 23fe7a8:	f7fd ff1c 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe7ac:	4630      	mov	r0, r6
 23fe7ae:	b002      	add	sp, #8
 23fe7b0:	bd70      	pop	{r4, r5, r6, pc}
 23fe7b2:	4669      	mov	r1, sp
 23fe7b4:	4628      	mov	r0, r5
 23fe7b6:	f7fe fff0 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
 23fe7ba:	e7e8      	b.n	23fe78e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fe7bc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fe7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe7c0:	4605      	mov	r5, r0
 23fe7c2:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
 23fe7c4:	2700      	movs	r7, #0
                LOG(ERROR, "Failed to append discovered service.");
 23fe7c6:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23fe87c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
 23fe7ca:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 23fe880 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
 23fe7ce:	b093      	sub	sp, #76	; 0x4c
        for (size_t i = 0; i < event->count; i++) {
 23fe7d0:	682b      	ldr	r3, [r5, #0]
 23fe7d2:	42bb      	cmp	r3, r7
 23fe7d4:	d94e      	bls.n	23fe874 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
 23fe7d6:	261c      	movs	r6, #28
 23fe7d8:	a803      	add	r0, sp, #12
 23fe7da:	f7fe fde5 	bl	23fd3a8 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
 23fe7de:	f10d 0c14 	add.w	ip, sp, #20
 23fe7e2:	46e3      	mov	fp, ip
 23fe7e4:	437e      	muls	r6, r7
 23fe7e6:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
 23fe7e8:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
 23fe7ea:	4432      	add	r2, r6
 23fe7ec:	1d13      	adds	r3, r2, #4
 23fe7ee:	3214      	adds	r2, #20
 23fe7f0:	46e6      	mov	lr, ip
 23fe7f2:	6818      	ldr	r0, [r3, #0]
 23fe7f4:	6859      	ldr	r1, [r3, #4]
 23fe7f6:	3308      	adds	r3, #8
 23fe7f8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 23fe7fc:	4293      	cmp	r3, r2
 23fe7fe:	46f4      	mov	ip, lr
 23fe800:	d1f6      	bne.n	23fe7f0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
 23fe802:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fe804:	4659      	mov	r1, fp
 23fe806:	f8ce 0000 	str.w	r0, [lr]
 23fe80a:	a80a      	add	r0, sp, #40	; 0x28
 23fe80c:	f7fe fb12 	bl	23fce34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fe810:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 23fe814:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe81a:	f8dc 3000 	ldr.w	r3, [ip]
 23fe81e:	9a03      	ldr	r2, [sp, #12]
 23fe820:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
 23fe822:	686b      	ldr	r3, [r5, #4]
 23fe824:	a903      	add	r1, sp, #12
 23fe826:	4433      	add	r3, r6
 23fe828:	8b1b      	ldrh	r3, [r3, #24]
 23fe82a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
 23fe82c:	686b      	ldr	r3, [r5, #4]
 23fe82e:	4433      	add	r3, r6
 23fe830:	8b5b      	ldrh	r3, [r3, #26]
 23fe832:	82d3      	strh	r3, [r2, #22]
        return services_;
 23fe834:	f8d8 0000 	ldr.w	r0, [r8]
 23fe838:	f100 040c 	add.w	r4, r0, #12
 23fe83c:	a80a      	add	r0, sp, #40	; 0x28
 23fe83e:	f7fe ffac 	bl	23fd79a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
 23fe842:	4620      	mov	r0, r4
 23fe844:	a90a      	add	r1, sp, #40	; 0x28
 23fe846:	f7ff ff8c 	bl	23fe762 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
 23fe84a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fe84c:	a80b      	add	r0, sp, #44	; 0x2c
 23fe84e:	f7fd fec9 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe852:	b954      	cbnz	r4, 23fe86a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
 23fe854:	2320      	movs	r3, #32
 23fe856:	4651      	mov	r1, sl
 23fe858:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 23fe85c:	2032      	movs	r0, #50	; 0x32
 23fe85e:	4623      	mov	r3, r4
 23fe860:	f8cd 9000 	str.w	r9, [sp]
 23fe864:	aa0a      	add	r2, sp, #40	; 0x28
 23fe866:	f7fd fc77 	bl	23fc158 <log_message>
 23fe86a:	a804      	add	r0, sp, #16
 23fe86c:	f7fd feba 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fe870:	3701      	adds	r7, #1
 23fe872:	e7ad      	b.n	23fe7d0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
 23fe874:	b013      	add	sp, #76	; 0x4c
 23fe876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe87a:	bf00      	nop
 23fe87c:	023ffc7f 	.word	0x023ffc7f
 23fe880:	023ffb9f 	.word	0x023ffb9f

023fe884 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fe884:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe888:	4604      	mov	r4, r0
 23fe88a:	460d      	mov	r5, r1
 23fe88c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe88e:	d914      	bls.n	23fe8ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fe890:	4290      	cmp	r0, r2
 23fe892:	d213      	bcs.n	23fe8bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23fe894:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
 23fe898:	1a75      	subs	r5, r6, r1
 23fe89a:	f1a1 0708 	sub.w	r7, r1, #8
 23fe89e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe8a0:	42b7      	cmp	r7, r6
 23fe8a2:	d018      	beq.n	23fe8d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23fe8a4:	b11c      	cbz	r4, 23fe8ae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fe8a6:	4631      	mov	r1, r6
 23fe8a8:	4620      	mov	r0, r4
 23fe8aa:	f7fe ff68 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe8ae:	1d30      	adds	r0, r6, #4
 23fe8b0:	f7fd fe98 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
 23fe8b4:	3e08      	subs	r6, #8
 23fe8b6:	3c08      	subs	r4, #8
 23fe8b8:	e7f2      	b.n	23fe8a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23fe8ba:	d00c      	beq.n	23fe8d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe8bc:	42b5      	cmp	r5, r6
 23fe8be:	d00a      	beq.n	23fe8d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23fe8c0:	b11c      	cbz	r4, 23fe8ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23fe8c2:	4629      	mov	r1, r5
 23fe8c4:	4620      	mov	r0, r4
 23fe8c6:	f7fe ff5a 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe8ca:	1d28      	adds	r0, r5, #4
 23fe8cc:	f7fd fe8a 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe8d0:	3508      	adds	r5, #8
 23fe8d2:	3408      	adds	r4, #8
 23fe8d4:	e7f2      	b.n	23fe8bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23fe8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe8d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fe8d8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe8da:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe8dc:	4605      	mov	r5, r0
        if (n > 0) {
 23fe8de:	dd11      	ble.n	23fe904 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe8e0:	00f0      	lsls	r0, r6, #3
 23fe8e2:	f7fd fd27 	bl	23fc334 <malloc>
            if (!d) {
 23fe8e6:	4604      	mov	r4, r0
 23fe8e8:	b158      	cbz	r0, 23fe902 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe8ea:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe8ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 23fe8f2:	f7ff ffc7 	bl	23fe884 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fe8f6:	6828      	ldr	r0, [r5, #0]
 23fe8f8:	f7fd fd2a 	bl	23fc350 <free>
        return true;
 23fe8fc:	2001      	movs	r0, #1
        data_ = d;
 23fe8fe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe900:	60ae      	str	r6, [r5, #8]
    }
 23fe902:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe904:	2400      	movs	r4, #0
 23fe906:	e7f6      	b.n	23fe8f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fe908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        capacity_(0) {
 23fe908:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fe90e:	e9c0 3300 	strd	r3, r3, [r0]
 23fe912:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe914:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe916:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fe918:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fe91a:	4299      	cmp	r1, r3
 23fe91c:	dd13      	ble.n	23fe946 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
 23fe91e:	f7ff ffdb 	bl	23fe8d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe922:	b180      	cbz	r0, 23fe946 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fe924:	e9d5 6300 	ldrd	r6, r3, [r5]
 23fe928:	6827      	ldr	r7, [r4, #0]
 23fe92a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
 23fe92e:	45b0      	cmp	r8, r6
 23fe930:	d007      	beq.n	23fe942 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
 23fe932:	b11f      	cbz	r7, 23fe93c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
 23fe934:	4631      	mov	r1, r6
 23fe936:	4638      	mov	r0, r7
 23fe938:	f7fe ff21 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
 23fe93c:	3608      	adds	r6, #8
 23fe93e:	3708      	adds	r7, #8
 23fe940:	e7f5      	b.n	23fe92e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
 23fe942:	686b      	ldr	r3, [r5, #4]
 23fe944:	6063      	str	r3, [r4, #4]
}
 23fe946:	4620      	mov	r0, r4
 23fe948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe94c <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
 23fe94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe94e:	460d      	mov	r5, r1
 23fe950:	4604      	mov	r4, r0
    WiringBleLock lk;
 23fe952:	a801      	add	r0, sp, #4
 23fe954:	f7fe f9a0 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
 23fe958:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
 23fe95a:	4620      	mov	r0, r4
 23fe95c:	3118      	adds	r1, #24
 23fe95e:	f7ff ffd3 	bl	23fe908 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
 23fe962:	a801      	add	r0, sp, #4
 23fe964:	f7fe f9a6 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fe968:	4620      	mov	r0, r4
 23fe96a:	b003      	add	sp, #12
 23fe96c:	bd30      	pop	{r4, r5, pc}

023fe96e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe96e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe970:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
 23fe972:	6845      	ldr	r5, [r0, #4]
 23fe974:	4668      	mov	r0, sp
 23fe976:	f7fe ff02 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe97a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fe97e:	4299      	cmp	r1, r3
 23fe980:	da10      	bge.n	23fe9a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
 23fe982:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe984:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe986:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
 23fe98a:	4629      	mov	r1, r5
 23fe98c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 23fe990:	f105 0008 	add.w	r0, r5, #8
 23fe994:	f7ff ff76 	bl	23fe884 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fe998:	b98d      	cbnz	r5, 23fe9be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
 23fe99a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe99c:	2601      	movs	r6, #1
    ++size_;
 23fe99e:	3301      	adds	r3, #1
 23fe9a0:	6063      	str	r3, [r4, #4]
    return true;
 23fe9a2:	e006      	b.n	23fe9b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe9a4:	4620      	mov	r0, r4
 23fe9a6:	3101      	adds	r1, #1
 23fe9a8:	f7ff ff96 	bl	23fe8d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fe9ac:	4606      	mov	r6, r0
 23fe9ae:	2800      	cmp	r0, #0
 23fe9b0:	d1e7      	bne.n	23fe982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
 23fe9b2:	a801      	add	r0, sp, #4
 23fe9b4:	f7fd fe16 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fe9b8:	4630      	mov	r0, r6
 23fe9ba:	b002      	add	sp, #8
 23fe9bc:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fe9be:	4669      	mov	r1, sp
 23fe9c0:	4628      	mov	r0, r5
 23fe9c2:	f7fe fedc 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fe9c6:	e7e8      	b.n	23fe99a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

023fe9c8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fe9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe9ca:	b085      	sub	sp, #20
 23fe9cc:	4605      	mov	r5, r0
    WiringBleLock lk;
 23fe9ce:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
 23fe9d0:	460c      	mov	r4, r1
 23fe9d2:	4617      	mov	r7, r2
    WiringBleLock lk;
 23fe9d4:	f7fe f960 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
 23fe9d8:	2300      	movs	r3, #0
 23fe9da:	e9c5 3300 	strd	r3, r3, [r5]
 23fe9de:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
 23fe9e0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
 23fe9e2:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
 23fe9e6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
 23fe9ea:	42b4      	cmp	r4, r6
 23fe9ec:	d011      	beq.n	23fea12 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
 23fe9ee:	4621      	mov	r1, r4
 23fe9f0:	6838      	ldr	r0, [r7, #0]
 23fe9f2:	f7fe fbf3 	bl	23fd1dc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
 23fe9f6:	b150      	cbz	r0, 23fea0e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
 23fe9f8:	4621      	mov	r1, r4
 23fe9fa:	a802      	add	r0, sp, #8
 23fe9fc:	f7fe febf 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fea00:	4628      	mov	r0, r5
 23fea02:	a902      	add	r1, sp, #8
 23fea04:	f7ff ffb3 	bl	23fe96e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
 23fea08:	a803      	add	r0, sp, #12
 23fea0a:	f7fd fdeb 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
 23fea0e:	3408      	adds	r4, #8
 23fea10:	e7eb      	b.n	23fe9ea <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
 23fea12:	a801      	add	r0, sp, #4
 23fea14:	f7fe f94e 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
 23fea18:	4628      	mov	r0, r5
 23fea1a:	b005      	add	sp, #20
 23fea1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fea20 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fea20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
 23fea24:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fea26:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23fea28:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
 23fea2a:	460f      	mov	r7, r1
 23fea2c:	4690      	mov	r8, r2
 23fea2e:	b091      	sub	sp, #68	; 0x44
    if (!impl()->servicesDiscovered()) {
 23fea30:	b933      	cbnz	r3, 23fea40 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
 23fea32:	e9c0 3300 	strd	r3, r3, [r0]
 23fea36:	6083      	str	r3, [r0, #8]
}
 23fea38:	4630      	mov	r0, r6
 23fea3a:	b011      	add	sp, #68	; 0x44
 23fea3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
 23fea40:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
 23fea42:	7e0d      	ldrb	r5, [r1, #24]
 23fea44:	2d00      	cmp	r5, #0
 23fea46:	d158      	bne.n	23feafa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
 23fea48:	2320      	movs	r3, #32
 23fea4a:	462a      	mov	r2, r5
 23fea4c:	a803      	add	r0, sp, #12
 23fea4e:	e9cd 3508 	strd	r3, r5, [sp, #32]
 23fea52:	f7fe fb36 	bl	23fd0c2 <_ZNK8particle7BleUuid8toStringEb>
 23fea56:	9b03      	ldr	r3, [sp, #12]
 23fea58:	492b      	ldr	r1, [pc, #172]	; (23feb08 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
 23fea5a:	9301      	str	r3, [sp, #4]
 23fea5c:	4b2b      	ldr	r3, [pc, #172]	; (23feb0c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
 23fea5e:	aa08      	add	r2, sp, #32
 23fea60:	2001      	movs	r0, #1
 23fea62:	9300      	str	r3, [sp, #0]
 23fea64:	462b      	mov	r3, r5
 23fea66:	f7fd fb77 	bl	23fc158 <log_message>
 23fea6a:	a803      	add	r0, sp, #12
 23fea6c:	f000 fc0e 	bl	23ff28c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
 23fea70:	231c      	movs	r3, #28
 23fea72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 23fea76:	f8d8 3000 	ldr.w	r3, [r8]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fea7a:	a908      	add	r1, sp, #32
        halService.start_handle = service.impl()->startHandle();
 23fea7c:	8a9a      	ldrh	r2, [r3, #20]
 23fea7e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
 23fea82:	8adb      	ldrh	r3, [r3, #22]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fea84:	4a22      	ldr	r2, [pc, #136]	; (23feb10 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
        halService.end_handle = service.impl()->endHandle();
 23fea86:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 23fea8a:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
 23fea8c:	8818      	ldrh	r0, [r3, #0]
 23fea8e:	9500      	str	r5, [sp, #0]
 23fea90:	f7fd fa90 	bl	23fbfb4 <hal_ble_gatt_client_discover_characteristics>
 23fea94:	2800      	cmp	r0, #0
 23fea96:	db30      	blt.n	23feafa <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
 23fea98:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
 23fea9a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
 23fea9e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
 23feaa2:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
 23feaa4:	f1a4 0308 	sub.w	r3, r4, #8
 23feaa8:	4599      	cmp	r9, r3
 23feaaa:	d022      	beq.n	23feaf2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
 23feaac:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23feab0:	89db      	ldrh	r3, [r3, #14]
 23feab2:	2b00      	cmp	r3, #0
 23feab4:	d0f5      	beq.n	23feaa2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
 23feab6:	2210      	movs	r2, #16
 23feab8:	2100      	movs	r1, #0
 23feaba:	eb0d 0002 	add.w	r0, sp, r2
 23feabe:	9503      	str	r5, [sp, #12]
 23feac0:	f000 fef1 	bl	23ff8a6 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
 23feac4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 23feac8:	aa03      	add	r2, sp, #12
 23feaca:	89d9      	ldrh	r1, [r3, #14]
 23feacc:	683b      	ldr	r3, [r7, #0]
 23feace:	8818      	ldrh	r0, [r3, #0]
 23fead0:	2313      	movs	r3, #19
 23fead2:	9500      	str	r5, [sp, #0]
 23fead4:	f7fd fa98 	bl	23fc008 <hal_ble_gatt_client_read>
                if (len > 0) {
 23fead8:	2800      	cmp	r0, #0
 23feada:	d0e2      	beq.n	23feaa2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
 23feadc:	ab10      	add	r3, sp, #64	; 0x40
 23feade:	4418      	add	r0, r3
 23feae0:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
 23feae4:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
 23feae8:	a903      	add	r1, sp, #12
 23feaea:	303c      	adds	r0, #60	; 0x3c
 23feaec:	f000 fc6f 	bl	23ff3ce <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
 23feaf0:	e7d7      	b.n	23feaa2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
        characteristicsDiscovered_ = discovered;
 23feaf2:	2201      	movs	r2, #1
 23feaf4:	f8d8 3000 	ldr.w	r3, [r8]
 23feaf8:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
 23feafa:	4642      	mov	r2, r8
 23feafc:	4639      	mov	r1, r7
 23feafe:	4630      	mov	r0, r6
 23feb00:	f7ff ff62 	bl	23fe9c8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
 23feb04:	e798      	b.n	23fea38 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
 23feb06:	bf00      	nop
 23feb08:	023ffb9f 	.word	0x023ffb9f
 23feb0c:	023ffca4 	.word	0x023ffca4
 23feb10:	023fecd9 	.word	0x023fecd9

023feb14 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23feb14:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
 23feb16:	680b      	ldr	r3, [r1, #0]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23feb18:	4606      	mov	r6, r0
    if (!impl()->servicesDiscovered()) {
 23feb1a:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
 23feb1c:	460d      	mov	r5, r1
 23feb1e:	b085      	sub	sp, #20
    if (!impl()->servicesDiscovered()) {
 23feb20:	b92b      	cbnz	r3, 23feb2e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
 23feb22:	a801      	add	r0, sp, #4
 23feb24:	f7ff fe0a 	bl	23fe73c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
 23feb28:	a801      	add	r0, sp, #4
 23feb2a:	f7fe fe51 	bl	23fd7d0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
 23feb2e:	682b      	ldr	r3, [r5, #0]
 23feb30:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
 23feb34:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
 23feb38:	42bc      	cmp	r4, r7
 23feb3a:	d009      	beq.n	23feb50 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
 23feb3c:	4622      	mov	r2, r4
 23feb3e:	4629      	mov	r1, r5
 23feb40:	a801      	add	r0, sp, #4
 23feb42:	f7ff ff6d 	bl	23fea20 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
 23feb46:	a801      	add	r0, sp, #4
 23feb48:	f7fe fe54 	bl	23fd7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
 23feb4c:	3408      	adds	r4, #8
 23feb4e:	e7f3      	b.n	23feb38 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
 23feb50:	4630      	mov	r0, r6
 23feb52:	4629      	mov	r1, r5
 23feb54:	f7ff fefa 	bl	23fe94c <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
 23feb58:	4630      	mov	r0, r6
 23feb5a:	b005      	add	sp, #20
 23feb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023feb60 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23feb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    hal_ble_conn_cfg_t connCfg = {};
 23feb64:	f04f 0800 	mov.w	r8, #0
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23feb68:	461f      	mov	r7, r3
    connCfg.version = BLE_API_VERSION;
 23feb6a:	4b4c      	ldr	r3, [pc, #304]	; (23fec9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x13c>)
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
 23feb6c:	b092      	sub	sp, #72	; 0x48
 23feb6e:	4605      	mov	r5, r0
 23feb70:	460c      	mov	r4, r1
    return address_;
 23feb72:	6808      	ldr	r0, [r1, #0]
 23feb74:	6849      	ldr	r1, [r1, #4]
    connCfg.version = BLE_API_VERSION;
 23feb76:	9304      	str	r3, [sp, #16]
    return address_;
 23feb78:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.address = addr.halAddress();
 23feb7a:	ab05      	add	r3, sp, #20
    connCfg.conn_params = params;
 23feb7c:	9207      	str	r2, [sp, #28]
    return address_;
 23feb7e:	c603      	stmia	r6!, {r0, r1}
    connCfg.address = addr.halAddress();
 23feb80:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
 23feb84:	e9cd 8808 	strd	r8, r8, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23feb88:	f7fe fce4 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23feb8c:	4b44      	ldr	r3, [pc, #272]	; (23feca0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x140>)
    connCfg.address = addr.halAddress();
 23feb8e:	ae0a      	add	r6, sp, #40	; 0x28
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
 23feb90:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
 23feb92:	f7fe fcdf 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23feb96:	6803      	ldr	r3, [r0, #0]
    bind(addr);
 23feb98:	4621      	mov	r1, r4
 23feb9a:	4628      	mov	r0, r5
    connCfg.context = BleLocalDevice::getInstance().impl();
 23feb9c:	9309      	str	r3, [sp, #36]	; 0x24
    bind(addr);
 23feb9e:	f7fe fc55 	bl	23fd44c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    BleLocalDevice::getInstance().impl()->connectingPeer() = *this;
 23feba2:	f7fe fcd7 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23feba6:	682b      	ldr	r3, [r5, #0]
 23feba8:	6800      	ldr	r0, [r0, #0]
 23febaa:	6243      	str	r3, [r0, #36]	; 0x24
 23febac:	6869      	ldr	r1, [r5, #4]
 23febae:	3028      	adds	r0, #40	; 0x28
 23febb0:	f7fe f84c 	bl	23fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
 23febb4:	4642      	mov	r2, r8
 23febb6:	6829      	ldr	r1, [r5, #0]
 23febb8:	a804      	add	r0, sp, #16
 23febba:	f7fd fa33 	bl	23fc024 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
 23febbe:	4604      	mov	r4, r0
 23febc0:	b1b8      	cbz	r0, 23febf2 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x92>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23febc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
      { return _M_ptr; }
 23febc6:	682b      	ldr	r3, [r5, #0]
 23febc8:	801a      	strh	r2, [r3, #0]
    SCOPE_GUARD ({
 23febca:	f7fe fcc3 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23febce:	6805      	ldr	r5, [r0, #0]
 23febd0:	4630      	mov	r0, r6
 23febd2:	f7fe fc05 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23febd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23febd8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23febdc:	626b      	str	r3, [r5, #36]	; 0x24
 23febde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23febe0:	f7fe f834 	bl	23fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      ~__shared_ptr() = default;
 23febe4:	a80b      	add	r0, sp, #44	; 0x2c
 23febe6:	f7fd fcfd 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23febea:	4620      	mov	r0, r4
 23febec:	b012      	add	sp, #72	; 0x48
 23febee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        WiringBleLock lk;
 23febf2:	a803      	add	r0, sp, #12
 23febf4:	f7fe f850 	bl	23fcc98 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->findPeerDevice(impl()->connHandle())) {
 23febf8:	f7fe fcac 	bl	23fd554 <_ZN8particle14BleLocalDevice11getInstanceEv>
 23febfc:	682b      	ldr	r3, [r5, #0]
 23febfe:	6800      	ldr	r0, [r0, #0]
 23fec00:	8819      	ldrh	r1, [r3, #0]
 23fec02:	f7fe fb00 	bl	23fd206 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
 23fec06:	f04f 0820 	mov.w	r8, #32
 23fec0a:	bb18      	cbnz	r0, 23fec54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf4>
            LOG(ERROR, "Cannot add new peer device.");
 23fec0c:	4b25      	ldr	r3, [pc, #148]	; (23feca4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x144>)
 23fec0e:	4f26      	ldr	r7, [pc, #152]	; (23feca8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x148>)
 23fec10:	4632      	mov	r2, r6
 23fec12:	4926      	ldr	r1, [pc, #152]	; (23fecac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23fec14:	2032      	movs	r0, #50	; 0x32
 23fec16:	9300      	str	r3, [sp, #0]
 23fec18:	4623      	mov	r3, r4
 23fec1a:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fec1e:	f7fd fa9b 	bl	23fc158 <log_message>
 23fec22:	6838      	ldr	r0, [r7, #0]
 23fec24:	f7fd f964 	bl	23fbef0 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fec28:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
 23fec2a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
 23fec2e:	4621      	mov	r1, r4
 23fec30:	8818      	ldrh	r0, [r3, #0]
 23fec32:	f7fd f995 	bl	23fbf60 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
 23fec36:	6838      	ldr	r0, [r7, #0]
 23fec38:	f7fd f94c 	bl	23fbed4 <os_mutex_recursive_lock>
        locked_ = true;
 23fec3c:	2301      	movs	r3, #1
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fec3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
        locked_ = true;
 23fec42:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
 23fec46:	682b      	ldr	r3, [r5, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fec48:	a803      	add	r0, sp, #12
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
 23fec4a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
 23fec4c:	f7fe f832 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
 23fec50:	4c17      	ldr	r4, [pc, #92]	; (23fecb0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x150>)
 23fec52:	e7ba      	b.n	23febca <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        WiringBleLock lk;
 23fec54:	a803      	add	r0, sp, #12
 23fec56:	f7fe f82d 	bl	23fccb4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
 23fec5a:	4b16      	ldr	r3, [pc, #88]	; (23fecb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x154>)
 23fec5c:	4632      	mov	r2, r6
 23fec5e:	9300      	str	r3, [sp, #0]
 23fec60:	2001      	movs	r0, #1
 23fec62:	4623      	mov	r3, r4
 23fec64:	4911      	ldr	r1, [pc, #68]	; (23fecac <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x14c>)
 23fec66:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
 23fec6a:	f7fd fa75 	bl	23fc158 <log_message>
    if (automatic) {
 23fec6e:	2f00      	cmp	r7, #0
 23fec70:	d0ab      	beq.n	23febca <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fec72:	4629      	mov	r1, r5
 23fec74:	4630      	mov	r0, r6
 23fec76:	f7ff ff4d 	bl	23feb14 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
 23fec7a:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
 23fec7e:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
 23fec82:	42bd      	cmp	r5, r7
 23fec84:	d005      	beq.n	23fec92 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x132>
            characteristic.subscribe(true);
 23fec86:	4628      	mov	r0, r5
 23fec88:	2101      	movs	r1, #1
 23fec8a:	f7fe fb53 	bl	23fd334 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
 23fec8e:	3508      	adds	r5, #8
 23fec90:	e7f7      	b.n	23fec82 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x122>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
 23fec92:	4630      	mov	r0, r6
 23fec94:	f7fe fdae 	bl	23fd7f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
 23fec98:	e797      	b.n	23febca <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x6a>
 23fec9a:	bf00      	nop
 23fec9c:	00180003 	.word	0x00180003
 23feca0:	023fdecd 	.word	0x023fdecd
 23feca4:	023ffcd6 	.word	0x023ffcd6
 23feca8:	1007aee8 	.word	0x1007aee8
 23fecac:	023ffb9f 	.word	0x023ffb9f
 23fecb0:	fffffefc 	.word	0xfffffefc
 23fecb4:	023ffcf2 	.word	0x023ffcf2

023fecb8 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
 23fecb8:	b513      	push	{r0, r1, r4, lr}
 23fecba:	4604      	mov	r4, r0
 23fecbc:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
 23fecc0:	f7fe fb8e 	bl	23fd3e0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
 23fecc4:	2200      	movs	r2, #0
 23fecc6:	4620      	mov	r0, r4
 23fecc8:	9b00      	ldr	r3, [sp, #0]
 23fecca:	9901      	ldr	r1, [sp, #4]
 23feccc:	f7ff ff48 	bl	23feb60 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
 23fecd0:	4620      	mov	r0, r4
 23fecd2:	b002      	add	sp, #8
 23fecd4:	bd10      	pop	{r4, pc}
	...

023fecd8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
 23fecdc:	2320      	movs	r3, #32
 23fecde:	2600      	movs	r6, #0
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fece0:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
 23fece2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
 23fece6:	4b66      	ldr	r3, [pc, #408]	; (23fee80 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fece8:	4605      	mov	r5, r0
        LOG(TRACE, "Characteristic discovered.");
 23fecea:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
 23fecec:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
 23fecee:	4633      	mov	r3, r6
 23fecf0:	2001      	movs	r0, #1
 23fecf2:	4964      	ldr	r1, [pc, #400]	; (23fee84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
 23fecf4:	aa0c      	add	r2, sp, #48	; 0x30
 23fecf6:	f7fd fa2f 	bl	23fc158 <log_message>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fecfa:	f8df 918c 	ldr.w	r9, [pc, #396]	; 23fee88 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
 23fecfe:	f8df 8184 	ldr.w	r8, [pc, #388]	; 23fee84 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fed02:	f8df a188 	ldr.w	sl, [pc, #392]	; 23fee8c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        for (size_t i = 0; i < event->count; i++) {
 23fed06:	682b      	ldr	r3, [r5, #0]
 23fed08:	42b3      	cmp	r3, r6
 23fed0a:	f240 80b5 	bls.w	23fee78 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
 23fed0e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 23fed12:	a803      	add	r0, sp, #12
 23fed14:	fb0b fb06 	mul.w	fp, fp, r6
 23fed18:	f7fe fa86 	bl	23fd228 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
 23fed1c:	a805      	add	r0, sp, #20
 23fed1e:	f7fe fb43 	bl	23fd3a8 <_ZN8particle10BleServiceC1Ev>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
 23fed22:	686b      	ldr	r3, [r5, #4]
 23fed24:	9a03      	ldr	r2, [sp, #12]
 23fed26:	445b      	add	r3, fp
        this->size = halHandles.size;
 23fed28:	8bd9      	ldrh	r1, [r3, #30]
 23fed2a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
 23fed2c:	8c19      	ldrh	r1, [r3, #32]
 23fed2e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
 23fed30:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 23fed32:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
 23fed34:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 23fed36:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
 23fed38:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 23fed3a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
 23fed3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 23fed3e:	8253      	strh	r3, [r2, #18]
 23fed40:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
 23fed44:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
 23fed48:	429a      	cmp	r2, r3
 23fed4a:	d07d      	beq.n	23fee48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
 23fed4c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
 23fed4e:	8ac4      	ldrh	r4, [r0, #22]
 23fed50:	428c      	cmp	r4, r1
 23fed52:	d377      	bcc.n	23fee44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
 23fed54:	8a84      	ldrh	r4, [r0, #20]
 23fed56:	428c      	cmp	r4, r1
 23fed58:	d874      	bhi.n	23fee44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fed5a:	6859      	ldr	r1, [r3, #4]
 23fed5c:	9005      	str	r0, [sp, #20]
 23fed5e:	a806      	add	r0, sp, #24
 23fed60:	f7fd ff74 	bl	23fcc4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
      { return _M_ptr; }
 23fed64:	f8dd e00c 	ldr.w	lr, [sp, #12]
                characteristic.impl()->svcUUID() = service.impl()->UUID();
 23fed68:	f8dd c014 	ldr.w	ip, [sp, #20]
 23fed6c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
 23fed70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fed74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fed76:	f8dc 3000 	ldr.w	r3, [ip]
 23fed7a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
 23fed7c:	892b      	ldrh	r3, [r5, #8]
 23fed7e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
 23fed82:	686b      	ldr	r3, [r5, #4]
 23fed84:	9c03      	ldr	r4, [sp, #12]
 23fed86:	445b      	add	r3, fp
 23fed88:	7e5b      	ldrb	r3, [r3, #25]
 23fed8a:	f013 0f02 	tst.w	r3, #2
 23fed8e:	d16e      	bne.n	23fee6e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
 23fed90:	686b      	ldr	r3, [r5, #4]
 23fed92:	445b      	add	r3, fp
 23fed94:	7e5b      	ldrb	r3, [r3, #25]
 23fed96:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
 23fed98:	bf42      	ittt	mi
 23fed9a:	7923      	ldrbmi	r3, [r4, #4]
 23fed9c:	f043 0304 	orrmi.w	r3, r3, #4
 23feda0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
 23feda2:	686b      	ldr	r3, [r5, #4]
 23feda4:	445b      	add	r3, fp
 23feda6:	7e5b      	ldrb	r3, [r3, #25]
 23feda8:	0719      	lsls	r1, r3, #28
 23fedaa:	bf42      	ittt	mi
 23fedac:	7923      	ldrbmi	r3, [r4, #4]
 23fedae:	f043 0308 	orrmi.w	r3, r3, #8
 23fedb2:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
 23fedb4:	686b      	ldr	r3, [r5, #4]
 23fedb6:	445b      	add	r3, fp
 23fedb8:	7e5b      	ldrb	r3, [r3, #25]
 23fedba:	06da      	lsls	r2, r3, #27
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
 23fedbc:	aa07      	add	r2, sp, #28
 23fedbe:	4696      	mov	lr, r2
    value_ |= flags.value_;
 23fedc0:	bf42      	ittt	mi
 23fedc2:	7923      	ldrbmi	r3, [r4, #4]
 23fedc4:	f043 0310 	orrmi.w	r3, r3, #16
 23fedc8:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
 23fedca:	686b      	ldr	r3, [r5, #4]
 23fedcc:	445b      	add	r3, fp
 23fedce:	7e5b      	ldrb	r3, [r3, #25]
 23fedd0:	069b      	lsls	r3, r3, #26
 23fedd2:	bf42      	ittt	mi
 23fedd4:	7923      	ldrbmi	r3, [r4, #4]
 23fedd6:	f043 0320 	orrmi.w	r3, r3, #32
 23fedda:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
 23feddc:	686b      	ldr	r3, [r5, #4]
 23fedde:	449b      	add	fp, r3
 23fede0:	f10b 0304 	add.w	r3, fp, #4
 23fede4:	f10b 0b14 	add.w	fp, fp, #20
 23fede8:	4694      	mov	ip, r2
 23fedea:	6818      	ldr	r0, [r3, #0]
 23fedec:	6859      	ldr	r1, [r3, #4]
 23fedee:	3308      	adds	r3, #8
 23fedf0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 23fedf4:	455b      	cmp	r3, fp
 23fedf6:	4662      	mov	r2, ip
 23fedf8:	d1f6      	bne.n	23fede8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
 23fedfa:	6818      	ldr	r0, [r3, #0]
        return *this = BleUuid(uuid);
 23fedfc:	4671      	mov	r1, lr
 23fedfe:	f8cc 0000 	str.w	r0, [ip]
 23fee02:	a80c      	add	r0, sp, #48	; 0x30
 23fee04:	f7fe f816 	bl	23fce34 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
 23fee08:	3414      	adds	r4, #20
 23fee0a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 23fee0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fee12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fee14:	f8dc 3000 	ldr.w	r3, [ip]
                if (!peerImpl->characteristics().append(characteristic)) {
 23fee18:	a903      	add	r1, sp, #12
 23fee1a:	6023      	str	r3, [r4, #0]
 23fee1c:	a80c      	add	r0, sp, #48	; 0x30
 23fee1e:	f7fe fcae 	bl	23fd77e <_ZN8particle17BleCharacteristicC1ERKS0_>
 23fee22:	a90c      	add	r1, sp, #48	; 0x30
 23fee24:	f107 0018 	add.w	r0, r7, #24
 23fee28:	f7ff fda1 	bl	23fe96e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
 23fee2c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
 23fee2e:	a80d      	add	r0, sp, #52	; 0x34
 23fee30:	f7fd fbd8 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fee34:	b99c      	cbnz	r4, 23fee5e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fee36:	2320      	movs	r3, #32
 23fee38:	f8cd a000 	str.w	sl, [sp]
 23fee3c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 23fee40:	4623      	mov	r3, r4
 23fee42:	e007      	b.n	23fee54 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
 23fee44:	3308      	adds	r3, #8
 23fee46:	e77f      	b.n	23fed48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
 23fee48:	2420      	movs	r4, #32
 23fee4a:	2300      	movs	r3, #0
 23fee4c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
 23fee50:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
 23fee54:	4641      	mov	r1, r8
 23fee56:	2032      	movs	r0, #50	; 0x32
 23fee58:	aa0c      	add	r2, sp, #48	; 0x30
 23fee5a:	f7fd f97d 	bl	23fc158 <log_message>
 23fee5e:	a806      	add	r0, sp, #24
 23fee60:	f7fd fbc0 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fee64:	a804      	add	r0, sp, #16
 23fee66:	f7fd fbbd 	bl	23fc5e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
 23fee6a:	3601      	adds	r6, #1
 23fee6c:	e74b      	b.n	23fed06 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
 23fee6e:	7923      	ldrb	r3, [r4, #4]
 23fee70:	f043 0302 	orr.w	r3, r3, #2
 23fee74:	7123      	strb	r3, [r4, #4]
 23fee76:	e78b      	b.n	23fed90 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
 23fee78:	b015      	add	sp, #84	; 0x54
 23fee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee7e:	bf00      	nop
 23fee80:	023ffd0f 	.word	0x023ffd0f
 23fee84:	023ffb9f 	.word	0x023ffb9f
 23fee88:	023ffd2a 	.word	0x023ffd2a
 23fee8c:	023ffd59 	.word	0x023ffd59

023fee90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
 23fee90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fee92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fee94:	4604      	mov	r4, r0
 23fee96:	460d      	mov	r5, r1
 23fee98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fee9a:	d914      	bls.n	23feec6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
 23fee9c:	4290      	cmp	r0, r2
 23fee9e:	d213      	bcs.n	23feec8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
 23feea0:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
 23feea4:	1a75      	subs	r5, r6, r1
 23feea6:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
 23feeaa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23feeac:	42b7      	cmp	r7, r6
 23feeae:	d018      	beq.n	23feee2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
 23feeb0:	b11c      	cbz	r4, 23feeba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23feeb2:	4631      	mov	r1, r6
 23feeb4:	4620      	mov	r0, r4
 23feeb6:	f7fe fe93 	bl	23fdbe0 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
 23feeba:	4630      	mov	r0, r6
 23feebc:	f7fe fbb4 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
 23feec0:	3e24      	subs	r6, #36	; 0x24
 23feec2:	3c24      	subs	r4, #36	; 0x24
 23feec4:	e7f2      	b.n	23feeac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
 23feec6:	d00c      	beq.n	23feee2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
 23feec8:	42b5      	cmp	r5, r6
 23feeca:	d00a      	beq.n	23feee2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
 23feecc:	b11c      	cbz	r4, 23feed6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
 23feece:	4629      	mov	r1, r5
 23feed0:	4620      	mov	r0, r4
 23feed2:	f7fe fe85 	bl	23fdbe0 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
 23feed6:	4628      	mov	r0, r5
 23feed8:	f7fe fba6 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
 23feedc:	3524      	adds	r5, #36	; 0x24
 23feede:	3424      	adds	r4, #36	; 0x24
 23feee0:	e7f2      	b.n	23feec8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
 23feee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023feee4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23feee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23feee6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23feee8:	4605      	mov	r5, r0
        if (n > 0) {
 23feeea:	dd13      	ble.n	23fef14 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23feeec:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
 23feeee:	fb07 f006 	mul.w	r0, r7, r6
 23feef2:	f7fd fa1f 	bl	23fc334 <malloc>
            if (!d) {
 23feef6:	4604      	mov	r4, r0
 23feef8:	b158      	cbz	r0, 23fef12 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23feefa:	e9d5 1200 	ldrd	r1, r2, [r5]
 23feefe:	fb07 1202 	mla	r2, r7, r2, r1
 23fef02:	f7ff ffc5 	bl	23fee90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
 23fef06:	6828      	ldr	r0, [r5, #0]
 23fef08:	f7fd fa22 	bl	23fc350 <free>
        return true;
 23fef0c:	2001      	movs	r0, #1
        data_ = d;
 23fef0e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fef10:	60ae      	str	r6, [r5, #8]
    }
 23fef12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23fef14:	2400      	movs	r4, #0
 23fef16:	e7f6      	b.n	23fef06 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

023fef18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
 23fef18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fef1c:	4606      	mov	r6, r0
 23fef1e:	460c      	mov	r4, r1
 23fef20:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
 23fef22:	ad01      	add	r5, sp, #4
 23fef24:	4628      	mov	r0, r5
 23fef26:	f7fd ff6b 	bl	23fce00 <_ZN8particle10BleAddressC1Ev>
 23fef2a:	a803      	add	r0, sp, #12
 23fef2c:	f7fe ff35 	bl	23fdd9a <_ZN8particle18BleAdvertisingDataC1Ev>
 23fef30:	a806      	add	r0, sp, #24
 23fef32:	f7fe ff32 	bl	23fdd9a <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
 23fef36:	6930      	ldr	r0, [r6, #16]
 23fef38:	6971      	ldr	r1, [r6, #20]
 23fef3a:	ab13      	add	r3, sp, #76	; 0x4c
 23fef3c:	c303      	stmia	r3!, {r0, r1}
        rssi_ = value;
 23fef3e:	7833      	ldrb	r3, [r6, #0]
    address_ = addr.address_;
 23fef40:	e885 0003 	stmia.w	r5, {r0, r1}
        scanResponse_.set(buf, len);
 23fef44:	89f2      	ldrh	r2, [r6, #14]
 23fef46:	68b1      	ldr	r1, [r6, #8]
 23fef48:	a806      	add	r0, sp, #24
        rssi_ = value;
 23fef4a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
 23fef4e:	f7fe fe98 	bl	23fdc82 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
 23fef52:	89b2      	ldrh	r2, [r6, #12]
 23fef54:	6871      	ldr	r1, [r6, #4]
 23fef56:	a803      	add	r0, sp, #12
 23fef58:	f7fe fe93 	bl	23fdc82 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
 23fef5c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
 23fef60:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
 23fef62:	2b7f      	cmp	r3, #127	; 0x7f
 23fef64:	d003      	beq.n	23fef6e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
 23fef66:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fef6a:	429a      	cmp	r2, r3
 23fef6c:	db5c      	blt.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
 23fef6e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
 23fef72:	2b7f      	cmp	r3, #127	; 0x7f
 23fef74:	d003      	beq.n	23fef7e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
 23fef76:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
 23fef7a:	429a      	cmp	r2, r3
 23fef7c:	dc54      	bgt.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
 23fef7e:	4638      	mov	r0, r7
 23fef80:	f104 0150 	add.w	r1, r4, #80	; 0x50
 23fef84:	f7fe fcf2 	bl	23fd96c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
 23fef88:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
 23fef8a:	2b00      	cmp	r3, #0
 23fef8c:	dd52      	ble.n	23ff034 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
 23fef8e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
 23fef90:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
 23fef94:	45b1      	cmp	r9, r6
 23fef96:	d050      	beq.n	23ff03a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
 23fef98:	4630      	mov	r0, r6
 23fef9a:	4629      	mov	r1, r5
 23fef9c:	f7fd fea3 	bl	23fcce6 <_ZNK8particle10BleAddresseqERKS0_>
 23fefa0:	3608      	adds	r6, #8
 23fefa2:	4680      	mov	r8, r0
 23fefa4:	2800      	cmp	r0, #0
 23fefa6:	d0f5      	beq.n	23fef94 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
 23fefa8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23fefaa:	f7fd f9d1 	bl	23fc350 <free>
        if (!delegator->filterByRssi(result) ||
 23fefae:	f1b8 0f00 	cmp.w	r8, #0
 23fefb2:	d039      	beq.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
 23fefb4:	4629      	mov	r1, r5
 23fefb6:	4620      	mov	r0, r4
 23fefb8:	f7fe fc9b 	bl	23fd8f2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
 23fefbc:	b3a0      	cbz	r0, 23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
 23fefbe:	4629      	mov	r1, r5
 23fefc0:	4620      	mov	r0, r4
 23fefc2:	f7ff fa6a 	bl	23fe49a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
 23fefc6:	4606      	mov	r6, r0
 23fefc8:	b370      	cbz	r0, 23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
 23fefca:	4638      	mov	r0, r7
 23fefcc:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 23fefd0:	f7fe fd19 	bl	23fda06 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
 23fefd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fefd6:	2b00      	cmp	r3, #0
 23fefd8:	dd12      	ble.n	23ff000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
 23fefda:	a806      	add	r0, sp, #24
 23fefdc:	f7fe f8d2 	bl	23fd184 <_ZNK8particle18BleAdvertisingData10appearanceEv>
 23fefe0:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
 23fefe2:	a803      	add	r0, sp, #12
 23fefe4:	f7fe f8ce 	bl	23fd184 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
 23fefe8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 23fefec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
 23feff0:	429a      	cmp	r2, r3
 23feff2:	d025      	beq.n	23ff040 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
 23feff4:	f833 1b02 	ldrh.w	r1, [r3], #2
 23feff8:	4588      	cmp	r8, r1
 23feffa:	d001      	beq.n	23ff000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
 23feffc:	4288      	cmp	r0, r1
 23feffe:	d1f7      	bne.n	23feff0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
 23ff000:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ff002:	f7fd f9a5 	bl	23fc350 <free>
              !delegator->filterByServiceUUID(result) ||
 23ff006:	b17e      	cbz	r6, 23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
 23ff008:	4629      	mov	r1, r5
 23ff00a:	4620      	mov	r0, r4
 23ff00c:	f7fe fd30 	bl	23fda70 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
 23ff010:	b150      	cbz	r0, 23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
 23ff012:	6a23      	ldr	r3, [r4, #32]
 23ff014:	b1b3      	cbz	r3, 23ff044 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23ff016:	4639      	mov	r1, r7
            delegator->foundCount_++;
 23ff018:	6963      	ldr	r3, [r4, #20]
 23ff01a:	9513      	str	r5, [sp, #76]	; 0x4c
 23ff01c:	3301      	adds	r3, #1
 23ff01e:	6163      	str	r3, [r4, #20]
 23ff020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23ff022:	f104 0018 	add.w	r0, r4, #24
 23ff026:	4798      	blx	r3
            return;
 23ff028:	4628      	mov	r0, r5
 23ff02a:	f7fe fafd 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
    }
 23ff02e:	b01d      	add	sp, #116	; 0x74
 23ff030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
 23ff034:	f04f 0801 	mov.w	r8, #1
 23ff038:	e7b6      	b.n	23fefa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23ff03a:	f04f 0800 	mov.w	r8, #0
 23ff03e:	e7b3      	b.n	23fefa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
 23ff040:	2600      	movs	r6, #0
 23ff042:	e7dd      	b.n	23ff000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
 23ff044:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 23ff048:	f1b8 0f00 	cmp.w	r8, #0
 23ff04c:	d007      	beq.n	23ff05e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
 23ff04e:	6963      	ldr	r3, [r4, #20]
 23ff050:	4629      	mov	r1, r5
 23ff052:	3301      	adds	r3, #1
 23ff054:	6163      	str	r3, [r4, #20]
 23ff056:	f104 0028 	add.w	r0, r4, #40	; 0x28
 23ff05a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23ff05c:	e7e3      	b.n	23ff026 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
 23ff05e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 23ff062:	f1bc 0f00 	cmp.w	ip, #0
 23ff066:	d025      	beq.n	23ff0b4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
 23ff068:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23ff06a:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
 23ff06c:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23ff06e:	4293      	cmp	r3, r2
            delegator->foundCount_++;
 23ff070:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
 23ff072:	d8d9      	bhi.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23ff074:	2224      	movs	r2, #36	; 0x24
 23ff076:	4353      	muls	r3, r2
    address_ = addr.address_;
 23ff078:	462a      	mov	r2, r5
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
 23ff07a:	3b24      	subs	r3, #36	; 0x24
 23ff07c:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
 23ff080:	ca03      	ldmia	r2!, {r0, r1}
 23ff082:	f84c 0003 	str.w	r0, [ip, r3]
 23ff086:	6071      	str	r1, [r6, #4]
class BleScanResult {
 23ff088:	f106 0008 	add.w	r0, r6, #8
 23ff08c:	a903      	add	r1, sp, #12
 23ff08e:	f7fe fdc0 	bl	23fdc12 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23ff092:	a906      	add	r1, sp, #24
 23ff094:	f106 0014 	add.w	r0, r6, #20
 23ff098:	f7fe fdbb 	bl	23fdc12 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
 23ff09c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
 23ff0a0:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
 23ff0a4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23ff0a8:	429a      	cmp	r2, r3
 23ff0aa:	d3bd      	bcc.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
 23ff0ac:	4640      	mov	r0, r8
 23ff0ae:	f7fc ff49 	bl	23fbf44 <hal_ble_gap_stop_scan>
 23ff0b2:	e7b9      	b.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
 23ff0b4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 23ff0b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 23ff0bc:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
 23ff0c0:	a903      	add	r1, sp, #12
 23ff0c2:	a80c      	add	r0, sp, #48	; 0x30
 23ff0c4:	f7fe fd6f 	bl	23fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
 23ff0c8:	a906      	add	r1, sp, #24
 23ff0ca:	a80f      	add	r0, sp, #60	; 0x3c
 23ff0cc:	f7fe fd6b 	bl	23fdba6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
 23ff0d0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    return insert(size_, std::move(value));
 23ff0d4:	4641      	mov	r1, r8
 23ff0d6:	4638      	mov	r0, r7
 23ff0d8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 23ff0dc:	6866      	ldr	r6, [r4, #4]
 23ff0de:	f7fe fd7f 	bl	23fdbe0 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23ff0e2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23ff0e6:	4299      	cmp	r1, r3
 23ff0e8:	da10      	bge.n	23ff10c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
 23ff0ea:	2224      	movs	r2, #36	; 0x24
 23ff0ec:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23ff0ee:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
 23ff0f0:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
 23ff0f4:	fb02 3201 	mla	r2, r2, r1, r3
 23ff0f8:	f106 0024 	add.w	r0, r6, #36	; 0x24
 23ff0fc:	4631      	mov	r1, r6
 23ff0fe:	f7ff fec7 	bl	23fee90 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23ff102:	b986      	cbnz	r6, 23ff126 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
 23ff104:	6863      	ldr	r3, [r4, #4]
 23ff106:	3301      	adds	r3, #1
 23ff108:	6063      	str	r3, [r4, #4]
    return true;
 23ff10a:	e005      	b.n	23ff118 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23ff10c:	4620      	mov	r0, r4
 23ff10e:	3101      	adds	r1, #1
 23ff110:	f7ff fee8 	bl	23feee4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23ff114:	2800      	cmp	r0, #0
 23ff116:	d1e8      	bne.n	23ff0ea <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
 23ff118:	4638      	mov	r0, r7
 23ff11a:	f7fe fa85 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
 23ff11e:	4640      	mov	r0, r8
 23ff120:	f7fe fa82 	bl	23fd628 <_ZN8particle13BleScanResultD1Ev>
 23ff124:	e780      	b.n	23ff028 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
 23ff126:	4639      	mov	r1, r7
 23ff128:	4630      	mov	r0, r6
 23ff12a:	f7fe fd59 	bl	23fdbe0 <_ZN8particle13BleScanResultC1EOS0_>
 23ff12e:	e7e9      	b.n	23ff104 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

023ff130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
 23ff130:	2300      	movs	r3, #0
 23ff132:	4802      	ldr	r0, [pc, #8]	; (23ff13c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23ff134:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
 23ff136:	f7fc bebf 	b.w	23fbeb8 <os_mutex_recursive_create>
 23ff13a:	bf00      	nop
 23ff13c:	1007aee8 	.word	0x1007aee8

023ff140 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff140:	4770      	bx	lr

023ff142 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff142:	7441      	strb	r1, [r0, #17]
}
 23ff144:	4770      	bx	lr

023ff146 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff146:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff148:	7c00      	ldrb	r0, [r0, #16]
 23ff14a:	f7fc fe8b 	bl	23fbe64 <hal_usart_available_data_for_write>
}
 23ff14e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff152:	bd08      	pop	{r3, pc}

023ff154 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff154:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff156:	7c00      	ldrb	r0, [r0, #16]
 23ff158:	f7fc fe3e 	bl	23fbdd8 <hal_usart_available>
}
 23ff15c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff160:	bd08      	pop	{r3, pc}

023ff162 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff162:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff164:	7c00      	ldrb	r0, [r0, #16]
 23ff166:	f7fc fe53 	bl	23fbe10 <hal_usart_peek>
}
 23ff16a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff16e:	bd08      	pop	{r3, pc}

023ff170 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff170:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff172:	7c00      	ldrb	r0, [r0, #16]
 23ff174:	f7fc fe3e 	bl	23fbdf4 <hal_usart_read>
}
 23ff178:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff17c:	bd08      	pop	{r3, pc}

023ff17e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff17e:	7c00      	ldrb	r0, [r0, #16]
 23ff180:	f7fc be54 	b.w	23fbe2c <hal_usart_flush>

023ff184 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff186:	7c45      	ldrb	r5, [r0, #17]
{
 23ff188:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff18a:	b12d      	cbz	r5, 23ff198 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff18c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff18e:	b003      	add	sp, #12
 23ff190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff194:	f7fc be12 	b.w	23fbdbc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff198:	7c00      	ldrb	r0, [r0, #16]
 23ff19a:	9101      	str	r1, [sp, #4]
 23ff19c:	f7fc fe62 	bl	23fbe64 <hal_usart_available_data_for_write>
 23ff1a0:	2800      	cmp	r0, #0
 23ff1a2:	9901      	ldr	r1, [sp, #4]
 23ff1a4:	dcf2      	bgt.n	23ff18c <_ZN11USARTSerial5writeEh+0x8>
}
 23ff1a6:	4628      	mov	r0, r5
 23ff1a8:	b003      	add	sp, #12
 23ff1aa:	bd30      	pop	{r4, r5, pc}

023ff1ac <_ZN11USARTSerialD0Ev>:
 23ff1ac:	b510      	push	{r4, lr}
 23ff1ae:	4604      	mov	r4, r0
 23ff1b0:	2114      	movs	r1, #20
 23ff1b2:	f7fc fc84 	bl	23fbabe <_ZdlPvj>
 23ff1b6:	4620      	mov	r0, r4
 23ff1b8:	bd10      	pop	{r4, pc}
	...

023ff1bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff1bc:	b510      	push	{r4, lr}
 23ff1be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff1c2:	4604      	mov	r4, r0
 23ff1c4:	4608      	mov	r0, r1
 23ff1c6:	4611      	mov	r1, r2
 23ff1c8:	2200      	movs	r2, #0
 23ff1ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff1ce:	4b04      	ldr	r3, [pc, #16]	; (23ff1e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff1d0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff1d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff1d4:	2301      	movs	r3, #1
 23ff1d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff1d8:	f7fc fe52 	bl	23fbe80 <hal_usart_init_ex>
}
 23ff1dc:	4620      	mov	r0, r4
 23ff1de:	bd10      	pop	{r4, pc}
 23ff1e0:	023ffde4 	.word	0x023ffde4

023ff1e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff1e4:	7c00      	ldrb	r0, [r0, #16]
 23ff1e6:	f7fc be2f 	b.w	23fbe48 <hal_usart_is_enabled>
	...

023ff1ec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff1ec:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff1ee:	2000      	movs	r0, #0
 23ff1f0:	4b04      	ldr	r3, [pc, #16]	; (23ff204 <_GLOBAL__sub_I_System+0x18>)
 23ff1f2:	601a      	str	r2, [r3, #0]
 23ff1f4:	4b04      	ldr	r3, [pc, #16]	; (23ff208 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff1f6:	4a05      	ldr	r2, [pc, #20]	; (23ff20c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff1f8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff1fc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff1fe:	f7fd b86f 	b.w	23fc2e0 <set_system_mode>
 23ff202:	bf00      	nop
 23ff204:	1007aefc 	.word	0x1007aefc
 23ff208:	1007aef0 	.word	0x1007aef0
 23ff20c:	ffff0000 	.word	0xffff0000

023ff210 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff210:	2200      	movs	r2, #0
 23ff212:	6840      	ldr	r0, [r0, #4]
 23ff214:	4611      	mov	r1, r2
 23ff216:	f7fd b81d 	b.w	23fc254 <network_listening>

023ff21a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff21a:	2200      	movs	r2, #0
 23ff21c:	6840      	ldr	r0, [r0, #4]
 23ff21e:	4611      	mov	r1, r2
 23ff220:	f7fd b834 	b.w	23fc28c <network_get_listen_timeout>

023ff224 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff224:	2200      	movs	r2, #0
 23ff226:	6840      	ldr	r0, [r0, #4]
 23ff228:	f7fd b822 	b.w	23fc270 <network_set_listen_timeout>

023ff22c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff22c:	2200      	movs	r2, #0
 23ff22e:	6840      	ldr	r0, [r0, #4]
 23ff230:	f081 0101 	eor.w	r1, r1, #1
 23ff234:	f7fd b800 	b.w	23fc238 <network_listen>

023ff238 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff238:	2300      	movs	r3, #0
 23ff23a:	6840      	ldr	r0, [r0, #4]
 23ff23c:	461a      	mov	r2, r3
 23ff23e:	4619      	mov	r1, r3
 23ff240:	f7fc bfec 	b.w	23fc21c <network_off>

023ff244 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff244:	2300      	movs	r3, #0
 23ff246:	6840      	ldr	r0, [r0, #4]
 23ff248:	461a      	mov	r2, r3
 23ff24a:	4619      	mov	r1, r3
 23ff24c:	f7fc bfd8 	b.w	23fc200 <network_on>

023ff250 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23ff250:	2200      	movs	r2, #0
 23ff252:	6840      	ldr	r0, [r0, #4]
 23ff254:	4611      	mov	r1, r2
 23ff256:	f7fc bfc5 	b.w	23fc1e4 <network_ready>

023ff25a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff25a:	2200      	movs	r2, #0
 23ff25c:	6840      	ldr	r0, [r0, #4]
 23ff25e:	4611      	mov	r1, r2
 23ff260:	f7fc bfa4 	b.w	23fc1ac <network_connecting>

023ff264 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff264:	2200      	movs	r2, #0
 23ff266:	2102      	movs	r1, #2
 23ff268:	6840      	ldr	r0, [r0, #4]
 23ff26a:	f7fc bfad 	b.w	23fc1c8 <network_disconnect>

023ff26e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff26e:	2300      	movs	r3, #0
 23ff270:	6840      	ldr	r0, [r0, #4]
 23ff272:	461a      	mov	r2, r3
 23ff274:	f7fc bf8c 	b.w	23fc190 <network_connect>

023ff278 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23ff278:	2203      	movs	r2, #3
 23ff27a:	4b02      	ldr	r3, [pc, #8]	; (23ff284 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff27c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff27e:	4a02      	ldr	r2, [pc, #8]	; (23ff288 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff280:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff282:	4770      	bx	lr
 23ff284:	1007af00 	.word	0x1007af00
 23ff288:	023ffe14 	.word	0x023ffe14

023ff28c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff28c:	b510      	push	{r4, lr}
 23ff28e:	4604      	mov	r4, r0
{
	free(buffer);
 23ff290:	6800      	ldr	r0, [r0, #0]
 23ff292:	f7fd f85d 	bl	23fc350 <free>
}
 23ff296:	4620      	mov	r0, r4
 23ff298:	bd10      	pop	{r4, pc}

023ff29a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff29a:	b510      	push	{r4, lr}
 23ff29c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff29e:	6800      	ldr	r0, [r0, #0]
 23ff2a0:	b108      	cbz	r0, 23ff2a6 <_ZN6String10invalidateEv+0xc>
 23ff2a2:	f7fd f855 	bl	23fc350 <free>
	buffer = NULL;
 23ff2a6:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff2a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff2ac:	6023      	str	r3, [r4, #0]
}
 23ff2ae:	bd10      	pop	{r4, pc}

023ff2b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff2b0:	b538      	push	{r3, r4, r5, lr}
 23ff2b2:	4604      	mov	r4, r0
 23ff2b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff2b6:	6800      	ldr	r0, [r0, #0]
 23ff2b8:	3101      	adds	r1, #1
 23ff2ba:	f7fd f857 	bl	23fc36c <realloc>
	if (newbuffer) {
 23ff2be:	b110      	cbz	r0, 23ff2c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff2c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff2c4:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff2c6:	bd38      	pop	{r3, r4, r5, pc}

023ff2c8 <_ZN6String7reserveEj>:
{
 23ff2c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff2ca:	6803      	ldr	r3, [r0, #0]
{
 23ff2cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff2ce:	b123      	cbz	r3, 23ff2da <_ZN6String7reserveEj+0x12>
 23ff2d0:	6843      	ldr	r3, [r0, #4]
 23ff2d2:	428b      	cmp	r3, r1
 23ff2d4:	d301      	bcc.n	23ff2da <_ZN6String7reserveEj+0x12>
 23ff2d6:	2001      	movs	r0, #1
}
 23ff2d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff2da:	4620      	mov	r0, r4
 23ff2dc:	f7ff ffe8 	bl	23ff2b0 <_ZN6String12changeBufferEj>
 23ff2e0:	2800      	cmp	r0, #0
 23ff2e2:	d0f9      	beq.n	23ff2d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff2e4:	68a3      	ldr	r3, [r4, #8]
 23ff2e6:	2b00      	cmp	r3, #0
 23ff2e8:	d1f5      	bne.n	23ff2d6 <_ZN6String7reserveEj+0xe>
 23ff2ea:	6822      	ldr	r2, [r4, #0]
 23ff2ec:	7013      	strb	r3, [r2, #0]
 23ff2ee:	e7f2      	b.n	23ff2d6 <_ZN6String7reserveEj+0xe>

023ff2f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff2f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff2f4:	4611      	mov	r1, r2
 23ff2f6:	9201      	str	r2, [sp, #4]
{
 23ff2f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff2fa:	f7ff ffe5 	bl	23ff2c8 <_ZN6String7reserveEj>
 23ff2fe:	9a01      	ldr	r2, [sp, #4]
 23ff300:	b928      	cbnz	r0, 23ff30e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff302:	4620      	mov	r0, r4
 23ff304:	f7ff ffc9 	bl	23ff29a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff308:	4620      	mov	r0, r4
 23ff30a:	b003      	add	sp, #12
 23ff30c:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff30e:	4629      	mov	r1, r5
	len = length;
 23ff310:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff312:	6820      	ldr	r0, [r4, #0]
 23ff314:	f000 faa0 	bl	23ff858 <memcpy>
	buffer[len] = 0;
 23ff318:	2100      	movs	r1, #0
 23ff31a:	6822      	ldr	r2, [r4, #0]
 23ff31c:	68a3      	ldr	r3, [r4, #8]
 23ff31e:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff320:	e7f2      	b.n	23ff308 <_ZN6String4copyEPKcj+0x18>

023ff322 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff322:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff324:	b513      	push	{r0, r1, r4, lr}
 23ff326:	4604      	mov	r4, r0
	capacity = 0;
 23ff328:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff32c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff32e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff330:	b141      	cbz	r1, 23ff344 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff332:	4608      	mov	r0, r1
 23ff334:	9101      	str	r1, [sp, #4]
 23ff336:	f7fc fb99 	bl	23fba6c <strlen>
 23ff33a:	9901      	ldr	r1, [sp, #4]
 23ff33c:	4602      	mov	r2, r0
 23ff33e:	4620      	mov	r0, r4
 23ff340:	f7ff ffd6 	bl	23ff2f0 <_ZN6String4copyEPKcj>
}
 23ff344:	4620      	mov	r0, r4
 23ff346:	b002      	add	sp, #8
 23ff348:	bd10      	pop	{r4, pc}

023ff34a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23ff34a:	b538      	push	{r3, r4, r5, lr}
 23ff34c:	4605      	mov	r5, r0
	if (buffer) {
 23ff34e:	6800      	ldr	r0, [r0, #0]
{
 23ff350:	460c      	mov	r4, r1
	if (buffer) {
 23ff352:	b168      	cbz	r0, 23ff370 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 23ff354:	686a      	ldr	r2, [r5, #4]
 23ff356:	688b      	ldr	r3, [r1, #8]
 23ff358:	429a      	cmp	r2, r3
 23ff35a:	d307      	bcc.n	23ff36c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 23ff35c:	6809      	ldr	r1, [r1, #0]
 23ff35e:	f000 fad9 	bl	23ff914 <strcpy>
			len = rhs.len;
 23ff362:	68a3      	ldr	r3, [r4, #8]
 23ff364:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23ff366:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23ff368:	60a3      	str	r3, [r4, #8]
}
 23ff36a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23ff36c:	f7fc fff0 	bl	23fc350 <free>
	buffer = rhs.buffer;
 23ff370:	6823      	ldr	r3, [r4, #0]
 23ff372:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23ff374:	6863      	ldr	r3, [r4, #4]
 23ff376:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23ff378:	68a3      	ldr	r3, [r4, #8]
 23ff37a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23ff37c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23ff37e:	e9c4 3300 	strd	r3, r3, [r4]
 23ff382:	e7f1      	b.n	23ff368 <_ZN6String4moveERS_+0x1e>

023ff384 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23ff384:	2300      	movs	r3, #0
String::String(String &&rval)
 23ff386:	b510      	push	{r4, lr}
 23ff388:	4604      	mov	r4, r0
	capacity = 0;
 23ff38a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff38e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff390:	7303      	strb	r3, [r0, #12]
	move(rval);
 23ff392:	f7ff ffda 	bl	23ff34a <_ZN6String4moveERS_>
}
 23ff396:	4620      	mov	r0, r4
 23ff398:	bd10      	pop	{r4, pc}

023ff39a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23ff39a:	4288      	cmp	r0, r1
{
 23ff39c:	b510      	push	{r4, lr}
 23ff39e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23ff3a0:	d005      	beq.n	23ff3ae <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23ff3a2:	680b      	ldr	r3, [r1, #0]
 23ff3a4:	b12b      	cbz	r3, 23ff3b2 <_ZN6StringaSERKS_+0x18>
 23ff3a6:	688a      	ldr	r2, [r1, #8]
 23ff3a8:	4619      	mov	r1, r3
 23ff3aa:	f7ff ffa1 	bl	23ff2f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff3ae:	4620      	mov	r0, r4
 23ff3b0:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff3b2:	f7ff ff72 	bl	23ff29a <_ZN6String10invalidateEv>
 23ff3b6:	e7fa      	b.n	23ff3ae <_ZN6StringaSERKS_+0x14>

023ff3b8 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23ff3b8:	2300      	movs	r3, #0
String::String(const String &value)
 23ff3ba:	b510      	push	{r4, lr}
 23ff3bc:	4604      	mov	r4, r0
	capacity = 0;
 23ff3be:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff3c2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff3c4:	7303      	strb	r3, [r0, #12]
	*this = value;
 23ff3c6:	f7ff ffe8 	bl	23ff39a <_ZN6StringaSERKS_>
}
 23ff3ca:	4620      	mov	r0, r4
 23ff3cc:	bd10      	pop	{r4, pc}

023ff3ce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23ff3ce:	b513      	push	{r0, r1, r4, lr}
 23ff3d0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23ff3d2:	b159      	cbz	r1, 23ff3ec <_ZN6StringaSEPKc+0x1e>
 23ff3d4:	4608      	mov	r0, r1
 23ff3d6:	9101      	str	r1, [sp, #4]
 23ff3d8:	f7fc fb48 	bl	23fba6c <strlen>
 23ff3dc:	9901      	ldr	r1, [sp, #4]
 23ff3de:	4602      	mov	r2, r0
 23ff3e0:	4620      	mov	r0, r4
 23ff3e2:	f7ff ff85 	bl	23ff2f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff3e6:	4620      	mov	r0, r4
 23ff3e8:	b002      	add	sp, #8
 23ff3ea:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff3ec:	f7ff ff55 	bl	23ff29a <_ZN6String10invalidateEv>
 23ff3f0:	e7f9      	b.n	23ff3e6 <_ZN6StringaSEPKc+0x18>

023ff3f2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff3f2:	b570      	push	{r4, r5, r6, lr}
 23ff3f4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff3f6:	460e      	mov	r6, r1
 23ff3f8:	b909      	cbnz	r1, 23ff3fe <_ZN6String6concatEPKcj+0xc>
 23ff3fa:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff3fc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff3fe:	b16a      	cbz	r2, 23ff41c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff400:	6884      	ldr	r4, [r0, #8]
 23ff402:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff404:	4621      	mov	r1, r4
 23ff406:	f7ff ff5f 	bl	23ff2c8 <_ZN6String7reserveEj>
 23ff40a:	2800      	cmp	r0, #0
 23ff40c:	d0f5      	beq.n	23ff3fa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff40e:	6828      	ldr	r0, [r5, #0]
 23ff410:	68ab      	ldr	r3, [r5, #8]
 23ff412:	4631      	mov	r1, r6
 23ff414:	4418      	add	r0, r3
 23ff416:	f000 fa7d 	bl	23ff914 <strcpy>
	len = newlen;
 23ff41a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff41c:	2001      	movs	r0, #1
 23ff41e:	e7ed      	b.n	23ff3fc <_ZN6String6concatEPKcj+0xa>

023ff420 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 23ff420:	2300      	movs	r3, #0
{
 23ff422:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 23ff424:	2201      	movs	r2, #1
	buf[0] = c;
 23ff426:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 23ff42a:	a901      	add	r1, sp, #4
	buf[1] = 0;
 23ff42c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 23ff430:	f7ff ffdf 	bl	23ff3f2 <_ZN6String6concatEPKcj>
}
 23ff434:	b003      	add	sp, #12
 23ff436:	f85d fb04 	ldr.w	pc, [sp], #4

023ff43a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
 23ff43a:	6802      	ldr	r2, [r0, #0]
{
 23ff43c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 23ff43e:	6809      	ldr	r1, [r1, #0]
 23ff440:	b162      	cbz	r2, 23ff45c <_ZNK6String9compareToERKS_+0x22>
 23ff442:	b941      	cbnz	r1, 23ff456 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 23ff444:	6880      	ldr	r0, [r0, #8]
 23ff446:	b160      	cbz	r0, 23ff462 <_ZNK6String9compareToERKS_+0x28>
 23ff448:	7810      	ldrb	r0, [r2, #0]
 23ff44a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff44c:	6898      	ldr	r0, [r3, #8]
 23ff44e:	b140      	cbz	r0, 23ff462 <_ZNK6String9compareToERKS_+0x28>
 23ff450:	7809      	ldrb	r1, [r1, #0]
 23ff452:	4248      	negs	r0, r1
 23ff454:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 23ff456:	4610      	mov	r0, r2
 23ff458:	f7fc bafe 	b.w	23fba58 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 23ff45c:	2900      	cmp	r1, #0
 23ff45e:	d1f5      	bne.n	23ff44c <_ZNK6String9compareToERKS_+0x12>
		return 0;
 23ff460:	4608      	mov	r0, r1
}
 23ff462:	4770      	bx	lr

023ff464 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 23ff464:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 23ff466:	6882      	ldr	r2, [r0, #8]
 23ff468:	688b      	ldr	r3, [r1, #8]
 23ff46a:	429a      	cmp	r2, r3
 23ff46c:	d105      	bne.n	23ff47a <_ZNK6String6equalsERKS_+0x16>
 23ff46e:	f7ff ffe4 	bl	23ff43a <_ZNK6String9compareToERKS_>
 23ff472:	fab0 f080 	clz	r0, r0
 23ff476:	0940      	lsrs	r0, r0, #5
}
 23ff478:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 23ff47a:	2000      	movs	r0, #0
 23ff47c:	e7fc      	b.n	23ff478 <_ZNK6String6equalsERKS_+0x14>

023ff47e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff47e:	4770      	bx	lr

023ff480 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff480:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff482:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff484:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff486:	462a      	mov	r2, r5
 23ff488:	2100      	movs	r1, #0
 23ff48a:	f000 fa0c 	bl	23ff8a6 <memset>
 23ff48e:	8025      	strh	r5, [r4, #0]
 23ff490:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff492:	4907      	ldr	r1, [pc, #28]	; (23ff4b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff494:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff496:	8125      	strh	r5, [r4, #8]
 23ff498:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff49a:	f000 f8af 	bl	23ff5fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff49e:	4904      	ldr	r1, [pc, #16]	; (23ff4b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff4a0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff4a2:	4628      	mov	r0, r5
 23ff4a4:	f000 f8aa 	bl	23ff5fc <_ZnajRKSt9nothrow_t>
    };
 23ff4a8:	60e0      	str	r0, [r4, #12]
}
 23ff4aa:	4620      	mov	r0, r4
 23ff4ac:	bd38      	pop	{r3, r4, r5, pc}
 23ff4ae:	bf00      	nop
 23ff4b0:	023ffe48 	.word	0x023ffe48

023ff4b4 <__tcf_2>:
 23ff4b4:	4770      	bx	lr

023ff4b6 <__tcf_1>:
 23ff4b6:	4770      	bx	lr

023ff4b8 <_Z20acquireSerial1Bufferv>:
{
 23ff4b8:	b510      	push	{r4, lr}
 23ff4ba:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff4bc:	f7ff ffe0 	bl	23ff480 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff4c0:	4620      	mov	r0, r4
 23ff4c2:	bd10      	pop	{r4, pc}

023ff4c4 <_Z20acquireSerial2Bufferv>:
 23ff4c4:	b510      	push	{r4, lr}
 23ff4c6:	4604      	mov	r4, r0
 23ff4c8:	f7ff ffda 	bl	23ff480 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff4cc:	4620      	mov	r0, r4
 23ff4ce:	bd10      	pop	{r4, pc}

023ff4d0 <_Z20acquireSerial3Bufferv>:
 23ff4d0:	b510      	push	{r4, lr}
 23ff4d2:	4604      	mov	r4, r0
 23ff4d4:	f7ff ffd4 	bl	23ff480 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff4d8:	4620      	mov	r0, r4
 23ff4da:	bd10      	pop	{r4, pc}

023ff4dc <_Z22__fetch_global_Serial1v>:
{
 23ff4dc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff4de:	4d0e      	ldr	r5, [pc, #56]	; (23ff518 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff4e0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff4e2:	e8d5 1f8f 	ldab	r1, [r5]
 23ff4e6:	f011 0401 	ands.w	r4, r1, #1
 23ff4ea:	d111      	bne.n	23ff510 <_Z22__fetch_global_Serial1v+0x34>
 23ff4ec:	4628      	mov	r0, r5
 23ff4ee:	f7fc fae8 	bl	23fbac2 <__cxa_guard_acquire>
 23ff4f2:	b168      	cbz	r0, 23ff510 <_Z22__fetch_global_Serial1v+0x34>
 23ff4f4:	a801      	add	r0, sp, #4
 23ff4f6:	f7ff ffdf 	bl	23ff4b8 <_Z20acquireSerial1Bufferv>
 23ff4fa:	4621      	mov	r1, r4
 23ff4fc:	aa01      	add	r2, sp, #4
 23ff4fe:	4807      	ldr	r0, [pc, #28]	; (23ff51c <_Z22__fetch_global_Serial1v+0x40>)
 23ff500:	f7ff fe5c 	bl	23ff1bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff504:	4628      	mov	r0, r5
 23ff506:	f7fc fae1 	bl	23fbacc <__cxa_guard_release>
 23ff50a:	4805      	ldr	r0, [pc, #20]	; (23ff520 <_Z22__fetch_global_Serial1v+0x44>)
 23ff50c:	f000 f98e 	bl	23ff82c <atexit>
    return serial1;
}
 23ff510:	4802      	ldr	r0, [pc, #8]	; (23ff51c <_Z22__fetch_global_Serial1v+0x40>)
 23ff512:	b007      	add	sp, #28
 23ff514:	bd30      	pop	{r4, r5, pc}
 23ff516:	bf00      	nop
 23ff518:	1007af0c 	.word	0x1007af0c
 23ff51c:	1007af18 	.word	0x1007af18
 23ff520:	023ff47f 	.word	0x023ff47f

023ff524 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff524:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff526:	4c0d      	ldr	r4, [pc, #52]	; (23ff55c <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff528:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff52a:	e8d4 3f8f 	ldab	r3, [r4]
 23ff52e:	07db      	lsls	r3, r3, #31
 23ff530:	d411      	bmi.n	23ff556 <_Z22__fetch_global_Serial2v+0x32>
 23ff532:	4620      	mov	r0, r4
 23ff534:	f7fc fac5 	bl	23fbac2 <__cxa_guard_acquire>
 23ff538:	b168      	cbz	r0, 23ff556 <_Z22__fetch_global_Serial2v+0x32>
 23ff53a:	a801      	add	r0, sp, #4
 23ff53c:	f7ff ffc2 	bl	23ff4c4 <_Z20acquireSerial2Bufferv>
 23ff540:	2101      	movs	r1, #1
 23ff542:	aa01      	add	r2, sp, #4
 23ff544:	4806      	ldr	r0, [pc, #24]	; (23ff560 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff546:	f7ff fe39 	bl	23ff1bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff54a:	4620      	mov	r0, r4
 23ff54c:	f7fc fabe 	bl	23fbacc <__cxa_guard_release>
 23ff550:	4804      	ldr	r0, [pc, #16]	; (23ff564 <_Z22__fetch_global_Serial2v+0x40>)
 23ff552:	f000 f96b 	bl	23ff82c <atexit>
	return serial2;
}
 23ff556:	4802      	ldr	r0, [pc, #8]	; (23ff560 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff558:	b006      	add	sp, #24
 23ff55a:	bd10      	pop	{r4, pc}
 23ff55c:	1007af10 	.word	0x1007af10
 23ff560:	1007af2c 	.word	0x1007af2c
 23ff564:	023ff4b7 	.word	0x023ff4b7

023ff568 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff568:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff56a:	f7ff ffdb 	bl	23ff524 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff56e:	4b07      	ldr	r3, [pc, #28]	; (23ff58c <_Z15serialEventRun2v+0x24>)
 23ff570:	4604      	mov	r4, r0
 23ff572:	b153      	cbz	r3, 23ff58a <_Z15serialEventRun2v+0x22>
 23ff574:	f7ff fe36 	bl	23ff1e4 <_ZN11USARTSerial9isEnabledEv>
 23ff578:	b138      	cbz	r0, 23ff58a <_Z15serialEventRun2v+0x22>
 23ff57a:	6823      	ldr	r3, [r4, #0]
 23ff57c:	4620      	mov	r0, r4
 23ff57e:	691b      	ldr	r3, [r3, #16]
 23ff580:	4798      	blx	r3
 23ff582:	2800      	cmp	r0, #0
 23ff584:	dd01      	ble.n	23ff58a <_Z15serialEventRun2v+0x22>
        handler();
 23ff586:	e000      	b.n	23ff58a <_Z15serialEventRun2v+0x22>
 23ff588:	bf00      	nop
}
 23ff58a:	bd10      	pop	{r4, pc}
 23ff58c:	00000000 	.word	0x00000000

023ff590 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff590:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff592:	4c0d      	ldr	r4, [pc, #52]	; (23ff5c8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff594:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff596:	e8d4 3f8f 	ldab	r3, [r4]
 23ff59a:	07db      	lsls	r3, r3, #31
 23ff59c:	d411      	bmi.n	23ff5c2 <_Z22__fetch_global_Serial3v+0x32>
 23ff59e:	4620      	mov	r0, r4
 23ff5a0:	f7fc fa8f 	bl	23fbac2 <__cxa_guard_acquire>
 23ff5a4:	b168      	cbz	r0, 23ff5c2 <_Z22__fetch_global_Serial3v+0x32>
 23ff5a6:	a801      	add	r0, sp, #4
 23ff5a8:	f7ff ff92 	bl	23ff4d0 <_Z20acquireSerial3Bufferv>
 23ff5ac:	2102      	movs	r1, #2
 23ff5ae:	aa01      	add	r2, sp, #4
 23ff5b0:	4806      	ldr	r0, [pc, #24]	; (23ff5cc <_Z22__fetch_global_Serial3v+0x3c>)
 23ff5b2:	f7ff fe03 	bl	23ff1bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff5b6:	4620      	mov	r0, r4
 23ff5b8:	f7fc fa88 	bl	23fbacc <__cxa_guard_release>
 23ff5bc:	4804      	ldr	r0, [pc, #16]	; (23ff5d0 <_Z22__fetch_global_Serial3v+0x40>)
 23ff5be:	f000 f935 	bl	23ff82c <atexit>
	return serial3;
}
 23ff5c2:	4802      	ldr	r0, [pc, #8]	; (23ff5cc <_Z22__fetch_global_Serial3v+0x3c>)
 23ff5c4:	b006      	add	sp, #24
 23ff5c6:	bd10      	pop	{r4, pc}
 23ff5c8:	1007af14 	.word	0x1007af14
 23ff5cc:	1007af40 	.word	0x1007af40
 23ff5d0:	023ff4b5 	.word	0x023ff4b5

023ff5d4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff5d4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff5d6:	f7ff ffdb 	bl	23ff590 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff5da:	4b07      	ldr	r3, [pc, #28]	; (23ff5f8 <_Z15serialEventRun3v+0x24>)
 23ff5dc:	4604      	mov	r4, r0
 23ff5de:	b153      	cbz	r3, 23ff5f6 <_Z15serialEventRun3v+0x22>
 23ff5e0:	f7ff fe00 	bl	23ff1e4 <_ZN11USARTSerial9isEnabledEv>
 23ff5e4:	b138      	cbz	r0, 23ff5f6 <_Z15serialEventRun3v+0x22>
 23ff5e6:	6823      	ldr	r3, [r4, #0]
 23ff5e8:	4620      	mov	r0, r4
 23ff5ea:	691b      	ldr	r3, [r3, #16]
 23ff5ec:	4798      	blx	r3
 23ff5ee:	2800      	cmp	r0, #0
 23ff5f0:	dd01      	ble.n	23ff5f6 <_Z15serialEventRun3v+0x22>
        handler();
 23ff5f2:	e000      	b.n	23ff5f6 <_Z15serialEventRun3v+0x22>
 23ff5f4:	bf00      	nop
}
 23ff5f6:	bd10      	pop	{r4, pc}
 23ff5f8:	00000000 	.word	0x00000000

023ff5fc <_ZnajRKSt9nothrow_t>:
 23ff5fc:	f7fc ba5d 	b.w	23fbaba <_Znaj>

023ff600 <_ZSt25__throw_bad_function_callv>:
 23ff600:	b508      	push	{r3, lr}
 23ff602:	f7fc fec1 	bl	23fc388 <abort>
	...

023ff608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23ff608:	4901      	ldr	r1, [pc, #4]	; (23ff610 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23ff60a:	f000 b8f9 	b.w	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff60e:	bf00      	nop
 23ff610:	023ffe64 	.word	0x023ffe64

023ff614 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23ff614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23ff616:	2400      	movs	r4, #0
 23ff618:	2310      	movs	r3, #16
 23ff61a:	4615      	mov	r5, r2
 23ff61c:	6812      	ldr	r2, [r2, #0]
 23ff61e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23ff622:	6803      	ldr	r3, [r0, #0]
 23ff624:	e9cd 4400 	strd	r4, r4, [sp]
 23ff628:	699e      	ldr	r6, [r3, #24]
 23ff62a:	466b      	mov	r3, sp
 23ff62c:	47b0      	blx	r6
 23ff62e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23ff632:	f003 0306 	and.w	r3, r3, #6
 23ff636:	2b06      	cmp	r3, #6
 23ff638:	bf05      	ittet	eq
 23ff63a:	9b00      	ldreq	r3, [sp, #0]
 23ff63c:	2001      	moveq	r0, #1
 23ff63e:	4620      	movne	r0, r4
 23ff640:	602b      	streq	r3, [r5, #0]
 23ff642:	b004      	add	sp, #16
 23ff644:	bd70      	pop	{r4, r5, r6, pc}

023ff646 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23ff646:	9800      	ldr	r0, [sp, #0]
 23ff648:	4290      	cmp	r0, r2
 23ff64a:	bf14      	ite	ne
 23ff64c:	2001      	movne	r0, #1
 23ff64e:	2006      	moveq	r0, #6
 23ff650:	4770      	bx	lr
	...

023ff654 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23ff654:	4b03      	ldr	r3, [pc, #12]	; (23ff664 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23ff656:	b510      	push	{r4, lr}
 23ff658:	4604      	mov	r4, r0
 23ff65a:	6003      	str	r3, [r0, #0]
 23ff65c:	f000 f8cd 	bl	23ff7fa <_ZNSt9type_infoD1Ev>
 23ff660:	4620      	mov	r0, r4
 23ff662:	bd10      	pop	{r4, pc}
 23ff664:	023ffea4 	.word	0x023ffea4

023ff668 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23ff668:	b510      	push	{r4, lr}
 23ff66a:	4604      	mov	r4, r0
 23ff66c:	f7ff fff2 	bl	23ff654 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff670:	2108      	movs	r1, #8
 23ff672:	4620      	mov	r0, r4
 23ff674:	f7fc fa23 	bl	23fbabe <_ZdlPvj>
 23ff678:	4620      	mov	r0, r4
 23ff67a:	bd10      	pop	{r4, pc}

023ff67c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23ff67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff680:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23ff684:	461f      	mov	r7, r3
 23ff686:	4606      	mov	r6, r0
 23ff688:	4615      	mov	r5, r2
 23ff68a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23ff68e:	4598      	cmp	r8, r3
 23ff690:	d107      	bne.n	23ff6a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff692:	9907      	ldr	r1, [sp, #28]
 23ff694:	f000 f8b4 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff698:	b118      	cbz	r0, 23ff6a2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23ff69a:	7165      	strb	r5, [r4, #5]
 23ff69c:	2000      	movs	r0, #0
 23ff69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff6a2:	4639      	mov	r1, r7
 23ff6a4:	4630      	mov	r0, r6
 23ff6a6:	f000 f8ab 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff6aa:	2800      	cmp	r0, #0
 23ff6ac:	d0f6      	beq.n	23ff69c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23ff6ae:	2301      	movs	r3, #1
 23ff6b0:	f8c4 8000 	str.w	r8, [r4]
 23ff6b4:	7125      	strb	r5, [r4, #4]
 23ff6b6:	71a3      	strb	r3, [r4, #6]
 23ff6b8:	e7f0      	b.n	23ff69c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023ff6ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23ff6ba:	b538      	push	{r3, r4, r5, lr}
 23ff6bc:	4615      	mov	r5, r2
 23ff6be:	461c      	mov	r4, r3
 23ff6c0:	f000 f89e 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff6c4:	b120      	cbz	r0, 23ff6d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23ff6c6:	2308      	movs	r3, #8
 23ff6c8:	6025      	str	r5, [r4, #0]
 23ff6ca:	60e3      	str	r3, [r4, #12]
 23ff6cc:	2306      	movs	r3, #6
 23ff6ce:	7123      	strb	r3, [r4, #4]
 23ff6d0:	bd38      	pop	{r3, r4, r5, pc}

023ff6d2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23ff6d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23ff6d4:	4605      	mov	r5, r0
 23ff6d6:	460c      	mov	r4, r1
 23ff6d8:	461e      	mov	r6, r3
 23ff6da:	9201      	str	r2, [sp, #4]
 23ff6dc:	f000 f890 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff6e0:	b950      	cbnz	r0, 23ff6f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff6e2:	2e03      	cmp	r6, #3
 23ff6e4:	d808      	bhi.n	23ff6f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23ff6e6:	6823      	ldr	r3, [r4, #0]
 23ff6e8:	4629      	mov	r1, r5
 23ff6ea:	9a01      	ldr	r2, [sp, #4]
 23ff6ec:	4620      	mov	r0, r4
 23ff6ee:	695b      	ldr	r3, [r3, #20]
 23ff6f0:	b002      	add	sp, #8
 23ff6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23ff6f6:	4718      	bx	r3
 23ff6f8:	b002      	add	sp, #8
 23ff6fa:	bd70      	pop	{r4, r5, r6, pc}

023ff6fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23ff6fc:	4b03      	ldr	r3, [pc, #12]	; (23ff70c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23ff6fe:	b510      	push	{r4, lr}
 23ff700:	4604      	mov	r4, r0
 23ff702:	6003      	str	r3, [r0, #0]
 23ff704:	f7ff ffa6 	bl	23ff654 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23ff708:	4620      	mov	r0, r4
 23ff70a:	bd10      	pop	{r4, pc}
 23ff70c:	023fff04 	.word	0x023fff04

023ff710 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23ff710:	b510      	push	{r4, lr}
 23ff712:	4604      	mov	r4, r0
 23ff714:	f7ff fff2 	bl	23ff6fc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23ff718:	210c      	movs	r1, #12
 23ff71a:	4620      	mov	r0, r4
 23ff71c:	f7fc f9cf 	bl	23fbabe <_ZdlPvj>
 23ff720:	4620      	mov	r0, r4
 23ff722:	bd10      	pop	{r4, pc}

023ff724 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23ff724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ff726:	9f08      	ldr	r7, [sp, #32]
 23ff728:	4605      	mov	r5, r0
 23ff72a:	460e      	mov	r6, r1
 23ff72c:	4614      	mov	r4, r2
 23ff72e:	4297      	cmp	r7, r2
 23ff730:	d00a      	beq.n	23ff748 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23ff732:	68a8      	ldr	r0, [r5, #8]
 23ff734:	4631      	mov	r1, r6
 23ff736:	6802      	ldr	r2, [r0, #0]
 23ff738:	9708      	str	r7, [sp, #32]
 23ff73a:	6a15      	ldr	r5, [r2, #32]
 23ff73c:	4622      	mov	r2, r4
 23ff73e:	46ac      	mov	ip, r5
 23ff740:	b003      	add	sp, #12
 23ff742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff746:	4760      	bx	ip
 23ff748:	4619      	mov	r1, r3
 23ff74a:	9301      	str	r3, [sp, #4]
 23ff74c:	f000 f858 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff750:	9b01      	ldr	r3, [sp, #4]
 23ff752:	2800      	cmp	r0, #0
 23ff754:	d0ed      	beq.n	23ff732 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23ff756:	2006      	movs	r0, #6
 23ff758:	b003      	add	sp, #12
 23ff75a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff75c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23ff75c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff760:	460d      	mov	r5, r1
 23ff762:	4619      	mov	r1, r3
 23ff764:	4681      	mov	r9, r0
 23ff766:	4617      	mov	r7, r2
 23ff768:	4698      	mov	r8, r3
 23ff76a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23ff76e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23ff772:	f000 f845 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff776:	b190      	cbz	r0, 23ff79e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23ff778:	2d00      	cmp	r5, #0
 23ff77a:	6034      	str	r4, [r6, #0]
 23ff77c:	7137      	strb	r7, [r6, #4]
 23ff77e:	db09      	blt.n	23ff794 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23ff780:	1961      	adds	r1, r4, r5
 23ff782:	458a      	cmp	sl, r1
 23ff784:	bf0c      	ite	eq
 23ff786:	2106      	moveq	r1, #6
 23ff788:	2101      	movne	r1, #1
 23ff78a:	71b1      	strb	r1, [r6, #6]
 23ff78c:	2000      	movs	r0, #0
 23ff78e:	b001      	add	sp, #4
 23ff790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff794:	3502      	adds	r5, #2
 23ff796:	d1f9      	bne.n	23ff78c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff798:	2301      	movs	r3, #1
 23ff79a:	71b3      	strb	r3, [r6, #6]
 23ff79c:	e7f6      	b.n	23ff78c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff79e:	4554      	cmp	r4, sl
 23ff7a0:	d106      	bne.n	23ff7b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff7a2:	4659      	mov	r1, fp
 23ff7a4:	4648      	mov	r0, r9
 23ff7a6:	f000 f82b 	bl	23ff800 <_ZNKSt9type_infoeqERKS_>
 23ff7aa:	b108      	cbz	r0, 23ff7b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23ff7ac:	7177      	strb	r7, [r6, #5]
 23ff7ae:	e7ed      	b.n	23ff78c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23ff7b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23ff7b4:	463a      	mov	r2, r7
 23ff7b6:	4629      	mov	r1, r5
 23ff7b8:	6803      	ldr	r3, [r0, #0]
 23ff7ba:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23ff7be:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23ff7c2:	69dc      	ldr	r4, [r3, #28]
 23ff7c4:	4643      	mov	r3, r8
 23ff7c6:	46a4      	mov	ip, r4
 23ff7c8:	b001      	add	sp, #4
 23ff7ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff7ce:	4760      	bx	ip

023ff7d0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23ff7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff7d4:	4607      	mov	r7, r0
 23ff7d6:	460c      	mov	r4, r1
 23ff7d8:	4615      	mov	r5, r2
 23ff7da:	461e      	mov	r6, r3
 23ff7dc:	f7ff ff6d 	bl	23ff6ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23ff7e0:	b948      	cbnz	r0, 23ff7f6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23ff7e2:	68b8      	ldr	r0, [r7, #8]
 23ff7e4:	462a      	mov	r2, r5
 23ff7e6:	4621      	mov	r1, r4
 23ff7e8:	6803      	ldr	r3, [r0, #0]
 23ff7ea:	699f      	ldr	r7, [r3, #24]
 23ff7ec:	4633      	mov	r3, r6
 23ff7ee:	46bc      	mov	ip, r7
 23ff7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ff7f4:	4760      	bx	ip
 23ff7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff7fa <_ZNSt9type_infoD1Ev>:
 23ff7fa:	4770      	bx	lr

023ff7fc <_ZNKSt9type_info14__is_pointer_pEv>:
 23ff7fc:	2000      	movs	r0, #0
 23ff7fe:	4770      	bx	lr

023ff800 <_ZNKSt9type_infoeqERKS_>:
 23ff800:	4281      	cmp	r1, r0
 23ff802:	b508      	push	{r3, lr}
 23ff804:	d00e      	beq.n	23ff824 <_ZNKSt9type_infoeqERKS_+0x24>
 23ff806:	6840      	ldr	r0, [r0, #4]
 23ff808:	7803      	ldrb	r3, [r0, #0]
 23ff80a:	2b2a      	cmp	r3, #42	; 0x2a
 23ff80c:	d00c      	beq.n	23ff828 <_ZNKSt9type_infoeqERKS_+0x28>
 23ff80e:	6849      	ldr	r1, [r1, #4]
 23ff810:	780b      	ldrb	r3, [r1, #0]
 23ff812:	2b2a      	cmp	r3, #42	; 0x2a
 23ff814:	bf08      	it	eq
 23ff816:	3101      	addeq	r1, #1
 23ff818:	f7fc f91e 	bl	23fba58 <strcmp>
 23ff81c:	fab0 f080 	clz	r0, r0
 23ff820:	0940      	lsrs	r0, r0, #5
 23ff822:	bd08      	pop	{r3, pc}
 23ff824:	2001      	movs	r0, #1
 23ff826:	e7fc      	b.n	23ff822 <_ZNKSt9type_infoeqERKS_+0x22>
 23ff828:	2000      	movs	r0, #0
 23ff82a:	e7fa      	b.n	23ff822 <_ZNKSt9type_infoeqERKS_+0x22>

023ff82c <atexit>:
 23ff82c:	2300      	movs	r3, #0
 23ff82e:	4601      	mov	r1, r0
 23ff830:	461a      	mov	r2, r3
 23ff832:	4618      	mov	r0, r3
 23ff834:	f000 b882 	b.w	23ff93c <__register_exitproc>

023ff838 <memcmp>:
 23ff838:	3901      	subs	r1, #1
 23ff83a:	4402      	add	r2, r0
 23ff83c:	b510      	push	{r4, lr}
 23ff83e:	4290      	cmp	r0, r2
 23ff840:	d101      	bne.n	23ff846 <memcmp+0xe>
 23ff842:	2000      	movs	r0, #0
 23ff844:	e005      	b.n	23ff852 <memcmp+0x1a>
 23ff846:	7803      	ldrb	r3, [r0, #0]
 23ff848:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 23ff84c:	42a3      	cmp	r3, r4
 23ff84e:	d001      	beq.n	23ff854 <memcmp+0x1c>
 23ff850:	1b18      	subs	r0, r3, r4
 23ff852:	bd10      	pop	{r4, pc}
 23ff854:	3001      	adds	r0, #1
 23ff856:	e7f2      	b.n	23ff83e <memcmp+0x6>

023ff858 <memcpy>:
 23ff858:	440a      	add	r2, r1
 23ff85a:	1e43      	subs	r3, r0, #1
 23ff85c:	4291      	cmp	r1, r2
 23ff85e:	d100      	bne.n	23ff862 <memcpy+0xa>
 23ff860:	4770      	bx	lr
 23ff862:	b510      	push	{r4, lr}
 23ff864:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff868:	4291      	cmp	r1, r2
 23ff86a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff86e:	d1f9      	bne.n	23ff864 <memcpy+0xc>
 23ff870:	bd10      	pop	{r4, pc}

023ff872 <memmove>:
 23ff872:	4288      	cmp	r0, r1
 23ff874:	b510      	push	{r4, lr}
 23ff876:	eb01 0402 	add.w	r4, r1, r2
 23ff87a:	d902      	bls.n	23ff882 <memmove+0x10>
 23ff87c:	4284      	cmp	r4, r0
 23ff87e:	4623      	mov	r3, r4
 23ff880:	d807      	bhi.n	23ff892 <memmove+0x20>
 23ff882:	1e43      	subs	r3, r0, #1
 23ff884:	42a1      	cmp	r1, r4
 23ff886:	d008      	beq.n	23ff89a <memmove+0x28>
 23ff888:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff88c:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff890:	e7f8      	b.n	23ff884 <memmove+0x12>
 23ff892:	4402      	add	r2, r0
 23ff894:	4601      	mov	r1, r0
 23ff896:	428a      	cmp	r2, r1
 23ff898:	d100      	bne.n	23ff89c <memmove+0x2a>
 23ff89a:	bd10      	pop	{r4, pc}
 23ff89c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff8a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff8a4:	e7f7      	b.n	23ff896 <memmove+0x24>

023ff8a6 <memset>:
 23ff8a6:	4402      	add	r2, r0
 23ff8a8:	4603      	mov	r3, r0
 23ff8aa:	4293      	cmp	r3, r2
 23ff8ac:	d100      	bne.n	23ff8b0 <memset+0xa>
 23ff8ae:	4770      	bx	lr
 23ff8b0:	f803 1b01 	strb.w	r1, [r3], #1
 23ff8b4:	e7f9      	b.n	23ff8aa <memset+0x4>
	...

023ff8b8 <srand>:
 23ff8b8:	b538      	push	{r3, r4, r5, lr}
 23ff8ba:	4b10      	ldr	r3, [pc, #64]	; (23ff8fc <srand+0x44>)
 23ff8bc:	4604      	mov	r4, r0
 23ff8be:	681d      	ldr	r5, [r3, #0]
 23ff8c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8c2:	b9b3      	cbnz	r3, 23ff8f2 <srand+0x3a>
 23ff8c4:	2018      	movs	r0, #24
 23ff8c6:	f7fc fd35 	bl	23fc334 <malloc>
 23ff8ca:	4602      	mov	r2, r0
 23ff8cc:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff8ce:	b920      	cbnz	r0, 23ff8da <srand+0x22>
 23ff8d0:	4b0b      	ldr	r3, [pc, #44]	; (23ff900 <srand+0x48>)
 23ff8d2:	2142      	movs	r1, #66	; 0x42
 23ff8d4:	480b      	ldr	r0, [pc, #44]	; (23ff904 <srand+0x4c>)
 23ff8d6:	f7fc fd65 	bl	23fc3a4 <__assert_func>
 23ff8da:	490b      	ldr	r1, [pc, #44]	; (23ff908 <srand+0x50>)
 23ff8dc:	4b0b      	ldr	r3, [pc, #44]	; (23ff90c <srand+0x54>)
 23ff8de:	e9c0 1300 	strd	r1, r3, [r0]
 23ff8e2:	4b0b      	ldr	r3, [pc, #44]	; (23ff910 <srand+0x58>)
 23ff8e4:	2100      	movs	r1, #0
 23ff8e6:	6083      	str	r3, [r0, #8]
 23ff8e8:	230b      	movs	r3, #11
 23ff8ea:	8183      	strh	r3, [r0, #12]
 23ff8ec:	2001      	movs	r0, #1
 23ff8ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff8f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff8f4:	2200      	movs	r2, #0
 23ff8f6:	611c      	str	r4, [r3, #16]
 23ff8f8:	615a      	str	r2, [r3, #20]
 23ff8fa:	bd38      	pop	{r3, r4, r5, pc}
 23ff8fc:	1007aaf4 	.word	0x1007aaf4
 23ff900:	023fff3d 	.word	0x023fff3d
 23ff904:	023fff54 	.word	0x023fff54
 23ff908:	abcd330e 	.word	0xabcd330e
 23ff90c:	e66d1234 	.word	0xe66d1234
 23ff910:	0005deec 	.word	0x0005deec

023ff914 <strcpy>:
 23ff914:	4603      	mov	r3, r0
 23ff916:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff91a:	f803 2b01 	strb.w	r2, [r3], #1
 23ff91e:	2a00      	cmp	r2, #0
 23ff920:	d1f9      	bne.n	23ff916 <strcpy+0x2>
 23ff922:	4770      	bx	lr

023ff924 <strnlen>:
 23ff924:	4602      	mov	r2, r0
 23ff926:	4401      	add	r1, r0
 23ff928:	b510      	push	{r4, lr}
 23ff92a:	428a      	cmp	r2, r1
 23ff92c:	4613      	mov	r3, r2
 23ff92e:	d003      	beq.n	23ff938 <strnlen+0x14>
 23ff930:	781c      	ldrb	r4, [r3, #0]
 23ff932:	3201      	adds	r2, #1
 23ff934:	2c00      	cmp	r4, #0
 23ff936:	d1f8      	bne.n	23ff92a <strnlen+0x6>
 23ff938:	1a18      	subs	r0, r3, r0
 23ff93a:	bd10      	pop	{r4, pc}

023ff93c <__register_exitproc>:
 23ff93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff940:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffa00 <__register_exitproc+0xc4>
 23ff944:	4606      	mov	r6, r0
 23ff946:	461f      	mov	r7, r3
 23ff948:	460d      	mov	r5, r1
 23ff94a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff94e:	4691      	mov	r9, r2
 23ff950:	f000 f858 	bl	23ffa04 <__retarget_lock_acquire_recursive>
 23ff954:	4b26      	ldr	r3, [pc, #152]	; (23ff9f0 <__register_exitproc+0xb4>)
 23ff956:	681c      	ldr	r4, [r3, #0]
 23ff958:	b934      	cbnz	r4, 23ff968 <__register_exitproc+0x2c>
 23ff95a:	4c26      	ldr	r4, [pc, #152]	; (23ff9f4 <__register_exitproc+0xb8>)
 23ff95c:	601c      	str	r4, [r3, #0]
 23ff95e:	4b26      	ldr	r3, [pc, #152]	; (23ff9f8 <__register_exitproc+0xbc>)
 23ff960:	b113      	cbz	r3, 23ff968 <__register_exitproc+0x2c>
 23ff962:	681b      	ldr	r3, [r3, #0]
 23ff964:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff968:	6863      	ldr	r3, [r4, #4]
 23ff96a:	2b1f      	cmp	r3, #31
 23ff96c:	dd07      	ble.n	23ff97e <__register_exitproc+0x42>
 23ff96e:	f8d8 0000 	ldr.w	r0, [r8]
 23ff972:	f000 f849 	bl	23ffa08 <__retarget_lock_release_recursive>
 23ff976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ff97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ff97e:	b35e      	cbz	r6, 23ff9d8 <__register_exitproc+0x9c>
 23ff980:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ff984:	b988      	cbnz	r0, 23ff9aa <__register_exitproc+0x6e>
 23ff986:	4b1d      	ldr	r3, [pc, #116]	; (23ff9fc <__register_exitproc+0xc0>)
 23ff988:	b923      	cbnz	r3, 23ff994 <__register_exitproc+0x58>
 23ff98a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff98e:	f000 f83a 	bl	23ffa06 <__retarget_lock_release>
 23ff992:	e7f0      	b.n	23ff976 <__register_exitproc+0x3a>
 23ff994:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff998:	f7fc fccc 	bl	23fc334 <malloc>
 23ff99c:	2800      	cmp	r0, #0
 23ff99e:	d0f4      	beq.n	23ff98a <__register_exitproc+0x4e>
 23ff9a0:	2300      	movs	r3, #0
 23ff9a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff9a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff9aa:	6863      	ldr	r3, [r4, #4]
 23ff9ac:	2201      	movs	r2, #1
 23ff9ae:	2e02      	cmp	r6, #2
 23ff9b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff9b4:	fa02 f203 	lsl.w	r2, r2, r3
 23ff9b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff9bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff9c0:	ea43 0302 	orr.w	r3, r3, r2
 23ff9c4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff9c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff9cc:	bf02      	ittt	eq
 23ff9ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff9d2:	4313      	orreq	r3, r2
 23ff9d4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff9d8:	6863      	ldr	r3, [r4, #4]
 23ff9da:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9de:	1c5a      	adds	r2, r3, #1
 23ff9e0:	3302      	adds	r3, #2
 23ff9e2:	6062      	str	r2, [r4, #4]
 23ff9e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff9e8:	f000 f80e 	bl	23ffa08 <__retarget_lock_release_recursive>
 23ff9ec:	2000      	movs	r0, #0
 23ff9ee:	e7c4      	b.n	23ff97a <__register_exitproc+0x3e>
 23ff9f0:	1007afe0 	.word	0x1007afe0
 23ff9f4:	1007af54 	.word	0x1007af54
 23ff9f8:	00000000 	.word	0x00000000
 23ff9fc:	023fc335 	.word	0x023fc335
 23ffa00:	1007ab58 	.word	0x1007ab58

023ffa04 <__retarget_lock_acquire_recursive>:
 23ffa04:	4770      	bx	lr

023ffa06 <__retarget_lock_release>:
 23ffa06:	4770      	bx	lr

023ffa08 <__retarget_lock_release_recursive>:
 23ffa08:	4770      	bx	lr
	...

023ffa0c <link_const_data_start>:
 23ffa0c:	00000000 	.word	0x00000000
 23ffa10:	34fb0000 	.word	0x34fb0000
 23ffa14:	00805f9b 	.word	0x00805f9b
 23ffa18:	10008000 	.word	0x10008000
	...

023ffa24 <dynalib_user>:
 23ffa24:	023fba7d 023fbaa5 023fbaa9 00000000     }.?...?...?.....
 23ffa34:	30344536 31303030 4135422d 33462d33     6E400001-B5A3-F3
 23ffa44:	452d3339 2d394130 45303545 43443432     93-E0A9-E50E24DC
 23ffa54:	45394143 34453600 30303030 35422d32     CA9E.6E400002-B5
 23ffa64:	462d3341 2d333933 39413045 3035452d     A3-F393-E0A9-E50
 23ffa74:	44343245 39414343 45360045 30303034     E24DCCA9E.6E4000
 23ffa84:	422d3330 2d334135 33393346 4130452d     03-B5A3-F393-E0A
 23ffa94:	35452d39 34324530 41434344 00004539     9-E50E24DCCA9E..

023ffaa4 <_ZTVN5spark12NetworkClassE>:
	...
 23ffaac:	023fc3dd 023fc3e7 023fc3f1 023fc3fb     ..?...?...?...?.
 23ffabc:	023fc405 023fc411 023fc41d 023fc425     ..?...?...?.%.?.
 23ffacc:	023fc42d 023fc439 023fc441 023fc44b     -.?.9.?.A.?.K.?.
 23ffadc:	023fc455                                U.?.

023ffae0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffae8:	023fc59f 023fc595 023fc58b 023fc541     ..?...?...?.A.?.
 23ffaf8:	023fc57f 023fc573 023fc41d 023fc425     ..?.s.?...?.%.?.
 23ffb08:	023fc567 023fc55f 023fc555 023fc54b     g.?._.?.U.?.K.?.
 23ffb18:	023fc455                                U.?.

023ffb1c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffb24 <_ZTV9USBSerial>:
	...
 23ffb2c:	023fc5fb 023fc663 023fc639 023fc9c5     ..?.c.?.9.?...?.
 23ffb3c:	023fc62b 023fc5fd 023fc60d 023fc65d     +.?...?...?.].?.
 23ffb4c:	023fc61d 023fc5f5                       ..?...?.

023ffb54 <_ZTV9IPAddress>:
	...
 23ffb5c:	023fc709 023fc6f9 023fc6fb 252d5925     ..?...?...?.%Y-%
 23ffb6c:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 23ffb7c:	74637361 00656d69 00707061 65737341     asctime.app.Asse
 23ffb8c:	6f697472 6961466e 6572756c 6c616620     rtionFailure fal
 23ffb9c:	77006573 6e697269 6c622e67 74530065     se.wiring.ble.St
 23ffbac:	20747261 63736964 7265766f 20676e69     art discovering 
 23ffbbc:	76726573 73656369 ffff002e ffffffff     services........
 23ffbcc:	73734100 69747265 61466e6f 72756c69     .AssertionFailur
 23ffbdc:	61682065 6c625f6c 74735f65 5f6b6361     e hal_ble_stack_
 23ffbec:	74696e69 6c756e28 7274706c 3d3d2029     init(nullptr) ==
 23ffbfc:	53595320 5f4d4554 4f525245 4f4e5f52      SYSTEM_ERROR_NO
 23ffc0c:	5000454e 20726565 69766564 69206563     NE.Peer device i
 23ffc1c:	696d2073 6e697373 46002167 656c6961     s missing!.Faile
 23ffc2c:	6f742064 6c6c6120 7461636f 656d2065     d to allocate me
 23ffc3c:	79726f6d 61460021 64656c69 206f7420     mory!.Failed to 
 23ffc4c:	65707061 7020646e 20726565 746e6543     append peer Cent
 23ffc5c:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
 23ffc6c:	65746365 69440064 6e6f6373 7463656e     ected.Disconnect
 23ffc7c:	46006465 656c6961 6f742064 70706120     ed.Failed to app
 23ffc8c:	20646e65 63736964 7265766f 73206465     end discovered s
 23ffc9c:	69767265 002e6563 72617453 69642074     ervice..Start di
 23ffcac:	766f6373 6e697265 68632067 63617261     scovering charac
 23ffcbc:	69726574 63697473 666f2073 72657320     teristics of ser
 23ffccc:	65636976 7325203a 6143002e 746f6e6e     vice: %s..Cannot
 23ffcdc:	64646120 77656e20 65657020 65642072      add new peer de
 23ffcec:	65636976 654e002e 65702077 68706972     vice..New periph
 23ffcfc:	6c617265 20736920 6e6e6f63 65746365     eral is connecte
 23ffd0c:	43002e64 61726168 72657463 69747369     d..Characteristi
 23ffd1c:	69642063 766f6373 64657265 6944002e     c discovered..Di
 23ffd2c:	766f6373 64657265 61686320 74636172     scovered charact
 23ffd3c:	73697265 27636974 61682073 656c646e     eristic's handle
 23ffd4c:	20736920 61766e69 2e64696c 69614600      is invalid..Fai
 23ffd5c:	2064656c 61206f74 6e657070 69642064     led to append di
 23ffd6c:	766f6373 64657265 61686320 74636172     scovered charact
 23ffd7c:	73697265 2e636974 00000000              eristic.....

023ffd88 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffd90:	023fca5d 023fcac1 023fcc37 023fcaeb     ].?...?.7.?...?.
 23ffda0:	023fca61                                a.?.

023ffda4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdac:	023fca59 023fcacf 023fca5b 023fcaf1     Y.?...?.[.?...?.
 23ffdbc:	023fca81                                ..?.

023ffdc0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdc8:	023fca57 023fcadd 023fd819 023fcaf7     W.?...?...?...?.
 23ffdd8:	023fcaa1                                ..?.

023ffddc <_ZTV11USARTSerial>:
	...
 23ffde4:	023ff141 023ff1ad 023ff185 023fc9c5     A.?...?...?...?.
 23ffdf4:	023ff155 023ff171 023ff163 023ff17f     U.?.q.?.c.?...?.
 23ffe04:	023ff143 023ff147                       C.?.G.?.

023ffe0c <_ZTVN5spark13EthernetClassE>:
	...
 23ffe14:	023ff26f 023ff265 023ff25b 023ff251     o.?.e.?.[.?.Q.?.
 23ffe24:	023ff245 023ff239 023fc41d 023fc425     E.?.9.?...?.%.?.
 23ffe34:	023ff22d 023ff225 023ff21b 023ff211     -.?.%.?...?...?.
 23ffe44:	023fc455                                U.?.

023ffe48 <_ZSt7nothrow>:
	...

023ffe49 <_ZTSSt19_Sp_make_shared_tag>:
 23ffe49:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffe59:	5f646572 00676174                        red_tag....

023ffe64 <_ZTISt19_Sp_make_shared_tag>:
 23ffe64:	023ffea4 023ffe49                       ..?.I.?.

023ffe6c <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffe6c:	023fff04 023ffe78 023fff28              ..?.x.?.(.?.

023ffe78 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffe78:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffe88:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffe98:	00000045                                E...

023ffe9c <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffe9c:	00000000 023ffe6c 023ff655 023ff669     ....l.?.U.?.i.?.
 23ffeac:	023ff7fd 023ff7fd 023ff6d3 023ff615     ..?...?...?...?.
 23ffebc:	023ff6bb 023ff67d 023ff647              ..?.}.?.G.?.

023ffec8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffec8:	023fff04 023ffed4 023ffe6c              ..?...?.l.?.

023ffed4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffed4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffee4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffef4:	456f666e 00000000                       nfoE....

023ffefc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffefc:	00000000 023ffec8 023ff6fd 023ff711     ......?...?...?.
 23fff0c:	023ff7fd 023ff7fd 023ff6d3 023ff615     ..?...?...?...?.
 23fff1c:	023ff7d1 023ff75d 023ff725              ..?.].?.%.?.

023fff28 <_ZTISt9type_info>:
 23fff28:	023ffea4 023fff30                       ..?.0.?.

023fff30 <_ZTSSt9type_info>:
 23fff30:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23fff40:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23fff50:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23fff60:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23fff70:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23fff80:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23fff90:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23fffa0:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23fffb0:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23fffc0:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fbc79 	.word	0x023fbc79
 23fffd8:	023fc52d 	.word	0x023fc52d
 23fffdc:	023fc5a9 	.word	0x023fc5a9
 23fffe0:	023fc971 	.word	0x023fc971
 23fffe4:	023fc97d 	.word	0x023fc97d
 23fffe8:	023fc9b5 	.word	0x023fc9b5
 23fffec:	023ff131 	.word	0x023ff131
 23ffff0:	023ff1ed 	.word	0x023ff1ed
 23ffff4:	023ff279 	.word	0x023ff279
